As depicted in Section II, previous frameworks fail to
achieve the EPE metrics due to fixed control flow, lack of view
on arbitrary vertex subsets, neighborhood-exchange limitation
and the dependence on the shared-memory architecture. To
address the challenges, we propose the platform programming
model by making a sufficient extension to Ligra since Ligra
addressed the first two challenges. In this section, we first
show the interface of platform, and how to flexibly express
graph algorithms with the given primitives. Then we show
that our platform model can be fully compatible with the
well-known vertex-centric models. Finally, we highlight some
characteristics of platform to show its advantages.
A. Interface
platform is a functional programming model specific for
distributed graph processing. It follows the Bulk Synchronous
Parallel (BSP) computing paradigm [28], with each of the
primary functions (SIZE, processVertices and processEdges) constitutes a single superstep. We made the interface of platform
much similar to Ligra’s, therefore, it is easy to port a program
written in Ligra to our model. The vertexSubset type represents
a set of vertices of the graph G, which only contains a set
of integers, representing the vertex id for each vertex in this
set. The associated properties of vertices are maintained only
once for a graph, shared by all vertexSubsets. The following
describes the APIs of platform based on this type.
(1). SIZE(U : vertexSubset) → N
This function returns the size of a vertexSubset, i.e., |U|.
(2). processVertices(U : vertexSubset,
F(v : vertex) → bool,
M(v : vertex) → vertex) → vertexSubset
The processVertices interface applies the map function M to
each vertex in U that passes the condition checking function
F. The ids of the output vertices form the resulting vertexSubset. That is to say, we have:
Out = {v.id|v.id ∈ U ∧ F(v) = true}
vnew = M(v), v.id ∈ U ∧ F(v) = true
This function is used to conduct local updates. Specially,
the M function could be omitted for implementing the filter
semantics, with the vertex data unchanged. The execution of
processVertices on each vertex is independent, thus it can run
in parallel naturally, as shown in Algorithm 1.

applies the update logic to the specific edges with source
vertex in U and target vertex satisfying C. H represents the
edge set to conduct updates, which is E in common cases.
We allow the users to define arbitrary edge sets they want
dynamically at runtime, even virtual edges generated during
the algorithm’s execution. The edge set can be defined through
defining a function which maps a source vertex id to a set of
ids of the targets. We also provide some pre-defined operators
for convenience, such as reverse edges (reverse(E)), twohop neighbors (join(E, E)), or edges with targets in U
(join(E, U)). This extension makes the communication
beyond the neighborhood-exchange limitation.
If a chosen edge passes the condition checking (F), the
map function M is applied on it. The output of the function
M represents a temporary new value of the target vertex. This
new value is applied immediately and sequentially if it is in
the pull mode, while in the push mode, another parameter R
is required to apply all the temporary new values on a specific
vertex to get its final value. It is unnecessary in the Ligra’s API
because it is a shared-memory framework, which uses atomic
operations to ensure consistency. On the contrary, the platform
model is designed for distributed systems, so we use a reduce
function R, which takes an old value and a new value for a
single vertex, and reduces them to output the updated state.
The updated target vertices form the output set of processEdges.
The reduce function R should be associative and commutative
to ensure correctness, or R is not required for sequentially
applying M, i.e., to run processEdges always in the pull mode,
as we will explained in Section III-C.
More precisely, the active edge set is defined as:
Ea = {(s, d) ∈ H|s.id ∈ U ∧ C(d) = true}.
Then, F and M are applied to each element in Ea. If it is in
the pull mode:
dnew = M(s, dnew),(s, d) ∈ Ea ∧ F(s, dnew) = true.
Or, in the push mode:
T = {M(s, d)|(s, d) ∈ Ea ∧ F(s, d) = true},
dnew = R(..., R(T d
2 , R(T d
1 , d))), T d
i ∈ T ∧ T d
i .id = d.id.
And the ids of the updated targets form output set:
Out = {d.id|(s, d) ∈ Ea ∧ F(s, d) = true}.
The function C is useful in algorithms where a value associated with a vertex only needs to be updated once. We retain the
default function used by Ligra (CTURE) which always returns
true, since the user does not need this functionality sometimes.
Similarly, the F function of processEdges and processVertices can
also be supplied using CTURE, if it is unnecessary.
The auxiliary operators. Other auxiliary APIs are provided
by platform for conveniently conducting set operations, including UNION, MINUS, INTERSACT, ADD, CONTAIN and so on.
B. Examples
To demonstrate the usage of platform and display its ability
to express graph algorithms, we show two representative examples. Please refer to the full version [1] for more examples.
Breadth First Search (BFS). As with standard parallel BFS
algorithms [31], [32], we implement BFS in platform, as shown
in Algorithm 2. For each vertex, a property named dis is
Algorithm 2 BREADTH-FIRST SEARCH
1: function INIT(v, root):
2: v.dis = (v.id == root?0 : INF)
3: return v
4: function FILTER(v, root): return v.id == root
5: function UPDATE(s, d):
6: d.dis = s.dis + 1
7: return d
8: function COND(v): return v.dis == INF
9: function REDUCE(t, d): return t
10:
11: U = processVertices(V , CTRUE, INIT.bind(0))  initialize
12: U = processVertices(V , FILTER.bind(0))  root=0
13: while SIZE(U) = 0 do
14: U = processEdges(U, E, CTRUE, UPDATE, COND, REDUCE)
created and initialized to represent the distance from the root
to this vertex. On each iteration/superstep i (starting from 0),
the frontier Ui contains all vertices reachable from the root
in i hops (v.dis = i, ∀v ∈ Ui). At the beginning of the
algorithm, a vertexSubset that only contains the root is created,
representing the frontier. To use a global variable such as r in a
local function, we provide a bind operator to supply additional
input parameters (line 11). In each of the following supersteps,
the processEdges function is applied on outgoing edges of the
frontier, to check if any neighbor d of an active vertex s is
visited. If d has not been visited, updates it and then adds it to
the next frontier. The COND function tells processEdges to only
consider the neighbors not been visited. Although it could be
replaced by CTRUE, we provide it for efficiency. As dis for a
vertex d is ensured to be same no matter it is updated by which
neighbor in the same superstep, we can simply remain any new
value for it in the REDUCE function. The iterative execution
will terminate when there are no vertices in the frontier, means
that all reachable vertices from the root have been visited.

template<class VTYPE, class F, class M>
inline VSet processVertices(VSet &U, F &f, M &m, bool b = true) {
	if (b)
		return U.Filter(use_f_v(f)).Local(use_map_v(m));
	else
		return U.Filter(use_f_v(f)).Local(use_map_v(m), NONE);

}

template<class VTYPE, class F>
inline VSet processVertices(VSet &U, F &f) {
	return U.Filter(use_f_v(f));
}

template<class VTYPE, class F, class M, class C, class H>
VSet processEdgesDenseFunction(Graph<VTYPE> &G, VSet &U, H h, F &f, M &m, C &c, bool b = true) {
	return processEdgesDenseFunction(G, U, h, All, f, m, c, b);
}

template<class VTYPE, class F, class M, class C>
VSet processEdgesDenseFunction(Graph<VTYPE> &G, VSet &U, int h, VSet &T, F &f, M &m, C &c, bool b = true) {
	bool flag = ((&U) == (&All));
	if (!flag) U.sync();
	VSet res;
	if (h == EU) {
		DefinePull(pull) {
			if (use_filter(c))
				for_nb(if (flag || U.contain(nb_id)) if (use_f_dense(f)) use_dense(m); if (!use_filter(c)) break);
		};
		if (b) res = T.Pull(use_pull(pull));
		else res = T.Pull(use_pull(pull), NONE);
	} else if (h == ED) {
		DefinePull(pull) {
			if (use_filter(c))
				for_in(if (flag || U.contain(nb_id)) if (use_f_dense(f)) use_dense(m); if (!use_filter(c)) break);
		};
		if (b) res = T.Pull(use_pull(pull));
		else res = T.Pull(use_pull(pull), NONE);
	} else if (h == ER) {
		DefinePull(pull) {
			if (use_filter(c))
				for_out(if (flag || U.contain(nb_id)) if (use_f_dense(f)) use_dense(m); if (!use_filter(c)) break);
		};
		if (b) res = T.Pull(use_pull(pull));
		else res = T.Pull(use_pull(pull), NONE);
	} else {
		res = U;
	}
	return res;
}

template<class VTYPE, class F, class M, class C, class H>
VSet processEdgesDenseFunction(Graph<VTYPE> &G, VSet &U, H &h, VSet &T, F &f, M &m, C &c, bool b = true) {
	bool flag = ((&U) == (&All));
	if (!flag) U.sync();
	VSet res;
	DefinePull(pull) {
		auto e = use_edge(h);
		for (auto &i: e) {
			VTYPE nb = get_v(i);
			if (flag || U.contain(i))
			if (use_filter(c) && use_f_dense(f))
				use_dense(m);
		}
	};
	if (b) res = T.Pull(use_pull(pull));
	else res = T.Pull(use_pull(pull), NONE);
	return res;
}

template<class VTYPE, class F, class M, class C, class R>
VSet processEdgesSparseFunction(Graph<VTYPE> &G, VSet &U, int h, F &f, M &m, C &c, R &r) {
	VSet res;
	if (h == EU) {
		DefineCmb(cmb) {
			for_nb(if (use_cond(c) && use_f_sparse(f)) push_to(nb_id, _v = nb, use_sparse(m)));
		};
		res = U.Push(use_cmb(cmb), use_reduce(r));
	} else if (h == ED) {
		DefineCmb(cmb) {
			for_out(if (use_cond(c) && use_f_sparse(f)) push_to(nb_id, _v = nb, use_sparse(m)));
		};
		res = U.Push(use_cmb(cmb), use_reduce(r));
	} else if (h == ER) {
		DefineCmb(cmb) {
			for_in(if (use_cond(c) && use_f_sparse(f)) push_to(nb_id, _v = nb, use_sparse(m)));
		};
		res = U.Push(use_cmb(cmb), use_reduce(r));
	} else {
		res = U;
	}
	return res;
}

template<class VTYPE, class F, class M, class C, class R, class H>
VSet processEdgesSparseFunction(Graph<VTYPE> &G, VSet &U, H &h, F &f, M &m, C &c, R &r) {
	VSet res;
	DefineCmb(cmb) {
		auto e = use_edge(h);
		for (auto &i: e) {
			VTYPE nb = get_v(i);
			if (use_cond(c) && use_f_sparse(f))
				push_to(i, _v = nb, use_sparse(m));
		}
	};
	res = U.Push(use_cmb(cmb), use_reduce(r));
	return res;
}


template<class VTYPE, class F, class M, class C, class R, class H>
VSet processEdgesFunction(Graph<VTYPE> &G, VSet &U, H h, F &f, M &m, C &c, R &r) {
	int len = Size(U);
	if (len > THRESHOLD)
		return processEdgesDenseFunction(G, U, h, f, m, c);
	else
		return processEdgesSparseFunction(G, U, h, f, m, c, r);
}

template<class VTYPE, class F, class M, class C, class R, class H>
VSet processEdgesFunction(Graph<VTYPE> &G, VSet &U, H h, VSet &T, F &f, M &m, C &c, R &r) {
	return processEdgesDenseFunction(G, U, h, T, f, m, c);
}

#endif
