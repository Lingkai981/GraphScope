Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_instrument", "development/how_to_submit_pr", "development/how_to_test", "flex/coordinator", "flex/coordinator/restful_api", "flex/interactive/configuration", "flex/interactive/custom_graph_data", "flex/interactive/data_import", "flex/interactive/data_model", "flex/interactive/deployment", "flex/interactive/dev_guide", "flex/interactive/development/cpp_procedure", "flex/interactive/development/cypher_procedure", "flex/interactive/development/dev_and_test", "flex/interactive/development/java/AdminServiceGraphManagementApi", "flex/interactive/development/java/AdminServiceJobManagementApi", "flex/interactive/development/java/AdminServiceProcedureManagementApi", "flex/interactive/development/java/AdminServiceServiceManagementApi", "flex/interactive/development/java/BaseEdgeType", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/java/BasePropertyMeta", "flex/interactive/development/java/BaseVertexType", "flex/interactive/development/java/BaseVertexTypeXCsrParams", "flex/interactive/development/java/ColumnMapping", "flex/interactive/development/java/CreateEdgeType", "flex/interactive/development/java/CreateGraphRequest", "flex/interactive/development/java/CreateGraphResponse", "flex/interactive/development/java/CreateGraphSchemaRequest", "flex/interactive/development/java/CreateProcedureRequest", "flex/interactive/development/java/CreateProcedureResponse", "flex/interactive/development/java/CreatePropertyMeta", "flex/interactive/development/java/CreateVertexType", "flex/interactive/development/java/DateType", "flex/interactive/development/java/EdgeData", "flex/interactive/development/java/EdgeMapping", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/java/EdgeMappingTypeTriplet", "flex/interactive/development/java/EdgeRequest", "flex/interactive/development/java/EdgeStatistics", "flex/interactive/development/java/FixedChar", "flex/interactive/development/java/FixedCharChar", "flex/interactive/development/java/GSDataType", "flex/interactive/development/java/GetEdgeType", "flex/interactive/development/java/GetGraphResponse", "flex/interactive/development/java/GetGraphSchemaResponse", "flex/interactive/development/java/GetGraphStatisticsResponse", "flex/interactive/development/java/GetProcedureResponse", "flex/interactive/development/java/GetPropertyMeta", "flex/interactive/development/java/GetVertexType", "flex/interactive/development/java/GraphServiceEdgeManagementApi", "flex/interactive/development/java/GraphServiceVertexManagementApi", "flex/interactive/development/java/JobResponse", "flex/interactive/development/java/JobStatus", "flex/interactive/development/java/LongText", "flex/interactive/development/java/Parameter", "flex/interactive/development/java/PrimitiveType", "flex/interactive/development/java/Property", "flex/interactive/development/java/PropertyArray", "flex/interactive/development/java/QueryRequest", "flex/interactive/development/java/QueryServiceApi", "flex/interactive/development/java/SchemaMapping", "flex/interactive/development/java/SchemaMappingLoadingConfig", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/java/ServiceStatus", "flex/interactive/development/java/StartServiceRequest", "flex/interactive/development/java/StoredProcedureMeta", "flex/interactive/development/java/StringType", "flex/interactive/development/java/StringTypeString", "flex/interactive/development/java/TemporalType", "flex/interactive/development/java/TemporalTypeTemporal", "flex/interactive/development/java/TimeStampType", "flex/interactive/development/java/TypedValue", "flex/interactive/development/java/UpdateProcedureRequest", "flex/interactive/development/java/UploadFileResponse", "flex/interactive/development/java/UtilsApi", "flex/interactive/development/java/VarChar", "flex/interactive/development/java/VarCharVarChar", "flex/interactive/development/java/VertexData", "flex/interactive/development/java/VertexMapping", "flex/interactive/development/java/VertexRequest", "flex/interactive/development/java/VertexStatistics", "flex/interactive/development/java/VertexTypePairStatistics", "flex/interactive/development/java/java_sdk", "flex/interactive/development/python/AdminServiceGraphManagementApi", "flex/interactive/development/python/AdminServiceJobManagementApi", "flex/interactive/development/python/AdminServiceProcedureManagementApi", "flex/interactive/development/python/AdminServiceServiceManagementApi", "flex/interactive/development/python/BaseEdgeType", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/python/BasePropertyMeta", "flex/interactive/development/python/BaseVertexType", "flex/interactive/development/python/BaseVertexTypeXCsrParams", "flex/interactive/development/python/ColumnMapping", "flex/interactive/development/python/CreateEdgeType", "flex/interactive/development/python/CreateGraphRequest", "flex/interactive/development/python/CreateGraphResponse", "flex/interactive/development/python/CreateGraphSchemaRequest", "flex/interactive/development/python/CreateProcedureRequest", "flex/interactive/development/python/CreateProcedureResponse", "flex/interactive/development/python/CreatePropertyMeta", "flex/interactive/development/python/CreateVertexType", "flex/interactive/development/python/DateType", "flex/interactive/development/python/EdgeData", "flex/interactive/development/python/EdgeMapping", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/python/EdgeMappingTypeTriplet", "flex/interactive/development/python/EdgeRequest", "flex/interactive/development/python/EdgeStatistics", "flex/interactive/development/python/FixedChar", "flex/interactive/development/python/FixedCharChar", "flex/interactive/development/python/GSDataType", "flex/interactive/development/python/GetEdgeType", "flex/interactive/development/python/GetGraphResponse", "flex/interactive/development/python/GetGraphSchemaResponse", "flex/interactive/development/python/GetGraphStatisticsResponse", "flex/interactive/development/python/GetProcedureResponse", "flex/interactive/development/python/GetPropertyMeta", "flex/interactive/development/python/GetVertexType", "flex/interactive/development/python/GraphServiceEdgeManagementApi", "flex/interactive/development/python/GraphServiceVertexManagementApi", "flex/interactive/development/python/JobResponse", "flex/interactive/development/python/JobStatus", "flex/interactive/development/python/LongText", "flex/interactive/development/python/ModelProperty", "flex/interactive/development/python/Parameter", "flex/interactive/development/python/PrimitiveType", "flex/interactive/development/python/PropertyArray", "flex/interactive/development/python/QueryRequest", "flex/interactive/development/python/QueryServiceApi", "flex/interactive/development/python/SchemaMapping", "flex/interactive/development/python/SchemaMappingLoadingConfig", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/python/ServiceStatus", "flex/interactive/development/python/StartServiceRequest", "flex/interactive/development/python/StoredProcedureMeta", "flex/interactive/development/python/StringType", "flex/interactive/development/python/StringTypeString", "flex/interactive/development/python/TemporalType", "flex/interactive/development/python/TemporalTypeTemporal", "flex/interactive/development/python/TimeStampType", "flex/interactive/development/python/TypedValue", "flex/interactive/development/python/UpdateProcedureRequest", "flex/interactive/development/python/UploadFileResponse", "flex/interactive/development/python/UtilsApi", "flex/interactive/development/python/VarChar", "flex/interactive/development/python/VarCharVarChar", "flex/interactive/development/python/VertexData", "flex/interactive/development/python/VertexMapping", "flex/interactive/development/python/VertexRequest", "flex/interactive/development/python/VertexStatistics", "flex/interactive/development/python/VertexTypePairStatistics", "flex/interactive/development/python/python_sdk", "flex/interactive/development/restful_api", "flex/interactive/getting_started", "flex/interactive/glossary", "flex/interactive/installation", "flex/interactive/overview", "flex/interactive/sdk", "flex/interactive/stored_procedures", "flex/interactive/tools", "flex/interactive/tools/admin_tool", "flex/interactive_intro", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/llm_assistant", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/optimizer", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "learning_engine/tutorial_node_classification_pyg_k8s", "learning_engine/tutorial_node_classification_pyg_local", "loading_graphs", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_instrument.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "flex/coordinator.md", "flex/coordinator/restful_api.rst", "flex/interactive/configuration.md", "flex/interactive/custom_graph_data.md", "flex/interactive/data_import.md", "flex/interactive/data_model.md", "flex/interactive/deployment.md", "flex/interactive/dev_guide.md", "flex/interactive/development/cpp_procedure.md", "flex/interactive/development/cypher_procedure.md", "flex/interactive/development/dev_and_test.md", "flex/interactive/development/java/AdminServiceGraphManagementApi.md", "flex/interactive/development/java/AdminServiceJobManagementApi.md", "flex/interactive/development/java/AdminServiceProcedureManagementApi.md", "flex/interactive/development/java/AdminServiceServiceManagementApi.md", "flex/interactive/development/java/BaseEdgeType.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/java/BasePropertyMeta.md", "flex/interactive/development/java/BaseVertexType.md", "flex/interactive/development/java/BaseVertexTypeXCsrParams.md", "flex/interactive/development/java/ColumnMapping.md", "flex/interactive/development/java/CreateEdgeType.md", "flex/interactive/development/java/CreateGraphRequest.md", "flex/interactive/development/java/CreateGraphResponse.md", "flex/interactive/development/java/CreateGraphSchemaRequest.md", "flex/interactive/development/java/CreateProcedureRequest.md", "flex/interactive/development/java/CreateProcedureResponse.md", "flex/interactive/development/java/CreatePropertyMeta.md", "flex/interactive/development/java/CreateVertexType.md", "flex/interactive/development/java/DateType.md", "flex/interactive/development/java/EdgeData.md", "flex/interactive/development/java/EdgeMapping.md", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/java/EdgeMappingTypeTriplet.md", "flex/interactive/development/java/EdgeRequest.md", "flex/interactive/development/java/EdgeStatistics.md", "flex/interactive/development/java/FixedChar.md", "flex/interactive/development/java/FixedCharChar.md", "flex/interactive/development/java/GSDataType.md", "flex/interactive/development/java/GetEdgeType.md", "flex/interactive/development/java/GetGraphResponse.md", "flex/interactive/development/java/GetGraphSchemaResponse.md", "flex/interactive/development/java/GetGraphStatisticsResponse.md", "flex/interactive/development/java/GetProcedureResponse.md", "flex/interactive/development/java/GetPropertyMeta.md", "flex/interactive/development/java/GetVertexType.md", "flex/interactive/development/java/GraphServiceEdgeManagementApi.md", "flex/interactive/development/java/GraphServiceVertexManagementApi.md", "flex/interactive/development/java/JobResponse.md", "flex/interactive/development/java/JobStatus.md", "flex/interactive/development/java/LongText.md", "flex/interactive/development/java/Parameter.md", "flex/interactive/development/java/PrimitiveType.md", "flex/interactive/development/java/Property.md", "flex/interactive/development/java/PropertyArray.md", "flex/interactive/development/java/QueryRequest.md", "flex/interactive/development/java/QueryServiceApi.md", "flex/interactive/development/java/SchemaMapping.md", "flex/interactive/development/java/SchemaMappingLoadingConfig.md", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/java/ServiceStatus.md", "flex/interactive/development/java/StartServiceRequest.md", "flex/interactive/development/java/StoredProcedureMeta.md", "flex/interactive/development/java/StringType.md", "flex/interactive/development/java/StringTypeString.md", "flex/interactive/development/java/TemporalType.md", "flex/interactive/development/java/TemporalTypeTemporal.md", "flex/interactive/development/java/TimeStampType.md", "flex/interactive/development/java/TypedValue.md", "flex/interactive/development/java/UpdateProcedureRequest.md", "flex/interactive/development/java/UploadFileResponse.md", "flex/interactive/development/java/UtilsApi.md", "flex/interactive/development/java/VarChar.md", "flex/interactive/development/java/VarCharVarChar.md", "flex/interactive/development/java/VertexData.md", "flex/interactive/development/java/VertexMapping.md", "flex/interactive/development/java/VertexRequest.md", "flex/interactive/development/java/VertexStatistics.md", "flex/interactive/development/java/VertexTypePairStatistics.md", "flex/interactive/development/java/java_sdk.md", "flex/interactive/development/python/AdminServiceGraphManagementApi.md", "flex/interactive/development/python/AdminServiceJobManagementApi.md", "flex/interactive/development/python/AdminServiceProcedureManagementApi.md", "flex/interactive/development/python/AdminServiceServiceManagementApi.md", "flex/interactive/development/python/BaseEdgeType.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/python/BasePropertyMeta.md", "flex/interactive/development/python/BaseVertexType.md", "flex/interactive/development/python/BaseVertexTypeXCsrParams.md", "flex/interactive/development/python/ColumnMapping.md", "flex/interactive/development/python/CreateEdgeType.md", "flex/interactive/development/python/CreateGraphRequest.md", "flex/interactive/development/python/CreateGraphResponse.md", "flex/interactive/development/python/CreateGraphSchemaRequest.md", "flex/interactive/development/python/CreateProcedureRequest.md", "flex/interactive/development/python/CreateProcedureResponse.md", "flex/interactive/development/python/CreatePropertyMeta.md", "flex/interactive/development/python/CreateVertexType.md", "flex/interactive/development/python/DateType.md", "flex/interactive/development/python/EdgeData.md", "flex/interactive/development/python/EdgeMapping.md", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/python/EdgeMappingTypeTriplet.md", "flex/interactive/development/python/EdgeRequest.md", "flex/interactive/development/python/EdgeStatistics.md", "flex/interactive/development/python/FixedChar.md", "flex/interactive/development/python/FixedCharChar.md", "flex/interactive/development/python/GSDataType.md", "flex/interactive/development/python/GetEdgeType.md", "flex/interactive/development/python/GetGraphResponse.md", "flex/interactive/development/python/GetGraphSchemaResponse.md", "flex/interactive/development/python/GetGraphStatisticsResponse.md", "flex/interactive/development/python/GetProcedureResponse.md", "flex/interactive/development/python/GetPropertyMeta.md", "flex/interactive/development/python/GetVertexType.md", "flex/interactive/development/python/GraphServiceEdgeManagementApi.md", "flex/interactive/development/python/GraphServiceVertexManagementApi.md", "flex/interactive/development/python/JobResponse.md", "flex/interactive/development/python/JobStatus.md", "flex/interactive/development/python/LongText.md", "flex/interactive/development/python/ModelProperty.md", "flex/interactive/development/python/Parameter.md", "flex/interactive/development/python/PrimitiveType.md", "flex/interactive/development/python/PropertyArray.md", "flex/interactive/development/python/QueryRequest.md", "flex/interactive/development/python/QueryServiceApi.md", "flex/interactive/development/python/SchemaMapping.md", "flex/interactive/development/python/SchemaMappingLoadingConfig.md", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/python/ServiceStatus.md", "flex/interactive/development/python/StartServiceRequest.md", "flex/interactive/development/python/StoredProcedureMeta.md", "flex/interactive/development/python/StringType.md", "flex/interactive/development/python/StringTypeString.md", "flex/interactive/development/python/TemporalType.md", "flex/interactive/development/python/TemporalTypeTemporal.md", "flex/interactive/development/python/TimeStampType.md", "flex/interactive/development/python/TypedValue.md", "flex/interactive/development/python/UpdateProcedureRequest.md", "flex/interactive/development/python/UploadFileResponse.md", "flex/interactive/development/python/UtilsApi.md", "flex/interactive/development/python/VarChar.md", "flex/interactive/development/python/VarCharVarChar.md", "flex/interactive/development/python/VertexData.md", "flex/interactive/development/python/VertexMapping.md", "flex/interactive/development/python/VertexRequest.md", "flex/interactive/development/python/VertexStatistics.md", "flex/interactive/development/python/VertexTypePairStatistics.md", "flex/interactive/development/python/python_sdk.md", "flex/interactive/development/restful_api.md", "flex/interactive/getting_started.md", "flex/interactive/glossary.md", "flex/interactive/installation.md", "flex/interactive/overview.md", "flex/interactive/sdk.md", "flex/interactive/stored_procedures.md", "flex/interactive/tools.md", "flex/interactive/tools/admin_tool.md", "flex/interactive_intro.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/llm_assistant.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/optimizer.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "learning_engine/tutorial_node_classification_pyg_k8s.md", "learning_engine/tutorial_node_classification_pyg_local.md", "loading_graphs.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetworkX APIs", "Tutorial: Graph Operations with NetworkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of GAE", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to instrument", "How to Submit Pull-requests", "How to Test", "Coordinator", "Coordinator RESTFul API", "Engine Configuration", "Using Custom Graph", "Data Import Configuration", "Data Model", "Deployment", "Development guide", "Create c++ Stored Procedures on GraphScope Interactive", "Turning Cypher Queries into Stored Procedures with GraphScope Interactive", "Dev and Test", "AdminServiceGraphManagementApi", "AdminServiceJobManagementApi", "AdminServiceProcedureManagementApi", "AdminServiceServiceManagementApi", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "GraphServiceEdgeManagementApi", "GraphServiceVertexManagementApi", "JobResponse", "JobStatus", "LongText", "Parameter", "PrimitiveType", "Property", "PropertyArray", "QueryRequest", "QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "UtilsApi", "VarChar", "VarCharVarChar", "VertexData", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Java SDK Reference", "gs_interactive.AdminServiceGraphManagementApi", "gs_interactive.AdminServiceJobManagementApi", "gs_interactive.AdminServiceProcedureManagementApi", "gs_interactive.AdminServiceServiceManagementApi", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "gs_interactive.GraphServiceEdgeManagementApi", "gs_interactive.GraphServiceVertexManagementApi", "JobResponse", "JobStatus", "LongText", "ModelProperty", "Parameter", "PrimitiveType", "PropertyArray", "QueryRequest", "gs_interactive.QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "gs_interactive.UtilsApi", "VarChar", "VarCharVarChar", "VertexData", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Python SDK Reference", "RESTful API Documentation", "Getting Started", "Glossary", "Installation", "Overview", "GraphScope Interactive SDK", "Stored Procedures", "Tools", "The Administrative tool", "GraphScope Interactive", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GIE for Cypher", "Using LLM as an Assistant in GIE", "Cypher Support", "Neo4j Ecosystem", "A Generic Graph Optimizer for GIE", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster", "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 41, 42, 44, 45, 46, 47, 52, 53, 54, 91, 92, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201, 202, 207, 208, 210, 212, 218, 220, 221, 223, 224, 225, 226, 227, 229, 231, 232, 233, 234, 235, 237, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 266, 284, 285, 286, 289, 297, 299, 300, 307, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 334, 335, 339, 340, 341, 344, 345, 347, 349, 350, 355, 358, 363, 364, 365, 366, 367, 368, 371, 374, 377, 380, 382, 383, 384, 386, 387, 389, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 450, 451, 452, 454, 456, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 471, 472, 474, 477, 478, 479, 480, 481, 482, 485, 486, 488], "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 44, 49, 51, 52, 53, 54, 55, 56, 91, 92, 101, 107, 126, 127, 128, 129, 130, 165, 166, 175, 181, 200, 201, 202, 203, 206, 207, 209, 210, 212, 218, 219, 220, 221, 222, 224, 225, 229, 230, 232, 233, 237, 239, 247, 251, 254, 255, 256, 257, 258, 265, 266, 267, 268, 269, 270, 273, 275, 276, 278, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 299, 306, 308, 314, 320, 323, 324, 328, 330, 332, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 466, 469, 470, 471, 472, 481, 482, 485, 488, 492, 493, 494, 496, 497, 498], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 34, 36, 37, 38, 41, 51, 212, 231, 233, 247, 249, 251, 252, 254, 258, 260, 263, 268, 327, 465, 470, 478, 481, 482, 488], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 34, 38, 41, 42, 48, 49, 201, 203, 205, 207, 210, 212, 215, 218, 219, 220, 223, 226, 227, 228, 231, 235, 239, 240, 244, 246, 247, 248, 249, 250, 252, 256, 260, 268, 284, 308, 313, 321, 327, 328, 329, 465, 471, 472, 474, 478, 479, 480, 481, 491, 492], "gae": [0, 3, 10, 12, 14, 15, 28, 32, 212, 217, 233, 234, 245, 248, 252, 253, 254, 260, 284, 328, 489, 490], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 39, 42, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 214, 218, 220, 222, 223, 226, 228, 229, 230, 231, 233, 234, 236, 239, 240, 241, 242, 243, 244, 246, 247, 249, 253, 254, 256, 257, 260, 327, 328, 329, 330, 465, 467, 468, 469, 470, 471, 472, 473, 477, 478, 479, 480, 481, 482, 485, 488, 489, 491, 492, 493, 496, 498, 499], "offer": [0, 2, 9, 12, 20, 34, 42, 45, 46, 47, 48, 51, 201, 202, 205, 207, 217, 220, 224, 226, 230, 234, 235, 245, 247, 251, 252, 477], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 47, 205, 210, 212, 215, 219, 236, 244, 246, 247, 248, 250, 314, 321, 368, 412, 414, 465, 477, 482], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 41, 44, 46, 47, 52, 205, 207, 212, 215, 218, 219, 220, 221, 222, 223, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 258, 260, 264, 267, 280, 289, 291, 313, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 327, 328, 329, 330, 344, 369, 371, 384, 385, 386, 394, 396, 413, 414, 415, 422, 424, 425, 443, 455, 457, 459, 463, 464, 465, 467, 468, 469, 471, 472, 474, 476, 477, 478, 479, 480, 482, 485], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 44, 48, 49, 88, 109, 162, 183, 202, 203, 205, 209, 210, 212, 230, 231, 235, 240, 241, 245, 246, 247, 249, 250, 251, 252, 253, 255, 324, 330, 465, 472, 477, 478, 481, 482, 486], "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 41, 42, 44, 46, 47, 49, 51, 101, 175, 200, 202, 203, 205, 206, 208, 212, 217, 219, 223, 226, 227, 229, 231, 234, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 256, 313, 315, 316, 317, 318, 319, 320, 322, 325, 328, 465, 471, 472, 474, 477, 478, 481, 492, 495, 496], "analyz": [0, 7, 13, 19, 27, 230, 245, 246, 248, 249, 251, 319, 477], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 49, 52, 118, 192, 201, 202, 203, 204, 205, 207, 209, 210, 212, 217, 219, 220, 223, 225, 226, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 263, 265, 271, 272, 277, 282, 283, 287, 295, 296, 313, 315, 316, 317, 318, 319, 323, 327, 337, 343, 359, 360, 375, 392, 408, 427, 457, 465, 467, 468, 471, 472, 474, 477, 479, 480, 482, 488, 489, 491, 492, 497], "least": [0, 6, 37, 231, 330, 364, 386], "effort": [0, 34, 205, 229, 253, 477], "cover": [0, 6, 15, 41, 238], "wide": [0, 11, 12, 24, 205, 221, 233, 234, 238, 245, 246, 248, 249, 250, 252, 317, 476, 482], "rang": [0, 13, 18, 46, 47, 226, 227, 229, 231, 234, 237, 238, 240, 241, 242, 243, 245, 246, 249, 252, 255, 257, 258, 271, 272, 282, 283, 287, 295, 296, 313, 318, 322, 370, 372, 374, 377, 380, 392, 398, 412, 413, 414, 415, 443, 465, 470, 477, 488, 491, 492, 496, 497], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 39, 53, 54, 55, 56, 91, 92, 118, 126, 127, 128, 129, 130, 165, 166, 192, 200, 201, 203, 204, 205, 212, 218, 219, 222, 230, 232, 234, 235, 247, 248, 249, 250, 253, 255, 256, 258, 268, 317, 396, 420, 476, 486], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 234, 245, 246, 247, 248, 251, 255, 256, 260, 315, 323, 416, 457, 462, 466, 476, 485], "detect": [0, 6, 8, 9, 234, 245, 246, 248, 249, 251, 252, 256, 384, 388, 389, 390], "etc": [0, 6, 7, 15, 29, 215, 219, 226, 227, 235, 238, 244, 246, 247, 250, 253, 257, 313, 316, 317, 318, 321, 332, 344, 353, 358, 359, 465, 467, 478], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 44, 45, 46, 47, 48, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 202, 203, 204, 205, 207, 212, 215, 218, 219, 220, 223, 224, 226, 227, 229, 230, 231, 234, 235, 236, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 260, 263, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 330, 339, 340, 341, 354, 355, 360, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380, 383, 384, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 400, 404, 408, 410, 411, 412, 413, 414, 415, 416, 420, 422, 424, 426, 427, 430, 448, 457, 458, 459, 460, 461, 465, 468, 471, 472, 474, 476, 477, 478, 479, 481, 485, 486, 498], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 47, 52, 126, 200, 202, 215, 219, 222, 224, 225, 227, 229, 232, 234, 235, 238, 242, 243, 244, 245, 249, 252, 255, 256, 260, 313, 315, 317, 318, 319, 321, 324, 325, 327, 328, 330, 406, 407, 411, 412, 414, 416, 417, 418, 459, 460, 468, 488], "pie": [0, 1, 3, 8, 12, 34, 231, 233, 234, 248, 260, 263, 470, 482, 492, 494], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 51, 205, 207, 233, 234, 238, 245, 247, 248, 250, 252, 253, 260, 313, 318, 319, 477, 478, 482], "model": [0, 1, 3, 8, 9, 18, 45, 48, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 210, 215, 219, 225, 226, 227, 231, 233, 234, 237, 238, 239, 244, 245, 246, 248, 249, 252, 260, 315, 317, 319, 320, 384, 388, 392, 394, 396, 398, 404, 406, 407, 412, 413, 414, 415, 416, 420, 421, 455, 462, 472, 476, 482, 492], "highli": [0, 4, 12, 34, 225, 231, 234, 247, 248, 476], "optim": [0, 9, 12, 14, 34, 44, 46, 47, 51, 59, 62, 133, 136, 205, 207, 217, 219, 230, 231, 232, 234, 235, 237, 240, 241, 242, 245, 246, 247, 248, 249, 250, 251, 253, 256, 313, 325, 327, 477, 479, 492], "best": [0, 16, 245, 247, 249, 252, 253, 256, 465, 488], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 41, 44, 46, 48, 205, 217, 219, 224, 226, 229, 231, 232, 233, 235, 245, 247, 248, 250, 251, 252, 257, 315, 319, 321, 327, 422, 427, 457, 469, 471, 474, 478, 480, 482], "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 44, 45, 46, 47, 48, 49, 51, 52, 101, 175, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 215, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 238, 240, 244, 245, 246, 247, 249, 251, 252, 253, 254, 255, 256, 257, 260, 264, 266, 290, 291, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 330, 339, 340, 343, 347, 368, 371, 384, 385, 386, 393, 394, 396, 412, 413, 414, 415, 422, 426, 427, 434, 436, 438, 443, 446, 451, 452, 457, 459, 465, 468, 469, 471, 472, 474, 476, 477, 478, 479, 480, 482, 485, 486, 488], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 41, 44, 46, 47, 48, 52, 59, 62, 101, 133, 136, 175, 201, 202, 203, 205, 206, 207, 208, 209, 210, 212, 215, 219, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 265, 266, 290, 291, 300, 305, 313, 314, 315, 316, 317, 319, 321, 324, 326, 327, 328, 329, 330, 349, 350, 359, 371, 374, 378, 384, 385, 386, 392, 394, 398, 399, 401, 403, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 422, 426, 430, 443, 448, 457, 459, 462, 463, 465, 467, 468, 470, 472, 476, 477, 480, 481, 482, 485, 486, 488, 492, 498], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 41, 45, 207, 212, 215, 219, 224, 229, 231, 240, 245, 246, 248, 250, 252, 253, 254, 265, 313, 316, 325, 370, 457, 471, 477, 478, 488], "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 53, 54, 55, 56, 91, 92, 101, 118, 126, 227, 230, 235, 242, 243, 244, 246, 247, 248, 249, 252, 256, 258, 313, 316, 317, 319, 330, 387, 396, 397, 404, 405, 408, 422, 423, 459, 463, 465, 477, 478, 479, 481, 492, 496], "box": [0, 247, 458], "manner": [0, 2, 17, 18, 32, 36, 205, 246, 248, 249], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 41, 44, 45, 47, 52, 201, 204, 207, 212, 218, 219, 220, 223, 224, 226, 227, 229, 230, 231, 234, 236, 237, 240, 241, 244, 250, 253, 256, 314, 315, 319, 322, 324, 325, 327, 330, 384, 396, 411, 412, 414, 423, 443, 465, 468, 476, 477, 478, 492], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 51, 52, 101, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201, 202, 203, 205, 207, 209, 210, 211, 212, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 252, 253, 255, 256, 257, 258, 259, 260, 261, 264, 266, 290, 300, 302, 306, 307, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 334, 335, 336, 338, 340, 342, 344, 345, 346, 347, 348, 349, 350, 359, 360, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 380, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 485, 486, 488, 491, 492, 496, 497, 498], "full": [0, 4, 12, 16, 17, 18, 22, 34, 46, 101, 175, 227, 234, 235, 238, 245, 250, 252, 256, 313, 316, 317, 319, 375, 478, 482, 488, 497], "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 45, 46, 47, 53, 54, 55, 57, 61, 64, 65, 67, 71, 73, 74, 79, 80, 84, 85, 86, 87, 88, 90, 99, 100, 102, 109, 121, 122, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 207, 218, 224, 227, 229, 231, 234, 240, 242, 244, 247, 250, 254, 256, 258, 277, 278, 285, 286, 300, 314, 317, 319, 327, 330, 339, 341, 344, 351, 353, 359, 360, 363, 364, 368, 370, 371, 389, 392, 394, 396, 397, 398, 399, 400, 412, 416, 419, 422, 423, 428, 430, 443, 459, 465, 466, 468, 472, 476, 478, 481, 486, 493, 496], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 42, 44, 45, 47, 48, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 202, 205, 210, 212, 215, 218, 219, 221, 225, 227, 231, 232, 233, 237, 238, 239, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 260, 266, 313, 314, 315, 317, 318, 319, 321, 322, 324, 327, 328, 330, 465, 468, 471, 472, 474, 476, 478, 479, 481, 482, 485, 491], "bf": [0, 15, 17, 34, 253, 256, 488], "df": [0, 34, 476], "hit": [0, 34, 36, 256, 257, 330, 466, 471, 488], "lpa": [0, 7, 34, 246, 256, 488], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 211, 246, 253, 256, 257, 264, 471, 472, 480, 481, 488], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 51, 52, 53, 54, 56, 101, 126, 127, 128, 130, 175, 200, 201, 202, 205, 207, 209, 212, 215, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 257, 258, 274, 287, 290, 305, 313, 314, 315, 317, 318, 319, 320, 321, 323, 325, 327, 330, 347, 361, 362, 363, 364, 365, 366, 371, 374, 376, 377, 384, 385, 386, 388, 389, 392, 393, 394, 396, 398, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 424, 426, 443, 445, 448, 453, 457, 459, 460, 462, 463, 464, 465, 467, 469, 471, 472, 473, 474, 476, 477, 478, 482, 485, 486, 488], "find": [0, 4, 8, 9, 17, 22, 31, 32, 36, 37, 41, 45, 204, 212, 215, 217, 220, 227, 229, 231, 240, 244, 246, 248, 249, 253, 255, 264, 312, 330, 335, 354, 355, 384, 472, 477, 478, 485], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 31, 37, 38, 212, 214, 215, 219, 231, 248, 250], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 42, 44, 51, 52, 54, 91, 92, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 210, 212, 215, 218, 219, 220, 221, 222, 224, 225, 226, 227, 229, 230, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 264, 284, 285, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 344, 363, 365, 370, 372, 374, 377, 384, 387, 391, 392, 393, 394, 396, 399, 404, 405, 407, 408, 412, 413, 414, 415, 416, 417, 424, 431, 440, 452, 457, 459, 460, 464, 465, 467, 468, 471, 472, 476, 477, 479, 485, 488, 492, 493, 496, 498], "given": [0, 7, 9, 13, 14, 20, 34, 46, 205, 207, 209, 210, 215, 218, 219, 220, 226, 229, 230, 231, 238, 244, 246, 249, 250, 252, 256, 317, 319, 322, 325, 327, 329, 364, 371, 382, 394, 395, 396, 397, 398, 399, 400, 408, 416, 417, 418, 422, 423, 424, 425, 429, 457, 460, 461, 464, 465, 471, 472, 476, 477, 480, 481], "weight": [0, 7, 19, 20, 33, 46, 165, 201, 211, 226, 229, 231, 238, 246, 248, 253, 256, 285, 313, 315, 316, 317, 318, 319, 322, 325, 327, 330, 332, 333, 334, 338, 349, 350, 392, 404, 408, 412, 415, 455, 463, 464, 465, 467, 472, 497], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 205, 212, 219, 221, 224, 231, 237, 238, 245, 249, 313, 315, 321, 322, 323, 394, 476, 477], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 53, 54, 55, 56, 91, 92, 101, 118, 126, 205, 207, 215, 219, 220, 221, 223, 226, 229, 230, 231, 234, 238, 245, 246, 248, 249, 250, 255, 256, 257, 265, 271, 272, 281, 287, 289, 291, 292, 295, 296, 313, 316, 317, 319, 321, 322, 324, 327, 328, 330, 394, 396, 399, 418, 465, 476, 478, 480, 488, 492], "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 203, 205, 219, 220, 229, 231, 234, 235, 238, 246, 247, 248, 249, 250, 251, 252, 255, 256, 258, 317, 318, 321, 323, 330, 411, 414, 415, 419, 424, 433, 456, 457, 469, 472, 478, 479, 488], "minimum": [0, 6, 212, 220, 224, 229, 231, 256, 384, 472], "distanc": [0, 7, 15, 17, 18, 246, 256, 330, 365, 404, 408, 412, 413, 414, 415, 416, 434, 446, 488], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 44, 45, 52, 53, 54, 56, 127, 128, 130, 207, 209, 218, 219, 221, 227, 229, 230, 231, 244, 245, 246, 248, 249, 252, 254, 255, 257, 266, 273, 317, 328, 329, 330, 341, 345, 360, 384, 389, 391, 394, 396, 412, 414, 416, 465, 468, 471, 477, 485], "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 45, 47, 75, 76, 91, 92, 126, 149, 150, 165, 166, 200, 211, 218, 224, 226, 227, 229, 233, 234, 235, 238, 245, 246, 247, 248, 249, 250, 253, 255, 256, 257, 258, 263, 284, 314, 315, 316, 317, 318, 319, 322, 325, 327, 329, 330, 404, 409, 426, 427, 443, 468, 470, 474, 476, 478, 479, 482, 488, 493], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 46, 47, 49, 204, 205, 207, 210, 212, 215, 219, 227, 229, 231, 234, 235, 238, 240, 245, 247, 248, 249, 250, 251, 252, 256, 258, 313, 315, 317, 319, 323, 326, 327, 328, 330, 334, 365, 367, 371, 374, 384, 393, 399, 405, 414, 415, 457, 465, 467, 468, 471, 472, 476, 477, 481], "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 46, 47, 53, 127, 201, 205, 211, 218, 219, 221, 224, 226, 227, 229, 235, 238, 245, 246, 248, 249, 250, 255, 256, 257, 258, 286, 314, 315, 316, 317, 318, 319, 322, 325, 327, 388, 399, 409, 411, 426, 427, 438, 440, 451, 452, 458, 471, 472, 474, 476, 477, 478, 479, 488, 492, 493], "all_pairs_shortest_path_length": [0, 34], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 30, 33, 34, 37, 41, 45, 47, 49, 52, 202, 203, 205, 207, 210, 212, 218, 220, 221, 224, 227, 229, 231, 235, 236, 238, 248, 249, 250, 252, 256, 275, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 330, 363, 364, 375, 384, 385, 386, 387, 388, 389, 390, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 464, 465, 478, 482, 496], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 37, 45, 218, 219, 227, 230, 231, 235, 238, 244, 245, 248, 252, 256, 313, 314, 315, 316, 319, 322, 327, 457, 465], "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 212, 215, 229, 233, 238, 245, 247, 248, 252, 253, 256, 258, 316, 330, 352, 353, 359, 411, 465, 474, 482], "dissimilar": 0, "measur": [0, 6, 20, 219, 248, 250, 256, 314, 330, 408, 409, 442], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 47, 48, 202, 219, 224, 227, 229, 231, 235, 244, 248, 249, 253, 314, 315, 319, 320, 323, 325, 327, 329, 330, 358, 359, 380, 388, 389, 394, 396, 422, 423, 425, 458, 459, 465, 472, 476, 477, 478, 479, 480], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 45, 46, 47, 91, 92, 126, 165, 166, 200, 201, 202, 203, 210, 211, 220, 223, 226, 232, 246, 248, 249, 250, 255, 256, 257, 258, 275, 289, 303, 304, 305, 316, 319, 327, 328, 412, 427, 457, 462, 465, 468, 471, 472, 474, 478, 479, 486, 492, 493, 496], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 41, 45, 46, 47, 51, 53, 127, 201, 218, 219, 226, 227, 229, 230, 231, 235, 237, 238, 240, 241, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 304, 313, 314, 315, 316, 317, 318, 319, 323, 324, 325, 327, 330, 339, 341, 359, 360, 365, 369, 371, 376, 382, 384, 386, 387, 388, 390, 391, 393, 394, 396, 397, 399, 404, 407, 409, 412, 413, 414, 415, 416, 419, 420, 422, 424, 425, 430, 433, 445, 450, 455, 459, 461, 462, 463, 465, 471, 472, 474, 476, 477, 478, 479, 482, 486], "attribute_assort": [0, 34], "nearest": [0, 256], "neighbor": [0, 6, 9, 13, 14, 17, 18, 211, 226, 229, 231, 235, 238, 242, 248, 249, 250, 256, 258, 313, 314, 316, 317, 319, 321, 322, 323, 325, 326, 330, 335, 336, 355, 407, 408, 422, 425, 458, 465, 474, 477, 488], "return": [0, 6, 9, 15, 18, 20, 51, 88, 109, 126, 162, 183, 200, 201, 211, 219, 221, 222, 223, 224, 226, 229, 230, 231, 238, 240, 242, 243, 246, 249, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 306, 307, 308, 312, 313, 315, 316, 317, 318, 319, 322, 323, 324, 325, 327, 328, 329, 330, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 471, 472, 474, 477, 488, 497], "success": [0, 13, 22, 53, 54, 55, 56, 94, 118, 127, 128, 129, 130, 192, 201, 260, 315, 399, 430], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 44, 46, 48, 126, 165, 200, 201, 212, 215, 218, 220, 221, 225, 229, 231, 235, 237, 238, 240, 241, 242, 243, 244, 246, 253, 255, 256, 257, 258, 272, 313, 314, 315, 316, 317, 318, 319, 320, 323, 324, 325, 326, 327, 330, 332, 333, 334, 336, 340, 341, 344, 345, 349, 359, 363, 364, 366, 367, 368, 369, 371, 374, 376, 377, 379, 380, 381, 383, 384, 387, 388, 389, 390, 392, 393, 394, 396, 397, 400, 403, 405, 412, 413, 414, 415, 416, 422, 423, 427, 430, 443, 448, 457, 459, 460, 465, 467, 468, 472, 474, 477, 478, 479, 480, 486, 488, 490, 491, 492, 493, 495, 496, 497, 498], "1": [0, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 44, 46, 47, 48, 52, 91, 92, 126, 165, 166, 200, 201, 210, 215, 218, 219, 220, 221, 225, 226, 227, 229, 231, 235, 237, 238, 240, 241, 242, 243, 244, 246, 249, 250, 253, 256, 257, 313, 316, 318, 319, 320, 322, 327, 328, 329, 330, 332, 333, 334, 336, 340, 341, 344, 349, 350, 353, 358, 359, 363, 365, 366, 367, 368, 369, 371, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 467, 468, 472, 477, 478, 479, 480, 486, 488, 492, 493, 495, 496, 497, 498], "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 44, 46, 47, 48, 52, 126, 165, 166, 201, 210, 218, 219, 220, 221, 225, 226, 229, 231, 235, 237, 238, 240, 241, 242, 243, 244, 246, 249, 250, 253, 256, 257, 313, 316, 317, 318, 319, 320, 322, 327, 330, 332, 333, 334, 336, 344, 345, 349, 350, 353, 358, 359, 366, 367, 368, 371, 376, 377, 382, 384, 386, 388, 390, 391, 392, 394, 395, 396, 398, 399, 400, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 432, 434, 436, 437, 438, 442, 443, 445, 447, 448, 450, 457, 458, 459, 460, 465, 467, 468, 472, 476, 477, 479, 480, 488, 489, 490, 492, 493, 496, 497, 498], "average_degree_connect": [0, 256, 488], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 44, 48, 51, 88, 106, 109, 126, 162, 180, 183, 200, 203, 205, 207, 212, 219, 224, 229, 230, 231, 238, 243, 246, 250, 255, 256, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 278, 280, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 302, 305, 312, 314, 315, 317, 319, 322, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 339, 341, 343, 344, 345, 347, 348, 349, 350, 354, 355, 359, 360, 363, 365, 367, 368, 370, 371, 372, 374, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 472, 476, 477, 478, 485], "str": [0, 20, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 179, 181, 182, 183, 185, 187, 188, 190, 191, 195, 196, 197, 198, 199, 240, 241, 242, 244, 256, 257, 258, 264, 265, 271, 272, 273, 275, 282, 283, 284, 287, 289, 290, 291, 292, 295, 296, 325, 327, 328, 343, 345, 459, 465, 467, 471, 472, 478, 493, 498], "target": [0, 6, 17, 22, 24, 126, 201, 220, 229, 235, 236, 245, 246, 250, 252, 256, 258, 319, 321, 327, 330, 401, 403, 422, 425, 457, 478, 488], "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 44, 46, 47, 49, 52, 205, 215, 218, 219, 220, 223, 227, 229, 231, 234, 238, 245, 246, 247, 248, 249, 250, 253, 255, 256, 257, 279, 285, 313, 315, 317, 319, 320, 321, 330, 401, 440, 455, 465, 477, 478, 482, 488, 497], "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 211, 215, 221, 224, 227, 230, 231, 238, 246, 249, 250, 255, 256, 257, 258, 313, 316, 317, 318, 319, 322, 325, 327, 328, 329, 330, 336, 359, 384, 387, 392, 394, 398, 404, 407, 412, 415, 422, 425, 427, 459, 465, 471, 472, 476, 477, 478, 488, 492, 496, 497], "sum": [0, 20, 224, 227, 242, 248, 256, 258, 330, 384, 389, 392, 394, 395, 396, 405, 412, 415, 416, 423, 424, 463, 465, 496], "fraction": [0, 256, 330, 384], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 44, 101, 175, 205, 207, 219, 221, 223, 229, 231, 238, 244, 249, 250, 256, 258, 263, 319, 323, 325, 374, 412, 414, 457, 465, 469, 478, 488, 493, 498], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 42, 45, 202, 217, 218, 219, 221, 222, 223, 225, 226, 229, 230, 231, 232, 235, 238, 244, 246, 248, 249, 250, 252, 257, 260, 314, 315, 317, 318, 319, 324, 325, 327, 330, 360, 374, 391, 430, 465, 476, 477, 478], "betweenness_centr": [0, 34, 330], "normal": [0, 6, 27, 212, 231, 256, 319, 327, 330, 387, 477], "endpoint": [0, 9, 10, 27, 28, 29, 44, 48, 52, 53, 54, 56, 92, 126, 127, 128, 130, 166, 200, 201, 202, 205, 218, 220, 222, 225, 229, 230, 240, 244, 246, 255, 319, 328, 330, 472, 474, 478, 485, 488, 496, 498], "bool": [0, 6, 14, 15, 20, 83, 97, 133, 162, 180, 183, 211, 224, 244, 255, 256, 258, 302, 310, 327, 330, 337, 347, 349, 350, 359, 388, 398, 404, 408, 424, 465, 467, 472, 477, 498], "whether": [0, 37, 44, 46, 207, 218, 219, 226, 229, 231, 244, 245, 249, 255, 256, 314, 315, 319, 327, 387, 389, 392, 412, 423, 424, 465, 476, 477, 478, 479], "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 46, 51, 52, 202, 218, 219, 221, 223, 227, 229, 231, 244, 245, 246, 250, 255, 256, 264, 267, 280, 289, 323, 324, 327, 329, 330, 360, 384, 412, 413, 414, 415, 465, 467, 472, 474, 477, 478, 479, 480], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 42, 45, 46, 47, 52, 53, 127, 201, 205, 207, 209, 215, 217, 219, 220, 224, 225, 226, 231, 234, 235, 236, 237, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 315, 316, 319, 321, 327, 330, 345, 384, 392, 398, 408, 457, 464, 465, 476, 477, 478, 485, 486], "count": [0, 6, 33, 51, 124, 125, 126, 198, 199, 200, 201, 219, 221, 224, 226, 227, 230, 231, 238, 246, 248, 255, 256, 317, 318, 322, 323, 326, 330, 340, 398, 465, 478, 492, 496], "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 41, 44, 45, 46, 47, 49, 52, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 205, 207, 209, 210, 212, 215, 218, 219, 220, 221, 224, 225, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 260, 264, 267, 268, 269, 270, 271, 272, 274, 275, 277, 280, 282, 283, 284, 285, 286, 287, 290, 291, 292, 295, 296, 297, 299, 300, 308, 313, 314, 315, 317, 318, 319, 321, 322, 324, 325, 327, 329, 330, 341, 342, 347, 352, 353, 359, 360, 362, 363, 364, 366, 369, 370, 371, 372, 374, 375, 377, 379, 380, 383, 385, 386, 394, 396, 397, 398, 400, 401, 404, 405, 406, 407, 411, 412, 413, 414, 415, 416, 421, 422, 423, 424, 425, 426, 430, 432, 438, 443, 447, 450, 451, 455, 457, 458, 459, 460, 462, 463, 465, 468, 469, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 485], "travers": [0, 6, 13, 15, 17, 202, 203, 205, 218, 219, 224, 227, 230, 235, 245, 246, 247, 248, 313, 316, 319, 321, 325, 328, 459, 465, 474, 477, 478, 479, 488, 496], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 37, 41, 42, 45, 46, 47, 51, 205, 212, 215, 218, 219, 221, 223, 224, 227, 229, 230, 231, 234, 235, 241, 244, 246, 247, 248, 249, 250, 251, 252, 255, 256, 260, 306, 313, 314, 315, 319, 321, 323, 327, 328, 330, 334, 389, 393, 417, 418, 422, 425, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 446, 449, 451, 452, 457, 465, 472, 476, 477, 478, 479, 485, 486], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 39, 44, 47, 49, 52, 56, 130, 205, 207, 209, 210, 217, 218, 222, 223, 224, 229, 230, 238, 240, 242, 243, 244, 249, 251, 254, 255, 257, 313, 317, 319, 328, 329, 330, 365, 390, 394, 396, 397, 400, 416, 430, 459, 467, 472, 477, 478, 482, 495], "root": [0, 4, 27, 32, 36, 44, 208, 212, 244, 247, 365, 367, 458, 459, 476], "explor": [0, 17, 45, 46, 204, 210, 215, 220, 229, 231, 245, 246, 249, 477], "present": [0, 2, 20, 27, 46, 209, 226, 229, 231, 238, 239, 240, 241, 242, 243, 245, 246, 248, 260, 330, 341, 384, 465, 476, 477], "prior": [0, 12, 34, 45, 229, 231, 234, 245], "move": [0, 4, 6, 45, 205, 223, 247, 319, 422, 425], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 204, 230, 231, 235, 238, 239, 244, 245, 250, 313, 314, 317, 319, 321, 323, 324, 325, 391, 459, 471, 474, 477, 478, 480], "level": [0, 6, 12, 38, 44, 205, 215, 219, 245, 247, 250, 256, 321, 375, 422, 423, 462, 477, 478], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 136, 151, 154, 156, 158, 159, 161, 162, 163, 164, 168, 180, 181, 194, 198, 199, 211, 226, 227, 240, 242, 244, 255, 256, 257, 258, 290, 314, 315, 316, 317, 318, 319, 322, 325, 326, 327, 329, 330, 358, 363, 365, 367, 370, 372, 374, 375, 377, 379, 380, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 400, 401, 402, 403, 404, 406, 407, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 426, 427, 428, 429, 460, 465, 467, 472, 474, 478, 488, 496, 498], "evalu": [0, 6, 14, 15, 16, 18, 37, 234, 246, 247, 250, 253, 255, 256, 257, 268, 291, 300, 302, 306, 308, 327, 472, 482, 496], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 45, 47, 48, 49, 201, 203, 205, 209, 212, 215, 218, 219, 223, 227, 229, 231, 234, 237, 239, 240, 245, 246, 247, 248, 250, 252, 253, 255, 256, 258, 260, 313, 314, 315, 317, 320, 321, 322, 325, 327, 328, 330, 365, 384, 409, 411, 412, 416, 435, 440, 445, 457, 459, 463, 465, 468, 471, 472, 474, 476, 477, 478, 481, 482, 488], "known": [0, 6, 8, 9, 24, 32, 218, 221, 223, 224, 231, 248, 249, 256, 347, 365, 368, 417, 418, 435, 459, 480], "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 46, 127, 128, 129, 130, 165, 166, 175, 192, 201, 202, 205, 212, 218, 221, 223, 227, 230, 231, 234, 244, 251, 256, 257, 260, 306, 308, 314, 315, 317, 322, 325, 327, 363, 373, 378, 384, 387, 388, 389, 390, 392, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 412, 413, 414, 415, 416, 419, 420, 421, 422, 425, 430, 457, 460, 462, 465, 467, 471, 472, 476, 477, 478, 481], "max_round": [0, 256, 476, 488], "10": [0, 13, 15, 16, 17, 20, 27, 31, 47, 52, 212, 214, 215, 219, 222, 227, 229, 231, 237, 238, 240, 241, 242, 243, 246, 253, 256, 314, 315, 316, 318, 319, 325, 327, 330, 332, 333, 334, 368, 374, 384, 387, 389, 398, 399, 400, 401, 403, 407, 412, 416, 420, 436, 442, 447, 460, 465, 472, 476, 478, 486, 488, 492, 496], "maximum": [0, 47, 218, 224, 229, 231, 248, 256, 316, 330, 384, 400, 415, 416, 417, 418, 423, 464, 478], "round": [0, 9, 14, 17, 24, 256, 258, 382, 392], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 41, 44, 46, 47, 48, 51, 127, 128, 129, 130, 165, 166, 175, 192, 201, 202, 205, 207, 209, 212, 215, 218, 220, 221, 227, 229, 231, 237, 240, 242, 244, 253, 255, 256, 257, 258, 275, 284, 306, 307, 310, 314, 315, 319, 326, 327, 329, 330, 332, 333, 334, 337, 359, 361, 362, 365, 367, 368, 370, 372, 374, 375, 377, 379, 380, 383, 384, 387, 388, 389, 390, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 425, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 457, 458, 460, 462, 463, 465, 467, 468, 472, 474, 476, 478, 485, 486, 498], "origin": [0, 4, 6, 9, 12, 13, 22, 45, 219, 226, 227, 229, 235, 240, 241, 250, 255, 257, 284, 313, 315, 327, 328, 384, 406, 412, 451, 459, 463, 465, 471, 472, 478, 479], "reciproc": [0, 330], "n": [0, 19, 20, 30, 33, 38, 44, 46, 51, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201, 207, 209, 219, 221, 222, 224, 229, 231, 234, 238, 246, 250, 253, 256, 257, 317, 319, 322, 324, 330, 340, 344, 345, 347, 351, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 386, 387, 388, 393, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 426, 427, 430, 443, 458, 459, 460, 462, 465], "reachabl": [0, 330], "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 47, 51, 201, 212, 215, 224, 225, 237, 238, 239, 245, 246, 248, 250, 252, 254, 256, 257, 258, 278, 281, 286, 289, 290, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 351, 353, 355, 357, 358, 359, 360, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 477, 479, 488, 491, 492, 497], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 34, 234, 245, 247, 248, 250, 252, 317, 323, 474, 477], "improv": [0, 6, 9, 17, 19, 23, 205, 227, 247, 250, 251, 252, 481], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 41, 47, 51, 126, 200, 201, 202, 205, 207, 212, 215, 219, 220, 221, 223, 226, 227, 229, 231, 234, 235, 236, 237, 238, 244, 245, 247, 248, 249, 250, 251, 252, 255, 256, 257, 260, 313, 314, 317, 318, 319, 323, 324, 327, 330, 363, 404, 411, 412, 426, 427, 459, 465, 467, 472, 476, 477, 478, 481, 482, 485], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 46, 205, 212, 218, 219, 224, 229, 231, 233, 238, 244, 245, 248, 249, 251, 252, 256, 315, 317, 319, 326, 330, 340, 374, 382, 384, 386, 391, 393, 404, 406, 415, 472, 477, 478, 481, 482], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 41, 47, 51, 201, 205, 212, 215, 217, 218, 219, 224, 227, 229, 231, 235, 238, 244, 246, 249, 250, 252, 255, 256, 258, 264, 265, 305, 313, 314, 315, 316, 317, 319, 323, 327, 330, 339, 363, 364, 367, 368, 371, 380, 381, 384, 393, 394, 399, 401, 402, 403, 404, 405, 407, 422, 425, 433, 436, 440, 443, 449, 450, 451, 457, 459, 461, 465, 471, 472, 474, 476, 477, 478, 481, 492, 496], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 41, 47, 52, 212, 221, 226, 245, 247, 248, 249, 255, 256, 330, 398, 412, 471, 477, 478], "ratio": [0, 13, 231, 457], "actor": [0, 52, 201, 207, 231, 245, 442], "group": [0, 2, 205, 212, 219, 242, 244, 246, 248, 249, 255, 321, 327, 388, 389, 390, 392, 409, 437, 455, 476, 478, 496, 498], "who": [0, 11, 29, 205, 231, 245, 249, 320, 325, 478], "closeness_centr": [0, 34], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 46, 47, 52, 202, 205, 207, 209, 212, 214, 215, 217, 218, 220, 223, 226, 228, 229, 230, 231, 232, 233, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 252, 254, 257, 260, 268, 314, 315, 319, 321, 472, 473, 476, 477, 478, 479, 481, 482, 492], "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 44, 45, 46, 126, 200, 205, 207, 209, 215, 223, 226, 227, 229, 231, 235, 237, 238, 241, 244, 245, 246, 248, 249, 250, 256, 257, 258, 305, 313, 315, 319, 323, 325, 327, 330, 372, 375, 382, 384, 404, 409, 422, 425, 433, 452, 462, 472, 477, 478, 480], "being": [0, 47, 52, 227, 238, 249, 327, 364, 394, 474, 477, 478, 479], "cliqu": [0, 6, 231, 245, 248, 385, 386, 390, 391, 393, 407], "complet": [0, 14, 31, 33, 34, 201, 219, 223, 227, 231, 244, 247, 313, 315, 319, 340, 365, 366, 368, 370, 371, 377, 382, 391, 422, 425, 449, 465, 478], "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 44, 45, 47, 52, 204, 212, 215, 218, 219, 220, 221, 222, 223, 224, 226, 227, 229, 231, 233, 234, 236, 238, 244, 245, 246, 248, 249, 250, 252, 256, 257, 260, 264, 313, 314, 315, 316, 317, 319, 320, 322, 323, 325, 327, 330, 340, 344, 347, 359, 365, 370, 375, 384, 394, 395, 396, 398, 404, 407, 422, 423, 425, 441, 445, 459, 465, 471, 472, 476, 477, 478, 480, 482, 485, 486, 492], "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 45, 47, 53, 78, 91, 126, 127, 152, 165, 200, 201, 205, 211, 218, 219, 223, 224, 226, 227, 229, 235, 237, 238, 240, 241, 242, 243, 245, 246, 248, 249, 250, 252, 255, 256, 257, 258, 269, 270, 273, 278, 285, 289, 290, 308, 313, 314, 315, 316, 317, 318, 319, 321, 322, 325, 326, 327, 328, 329, 330, 332, 333, 334, 337, 340, 341, 343, 344, 345, 347, 349, 350, 353, 354, 356, 358, 359, 360, 364, 366, 367, 368, 369, 370, 371, 374, 376, 377, 378, 381, 382, 384, 386, 389, 390, 392, 394, 395, 396, 398, 400, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 455, 459, 462, 463, 464, 465, 466, 468, 471, 472, 474, 476, 478, 479, 480, 488, 492, 493, 497], "u": [0, 6, 14, 16, 18, 20, 37, 211, 212, 227, 231, 244, 246, 256, 319, 323, 325, 327, 330, 336, 359, 371, 384, 398, 404, 407, 412, 415, 427, 465, 477, 488, 498], "equal": [0, 10, 212, 224, 229, 231, 237, 241, 244, 246, 330, 382, 384, 415, 420, 458, 492], "degree_assortativity_coeffici": [0, 256, 488], "hold": [0, 10, 20, 48, 229, 255, 256, 257, 258, 284, 292, 315, 327, 330, 465, 471], "numer": [0, 20, 52, 224, 229, 245, 247, 248, 256, 257, 330, 465, 471, 477], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 44, 46, 47, 51, 58, 59, 68, 83, 85, 88, 91, 92, 94, 97, 98, 103, 104, 109, 115, 121, 165, 166, 170, 189, 195, 211, 212, 218, 219, 221, 224, 235, 240, 242, 244, 248, 250, 255, 256, 257, 258, 291, 300, 312, 313, 315, 316, 317, 318, 319, 322, 324, 325, 326, 327, 329, 330, 339, 359, 374, 384, 412, 413, 414, 415, 422, 424, 425, 457, 458, 459, 465, 467, 468, 471, 472, 474, 476, 477, 478, 479, 488, 496, 497, 498], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 44, 45, 46, 47, 48, 52, 201, 202, 204, 207, 209, 212, 218, 220, 221, 223, 229, 231, 237, 244, 246, 252, 256, 257, 260, 312, 314, 315, 319, 320, 323, 324, 326, 327, 328, 329, 330, 335, 336, 338, 345, 349, 350, 359, 360, 365, 366, 367, 368, 370, 371, 372, 374, 375, 377, 379, 380, 383, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 425, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 457, 460, 461, 463, 465, 467, 468, 471, 472, 474, 477, 478, 479, 485, 486], "fals": [0, 13, 15, 17, 18, 19, 20, 44, 46, 48, 52, 205, 218, 223, 229, 242, 243, 244, 255, 256, 258, 306, 313, 314, 315, 319, 325, 327, 329, 330, 343, 347, 349, 350, 359, 361, 362, 387, 388, 389, 392, 398, 408, 423, 465, 468, 472, 476, 478, 488, 497], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 41, 44, 45, 47, 201, 205, 212, 215, 219, 220, 221, 223, 224, 226, 227, 228, 231, 235, 238, 239, 240, 244, 245, 246, 247, 249, 250, 251, 252, 255, 256, 257, 258, 260, 305, 313, 314, 315, 316, 317, 319, 322, 323, 324, 325, 327, 328, 330, 347, 349, 350, 353, 358, 359, 365, 380, 382, 384, 395, 399, 404, 412, 413, 414, 415, 416, 422, 425, 431, 432, 436, 437, 441, 447, 449, 452, 455, 457, 459, 463, 465, 469, 471, 472, 478, 480, 482, 492, 493, 496], "adjac": [0, 10, 16, 20, 24, 229, 231, 250, 256, 316, 321, 330, 353, 386, 410, 428, 443, 457, 458, 465, 466, 477], "direct": [0, 9, 10, 15, 45, 47, 218, 231, 235, 238, 241, 244, 246, 247, 250, 255, 256, 276, 306, 313, 315, 319, 322, 325, 327, 330, 335, 340, 346, 361, 372, 385, 386, 387, 388, 389, 392, 396, 397, 399, 408, 409, 410, 411, 422, 423, 432, 459, 463, 465, 466, 468, 472, 476, 477, 479, 493, 497, 498], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 41, 45, 47, 231, 244, 245, 247, 252, 253, 260, 314, 317, 318, 319, 322, 323, 324, 325, 330, 359, 364, 371, 447, 452, 461, 465, 478, 482], "separ": [0, 6, 17, 30, 36, 207, 218, 220, 231, 245, 252, 314, 315, 412, 467, 477, 478], "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 45, 46, 47, 52, 53, 54, 55, 56, 91, 92, 127, 128, 129, 130, 165, 166, 175, 192, 202, 205, 207, 212, 218, 223, 226, 227, 229, 231, 234, 237, 240, 244, 245, 246, 247, 249, 255, 256, 260, 275, 313, 314, 317, 319, 322, 324, 325, 330, 367, 389, 391, 414, 471, 472, 476, 477, 478, 492], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 41, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 207, 209, 212, 218, 219, 220, 223, 224, 226, 227, 229, 231, 242, 243, 244, 245, 247, 249, 255, 256, 257, 258, 264, 300, 314, 316, 319, 321, 323, 325, 327, 328, 330, 349, 350, 364, 431, 438, 443, 455, 461, 465, 467, 468, 471, 472, 476, 477, 478, 486, 488, 489, 491, 496, 498], "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 46, 47, 52, 202, 207, 218, 221, 226, 227, 235, 241, 244, 245, 246, 247, 248, 249, 250, 256, 258, 313, 314, 315, 327, 328, 329, 344, 353, 358, 359, 364, 384, 408, 411, 416, 422, 425, 472, 474, 476, 477, 478, 480, 481, 495, 496], "degree_centr": [0, 34, 215, 256, 330, 466, 488], "centrality_typ": [0, 256], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 44, 48, 202, 218, 219, 226, 229, 233, 235, 245, 246, 248, 252, 407, 414, 430, 457, 474, 477, 478, 480, 482], "far": [0, 245, 314], "possibl": [0, 4, 6, 15, 46, 205, 210, 212, 219, 235, 249, 250, 256, 315, 321, 322, 330, 398, 406, 407, 422, 423, 424, 425, 457, 461, 477], "along": [0, 6, 10, 20, 24, 31, 209, 227, 229, 235, 258, 315, 319, 325, 459, 465, 478, 479], "branch": [0, 52, 224, 231, 319, 365, 375, 496], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 44, 45, 47, 52, 202, 209, 223, 229, 231, 238, 240, 255, 256, 260, 313, 319, 326, 365, 367, 368, 370, 372, 375, 377, 379, 380, 383, 394, 396, 397, 399, 401, 402, 403, 409, 410, 411, 417, 418, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 460, 467, 472, 474, 477, 478, 480], "backtrack": 0, "influenc": [0, 27, 330], "relationship": [0, 47, 205, 212, 219, 224, 225, 226, 231, 235, 238, 245, 248, 249, 250, 314, 315, 325, 477, 478], "high": [0, 6, 9, 205, 210, 215, 219, 226, 231, 244, 247, 248, 250, 251, 252, 253, 321, 399, 430, 472, 474], "score": [0, 231, 250], "contribut": [0, 4, 217, 477], "low": [0, 6, 7, 13, 32, 219, 237, 245, 246, 250, 251, 252, 457, 478], "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 44, 46, 47, 52, 201, 203, 210, 215, 220, 222, 224, 230, 231, 235, 237, 244, 245, 247, 248, 249, 250, 253, 255, 256, 257, 258, 265, 266, 268, 269, 270, 273, 276, 278, 285, 286, 290, 291, 300, 317, 318, 319, 322, 324, 327, 328, 329, 330, 332, 333, 334, 336, 337, 339, 341, 343, 344, 345, 347, 348, 349, 350, 353, 358, 359, 360, 363, 364, 365, 367, 368, 370, 374, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 400, 404, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 427, 431, 433, 442, 453, 457, 458, 459, 460, 462, 463, 465, 467, 472, 476, 477, 478, 479, 480], "mean": [0, 2, 20, 29, 30, 36, 37, 44, 47, 205, 218, 219, 227, 240, 255, 257, 263, 302, 315, 318, 319, 329, 330, 370, 387, 394, 404, 413, 414, 415, 465, 468, 471, 472, 474, 476, 477, 478, 480, 485], "themselv": [0, 219, 231, 235, 459], "eigenvector_centr": [0, 34, 256, 330, 466, 488], "toler": [0, 256, 330, 384], "doubl": [0, 9, 14, 16, 18, 33, 46, 83, 97, 211, 224, 226, 227, 229, 244, 253, 258, 314, 324, 435, 459, 476, 480, 488, 496, 498], "error": [0, 2, 32, 36, 37, 38, 44, 49, 53, 55, 56, 91, 92, 101, 118, 127, 129, 130, 165, 166, 175, 192, 212, 217, 219, 221, 226, 255, 256, 319, 323, 330, 364, 465, 478], "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 46, 48, 205, 209, 212, 218, 219, 223, 226, 229, 231, 238, 240, 248, 249, 256, 323, 327, 330, 423, 424, 465, 472, 477, 478, 486, 491, 492], "converg": [0, 6, 9, 14, 17, 24, 250, 253, 256, 330], "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 44, 46, 47, 53, 127, 215, 218, 220, 221, 228, 229, 231, 235, 239, 240, 242, 246, 248, 250, 253, 255, 256, 258, 315, 316, 317, 318, 319, 322, 326, 330, 340, 345, 347, 356, 357, 358, 363, 364, 366, 368, 371, 375, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 430, 438, 443, 448, 455, 457, 458, 460, 462, 463, 464, 465, 472, 474, 477, 478, 479, 486, 492, 496], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 229, 230, 235, 237, 238, 240, 241, 244, 245, 246, 247, 248, 250, 251, 256, 258, 313, 316, 325, 329, 330, 332, 333, 334, 335, 336, 341, 352, 353, 354, 355, 359, 360, 370, 371, 372, 374, 377, 379, 380, 383, 384, 412, 413, 414, 415, 416, 422, 425, 427, 459, 465, 488, 492, 497], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 205, 209, 210, 215, 217, 219, 221, 222, 223, 229, 230, 231, 233, 235, 237, 238, 240, 241, 243, 244, 246, 248, 250, 256, 257, 306, 308, 313, 314, 315, 317, 320, 322, 324, 325, 326, 327, 330, 384, 412, 413, 414, 415, 465, 472, 476, 480, 482, 486, 488, 489, 490, 492, 493, 496, 497, 498], "rate": [0, 45, 205, 210, 245, 251, 256, 412, 414, 415], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 47, 52, 205, 206, 212, 215, 218, 219, 223, 224, 226, 227, 229, 231, 235, 236, 244, 246, 248, 249, 250, 252, 253, 313, 314, 315, 316, 317, 319, 321, 323, 325, 327, 330, 336, 359, 366, 367, 369, 371, 372, 376, 393, 404, 405, 412, 413, 414, 415, 416, 420, 422, 425, 426, 431, 432, 440, 458, 459, 464, 465, 476, 477, 478, 485, 492], "hub": [0, 29, 256, 257, 330, 383, 471], "author": [0, 27, 49, 241, 246, 256, 330, 384, 472, 492], "estim": [0, 219, 226, 231, 248, 249, 325, 330], "within": [0, 13, 30, 36, 44, 46, 47, 51, 52, 205, 207, 209, 210, 223, 224, 226, 227, 229, 230, 231, 236, 245, 246, 247, 248, 249, 250, 319, 328, 330, 384, 387, 388, 408, 414, 415, 472, 477, 486, 492, 496], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 41, 44, 45, 46, 47, 48, 51, 52, 126, 200, 201, 202, 204, 205, 207, 212, 215, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 257, 260, 264, 266, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 324, 325, 327, 328, 368, 382, 384, 394, 396, 422, 443, 465, 468, 471, 472, 476, 477, 478, 480, 482, 492, 498], "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 41, 44, 45, 46, 47, 48, 51, 52, 53, 54, 56, 127, 128, 130, 205, 212, 215, 218, 219, 223, 231, 234, 235, 236, 237, 240, 244, 245, 246, 247, 249, 250, 252, 255, 256, 260, 313, 314, 315, 317, 319, 322, 323, 324, 326, 327, 399, 412, 417, 423, 443, 459, 465, 468, 474, 477, 478, 480, 481, 482, 488], "rel": [0, 27, 44, 46, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 219, 220, 235, 244, 250, 315, 319, 330, 478], "immedi": [0, 6, 205, 219, 251, 256, 258, 319, 330, 468, 472, 478], "under": [0, 9, 10, 14, 17, 24, 38, 47, 205, 207, 226, 231, 237, 244, 245, 256, 260, 319, 321, 322, 330, 477], "consider": [0, 226, 227, 244, 330, 387], "katz_centr": [0, 34, 256, 330, 466, 488], "alpha": [0, 231, 256, 330, 404, 405, 416, 457], "beta": [0, 256, 330, 405, 416], "attenu": [0, 330], "factor": [0, 13, 220, 231, 256, 330, 365, 375, 397, 399, 477], "neighborhood": [0, 6, 245, 247, 250, 256, 319, 323, 330, 408], "maxim": [0, 6, 330, 418, 464], "subgraph": [0, 6, 9, 17, 33, 231, 232, 234, 246, 247, 248, 256, 278, 284, 313, 319, 321, 327, 328, 330, 341, 344, 366, 377, 408, 465, 476, 492, 496], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 45, 46, 49, 202, 204, 207, 212, 215, 218, 219, 224, 226, 228, 229, 231, 235, 238, 239, 242, 244, 245, 246, 248, 250, 252, 253, 255, 258, 260, 313, 314, 317, 319, 322, 323, 324, 325, 327, 330, 332, 333, 334, 341, 344, 345, 360, 370, 371, 372, 374, 377, 392, 417, 418, 422, 423, 465, 468, 469, 472, 476, 477, 478, 486, 490, 496], "found": [0, 4, 9, 16, 17, 18, 36, 52, 53, 55, 91, 92, 127, 129, 165, 166, 201, 212, 218, 230, 231, 235, 236, 247, 253, 306, 326, 384, 426, 427, 463, 465, 472, 476, 477, 478, 482], "recurs": [0, 6, 319, 367], "prune": 0, "less": [0, 2, 6, 13, 17, 27, 218, 223, 224, 229, 244, 256, 319, 326, 330, 382, 393, 404, 406, 478], "kkore": [0, 34], "order": [0, 6, 34, 46, 205, 219, 224, 226, 234, 247, 249, 250, 256, 257, 314, 319, 325, 330, 332, 333, 339, 363, 364, 367, 372, 379, 392, 393, 396, 428, 429, 432, 457, 458, 465, 471, 474, 478, 496], "That": [0, 27, 256, 324, 382, 425, 468, 480], "kshell": [0, 34], "fast": [0, 9, 20, 219, 256, 323], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 41, 44, 47, 48, 201, 212, 223, 224, 226, 227, 234, 235, 244, 245, 246, 249, 250, 252, 256, 300, 314, 315, 317, 319, 323, 330, 340, 347, 365, 394, 398, 400, 409, 412, 413, 414, 415, 443, 465, 472, 477, 478, 485, 492, 496], "assign": [0, 7, 9, 15, 18, 20, 36, 37, 218, 227, 236, 244, 246, 248, 250, 255, 256, 258, 330, 384, 392, 394, 396, 398, 412, 415, 420, 465, 468, 471, 474, 477, 478, 498], "unlabel": 0, "dure": [0, 6, 9, 13, 24, 52, 201, 207, 212, 221, 229, 231, 247, 248, 250, 255, 314, 319, 384, 472, 474, 478, 479, 480, 481], "aim": [0, 22, 51, 205, 231, 241, 247, 248, 249, 250, 252], "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 46, 49, 126, 208, 212, 217, 218, 222, 230, 231, 239, 244, 245, 246, 250, 255, 256, 260, 290, 314, 315, 323, 324, 325, 327, 476, 479, 485, 495, 496], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 44, 45, 46, 47, 48, 51, 52, 126, 200, 201, 202, 204, 207, 209, 210, 212, 218, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 237, 238, 239, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 260, 264, 313, 314, 315, 316, 317, 319, 322, 323, 325, 327, 329, 364, 384, 394, 398, 404, 407, 417, 418, 424, 427, 448, 461, 465, 472, 474, 476, 477, 478, 479, 481, 482, 485, 486], "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 41, 42, 44, 51, 52, 106, 180, 202, 209, 212, 215, 218, 219, 221, 224, 226, 227, 229, 231, 234, 241, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 258, 317, 318, 319, 322, 325, 327, 384, 412, 416, 465, 471, 474, 476, 477, 478, 485], "ldbc": [0, 4, 34, 205, 218, 220, 227, 228, 234, 244, 248, 252, 253, 476, 493, 498], "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 45, 47, 51, 205, 207, 212, 215, 218, 219, 226, 227, 230, 234, 247, 249, 250, 317, 319, 321, 323, 330, 384, 450, 457, 459, 465, 472, 476, 477, 479], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 34, 37, 44, 48, 51, 91, 92, 165, 166, 209, 215, 217, 224, 226, 229, 235, 244, 245, 247, 248, 249, 250, 252, 256, 258, 264, 266, 310, 312, 314, 317, 319, 323, 324, 327, 330, 349, 350, 354, 396, 405, 419, 463, 465, 472, 474, 476], "variant": [0, 31, 250, 253], "networkx": [0, 3, 7, 8, 12, 34, 215, 234, 251, 254, 255, 256, 290, 330, 332, 333, 334, 335, 336, 337, 339, 341, 343, 344, 345, 347, 348, 349, 350, 354, 355, 359, 360, 364, 365, 367, 368, 370, 371, 372, 375, 377, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 401, 402, 403, 405, 408, 409, 410, 411, 416, 417, 418, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 458, 460, 465, 467, 468, 470, 494, 499], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 39, 41, 42, 44, 45, 46, 47, 48, 52, 126, 202, 205, 212, 215, 218, 219, 220, 221, 224, 225, 226, 229, 231, 234, 237, 238, 244, 245, 246, 247, 249, 250, 253, 254, 255, 256, 258, 306, 312, 313, 314, 315, 317, 319, 322, 325, 326, 327, 328, 329, 330, 344, 368, 384, 398, 399, 404, 408, 416, 419, 420, 421, 426, 427, 445, 460, 463, 465, 468, 472, 476, 477, 478, 479, 482, 485, 490, 491, 495], "sampling_path": [0, 34], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 47, 229, 231, 235, 237, 250, 305, 457, 478, 480], "rank": [0, 6, 33, 242, 245, 255, 256, 257, 457, 471], "vote": [0, 258], "scheme": [0, 6, 9, 45, 46, 104, 178, 201, 218, 244], "With": [0, 4, 12, 19, 24, 34, 36, 41, 207, 208, 220, 226, 227, 229, 231, 234, 239, 240, 245, 246, 247, 403, 476, 485], "top": [0, 9, 12, 22, 34, 127, 128, 129, 130, 165, 166, 175, 192, 227, 229, 231, 252, 317, 439, 478, 496], "highest": [0, 231, 399], "elect": 0, "num_of_nod": [0, 256], "select": [0, 9, 15, 36, 47, 219, 223, 227, 235, 238, 244, 245, 248, 250, 257, 265, 271, 272, 282, 283, 287, 295, 296, 313, 319, 327, 384, 393, 416, 428, 462, 465, 471, 472, 476, 477, 496], "influenti": 0, "extract": [0, 204, 222, 224, 229, 244, 245, 246, 247, 256, 264, 328, 472, 474, 478], "weakli": [0, 256, 330, 404], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 44, 45, 46, 47, 48, 51, 203, 204, 205, 207, 212, 215, 217, 218, 219, 220, 221, 223, 224, 227, 229, 230, 231, 233, 234, 235, 238, 240, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 325, 326, 327, 330, 387, 416, 419, 422, 423, 425, 465, 468, 471, 474, 477, 478, 480, 482, 485], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 37, 45, 52, 215, 219, 220, 221, 224, 226, 227, 229, 231, 233, 234, 235, 238, 244, 247, 253, 275, 291, 314, 315, 316, 317, 327, 459, 465, 478, 482], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 41, 52, 205, 207, 212, 220, 221, 223, 226, 231, 245, 246, 250, 251, 253, 254, 313, 327, 401, 402, 403, 474, 476, 482], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 44, 45, 46, 47, 48, 49, 52, 92, 166, 201, 202, 205, 206, 207, 209, 212, 215, 217, 218, 219, 223, 224, 226, 227, 229, 230, 231, 233, 234, 235, 236, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 274, 313, 315, 319, 320, 321, 325, 330, 361, 362, 384, 412, 413, 414, 415, 462, 465, 467, 472, 474, 476, 477, 478, 479, 482, 485, 488], "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 44, 45, 48, 49, 52, 91, 94, 101, 126, 165, 175, 200, 201, 205, 207, 209, 210, 212, 218, 220, 222, 223, 230, 233, 236, 239, 240, 244, 245, 246, 247, 250, 252, 254, 255, 256, 257, 291, 302, 319, 323, 324, 325, 327, 328, 417, 418, 468, 469, 472, 477, 478, 479, 480, 481, 482, 485, 486, 488, 490], "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 41, 45, 48, 52, 126, 202, 204, 205, 207, 210, 212, 220, 221, 222, 223, 230, 235, 236, 237, 239, 240, 246, 252, 254, 256, 260, 315, 320, 324, 325, 374, 394, 465, 472, 474, 477, 488, 496], "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 52, 202, 223, 227, 233, 234, 248, 254, 260, 305, 317, 320, 325, 384, 394, 472, 477, 478, 482], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 44, 46, 47, 200, 205, 207, 209, 210, 215, 217, 221, 226, 227, 231, 237, 238, 239, 240, 247, 249, 250, 251, 252, 255, 313, 315, 321, 330, 465, 478], "extens": [1, 4, 6, 27, 36, 46, 219, 221, 224, 238, 245, 314], "henc": [1, 2, 10, 32, 244, 339, 462, 465, 478], "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 44, 45, 46, 48, 51, 52, 126, 200, 201, 202, 204, 205, 207, 212, 218, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 236, 237, 239, 240, 244, 246, 249, 251, 252, 254, 256, 260, 312, 314, 315, 318, 319, 320, 323, 324, 327, 330, 343, 374, 384, 394, 396, 408, 413, 414, 415, 465, 472, 474, 476, 477, 478, 480, 485, 486, 488, 498], "flash": [1, 3, 8, 12, 245], "java": [1, 4, 8, 12, 14, 34, 49, 206, 210, 217, 220, 226, 229, 232, 234, 247, 248, 252, 256, 260, 264, 477, 488], "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 44, 45, 49, 51, 52, 201, 202, 203, 205, 207, 209, 210, 226, 229, 231, 234, 235, 242, 245, 247, 248, 255, 256, 257, 260, 263, 275, 287, 315, 319, 323, 325, 330, 363, 364, 374, 394, 405, 418, 419, 422, 423, 457, 459, 461, 462, 465, 477, 480, 486, 488, 490, 496], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 42, 49, 202, 206, 210, 212, 215, 217, 218, 221, 223, 225, 231, 232, 235, 237, 240, 244, 245, 246, 248, 249, 251, 252, 255, 256, 263, 313, 316, 320, 323, 325, 328, 329, 465, 467, 468, 476, 477, 485, 486, 488, 489, 491, 492, 494, 495, 496, 498], "These": [1, 4, 9, 15, 20, 24, 46, 47, 205, 218, 224, 235, 244, 245, 246, 248, 249, 250, 251, 319, 325, 477, 485], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 45, 46, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 205, 207, 215, 218, 219, 220, 223, 225, 227, 229, 231, 235, 238, 240, 241, 242, 243, 245, 246, 248, 249, 250, 253, 255, 256, 257, 263, 264, 266, 267, 271, 272, 275, 276, 279, 280, 282, 283, 284, 285, 286, 287, 289, 290, 292, 295, 296, 300, 306, 308, 313, 315, 316, 317, 318, 319, 322, 323, 324, 325, 327, 328, 329, 330, 335, 336, 339, 341, 344, 345, 347, 349, 350, 353, 354, 355, 358, 359, 360, 363, 364, 365, 367, 368, 370, 371, 372, 374, 375, 377, 379, 380, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 457, 458, 459, 460, 461, 462, 466, 467, 469, 470, 472, 474, 477, 478, 480, 489, 492, 497], "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 44, 45, 48, 49, 68, 88, 91, 92, 101, 109, 126, 142, 162, 165, 166, 175, 183, 200, 201, 203, 206, 208, 210, 212, 215, 218, 220, 221, 222, 224, 225, 226, 228, 229, 230, 232, 233, 234, 235, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 265, 271, 272, 284, 287, 291, 295, 296, 300, 313, 315, 317, 319, 321, 325, 327, 329, 349, 350, 470, 471, 472, 477, 480, 482, 486, 492], "upon": [1, 2, 9, 14, 205, 224, 226, 252, 327, 478, 479], "pregel": [1, 4, 8, 12, 17, 22, 34, 234, 245, 248, 470, 482, 492, 494], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 41, 44, 91, 92, 165, 166, 215, 220, 226, 231, 238, 244, 246, 313, 463, 465, 498], "deploi": [2, 15, 33, 37, 126, 210, 212, 217, 219, 220, 221, 222, 230, 234, 237, 245, 247, 252, 315, 472, 474, 479], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 46, 52, 204, 205, 212, 218, 220, 221, 222, 230, 236, 237, 239, 240, 245, 246, 247, 248, 249, 250, 256, 313, 325, 472, 477], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 41, 44, 47, 202, 207, 212, 219, 223, 226, 231, 234, 235, 244, 246, 247, 250, 260, 277, 314, 317, 318, 319, 323, 325, 327, 330, 393, 414, 445, 463, 465, 469, 471, 477, 478, 479, 480], "advantag": [2, 219, 234, 244, 251, 252, 481], "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 41, 44, 47, 91, 126, 165, 200, 201, 210, 212, 215, 218, 219, 220, 221, 225, 227, 229, 230, 231, 235, 238, 242, 243, 246, 250, 253, 256, 257, 316, 317, 318, 319, 322, 327, 328, 330, 332, 333, 334, 336, 341, 345, 349, 350, 366, 368, 371, 374, 380, 384, 385, 386, 388, 389, 390, 392, 396, 399, 400, 404, 405, 409, 411, 422, 423, 425, 427, 430, 433, 438, 442, 443, 446, 449, 452, 454, 457, 458, 459, 460, 465, 467, 468, 477, 480, 489, 492, 495, 496], "gie": [2, 32, 33, 217, 224, 231, 234, 244, 245, 249, 252, 253, 254, 284, 472, 489, 490, 499], "gle": [2, 32, 217, 234, 237, 238, 239, 245, 250, 252, 254, 489, 490, 497], "address": [2, 9, 14, 17, 23, 31, 44, 212, 226, 227, 242, 245, 250, 478, 496], "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 41, 46, 202, 205, 215, 218, 219, 223, 226, 229, 231, 232, 234, 235, 238, 244, 245, 246, 247, 248, 249, 250, 252, 253, 256, 275, 313, 314, 315, 316, 317, 318, 319, 321, 322, 324, 384, 388, 389, 390, 412, 415, 422, 442, 457, 465, 470, 472, 474, 476, 477, 478, 479, 480, 481, 482, 485], "complex": [2, 4, 6, 12, 22, 34, 37, 42, 203, 205, 207, 215, 219, 220, 226, 227, 228, 229, 234, 235, 244, 245, 247, 248, 249, 250, 251, 252, 256, 316, 330, 394, 398, 413, 414, 415, 477], "relat": [2, 4, 13, 23, 24, 27, 33, 38, 45, 47, 52, 58, 126, 132, 200, 201, 202, 203, 205, 209, 212, 217, 219, 223, 225, 226, 230, 235, 238, 241, 245, 246, 247, 249, 250, 255, 315, 319, 325, 421, 457, 462, 476, 477, 478], "show": [2, 14, 19, 20, 27, 29, 30, 38, 207, 209, 212, 219, 220, 231, 234, 239, 240, 246, 248, 249, 250, 316, 317, 325, 468, 472, 474, 477], "kubernet": [2, 29, 212, 215, 217, 218, 220, 234, 239, 242, 244, 246, 251, 472, 478, 489, 491, 492, 494, 498, 499], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 212, 215, 217, 220, 222, 230, 231, 234, 237, 239, 244, 245, 246, 247, 248, 249, 250, 251, 256, 315, 325, 330, 387, 466, 472, 478, 479, 486, 488, 495], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 44, 47, 48, 202, 205, 212, 215, 218, 219, 221, 223, 224, 226, 227, 229, 231, 235, 244, 245, 250, 252, 314, 315, 316, 321, 330, 394, 465, 477, 478], "scenario": [2, 4, 6, 8, 12, 13, 41, 47, 205, 207, 219, 229, 230, 231, 235, 238, 244, 245, 249, 250, 252, 314, 315, 317], "quit": [2, 30, 223, 384], "common": [2, 6, 12, 15, 30, 48, 219, 223, 231, 235, 238, 244, 245, 247, 248, 249, 250, 252, 313, 314, 321, 322, 336, 457, 459, 465, 476, 477, 486], "intend": [2, 13, 36, 224, 457, 471], "analysi": [2, 7, 8, 11, 13, 219, 230, 231, 234, 244, 250, 251, 253, 254, 256, 418], "offlin": [2, 217, 234, 235, 247, 250, 251, 474], "everi": [2, 6, 23, 44, 47, 203, 229, 231, 238, 250, 255, 319, 330, 332, 333, 334, 349, 350, 368, 382, 445, 452, 465, 471, 477], "dai": [2, 20, 47, 231, 465, 468, 476], "export": [2, 4, 23, 29, 31, 33, 39, 52, 204, 212, 220, 236, 476, 478, 491], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 44, 207, 209, 218, 227, 229, 245, 247, 252, 260, 273, 314, 316, 317, 318, 319, 340, 377, 391, 398, 404, 405, 412, 413, 414, 415, 416, 465, 468, 472, 477, 478, 480, 496], "real": [2, 6, 9, 12, 13, 34, 201, 215, 218, 227, 229, 234, 245, 246, 248, 250, 457, 476, 478], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 47, 201, 202, 212, 219, 220, 221, 224, 227, 229, 231, 234, 238, 242, 243, 244, 246, 249, 250, 253, 256, 314, 315, 319, 330, 363, 364, 400, 401, 402, 403, 413, 414, 415, 417, 418, 427, 430, 465, 477, 478, 480, 492, 496], "sampl": [2, 29, 30, 31, 33, 45, 51, 210, 217, 218, 234, 235, 242, 245, 246, 252, 260, 314, 315, 316, 318, 321, 323, 326, 329, 404, 424, 457, 478, 497], "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 41, 48, 52, 212, 215, 218, 219, 224, 227, 229, 231, 238, 244, 249, 253, 258, 314, 315, 319, 321, 323, 326, 330, 384, 392, 398, 422, 433, 449, 471, 472, 476, 477, 478, 482, 485], "unnecessari": [2, 6, 9, 226, 231, 477], "capabl": [2, 6, 11, 16, 20, 52, 205, 224, 225, 226, 229, 232, 245, 247, 249, 252, 465], "independ": [2, 6, 30, 245, 252, 314, 328, 341, 344, 392, 419, 465], "document": [2, 10, 27, 29, 33, 35, 36, 38, 49, 52, 207, 209, 210, 212, 220, 223, 224, 225, 229, 230, 232, 234, 236, 250, 256, 313, 314, 320, 472, 473, 478], "walk": [2, 4, 32, 45, 202, 218, 231, 245, 246, 249, 319, 366, 377], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 44, 45, 201, 202, 203, 205, 207, 210, 215, 217, 218, 220, 221, 225, 226, 230, 231, 233, 234, 235, 237, 238, 239, 240, 245, 247, 248, 249, 250, 251, 255, 266, 314, 315, 317, 319, 323, 325, 394, 396, 399, 427, 433, 465, 472, 474, 476, 477, 480, 482], "standalon": [2, 23, 27, 32, 212, 217, 220, 221, 231, 244, 245, 479, 485, 498], "self": [2, 218, 231, 244, 300, 313, 316, 319, 330, 340, 353, 392, 394, 396, 398, 404, 412, 413, 414, 415, 416, 465, 466, 468, 472, 478, 493, 497, 498], "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 49, 52, 126, 200, 201, 203, 206, 207, 209, 210, 212, 215, 218, 225, 231, 234, 238, 239, 240, 245, 247, 248, 249, 250, 251, 252, 253, 255, 472, 478, 479, 485, 488], "k8": [2, 4, 7, 17, 22, 30, 37, 38, 41, 48, 212, 215, 217, 218, 222, 230, 234, 237, 239, 244, 252, 254, 472, 478, 488, 489, 490, 492, 495, 498], "7": [2, 10, 20, 23, 27, 30, 31, 32, 126, 200, 212, 221, 229, 231, 253, 314, 320, 325, 332, 333, 345, 368, 430, 436, 438, 442, 443, 446, 448, 460, 465, 480, 491, 495, 496], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 44, 45, 46, 48, 51, 52, 126, 201, 202, 204, 205, 207, 212, 215, 218, 219, 231, 233, 234, 235, 236, 238, 240, 241, 244, 245, 246, 250, 252, 253, 256, 260, 313, 314, 315, 317, 319, 320, 321, 323, 325, 330, 343, 394, 396, 401, 403, 412, 415, 455, 459, 465, 467, 471, 472, 474, 477, 478, 481, 482, 485, 486], "get": [2, 4, 6, 12, 16, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 41, 49, 53, 54, 55, 56, 91, 92, 127, 128, 129, 130, 165, 166, 201, 205, 210, 212, 217, 218, 219, 220, 224, 231, 235, 238, 244, 249, 251, 254, 256, 257, 258, 276, 313, 316, 317, 318, 319, 322, 327, 328, 329, 330, 363, 384, 455, 465, 471, 472, 474, 477, 478, 482, 485, 486, 488, 491, 492], "instal": [2, 4, 15, 16, 17, 19, 23, 33, 35, 41, 48, 49, 202, 210, 212, 218, 220, 222, 230, 246, 256, 260, 323, 465, 468, 472, 489, 490, 491, 492, 495], "client": [2, 17, 22, 23, 29, 33, 38, 41, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201, 202, 211, 219, 230, 232, 234, 240, 243, 255, 256, 325, 472, 474, 476, 477, 478, 479, 488, 490, 495], "prepar": [2, 4, 33, 36, 45, 210, 218, 221, 223, 235, 236, 237, 238, 240, 241, 246, 250, 254, 477, 492], "continu": [2, 6, 15, 16, 20, 27, 218, 219, 230, 231, 234, 235, 245, 246, 250, 253, 313, 384, 422, 425, 477, 478, 479], "incas": [2, 218], "doesn": [2, 13, 29, 32, 37, 38, 41, 205, 218, 229, 231, 260, 319, 394, 396, 398, 465, 471, 480], "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 41, 204, 205, 209, 211, 212, 218, 227, 229, 231, 242, 243, 244, 247, 253, 255, 256, 258, 260, 266, 313, 318, 319, 325, 329, 330, 343, 359, 394, 396, 398, 418, 422, 423, 457, 459, 462, 465, 471, 478, 480, 497], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 41, 47, 201, 204, 218, 220, 221, 229, 234, 236, 244, 254, 256, 308, 315, 317, 318, 327, 393, 476, 477, 478, 479], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 46, 48, 49, 52, 53, 55, 91, 92, 101, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 205, 209, 210, 212, 218, 220, 221, 223, 226, 229, 230, 231, 242, 244, 245, 246, 249, 250, 255, 256, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 290, 293, 294, 300, 306, 307, 308, 317, 319, 322, 324, 327, 328, 343, 365, 367, 368, 370, 371, 372, 374, 375, 377, 379, 380, 382, 383, 384, 386, 387, 389, 392, 394, 396, 397, 399, 400, 401, 402, 403, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 418, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 459, 460, 465, 467, 468, 469, 472, 478, 479, 480, 481, 486, 488, 491], "distinct": [2, 51, 224, 229, 245, 246, 249, 370, 432, 458, 477], "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201, 226, 229, 231, 238, 240, 244, 248, 250, 255, 256, 258, 279, 290, 305, 313, 317, 321, 322, 328, 330, 393, 401, 403, 412, 414, 465, 468, 470, 472, 477, 478, 482, 488], "entir": [2, 9, 34, 205, 207, 219, 231, 246, 250, 319, 330, 465], "discret": [2, 235, 250, 313, 384, 397, 399, 405, 409, 420], "util": [2, 4, 6, 9, 15, 32, 36, 41, 42, 45, 47, 51, 52, 205, 209, 224, 225, 226, 231, 234, 236, 241, 244, 245, 247, 248, 251, 255, 256, 258, 329, 430, 476, 477, 478, 481], "either": [2, 13, 30, 34, 46, 202, 207, 212, 218, 226, 227, 230, 231, 238, 256, 315, 319, 327, 328, 368, 371, 384, 411, 422, 455, 465, 479], "aforement": [2, 51, 244, 248, 250, 314, 319, 478], "per": [2, 46, 205, 218, 226, 477, 478], "prefer": [2, 13, 27, 36, 44, 205, 206, 477], "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 126, 200, 212, 215, 221, 223, 228, 230, 231, 234, 237, 239, 242, 244, 246, 254, 256, 257, 275, 306, 307, 308, 310, 312, 327, 328, 465, 469, 470, 476, 478, 480, 485, 486, 488, 489, 490, 492, 493, 496, 498], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 224, 231, 238, 241, 244, 246, 250, 255, 256, 257, 258, 263, 313, 314, 327, 328, 329, 330, 374, 443, 465, 469, 472, 477, 478, 479, 488, 497], "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 41, 44, 46, 47, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 116, 117, 118, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 190, 191, 192, 195, 196, 197, 198, 207, 209, 218, 220, 222, 223, 224, 227, 229, 230, 231, 234, 236, 242, 244, 247, 249, 252, 256, 257, 260, 263, 284, 290, 291, 292, 302, 312, 314, 317, 319, 327, 328, 330, 332, 333, 334, 349, 350, 359, 365, 367, 368, 370, 372, 374, 375, 377, 379, 380, 383, 387, 388, 389, 392, 394, 396, 397, 399, 400, 401, 402, 403, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 457, 460, 463, 465, 467, 468, 471, 472, 478, 479], "control": [2, 6, 27, 38, 244, 245, 247, 255, 330, 465, 477, 478], "subset": [2, 6, 20, 205, 227, 229, 241, 246, 371, 382, 471, 472], "launch": [2, 8, 9, 17, 22, 29, 36, 41, 48, 201, 212, 215, 218, 228, 237, 239, 240, 246, 254, 306, 324, 469, 472, 478, 479, 485, 488, 492], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 41, 44, 45, 47, 48, 49, 51, 52, 126, 201, 202, 205, 207, 212, 215, 218, 219, 224, 226, 227, 229, 231, 234, 235, 238, 240, 244, 245, 246, 248, 249, 250, 256, 258, 264, 313, 314, 315, 316, 319, 321, 323, 325, 327, 330, 342, 363, 366, 368, 371, 394, 396, 398, 399, 404, 407, 408, 412, 413, 414, 415, 416, 427, 430, 459, 465, 469, 471, 472, 478, 480, 481, 486], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 41, 45, 46, 47, 49, 51, 52, 126, 200, 204, 207, 215, 217, 218, 221, 223, 224, 226, 227, 230, 231, 232, 234, 235, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 256, 257, 263, 264, 306, 308, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 328, 330, 332, 333, 334, 336, 341, 343, 344, 349, 350, 353, 358, 359, 364, 366, 368, 370, 371, 374, 377, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 398, 400, 401, 403, 405, 408, 412, 413, 414, 415, 416, 422, 425, 430, 455, 457, 458, 459, 460, 463, 465, 467, 468, 469, 471, 472, 476, 477, 478, 479, 480, 485, 486, 488, 492, 497], "set_opt": [2, 7, 15, 17, 19, 29, 38, 212, 221, 223, 237, 240, 241, 242, 243, 246, 486, 491], "show_log": [2, 7, 15, 17, 19, 29, 38, 212, 221, 237, 240, 241, 242, 243, 246, 312, 486, 491], "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 44, 46, 48, 52, 201, 212, 218, 221, 226, 229, 230, 231, 237, 238, 240, 241, 242, 243, 244, 246, 255, 256, 258, 260, 302, 306, 310, 313, 314, 315, 319, 322, 325, 327, 330, 337, 346, 347, 348, 349, 350, 359, 361, 362, 368, 370, 388, 392, 394, 398, 404, 408, 411, 423, 463, 465, 467, 468, 472, 478, 479, 486, 488, 491, 496, 497, 498], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 215, 223, 240, 241, 242, 244, 256, 257, 302, 306, 327, 328, 472, 476, 480, 486, 488, 489, 490, 492, 493, 496, 498], "enabled_engin": [2, 312, 472], "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 36, 37, 41, 45, 47, 51, 52, 201, 202, 205, 207, 209, 215, 220, 221, 223, 227, 229, 230, 231, 233, 234, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 255, 256, 257, 264, 308, 313, 315, 316, 317, 318, 319, 320, 322, 323, 325, 327, 328, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 364, 365, 367, 368, 370, 371, 374, 375, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 398, 400, 401, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 421, 422, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 457, 458, 462, 463, 465, 467, 468, 471, 472, 474, 476, 477, 478, 479, 481, 482, 485, 486, 488, 491, 492, 493, 495, 496, 497, 498], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 46, 47, 201, 202, 205, 210, 219, 234, 238, 244, 245, 248, 250, 251, 313, 314, 317, 319, 321, 322, 323, 412, 414, 415, 462, 482], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 41, 44, 45, 48, 49, 51, 52, 126, 202, 207, 208, 212, 217, 220, 236, 237, 242, 255, 314, 478, 479, 486], "line": [2, 4, 6, 7, 17, 36, 37, 38, 41, 51, 52, 126, 201, 209, 217, 219, 236, 237, 247, 252, 313, 314, 465, 467, 478, 479, 486, 497], "releas": [2, 27, 31, 32, 35, 45, 48, 202, 212, 227, 240, 253, 422, 425, 471, 472, 478, 491, 495], "replac": [2, 17, 19, 22, 23, 29, 30, 45, 52, 200, 219, 220, 223, 229, 247, 253, 316, 317, 318, 327, 465], "my": [2, 18, 29, 465, 468, 472, 478], "illustr": [2, 4, 29, 45, 46, 47, 226, 231, 235, 241, 242, 243, 248, 250, 316, 442], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 48, 52, 126, 200, 215, 218, 219, 222, 230, 231, 238, 240, 244, 245, 246, 313, 319, 459, 474, 480], "connect": [2, 6, 15, 17, 19, 20, 27, 37, 41, 47, 126, 200, 202, 205, 206, 212, 218, 219, 225, 229, 231, 232, 234, 238, 240, 244, 245, 246, 247, 248, 250, 256, 257, 258, 314, 315, 317, 319, 322, 328, 330, 334, 351, 366, 368, 370, 372, 376, 377, 379, 380, 382, 383, 384, 386, 387, 388, 389, 391, 393, 398, 399, 404, 405, 407, 412, 414, 415, 416, 417, 418, 419, 421, 430, 440, 441, 443, 445, 447, 464, 465, 472, 479, 480, 488, 496], "servic": [2, 27, 28, 29, 38, 39, 46, 48, 49, 51, 52, 53, 56, 127, 130, 206, 207, 208, 210, 222, 230, 234, 240, 245, 246, 248, 250, 255, 472, 479], "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 39, 44, 45, 46, 47, 48, 49, 52, 94, 126, 168, 200, 202, 205, 208, 212, 214, 218, 224, 226, 229, 231, 234, 237, 238, 244, 248, 250, 252, 255, 256, 257, 306, 308, 312, 314, 315, 317, 318, 321, 322, 323, 325, 422, 465, 472, 476, 478, 481, 482], "addr": [2, 29, 258, 472], "ip": [2, 29, 218, 220, 230, 472, 478, 496], "port": [2, 23, 29, 38, 44, 48, 52, 202, 205, 209, 212, 218, 220, 223, 230, 242, 244, 255, 472, 478, 496, 498], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 205, 212, 215, 218, 219, 221, 223, 227, 229, 231, 235, 237, 240, 244, 245, 246, 249, 250, 251, 252, 266, 314, 319, 321, 322, 323, 324, 327, 364, 387, 394, 396, 404, 465, 468, 471, 472, 477, 478, 480, 482, 485], "would": [2, 4, 20, 29, 31, 36, 37, 41, 47, 212, 220, 223, 231, 245, 255, 256, 319, 325, 468, 471, 472, 478], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 41, 201, 231, 246, 256, 265, 313, 317, 319, 403, 478], "wcc_result": 2, "wcc": [2, 13, 253, 256, 488, 493], "print": [2, 7, 16, 20, 29, 30, 33, 48, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 212, 215, 218, 221, 222, 223, 230, 231, 237, 238, 240, 241, 242, 243, 244, 246, 256, 257, 316, 318, 319, 322, 325, 327, 328, 330, 343, 392, 460, 465, 468, 476, 478, 486, 493, 496, 498], "to_datafram": [2, 7, 15, 215, 246, 257, 327, 471, 476, 488], "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 45, 46, 47, 51, 53, 54, 85, 88, 94, 109, 127, 128, 159, 162, 165, 168, 183, 201, 211, 212, 215, 218, 219, 220, 223, 224, 226, 232, 235, 238, 244, 246, 249, 250, 253, 255, 256, 257, 258, 284, 290, 292, 313, 314, 315, 316, 317, 318, 319, 322, 323, 325, 326, 327, 329, 422, 423, 462, 465, 468, 471, 472, 476, 478, 479, 486, 488, 489, 491, 492, 496, 497, 498], "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 215, 218, 224, 246, 247, 250, 256, 257, 365, 375, 382, 388, 392, 404, 412, 421, 453, 458, 471, 472, 476, 478, 488, 492, 493], "tip": [2, 13, 450], "encount": [2, 32, 37, 52, 205, 212, 248, 266], "fail": [2, 37, 94, 101, 175, 201, 212, 219, 226, 229, 250, 330, 465, 478], "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 126, 202, 205, 219, 222, 224, 246, 247, 249, 255, 256, 257, 289, 320, 327, 472, 476, 478, 488, 492, 493, 496], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 44, 46, 126, 200, 202, 207, 212, 217, 219, 221, 227, 229, 231, 237, 244, 245, 246, 249, 256, 257, 289, 313, 315, 328, 330, 394, 396, 399, 400, 422, 423, 424, 425, 427, 439, 457, 465, 471, 478, 488, 491, 492, 496], "empti": [2, 19, 29, 41, 101, 175, 201, 209, 211, 229, 231, 244, 256, 258, 347, 371, 374, 404, 405, 443, 459, 465, 468, 478], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 45, 52, 53, 127, 201, 202, 203, 209, 210, 212, 215, 217, 218, 219, 220, 221, 222, 225, 230, 237, 246, 247, 248, 250, 253, 254, 255, 256, 264, 266, 268, 297, 313, 315, 324, 325, 327, 472, 477], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 212, 215, 221, 225, 231, 237, 240, 241, 242, 243, 246, 250, 253, 256, 257, 313, 319, 325, 472, 476, 488, 490, 492, 496, 498], "load_modern_graph": [2, 7, 30, 33, 221, 246, 256, 328], "modern": [2, 6, 7, 33, 44, 45, 48, 51, 52, 200, 201, 202, 207, 209, 210, 218, 220, 221, 226, 231, 234, 246, 247, 248, 474, 478, 479], "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 44, 45, 46, 47, 48, 52, 56, 91, 101, 130, 165, 175, 201, 202, 205, 207, 209, 212, 215, 218, 219, 224, 227, 229, 231, 234, 238, 240, 242, 244, 246, 248, 249, 251, 256, 258, 307, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 327, 328, 457, 460, 465, 472, 477, 478, 485, 488, 495], "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 47, 48, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 201, 205, 211, 215, 220, 224, 226, 227, 231, 233, 234, 237, 238, 240, 244, 245, 246, 247, 248, 249, 250, 252, 253, 256, 257, 266, 315, 316, 317, 318, 319, 322, 325, 327, 328, 329, 330, 366, 384, 394, 396, 398, 399, 401, 402, 403, 406, 411, 412, 419, 420, 421, 422, 425, 427, 443, 448, 454, 456, 465, 467, 468, 471, 472, 474, 476, 477, 479, 481, 482, 488, 492, 495, 496, 498], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 39, 44, 45, 46, 48, 52, 118, 201, 218, 219, 220, 223, 224, 226, 232, 234, 235, 238, 242, 244, 246, 248, 249, 252, 256, 264, 314, 315, 317, 319, 324, 325, 327, 330, 333, 366, 372, 376, 377, 379, 396, 459, 465, 467, 469, 471, 472, 476, 478, 480, 488, 489, 492, 493, 496], "store": [2, 10, 12, 13, 16, 17, 30, 34, 44, 45, 47, 48, 49, 52, 126, 200, 201, 202, 205, 206, 209, 210, 212, 217, 218, 224, 225, 227, 229, 231, 234, 244, 245, 247, 248, 249, 251, 252, 257, 258, 271, 272, 287, 295, 296, 315, 321, 327, 328, 384, 389, 412, 413, 414, 415, 416, 465, 467, 472, 474, 476, 477, 479, 486, 488, 491], "pod": [2, 27, 28, 29, 30, 38, 41, 48, 201, 212, 215, 218, 240, 244, 472, 478, 486, 489, 491, 492, 498], "elimin": [2, 6, 14, 51, 315], "extran": 2, "resourc": [2, 27, 29, 33, 38, 204, 205, 212, 215, 230, 240, 245, 252, 256, 264, 384, 417, 472, 478, 481, 485, 491], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 44, 46, 47, 49, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 202, 204, 207, 212, 215, 219, 221, 223, 226, 227, 229, 231, 235, 238, 240, 244, 245, 246, 250, 252, 256, 260, 274, 313, 314, 315, 317, 318, 322, 323, 324, 325, 326, 363, 411, 412, 416, 465, 472, 477, 478, 481, 495], "equival": [2, 20, 212, 224, 226, 227, 229, 231, 319, 384, 421, 465], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 42, 45, 47, 52, 203, 205, 207, 209, 212, 223, 224, 226, 227, 229, 230, 231, 235, 244, 245, 247, 250, 252, 255, 319, 323, 330, 363, 364, 371, 374, 394, 396, 401, 412, 413, 414, 415, 416, 424, 460, 463, 464, 465, 466, 467, 470, 476, 477, 482, 485, 488], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 46, 47, 48, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 201, 205, 207, 212, 215, 218, 219, 223, 224, 229, 230, 231, 235, 238, 240, 245, 247, 248, 250, 252, 253, 256, 257, 258, 266, 300, 306, 314, 315, 316, 317, 318, 319, 322, 323, 324, 326, 327, 329, 330, 374, 384, 404, 412, 413, 414, 415, 421, 465, 467, 468, 472, 474, 476, 477, 478, 480, 485, 486], "close": [2, 6, 27, 29, 30, 33, 201, 230, 238, 240, 245, 256, 315, 325, 328, 467, 472, 478, 492], "free": [2, 9, 37, 212, 238, 252, 405, 412, 422, 425, 427, 458, 464, 472], "delet": [2, 9, 27, 29, 30, 33, 48, 53, 54, 55, 91, 92, 126, 127, 128, 129, 165, 166, 200, 201, 212, 285, 324, 472, 474, 478, 491], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 47, 205, 209, 210, 218, 219, 227, 230, 231, 234, 245, 247, 248, 249, 250, 257, 287, 314, 326, 329, 465, 467, 477, 478], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 41, 44, 52, 205, 209, 219, 227, 231, 234, 235, 245, 246, 247, 248, 250, 251, 277, 327, 430, 477, 482], "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 212, 215, 219, 233, 235, 238, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 260, 315, 318, 319, 321, 327, 375, 384, 387, 388, 396, 397, 398, 399, 400, 404, 405, 406, 407, 412, 417, 418, 421, 422, 424, 425, 448, 457, 462, 465, 466, 468, 470, 471, 481], "deriv": [3, 12, 34, 246, 249, 255, 257, 327, 330, 474], "grape": [3, 4, 15, 16, 22, 23, 34, 217, 233, 245, 251, 255, 264, 474, 477, 479, 480, 481, 482, 488, 494], "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 42, 51, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 201, 202, 203, 204, 205, 212, 215, 218, 219, 221, 224, 225, 226, 227, 231, 232, 233, 234, 237, 245, 247, 248, 249, 250, 251, 253, 314, 315, 320, 323, 462, 464, 474, 476, 477, 478, 480, 482, 488, 496], "sigmod": [3, 12, 14, 24, 34, 245, 488, 494], "2017": [3, 12, 14, 34, 245, 422, 423, 488], "further": [3, 6, 10, 14, 20, 27, 30, 34, 205, 215, 220, 224, 227, 229, 231, 246, 247, 257, 315, 327, 328, 343, 474, 477], "enhanc": [3, 4, 9, 201, 205, 226, 229, 246], "introduc": [3, 6, 10, 19, 20, 24, 46, 126, 200, 217, 219, 224, 226, 227, 229, 231, 233, 235, 245, 247, 249, 252, 313, 316, 317, 319, 321, 330, 442, 464, 477, 482], "lot": [3, 13, 37, 215, 231, 233, 482], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 44, 52, 53, 54, 55, 56, 91, 92, 101, 118, 127, 129, 201, 205, 210, 219, 221, 226, 231, 236, 245, 246, 247, 255, 258, 265, 266, 307, 324, 327, 328, 330, 337, 343, 384, 396, 405, 407, 427, 456, 463, 465, 472, 474, 476, 477, 478, 480, 492], "featur": [3, 6, 9, 12, 23, 32, 34, 45, 126, 200, 210, 224, 226, 233, 235, 237, 240, 241, 245, 246, 249, 250, 251, 252, 255, 260, 313, 314, 321, 325, 327, 465, 472, 477, 482, 492, 497], "storag": [3, 9, 30, 42, 48, 52, 59, 62, 133, 136, 205, 212, 219, 220, 224, 226, 227, 231, 244, 247, 250, 252, 292, 315, 476, 478, 479], "languag": [3, 12, 16, 35, 42, 52, 202, 203, 206, 208, 210, 215, 219, 221, 226, 227, 229, 230, 231, 232, 234, 235, 238, 245, 246, 247, 248, 249, 252, 260, 328, 477, 478, 482], "pattern": [3, 6, 12, 23, 30, 44, 205, 219, 220, 223, 226, 227, 229, 234, 238, 245, 248, 252, 256, 318, 323, 478], "better": [3, 8, 12, 20, 24, 29, 34, 218, 219, 231, 233, 250, 252, 472, 478, 482], "integr": [3, 4, 9, 12, 13, 22, 23, 34, 46, 126, 200, 202, 219, 221, 223, 226, 232, 233, 245, 247, 249, 251, 252, 458, 477, 478, 480, 482], "big": [3, 6, 12, 37, 233, 247, 482], "overview": [3, 23, 34, 49, 202, 208, 210, 226, 231, 246, 474], "architectur": [3, 9, 204, 205, 245, 250, 256], "kei": [3, 4, 13, 20, 27, 45, 46, 47, 75, 76, 91, 92, 126, 149, 150, 165, 166, 200, 201, 210, 218, 221, 224, 225, 226, 229, 231, 244, 247, 249, 250, 251, 256, 257, 258, 289, 290, 291, 300, 316, 319, 325, 327, 330, 359, 408, 412, 413, 414, 415, 463, 465, 467, 468, 471, 472, 477, 478, 488, 498], "concept": [3, 247, 250, 313, 314], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 22, 34, 233, 234, 245, 247, 248, 482], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 34, 230, 235, 247, 255, 482], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 52, 202, 212, 215, 218, 221, 224, 232, 234, 235, 237, 238, 239, 240, 241, 246, 250, 251, 254, 256, 321, 328, 471, 472, 474, 476, 492], "tune": [3, 215, 244, 245], "guid": [4, 7, 9, 16, 27, 29, 32, 37, 41, 44, 45, 46, 126, 200, 201, 202, 204, 205, 207, 209, 210, 217, 218, 221, 223, 225, 229, 230, 232, 237, 240, 241, 246, 260, 492], "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 49, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 203, 205, 207, 217, 219, 220, 223, 224, 231, 236, 245, 246, 247, 252, 253, 255, 256, 258, 263, 313, 314, 315, 316, 319, 320, 325, 384, 426, 469, 477, 478, 480, 485], "organ": [4, 51, 52, 209, 223, 229, 231, 234, 235, 250, 254, 313, 315, 317, 321, 322, 401, 403, 442], "identifi": [4, 9, 13, 24, 47, 224, 227, 229, 231, 245, 246, 248, 256, 305, 392, 459, 462, 465, 472, 478, 485, 498], "simplic": [4, 9], "suggest": [4, 13, 219, 223, 231, 244, 247, 384], "prebuilt": [4, 41, 220], "docker": [4, 27, 32, 33, 36, 38, 41, 45, 49, 202, 204, 209, 210, 212, 220, 234, 478, 485, 489, 492, 494, 495], "imag": [4, 29, 36, 38, 48, 52, 202, 209, 212, 220, 234, 236, 242, 253, 316, 472, 485], "necessari": [4, 6, 23, 27, 37, 41, 45, 204, 207, 220, 221, 226, 230, 244, 267, 275, 280, 314, 315, 317, 319, 327, 477, 478, 486], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 41, 52, 126, 204, 212, 220, 222, 223, 230, 231, 236, 237, 247, 250, 256, 319, 387, 392, 478, 485, 488], "shm": [4, 32, 41, 220, 236, 242, 490], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 41, 46, 211, 212, 218, 220, 230, 235, 236, 238, 242, 244, 250, 253, 258, 314, 316, 317, 319, 324, 326, 327, 370, 371, 382, 384, 385, 386, 387, 389, 390, 391, 392, 393, 396, 407, 416, 420, 422, 465, 476, 477, 478, 479, 490], "4096m": [4, 32, 41, 220, 236], "registri": [4, 27, 32, 41, 48, 52, 220, 236, 242, 320, 472, 478, 490], "cn": [4, 23, 27, 29, 31, 32, 41, 48, 52, 220, 236, 242, 244, 320, 478, 489, 490, 498], "hongkong": [4, 27, 32, 41, 48, 52, 220, 236, 242, 478, 490], "aliyunc": [4, 23, 27, 29, 31, 32, 41, 48, 52, 220, 236, 242, 244, 320, 478, 489, 490, 498], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 41, 48, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 166, 200, 220, 221, 223, 236, 237, 242, 244, 247, 248, 253, 256, 260, 320, 323, 330, 417, 426, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 445, 450, 472, 477, 478, 488, 489, 490, 491, 498], "latest": [4, 14, 17, 32, 37, 38, 39, 41, 48, 52, 202, 204, 220, 223, 236, 237, 477, 478, 490, 495], "altern": [4, 45, 47, 224, 393, 412, 416, 465, 477, 478], "manual": [4, 9, 27, 30, 33, 126, 212, 245, 252, 327, 478], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 47, 48, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201, 202, 204, 205, 207, 209, 212, 218, 219, 221, 224, 226, 227, 229, 230, 231, 236, 238, 240, 242, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 258, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 334, 335, 337, 338, 342, 344, 359, 360, 364, 365, 368, 370, 371, 375, 384, 393, 402, 408, 422, 423, 425, 427, 451, 459, 460, 463, 465, 472, 476, 477, 478, 481, 486], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 41, 44, 45, 48, 52, 126, 200, 202, 204, 205, 212, 220, 223, 227, 238, 240, 244, 246, 313, 314, 315, 317, 318, 319, 320, 323, 325, 476, 478, 482, 485, 492], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 39, 45, 49, 202, 212, 215, 217, 221, 225, 234, 240, 246, 247, 254, 256, 260, 320, 324, 330, 472, 477, 478, 479, 486, 491], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 44, 101, 175, 201, 207, 215, 223, 227, 229, 235, 247, 248, 250, 256, 257, 258, 268, 313, 314, 315, 316, 323, 324, 325, 330, 427, 438, 457, 465, 469, 471, 472, 474, 477, 478, 479, 486, 488], "clone": [4, 17, 22, 29, 30, 31, 32, 36, 37, 48, 52, 126, 220, 223, 260, 320, 478, 490], "repositori": [4, 29, 36, 37, 48, 52, 126, 218, 223, 260, 472, 478], "enter": [4, 127, 128, 129, 130, 165, 166, 175, 192, 219, 230], "analytical_engin": [4, 15, 17, 31, 36, 260, 488], "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 44, 45, 48, 52, 201, 207, 212, 223, 230, 234, 255, 259, 261, 313, 324, 327, 472, 476, 485, 486, 489, 491, 492], "git": [4, 17, 22, 29, 30, 31, 32, 35, 37, 48, 52, 126, 220, 223, 260, 323, 477, 490], "http": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 44, 48, 49, 52, 126, 200, 212, 220, 221, 222, 223, 225, 230, 237, 240, 241, 246, 247, 248, 256, 260, 320, 323, 330, 384, 388, 389, 390, 404, 407, 414, 415, 417, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 444, 445, 446, 447, 449, 450, 451, 452, 457, 472, 477, 478, 488, 489, 490, 491, 492, 495, 496, 498], "github": [4, 22, 29, 30, 31, 32, 35, 48, 52, 126, 220, 223, 247, 248, 256, 260, 320, 323, 415, 472, 477, 488, 490, 498], "alibaba": [4, 17, 22, 23, 29, 31, 32, 48, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 220, 234, 245, 247, 250, 251, 260, 320, 323, 488, 490, 498], "cd": [4, 17, 22, 29, 31, 32, 35, 48, 52, 126, 204, 220, 222, 230, 260, 320, 323, 325, 478, 485, 486, 488, 490, 496], "sinc": [4, 6, 23, 24, 29, 30, 37, 44, 46, 47, 202, 205, 219, 223, 229, 231, 236, 240, 244, 245, 253, 266, 315, 319, 327, 363, 364, 394, 396, 443, 460, 467, 471, 476, 477, 478], "inherit": [4, 6, 9, 16, 219, 247, 255, 313, 323], "libgrap": [4, 16, 31, 34, 247, 260], "lite": [4, 16, 31, 34, 247, 260], "note": [4, 13, 14, 20, 27, 29, 37, 38, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 205, 207, 219, 223, 224, 226, 229, 231, 235, 240, 241, 244, 246, 247, 248, 256, 257, 258, 266, 305, 307, 315, 319, 327, 330, 339, 340, 343, 347, 360, 361, 362, 363, 364, 365, 371, 372, 377, 380, 382, 384, 385, 386, 387, 389, 391, 393, 394, 396, 397, 398, 399, 400, 404, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 427, 442, 457, 458, 459, 460, 462, 465, 467, 468, 471, 472, 476, 478, 485, 492, 498], "core": [4, 6, 12, 34, 37, 212, 219, 221, 245, 246, 247, 256, 260, 325, 330, 472, 492], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 44, 46, 47, 49, 52, 205, 215, 219, 226, 230, 231, 241, 246, 247, 248, 249, 250, 256, 314, 315, 316, 327, 375, 394, 442, 457, 459, 465, 466, 476, 477, 478, 481], "partition": [4, 211, 323], "worker": [4, 9, 13, 14, 23, 28, 34, 44, 52, 220, 238, 240, 242, 315, 318, 325, 472, 476], "between": [4, 6, 9, 10, 12, 13, 18, 19, 47, 201, 212, 217, 219, 226, 231, 232, 235, 248, 250, 255, 256, 314, 315, 317, 319, 325, 330, 387, 388, 389, 392, 398, 404, 405, 407, 411, 412, 413, 414, 416, 419, 421, 422, 423, 425, 430, 460, 462, 465, 477, 478, 485], "heavili": 4, "reus": [4, 30, 207, 226, 235, 238, 247, 256, 325, 327, 472, 474], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 48, 207, 227, 231, 237, 244, 251, 260, 266, 312, 323, 327, 374, 408, 465, 471, 472, 474, 476, 478, 485], "fulli": [4, 46, 205, 235, 238, 249, 256, 266, 407, 477, 488], "recommend": [4, 27, 30, 36, 37, 212, 218, 221, 223, 231, 235, 244, 245, 246, 250, 319], "locat": [4, 23, 27, 36, 38, 45, 46, 47, 104, 178, 201, 202, 204, 218, 220, 224, 231, 236, 244, 249, 259, 261, 315, 316, 327, 478, 479, 485], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 32, 36, 37, 41, 44, 45, 47, 48, 201, 212, 215, 218, 219, 221, 223, 226, 231, 232, 234, 236, 244, 245, 246, 250, 251, 252, 254, 255, 256, 314, 319, 323, 325, 327, 384, 394, 396, 404, 465, 471, 472, 474, 476, 477, 478, 479, 498], "therebi": [4, 205, 227], "fledg": [4, 12, 245], "coordin": [4, 15, 27, 29, 35, 37, 38, 41, 217, 221, 240, 255, 327, 377, 472, 478, 485, 486, 489, 490, 492], "while": [4, 6, 12, 19, 20, 29, 34, 46, 47, 202, 205, 207, 215, 218, 222, 224, 226, 227, 229, 230, 231, 235, 245, 247, 248, 249, 251, 252, 314, 319, 325, 361, 362, 422, 425, 427, 459, 465, 474, 477, 478, 486], "": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 41, 44, 45, 46, 47, 48, 51, 52, 91, 92, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201, 202, 203, 205, 207, 209, 212, 218, 220, 222, 223, 224, 225, 226, 229, 230, 231, 232, 234, 235, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 253, 256, 266, 282, 283, 300, 313, 315, 317, 319, 322, 324, 326, 327, 330, 366, 377, 384, 387, 389, 392, 396, 399, 401, 402, 403, 419, 427, 428, 429, 452, 455, 457, 465, 471, 472, 474, 476, 477, 478, 479, 496, 497], "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 44, 45, 46, 47, 48, 205, 215, 218, 219, 224, 226, 227, 229, 231, 234, 235, 237, 238, 244, 245, 246, 247, 248, 249, 250, 252, 255, 256, 257, 258, 260, 264, 313, 314, 315, 317, 318, 319, 320, 327, 328, 330, 349, 350, 359, 385, 386, 411, 412, 416, 424, 437, 458, 459, 465, 471, 472, 476, 477, 478, 479, 482], "ship": 4, "6": [4, 10, 17, 18, 22, 31, 200, 201, 215, 221, 229, 230, 231, 246, 253, 256, 314, 319, 325, 330, 349, 368, 397, 398, 399, 416, 430, 432, 438, 439, 442, 445, 449, 450, 458, 460, 465, 478, 480, 488, 491, 492, 496], "graphalyt": [4, 252], "benchmark": [4, 34, 205, 227, 231, 234, 248, 250, 252, 384], "flatten": [4, 13, 242], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 212, 215, 231, 240, 250, 256, 318, 360, 368, 465, 477], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 41, 44, 45, 47, 52, 126, 200, 202, 203, 205, 207, 215, 218, 219, 220, 221, 225, 226, 229, 231, 234, 246, 247, 249, 250, 255, 256, 257, 284, 319, 323, 327, 328, 330, 425, 469, 472, 474, 478, 480, 485, 486, 488, 492, 496], "written": [4, 12, 20, 47, 52, 231, 245, 247, 249, 443, 474, 477, 480, 488], "giraph": [4, 7, 8, 12, 17, 23, 24, 233, 252, 482], "graphx": [4, 7, 8, 12, 17, 24, 233, 252, 482], "app": [4, 15, 16, 17, 18, 33, 257, 258, 260, 265, 268, 291, 297, 300, 314, 327, 470, 471, 477, 488], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 88, 109, 126, 162, 183, 202, 205, 219, 220, 245, 255, 256, 260, 478], "serv": [4, 27, 42, 52, 201, 212, 223, 226, 234, 246, 247, 250, 315, 478, 485], "layer": [4, 6, 218, 219, 235, 238, 247, 250, 252, 313, 314, 317, 321, 325, 497], "cuda": [4, 253], "suit": [4, 36, 215, 220, 235, 250, 485], "gpu": [4, 247, 320], "acceler": [4, 27, 477], "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 211, 219, 248, 250, 258, 290, 327, 328, 474, 479, 482, 488], "extend": [4, 9, 17, 23, 205, 226, 227, 229, 230, 231, 252, 257, 314, 322, 323, 411, 477, 488], "loader": [4, 22, 220, 243, 255, 266, 277, 470, 479, 493, 494], "mutabl": [4, 52, 247], "io": [4, 27, 30, 33, 41, 247, 248, 256, 324, 327, 415, 472, 478, 481, 495], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 46, 106, 180, 215, 234, 242, 245, 247, 249, 255, 258, 315, 394, 396, 433, 465, 468, 478, 488], "sub": [4, 12, 14, 18, 231, 234, 244, 257, 317, 319, 477, 482], "helper": [4, 485], "thread": [4, 6, 31, 44, 46, 218, 220, 235, 253, 326], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 201, 202, 209, 212, 219, 231, 238, 250, 255, 258, 326, 477, 488], "buffer": [4, 324], "sync": [4, 258, 324, 477], "serial": [4, 229, 230, 255, 327, 472, 477, 496], "vertex_map": [4, 13, 45, 46, 176, 196, 201, 306, 327, 472], "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 45, 52, 201, 202, 218, 219, 221, 224, 227, 229, 230, 235, 244, 245, 248, 250, 256, 313, 314, 315, 321, 323, 325, 326, 327, 328, 375, 384, 394, 396, 399, 418, 459, 464, 465, 476, 477, 478, 479, 485], "map": [4, 6, 13, 45, 75, 76, 94, 105, 117, 149, 150, 201, 202, 209, 210, 224, 227, 229, 231, 248, 255, 314, 323, 327, 457, 472, 478, 479, 493, 496], "intern": [4, 13, 45, 53, 55, 56, 91, 92, 101, 118, 127, 129, 130, 165, 166, 175, 192, 201, 202, 227, 248, 327, 365, 488, 490], "frame": [4, 250], "wrap": [4, 244, 247, 255, 260], "becaus": [4, 37, 219, 223, 227, 231, 250, 313, 316, 330, 460, 477, 478], "reli": [4, 9, 19, 204, 223, 225, 320, 477], "templat": [4, 9, 15, 28, 48, 211, 242, 255, 477], "inadequ": 4, "usual": [4, 9, 13, 19, 27, 38, 39, 212, 215, 219, 223, 229, 231, 235, 238, 239, 240, 250, 319, 323, 326, 393, 416, 459, 465, 477, 479, 480], "multipl": [4, 6, 12, 14, 17, 29, 30, 41, 42, 46, 47, 205, 207, 218, 219, 224, 226, 229, 234, 235, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 314, 315, 319, 330, 427, 465, 471, 476, 477, 480, 486], "label": [4, 6, 7, 13, 15, 20, 33, 51, 53, 78, 91, 92, 121, 123, 127, 152, 165, 166, 195, 197, 201, 211, 218, 223, 224, 226, 227, 237, 241, 242, 243, 245, 246, 248, 250, 255, 256, 257, 258, 266, 313, 316, 319, 325, 327, 330, 365, 369, 376, 380, 381, 383, 393, 394, 396, 397, 398, 399, 400, 442, 443, 465, 467, 468, 471, 472, 476, 478, 479, 492, 493, 496, 497], "cannot": [4, 27, 30, 52, 201, 212, 226, 229, 231, 235, 250, 252, 255, 256, 260, 315, 327, 384, 423, 424, 471, 472, 478, 480, 491], "determin": [4, 37, 44, 219, 229, 231, 235, 238, 244, 248, 249, 255, 256, 315, 319, 410, 413, 414, 415, 472], "reason": [4, 53, 54, 55, 56, 91, 92, 101, 118, 212, 227, 229, 235, 314, 315, 445], "jit": 4, "technologi": [4, 217, 219, 251], "compil": [4, 15, 31, 32, 34, 44, 49, 126, 202, 205, 209, 210, 212, 218, 219, 220, 224, 230, 245, 256, 268, 477, 478, 480, 486], "associ": [4, 6, 9, 29, 44, 45, 47, 207, 224, 229, 250, 399, 411, 457, 459, 465, 472, 477, 478], "runtim": [4, 6, 17, 23, 31, 49, 51, 201, 202, 219, 245, 247, 248, 249, 255, 256, 260, 477, 490, 491], "wrapper": [4, 222, 230, 232, 234, 249, 255, 268, 274, 327, 328, 477], "facilit": [4, 20, 220, 229, 234, 235, 238, 250, 314, 477, 478], "task": [4, 6, 7, 14, 34, 37, 41, 219, 221, 231, 234, 235, 237, 239, 240, 241, 242, 243, 245, 247, 248, 250, 314, 325, 477], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 42, 49, 52, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 210, 215, 217, 225, 234, 245, 251, 254, 260, 266, 313, 315, 317, 318, 319, 323, 329, 465, 472, 476, 477, 478, 479, 488, 499], "jar": [4, 8, 22, 23, 35, 39, 126, 256, 478, 488], "read": [4, 8, 20, 24, 37, 46, 205, 215, 222, 224, 228, 239, 244, 245, 246, 247, 313, 314, 319, 324, 325, 327, 363, 364, 463, 465, 466, 470, 472, 474, 478, 496], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 48, 205, 218, 220, 221, 231, 236, 237, 245, 250, 251, 255, 256, 319, 323, 324, 471, 472, 476, 481, 488], "cmake": [4, 31, 32, 36, 52, 212, 320], "script": [4, 32, 37, 52, 252, 253, 284, 313, 314, 325, 328, 489], "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 39, 45, 47, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 201, 202, 204, 205, 207, 209, 210, 212, 220, 229, 230, 231, 240, 244, 245, 255, 256, 267, 268, 274, 275, 280, 305, 324, 325, 327, 384, 394, 396, 472, 474, 479, 485], "figur": [4, 6, 9, 12, 24, 27, 30, 34, 219, 223, 231, 235, 238, 246, 248, 249, 250, 315, 317, 448, 474], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 45, 207, 215, 218, 221, 227, 229, 231, 233, 237, 244, 248, 249, 313, 314, 315, 319, 323, 368, 384, 404, 427, 461, 471, 478, 480, 482, 486], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 47, 204, 219, 223, 226, 227, 234, 235, 244, 246, 247, 248, 249, 250, 254, 319, 327, 335, 368, 416, 465, 474, 478, 481, 482, 486], "thei": [4, 6, 20, 24, 27, 30, 31, 46, 215, 219, 223, 226, 229, 231, 234, 240, 245, 248, 250, 252, 313, 314, 322, 327, 371, 379, 384, 412, 414, 415, 458, 459, 465, 471, 472, 474, 477, 478], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 41, 47, 201, 215, 218, 219, 221, 226, 229, 234, 238, 244, 245, 246, 247, 248, 249, 250, 255, 257, 317, 319, 327, 464, 465, 471, 480], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 218, 219, 227, 238, 245, 248, 250, 256, 318, 323, 382, 387, 388, 389, 392, 423, 482], "object": [4, 15, 38, 73, 79, 91, 92, 94, 98, 105, 115, 117, 123, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 220, 221, 222, 224, 229, 230, 231, 235, 238, 244, 245, 246, 248, 250, 253, 255, 267, 280, 292, 306, 314, 316, 317, 318, 319, 322, 325, 328, 329, 343, 363, 364, 422, 462, 465, 467, 468, 470, 471, 478, 488, 498], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 47, 227, 229, 230, 231, 238, 250, 253, 258, 317, 318, 319, 322, 323, 468, 481, 496], "respons": [4, 9, 12, 16, 27, 34, 36, 37, 49, 212, 219, 223, 245, 255, 323, 326, 472, 474], "state": [4, 6, 9, 10, 12, 24, 27, 34, 219, 234, 248, 249, 251, 253, 324, 327, 384, 387, 388, 389, 390, 392, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 412, 413, 414, 415, 416, 419, 420, 421, 425, 457, 460, 462], "synchron": [4, 6, 10, 12, 14, 15, 245, 477], "explicitli": [4, 13, 255, 315, 384, 472, 478], "implicitli": [4, 266], "main": [4, 6, 30, 34, 37, 42, 45, 53, 54, 55, 56, 91, 92, 101, 118, 126, 205, 219, 226, 227, 230, 231, 252, 313, 322, 325, 330, 472, 478, 497, 498], "logic": [4, 6, 9, 14, 16, 17, 219, 229, 231, 234, 247, 249, 253, 316, 476, 477, 478, 486, 488], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 48, 51, 203, 205, 212, 218, 220, 223, 229, 230, 231, 235, 238, 244, 245, 247, 248, 249, 250, 314, 315, 316, 317, 318, 319, 324, 325, 327, 465, 468, 472, 474, 476, 477, 478, 479, 486, 498], "send": [4, 6, 10, 18, 24, 201, 220, 248, 258, 477, 488], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 201, 244, 245, 248, 250, 258, 319, 323, 474, 477, 488], "messagemanag": [4, 17, 488], "call": [4, 6, 12, 13, 16, 17, 19, 24, 51, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 205, 207, 212, 227, 229, 231, 238, 255, 258, 313, 315, 319, 322, 323, 328, 360, 374, 375, 405, 416, 445, 457, 465, 468, 472, 477, 478], "encourag": [4, 6, 15, 24, 37], "fork": [4, 52], "repo": [4, 29, 37, 52, 220, 247, 478, 489, 490], "much": [4, 6, 13, 19, 22, 202, 212, 219, 229, 231, 315, 319, 477], "easier": [4, 32, 36, 37, 42, 229, 247, 248, 249, 319, 472], "begin": [4, 15, 16, 30, 45, 52, 211, 215, 223, 224, 228, 231, 246, 257, 258, 404, 471, 477], "small": [4, 9, 11, 13, 20, 205, 215, 231, 248, 249, 252, 330, 385, 386, 412, 455, 466, 472, 478], "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 44, 52, 202, 231, 245, 249, 250, 252, 253, 256, 273, 305, 314, 327, 330, 343, 465, 472, 478], "revis": [4, 14, 17, 253], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 224, 234, 235, 250, 252, 253, 264, 265, 315, 327, 332, 333, 343, 401, 402, 403, 405, 459, 465, 474, 496, 498], "gradual": 4, "avoid": [4, 13, 227, 230, 477, 478], "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 47, 205, 212, 215, 218, 219, 221, 225, 230, 231, 232, 234, 235, 238, 239, 240, 245, 246, 247, 251, 252, 256, 300, 314, 315, 317, 319, 321, 325, 326, 339, 363, 364, 384, 419, 477, 488], "singl": [4, 6, 7, 11, 14, 15, 17, 20, 24, 27, 36, 37, 41, 47, 52, 201, 204, 207, 212, 218, 224, 227, 229, 231, 236, 237, 239, 240, 245, 246, 248, 249, 256, 257, 313, 327, 338, 345, 367, 371, 376, 386, 391, 408, 414, 459, 461, 465, 472, 476, 480], "commit": [4, 253, 474], "python3": [4, 7, 23, 27, 28, 30, 31, 32, 35, 36, 41, 52, 212, 220, 221, 236, 237, 242, 246, 488, 489, 490, 491], "gsctl": [4, 32, 36, 41, 52, 217, 220, 236, 489, 490], "py": [4, 15, 32, 36, 41, 52, 127, 128, 129, 130, 165, 166, 175, 192, 200, 220, 236, 242, 313, 320, 325, 472, 478, 485, 488, 489, 490, 497], "cmakelist": 4, "txt": [4, 31, 35, 488], "artifact": [4, 17, 23, 29, 36, 48, 220, 236, 485], "grape_engin": [4, 38, 290, 486], "togeth": [4, 9, 10, 20, 41, 219, 231, 240, 245, 253, 319, 323, 366], "share": [4, 6, 30, 31, 37, 44, 47, 48, 231, 236, 245, 247, 248, 477, 479, 490], "bunch": [4, 41, 252, 255], "binari": [4, 15, 27, 31, 52, 250, 485], "choos": [4, 6, 12, 22, 34, 41, 47, 218, 219, 229, 231, 234, 235, 245, 250, 313, 314, 404, 405, 443], "prefix": [4, 31, 36, 37, 203, 212, 220, 229, 236, 242, 327, 459, 477, 496], "usr": [4, 478], "look": [4, 15, 18, 20, 27, 44, 45, 126, 201, 218, 231, 244, 260, 326, 471, 474, 478, 479], "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 39, 44, 45, 47, 48, 51, 52, 104, 118, 192, 201, 202, 204, 205, 207, 209, 210, 212, 217, 218, 220, 223, 244, 255, 256, 264, 287, 313, 314, 320, 325, 327, 363, 364, 415, 465, 467, 472, 474, 478, 479, 485, 486, 488, 498], "investig": [4, 6], "ensur": [4, 6, 9, 32, 35, 36, 37, 44, 45, 46, 48, 201, 202, 204, 205, 207, 219, 224, 227, 246, 252, 472], "correct": [4, 6, 14, 37, 38, 219, 223, 319, 327, 330, 477], "unit": [4, 219, 231, 249, 323, 413, 414, 415, 478], "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 207, 212, 218, 221, 231, 234, 245, 246, 247, 249, 250, 252, 319, 321, 477], "graphscope_hom": [4, 23, 490], "pwd": [4, 30, 204, 325], "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 39, 48, 204, 209, 221, 222, 225, 230, 236, 237, 244, 253, 320, 325, 490], "tmp": [4, 18, 19, 28, 38, 48, 52, 218, 220, 287, 292, 325, 327, 472, 476, 478, 486, 488, 491], "gstest": [4, 19, 22, 23, 30, 52, 488, 490], "against": [4, 14, 37, 220, 256, 447], "compar": [4, 19, 219, 224, 226, 227, 229, 231, 248, 253, 255, 256, 316, 384, 471], "ground": [4, 226, 250], "truth": [4, 250], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 52, 205, 212, 217, 218, 219, 221, 225, 227, 229, 232, 234, 235, 238, 239, 240, 242, 243, 245, 247, 248, 250, 251, 252, 256, 260, 313, 316, 318, 322, 324, 325, 329, 384, 387, 394, 396, 405, 412, 413, 414, 415, 416, 424, 478, 479], "broad": [6, 247], "spectrum": [6, 247, 330, 457], "central": [6, 15, 42, 215, 234, 235, 246, 247, 250, 251, 256, 319, 330, 442, 477], "match": [6, 15, 44, 46, 51, 126, 200, 201, 205, 219, 220, 221, 222, 223, 224, 226, 245, 246, 247, 256, 364, 384, 392, 394, 396, 423, 459, 496], "mine": [6, 15, 245, 247, 248], "philosophi": [6, 24, 247], "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 202, 203, 205, 210, 218, 219, 220, 221, 222, 227, 230, 232, 234, 235, 242, 243, 244, 245, 246, 247, 249, 258, 313, 314, 315, 317, 319, 322, 325, 384, 392, 404, 457, 478, 486, 498], "stronger": [6, 247], "flexibl": [6, 12, 13, 23, 44, 47, 225, 226, 231, 234, 245, 246, 247, 472, 476], "flow": [6, 203, 247, 248, 313, 455], "oper": [6, 9, 12, 15, 30, 31, 36, 44, 52, 53, 54, 55, 56, 118, 127, 128, 129, 130, 192, 204, 205, 207, 209, 212, 215, 217, 218, 219, 221, 225, 226, 227, 229, 234, 235, 238, 244, 245, 247, 248, 249, 250, 251, 256, 258, 266, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 285, 286, 287, 289, 290, 293, 294, 295, 296, 314, 315, 316, 317, 318, 319, 321, 322, 324, 326, 327, 347, 426, 427, 465, 468, 470, 472, 474, 477, 478, 485], "arbitrari": [6, 229, 231, 247, 317, 392, 396, 412, 413, 414, 415, 465, 468, 478, 496], "beyond": [6, 24, 226, 247, 251, 425], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 41, 42, 45, 51, 52, 101, 175, 202, 205, 207, 217, 218, 219, 220, 222, 223, 224, 226, 229, 230, 231, 234, 236, 244, 247, 248, 249, 250, 253, 319, 320, 323, 325, 327, 343, 395, 459, 465, 472, 476, 477, 478, 485, 489, 490], "divers": [6, 10, 12, 34, 47, 217, 219, 247, 248, 314, 474], "easi": [6, 7, 12, 205, 207, 215, 218, 219, 221, 222, 230, 231, 232, 234, 237, 238, 244, 245, 246, 247, 251, 314, 319, 323, 485], "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 205, 212, 215, 224, 227, 229, 231, 234, 244, 245, 246, 247, 248, 249, 254, 258, 260, 313, 319, 323, 327, 328, 467, 468, 474, 477, 482, 488, 492], "few": [6, 29, 205, 212, 218, 247, 477], "satisfactori": [6, 247, 250], "major": [6, 12, 13, 14, 224, 248, 255], "recent": [6, 317, 478], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 212, 219, 226, 232, 235, 238, 244, 245, 247, 248, 249, 250, 251, 252, 256, 257, 306, 317, 319, 321, 323, 327, 328, 469, 472, 474, 476, 488, 493, 498], "focu": [6, 41, 245, 249, 252, 323], "hand": [6, 30, 33, 219, 227, 229, 445], "point": [6, 13, 14, 22, 37, 42, 201, 219, 229, 238, 248, 313, 368, 393, 422, 425, 465, 476, 478, 479, 480, 485], "breadth": [6, 256, 330], "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 45, 46, 48, 52, 126, 200, 202, 212, 215, 219, 220, 221, 222, 224, 229, 230, 231, 235, 239, 240, 244, 246, 247, 249, 250, 256, 257, 313, 314, 319, 321, 323, 327, 330, 334, 364, 380, 383, 392, 405, 408, 419, 420, 421, 422, 423, 426, 459, 464, 465, 468, 471, 472, 474, 477, 478, 479, 480], "search": [6, 37, 217, 223, 235, 245, 248, 250, 252, 256, 330, 494], "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 215, 245, 248, 251, 253, 256, 257, 330, 468, 471, 476, 488], "shortest": [6, 7, 19, 24, 219, 246, 248, 256, 330, 480], "leav": [6, 231, 327, 365, 375], "varieti": [6, 12, 34, 215, 245, 252], "suffer": [6, 215], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 47, 51, 201, 205, 207, 212, 215, 217, 223, 226, 227, 230, 231, 234, 235, 238, 244, 245, 246, 247, 248, 249, 250, 251, 252, 260, 317, 319, 321, 398, 419, 476, 477, 479, 481], "limit": [6, 9, 13, 22, 47, 210, 212, 218, 222, 223, 224, 227, 232, 235, 248, 249, 250, 252, 253, 472, 491, 496], "phase": [6, 16, 23, 24, 314, 319], "propag": [6, 7, 9, 14, 36, 245, 246, 248, 250, 256, 319, 337, 427], "short": [6, 247, 252, 253, 345, 477, 478], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 30, 229, 231, 250, 324, 384, 407, 478, 496], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 44, 52, 55, 91, 92, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 229, 234, 235, 245, 248, 250, 252, 320, 323, 465, 474, 478, 488, 489], "Such": [6, 13, 203, 249, 252, 287, 292, 424, 433], "abstract": [6, 42, 215, 234, 238, 241, 245, 246, 247, 313, 314, 321, 323, 324, 479], "bring": [6, 41], "product": [6, 12, 32, 52, 212, 238, 245, 249, 252, 258, 314, 315, 319, 485, 496], "sacrific": 6, "almost": [6, 22, 231, 400, 477], "infeas": 6, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 47, 48, 212, 231, 242, 244, 246, 247, 252, 255, 257, 317, 319, 323, 324, 462, 471, 476, 478, 480, 481, 489, 491, 495], "At": [6, 12, 14, 15, 20, 34, 37, 126, 219, 230, 231, 314, 324, 478, 480], "advanc": [6, 7, 15, 219, 237, 238, 247, 411], "pose": 6, "challeng": [6, 9, 214, 245, 477], "repres": [6, 9, 12, 15, 44, 46, 47, 215, 219, 223, 227, 231, 235, 237, 238, 241, 244, 245, 246, 247, 248, 250, 253, 255, 256, 257, 264, 291, 314, 315, 316, 317, 319, 323, 325, 327, 371, 404, 412, 413, 414, 415, 416, 424, 431, 434, 438, 446, 455, 457, 459, 460, 465, 469, 472, 477, 478], "non": [6, 9, 27, 201, 229, 252, 255, 258, 316, 354, 355, 375, 394, 396, 399, 423, 427, 434, 452, 465, 466], "ones": [6, 9, 251, 256, 321], "distil": 6, "critic": [6, 13, 235, 256], "context": [6, 15, 17, 18, 20, 27, 31, 47, 127, 128, 129, 130, 165, 166, 175, 192, 227, 247, 249, 256, 258, 263, 264, 265, 271, 272, 287, 292, 295, 296, 298, 307, 310, 323, 327, 330, 455, 470, 472, 477, 485, 488], "fall": 6, "meet": [6, 15, 18, 37, 215, 219, 221, 238, 245, 250, 317, 318, 384, 413, 414, 415, 480, 482], "therefor": [6, 12, 15, 215, 219, 221, 223, 224, 227, 229, 231, 235, 246, 313, 314, 319, 411, 477, 486], "fulfil": [6, 15, 18, 205, 247], "ligra": 6, "By": [6, 13, 17, 20, 30, 36, 44, 45, 46, 48, 202, 212, 215, 227, 229, 231, 232, 237, 244, 248, 250, 251, 314, 315, 330, 465, 474, 477, 485, 486], "must": [6, 13, 24, 27, 30, 37, 45, 46, 47, 51, 63, 137, 207, 209, 212, 218, 229, 231, 245, 255, 257, 266, 314, 315, 317, 318, 319, 327, 329, 330, 343, 382, 384, 392, 395, 405, 407, 409, 412, 414, 416, 424, 427, 463, 465, 467, 471, 477, 478], "race": 6, "schedul": [6, 23, 36, 245, 247, 472], "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 41, 44, 45, 53, 127, 212, 218, 219, 220, 223, 224, 227, 231, 244, 255, 256, 257, 274, 290, 315, 327, 384, 396, 408, 412, 422, 425, 443, 459, 465, 468, 471, 472, 476, 477, 478, 482, 485], "so": [6, 12, 13, 30, 37, 41, 47, 204, 212, 218, 219, 221, 225, 230, 231, 235, 238, 240, 244, 245, 247, 256, 260, 313, 319, 321, 340, 375, 380, 393, 394, 395, 398, 413, 414, 415, 426, 459, 465, 477, 478, 492], "middlewar": 6, "flashwar": 6, "hide": [6, 215], "automat": [6, 9, 12, 14, 34, 44, 46, 205, 207, 218, 219, 222, 227, 230, 234, 244, 245, 248, 249, 250, 252, 257, 325, 327, 465, 478, 480, 481, 498], "adapt": [6, 22, 44, 205, 219, 250, 252, 253, 480, 481], "70": [6, 15, 496], "40": [6, 15, 253, 315, 316, 318, 392, 458], "commonli": [6, 224, 229, 234, 238, 244], "now": [6, 7, 20, 23, 27, 45, 48, 201, 205, 218, 220, 223, 224, 226, 230, 231, 237, 256, 323, 396, 478, 480, 493], "succinct": [6, 227], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 42, 52, 201, 212, 215, 217, 219, 231, 232, 233, 235, 238, 245, 248, 249, 250, 251, 252, 255, 260, 315, 316, 317, 319, 320, 321, 322, 465, 472, 482], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 202, 209, 223, 229, 231, 242, 244, 248, 249, 323, 327, 477, 479, 485, 489], "demonstr": [6, 16, 44, 218, 219, 226, 234, 239, 241, 245, 246, 248, 250, 252, 257, 313, 325, 327, 472, 477], "up": [6, 13, 20, 23, 37, 52, 202, 223, 229, 231, 234, 236, 238, 251, 258, 323, 326, 364, 368, 392, 459, 477, 478, 495], "92": [6, 330], "bulk": [6, 15, 46, 53, 127, 201], "bsp": [6, 15], "paradigm": [6, 15, 234, 238, 245, 313, 319], "primari": [6, 15, 45, 46, 47, 75, 76, 91, 92, 126, 149, 150, 165, 166, 200, 205, 210, 227, 245, 252, 478], "constitut": [6, 241, 244], "superstep": [6, 16, 17, 24, 258], "vertexsubset": [6, 15], "indic": [6, 13, 24, 37, 38, 46, 47, 51, 52, 201, 205, 207, 218, 231, 244, 247, 248, 249, 253, 264, 314, 316, 319, 327, 371, 374, 384, 387, 388, 389, 390, 392, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 412, 413, 414, 415, 416, 419, 420, 421, 425, 455, 457, 460, 462, 467, 477], "maintain": [6, 10, 14, 35, 36, 46, 226, 227, 229, 245, 248, 249, 478], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 47, 51, 207, 219, 220, 235, 256, 258, 315, 316, 319, 325, 327, 328, 330, 360, 465, 472, 478, 485], "describ": [6, 27, 36, 37, 38, 47, 48, 52, 207, 212, 218, 220, 231, 235, 236, 245, 249, 250, 257, 314, 317, 319, 324, 325, 364, 368, 384, 385, 386, 389, 394, 396, 397, 422, 423, 436, 443, 445, 459, 461, 462, 473, 476, 477, 478, 486, 491], "vsize": [6, 15], "size_t": [6, 13, 211, 255, 258, 324, 474, 477], "vertexmap": [6, 13, 15, 102, 126, 176, 200, 211], "condit": [6, 9, 14, 24, 27, 38, 44, 219, 226, 231, 238, 247, 249, 253, 384, 413, 414, 415, 423, 424, 477], "f": [6, 20, 33, 48, 218, 220, 237, 242, 243, 246, 319, 330, 417, 418, 464, 478, 486, 492], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 215, 218, 220, 223, 226, 227, 229, 231, 235, 237, 238, 241, 245, 246, 250, 253, 255, 284, 292, 300, 313, 319, 321, 325, 327, 328, 412, 414, 416, 457, 469, 471, 478, 488, 489, 492, 497], "form": [6, 20, 118, 192, 219, 225, 227, 229, 231, 235, 238, 249, 250, 256, 313, 315, 316, 319, 366, 386, 416, 431, 433, 436, 439, 443, 465, 471], "special": [6, 20, 205, 210, 226, 231, 245, 314, 433, 449, 459, 482], "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 52, 218, 219, 220, 221, 231, 237, 246, 256, 257, 330, 340, 371, 375, 377, 388, 394, 396, 398, 400, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 444, 453, 457, 458, 462, 465, 478, 488], "omit": [6, 207, 244, 257, 338, 479, 498], "filter": [6, 15, 23, 44, 219, 226, 232, 244, 249, 256, 257, 457, 471, 477, 496], "semant": [6, 219, 238, 318, 477], "unchang": 6, "edgemap": [6, 15, 102, 126, 176, 200], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 45, 47, 52, 76, 78, 150, 152, 205, 210, 211, 212, 218, 220, 221, 223, 224, 231, 235, 236, 238, 244, 246, 248, 249, 250, 252, 255, 256, 257, 259, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 306, 307, 308, 310, 312, 315, 316, 317, 318, 319, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 469, 471, 472, 474, 476, 477, 478, 480, 485, 488, 489, 490, 496, 498], "satisfi": [6, 9, 24, 32, 205, 221, 231, 249, 252, 256, 260, 324, 330, 382, 412, 416, 423, 424, 482], "h": [6, 9, 15, 16, 20, 36, 41, 201, 209, 235, 236, 253, 264, 330, 341, 344, 365, 392, 396, 412, 457, 464, 465, 477, 489, 494], "conduct": [6, 15, 231, 253, 319], "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 42, 44, 45, 47, 126, 200, 202, 205, 215, 218, 219, 223, 224, 226, 227, 229, 231, 232, 233, 234, 238, 244, 245, 246, 248, 249, 250, 251, 252, 314, 319, 389, 394, 396, 399, 404, 407, 412, 457, 465, 474, 477, 482, 485], "dynam": [6, 12, 34, 202, 203, 205, 219, 234, 245, 247, 248, 250, 256, 267, 280, 385, 386, 468, 474, 478], "even": [6, 8, 20, 219, 223, 231, 247, 248, 321, 327, 330, 394, 404, 422, 424, 425, 465, 477], "virtual": [6, 9, 23, 47, 221, 223, 246, 255, 323, 324], "gener": [6, 9, 13, 14, 17, 27, 34, 41, 47, 52, 126, 202, 207, 215, 217, 219, 225, 227, 229, 231, 235, 238, 244, 245, 246, 247, 248, 250, 256, 265, 313, 314, 315, 319, 325, 327, 329, 330, 465, 466, 470, 472, 474, 476, 477, 478, 479, 480, 486], "index": [6, 12, 13, 31, 45, 46, 77, 151, 201, 211, 217, 235, 238, 244, 250, 255, 256, 257, 315, 316, 324, 327, 329, 330, 339, 363, 364, 394, 396, 397, 398, 400, 477, 494, 498], "pre": [6, 29, 32, 51, 212, 219, 226, 231, 237, 241, 246, 249, 472, 491], "conveni": [6, 29, 212, 218, 223, 231, 235, 247, 319, 463, 465], "revers": [6, 20, 224, 231, 273, 276, 329, 330, 408, 416, 465], "exchang": [6, 14], "chosen": [6, 394, 401, 402, 403, 404, 405, 416, 420, 460], "temporari": 6, "sequenti": [6, 12, 14, 18, 34, 36, 245, 363, 364, 400, 477, 482, 488], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 202, 212, 218, 248, 320, 323, 472, 478, 490], "mode": [6, 15, 27, 32, 36, 48, 212, 230, 239, 242, 244, 255, 256, 257, 306, 313, 317, 323, 325, 327, 467, 472, 478, 482, 486, 498], "push": [6, 12, 34, 37, 44, 219, 226, 248, 323], "anoth": [6, 9, 10, 20, 36, 47, 219, 229, 231, 244, 245, 246, 250, 258, 394, 427, 465, 477, 480, 481], "final": [6, 9, 13, 14, 17, 19, 24, 219, 223, 231, 235, 240, 245, 249, 255, 313, 319, 321, 407, 427, 465, 479], "reduc": [6, 9, 13, 14, 15, 17, 205, 219, 223, 226, 230, 238, 314, 317, 413, 414, 415, 465, 478], "commut": 6, "alwai": [6, 204, 231, 240, 257, 361, 362, 401, 403, 422, 425, 459, 477, 485], "ctrue": 6, "doe": [6, 11, 12, 13, 20, 34, 37, 53, 54, 56, 127, 128, 130, 204, 205, 226, 229, 238, 244, 247, 249, 252, 316, 319, 324, 330, 349, 350, 392, 394, 396, 411, 422, 465, 467, 472, 477], "sometim": [6, 27, 231, 244, 375, 435], "similarli": [6, 19, 20, 47, 220, 231, 248, 330, 368, 394, 396, 412, 415, 422, 465, 486], "suppli": [6, 212, 227, 414], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 48, 51, 52, 201, 207, 209, 218, 226, 231, 256, 317, 319, 322, 325, 330, 340, 385, 386, 394, 396, 397, 399, 400, 401, 403, 408, 412, 413, 414, 415, 416, 419, 456, 465, 467, 472], "auxiliari": [6, 15, 16, 231], "union": [6, 327, 393, 493], "minu": [6, 229, 368], "intersect": [6, 249, 466], "add": [6, 15, 19, 20, 23, 29, 33, 37, 91, 92, 126, 165, 166, 200, 212, 224, 226, 229, 231, 244, 246, 255, 258, 265, 266, 275, 314, 325, 327, 332, 333, 334, 384, 391, 404, 422, 425, 427, 443, 465, 468, 472, 477, 478, 489, 492, 493, 498], "getv": [6, 219], "besid": [6, 10, 38, 324, 325], "combin": [6, 14, 18, 34, 47, 217, 219, 231, 234, 245, 246, 249, 313, 314, 315, 319, 465, 472, 481, 488], "primit": [6, 45, 247], "natur": [6, 12, 13, 24, 47, 215, 227, 231], "multi": [6, 31, 217, 227, 231, 234, 235, 238, 245, 247, 249, 250, 251, 252, 256, 317, 319, 321, 474, 478], "tradit": [6, 219, 223, 225, 226, 227, 250, 442], "awkward": 6, "supplement": 6, "perspect": [6, 24, 247], "whole": [6, 9, 12, 24, 34, 205, 218, 219, 231, 235, 245, 247, 249, 250, 321, 476, 478, 481], "pick": [6, 231, 253, 407, 422, 425], "transfer": [6, 215, 217, 234, 249, 251, 496], "intuit": [6, 205, 219, 227, 234, 249, 472], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 205, 217, 219, 224, 231, 234, 235, 238, 244, 245, 248, 250, 251, 253, 257, 313, 319, 321, 323, 324, 330, 371, 465, 471, 472, 477, 478], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 46, 51, 201, 219, 221, 231, 237, 238, 248, 250, 253, 314, 315, 316, 319, 325], "input": [6, 9, 12, 13, 15, 17, 22, 24, 45, 46, 74, 91, 92, 122, 148, 165, 166, 196, 201, 207, 209, 215, 235, 237, 238, 241, 244, 245, 246, 249, 250, 256, 275, 279, 300, 313, 314, 315, 316, 317, 319, 322, 325, 328, 330, 398, 412, 414, 416, 422, 423, 457, 465, 468, 469, 472, 477, 478, 492, 497], "second": [6, 13, 27, 46, 48, 205, 215, 224, 231, 235, 244, 249, 252, 253, 257, 321, 410, 411, 419, 420, 421, 422, 426, 464, 465, 472, 478, 479], "fundament": [6, 9, 47, 219, 247], "modul": [6, 8, 9, 15, 19, 20, 23, 217, 219, 223, 229, 234, 242, 245, 246, 247, 249, 250, 326, 464, 494], "produc": [6, 38, 41, 45, 219, 253, 256, 265, 313, 325, 327, 328, 330, 384, 398, 400, 408, 469, 478], "abil": [6, 12, 34, 51, 223, 227, 231, 238, 245, 478], "activ": [6, 9, 23, 24, 30, 51, 201, 207, 221, 240, 246, 250, 325, 472], "dens": [6, 235, 248, 250, 316, 325], "spars": [6, 13, 235, 250, 313, 316, 392, 465, 468], "dispatch": [6, 34, 245, 255], "kernel": [6, 401], "auto": [6, 14, 16, 34, 211, 231, 258, 474, 477, 479], "switch": [6, 12, 23, 34, 201, 230, 248, 422, 425, 477, 485], "prove": [6, 24, 457], "world": [6, 9, 13, 215, 229, 231, 245, 246, 248, 255, 330, 385, 386, 412], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 13, 16, 20, 23, 30, 37, 47, 126, 223, 226, 229, 231, 244, 247, 315, 316, 317, 323, 324, 327, 391, 398, 403, 411, 412, 416, 422, 465, 471, 474, 477], "co": [6, 23, 215, 246, 314, 492], "lead": [6, 17, 24, 212, 231, 250, 394, 396], "master": [6, 19, 22, 23, 24, 31, 52, 205, 242, 488], "broadcast": [6, 255, 477], "mirror": [6, 7, 10, 24, 27, 32, 221, 236, 237], "On": [6, 27, 30, 37, 205, 219, 227, 229, 256, 399, 462, 477], "contrari": 6, "total": [6, 8, 12, 34, 215, 219, 220, 221, 230, 231, 242, 258, 340, 384, 407, 424, 430, 465, 478, 479, 492], "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 48, 201, 212, 219, 220, 222, 225, 226, 227, 229, 230, 231, 242, 243, 246, 253, 264, 313, 315, 316, 318, 319, 320, 330, 336, 341, 343, 344, 349, 350, 368, 370, 371, 380, 388, 391, 393, 400, 409, 411, 416, 425, 432, 435, 436, 442, 443, 449, 451, 458, 459, 460, 465, 467, 468, 472, 477, 478, 479, 480, 481, 488, 491, 492, 496], "redund": [6, 207, 226], "programm": [6, 17, 245, 260], "scope": [6, 23, 37, 126, 201, 247, 327], "disabl": [6, 31, 44, 52, 201, 202, 205, 209, 210, 220, 223, 253, 472], "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 126, 200, 205, 210, 215, 219, 220, 225, 226, 227, 231, 232, 233, 234, 235, 236, 245, 248, 249, 250, 252, 260, 317, 319, 320, 321, 323, 384, 477, 485], "katz": [6, 256, 330], "eigenvector": [6, 256, 330, 457], "harmon": 6, "coeffici": [6, 19, 256, 330], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 44, 45, 47, 126, 202, 212, 221, 223, 227, 229, 230, 237, 245, 247, 252, 253, 256, 320, 327, 385, 386, 401, 403, 416, 422, 443, 465, 474, 476, 477, 478, 485, 488, 491], "color": [6, 19, 20, 231, 465], "biconnect": 6, "bridg": [6, 217, 247], "seven": [6, 325, 364], "strongli": [6, 36, 221, 223, 231, 319, 404], "cut": [6, 12, 24, 450], "k": [6, 20, 37, 211, 220, 231, 235, 245, 246, 247, 249, 256, 257, 317, 330, 367, 375, 385, 386, 387, 388, 390, 392, 393, 394, 401, 404, 413, 414, 415, 417, 420, 421, 422, 423, 424, 425, 430, 465, 471, 477, 492, 496], "decomposit": [6, 246, 330], "degeneraci": 6, "onion": 6, "minim": [6, 11, 248, 325, 416, 417, 438, 464], "domin": [6, 330, 477], "cycl": [6, 247, 249, 252, 255, 332, 368, 369, 372, 383, 405, 409, 430, 432, 448, 452], "triangl": [6, 33, 231, 246, 249, 256, 330, 427, 431, 435, 439, 451, 466, 488, 492], "acycl": [6, 247, 459], "cyclic": [6, 245, 247, 249, 372], "diamond": [6, 435], "rectangl": 6, "tail": [6, 218, 223, 229, 231, 247, 486], "approxim": [6, 384, 457], "densest": 6, "articlerank": 6, "hyperlink": [6, 256, 330], "induc": [6, 227, 229, 256, 278, 341, 344, 360, 408, 465], "topic": [6, 7, 221, 237, 246, 256, 478], "person": [6, 7, 30, 33, 45, 46, 47, 51, 91, 165, 166, 201, 218, 221, 223, 226, 227, 229, 231, 244, 246, 327, 445, 454, 465, 468, 471, 476, 477, 478, 479, 493, 498], "standard": [6, 35, 42, 202, 217, 219, 226, 231, 232, 244, 247, 328, 398, 413, 414, 415, 477], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 231, 380, 383, 408], "four": [6, 9, 12, 20, 241, 246, 247, 255, 313, 316, 325, 412, 416, 477], "random": [6, 28, 31, 238, 240, 245, 253, 317, 318, 319, 322, 325, 366, 377, 384, 387, 388, 389, 390, 392, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 425, 457, 460, 462, 464, 472], "give": [7, 12, 13, 31, 34, 46, 201, 221, 231, 237, 244, 253, 319, 327, 392, 412, 432, 464, 465], "quick": [7, 221, 237, 478, 495], "ll": [7, 13, 20, 29, 45, 46, 237], "pip": [7, 27, 30, 31, 32, 49, 212, 218, 221, 237, 246, 323, 478, 491, 495], "upgrad": [7, 23, 32, 221, 237, 495], "occur": [7, 9, 14, 32, 212, 229, 237, 478], "veri": [7, 13, 32, 215, 219, 221, 231, 234, 237, 244, 246, 250, 315, 317, 488], "speed": [7, 32, 205, 210, 231, 236, 237, 247, 326, 392, 465], "try": [7, 17, 23, 32, 36, 41, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 210, 212, 215, 221, 230, 236, 237, 240, 241, 246, 254, 256, 343, 384, 468, 472, 492], "site": [7, 32, 221, 237], "aliyun": [7, 27, 32, 221, 236, 237, 253, 472, 489], "pypi": [7, 27, 32, 212, 221, 222, 237, 491], "trust": [7, 27, 32, 221, 237], "host": [7, 15, 17, 22, 23, 27, 28, 32, 46, 92, 127, 128, 129, 130, 165, 166, 175, 192, 201, 202, 215, 220, 221, 223, 230, 237, 244, 253, 255, 256, 257, 468, 472, 476, 488, 496, 498], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 52, 126, 200, 204, 212, 218, 221, 237, 246, 323, 412, 414, 465, 468, 478, 490], "everyth": [7, 237, 246, 477], "job": [7, 13, 23, 53, 54, 126, 127, 128, 200, 201, 215, 219, 237, 245, 246, 247, 251, 255, 290, 314, 472, 478], "modern_graph": [7, 30, 33, 46, 48, 52, 201, 218, 221, 246, 479, 485], "gremlin": [7, 29, 33, 44, 48, 52, 210, 212, 215, 218, 219, 220, 221, 226, 228, 232, 235, 238, 245, 246, 247, 251, 252, 254, 284, 319, 328, 472, 478, 486, 491, 492, 494, 499], "apach": [7, 17, 22, 23, 31, 202, 203, 205, 217, 226, 227, 230, 233, 234, 245, 246, 249, 476, 478, 482, 488, 490, 494], "tinkerpop": [7, 202, 203, 205, 215, 217, 218, 220, 221, 230, 234, 246, 247, 328, 478, 494], "org": [7, 17, 23, 126, 212, 222, 230, 237, 240, 241, 242, 246, 248, 256, 330, 388, 389, 390, 404, 407, 414, 427, 431, 432, 433, 434, 436, 437, 438, 444, 445, 446, 447, 449, 450, 451, 452, 457, 478, 488, 491, 492, 496], "doc": [7, 16, 17, 30, 37, 246, 247, 255, 259, 261, 327, 414, 495], "tutori": [7, 8, 12, 14, 24, 218, 220, 221, 228, 234, 239, 244, 246, 248, 250, 325, 414, 482], "trigger": [7, 14, 15, 18, 37, 238, 246, 266, 480, 485], "ret": [7, 18, 230, 246, 488, 493], "selector": [7, 15, 33, 38, 246, 255, 257, 265, 271, 272, 282, 283, 287, 295, 296, 327, 470, 472, 476, 488, 493], "homogen": [7, 235, 244, 246, 250, 315], "pg": [7, 246, 256, 472, 476, 477], "none": [7, 9, 20, 27, 31, 166, 175, 192, 224, 240, 242, 243, 244, 246, 256, 257, 264, 271, 272, 275, 278, 282, 283, 284, 285, 287, 290, 292, 295, 296, 300, 306, 308, 312, 313, 314, 319, 327, 328, 329, 330, 338, 342, 344, 345, 349, 350, 359, 360, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 387, 388, 389, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 425, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 457, 459, 460, 462, 465, 467, 468, 469, 472, 476, 477, 478, 493, 497, 498], "know": [7, 8, 30, 33, 38, 46, 47, 201, 218, 226, 228, 229, 231, 239, 244, 246, 249, 314, 315, 323, 327, 476, 478, 479, 493, 496, 498], "src": [7, 13, 15, 16, 17, 18, 30, 34, 91, 126, 165, 200, 211, 215, 227, 230, 237, 238, 241, 244, 246, 256, 257, 264, 313, 315, 327, 471, 474, 477, 478, 480, 488, 492, 497, 498], "our": [7, 12, 13, 17, 32, 34, 36, 37, 41, 44, 46, 47, 52, 202, 215, 219, 224, 226, 227, 236, 246, 248, 249, 250, 252, 253, 254, 320, 321, 330, 478, 480, 488], "learn": [7, 27, 32, 36, 37, 38, 41, 205, 215, 219, 221, 234, 238, 239, 240, 242, 247, 248, 251, 254, 308, 314, 317, 318, 319, 320, 323, 325, 470, 472, 492, 494], "technic": [7, 237, 321, 459, 465], "disaggreg": [7, 36], "deploy": [7, 29, 30, 33, 210, 212, 215, 220, 231, 245, 251, 315, 325, 472, 478], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 205, 215, 218, 220, 225, 230, 231, 232, 234, 235, 245, 246, 247, 248, 250, 251, 252, 315, 317, 319, 321, 326, 394, 405, 412, 464, 477], "usag": [7, 17, 31, 32, 36, 37, 49, 126, 201, 204, 208, 229, 231, 232, 236, 237, 238, 257, 316, 317, 318, 322, 327, 384, 465, 472, 478, 479], "section": [8, 13, 27, 29, 44, 46, 47, 207, 209, 228, 231, 235, 239, 245, 319, 320, 327, 364, 477, 478], "assum": [8, 23, 27, 30, 204, 218, 228, 231, 239, 246, 314, 327, 363, 424, 463, 465, 472, 476, 477, 492], "getting_start": [8, 44, 204, 228, 239], "most": [8, 9, 13, 15, 22, 33, 38, 47, 52, 205, 212, 219, 223, 224, 226, 229, 231, 235, 244, 246, 248, 250, 252, 253, 257, 313, 315, 319, 321, 323, 327, 385, 386, 410, 413, 414, 415, 476, 478], "suffici": [8, 17, 212, 245, 314], "louvain": [8, 248, 256, 488], "social": [8, 47, 215, 220, 231, 245, 248, 250, 253, 392, 442, 457, 466], "scientist": [8, 234, 252], "familiar": [8, 14, 16, 29, 219], "manipul": [8, 11, 19, 20, 205, 231, 234, 249, 252, 254, 255, 465], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 49, 205, 207, 244, 255, 317, 318, 322, 472, 488], "pydata": [8, 251], "eco": 8, "still": [8, 24, 27, 34, 38, 201, 215, 231, 248, 343, 472, 477, 478], "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 201, 205, 215, 223, 226, 227, 229, 231, 233, 235, 238, 244, 250, 255, 314, 317, 319, 320, 321, 322, 457, 465, 468, 472, 478, 482], "migrat": [8, 219, 237, 240, 241, 246, 247, 252, 474, 492], "transpar": [8, 245], "don": [8, 17, 23, 30, 33, 36, 37, 212, 218, 231, 266, 359, 465, 478], "autom": [9, 29, 247], "abl": [9, 24, 27, 202, 218, 247, 318, 422, 477, 478], "batch": [9, 12, 19, 46, 220, 230, 235, 238, 242, 243, 247, 250, 313, 316, 318, 319, 321, 323, 325, 329, 478, 497], "counterpart": [9, 226, 234, 247], "redesign": [9, 247], "underli": [9, 42, 215, 219, 231, 247, 321, 477], "equip": [9, 233, 234, 247, 253, 482], "polici": [9, 212, 247, 255, 472], "memori": [9, 12, 23, 24, 27, 34, 46, 47, 201, 205, 212, 215, 217, 227, 230, 234, 236, 239, 240, 242, 245, 247, 248, 250, 251, 252, 253, 313, 314, 315, 321, 325, 327, 465, 472, 478, 481, 490, 491], "todai": 9, "static": [9, 16, 31, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 230, 255, 478, 480], "recomput": 9, "costli": 9, "consum": [9, 212, 250, 321, 324], "especi": [9, 244], "trillion": 9, "commerc": [9, 245, 248], "constantli": 9, "issu": [9, 17, 32, 37, 52, 212, 215, 218, 221, 230, 247, 248, 252, 388, 389, 390, 454, 491], "involv": [9, 13, 37, 41, 44, 205, 215, 219, 231, 235, 238, 245, 248, 249, 250, 251, 252], "adjust": [9, 12, 44, 45, 212], "old": [9, 12, 14, 32, 34, 223, 472], "typic": [9, 24, 44, 202, 205, 215, 227, 229, 231, 245, 248, 249, 252, 314, 319, 394, 465, 471, 477], "often": [9, 37, 47, 205, 215, 218, 230, 245, 248, 249, 250, 252, 315, 316, 319, 465, 478, 486], "overlap": [9, 472], "intervent": 9, "burden": [9, 15, 315], "expert": 9, "light": 9, "overal": [9, 250], "verifi": [9, 27, 38, 215, 218, 220, 224, 253, 319], "characterist": [9, 227, 238, 245, 250, 313, 318], "deduc": [9, 327, 498], "appropri": [9, 27, 41, 46, 47, 219, 235, 245, 250, 313], "record": [9, 13, 126, 200, 201, 205, 218, 221, 222, 223, 231, 246, 324, 474, 478], "part": [9, 13, 37, 52, 215, 219, 229, 235, 238, 247, 319, 320, 323, 325, 448, 465, 476, 477, 478], "intermedi": [9, 12, 17, 205, 219, 226, 231, 234, 245, 247], "deliv": [9, 496], "There": [9, 10, 12, 34, 37, 38, 45, 212, 218, 219, 226, 231, 246, 248, 249, 250, 256, 315, 318, 319, 321, 465, 471, 472, 477, 478], "reshap": [9, 325], "eas": [9, 12, 34, 221, 250, 252, 253], "achiev": [9, 12, 20, 24, 27, 34, 205, 231, 245, 248, 253, 474], "decid": [9, 315, 412], "due": [9, 52, 212, 245, 252, 319], "among": [9, 47, 219, 231, 245, 252, 255, 324, 330, 459, 478], "fetch": [9, 15, 17, 472, 478, 488], "suffic": 9, "replai": [9, 238, 247, 474, 478], "affect": [9, 13, 30, 36, 37, 226, 465], "area": [9, 15, 205, 223, 416, 462], "readili": 9, "obtain": [9, 14, 17, 29, 30, 219, 220, 222, 226, 230, 234, 235, 238, 241, 246, 250, 314, 318, 319, 321, 440, 443, 459, 465, 472, 478], "simpli": [9, 17, 20, 44, 126, 207, 218, 223, 231, 244, 246, 319, 387, 391, 465], "coincid": 9, "idea": [9, 37, 235, 250, 260, 321], "invalid": [9, 91, 92, 165, 166, 226, 327, 472], "miss": [9, 37, 317, 327, 375, 472], "comparison": [9, 19, 224, 229, 231, 234, 252, 253], "those": [9, 29, 47, 201, 205, 218, 220, 223, 224, 227, 231, 244, 254, 317, 327, 330, 341, 370, 372, 374, 465, 467, 471], "although": [9, 12, 14, 22, 34, 51, 205, 215, 246, 260, 364, 477, 478], "solut": [9, 31, 48, 205, 212, 249, 250, 252, 330, 491], "enough": [9, 238, 314, 317, 384, 472, 476], "caus": [9, 14, 22, 32, 37, 212, 230, 237, 250, 315, 321, 327, 364], "overwhelm": 9, "overhead": [9, 13, 252, 314, 315], "mf": 9, "delta": [9, 12, 13, 33, 37, 256, 327], "php": 9, "mp": 9, "cc": [9, 477, 493], "sswp": 9, "mv": [9, 223], "track": 9, "gcn": [9, 234, 238, 250, 254, 313, 317, 321, 325, 492, 494, 497, 499], "commnet": 9, "me": 9, "keep": [9, 231, 238, 258, 319, 327, 422, 425, 478], "graphsag": [9, 234, 238, 242, 246, 250, 254, 313, 317, 319, 321, 325, 494, 497, 499], "gin": [9, 250], "vldb": [9, 488, 494], "paper": [9, 14, 24, 235, 237, 240, 241, 242, 243, 245, 246, 247, 253, 325, 330, 462, 472, 488, 492], "publish": [9, 14, 24, 29, 226, 245, 246], "2021": [9, 247], "denot": [9, 47, 51, 203, 205, 229, 231, 318, 393, 478], "w": [9, 201, 230, 256, 330, 392, 398, 412, 415, 417, 422, 425, 427, 455, 465, 467, 478, 496], "respect": [9, 16, 38, 207, 217, 219, 224, 229, 244, 245, 246, 249, 250, 256, 275, 292, 300, 316, 319, 330, 371, 384, 431, 465, 471, 477, 478], "initi": [9, 16, 18, 19, 44, 45, 46, 52, 200, 209, 220, 231, 242, 243, 248, 250, 255, 314, 315, 325, 327, 329, 330, 404, 406, 407, 465, 468, 476, 478, 482, 488], "init_v": 9, "init_m": 9, "aggreg": [9, 219, 224, 232, 250, 258, 313, 319, 321, 325, 477, 496], "vector": [9, 211, 235, 241, 246, 250, 255, 258, 313, 321, 323, 330, 412, 416], "element": [9, 13, 47, 126, 200, 224, 229, 231, 248, 255, 314, 317, 319, 327, 330, 360, 392, 437, 459, 471, 472, 477], "specifi": [9, 16, 17, 20, 23, 24, 30, 36, 44, 45, 46, 47, 51, 52, 56, 91, 92, 130, 165, 166, 201, 202, 205, 207, 209, 218, 224, 227, 229, 234, 238, 242, 246, 248, 256, 258, 264, 271, 272, 282, 283, 287, 291, 295, 296, 312, 313, 314, 316, 319, 322, 327, 329, 330, 341, 349, 350, 371, 384, 394, 396, 397, 400, 401, 408, 412, 413, 414, 415, 416, 422, 425, 427, 430, 443, 462, 465, 467, 471, 472, 476, 478, 479, 485], "addition": [9, 12, 14, 36, 47, 223, 235, 241, 245, 247, 249, 252, 321, 330, 477, 486], "correspond": [9, 10, 13, 15, 17, 18, 37, 41, 201, 219, 223, 227, 229, 231, 234, 238, 244, 249, 252, 256, 290, 313, 314, 315, 316, 318, 319, 323, 327, 330, 363, 364, 394, 396, 397, 398, 399, 400, 412, 458, 459, 461, 465, 467, 468, 474, 478, 486], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 53, 54, 55, 56, 91, 92, 101, 118, 126, 211, 255, 474, 477, 478, 479, 488], "m1": [9, 212, 221, 366, 491, 495], "m2": [9, 366], "below": [9, 10, 12, 20, 34, 35, 36, 37, 46, 51, 52, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 229, 238, 245, 246, 248, 249, 250, 253, 314, 317, 319, 322, 325, 364, 394, 396, 430, 465, 472, 478], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 53, 54, 55, 56, 91, 92, 101, 118, 126, 246, 253, 255, 323, 478, 488, 492], "dbl_max": 9, "backend": [9, 27, 29, 234, 237, 242, 245, 246, 250, 327, 465, 472, 479, 492], "seamless": [9, 51, 215, 251, 478], "block": [9, 201, 212, 219, 316, 392, 478], "spawn": 9, "adopt": [9, 44, 205, 207, 252, 317, 478], "csc": [9, 476], "csr": [9, 13, 46, 211, 327, 476, 479], "sent": [9, 10, 14, 16, 24, 201, 230], "mainten": [9, 477], "preserv": [9, 13, 207, 226, 257, 327, 427, 457], "effect": [9, 36, 37, 44, 205, 207, 215, 226, 229, 230, 238, 245, 250, 317, 396, 465, 478], "readi": [9, 30, 32, 37, 201, 205, 212, 215, 220, 230, 245, 315, 317, 472, 478, 486], "accept": [9, 44, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 202, 330, 412, 416, 478, 479], "insert": [9, 14, 47, 91, 165, 219, 285, 478], "newli": [9, 41, 44], "particular": [9, 37, 224, 229, 256, 316, 319, 394], "incid": [9, 20, 227, 229, 231, 341, 342, 384, 406, 455, 465], "encod": [9, 13, 101, 224, 227, 256, 314, 319, 325, 327, 329, 467, 478, 497], "dummi": 9, "furthermor": [9, 230, 231, 234, 245, 252], "proprieti": 9, "deduct": 9, "techniqu": [9, 34, 238, 247, 248, 319], "cancel": [9, 94, 201], "compens": 9, "whose": [9, 24, 223, 231, 317, 319, 330, 335, 355, 437, 441, 457, 459, 460, 476, 477], "proce": [9, 52, 202, 384, 478], "inner": [10, 13, 16, 211, 231, 232, 258, 327, 477], "outer": [10, 14, 211, 224, 258, 380, 477], "cross": [10, 227, 260, 440], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 47, 48, 51, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 205, 207, 212, 218, 227, 229, 231, 240, 245, 246, 248, 249, 253, 255, 256, 257, 264, 266, 268, 284, 291, 308, 316, 327, 365, 367, 368, 370, 372, 374, 375, 377, 379, 380, 383, 394, 396, 397, 399, 401, 402, 403, 405, 409, 410, 411, 417, 418, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 460, 467, 472, 477, 486], "5": [10, 13, 19, 20, 31, 201, 212, 220, 225, 229, 231, 237, 238, 240, 241, 242, 243, 246, 249, 253, 313, 316, 318, 319, 320, 322, 325, 330, 336, 341, 343, 349, 368, 371, 384, 388, 389, 390, 392, 393, 401, 403, 410, 411, 412, 413, 415, 416, 430, 431, 433, 434, 435, 436, 438, 439, 442, 444, 446, 448, 449, 455, 460, 465, 471, 472, 478, 480, 486, 491, 492, 496], "9": [10, 31, 218, 221, 229, 231, 246, 314, 330, 368, 370, 416, 434, 442, 455, 460, 495], "12": [10, 20, 32, 212, 221, 231, 253, 256, 314, 315, 316, 318, 320, 332, 333, 334, 370, 432, 433, 437, 441, 445, 451, 489, 491, 495, 496], "split": [10, 46, 226, 229, 231, 240, 241, 242, 243, 314, 315, 472, 478], "roughli": 10, "across": [10, 14, 34, 35, 36, 48, 202, 205, 226, 227, 242, 245, 247, 248, 252, 477, 479], "divid": [10, 224, 229, 231, 235, 245, 256, 314, 317, 321, 322, 330, 476], "place": [10, 18, 19, 36, 45, 46, 218, 231, 323, 324, 327, 392, 412, 413, 414, 415, 416, 445, 463], "itself": [10, 20, 22, 37, 229, 231, 235, 244, 245, 258, 313, 315, 471, 472, 477], "replic": [10, 220, 406], "resid": [10, 14, 38], "j": [10, 31, 52, 211, 256, 325, 330, 363, 364, 385, 386, 394, 396, 397, 399, 405, 416, 419, 420, 421, 443, 477], "outcom": 10, "outgo": [10, 13, 16, 24, 47, 226, 229, 231, 249, 258, 319, 330, 465, 477], "incom": [10, 13, 14, 16, 34, 47, 229, 231, 255, 258, 330], "consid": [10, 15, 18, 27, 37, 226, 231, 238, 248, 256, 257, 314, 315, 330, 394, 457, 474, 477], "vice": [10, 412], "versa": [10, 412], "compani": [10, 477], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 215, 229, 244, 252, 314, 315, 319, 322, 327, 477, 478], "regardless": [10, 207, 224, 247, 314, 410, 477], "friendli": [11, 12, 37, 217, 234, 248, 250, 251, 252], "research": [11, 226, 238, 250, 455, 472], "particularli": [11, 250, 457], "field": [11, 27, 30, 33, 38, 45, 47, 52, 218, 238, 240, 241, 244, 246, 317, 321, 325, 327, 411, 472, 478, 489, 492], "scienc": [11, 419, 442], "solv": [11, 24, 37, 212, 214, 231, 248], "recast": [12, 14, 34], "ga": 12, "plug": [12, 34, 245], "minor": [12, 14, 34, 234, 245, 250, 253, 480], "cope": [12, 34], "life": [12, 32, 34, 218, 245], "extrem": [12, 27, 245, 321, 366, 377, 477], "fashion": [12, 20], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 42, 44, 47, 219, 226, 227, 229, 231, 234, 235, 238, 247, 248, 250, 252, 253, 255, 256, 258, 316, 317, 319, 321, 367, 368, 369, 380, 383, 391, 437, 459, 472, 474, 476, 477, 478, 479], "format": [12, 13, 20, 22, 34, 35, 45, 46, 47, 103, 177, 201, 215, 217, 231, 235, 242, 244, 250, 251, 253, 256, 284, 291, 313, 316, 319, 321, 324, 325, 327, 328, 465, 467, 472, 474, 490], "unifi": [12, 34, 42, 205, 215, 217, 219, 314, 474], "care": [12, 34, 231, 323, 324, 477], "foreign": [12, 477], "ecosystem": [12, 202, 217, 221, 233, 234, 249, 252, 482], "freedom": 12, "accord": [12, 19, 36, 44, 201, 212, 218, 219, 223, 229, 231, 235, 244, 245, 249, 250, 255, 317, 319, 323, 384, 392, 404, 405, 474, 478], "demand": [12, 205, 219, 248, 477, 478, 482], "sdk": [12, 18, 42, 49, 52, 210, 212, 218, 222, 232, 233, 234, 248, 249, 252, 260, 470, 478, 482, 488], "domain": [12, 223, 245, 250, 412, 413, 414, 415, 416], "dedic": 12, "treat": [12, 14, 20, 34, 231, 327, 465, 467, 472, 485], "immut": [12, 34, 52, 217, 227, 247], "persist": [12, 15, 30, 34, 48, 212, 217, 218, 245, 247, 252, 476], "fortun": [12, 20, 45, 215], "grin": [12, 217], "awar": [12, 37, 44, 202, 212, 218, 229, 247], "introduct": [12, 34, 49, 226, 232, 248, 318, 319, 322, 330, 375, 457, 477], "foundat": [12, 210, 226, 245], "visit": [12, 29, 202, 223, 231, 249, 314], "meanwhil": [12, 215, 234, 250, 477], "compress": [12, 13, 204, 246, 256, 314, 430], "pipelin": [12, 34, 234, 245, 248, 252, 481], "balanc": [12, 315, 365], "link": [12, 31, 37, 38, 47, 51, 202, 212, 214, 219, 227, 235, 250, 253, 256, 327, 330, 367, 388, 390, 391, 401, 402, 403, 462, 465, 472], "popular": [12, 22, 29, 203, 215, 244, 246, 249, 250, 313, 325, 478], "freeli": [12, 24], "background": [12, 214], "interoper": [12, 477], "panda": [12, 215, 223, 255, 257, 271, 282, 327, 465, 494], "mar": [12, 27, 215, 229, 247, 472], "fastffi": [12, 260], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 45, 48, 126, 200, 205, 207, 212, 218, 224, 225, 227, 229, 232, 233, 234, 245, 247, 249, 252, 255, 366, 377, 384, 460, 463, 465, 482, 488], "emploi": [12, 24, 34, 51, 241, 247, 248], "captur": [12, 250], "20": [12, 13, 27, 29, 32, 34, 218, 221, 229, 231, 234, 253, 256, 257, 315, 316, 318, 327, 384, 412, 413, 434, 436, 465, 488, 489, 495, 496], "100": [12, 34, 223, 231, 237, 240, 241, 246, 256, 325, 330, 387, 394, 398, 405, 414, 465, 472, 478, 492, 496], "build": [12, 15, 31, 34, 35, 37, 46, 49, 126, 212, 219, 223, 230, 234, 235, 244, 247, 255, 256, 266, 268, 315, 319, 321, 323, 324, 327, 413, 414, 415, 457, 472, 474, 485, 490, 497], "been": [12, 17, 23, 24, 28, 29, 33, 37, 44, 52, 201, 212, 219, 220, 221, 223, 226, 229, 231, 233, 235, 245, 247, 248, 249, 250, 252, 256, 305, 317, 319, 327, 328, 330, 384, 407, 457, 469, 482], "go": [13, 236, 325, 392, 445, 478], "impact": [13, 249], "dive": 13, "arrowfrag": [13, 16, 255, 479], "vineyard": [13, 15, 16, 23, 28, 31, 33, 211, 212, 217, 218, 227, 234, 239, 240, 245, 251, 252, 255, 257, 287, 292, 295, 296, 327, 328, 472, 477, 478, 486, 488, 491, 492, 493, 496, 498], "basic": [13, 16, 20, 45, 46, 52, 226, 249, 313, 316, 321, 323, 324, 325, 384, 394, 399, 471], "member": [13, 16, 229, 231, 255, 455], "string": [13, 17, 23, 33, 45, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 104, 105, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 121, 122, 123, 124, 125, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 218, 223, 224, 226, 227, 229, 244, 255, 256, 258, 263, 300, 314, 315, 316, 317, 318, 319, 322, 324, 325, 326, 327, 329, 330, 345, 349, 350, 359, 457, 459, 461, 465, 467, 474, 476, 477, 478, 479, 488, 496, 498], "consecut": 13, "hashmap": [13, 211, 327], "arrai": [13, 17, 211, 224, 235, 244, 250, 255, 256, 257, 316, 317, 319, 322, 325, 465, 468, 480, 488], "o2g_": 13, "fragment_id": 13, "_": [13, 30, 37, 201, 222, 229, 244, 256, 327, 330, 465, 468, 488, 491, 493, 498], "vertex_label": [13, 255, 258], "perfect": [13, 327], "int64_t": [13, 211, 218, 244, 255, 256, 327, 480, 498], "std": [13, 14, 15, 211, 255, 474, 479], "string_view": 13, "uint64_t": [13, 16, 327, 474], "oid_arrays_": [13, 211], "topologi": [13, 235, 238, 247, 316, 321, 462, 474, 476, 477], "row": [13, 46, 218, 226, 235, 250, 314, 327, 458, 478], "matrix": [13, 244, 250, 256, 321, 330, 392, 410, 425, 428, 457, 465, 468], "src_type": [13, 316], "edge_typ": [13, 45, 47, 141, 160, 201, 237, 240, 241, 246, 313, 315, 316, 317, 318, 319, 322, 325, 329, 477, 492, 497], "pair": [13, 20, 221, 224, 227, 231, 255, 256, 258, 312, 325, 364, 369, 370, 376, 392, 410, 416, 465, 468, 471, 477, 479], "indptr": 13, "ie_lists_": [13, 211], "edge_label": [13, 147, 153, 165, 223, 255, 258, 472], "neighbor_vertex_id": 13, "edge_table_index": 13, "tabl": [13, 44, 201, 210, 226, 227, 231, 235, 244, 253, 313, 315, 327, 472, 474, 476, 477, 479], "uint32_t": [13, 255, 327], "num_edg": 13, "ie_offsets_lists_": [13, 211], "offset": [13, 211, 255, 316, 324, 368, 478], "slice": [13, 219, 257, 327, 471], "ie_list": 13, "ie_offset": 13, "num_vertic": 13, "oe_lists_": [13, 211], "oe_offsets_lists_": [13, 211], "oe_list": 13, "oe_offset": 13, "edge_tables_": [13, 211], "vertex_tables_": [13, 211], "oid_t": [13, 15, 16, 211, 255], "vid_t": [13, 15, 16, 211, 255], "sizeof": 13, "uint8_t": 13, "load_factor": 13, "observ": [13, 23, 212], "practic": [13, 16, 28, 204, 219, 227, 235, 238, 245, 250, 314, 315, 317, 478], "load_factori": 13, "15": [13, 212, 231, 240, 241, 243, 253, 315, 316, 318, 319, 425, 447, 458, 465, 472], "extra": [13, 37, 212, 218, 220, 330, 426, 491], "column": [13, 18, 33, 45, 47, 63, 75, 76, 126, 137, 149, 150, 200, 201, 210, 211, 215, 219, 227, 235, 244, 246, 250, 255, 257, 258, 265, 314, 324, 327, 458, 474, 478, 479, 488, 492, 498], "edge_id": 13, "uniqu": [13, 45, 46, 47, 201, 209, 219, 223, 224, 227, 229, 244, 245, 246, 247, 256, 304, 305, 314, 318, 323, 324, 327, 330, 432, 438, 471, 478, 479], "kept": [13, 229, 231, 255], "summari": [13, 252, 345], "argument": [13, 23, 30, 100, 174, 201, 229, 231, 238, 242, 244, 330, 332, 333, 334, 363, 371, 401, 408, 412, 413, 414, 415, 416, 443, 465, 468, 471, 472, 478, 479, 488], "use_perfect_hash": [13, 255, 306, 327, 472], "load_from": [13, 22, 30, 327, 472, 476], "realli": 13, "margin": 13, "former": [13, 248], "globalvertexmap": 13, "later": [13, 18, 20, 32, 33, 221, 223, 231, 249, 327, 472, 477, 478, 495], "localvertexmap": 13, "suitabl": [13, 47, 204, 245, 252, 315, 319, 325, 384, 478, 481], "dozen": 13, "hundr": [13, 394, 405], "repeatedli": [13, 219, 248], "add_vertic": [13, 215, 223, 244, 327, 465, 468, 469, 492, 493, 498], "sure": [13, 23, 27, 30, 41, 45, 101, 175, 202, 220, 223, 231, 319, 323, 325, 472, 478], "fairli": [13, 221], "8": [13, 20, 31, 32, 33, 35, 37, 126, 212, 218, 221, 223, 229, 231, 234, 237, 253, 256, 314, 368, 391, 410, 433, 442, 444, 450, 454, 460, 462, 465, 467, 478, 480, 491, 496], "absolut": 13, "int32_t": [13, 244, 327, 498], "vid_typ": [13, 33, 255, 306, 327, 472], "compact_edg": [13, 255, 306, 327, 472], "compact": [13, 255, 327], "varint": [13, 327], "half": [13, 327], "generated_eid": 13, "save": [13, 18, 28, 29, 51, 218, 315, 327, 330, 478], "interact": [13, 27, 29, 33, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 53, 54, 55, 56, 91, 92, 101, 118, 126, 200, 201, 203, 205, 207, 208, 209, 215, 218, 219, 220, 222, 223, 225, 226, 228, 230, 231, 232, 234, 244, 245, 247, 248, 251, 252, 254, 284, 327, 406, 455, 470, 472, 485, 492, 496], "vertex_id": [13, 24, 207, 215, 244, 498], "retain_oid": [13, 218, 244, 255, 306, 327, 472, 479, 498], "gain": [13, 37], "signific": [13, 247, 252], "arrowprojectedfrag": [13, 15, 16, 255, 264], "implicit": [13, 468], "arrowflattenfrag": 13, "thought": [13, 393], "view": [13, 20, 24, 210, 244, 245, 276, 338, 342, 361, 362, 465, 468, 474, 486], "mainli": [13, 46, 52, 219, 224, 231, 252, 321], "purpos": [13, 42, 226, 231, 245, 477], "penalti": 13, "arrowprojectfrag": 13, "r1": [13, 257, 480, 481], "r2": [13, 257, 480, 481], "r3": [13, 257, 480], "projected_g": 13, "_project_to_simpl": [13, 16, 17, 22], "otherwis": [13, 33, 231, 248, 256, 314, 318, 319, 320, 330, 347, 384, 404, 414, 463, 465, 472, 477, 478], "express": [14, 15, 24, 203, 219, 224, 225, 227, 238, 247, 249, 257, 314, 316, 319, 416, 465, 496], "modifi": [14, 20, 24, 28, 201, 205, 218, 224, 230, 269, 270, 285, 286, 320, 343, 396, 463, 476, 477], "adher": [14, 35, 47, 226, 477], "think": [14, 24], "principl": [14, 323], "privileg": 14, "experienc": [14, 249], "inform": [14, 15, 16, 19, 27, 29, 38, 126, 201, 202, 212, 219, 220, 223, 224, 227, 241, 246, 248, 250, 251, 260, 274, 313, 314, 315, 316, 319, 321, 323, 327, 330, 345, 363, 404, 426, 427, 455, 465, 472, 474, 478, 485], "hop": [14, 219, 227, 229, 231, 234, 235, 238, 245, 249, 250, 313, 317, 319, 321, 322, 323, 325], "slow": [14, 221], "consequ": [14, 245, 248], "piec": [14, 203, 217, 324, 472], "destin": [14, 33, 45, 46, 47, 75, 78, 149, 152, 218, 223, 224, 231, 235, 244, 246, 255, 257, 273, 314, 315, 316, 318, 319, 325, 327, 329, 471, 476, 477, 478, 498], "abovement": 14, "peval": [14, 16, 17, 18, 34, 248, 255, 263, 482, 488], "incev": [14, 16, 17, 18, 34, 248, 255, 263, 482, 488], "assembl": [14, 34, 219, 247, 248, 255, 327], "unlik": [14, 17, 225, 235, 238, 245, 465], "modif": [14, 22, 234, 245, 250, 327, 468], "convent": [14, 37, 212, 226, 398, 424, 486], "taught": [14, 231], "colleg": 14, "textbook": 14, "answer": [14, 34, 37, 212, 223, 245, 478], "collect": [14, 34, 126, 200, 224, 229, 230, 231, 249, 250, 251, 325, 465], "partial": [14, 16, 18, 34, 229, 255, 257, 314, 407, 482], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 46, 218, 238, 252, 314, 322, 330, 400, 465], "accur": [14, 223, 226], "long": [14, 17, 30, 33, 38, 207, 223, 227, 229, 231, 247, 252, 256, 319, 477, 478, 488, 496], "const": [14, 15, 16, 211, 255, 258, 323, 324, 477, 478, 479], "fragment_t": [14, 15, 16, 255], "frag": [14, 17, 18, 211, 263, 474, 479, 488], "context_t": [14, 15, 16, 255], "ctx": [14, 17, 22, 255, 476, 488], "message_manager_t": [14, 16, 255], "vertex_t": [14, 16, 211, 255], "native_sourc": [14, 18, 488], "getinnervertex": [14, 255], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 211, 255, 474, 488], "get_neighbor": 14, "min": [14, 18, 24, 224, 258, 488, 496], "static_cast": [14, 16, 211, 474], "get_data": [14, 211], "isoutervertex": [14, 255], "put": [14, 16, 17, 22, 47, 48, 52, 55, 91, 92, 126, 129, 165, 166, 200, 201, 323], "channel": [14, 16, 37], "syncstateonoutervertex": 14, "els": [14, 16, 18, 211, 231, 315, 325, 327, 423, 477, 478, 488], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 211, 255, 474, 488], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 231, 258, 477], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 488], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 211, 255], "dijkstra": [14, 18, 248, 330, 488], "checkout": [14, 37, 320], "seri": [15, 231, 250, 255, 319, 477], "strong": [15, 204, 219, 248], "typenam": [15, 16, 57, 61, 64, 71, 80, 84, 90, 122, 124, 211, 255], "frag_t": [15, 16, 255], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 37, 44, 45, 218, 230, 231, 249, 316, 319, 323, 325, 471, 480], "shared_ptr": [15, 211, 255, 474, 479], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 29, 36, 41, 52, 207, 223, 231, 244, 472, 488, 498], "global": [15, 24, 219, 227, 229, 231, 250, 306, 327, 457, 472, 479, 485, 496], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 41, 46, 218, 219, 231, 244, 250, 427, 471], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "o_sourc": 15, "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 45, 46, 52, 103, 201, 202, 209, 211, 240, 244, 255, 256, 258, 263, 313, 315, 316, 320, 323, 325, 465, 468, 474, 482, 488, 497, 498], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 373], "len": [15, 229, 231, 240, 242, 315, 330, 339, 370, 387, 389, 392, 394, 395, 399, 465], "ed": [15, 23, 398, 412, 419, 442, 448], "ctruee": 15, "rather": [15, 18, 46, 205, 231, 244, 249, 251, 252, 330, 384, 426, 477], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 30, 267, 468], "dynamic_properti": [15, 280, 468], "def": [15, 18, 23, 222, 237, 240, 241, 242, 243, 244, 246, 263, 313, 315, 316, 317, 318, 319, 322, 325, 371, 478, 488, 492, 493, 497, 498], "arg": [15, 53, 54, 55, 56, 91, 92, 101, 118, 126, 240, 242, 255, 256, 257, 258, 291, 309, 316, 317, 318, 319, 322, 325, 329, 472, 478], "appasset": [15, 18, 263, 264, 268, 470, 488], "algo": [15, 16, 17, 22, 23, 256, 264], "flash_bf": 15, "vertex_data": [15, 16, 166, 195, 256, 264], "gscoordin": [15, 28, 36], "builtin": [15, 19, 20, 48, 200, 207, 466, 468, 470], "gs_conf": [15, 16, 264], "yaml": [15, 16, 28, 29, 38, 44, 45, 46, 47, 52, 202, 207, 209, 218, 230, 242, 256, 264, 472, 476, 478, 496], "cpp_flash": 15, "class_nam": [15, 16, 264], "compatible_graph": [15, 16, 264], "immutableedgecutfrag": 15, "log": [15, 17, 44, 94, 168, 201, 212, 217, 240, 241, 245, 247, 477, 479, 491], "p2p": [15, 17, 22, 23], "network": [15, 27, 47, 212, 215, 217, 220, 231, 235, 239, 241, 245, 246, 248, 251, 252, 253, 254, 256, 313, 314, 315, 317, 319, 321, 325, 330, 385, 386, 392, 394, 398, 401, 402, 403, 406, 418, 442, 453, 454, 456, 457, 462, 466, 480, 491], "load_p2p_network": [15, 16, 17, 18, 215, 256, 257, 488], "attribut": [15, 19, 47, 227, 238, 241, 246, 248, 250, 255, 256, 289, 300, 315, 316, 318, 321, 325, 326, 329, 330, 332, 333, 334, 349, 350, 359, 371, 384, 389, 408, 412, 413, 414, 415, 416, 419, 420, 421, 455, 457, 459, 462, 463, 465, 466, 468, 474], "convert": [15, 20, 23, 51, 52, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 226, 235, 256, 271, 272, 282, 283, 295, 296, 313, 314, 321, 325, 385, 386, 443, 460, 465, 467, 468, 474], "simple_graph": [15, 16], "dist": [15, 17, 222, 256, 257, 320, 323, 412, 414, 416, 472, 488, 496], "codegen": [15, 52, 219], "bit": [15, 221, 224, 229, 231, 476], "longer": [15, 240, 258, 472], "retriev": [15, 49, 51, 201, 217, 223, 227, 229, 246, 247, 257, 271, 272, 282, 283, 287, 291, 295, 296, 316, 317, 319, 325, 330, 471, 478, 479], "displai": [15, 209, 230, 314], "vertex_rang": [15, 257, 271, 272, 282, 283, 287, 295, 296, 327, 471], "end": [15, 16, 211, 215, 224, 229, 231, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 252, 257, 258, 319, 324, 330, 344, 353, 358, 359, 372, 384, 467, 471, 477, 482], "sort_valu": 15, "pip3": [16, 19, 23, 35, 37, 200, 212, 222, 230, 485, 489, 491, 495], "degre": [16, 19, 20, 211, 215, 226, 231, 238, 256, 258, 316, 317, 322, 330, 339, 364, 365, 384, 394, 395, 396, 397, 398, 399, 400, 401, 404, 405, 410, 422, 423, 424, 425, 459, 465, 466, 478], "vertexdatacontext": [16, 17, 255, 330, 488], "myappcontext": 16, "explicit": [16, 255, 409, 465, 472], "parallelmessagemanag": [16, 17, 488], "param1": [16, 92, 166], "setvalu": [16, 17, 488], "vertex_array_t": [16, 255], "variabl": [16, 29, 33, 39, 41, 47, 212, 220, 229, 263, 384, 472, 478, 479, 491], "And": [16, 18, 23, 29, 31, 36, 38, 215, 219, 221, 231, 244, 253, 256, 257, 318, 323, 468, 471, 472, 478], "zero": [16, 47, 247, 256, 314, 319, 330, 347, 365, 374, 407, 459, 460, 479], "myapp": 16, "parallelappbas": [16, 17, 488], "parallelengin": [16, 17, 488], "install_parallel_work": 16, "constexpr": [16, 255], "messagestrategi": [16, 18, 255, 258, 488], "message_strategi": [16, 255], "ksynconoutervertex": [16, 18, 255, 258, 488], "loadstrategi": [16, 255], "load_strategi": [16, 255], "kbothoutin": [16, 255], "initchannel": 16, "noth": [16, 258, 274, 327, 329, 465], "forc": [16, 37, 244], "forcecontinu": [16, 17, 488], "getincomingadjlist": [16, 211, 255], "counter": [16, 231], "runnabl": [16, 17, 23, 88, 162], "content": [16, 47, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 201, 204, 215, 231, 241, 244, 246, 330, 462, 476, 498], "my_app": [16, 18, 488], "cpp_pie": [16, 256, 264], "context_typ": [16, 255, 256, 264], "dynamicprojectedfrag": 16, "codebas": [16, 35, 49], "my_app_context": 16, "zip": [16, 204, 222, 223, 230, 264, 412, 416, 465, 496], "jr": 16, "load_app": [16, 17, 18, 22, 488], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 256, 257, 327, 471, 488], "demo": [17, 22, 23, 221, 260, 472, 478, 486, 488], "turn": [17, 49, 205, 210, 212, 223, 253, 260, 459, 486], "verbos": [17, 23, 38, 212, 486], "cluster_typ": [17, 22, 223, 244, 256, 257, 472, 476, 488, 498], "add_lib": [17, 22, 472], "home": [17, 22, 23, 28, 38, 45, 46, 212, 215, 244, 255, 320, 321, 323, 324, 326, 327, 330, 374, 485, 486, 488, 490, 498], "19": [17, 22, 23, 32, 212, 222, 231, 253, 315, 316, 318, 486, 491, 495], "shade": [17, 22, 23, 488], "java_pi": [17, 256], "threadnum": [17, 488], "info": [17, 38, 44, 52, 53, 127, 202, 212, 221, 231, 242, 258, 327, 465, 468, 472, 477, 478, 479, 486], "avail": [17, 23, 29, 30, 41, 46, 201, 203, 210, 215, 223, 224, 227, 230, 238, 244, 247, 253, 256, 312, 325, 413, 414, 415, 465, 472, 474, 477, 488], "mvn": [17, 22, 52, 126, 260, 478], "clean": [17, 32, 52, 126, 215, 221, 223, 246, 260, 323, 477], "dskiptest": [17, 52, 260], "pom": [17, 23, 126, 478], "xml": [17, 23, 255, 478], "groupid": [17, 23, 126, 478, 488], "artifactid": [17, 23, 126, 478, 488], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 478, 488], "spark": [17, 476], "drastic": 17, "great": [17, 23, 37, 478], "suppos": [17, 231, 459, 477], "traversecontext": [17, 488], "overrid": [17, 244, 255, 313, 323, 485, 488], "ifrag": [17, 488], "parallelcontextbas": [17, 488], "adjlist": [17, 255, 258, 476, 488], "nbr": [17, 20, 211, 255, 258, 465, 488], "dst": [17, 18, 30, 91, 126, 165, 200, 215, 227, 238, 244, 257, 313, 316, 327, 329, 471, 474, 477, 488, 497, 498], "largest": [17, 231, 330, 410, 488], "vertexarrai": [17, 255, 258, 488], "math": [17, 237, 241, 246, 330, 414, 415, 492, 494], "max": [17, 224, 258, 326, 330, 488, 496], "pars": [17, 219, 244, 256, 314, 474, 478], "maxiter": [17, 488], "jsonobject": [17, 488], "gsvertexarrai": [17, 488], "createfficontext": [17, 488], "containskei": [17, 488], "getinteg": [17, 488], "javadoc": [17, 35], "proper": [17, 37], "javaapp": [17, 470, 488], "But": [17, 218, 231, 244, 252, 260, 465, 471], "rememb": [17, 22, 23, 30, 33, 44, 207, 478, 485], "pack": [17, 23, 488], "param": [17, 23, 29, 88, 109, 162, 183, 201, 212, 221, 223, 242, 256, 276, 277, 291, 306, 308, 312, 319, 325, 472, 478, 488], "b": [17, 18, 22, 37, 52, 224, 226, 229, 231, 319, 374, 392, 405, 411, 412, 416, 421, 422, 423, 425, 453, 461, 465, 488, 496], "bother": 17, "click": [17, 36, 37, 238, 315, 316, 319, 489], "pure": [18, 255, 482], "just": [18, 19, 23, 27, 45, 46, 48, 200, 202, 204, 207, 212, 215, 218, 229, 231, 252, 260, 323, 327, 465, 468, 472, 478, 480], "udf": [18, 263, 471, 488], "decor": [18, 488], "vd_type": [18, 258, 263, 488], "md_type": [18, 258, 263, 488], "youralgorithm": [18, 488], "staticmethod": [18, 263, 488], "statu": [18, 27, 29, 30, 38, 49, 52, 53, 54, 55, 56, 91, 92, 94, 101, 107, 118, 126, 127, 128, 129, 130, 165, 166, 168, 175, 181, 192, 200, 207, 209, 212, 240, 323, 324, 330, 478, 482, 486], "cython": [18, 34, 212, 291, 470, 488], "sssp_pie": [18, 488], "v_label_num": [18, 479, 488], "vertex_label_num": [18, 258, 474, 479, 488], "v_label_id": [18, 258, 488], "init_valu": [18, 258, 488], "1000000000": [18, 256, 488], "pieaggregatetyp": [18, 258, 488], "kminaggreg": [18, 258, 488], "register_sync_buff": [18, 258, 488], "get_config": [18, 258, 472, 488], "declar": [18, 219, 229, 231, 234, 249, 252, 315, 488], "get_inner_nod": [18, 258, 488], "break": [18, 37, 51, 205, 230, 325, 488], "set_node_valu": [18, 258, 488], "e_label_num": [18, 211, 479, 488], "edge_label_num": [18, 258, 474, 479, 488], "e_label_id": [18, 488], "get_outgoing_edg": [18, 258, 488], "third": [18, 52, 244, 245, 249, 327, 450, 451], "get_int": [18, 258, 488], "get_node_valu": [18, 258, 488], "iv": [18, 488], "inner_nod": [18, 258, 488], "v_dist": [18, 488], "u_dist": [18, 211, 488], "classic": [18, 238, 318, 466], "yourpregelalgorithm": [18, 488], "sssp_pregel": [18, 488], "set_valu": [18, 258, 488], "src_id": [18, 46, 211, 238, 314, 315, 316, 318, 319, 322, 325, 329, 488], "cur_dist": [18, 488], "new_dist": [18, 488], "outgoing_edg": [18, 258, 488], "vote_to_halt": [18, 258, 488], "sin": [18, 488], "m_pi": [18, 488], "translat": [18, 37, 223, 245], "generate_eid": [18, 218, 244, 255, 306, 327, 472, 479, 488, 498], "test": [18, 23, 29, 33, 49, 51, 201, 204, 210, 212, 217, 218, 221, 231, 234, 237, 240, 241, 246, 250, 313, 323, 325, 329, 349, 350, 384, 465, 467, 472, 477, 478, 485, 489, 490, 492, 497], "futur": [18, 47, 126, 200, 205, 224, 229, 231, 244], "to_gar": [18, 488], "my_sssp_pregel": [18, 488], "gar": [18, 256, 264, 488], "construct": [19, 205, 210, 231, 235, 238, 244, 245, 246, 247, 255, 306, 313, 314, 315, 316, 317, 327, 328, 332, 333, 373, 394, 396, 397, 399, 405, 409, 410, 411, 419, 422, 423, 424, 425, 427, 443, 447, 451, 457, 459, 472, 476, 479], "expand": [19, 205, 219, 231, 232, 317, 319, 466], "add_edges_from": [19, 20, 349, 465], "add_nod": [19, 20, 465, 468], "number_of_nod": [19, 20, 330, 374, 458, 465], "number_of_edg": [19, 20, 339, 374, 458, 465], "sort": [19, 20, 211, 219, 231, 330, 336, 364, 368, 371, 374, 399, 400, 458, 459, 465, 477], "connected_compon": [19, 330], "nx": [19, 20, 215, 267, 269, 270, 273, 276, 278, 280, 285, 286, 290, 293, 294, 327, 330, 465, 467, 468], "add_nodes_from": [19, 20, 465], "red": [19, 20, 37, 223, 314, 465], "green": [19, 20, 36, 37], "add_edg": [19, 20, 200, 215, 223, 244, 327, 343, 349, 350, 353, 358, 359, 465, 468, 492, 493, 498], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": [19, 203], "dict": [19, 20, 27, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 256, 257, 284, 292, 312, 315, 316, 319, 327, 328, 412, 413, 414, 415, 422, 423, 443, 465, 471, 472, 478], "draw": [19, 51, 205, 231, 412, 415], "matplotlib": [19, 231], "with_label": 19, "font_weight": 19, "bold": [19, 253], "twitter": [19, 253], "wget": [19, 22, 23, 29, 35, 222, 320, 496], "raw": [19, 22, 23, 45, 46, 48, 52, 202, 209, 218, 219, 235, 282, 283, 315, 321, 323, 324, 329], "githubusercont": [19, 22, 23], "p": [19, 20, 31, 36, 48, 51, 52, 223, 229, 231, 246, 247, 256, 315, 325, 330, 388, 389, 390, 392, 401, 402, 403, 406, 407, 409, 411, 413, 414, 415, 416, 419, 421, 496], "o": [19, 22, 23, 27, 30, 33, 38, 255, 325, 330, 347, 398, 400, 405, 413, 414, 415, 417, 418, 419, 465, 478, 489, 492], "gs_nx": 19, "g1": [19, 327, 469, 480, 481], "read_edgelist": [19, 467], "expandvar": [19, 22], "nodetyp": [19, 467], "create_us": [19, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 394, 395, 396, 397, 399, 401, 402, 403, 405, 409, 410, 411, 417, 418, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 460, 467], "g2": [19, 327, 465, 469, 480, 481], "ret_g": 19, "ret_nx": 19, "lack": [20, 32, 223, 229, 251, 330], "hashabl": [20, 345, 360, 422, 465, 467], "float": [20, 83, 97, 224, 227, 229, 240, 244, 253, 256, 313, 314, 315, 316, 324, 325, 326, 330, 384, 387, 388, 389, 390, 392, 403, 404, 405, 406, 407, 412, 413, 414, 415, 416, 419, 420, 421, 457, 465, 467, 472, 476, 480, 496, 497, 498], "tupl": [20, 231, 244, 314, 315, 316, 325, 327, 330, 349, 350, 359, 371, 412, 416, 422, 461, 465, 467, 472], "though": [20, 384, 465, 478], "yield": [20, 51, 207, 319, 325, 412, 416, 465], "node_attribute_dict": 20, "discuss": [20, 212, 231, 330, 477, 491], "incorpor": [20, 51, 52, 226], "path_graph": [20, 330, 341, 343, 344, 350, 465, 467], "grown": [20, 374, 407, 465], "unpack": [20, 230, 255, 465], "ebunch": [20, 465], "dictionari": [20, 203, 256, 300, 330, 412, 413, 414, 415, 422, 423, 424, 425, 465, 467, 476], "11": [20, 27, 30, 31, 32, 218, 221, 231, 237, 253, 256, 314, 315, 316, 318, 332, 333, 334, 370, 465, 478, 486], "complaint": 20, "clear": [20, 37, 229, 231, 269, 270, 365, 367, 368, 370, 372, 374, 375, 377, 379, 380, 383, 394, 396, 397, 399, 401, 402, 403, 405, 409, 410, 411, 417, 418, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 460, 465, 467, 478], "quietli": [20, 360, 465], "ignor": [20, 48, 330, 341, 360, 465, 472], "spam": 20, "stage": [20, 212, 217, 235, 251, 252, 319, 477], "seen": [20, 219, 245, 477], "report": [20, 212, 226, 253, 290, 388, 389, 390, 465, 468], "adj": [20, 258, 330, 465], "item": [20, 29, 46, 202, 242, 245, 314, 315, 316, 319, 325, 330, 465, 478], "One": [20, 219, 224, 245, 249, 250, 251, 252, 256, 317, 319, 396, 405, 459, 478], "nbunch": [20, 338, 342, 344, 360, 465], "remove_nod": [20, 465], "remove_nodes_from": [20, 465], "remove_edg": [20, 465], "remove_edges_from": [20, 394, 396, 465], "instanti": [20, 256, 325, 480], "digraph": [20, 327, 332, 342, 344, 349, 350, 353, 358, 359, 370, 387, 388, 389, 392, 396, 397, 399, 401, 402, 403, 404, 408, 459, 460, 461, 463, 466, 467, 468], "edgelist": [20, 443, 467], "subscript": [20, 465], "notat": [20, 44, 46, 430, 432, 434, 436, 438, 444, 446, 465], "yellow": [20, 314], "blue": [20, 314, 465], "undirect": [20, 47, 244, 250, 256, 276, 315, 319, 327, 330, 336, 340, 362, 385, 386, 392, 394, 401, 403, 406, 408, 409, 410, 412, 413, 414, 415, 416, 422, 427, 431, 432, 435, 438, 439, 441, 447, 460, 462, 465, 479], "twice": [20, 443, 465], "fg": [20, 479], "add_weighted_edges_from": [20, 349, 465], "125": [20, 314, 398, 409], "75": [20, 231, 237, 240, 241, 246, 253, 330, 388, 389, 390, 392, 472, 492], "375": 20, "eattr": [20, 465], "wt": 20, "attach": [20, 255, 314, 401, 404], "fridai": [20, 465, 468], "mondai": 20, "5pm": [20, 465], "2pm": [20, 465], "room": [20, 465], "714": [20, 465], "to_direct": [20, 327, 385, 386, 401, 403, 465], "represent": [20, 47, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 205, 219, 245, 247, 250, 327, 463, 465, 476], "dg": [20, 234, 250], "dgv": 20, "as_view": [20, 361, 362, 465], "shallow": 20, "out_edg": [20, 342, 465], "in_degre": [20, 238, 240, 317, 319, 322, 325, 396, 422, 423, 465], "predecessor": [20, 335, 408, 459, 465], "successor": [20, 302, 335, 402, 403, 408, 465], "out_degre": [20, 396, 422, 423, 465], "feel": [20, 37, 212], "inconsist": [20, 253], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 37, 229, 238, 250, 256, 317, 322, 387, 388, 389, 390, 392, 394, 398, 401, 403, 404, 405, 406, 407, 412, 413, 414, 415, 416, 419, 421], "to_undirect": [20, 327, 401, 403, 465], "theoret": 20, "load_ldbc": [20, 231, 476, 496], "foo": [20, 465], "famou": [22, 23, 464], "hadoop": [22, 478], "stop": [22, 27, 30, 45, 56, 126, 130, 200, 201, 209, 247, 251, 255, 330], "open": [22, 36, 37, 52, 201, 220, 230, 232, 238, 249, 252, 325, 467, 477, 478], "actual": [22, 23, 28, 45, 47, 200, 220, 227, 229, 231, 238, 259, 261, 318, 416, 465, 468, 476, 486], "vertexinputformat": 22, "edgeinputformat": 22, "vformat": [22, 327], "p2pvertexinputformat": 22, "eformat": [22, 327], "p2pedgeinputformat": 22, "gs_test_dir": [22, 33, 52], "graphscope_sess": [22, 327], "31": [22, 23, 215, 244, 315, 316, 318, 498], "v_prop": [22, 255, 289], "vdata": 22, "e_prop": [22, 255, 289], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 202, 330], "toward": [22, 478], "offici": [22, 218, 220, 221, 230, 249], "pl": 22, "snapshot": [22, 227, 252, 474, 478], "writabl": 22, "degrad": [22, 252], "procedur": [22, 29, 44, 45, 49, 55, 101, 126, 129, 175, 200, 201, 202, 205, 206, 208, 210, 218, 219, 231, 266, 407], "except": [22, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 205, 212, 230, 237, 240, 241, 244, 246, 251, 318, 325, 343, 360, 364, 375, 384, 394, 396, 445, 465, 472, 477, 492], "right": [22, 224, 226, 229, 244, 323, 366, 375, 377, 398, 463], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 32, 37, 51, 201, 215, 219, 234, 248, 250, 252, 253, 387], "proceed": [23, 27, 202, 387, 405], "side": [23, 37, 219, 229, 230, 256, 275, 315, 368, 477], "venv": [23, 221, 246], "virtualenv": 23, "pyspark_venv": 23, "bin": [23, 31, 44, 45, 51, 52, 201, 202, 207, 220, 221, 230, 231, 245, 246, 339, 478, 486, 490, 496], "pyspark_venv_g": 23, "tar": [23, 29, 31, 478], "gz": [23, 31, 467, 478], "upload": [23, 118, 192, 218], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 245, 476, 496], "oss": [23, 29, 31, 244, 255, 320, 327, 478, 488, 489, 498], "beij": [23, 29, 31, 235, 250, 314, 478, 489], "fixm": 23, "yuansi": 23, "env": [23, 212, 221, 242, 246, 320], "var": [23, 33, 38, 212, 244, 325, 478, 486, 498], "gs_jar": 23, "l": [23, 29, 35, 52, 207, 238, 250, 317, 385, 386, 388, 389, 390, 397, 398, 399, 401, 402, 403, 406, 413, 414, 415, 416, 418, 422, 423, 424, 425, 454, 457, 465, 485, 486], "lib": [23, 31, 126, 203, 220, 264, 478], "7077": 23, "master_url": 23, "conf": [23, 44, 45, 202, 220, 230, 255, 478, 496], "executor": [23, 35, 38, 48, 218, 220, 245, 328, 486], "driver": [23, 27, 126, 200, 205, 225, 230, 244, 292, 327, 478, 496], "2g": 23, "10g": [23, 490], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": [23, 224], "url": [23, 94, 168, 201, 220, 327, 328, 478, 496], "rdd": 23, "classifi": [23, 235, 237, 241, 246, 250, 325, 488], "maven": [23, 49, 260, 478, 488], "conflict": [23, 221, 231, 237, 327, 455, 478], "correctli": [23, 37, 212, 234, 330, 478], "resolv": [23, 28, 212, 244, 327, 479], "goal": [23, 205, 210, 219, 224, 235, 247, 250, 477], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 211, 219, 371, 478], "config": [23, 27, 28, 31, 48, 209, 218, 220, 230, 242, 290, 300, 312, 313, 326, 329, 469, 472, 474, 478, 479, 485, 496, 497], "socket": [23, 28, 30, 220, 255, 479], "bound": [23, 47, 201, 229, 231, 249, 291, 384, 472, 477, 480], "vineyardsock": 23, "filepath": [23, 117], "sock": [23, 28, 220], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "shell": [23, 35, 51, 202, 207, 208, 218, 220, 225, 249, 256], "grow": [24, 205, 215, 234, 245, 384, 394, 401, 402, 403, 464, 477], "capac": [24, 33, 220, 465, 472], "indivis": 24, "succinctli": [24, 203], "oppos": [24, 238], "orient": [24, 238, 252, 322, 478], "googl": [24, 35, 248, 490], "powergraph": [24, 252, 253], "wa": [24, 29, 30, 37, 207, 226, 229, 231, 247, 253, 319, 330, 384, 399, 412, 413, 414, 415, 464, 478], "2010": [24, 253, 256, 330, 390, 457, 462], "sequenc": [24, 203, 224, 229, 231, 256, 327, 364, 384, 394, 395, 396, 397, 398, 399, 400, 416, 422, 423, 426, 459, 460, 465, 466, 479], "conceptu": [24, 226], "behavior": [24, 44, 201, 229, 231, 244, 258, 472], "becom": [24, 207, 215, 226, 231, 238, 465, 477, 478], "inact": 24, "again": [24, 212, 229, 244, 480, 485], "termin": [24, 36, 202, 223], "halt": [24, 249, 258, 404], "individu": [24, 218, 220, 226, 241, 246], "messageiter": [24, 258], "mindist": 24, "issourc": 24, "inf": 24, "done": [24, 46, 235, 238, 314, 325, 330, 427, 479], "getvalu": [24, 211], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 37, 212, 478], "dramat": 24, "face": [24, 31, 219, 231, 248, 450, 451], "power": [24, 126, 200, 207, 224, 225, 229, 231, 234, 249, 256, 330, 384, 394, 442, 465], "law": [24, 384, 394], "gather": [24, 472], "scatter": [24, 315], "accumul": [24, 238, 459], "workload": [27, 36, 205, 215, 217, 219, 220, 228, 231, 234, 245, 247, 253, 478, 480, 481], "grpc": [27, 28, 31, 212, 255, 489, 491], "linux": [27, 30, 31, 36, 52, 204, 218, 237, 253, 260, 495], "maco": [27, 30, 36, 52, 204, 212, 221, 489, 491, 492, 495], "skip": [27, 31, 35, 249, 260, 478], "minikub": [27, 30, 478], "instruct": [27, 29, 30, 33, 37, 52, 202, 205, 207, 218, 220, 221, 222, 223, 230, 246, 249, 255, 268, 319], "platform": [27, 32, 37, 42, 52, 217, 218, 219, 237, 251, 252, 253, 260, 314, 456, 472], "desktop": [27, 478, 492], "server": [27, 29, 48, 52, 53, 91, 92, 101, 118, 127, 165, 166, 175, 192, 200, 201, 219, 220, 223, 227, 230, 232, 234, 238, 243, 245, 247, 249, 254, 318, 323, 324, 325, 478, 490, 496], "kubectl": [27, 29, 30, 33, 38, 48, 212, 218, 478, 486, 491], "kube": [27, 472], "apivers": [27, 33, 242], "v1": [27, 33, 35, 52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201, 212, 229, 231, 237, 240, 241, 242, 246, 249, 313, 430, 443, 468, 491, 492, 497], "certif": 27, "ca": 27, "crt": 27, "last": [27, 30, 231, 319, 324, 327, 387, 459, 486], "16": [27, 31, 218, 220, 231, 253, 313, 315, 316, 318, 320, 421, 444, 458, 497], "2023": [27, 226, 486], "44": [27, 48, 253, 315, 316, 318, 458], "05": [27, 392, 405], "cst": 27, "sig": [27, 488, 495], "28": [27, 229, 231, 235, 250, 253, 315, 316, 318, 462], "cluster_info": 27, "172": [27, 253], "21": [27, 31, 215, 231, 253, 256, 315, 316, 318, 438, 478], "67": [27, 253, 256], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 30, 33, 38, 242, 472], "profil": [27, 496], "encapsul": [27, 51, 202, 207, 234, 235, 313, 319, 472], "entranc": [27, 319], "tag": [27, 41, 48, 229, 231, 253, 392, 472, 478, 490], "intranet": 27, "internet": [27, 29, 31, 223, 231, 248, 462, 464], "might": [27, 44, 47, 202, 212, 330, 422, 465, 481], "k8s_image_registri": [27, 33, 472], "k8s_image_repositori": [27, 472], "k8s_image_tag": [27, 33, 242, 472], "fit": [27, 205, 215, 218, 239, 240, 260], "increas": [27, 38, 44, 212, 215, 315, 363, 364, 372, 394, 396, 404, 422, 425, 427, 477], "cpu": [27, 201, 212, 218, 242, 243, 320, 472, 481, 491], "num_work": [27, 28, 33, 242, 243, 312, 472, 496], "k8s_engine_cpu": [27, 312, 472], "32": [27, 229, 253, 315, 316, 318, 326, 330, 476], "k8s_engine_mem": [27, 212, 242, 312, 472, 491], "256gi": 27, "vineyard_shared_mem": [27, 212, 242, 312, 472, 491], "preexist": [27, 226], "k8s_client_config": [27, 472], "disk": [27, 205, 212, 218, 245, 478], "test_data": [27, 237, 241, 246, 489, 492], "testingdata": [27, 30, 33, 489, 492], "k8s_volum": [27, 30, 33, 312, 472, 489, 492], "constructor": [27, 244, 365, 367, 368, 370, 372, 374, 375, 377, 379, 380, 383, 394, 396, 397, 399, 401, 402, 403, 405, 409, 410, 411, 417, 418, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 460, 467], "vm": [27, 30, 255], "copi": [27, 29, 30, 218, 245, 247, 252, 273, 330, 337, 341, 343, 344, 402, 408, 463, 465, 468, 476, 477, 478, 479, 480], "hostpath": [27, 30, 33, 48, 218, 472, 489, 492], "expandus": [27, 489, 492], "mountpath": [27, 30, 33, 242, 472, 489, 492], "expect": [27, 34, 37, 49, 212, 244, 260, 394, 396, 398, 468, 472], "monitor": [27, 29, 234], "wait": [27, 94, 212, 472], "finish": [27, 211, 230, 240, 258, 315, 318, 478], "remov": [27, 29, 91, 92, 126, 165, 166, 200, 209, 226, 229, 231, 256, 260, 320, 337, 343, 345, 391, 394, 396, 398, 440, 443, 459, 465, 478], "remain": [27, 205, 207, 224, 229, 244, 248, 314, 319, 399, 426], "statefulset": [27, 478], "svc": [27, 48, 218], "left": [27, 36, 44, 224, 226, 229, 256, 327, 330, 366, 398], "service_port": 28, "63800": 28, "launcher_typ": 28, "operator_launch": 28, "gae_endpoint": 28, "60001": 28, "instance_id": [28, 479], "0000": [28, 215, 231], "rpc_port": 28, "9600": 28, "sai": [28, 41], "configmap": [28, 242], "mount": [28, 30, 33, 45, 212, 219, 244, 324, 472, 489, 491, 492], "ideal": [29, 37, 47, 205, 252], "deploy_graphscope_on_self_managed_k8": 29, "chart": [29, 48, 212, 218, 220, 231, 478, 489, 491], "minut": [29, 212, 219], "succe": 29, "past": [29, 47, 219, 480], "noteport": 29, "node_ip": [29, 478], "ojsonpath": 29, "hostip": 29, "node_port": 29, "spec": [29, 33, 242, 255, 325], "nodeport": [29, 242, 472, 478, 492], "echo": [29, 31], "listen": [29, 44, 48, 126, 200, 205, 220, 255], "statement": [29, 319, 478], "ident": [29, 257, 273, 361, 362, 366, 437, 457, 459, 465], "reconnect": [29, 472], "disconnect": [29, 330, 406, 407, 422, 425, 472, 485], "sess2": 29, "comment": [29, 37, 215, 223, 224, 231, 244, 314, 465, 467, 468, 476, 493, 498], "homepag": 29, "remot": [29, 36, 126, 230, 242, 243, 260, 328, 472, 496], "cater": [29, 245], "tgz": 29, "unzip": [29, 204, 222, 223, 230, 496], "zxvf": 29, "bundl": [30, 472], "aliv": 30, "reserv": 30, "simplifi": [30, 42, 51, 218, 245, 246, 247, 249, 251, 314, 319, 477], "etcd": [30, 212, 218, 472, 474, 489], "replica": [30, 218, 242], "etcd_replica": 30, "greater": [30, 33, 224, 229, 256, 315, 330, 384, 415, 472, 477], "ag": [30, 33, 46, 47, 166, 201, 219, 226, 227, 229, 231, 235, 250, 313, 314, 327, 471, 486, 496, 497], "33": [30, 205, 229, 315, 316, 318, 455, 458], "vineyardd": [30, 33, 220], "vineyardctl": [30, 472], "v6d": [30, 31, 218, 244, 472], "blob": [30, 212, 488], "cmd": [30, 255, 472], "readm": [30, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 260], "md": [30, 325], "notic": [30, 33, 218, 227, 231, 245, 319, 327, 458, 465, 472, 480], "charact": [30, 46, 456, 461, 467], "vineyard_deploy": 30, "restart": [30, 44, 51, 56, 126, 130, 200, 201, 207, 209, 486], "etcd0": 30, "73m": 30, "5db59987f": 30, "vr2fg": 30, "beforehand": 30, "onto": 30, "stai": 30, "k8s_namespac": [30, 33, 312, 472], "k8s_vineyard_deploy": [30, 33, 312, 472], "reload": [30, 478], "vineyard_id": [30, 33, 327, 486], "new_sess": 30, "22731319746904674": 30, "objectid": [30, 33, 255, 327, 472, 477, 479], "softwar": [30, 33, 46, 91, 165, 201, 218, 221, 226, 229, 234, 245, 327, 479], "successfulli": [30, 91, 92, 101, 165, 166, 175, 201, 204, 220, 223, 235, 240, 384, 478], "folder": [31, 38, 45, 52, 204, 209, 242, 244, 477], "cento": [31, 32, 212, 221, 253, 491, 495], "82": [31, 253], "boost": [31, 234, 245, 255], "perl": 31, "v3": [31, 249, 253], "24": [31, 166, 218, 231, 253, 315, 316, 318, 432, 450, 458], "openmpi": [31, 253], "gflag": 31, "glog": [31, 226], "arrow": [31, 46, 211, 255, 267, 280, 327, 468], "74": [31, 253, 456], "openssl": [31, 212, 491], "zlib": 31, "protobuf": 31, "49": [31, 231, 253, 315, 316, 318], "13": [31, 35, 231, 253, 314, 315, 316, 318, 370, 411], "libclang": 31, "curl": [31, 49, 230], "lo": [31, 230], "czf": 31, "mkdir": [31, 52, 212, 325, 491], "workdir": 31, "xzf": 31, "yum": 31, "scl": 31, "rh": [31, 211], "y": [31, 32, 231, 242, 243, 256, 411, 412, 416], "devtoolset": 31, "python38": 31, "opt": [31, 36, 44, 52, 207, 219, 220, 236, 325], "bash": [31, 52, 229, 242, 486, 490], "euxo": 31, "pipefail": 31, "dir": [31, 478], "ld_library_path": 31, "lib64": 31, "py2": 31, "py3": [31, 490], "manylinux2010_x86_64": 31, "whl": [31, 320, 323], "x86_64": [31, 204, 242], "sh": [31, 35, 52, 230, 320, 478, 496], "licens": [31, 490], "dbuild_shared_lib": 31, "ON": 31, "dcmake_prefix_path": 31, "dcmake_install_prefix": 31, "boost_1_74_0": 31, "bootstrap": 31, "filesystem": [31, 314], "program_opt": 31, "regex": [31, 229], "chrono": 31, "atom": [31, 478], "date_tim": [31, 47], "b2": 31, "openssl_1_1_1h": 31, "fpic": 31, "cpp": [31, 52, 68, 88, 109, 201], "darrow_comput": 31, "darrow_with_utf8proc": 31, "off": [31, 219, 245, 450, 478], "darrow_csv": 31, "darrow_filesystem": 31, "darrow_ipc": 31, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_util": 31, "darrow_build_test": 31, "darrow_enable_timing_test": 31, "darrow_fuzz": 31, "darrow_jemalloc": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "mpi": [31, 255], "cxx": 31, "dlopen": 31, "nproc": 31, "dgrpc_instal": 31, "dgrpc_build_test": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_protobuf_provid": 31, "dgrpc_zlib_provid": 31, "dgrpc_ssl_provid": 31, "dopenssl_root_dir": 31, "dcmake_cxx_flag": 31, "fpermiss": 31, "dbuild_vineyard_test": 31, "dbuild_vineyard_python_bind": 31, "j4": 31, "dnetworkx": 31, "denable_java_sdk": 31, "dbuild_test": 31, "ubuntu": [32, 52, 204, 212, 218, 221, 320, 489, 491, 495], "04": [32, 52, 212, 218, 221, 231, 253, 320, 489, 491, 495], "intel": [32, 221, 489, 491, 495], "appl": [32, 212, 221, 465, 489, 491, 495], "silicon": [32, 221, 489, 491], "jdk": [32, 218, 221, 233, 482, 488], "wheel": [32, 212, 383, 449, 491, 494], "manylinux2014": [32, 490], "abi": 32, "wish": [32, 37, 44, 202, 207], "nightli": [32, 212, 491], "tidi": 32, "quickli": [32, 36, 205, 234, 246, 249, 250, 252, 325, 472], "insid": [32, 38, 46, 212, 229, 231, 256, 264, 314, 326, 327, 440, 471, 472, 496], "apt": [32, 320], "ipython": 32, "tensorflow": [32, 234, 235, 237, 240, 241, 245, 246, 250, 251, 313, 314, 315, 318, 319, 321, 325, 492], "tool": [32, 35, 36, 45, 52, 202, 205, 210, 215, 218, 225, 232, 234, 236, 245, 412, 414, 474, 477, 478, 479, 495], "dep": [32, 35, 49, 485, 489, 490], "fly": [32, 205, 246], "clang": [32, 35, 221, 490], "essenti": [32, 46, 47, 212, 224, 229, 234, 249, 251], "arm": [32, 52], "preliminari": 32, "yet": [32, 126, 200, 204, 222, 229, 257, 422, 425, 465, 471, 478], "calcul": [33, 219, 226, 229, 231, 256, 258, 316, 330, 384, 416], "period": [33, 478], "restor": [33, 472, 478], "persistentvolum": [33, 478], "dump": [33, 256, 292], "cat": [33, 242, 243, 478, 486], "eof": 33, "metadata": [33, 45, 46, 52, 105, 117, 179, 191, 201, 207, 209, 212, 242, 255, 327, 465, 474, 478], "1gi": 33, "accessmod": 33, "readwriteonc": 33, "storageclassnam": 33, "importantli": 33, "lost": [33, 472], "persistentvolumeclaim": [33, 472, 478], "matchlabel": 33, "request": [33, 49, 126, 200, 212, 244, 255, 284, 315, 323, 326, 328, 359, 465, 472, 478, 491], "extern": [33, 37, 45, 238, 245, 472, 478], "ccc": 33, "sub_graph": [33, 227, 246, 492, 493], "haslabel": [33, 215, 221, 227, 231, 246, 496], "simple_g": [33, 246, 488, 492], "pr_result": 33, "tc_result": 33, "add_column": [33, 246, 255, 327, 488, 492, 493], "tc": [33, 246, 492], "997255889378630": 33, "997163552113975": 33, "store_graphs_to_pvc": 33, "graphid": [33, 53, 55, 66, 91, 92, 101, 108, 472], "pvc_name": [33, 472], "schema": [33, 45, 46, 52, 53, 63, 65, 85, 126, 127, 137, 200, 201, 205, 209, 211, 219, 220, 223, 225, 226, 227, 231, 240, 241, 244, 256, 314, 315, 324, 327, 465, 474, 476, 477, 478, 479, 493, 496, 498], "oid_typ": [33, 244, 255, 256, 284, 306, 327, 472, 498], "ulong": 33, "lang": [33, 35, 46, 201, 221, 223, 226, 229, 246, 328], "eid": [33, 211, 223, 327, 478], "restore_graphs_from_pvc": 33, "anymor": 33, "nativ": [34, 44, 219, 225, 245, 249, 251, 252], "behind": [34, 240, 477, 480, 485, 486], "scene": [34, 219, 240, 322], "lower": [34, 219, 229, 231, 249, 384, 391, 404], "cost": [34, 219, 231, 245, 249, 330, 478], "ownership": 34, "cach": [34, 202, 235, 242, 248, 252, 465], "layout": [34, 248, 478], "were": [34, 37, 231, 253, 416, 478], "outperform": [34, 234, 248, 250, 251, 252], "art": [34, 234, 248, 251, 253], "voderank": 34, "average_degree_assort": 34, "degree_assort": 34, "guidelin": [35, 37, 205, 207], "promot": 35, "readabl": [35, 51, 229, 465], "qualiti": [35, 37, 250], "black": [35, 490], "enforc": 35, "rule": [35, 44, 52, 207, 219, 231, 238, 248, 317, 323, 327, 364, 474], "cpplint": 35, "flake8": 35, "fmt": 35, "lint": [35, 37], "makefil": 35, "graphscope_clformat": 35, "graphscope_cpplint": 35, "dev": [35, 49, 210, 217, 242, 489, 490], "pushd": 35, "isort": 35, "diff": 35, "popd": 35, "interactive_engin": [35, 36, 52, 220, 230], "check_format": 35, "files_to_format": 35, "aosp": 35, "toolchain": [36, 236], "devcontain": 36, "json": [36, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 218, 220, 472, 474, 478, 479], "setup": [36, 37, 200, 212, 327, 472, 490], "visual": [36, 37, 205, 245], "studio": 36, "collabor": [36, 245, 477], "stabl": [36, 256, 327, 474, 478, 495], "haven": [36, 204, 231], "navig": [36, 477, 485], "icon": 36, "bottom": [36, 375], "corner": 36, "window": [36, 231, 495], "reopen": 36, "marketplac": 36, "prompt": [36, 51, 223, 230], "shift": [36, 224, 229, 231, 330, 430], "ctrl": 36, "made": [36, 37, 44, 202, 218, 238, 253, 314, 317, 323, 330, 425, 477], "rebuild": 36, "subcommand": [36, 236], "assembli": [36, 220], "learning_engin": 36, "graphlearn": [36, 38, 235, 237, 240, 241, 242, 246, 313, 314, 315, 319, 320, 325, 326, 329, 472, 486, 492, 497], "compos": [36, 38, 52, 203, 226, 235, 238, 246, 248, 252], "alon": [36, 219, 227, 485], "circul": [36, 368], "edit": [36, 37, 223, 411, 448, 485], "entrypoint": [36, 485, 492], "plai": [36, 219, 233, 254, 324, 329, 482], "thank": [37, 205, 215, 223, 245], "interest": [37, 231, 234, 248, 478], "focus": [37, 226, 231, 245, 251, 253, 319, 457, 478], "eager": [37, 256, 257, 306, 308, 327, 472], "contributor": [37, 458], "welcom": [37, 201, 202], "engag": [37, 245, 246], "good": [37, 205], "particip": [37, 44], "join": [37, 44, 224, 226, 231, 242, 315, 325, 366, 369, 377, 384, 393, 394, 407, 409, 412, 413, 414, 415, 416, 424, 425, 465, 477], "ask": [37, 217], "question": [37, 217, 225, 231, 491], "ve": [37, 45, 202, 207, 218, 222, 230, 245], "hasn": [37, 231], "confirm": 37, "concis": [37, 226, 227, 249, 328], "descript": [37, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 207, 209, 218, 219, 224, 226, 229, 238, 242, 244, 314, 317, 322, 323, 327, 422, 430, 478], "relev": [37, 44, 45, 320, 359, 465, 476], "reproduc": [37, 465], "yourself": 37, "why": [37, 212, 231, 256], "saw": 37, "incomplet": 37, "inaccur": 37, "knowledg": [37, 215, 223, 235, 250, 321], "submiss": 37, "fact": [37, 219, 223, 226, 422, 425], "page": [37, 45, 202, 217, 247, 256, 259, 261, 375, 390, 454, 494], "button": [37, 223], "tbf": [37, 216, 253, 473, 484, 487], "isn": [37, 209, 227, 318], "someon": 37, "approach": [37, 205, 223, 227, 234, 235, 245, 247, 249, 250, 318, 394, 407, 462, 477], "spend": 37, "secret": [37, 244, 472, 489, 498], "accident": 37, "hook": 37, "titl": [37, 45, 231, 241, 246], "grammar": 37, "spell": 37, "500": [37, 53, 55, 56, 91, 92, 101, 118, 127, 129, 130, 165, 166, 175, 192, 201, 384], "word": [37, 207, 231, 241, 246, 249, 250, 325, 327, 465], "42": [37, 231, 253, 315, 316, 318, 388, 390, 400, 458], "ticket": 37, "chines": 37, "everyon": 37, "beginn": [37, 249], "patch": 37, "rest": [37, 42, 48, 49, 52, 127, 128, 129, 130, 165, 166, 175, 192, 210, 465, 478], "attain": 37, "brief": [37, 214], "valid": [37, 52, 219, 240, 241, 250, 263, 313, 360, 384, 406, 412, 461, 472, 474], "typo": 37, "feat": 37, "inv": [37, 319, 325, 496], "refactor": 37, "gulp": 37, "broccoli": 37, "npm": [37, 478], "ci": 37, "perf": 37, "neither": 37, "nor": 37, "chore": 37, "routin": [37, 330, 465], "insight": [37, 215, 248, 250, 485], "feedback": [37, 215], "discourag": 37, "rebas": 37, "workflow": [37, 52, 215, 245, 250, 251, 255], "upstream": [37, 319], "leas": 37, "ping": [37, 488], "await": 37, "unfamiliar": 37, "acronym": 37, "glossari": [37, 210, 217, 458], "approv": 37, "date": [37, 47, 224, 231, 476, 477, 478], "todo": [37, 48, 101, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 224, 226, 242, 243, 323], "dongz": 37, "potenti": [37, 203, 205, 235, 245, 477], "concern": [37, 245, 252, 477], "reach": [37, 212, 227, 231, 249, 319, 324, 327, 330, 407, 422, 425, 477], "action": [37, 202, 209], "realiti": [37, 319], "uncommon": 37, "infrastructur": 37, "vital": 37, "inspect": [37, 38, 244, 472, 478], "failur": [37, 252], "stream": [38, 212, 218, 229, 230, 231, 235, 319, 324, 327], "stdout": 38, "log_level": [38, 44, 52, 242, 312], "permiss": [38, 47, 212, 264, 491], "consol": [38, 205, 218, 220, 223, 232, 234, 244, 249, 328, 478, 494], "frontend": [38, 39, 48, 52, 218, 220, 221, 222, 230, 478, 486], "event": [38, 384], "involvedobject": 38, "warn": [38, 465], "pinpoint": 38, "exec": [38, 478, 486], "diagnost": 38, "forward": [38, 205, 235, 237, 238, 240, 241, 246, 250, 319, 478, 492], "browser": [38, 231], "explain": [38, 231, 314, 472, 477, 496], "leverag": [39, 126, 225, 227, 233, 234, 247, 249, 260, 457, 474, 478, 482], "opentelemetri": 39, "javaag": 39, "agent": 39, "protocol": [39, 222, 225, 244, 252, 472], "java_tool_opt": 39, "TO": 39, "otel_service_nam": 39, "compris": [41, 45, 224, 227, 241, 245, 318], "busi": [41, 219, 231, 235, 244, 245, 246, 252], "e2": [41, 444], "coupl": [41, 247, 252, 445, 474], "entri": [42, 209, 219, 229, 231, 238, 240, 329, 330, 377, 394, 396, 397, 422, 424, 425, 443, 485], "swagger": 42, "shield": 42, "understand": [42, 45, 46, 49, 231, 238, 249, 313, 319, 327, 477], "straightforward": [44, 221, 246], "gs_interact": [44, 45, 51, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 207, 209], "tailor": [44, 201], "align": [44, 45, 46, 47, 63, 137, 202, 207, 219, 229, 238, 249, 313, 316, 317, 416, 477], "engine_config": [44, 201, 472], "unconfigur": 44, "glimps": 44, "what": [44, 202, 207, 212, 218, 231, 232, 249, 324, 411, 465, 471, 477], "compute_engin": [44, 52], "thread_num_per_work": [44, 52], "planner": [44, 52, 207], "is_on": [44, 52], "rbo": [44, 52, 219], "filtermatchrul": [44, 52], "filterintojoinrul": [44, 52], "notexisttoantijoinrul": 44, "query_timeout": [44, 52], "20000": 44, "timeout": [44, 212, 220, 221, 478], "millisecond": [44, 47, 224, 229, 253, 476], "default_listen_address": [44, 52], "localhost": [44, 52, 220, 222, 230, 242, 244, 472, 498], "bolt_connector": [44, 52, 205], "cypher": [44, 45, 48, 49, 52, 68, 88, 101, 109, 126, 175, 200, 201, 207, 208, 210, 218, 219, 220, 221, 223, 225, 226, 245, 246, 247, 251, 252, 328, 472], "7687": [44, 48, 52, 202, 205, 218, 220, 222, 223], "gremlin_connector": [44, 52, 205], "8182": [44, 48, 52, 218, 220, 230, 478], "http_servic": [44, 52], "admin_port": [44, 52], "7777": [44, 48, 52], "query_port": [44, 52, 201], "10000": [44, 48, 52, 462], "hierarchi": [44, 46], "propertynam": [44, 60, 70, 89, 478], "databas": [44, 45, 52, 203, 205, 208, 212, 219, 224, 225, 226, 229, 231, 245, 247, 249, 251, 253, 478, 488], "debug": [44, 212, 242, 314, 319, 472, 478, 486], "default_graph": [44, 52], "benefit": [44, 226, 230, 244, 248, 477], "throughput": [44, 48, 205, 210, 219, 245, 251, 252, 478], "claus": [44, 205, 225, 226], "calcit": [44, 218, 226], "notmatchtoantijoinrul": [44, 52], "transform": [44, 51, 219, 226, 231, 255, 267, 280, 457, 465, 466, 470, 476], "anti": [44, 224, 226, 245, 249, 252], "bind": [44, 256, 477], "admin": [44, 48, 49, 52, 201, 205, 208, 327, 478], "submit": [44, 101, 175, 201, 202, 205, 206, 219, 222, 223, 229, 230, 231, 246, 249, 314, 315, 328, 474, 478, 492], "movi": [45, 207, 247, 315], "interactive_hom": [45, 204], "destroi": [45, 209], "csv": [45, 48, 210, 215, 218, 223, 244, 327, 465, 468, 476, 478, 479, 492, 493, 498], "volum": [45, 48, 202, 209, 212, 218, 226, 230, 242, 388, 389, 390, 400, 409, 454, 472, 477], "crucial": [45, 47, 51, 52, 201, 245], "conclud": [45, 313], "reflect": [45, 229, 477, 485], "v0": [45, 48, 253, 320, 468], "vertex_typ": [45, 47, 141, 160, 201], "type_nam": [45, 46, 47, 131, 135, 138, 145, 154, 158, 164, 196, 198, 201], "property_nam": [45, 46, 47, 134, 144, 163, 201, 231, 257, 258, 471], "property_typ": [45, 47, 134, 144, 163, 201], "primitive_typ": [45, 47, 157, 172, 201], "dt_signed_int64": [45, 47, 83, 97, 201], "dt_signed_int32": [45, 47, 83, 97], "taglin": 45, "long_text": [45, 47, 169, 185, 201], "primary_kei": [45, 47, 135, 145, 164, 201, 478], "born": 45, "acted_in": 45, "vertex_type_pair_rel": [45, 47, 131, 138, 158, 201], "source_vertex": [45, 46, 47, 132, 152, 199, 201], "destination_vertex": [45, 46, 47, 132, 152, 199, 201], "many_to_mani": [45, 47, 58, 201], "review": [45, 245, 256, 330, 394, 412], "wrote": 45, "dt_unsigned_int32": [45, 47, 83, 97], "dt_unsigned_int64": [45, 47, 83, 97], "dt_bool": [45, 47, 83, 97], "dt_float": [45, 47, 83, 97], "dt_doubl": [45, 47, 83, 97, 201], "comprehens": [45, 126, 200, 201, 205, 207, 209, 245, 251, 253, 254], "administr": [45, 201, 202, 208, 210, 442], "loading_config": [45, 46, 176, 201], "data_sourc": [45, 46, 177, 201], "odp": [45, 104, 210, 314], "import_opt": [45, 46, 177, 201], "append": [45, 211, 231, 240, 241, 242, 243, 246, 258, 313, 324, 325, 396, 459, 492, 497], "overwrit": [45, 46, 103, 209, 472, 478], "delimit": [45, 46, 218, 327, 467, 479, 493], "edge_map": [45, 46, 148, 176, 201], "type_triplet": [45, 46, 148, 201], "column_map": [45, 46, 137, 148, 196, 201], "consult": [45, 205], "graph_algo": 45, "flex": [45, 52, 126, 205, 210, 485], "delv": [46, 201], "deeper": 46, "thorough": 46, "col_nam": 46, "disregard": 46, "examin": [46, 226, 246], "modern_import_ful": 46, "showcas": 46, "dissect": 46, "x_csr_param": [46, 47, 132, 135, 145, 164, 177], "build_csr_in_mem": [46, 180], "use_mmap_vector": [46, 180], "header_row": [46, 218, 327, 479], "quot": 46, "quote_char": 46, "double_quot": 46, "escape_char": 46, "block_siz": 46, "4mb": 46, "person_knows_person": [46, 478], "source_vertex_map": [46, 148, 201], "destination_vertex_map": [46, 148, 201], "dst_id": [46, 314, 315, 316, 318, 319, 325, 329], "person_created_softwar": 46, "dd_graph": 46, "your_proj_nam": 46, "table_nam": 46, "partition_col_nam": 46, "partition_nam": 46, "src_user_id": 46, "dst_user_id": 46, "mandatori": [46, 47, 246, 314], "ye": [46, 215, 465], "No": [46, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 201, 212, 229, 465], "header": [46, 218, 327, 477, 478], "escap": 46, "batch_siz": [46, 238, 240, 242, 243, 313, 317, 318, 319, 322, 325, 481, 497], "mmap_vector": 46, "mmap_arrai": 46, "triplet": [46, 47, 227], "outlin": [46, 220, 224], "seamlessli": [46, 126, 200, 202, 215, 218, 225, 232, 234, 245, 251, 252], "encompass": [47, 222, 226, 230, 241], "friendship": 47, "peopl": [47, 219, 223, 231, 465, 478], "since_d": 47, "explan": [47, 201, 205, 256, 317], "terminologi": [47, 224], "delin": 47, "plan": [47, 52, 101, 175, 205, 219, 224, 245, 247, 248, 249, 260, 478, 486], "var_char": [47, 185, 193], "fixed_char": [47, 155, 156], "character": [47, 317], "exclus": [47, 51, 224], "symbol": 47, "skill": 47, "profici": [47, 231], "one_to_on": [47, 58], "one_to_mani": [47, 58, 201], "many_to_on": [47, 58], "max_vertex_num": [47, 136], "mmap": 47, "48": [47, 215, 253, 315, 316, 318, 417, 418, 464], "edge_storage_strategi": [47, 133], "only_in": [47, 59], "only_out": [47, 59], "both_out_in": [47, 59], "pertain": [47, 218], "categor": [47, 205, 238], "subtyp": 47, "length": [47, 126, 211, 215, 224, 229, 231, 244, 249, 256, 317, 330, 369, 371, 376, 398, 419, 423, 429, 451, 460, 465, 498], "unlimit": 47, "text": [47, 101, 175, 250, 258, 366], "char": [47, 155, 185, 324, 327, 477], "fixed_length": 47, "desir": [47, 227, 327, 384, 406, 426, 428, 429], "restrict": 47, "max_length": [47, 194], "uint32": [47, 224], "situat": [47, 229, 231, 234, 314, 315, 478], "df_yyyy_mm_dd": 47, "iso": 47, "fomat": 47, "2019": [47, 458], "01": [47, 231, 237, 241, 243, 246, 256, 314, 330, 389, 492], "date_format": 47, "tf_hh_mm_ss_sss": 47, "00": [47, 231], "000": [47, 218, 231, 253], "time_format": 47, "tzf_utc": 47, "tzf_offset": 47, "time_zone_format": 47, "dtf_yyyy_mm_dd_hh_mm_ss_sss": 47, "date_time_format": 47, "date32": [47, 72, 113, 146, 187], "int32": [47, 224, 237, 241, 246, 314, 316, 324, 325, 476, 492], "1970": 47, "time32": 47, "midnight": 47, "timestamp": [47, 113, 114, 187, 188, 476, 478], "int64": [47, 224, 244, 258, 284, 306, 314, 316, 317, 322, 324, 325, 327, 472, 476, 498], "000000": 47, "zone": [47, 224], "signifi": [47, 349, 350], "integ": [47, 62, 77, 80, 82, 84, 85, 87, 88, 89, 90, 94, 106, 107, 120, 124, 125, 224, 229, 330, 365, 368, 369, 370, 371, 372, 374, 376, 377, 379, 380, 383, 384, 387, 388, 389, 390, 392, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 430, 443, 457, 458, 459, 460, 462, 465, 476, 478], "januari": 47, "timezon": 47, "albeit": 47, "previous": [47, 207, 231, 264, 401, 402, 403, 476, 477], "mention": [47, 229, 231, 476, 477, 486], "component_typ": 47, "overflow": 47, "truncat": [47, 450, 451, 452, 457], "bolt": [48, 202, 205, 220, 222, 223, 249], "grep": [48, 218], "awk": [48, 218], "192": 48, "168": [48, 253], "pvc": [48, 218, 472, 478], "higher": [48, 219, 251, 330, 340, 404, 478], "nf": [48, 212, 324, 491], "dataload": [48, 53, 54, 126, 127, 128, 200, 201, 242, 243], "pv": [48, 212, 218, 472, 478, 491], "vim": 48, "someth": [48, 221, 465], "claim": [48, 218, 447, 477, 478], "emptydir": [48, 242], "existingclaim": 48, "replicacount": [48, 218, 478], "num": [48, 211, 220, 230, 231, 326, 477], "gremlinport": [48, 107, 218], "hiactor": [48, 52, 245], "hiactorworkernum": 48, "hiactortimeout": 48, "240000": 48, "craft": [49, 205, 207], "listgraph": [49, 126], "graphmanag": 49, "categori": [49, 224, 229, 235, 237, 238, 246, 250, 325], "getgraphstatist": 49, "creategraph": [49, 126], "deletegraph": [49, 126], "getgraphschema": 49, "getgraphmeta": 49, "importgraph": 49, "createprocedur": [49, 126], "proceduremanag": 49, "listallprocedur": 49, "getprocedur": [49, 126], "updateprocedur": [49, 126], "deleteprocedur": [49, 126], "startservic": [49, 126], "servicemanag": 49, "restartservic": [49, 126], "stopservic": [49, 126], "servicestatu": [49, 56, 126, 130, 200], "systemmetr": 49, "nodemetr": 49, "getjobbyid": [49, 126], "jobmanag": 49, "getalljob": 49, "canceljobbyid": 49, "adminservic": 49, "setuptool": 49, "intric": [51, 201, 231], "inspir": [51, 260, 465], "neo4j": [51, 126, 202, 203, 205, 207, 217, 218, 220, 221, 222, 223, 224, 247, 252, 253, 328, 476], "empow": [51, 225, 232, 249], "skeleton": [51, 433, 436, 450, 451], "param_nam": [51, 205], "clariti": [51, 224], "mandat": 51, "hous": [51, 52, 245, 439, 440], "personid": 51, "draft": 51, "query1": 51, "firstnam": [51, 231, 244, 476, 493, 498], "lastnam": [51, 231, 244, 476, 493, 498], "intrins": 51, "absenc": 51, "imper": [51, 229, 249], "subsequ": [51, 52, 202, 207, 218, 219, 220, 226, 230, 256, 314, 315], "1l": [51, 207, 229], "conclus": [51, 231], "effortlessli": [51, 246], "streamlin": [51, 226, 229], "debian": 52, "redhat": 52, "22": [52, 231, 253, 315, 316, 318, 327, 458, 476], "x86": 52, "seastar": 52, "incompat": [52, 416, 477], "gen_code_from_plan": 52, "physic": [52, 205, 218, 219, 245, 256, 330, 388, 389, 390, 412, 476], "graph_db": 52, "graphdb": 52, "hqps_db": 52, "http_server": 52, "httpd": 52, "dockerfil": [52, 234, 320], "definit": [52, 205, 229, 245, 330, 411, 412, 414], "openapi": 52, "openapi_interact": 52, "immutable_graph": 52, "rt_mutable_graph": 52, "mutable_csr": [52, 85, 106, 180, 201], "third_parti": 52, "parti": [52, 245, 445], "gaia": [52, 245, 496], "ir": [52, 205, 218, 219, 220, 245, 247], "submodul": [52, 320, 323, 477], "pexperiment": 52, "referenc": [52, 257], "accuraci": [52, 242, 243, 250], "establish": [52, 202, 215, 478], "workspac": [52, 201, 242], "depth": [52, 202, 220, 224, 246, 313, 325, 330, 497], "github_workspac": 52, "flex_data_dir": 52, "tmp_interactive_workspac": 52, "interactive_workspac": 52, "schema_fil": 52, "bulk_load_fil": 52, "bulk_load": [52, 201], "cp": [52, 218, 220, 462, 477], "glog_v": 52, "akin": 52, "temp_workspac": 52, "graph_meta": 52, "indices_lock": 52, "job_meta": 52, "plugin_meta": 52, "plugins_lock": 52, "running_graph": 52, "hqps_admin_test": 52, "hqp": 52, "engine_config_test": 52, "mcsr": 52, "metadata_stor": 52, "meta": [52, 202, 220, 235, 244, 255, 316, 317, 476, 478], "reader": [52, 324], "uri": [52, 53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 222, 244, 327, 476, 498], "interv": [52, 224, 384, 416, 472], "1000": [52, 229, 256, 315, 330, 462, 465, 478], "statist": [52, 53, 127, 201, 219, 226, 231, 316], "86400000": 52, "40000": 52, "gremlin_script_language_nam": 52, "antlr_gremlin_calcit": [52, 218], "interactive_endpoint": [53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201], "post": [53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200, 201, 212, 231, 244, 319, 384, 498], "graph_id": [53, 54, 55, 91, 92, 101, 126, 127, 128, 129, 140, 165, 166, 175, 182, 200, 201, 472], "jobrespons": [53, 126, 127, 200], "schemamap": [53, 85, 126, 127, 159, 200], "apicli": [53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 472], "apiexcept": [53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192], "defaultcli": [53, 54, 55, 56, 91, 92, 101, 118], "getdefaultapicli": [53, 54, 55, 56, 91, 92, 101, 118], "setbasepath": [53, 54, 55, 56, 91, 92, 101, 118], "apiinst": [53, 54, 55, 56, 91, 92, 101, 118], "graphid_exampl": [53, 55, 91, 92, 101], "println": [53, 54, 55, 56, 91, 92, 101, 118, 126, 478], "catch": [53, 54, 55, 56, 91, 92, 101, 118, 478], "err": [53, 54, 55, 56, 91, 92, 101, 118, 343], "getcod": [53, 54, 55, 56, 91, 92, 101, 118], "getresponsebodi": [53, 54, 55, 56, 91, 92, 101, 118], "getresponsehead": [53, 54, 55, 56, 91, 92, 101, 118], "printstacktrac": [53, 54, 55, 56, 91, 92, 101, 118], "200": [53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 201, 231, 313, 471, 481, 497], "creategraphrespons": [53, 126, 127, 200], "creategraphrequest": [53, 126, 127, 200], "400": [53, 55, 91, 92, 127, 129, 165, 166, 201, 471], "badrequest": [53, 127], "Not": [53, 54, 55, 56, 91, 92, 127, 128, 129, 130, 165, 166, 201, 205, 226, 465, 478], "404": [53, 55, 91, 92, 127, 129, 165, 166, 201], "getgraphrespons": [53, 107, 126, 127, 181, 200], "getgraphstatisticsrespons": [53, 127], "503": [53, 127], "unavail": [53, 127], "getgraphschemarespons": [53, 85, 126, 127, 159, 200], "job_id": [54, 126, 128, 167, 200, 201], "jobid": [54, 93], "jobid_exampl": 54, "jobstatu": [54, 126, 128, 200], "procedure_id": [55, 126, 129, 143, 200, 201], "createprocedurerespons": [55, 126, 129, 200], "createprocedurerequest": [55, 65, 126, 129, 139, 200], "bad": [55, 91, 92, 129, 165, 166], "procedureid": [55, 69], "procedureid_exampl": 55, "getprocedurerespons": [55, 85, 126, 129, 159, 200], "updateprocedurerequest": [55, 126, 129, 200], "startservicerequest": [56, 126, 130, 200], "vertextypepairrel": [57, 64, 84], "baseedgetypevertextypepairrelationsinn": [57, 64, 84, 126, 131, 138, 158, 200], "sourcevertex": [58, 78, 125], "destinationvertex": [58, 78, 125], "xcsrparam": [58, 61, 71, 90, 103], "baseedgetypevertextypepairrelationsinnerxcsrparam": [58, 126, 132, 200], "edgestoragestrategi": 59, "sortoncompact": 59, "boolean": [59, 88, 106, 109, 224, 226, 229, 244, 256, 258, 315, 319, 330, 349, 350, 387, 389, 392, 423, 463, 476], "oemut": 59, "iemut": 59, "propertytyp": [60, 70, 89], "gsdatatyp": [60, 70, 89, 96, 115, 126, 134, 144, 163, 171, 189, 200], "primarykei": [61, 71, 90], "basevertextypexcsrparam": [61, 71, 90, 126, 135, 145, 164, 200], "maxvertexnum": 62, "edgemappingsourcevertexmappingsinnercolumn": [63, 75, 76, 126, 137, 149, 150, 200], "createpropertymeta": [64, 71, 126, 138, 145, 200], "storedprocedur": [65, 85], "creategraphschemarequest": [65, 126, 139, 200], "vertextyp": [67, 86], "createvertextyp": [67, 126, 141, 200], "edgetyp": [67, 86, 467], "createedgetyp": [67, 126, 141, 200], "srclabel": [73, 79, 91, 478], "dstlabel": [73, 79, 91, 478], "edgelabel": [73, 79, 91, 229, 277], "srcprimarykeyvalu": [73, 79, 91], "dstprimarykeyvalu": [73, 79, 91], "typetriplet": 74, "edgemappingtypetriplet": [74, 126, 148, 200], "sourcevertexmap": 74, "edgemappingsourcevertexmappingsinn": [74, 126, 148, 200], "destinationvertexmap": 74, "edgemappingdestinationvertexmappingsinn": [74, 126, 148, 200], "columnmap": [74, 122, 126, 148, 196, 200], "typeid": [80, 84, 90, 124], "vertextypepairstatist": [80, 154], "_char": [81, 111], "fixedcharchar": [81, 111, 126, 155, 185, 200], "fixedchar": [82, 126, 200], "primitivetyp": [83, 126, 200], "stringtypestr": [83, 110, 126, 157, 184, 200], "tempor": [83, 112, 157, 186, 224, 229], "temporaltypetempor": [83, 112, 157, 186], "signed_int32": [83, 97], "unsigned_int32": [83, 97], "signed_int64": [83, 97], "unsigned_int64": [83, 97], "dt_string": [83, 97], "getpropertymeta": [84, 90, 126, 158, 164, 200], "storetyp": 85, "creationtim": [85, 88], "dataupdatetim": 85, "dataimportconfig": 85, "getvertextyp": [86, 126, 160, 200], "getedgetyp": [86, 126, 160, 200], "totalvertexcount": 87, "totaledgecount": 87, "vertextypestatist": 87, "vertexstatist": [87, 161], "edgetypestatist": 87, "edgestatist": [87, 161], "boundgraph": 88, "updatetim": 88, "propertyid": 89, "edgerequest": [91, 126, 165, 200], "409": [91, 92, 165, 166, 201], "exit": [91, 92, 165, 166, 230, 242, 256, 496], "edgedata": [91, 126, 165, 200], "paramt": [91, 92, 165, 166], "vertexrequest": [92, 126, 166, 200], "primarykeyvalu": [92, 123], "label_exampl": [92, 166], "null": [92, 101, 224, 229, 330, 347, 363, 364, 371, 378, 430, 460, 465], "vertexdata": [92, 126, 166, 200], "value1": [92, 166, 218, 244, 498], "param2": [92, 166], "value2": [92, 166, 218], "starttim": [94, 107], "endtim": 94, "querynam": 100, "typedvalu": [100, 126, 174, 200], "byte": [101, 224, 256, 264, 324], "xinteractiverequestformat": 101, "bodi": [101, 175, 201, 319, 323, 431], "typeinfo": [101, 175], "proto": [101, 255, 275, 300], "enum": [101, 255], "plain": [101, 175, 250], "loadingconfig": 102, "schemamappingloadingconfig": [102, 126, 176, 200], "schemamappingloadingconfigxcsrparam": [103, 177], "datasourc": [103, 244, 498], "schemamappingloadingconfigdatasourc": [103, 177], "importopt": 103, "schemamappingloadingconfigformat": [103, 126, 177, 200], "buildcsrinmem": 106, "usemmapvector": 106, "boltport": 107, "hqpsport": 107, "longtext": [111, 126, 200], "varchar": [111, 126, 200], "varcharvarchar": [111, 119, 126, 185, 193, 200], "uploadfilerespons": [118, 192], "filestorag": [118, 192], "multipart": [118, 192], "maxlength": 120, "propertyarrai": [123, 126, 197, 200], "gradl": 126, "ossrh": 126, "gettingstart": [126, 205], "neo4jsess": 126, "getneo4jsess": [126, 200], "tostr": [126, 255, 479], "adminservicegraphmanagementapi": [126, 200], "createdataloadingjob": 126, "getgraph": 126, "getschema": 126, "adminservicejobmanagementapi": [126, 200], "deletejobbyid": 126, "listjob": 126, "adminserviceproceduremanagementapi": [126, 200], "listprocedur": 126, "adminserviceservicemanagementapi": [126, 200], "getservicestatu": 126, "graphserviceedgemanagementapi": [126, 200], "addedg": 126, "deleteedg": 126, "getedg": 126, "updateedg": 126, "graphservicevertexmanagementapi": [126, 200], "addvertex": 126, "deletevertex": 126, "getvertex": [126, 255], "updatevertex": 126, "queryserviceapi": [126, 200], "proccal": 126, "baseedgetyp": [126, 200], "basepropertymeta": [126, 200], "basevertextyp": [126, 200], "collectiveresult": [126, 200], "keyvalu": [126, 200], "queryrequest": [126, 200], "storedproceduremeta": [126, 200], "stringtyp": [126, 200], "temporaltyp": [126, 200], "timestamptyp": [126, 200], "authent": [126, 200, 220, 222, 251, 478], "schema_map": [127, 176], "job_respons": [127, 167], "pprint": [127, 128, 129, 130, 165, 166, 175, 192], "api_cli": [127, 128, 129, 130, 165, 166, 175, 192, 472], "api_inst": [127, 128, 129, 130, 165, 166, 175, 192], "graph_id_exampl": [127, 129, 165, 166, 175], "api_respons": [127, 128, 129, 130, 165, 166, 175, 192], "back": [127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 231, 234, 240, 323, 477, 485], "create_graph_request": [127, 139], "create_graph_respons": [127, 140], "get_graph_respons": [127, 159], "get_graph_statistics_respons": [127, 161], "get_graph_schema_respons": [127, 160], "job_id_exampl": 128, "job_statu": [128, 168], "create_procedure_request": [129, 142], "create_procedure_respons": [129, 143], "procedure_id_exampl": 129, "get_procedure_respons": [129, 162], "update_procedure_request": [129, 190], "service_statu": [130, 181], "start_service_request": [130, 182], "base_edge_typ": 131, "base_edge_type_inst": 131, "from_json": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199], "to_json": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199], "base_edge_type_dict": 131, "to_dict": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199], "base_edge_type_from_dict": 131, "from_dict": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199], "base_edge_type_vertex_type_pair_relations_inn": 132, "base_edge_type_vertex_type_pair_relations_inner_inst": 132, "base_edge_type_vertex_type_pair_relations_inner_dict": 132, "base_edge_type_vertex_type_pair_relations_inner_from_dict": 132, "sort_on_compact": 133, "oe_mut": 133, "ie_mut": 133, "base_edge_type_vertex_type_pair_relations_inner_x_csr_param": 133, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_inst": 133, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_dict": 133, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_from_dict": 133, "base_property_meta": 134, "base_property_meta_inst": 134, "base_property_meta_dict": 134, "base_property_meta_from_dict": 134, "base_vertex_typ": 135, "base_vertex_type_inst": 135, "base_vertex_type_dict": 135, "base_vertex_type_from_dict": 135, "base_vertex_type_x_csr_param": 136, "base_vertex_type_x_csr_params_inst": 136, "base_vertex_type_x_csr_params_dict": 136, "base_vertex_type_x_csr_params_from_dict": 136, "var_properti": [137, 149, 150], "column_mapping_inst": 137, "column_mapping_dict": 137, "column_mapping_from_dict": 137, "create_edge_typ": 138, "create_edge_type_inst": 138, "create_edge_type_dict": 138, "create_edge_type_from_dict": 138, "stored_procedur": [139, 159, 201, 207, 209], "var_schema": [139, 159], "create_graph_request_inst": 139, "create_graph_request_dict": 139, "create_graph_request_from_dict": 139, "create_graph_response_inst": 140, "create_graph_response_dict": 140, "create_graph_response_from_dict": 140, "create_graph_schema_request": 141, "create_graph_schema_request_inst": 141, "create_graph_schema_request_dict": 141, "create_graph_schema_request_from_dict": 141, "create_procedure_request_inst": 142, "create_procedure_request_dict": 142, "create_procedure_request_from_dict": 142, "create_procedure_response_inst": 143, "create_procedure_response_dict": 143, "create_procedure_response_from_dict": 143, "create_property_meta": 144, "create_property_meta_inst": 144, "create_property_meta_dict": 144, "create_property_meta_from_dict": 144, "create_vertex_typ": 145, "create_vertex_type_inst": 145, "create_vertex_type_dict": 145, "create_vertex_type_from_dict": 145, "date_typ": 146, "date_type_inst": 146, "date_type_dict": 146, "date_type_from_dict": 146, "src_label": [147, 153, 165, 218, 244, 327, 468, 472, 478, 479, 492, 493], "dst_label": [147, 153, 165, 218, 244, 327, 468, 472, 478, 479, 492, 493], "src_primary_key_valu": [147, 153, 165], "dst_primary_key_valu": [147, 153, 165], "modelproperti": [147, 153, 173, 195, 200], "edge_data": [147, 165, 290, 480], "edge_data_inst": 147, "edge_data_dict": 147, "edge_data_from_dict": 147, "edge_mapping_inst": 148, "edge_mapping_dict": 148, "edge_mapping_from_dict": 148, "edge_mapping_destination_vertex_mappings_inn": 149, "edge_mapping_destination_vertex_mappings_inner_inst": 149, "edge_mapping_destination_vertex_mappings_inner_dict": 149, "edge_mapping_destination_vertex_mappings_inner_from_dict": 149, "edge_mapping_source_vertex_mappings_inn": 150, "edge_mapping_source_vertex_mappings_inner_inst": 150, "edge_mapping_source_vertex_mappings_inner_dict": 150, "edge_mapping_source_vertex_mappings_inner_from_dict": 150, "edge_mapping_source_vertex_mappings_inner_column": 151, "edge_mapping_source_vertex_mappings_inner_column_inst": 151, "edge_mapping_source_vertex_mappings_inner_column_dict": 151, "edge_mapping_source_vertex_mappings_inner_column_from_dict": 151, "edge_mapping_type_triplet": 152, "edge_mapping_type_triplet_inst": 152, "edge_mapping_type_triplet_dict": 152, "edge_mapping_type_triplet_from_dict": 152, "edge_request": [153, 165], "edge_request_inst": 153, "edge_request_dict": 153, "edge_request_from_dict": 153, "type_id": [154, 158, 164, 198, 201], "vertex_type_pair_statist": [154, 199, 201], "edge_statist": 154, "edge_statistics_inst": 154, "edge_statistics_dict": 154, "edge_statistics_from_dict": 154, "fixed_char_inst": 155, "fixed_char_dict": 155, "fixed_char_from_dict": 155, "fixed_char_char": 156, "fixed_char_char_inst": 156, "fixed_char_char_dict": 156, "fixed_char_char_from_dict": 156, "gs_data_typ": 157, "gs_data_type_inst": 157, "gs_data_type_dict": 157, "gs_data_type_from_dict": 157, "get_edge_typ": 158, "get_edge_type_inst": 158, "get_edge_type_dict": 158, "get_edge_type_from_dict": 158, "store_typ": [159, 201], "creation_tim": [159, 162, 201], "data_update_tim": [159, 201], "data_import_config": [159, 201], "get_graph_response_inst": 159, "get_graph_response_dict": 159, "get_graph_response_from_dict": 159, "get_graph_schema_response_inst": 160, "get_graph_schema_response_dict": 160, "get_graph_schema_response_from_dict": 160, "total_vertex_count": [161, 201], "total_edge_count": [161, 201], "vertex_type_statist": [161, 201], "edge_type_statist": [161, 201], "get_graph_statistics_response_inst": 161, "get_graph_statistics_response_dict": 161, "get_graph_statistics_response_from_dict": 161, "bound_graph": [162, 201], "update_tim": 162, "get_procedure_response_inst": 162, "get_procedure_response_dict": 162, "get_procedure_response_from_dict": 162, "property_id": [163, 201, 258], "get_property_meta": 163, "get_property_meta_inst": 163, "get_property_meta_dict": 163, "get_property_meta_from_dict": 163, "get_vertex_typ": 164, "get_vertex_type_inst": 164, "get_vertex_type_dict": 164, "get_vertex_type_from_dict": 164, "src_pk_name": 165, "src_pk_valu": 165, "dst_pk_name": 165, "dst_pk_valu": 165, "vertex_request": [166, 197], "primimary_key_valu": 166, "bob": [166, 478], "primary_key_valu": [166, 197], "cindi": 166, "job_response_inst": 167, "job_response_dict": 167, "job_response_from_dict": 167, "start_tim": [168, 181, 201], "end_tim": 168, "job_status_inst": 168, "job_status_dict": 168, "job_status_from_dict": 168, "long_text_inst": 169, "long_text_dict": 169, "long_text_from_dict": 169, "model_properti": 170, "model_property_inst": 170, "model_property_dict": 170, "model_property_from_dict": 170, "parameter_inst": 171, "parameter_dict": 171, "parameter_from_dict": 171, "primitive_type_inst": 172, "primitive_type_dict": 172, "primitive_type_from_dict": 172, "property_arrai": 173, "property_array_inst": 173, "property_array_dict": 173, "property_array_from_dict": 173, "query_nam": 174, "query_request": 174, "query_request_inst": 174, "query_request_dict": 174, "query_request_from_dict": 174, "bytearrai": [175, 192], "x_interactive_request_format": 175, "x_interactive_request_format_exampl": 175, "schema_mapping_inst": 176, "schema_mapping_dict": 176, "schema_mapping_from_dict": 176, "schema_mapping_loading_config": 177, "schema_mapping_loading_config_inst": 177, "schema_mapping_loading_config_dict": 177, "schema_mapping_loading_config_from_dict": 177, "schema_mapping_loading_config_data_sourc": 178, "schema_mapping_loading_config_data_source_inst": 178, "schema_mapping_loading_config_data_source_dict": 178, "schema_mapping_loading_config_data_source_from_dict": 178, "schema_mapping_loading_config_format": 179, "schema_mapping_loading_config_format_inst": 179, "schema_mapping_loading_config_format_dict": 179, "schema_mapping_loading_config_format_from_dict": 179, "schema_mapping_loading_config_x_csr_param": 180, "schema_mapping_loading_config_x_csr_params_inst": 180, "schema_mapping_loading_config_x_csr_params_dict": 180, "schema_mapping_loading_config_x_csr_params_from_dict": 180, "bolt_port": 181, "hqps_port": 181, "gremlin_port": [181, 478], "service_status_inst": 181, "service_status_dict": 181, "service_status_from_dict": 181, "start_service_request_inst": 182, "start_service_request_dict": 182, "start_service_request_from_dict": 182, "stored_procedure_meta": 183, "stored_procedure_meta_inst": 183, "stored_procedure_meta_dict": 183, "stored_procedure_meta_from_dict": 183, "string_typ": 184, "string_type_inst": 184, "string_type_dict": 184, "string_type_from_dict": 184, "string_type_str": 185, "string_type_string_inst": 185, "string_type_string_dict": 185, "string_type_string_from_dict": 185, "temporal_typ": 186, "temporal_type_inst": 186, "temporal_type_dict": 186, "temporal_type_from_dict": 186, "temporal_type_tempor": 187, "temporal_type_temporal_inst": 187, "temporal_type_temporal_dict": 187, "temporal_type_temporal_from_dict": 187, "time_stamp_typ": 188, "time_stamp_type_inst": 188, "time_stamp_type_dict": 188, "time_stamp_type_from_dict": 188, "typed_valu": 189, "typed_value_inst": 189, "typed_value_dict": 189, "typed_value_from_dict": 189, "update_procedure_request_inst": 190, "update_procedure_request_dict": 190, "update_procedure_request_from_dict": 190, "file_path": 191, "upload_file_respons": [191, 192], "upload_file_response_inst": 191, "upload_file_response_dict": 191, "upload_file_response_from_dict": 191, "var_char_inst": 193, "var_char_dict": 193, "var_char_from_dict": 193, "var_char_var_char": 194, "var_char_var_char_inst": 194, "var_char_var_char_dict": 194, "var_char_var_char_from_dict": 194, "vertex_data_inst": 195, "vertex_data_dict": 195, "vertex_data_from_dict": 195, "vertex_mapping_inst": 196, "vertex_mapping_dict": 196, "vertex_mapping_from_dict": 196, "vertex_request_inst": 197, "vertex_request_dict": 197, "vertex_request_from_dict": 197, "vertex_statist": 198, "vertex_statistics_inst": 198, "vertex_statistics_dict": 198, "vertex_statistics_from_dict": 198, "vertex_type_pair_statistics_inst": 199, "vertex_type_pair_statistics_dict": 199, "vertex_type_pair_statistics_from_dict": 199, "assist": [200, 220, 225, 248], "har": 200, "interactive_sdk": 200, "sudo": [200, 320, 489, 490], "pytest": 200, "mock": 200, "virtserv": 200, "swaggerhub": 200, "resp": 200, "f0": [200, 327], "create_dataloading_job": 200, "create_graph": 200, "delete_graph": 200, "get_graph": 200, "get_schema": 200, "list_graph": 200, "delete_job_by_id": 200, "get_job_by_id": 200, "list_job": 200, "create_procedur": 200, "delete_procedur": 200, "get_procedur": 200, "list_procedur": 200, "update_procedur": 200, "get_service_statu": 200, "restart_servic": 200, "start_servic": 200, "stop_servic": 200, "delete_edg": [200, 478], "get_edg": [200, 316], "update_edg": 200, "add_vertex": 200, "delete_vertex": [200, 478], "get_vertex": 200, "update_vertex": 200, "proc_cal": 200, "seek": [201, 324], "toolkit": 201, "showprocedur": 201, "proc_nam": [201, 209], "metric": [201, 250, 412, 413, 414, 415, 416], "canceljob": 201, "x": [201, 230, 231, 242, 243, 253, 256, 313, 319, 325, 330, 368, 401, 409, 411, 412, 416, 440, 497], "ok": [201, 255], "enumer": [201, 242, 243, 255], "respond": [201, 315], "NOT": [201, 224, 229, 477], "yourfil": 201, "123": [201, 314], "example_graph": 201, "11223444": 201, "11123445": 201, "rune": 201, "path_to_fil": 201, "query_servic": 201, "reject": [201, 472], "unabl": 201, "emptybodi": 201, "cpu_usag": 201, "memory_usag": 201, "job_": 201, "create_timestamp": 201, "process_id": 201, "line1": 201, "nlin2": 201, "1706786404768": 201, "maintan": 201, "interactive_serv": 201, "subprocess": 201, "statuscod": 201, "invalidargu": 201, "unsupportedoper": 201, "alreadyexist": 201, "notexist": 201, "codegenerror": 201, "uninitializedstatu": 201, "invalidschema": 201, "permissionerror": [201, 264], "403": 201, "illegaloper": 201, "internalerror": 201, "invalidimportfil": 201, "ioerror": 201, "notfound": 201, "queryfail": 201, "graph_data": 202, "gs_interactive_conf": 202, "breakdown": [202, 210], "regist": [202, 203, 205, 219, 226, 244, 255, 258, 287, 472], "tell": [202, 477], "eras": [202, 209], "irrevers": [202, 209], "caution": 202, "connector": [202, 205, 222, 231], "opencyph": [202, 247], "supported_cyph": [202, 205], "term": [203, 235], "proc": [203, 417, 418, 422, 423, 464], "storp": 203, "sproc": 203, "stopro": 203, "storedproc": 203, "storeproc": 203, "subroutin": 203, "rdbm": [203, 223], "wikipedia": [203, 248, 256, 427, 431, 432, 433, 434, 436, 437, 438, 444, 445, 446, 447, 449, 450, 451, 452, 458], "nest": [203, 229], "sole": [204, 223, 224], "theori": [204, 238, 317, 325], "arm64": 204, "mac": [204, 260, 490, 492], "gs_interactive_hom": 204, "concurr": [205, 210, 245, 315], "impress": [205, 210], "Its": [205, 210, 212, 247, 444, 477], "timefram": [205, 210], "emphas": [205, 210, 252], "stand": [205, 252, 317, 318, 477], "shoulder": 205, "pivot": 205, "pillar": 205, "qp": [205, 218, 231, 251, 478], "snb": [205, 231, 244, 493, 498], "180": 205, "87": [205, 253, 456], "op": [205, 257, 267, 269, 270, 271, 272, 274, 275, 277, 279, 280, 282, 283, 284, 285, 286, 287, 290, 291, 292, 295, 296, 297, 299, 300, 323, 465, 469, 472], "boast": 205, "highlight": [205, 224, 245, 249], "laid": 205, "triumph": 205, "ten": [205, 248, 252, 317], "thousand": 205, "swiftli": 205, "versatil": [205, 226, 251, 477], "expans": [205, 249, 250, 322, 496], "prowess": 205, "prime": [205, 409, 411], "gql": [205, 219, 245, 252], "scalabl": [205, 218, 230, 248, 249, 250, 251, 252, 462], "possess": 205, "larger": [205, 227, 231, 241, 412], "massiv": [205, 219, 249], "too": [205, 218, 231, 252, 315, 384, 465], "offload": [205, 478], "excess": 205, "slave": 205, "constraint": [205, 224, 231, 232, 249], "portion": [205, 231, 248, 249, 257, 327], "occurr": [205, 223, 249], "syntax": [205, 224, 229, 238, 249, 257, 319, 465, 471], "unif": 205, "ddl": 205, "supported_gremlin_step": 205, "acid": [205, 251], "graph_nam": [207, 209, 220], "stored_procedure_1": 207, "flag": [207, 314, 315], "taken": [207, 465], "account": [207, 219, 249, 463, 496], "compile_onli": [207, 209], "procedure_nam": 207, "comma": [207, 314], "proc1": 207, "proc2": 207, "appear": [207, 212, 219, 231, 256, 370, 372, 374, 377, 379, 406, 407, 465, 491], "capit": [207, 224, 226], "aspect": [209, 219, 226, 231, 252], "desc": [209, 229, 231], "input_fil": 209, "solid": [210, 433, 450, 451], "prerequisit": 210, "helm": [210, 212, 217, 218, 478, 489, 491], "entiti": [210, 226, 227, 231, 241, 246, 250, 314], "\u6807\u7b7e": 211, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 211, "\u5c5e\u6027": [211, 496, 498], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 211, "\u539f\u59cbid": 211, "oid": [211, 255, 257, 258], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 211, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 211, "\u5b50\u56feid": 211, "fid": [211, 255, 258, 290, 474], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 211, "\u5206\u533a\u5668": 211, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 211, "\u7684\u6620\u5c04": 211, "\u5b50\u56fe": 211, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 211, "\u5b58\u50a8\u4e86\u9876\u70b9": 211, "\u8fb9": [211, 488], "\u9876\u70b9\u6570\u636e": 211, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 211, "\u5185\u90e8\u70b9": 211, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 211, "\u5916\u90e8\u70b9": 211, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 211, "\u672c\u5730id": 211, "lid": [211, 255, 290], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 211, "\u5168\u5c40id": 211, "gid": [211, 255, 290], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 211, "\u88abfragment\u5171\u8bc6": 211, "\u7528\u4e8e\u5b58\u50a8gid": 211, "oid\u7684\u6620\u5c04\u5173\u7cfb": 211, "\u7684\u8282\u70b9": 211, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 211, "gid\u7f16\u7801": 211, "\u5176\u4e2d": [211, 488, 493], "\u548c": [211, 319, 488, 490, 491, 492, 493, 495, 496, 497, 498], "\u5171\u540c\u7ec4\u6210": 211, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 211, "\u7684\u9876\u70b9": 211, "\u5e8f\u53f7": 211, "lid\u7f16\u7801": 211, "\u586b\u5145": 211, "\u603b\u662f": 211, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 211, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 211, "\u5206\u4e3ahashpartitioner\u548csegmentedpartition": 211, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 211, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 211, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 211, "\u8fb9\u6587\u4ef6": 211, "\u5f97\u5230\u591a\u4e2avertex": 211, "\u548cedg": 211, "etabl": 211, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 211, "\u5206\u7ec4": 211, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 211, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 211, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 211, "\u8fb9\u8868": 211, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 211, "partial_v_t": 211, "partial_e_t": 211, "table\u5305\u542boid": 211, "table\u5305\u62ecsrc\u548cdst\u7684oid": 211, "\u8bbf\u95eevtable\u7684oid\u5217": 211, "\u6839\u636eoid\u67e5\u8be2partit": 211, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 211, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 211, "gather\u64cd\u4f5c": 211, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 211, "\u6839\u636efrag\u6570\u91cf": 211, "label\u6570\u91cf\u548c\u5168\u90e8oid": 211, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 211, "fid_t": [211, 255], "fnum_": 211, "label_id_t": [211, 255], "label_num_": 211, "hashmapbuild": 211, "cur_gid": 211, "id_parser_": 211, "generateid": 211, "\u8d77\u59cbgid": 211, "vnum": 211, "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 211, "\u751f\u6210gid": 211, "emplac": 211, "getview": 211, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 211, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 211, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 211, "\u6839\u636epartitioner\u83b7\u53d6fid": 211, "\u6839\u636efid": 211, "id\u548coid\u67e5\u8be2gid": 211, "\u751f\u6210gid\u6570\u7ec4": 211, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 211, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 211, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 211, "\u5bf9etable\u6267\u884cshuffl": 211, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 211, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 211, "\u5904\u7406\u9876\u70b9": 211, "\u521d\u59cb\u5316id": 211, "parser": [211, 219, 242], "\u521d\u59cb\u5316ivnum": 211, "ovnum\u548ctvnum\u6570\u7ec4": 211, "\u6309\u7167vertex": 211, "label\u5206\u7ec4": 211, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 211, "\u5411vertex": 211, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 211, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 211, "\u5c06vertex": 211, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 211, "vid_parser_": 211, "vertex_label_num_": 211, "resiz": 211, "ivnums_": 211, "ovnums_": 211, "tvnums_": 211, "combinechunk": 211, "default_memory_pool": 211, "vm_ptr_": 211, "getinnervertexs": [211, 255], "fid_": 211, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 211, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 211, "\u901a\u8fc7src": 211, "gid\u5217\u548cdst": 211, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 211, "\u5e76\u6309\u7167vertex": 211, "edge_t": [211, 314, 325], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 211, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 211, "collect_outer_vertic": 211, "dynamic_pointer_cast": [211, 479], "converttoarrowtyp": [211, 255], "arraytyp": [211, 255], "chunk": [211, 300, 327, 476], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 211, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 211, "\u5916\u90e8\u70b9\u7684lid\u7531label": 211, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 211, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 211, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 211, "ovg2l_maps_": 211, "ovgid_lists_": 211, "cur_list": 211, "collected_ovgids_": 211, "\u6392\u5e8fgid": 211, "cur_map": 211, "buildertyp": 211, "vec_build": 211, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 211, "\u5176\u4e2dfid\u4e3a0": 211, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 211, "cur_id": 211, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 211, "cur_list_length": 211, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 211, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 211, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 211, "\u5220\u9664edg": 211, "table\u7684src\u5217\u548cdst\u5217": 211, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 211, "generate_local_id_list": 211, "gid_list": 211, "lid_list": 211, "vec": 211, "getfid": 211, "\u751f\u6210\u5185\u90e8\u70b9lid": 211, "getlabelid": 211, "getoffset": 211, "\u67e5\u8be2g2l": 211, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 211, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 211, "edge_src_": 211, "edge_dst_": 211, "table\u7684src\u5217\u548cgid\u5217": 211, "\u53ea\u4fdd\u7559\u5c5e\u6027": 211, "tmp_table0": 211, "removecolumn": 211, "\u6784\u5efacsr": 211, "\u5bf9\u4e8e\u6709\u5411\u56fe": 211, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 211, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 211, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 211, "\u6784\u5efarow": 211, "offset\u6570\u7ec4": 211, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 211, "\u4f7f\u7528row": 211, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 211, "\u586b\u5145dst": 211, "lid\u548ceid\u5230nbr": 211, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 211, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 211, "generate_directed_csr": 211, "vid_array_t": [211, 255], "src_list": 211, "dst_list": 211, "fixedsizebinaryarrai": 211, "int64arrai": 211, "edge_offset": 211, "actual_edge_num": 211, "v_label": [211, 255, 474], "edge_num": [211, 290, 492, 496], "src_list_ptr": 211, "raw_valu": 211, "dst_list_ptr": 211, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 211, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 211, "tvnum": 211, "offset_vec": 211, "degree_vec": 211, "int64build": 211, "podarraybuild": 211, "nbr_unit_t": [211, 255], "edge_build": 211, "v_offset": 211, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 211, "ptr": 211, "mutablepoint": 211, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 211, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 211, "vid": [211, 255, 327], "eid_t": [211, 255], "\u66f4\u65b0offset": 211, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 211, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 211, "offsets_ptr": 211, "lh": 211, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 211, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 211, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 211, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 211, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 211, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 211, "lid\u548ceid": 211, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 211, "\u5c01\u88c5": 211, "seal": [211, 234, 250], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 211, "ovgid\u548cg2l_map\u540e": 211, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 211, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 211, "\u4e5f\u5c31\u662f\u8bf4": [211, 489], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 211, "\u5f53\u524dfragment": 211, "fragment\u603b\u6570": 211, "directed_": 211, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 211, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 211, "edge_label_num_": 211, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 211, "propertygraphschema": 211, "schema_": 211, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 211, "\u9876\u70b9\u5c5e\u6027\u8868": 211, "\u4e0d\u5305\u542bid\u5217": 211, "\u5916\u90e8\u70b9gid": 211, "gid\u5230lid\u6620\u5c04": 211, "\u8fb9\u5c5e\u6027": 211, "csr\u7ed3\u6784\u7684column": 211, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 211, "csr\u7ed3\u6784\u7684row": 211, "vertex_map_t": [211, 255], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 211, "edge_tables_columns_": 211, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 211, "flatten_edge_tables_columns_": 211, "\u540c\u4e0a": 211, "vertex_tables_columns_": 211, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 211, "ie_ptr_lists_": 211, "oe_ptr_lists_": 211, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 211, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 211, "\u4e5f\u5c31\u662fcolumn": 211, "index\u7684\u8d77\u59cb\u5730\u5740": 211, "ie_offsets_ptr_lists_": 211, "oe_offsets_ptr_lists_": 211, "\u51fa\u8fb9\u7684row": 211, "offset\u8d77\u59cb\u5730\u5740": 211, "offset\u7684\u8d77\u59cb\u5730\u5740": 211, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 211, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 211, "\u76ee\u7684\u9876\u70b9fid": 211, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 211, "idst_": 211, "odst_": 211, "iodst_": 211, "idoffset_": 211, "odoffset_": 211, "iodoffset_": 211, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 211, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 211, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 211, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 211, "id\u548c\u9876\u70b9\u5e8f\u53f7": 211, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 211, "ivnum": 211, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 211, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 211, "vertex_range_t": [211, 255], "label_id": [211, 255, 257, 258, 290], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 211, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 211, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 211, "\u5c5e\u6027id": 211, "\u5217\u53f7": 211, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 211, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 211, "\u884c\u53f7": 211, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 211, "getdata": [211, 255], "prop_id_t": [211, 255], "prop_id": 211, "property_graph_util": [211, 255], "valuegett": 211, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 211, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 211, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 211, "adj_list_t": [211, 255], "e_label": [211, 255], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 211, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 211, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 211, "offset_arrai": 211, "\u8bbf\u95eerow": 211, "oe": 211, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 211, "\u751f\u6210adjlist\u5bf9\u8c61": 211, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 211, "\u7ed3\u675f\u5730\u5740": 211, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 211, "\u548c\u51fa\u8fb9\u540c\u7406": 211, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 211, "ie": 211, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 211, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 211, "\u5bf9\u5e94\u5230\u884c\u53f7": 211, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 211, "\u4f8b\u5982": [211, 488, 492, 496, 498], "\u83b7\u53d6edg": 211, "struct": [211, 255, 388, 421], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 211, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 211, "edata_arrays_": 211, "nbr_": 211, "8g": [212, 242], "18": [212, 221, 231, 253, 315, 316, 318, 327, 330, 388, 437, 442, 446, 448, 451, 457, 476, 488, 491, 495], "silent": [212, 465, 486], "did": [212, 325], "role": [212, 219, 233, 242, 247, 315, 324, 330, 416, 454, 462, 478, 482, 486, 491], "rolebind": [212, 491], "uninstal": [212, 218, 491], "recycl": 212, "alloc": [212, 236, 240], "seem": [212, 231], "stuck": 212, "consumpt": 212, "poor": [212, 321], "acquir": [212, 222, 230], "mostli": [212, 220, 291], "visibl": [212, 258], "cloud": [212, 251, 252, 478], "k8s_vineyard_mem": [212, 242, 312, 472, 491], "shape": [212, 237, 238, 241, 246, 255, 257, 316, 317, 318, 319, 322, 325, 329, 387, 492], "forth": 212, "smaller": [212, 231, 253, 328, 330, 386, 387, 391], "shared_mem": [212, 491], "grpcio": [212, 491], "grpc_python_build_system_openssl": [212, 491], "scipi": [212, 412, 413, 414, 415, 465, 468, 491], "anaconda": [212, 491], "workaround": 212, "openbla": 212, "tri": [212, 215, 240, 249, 394, 400], "pkgconfig": 212, "cmake_prefix_path": 212, "brew": 212, "deni": [212, 264, 491], "kafka": [212, 474, 478, 491], "zookeep": [212, 491], "crashloopbackoff": [212, 491], "bitnami": [212, 491], "755": 212, "1001": [212, 478], "brutal": 212, "chmod": [212, 230, 491], "777": [212, 253, 491], "eleg": [212, 215], "grant": [212, 462], "rais": [212, 219, 256, 264, 266, 300, 312, 319, 327, 328, 330, 336, 345, 349, 350, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 399, 400, 404, 406, 409, 410, 411, 422, 425, 457, 460, 461, 465, 468, 472], "timeout_second": [212, 312, 472, 491], "600": [212, 253, 472, 491], "enterpris": 212, "proxi": [212, 491], "properli": [212, 227], "wrong": 212, "resolut": [212, 478], "occup": 212, "hostnam": [212, 491], "no_proxi": [212, 491], "suffix": [212, 229], "flush": 212, "forcibli": 212, "contact": 212, "slack": [212, 491], "dingtalk": [212, 491], "happi": 212, "90": [214, 253], "traffic": 215, "web": [215, 256, 330, 398, 412, 417, 458], "ever": [215, 238], "amount": [215, 230, 236, 250, 317, 319, 321], "hidden": [215, 247, 248, 250, 313, 497], "attract": 215, "attent": [215, 250, 319], "difficult": [215, 314, 324, 478], "obstacl": 215, "attempt": [215, 218, 248, 249, 252, 465], "curv": [215, 248], "hard": [215, 229, 239, 240, 426, 477], "complic": [215, 219, 231, 257], "sql": [215, 219, 226, 229, 231, 232], "deep": [215, 238, 245, 313, 318, 319, 321, 341, 344, 453, 465], "gnn": [215, 217, 235, 237, 238, 241, 245, 246, 251, 252, 313, 317, 318, 319, 321, 322, 472, 494, 497], "train": [215, 223, 235, 237, 238, 239, 245, 246, 251, 252, 254, 315, 318, 319, 321, 322, 325, 329, 472, 492, 497], "fist": 215, "interpret": [215, 245, 330], "mount_dataset": [215, 244], "ran": [215, 240], "p2p_network": 215, "embed": [215, 235, 241, 246, 250, 314, 321], "inter": [215, 326, 384, 387], "wherea": [215, 384, 477], "numpi": [215, 231, 235, 255, 257, 272, 283, 292, 316, 317, 319, 320, 321, 322, 325, 327, 329, 330, 457, 465, 468, 494], "datafram": [215, 244, 257, 271, 282, 292, 295, 327, 465, 488, 498], "head": [215, 218, 223, 229, 231], "creationd": [215, 229, 231, 244, 476, 493, 498], "locationip": [215, 244, 498], "browserus": [215, 231, 244, 498], "618475290625": 215, "2011": [215, 231, 398], "08": [215, 253, 330], "17t14": 215, "26": [215, 229, 231, 242, 253, 315, 316, 318, 414], "59": [215, 253], "961": 215, "210": [215, 253, 461], "17": [215, 231, 253, 315, 316, 318, 488], "chrome": [215, 231], "618475290626": 215, "17t11": 215, "570": 215, "comment_replyof_com": 215, "274877907301": 215, "274877907299": 215, "274877907302": 215, "pd": [215, 223, 244, 498], "df_v": [215, 244, 488, 498], "read_csv": [215, 223, 244, 498], "sep": [215, 223, 244, 327, 498], "df_e": [215, 244, 498], "graphcomput": [217, 496], "gl": [217, 238, 251, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326], "neural": [217, 235, 245, 246, 251, 252, 254, 313, 314, 317, 319, 321, 325], "posit": [217, 231, 250, 251, 313, 319, 330, 375, 394, 396, 397, 399, 400, 404, 412, 413, 414, 415, 416, 460, 463, 477, 480], "frequent": [217, 245, 248, 478], "groot": [217, 227, 245, 252], "graphar": [217, 327], "gart": 217, "gap": 217, "oltp": [217, 245, 247], "style": [217, 234, 245, 470], "wonder": 218, "throughout": [218, 219, 229], "smoothli": 218, "easiest": 218, "websit": [218, 248, 384], "untar": 218, "tree": [218, 247, 365, 367, 375, 395, 401, 403, 413, 414, 415, 428, 429, 466, 472, 498], "your_release_nam": 218, "cypherport": 218, "littl": [218, 229, 231], "v6d_modern_load": [218, 220], "data_path": [218, 479], "store_data_path": [218, 220], "thing": [218, 319, 485], "key1": 218, "key2": 218, "token": [218, 229], "column_typ": 218, "infer": [218, 244, 250, 251], "filed1": 218, "filed2": 218, "unexpect": 218, "troubl": 218, "correspondingli": [218, 238, 422, 425], "v6d_ldbc_loader": 218, "hdf": [218, 244, 292, 324, 327, 478, 488, 498], "pegasusworkernum": 218, "pegasustimeout": 218, "durat": [218, 224, 229], "pegasusbatchs": 218, "1024": [218, 220, 229, 476], "pegasusoutputcapac": 218, "frontendquerypersecondlimit": 218, "2147483647": [218, 478], "gremlinscriptlanguagenam": 218, "antlr_gremlin_travers": 218, "inher": 219, "manufactur": 219, "upcom": 219, "sticki": 219, "shelv": 219, "intellig": [219, 231, 245, 252, 422, 425], "hybrid": [219, 477, 478], "dedupl": 219, "latenc": [219, 230, 245, 251, 252], "hope": [219, 231, 478], "trade": [219, 245, 478], "inevit": 219, "realist": [219, 457], "lengthi": 219, "verif": [219, 245], "80": [219, 253, 444], "decoupl": [219, 245, 252], "upper": [219, 229, 231, 235, 249, 384, 477], "briefli": [219, 250], "algebra": [219, 454], "edgeexpans": 219, "pathexpans": 219, "legal": 219, "predic": [219, 231], "arithmet": [219, 229, 231], "firstli": [219, 227, 231, 244, 252], "down": [219, 226, 243, 382], "cbo": 219, "glogu": 219, "shuffl": [219, 229, 242, 243, 319, 325, 329], "plu": [219, 229, 231, 368, 440], "unaccept": 219, "come": [219, 223, 231, 234, 244, 246, 247, 250, 251, 253, 316, 431, 468], "end2end": 220, "sf": [220, 231], "v6d_object_id": 220, "unsur": [220, 223], "vineyard_ipc_socket": [220, 479], "gie_test_hom": 220, "rpc": [220, 242, 255, 326, 472, 478], "1234": 220, "127": [220, 253, 478], "11234": 220, "pegasu": [220, 245], "gaia_executor": 220, "log4r": [220, 478], "yml": [220, 476, 478], "usernam": [220, 478], "password": [220, 478], "auth": [220, 222, 330, 478], "3000000": [220, 221, 478], "djna": 220, "kill": [220, 472], "pkill": 220, "gcc": [221, 253, 495], "64": [221, 230, 238, 318, 319, 396, 476, 496], "chip": [221, 495], "hereaft": [221, 231, 246], "q1": [221, 223, 231, 246], "q2": [221, 231, 246], "q3": [221, 231, 246], "453": 221, "xxx": [221, 223, 323, 327, 472, 488], "pppp": 221, "startup": 221, "3000": 221, "entr": 221, "ee": 221, "syntact": [221, 227, 232, 249], "sugar": [221, 227, 232, 249], "graphdatabas": 222, "routingcontrol": [222, 246], "print_top_10": 222, "execute_queri": 222, "routing_": [222, 246], "simpler": [222, 230, 231, 465], "nowadai": 223, "shortcom": [223, 227, 231], "gpt": 223, "materi": 223, "year": [223, 229, 231, 246, 248, 492], "mislead": 223, "hot": 223, "cold": 223, "workabl": 223, "significantli": [223, 226, 227, 248, 251], "openai": 223, "novic": 223, "dream": 223, "chamber": 223, "25": [223, 231, 237, 241, 246, 253, 315, 316, 318, 387, 389, 392, 411, 458, 492], "langchain": 223, "316": 223, "suchun": 223, "sv": 223, "nodes_set": 223, "stone_story_nodes_rel": 223, "vid_field": [223, 244, 327, 493], "edges_set": 223, "stone_story_edg": 223, "edges_sets_": 223, "src_field": [223, 244, 327, 493], "dst_field": [223, 244, 327, 493], "daughter_in_law_of_grandson_of": 223, "wife_of": 223, "api_kei": 223, "query_to_cyph": 223, "langchain_prompt": 223, "son": 223, "baoyu": 223, "jia": 223, "\u8d3e\u5b9d\u7389\u662f\u8c01\u7684\u513f\u5b50": 223, "cypher_sent": 223, "son_of": 223, "q": [223, 230, 317, 319, 325, 407, 411], "\u8d3e\u5b9d\u7389": 223, "lastli": 223, "\u8d3e\u653f": 223, "stori": 223, "compli": [224, 319], "unaddress": 224, "regard": [224, 231, 241, 477], "keyword": [224, 332, 333, 334, 401, 408, 412, 413, 414, 415, 416, 465, 468, 471, 472], "insensit": [224, 229], "lowercas": 224, "letter": [224, 459], "slightli": [224, 320, 384, 471], "elabor": [224, 252], "uint64": [224, 306, 327, 472], "byte_arrai": 224, "datetim": 224, "citizen": 224, "unsupport": [224, 227, 229], "conceiv": [224, 412], "inner_typ": 224, "mathemat": [224, 397, 399, 407, 409, 411, 420], "moment": [224, 260, 478], "averag": [224, 229, 241, 246, 256, 330, 384], "avg": [224, 229, 330], "summar": [224, 231, 235], "subtract": [224, 229], "divis": [224, 229], "modulo": [224, 229, 409], "exponenti": [224, 229, 231, 250, 412, 414, 415], "multipli": [224, 229, 452], "inequ": 224, "sensit": [224, 457], "WITH": [224, 229], "conjunct": 224, "AND": [224, 229, 246, 258], "disjunct": 224, "OR": [224, 227, 229, 258, 465], "xor": [224, 229], "negat": [224, 229], "bitopr": 224, "scalar": [224, 323, 330], "listliter": 224, "fold": [224, 477, 496], "mapliter": 224, "elementid": [224, 229], "notabl": 224, "AS": [224, 227, 462, 466], "BY": [224, 227], "interconnect": [225, 248, 315], "tcp": [225, 242], "llm": 225, "sentenc": [225, 226, 229, 231], "tradition": 226, "accommod": [226, 252], "heurist": [226, 249, 392], "coexist": 226, "sophist": [226, 247], "cardin": 226, "primarili": [226, 231, 249, 477], "stem": 226, "atc": 226, "instrument": 226, "efficaci": 226, "alias": [226, 229], "p1": [226, 231], "p2": [226, 231], "id1": [226, 496], "id2": [226, 496], "expedit": 226, "intent": 226, "k1": [226, 229], "k2": [226, 229], "p3": 226, "retain": [226, 229, 406, 479], "constrain": 226, "simultan": [226, 246, 252, 474], "necessit": [226, 245], "lai": 226, "groundwork": 226, "conform": 226, "nonexist": 226, "kno": 226, "mismatch": 226, "websocket": [227, 496], "worth": [227, 241, 319, 327, 465], "mutat": 227, "lambda": [227, 231, 313, 319, 325, 330, 401, 412, 414, 415, 416, 497], "groovi": 227, "currenttimemilli": [227, 478, 496], "expr": [227, 229, 231, 496], "transact": [227, 245, 251, 252, 253, 474, 478, 488], "secondari": 227, "rocksdb": [227, 478], "isol": [227, 330, 426, 478], "therein": 227, "council": [227, 253], "birthdai": [227, 244, 498], "differenti": 227, "123456": [227, 235, 250, 478], "hasid": 227, "expos": [227, 233, 317, 328, 472, 482], "secondli": [227, 252], "path_expand": 227, "concret": [227, 256, 257, 327], "endv": [227, 231, 249, 496], "repeat": [227, 249, 250, 319, 325, 399, 404, 407, 427, 430, 496], "path_opt": [227, 229, 231, 249, 496], "pathexpand": 227, "marko": [227, 229, 231], "27": [227, 229, 231, 253, 315, 316, 318, 446], "hasstep": 227, "groupcount": [227, 496], "age_cnt": 227, "age_sum": 227, "scan": [227, 477], "propertyidvalu": 227, "moreov": [227, 229, 245, 249, 251, 477], "propertyidvalue1": 227, "propertyidvalue2": 227, "inE": [227, 319, 496], "conquer": 228, "meant": [229, 231], "vertexid": 229, "inject": 229, "edgeid": 229, "histori": [229, 231, 249], "propertykei": 229, "accessor": 229, "eq": [229, 231, 249, 256, 496], "neq": [229, 496], "gt": [229, 231, 496], "lt": [229, 231, 496], "gte": [229, 231, 246, 492, 496], "lte": [229, 246, 492, 496], "outsid": [229, 496], "textp": [229, 496], "startingwith": [229, 496], "endingwith": [229, 496], "rko": 229, "ark": 229, "notstartingwith": [229, 496], "notendingwith": [229, 496], "notcontain": [229, 496], "unequ": 229, "wheretravers": 229, "act": [229, 313, 462, 465, 485, 497], "startkei": 229, "alter": [229, 465], "opposit": [229, 319, 393, 440], "nottravers": 229, "duplic": [229, 231, 392, 394, 396, 465, 466], "deduplabel": 229, "composit": [229, 231], "de": [229, 240], "impli": 229, "flat": 229, "br": 229, "selectkei": 229, "roll": [229, 231, 234], "accompani": 229, "aggregatefunc": 229, "emit": [229, 231, 313, 316, 319, 325, 497], "ascend": [229, 231], "asc": [229, 231], "bias": 229, "toss": 229, "merg": [229, 319], "uniontravers": 229, "matchsent": 229, "binder": 229, "__": [229, 230, 231, 246, 319, 492, 496], "graphnam": 229, "unrol": 229, "linear": [229, 399, 401, 457, 477], "result_opt": [229, 231, 496], "all_v": [229, 231, 496], "lengthrang": 229, "keyvaluepair": 229, "end_v": [229, 231, 496], "all_v_": 229, "vada": 229, "josh": 229, "29": [229, 231, 315, 316, 318], "lop": 229, "72057594037927939": 229, "rippl": 229, "72057594037927941": 229, "35": [229, 231, 253, 315, 316, 318, 325, 392, 442, 458], "peter": 229, "ongo": 229, "liter": 229, "0f": 229, "0d": 229, "2l": 229, "IN": [229, 247], "isnul": 229, "month": 229, "bitwis": 229, "startswith": 229, "ma": 229, "endswith": 229, "ko": 229, "substr": [229, 496], "preced": [229, 465, 478], "parenthes": 229, "unari": 229, "modulu": 229, "membership": [229, 465], "34": [229, 231, 253, 315, 316, 318, 458], "729": 229, "1225": 229, "841": 229, "v2": [229, 231, 237, 249, 313, 443, 497], "simplepath": [229, 496], "latter": [229, 231, 248], "mix": [229, 256, 477], "sack": [229, 496], "guidanc": 230, "gremlinpython": [230, 478], "sy": [230, 325], "gremlin_python": [230, 478], "graph_travers": 230, "driver_remote_connect": 230, "driverremoteconnect": [230, 478], "gremlin_endpoint": [230, 478], "remoteconn": [230, 478], "withremot": [230, 478], "assert": [230, 256, 477], "oom": 230, "vast": 230, "mitig": 230, "risk": [230, 245], "queue": [230, 258], "graph_url": [230, 328, 478, 496], "stopiter": 230, "resultiterationbatchs": 230, "addcontactpoint": [230, 478], "resultset": [230, 478], "hasnext": 230, "dlcdn": 230, "your_endpoint_address": 230, "your_endpoint_port": 230, "classnam": [230, 496], "ser": [230, 496], "gryomessageserializerv1d0": [230, 496], "serializeresulttostr": [230, 496], "realm": 231, "audit": 231, "toolsuit": 231, "simul": [231, 290, 325], "confid": 231, "permit": [231, 465], "3k": 231, "gremlin_queri": 231, "190376": 231, "787074": 231, "sf1": 231, "432345564227583365": 231, "504403158265495622": 231, "576460752303435306": 231, "432345564227579434": 231, "hastyp": 231, "504403158265495612": 231, "144115188075855941": 231, "issubclassof": 231, "504403158265495553": 231, "confus": [231, 413, 414, 415], "mechan": [231, 247, 250, 252, 474, 482], "belong": [231, 250, 256, 257, 258, 327, 455, 458, 465, 471, 478], "distinguish": [231, 245, 313, 314, 315, 477], "worri": 231, "havelabel": 231, "216172782113783808": 231, "216172782113784710": 231, "label1": 231, "label2": 231, "forum": 231, "72057594037936036": 231, "360287970189718653": 231, "360287970189718655": 231, "joseph": 231, "yacin": 231, "01t00": 231, "curiou": 231, "38416": 231, "mayb": 231, "pyplot": 231, "plt": 231, "comment_cont": 231, "comment_length": 231, "histogram": 231, "hist": [231, 339], "50": [231, 253, 412, 414, 415], "607c8e": 231, "grid": [231, 458], "axi": [231, 255, 256, 257, 272, 296, 325, 471], "xlabel": 231, "ylabel": 231, "gender": [231, 244, 498], "person_gend": 231, "male": 231, "femal": 231, "male_count": 231, "female_count": 231, "216172782113784483": 231, "around": [231, 328], "432345564227569033": 231, "288230376151712472": 231, "144115188075856168": 231, "144115188075860911": 231, "72057594037934114": 231, "hasmoder": 231, "studyat": 231, "workat": 231, "islocatedin": 231, "432345564227582847": 231, "hasinterest": 231, "504403158265496227": 231, "864691128455136658": 231, "1008806316530991636": 231, "360287970189645858": 231, "en": [231, 248, 256, 427, 431, 432, 433, 434, 436, 437, 438, 444, 445, 446, 447, 449, 450, 451, 452], "e1": 231, "citi": [231, 235, 248, 250], "ispartof": 231, "countri": 231, "288230376151711797": 231, "216172782113784555": 231, "14": [231, 253, 315, 316, 318, 370, 430, 438, 450, 465], "exactli": [231, 235, 249, 256, 330, 375, 384, 398, 443, 471, 478], "432345564227569357": 231, "432345564227570524": 231, "288230376151712984": 231, "144115188075861043": 231, "replyof": [231, 476, 493], "54336": 231, "33411": 231, "360287970189700805": 231, "59465": 231, "33403": 231, "awai": 231, "ineffect": 231, "illeg": 231, "simple_path": 231, "unfold": [231, 256], "hascreat": 231, "nation": 231, "china": 231, "np": [231, 316, 319, 325, 329, 480], "market": 231, "japan": 231, "browsers_us": 231, "browser_list": 231, "firefox": 231, "safari": 231, "browser_count": 231, "autopct": 231, "1f": 231, "univers": [231, 245, 330, 363, 364, 411, 421, 453, 457], "person1": 231, "person2": 231, "university1": 231, "university2": 231, "studi": [231, 241, 246, 252, 411, 413], "216172782113784481": 231, "216172782113784279": 231, "144115188075858884": 231, "216172782113784361": 231, "216172782113784291": 231, "144115188075858879": 231, "216172782113784642": 231, "216172782113784473": 231, "216172782113784328": 231, "144115188075858700": 231, "216172782113784700": 231, "216172782113784331": 231, "144115188075860619": 231, "216172782113784375": 231, "216172782113784333": 231, "144115188075858813": 231, "216172782113784593": 231, "216172782113784688": 231, "144115188075860870": 231, "216172782113784047": 231, "216172782113784692": 231, "144115188075862429": 231, "isomorph": [231, 250, 315, 319, 444, 466], "23": [231, 315, 316, 318], "216172782113784192": 231, "216172782113784107": 231, "216172782113784171": 231, "regular": [231, 404, 409, 410, 411, 433, 438, 441, 446, 449, 450, 451, 452], "squar": [231, 392, 411, 439, 440, 443, 458], "butterfli": 231, "notion": 231, "matchanalyticsalgorithm": 231, "matchoptimizationalgorithm": 231, "216172782113784587": 231, "216172782113784363": 231, "144115188075860919": 231, "216172782113784532": 231, "216172782113784400": 231, "144115188075861858": 231, "216172782113784491": 231, "216172782113784401": 231, "144115188075858086": 231, "216172782113784598": 231, "216172782113784629": 231, "144115188075858881": 231, "216172782113783931": 231, "216172782113784657": 231, "144115188075858708": 231, "repli": 231, "pa": 231, "pb": 231, "216172782113783809": 231, "216172782113784011": 231, "360287970189640007": 231, "360287970189640008": 231, "360287970189640009": 231, "2012": [231, 424], "216172782113783812": 231, "216172782113783882": 231, "36": [231, 253, 315, 316, 318, 370, 450, 458, 490], "360287970189640010": 231, "37": [231, 253, 315, 316, 318, 330, 458, 490], "216172782113784105": 231, "38": [231, 253, 315, 316, 318, 458, 490], "41": [231, 253, 315, 316, 318, 405, 458], "43": [231, 315, 316, 318, 330, 432, 458, 488], "216172782113783814": 231, "216172782113783962": 231, "360287970189640135": 231, "52": [231, 458], "216172782113784199": 231, "54": [231, 253, 405, 458], "216172782113784038": 231, "56": [231, 253, 364, 458], "216172782113783816": 231, "216172782113784144": 231, "175": 231, "360287970189640462": 231, "72057594037927936": 231, "144115188075855872": 231, "288230376151711744": 231, "432345564227567616": 231, "504403158265495555": 231, "india": 231, "hasmemb": 231, "8248": 231, "8101": 231, "imposs": 231, "2822": 231, "tag1": 231, "tag2": 231, "37164": 231, "432": 231, "property1": 231, "property2": 231, "donati": 231, "luigi": 231, "hall": 231, "costa": 231, "carlo": 231, "khan": 231, "meera": 231, "mahinda": 231, "eli": 231, "94": 231, "228": [231, 253], "emb": [231, 313, 497], "th": [231, 317, 330, 443], "dom": 231, "pedro": 231, "ii": 231, "condariuc": 231, "bonomi": 231, "anyth": 231, "david": [231, 366, 377, 442], "silva": 231, "guliyev": 231, "tagclass": 231, "504403158265495552": 231, "504403158265495554": 231, "504403158265495556": 231, "504403158265495557": 231, "504403158265495558": 231, "504403158265495559": 231, "504403158265495560": 231, "504403158265495561": 231, "504403158265495562": 231, "504403158265495563": 231, "504403158265495564": 231, "504403158265495565": 231, "504403158265495566": 231, "504403158265495567": 231, "504403158265495568": 231, "504403158265495569": 231, "504403158265495570": 231, "504403158265495571": 231, "504403158265495572": 231, "504403158265495573": 231, "504403158265495574": 231, "504403158265495575": 231, "504403158265495576": 231, "504403158265495577": 231, "504403158265495578": 231, "504403158265495579": 231, "504403158265495580": 231, "504403158265495581": 231, "504403158265495582": 231, "504403158265495583": 231, "504403158265495584": 231, "504403158265495585": 231, "504403158265495586": 231, "504403158265495587": 231, "504403158265495588": 231, "504403158265495589": 231, "504403158265495590": 231, "504403158265495591": 231, "504403158265495592": 231, "504403158265495593": 231, "504403158265495594": 231, "504403158265495595": 231, "504403158265495596": 231, "504403158265495597": 231, "504403158265495598": 231, "504403158265495599": 231, "504403158265495600": 231, "504403158265495601": 231, "504403158265495602": 231, "504403158265495603": 231, "504403158265495604": 231, "504403158265495605": 231, "504403158265495606": 231, "504403158265495607": 231, "504403158265495608": 231, "504403158265495609": 231, "504403158265495610": 231, "504403158265495611": 231, "504403158265495613": 231, "504403158265495614": 231, "504403158265495615": 231, "504403158265495616": 231, "504403158265495617": 231, "504403158265495618": 231, "504403158265495619": 231, "504403158265495620": 231, "504403158265495621": 231, "q4": 231, "690": 231, "134313148716225": 231, "216172782113783811": 231, "216172782113783813": 231, "216172782113784707": 231, "216172782113784708": 231, "216172782113784709": 231, "216172782113783910": 231, "216172782113784104": 231, "216172782113784207": 231, "216172782113784318": 231, "216172782113784305": 231, "216172782113784597": 231, "216172782113784693": 231, "216172782113784018": 231, "216172782113784092": 231, "216172782113784108": 231, "216172782113784161": 231, "216172782113784162": 231, "73": [231, 253, 411], "216172782113783875": 231, "216172782113783932": 231, "216172782113784057": 231, "216172782113784068": 231, "216172782113784065": 231, "216172782113784235": 231, "216172782113784247": 231, "meaning": [231, 244, 257, 327], "449": 231, "454": [231, 253], "216172782113783810": 231, "descend": [231, 459], "216172782113784082": 231, "216172782113784169": 231, "216172782113784267": 231, "216172782113784368": 231, "216172782113784376": 231, "216172782113783938": 231, "216172782113784405": 231, "216172782113783980": 231, "216172782113783844": 231, "216172782113783901": 231, "216172782113783935": 231, "216172782113784439": 231, "216172782113784315": 231, "216172782113784374": 231, "216172782113784601": 231, "216172782113784431": 231, "216172782113783815": 231, "216172782113783817": 231, "216172782113783971": 231, "216172782113784154": 231, "216172782113784381": 231, "216172782113783933": 231, "earlier": [231, 416, 478], "216172782113783819": 231, "216172782113783826": 231, "216172782113783836": 231, "bi": [231, 248, 251], "query2": 231, "09": [231, 253], "07": [231, 240, 253, 384, 392], "hastag": 231, "count1": 231, "count2": 231, "jet_li": 231, "zhang_yim": 231, "faye_wong": 231, "tsui_hark": 231, "bruce_le": 231, "johnny_depp": 231, "tom_cruis": 231, "jackie_chan": 231, "query3": 231, "moder": 231, "infinit": [231, 426], "seriou": 231, "song": 231, "containerof": 231, "message_count": 231, "824633725780": 231, "08t02": 231, "334": [231, 253], "album": 231, "hao": 231, "wang": [231, 397, 399], "19791209300479": 231, "755914248304": 231, "02t20": 231, "03": [231, 253, 486], "344": 231, "wall": 231, "lin": 231, "lei": 231, "24189255811275": 231, "824633725045": 231, "02": [231, 392], "03t18": 231, "633": 231, "893353201782": 231, "28t23": 231, "53": [231, 253, 458], "251": 231, "1030792152809": 231, "03t09": 231, "47": [231, 242, 243, 253, 315, 316, 318], "414": 231, "chen": 231, "32985348833887": 231, "07t07": 231, "30": [231, 253, 315, 316, 318, 389, 434, 436, 441, 478, 496], "038": 231, "zhang": [231, 488], "yang": [231, 488], "15393162789707": 231, "query4": 231, "membercount": 231, "country_count": 231, "personcount": 231, "72057594037932503": 231, "72057594037932473": 231, "72057594037932489": 231, "72057594037932494": 231, "72057594037932501": 231, "72057594037934803": 231, "72057594037934804": 231, "72057594037935005": 231, "72057594037928132": 231, "72057594037935879": 231, "288230376151711799": 231, "country_top100_forums_dict": 231, "personcountforum": 231, "72057594037935702": 231, "72057594037930685": 231, "72057594037932114": 231, "72057594037934231": 231, "72057594037935703": 231, "72057594037935730": 231, "72057594037935734": 231, "72057594037932509": 231, "72057594037935707": 231, "72057594037935708": 231, "72057594037935711": 231, "72057594037935714": 231, "72057594037935719": 231, "72057594037935729": 231, "72057594037935731": 231, "72057594037935724": 231, "72057594037929560": 231, "72057594037931546": 231, "72057594037931545": 231, "72057594037932479": 231, "72057594037932485": 231, "72057594037932505": 231, "72057594037932511": 231, "72057594037935710": 231, "72057594037935722": 231, "72057594037929246": 231, "72057594037928266": 231, "72057594037935713": 231, "72057594037934308": 231, "72057594037934313": 231, "72057594037934302": 231, "72057594037930430": 231, "72057594037934303": 231, "72057594037932482": 231, "72057594037935147": 231, "72057594037935148": 231, "72057594037935157": 231, "72057594037927973": 231, "72057594037929386": 231, "72057594037934315": 231, "72057594037935720": 231, "72057594037935015": 231, "72057594037934300": 231, "72057594037930861": 231, "72057594037934319": 231, "72057594037931542": 231, "72057594037929583": 231, "72057594037933324": 231, "72057594037929182": 231, "72057594037929739": 231, "72057594037934829": 231, "72057594037935658": 231, "72057594037935660": 231, "72057594037935674": 231, "72057594037935682": 231, "72057594037935683": 231, "72057594037935672": 231, "72057594037927978": 231, "72057594037935163": 231, "72057594037935014": 231, "72057594037931544": 231, "72057594037934297": 231, "72057594037927979": 231, "72057594037932474": 231, "72057594037934384": 231, "72057594037932639": 231, "72057594037934380": 231, "72057594037935146": 231, "72057594037935152": 231, "72057594037928134": 231, "72057594037928674": 231, "72057594037929248": 231, "72057594037931240": 231, "72057594037931247": 231, "72057594037931256": 231, "72057594037930958": 231, "72057594037930963": 231, "72057594037931259": 231, "72057594037931260": 231, "72057594037931262": 231, "72057594037929365": 231, "72057594037929419": 231, "72057594037929421": 231, "72057594037929431": 231, "72057594037929434": 231, "72057594037929437": 231, "72057594037929446": 231, "72057594037929447": 231, "72057594037929449": 231, "72057594037929450": 231, "72057594037935166": 231, "72057594037929519": 231, "72057594037929451": 231, "72057594037929452": 231, "72057594037935046": 231, "72057594037932339": 231, "72057594037932481": 231, "72057594037934294": 231, "72057594037932389": 231, "72057594037932976": 231, "72057594037930870": 231, "72057594037931266": 231, "72057594037928092": 231, "72057594037928495": 231, "72057594037929510": 231, "72057594037929517": 231, "72057594037929961": 231, "72057594037929965": 231, "72057594037930242": 231, "72057594037930248": 231, "72057594037930250": 231, "72057594037930313": 231, "72057594037931547": 231, "72057594037935686": 231, "72057594037929052": 231, "72057594037929053": 231, "72057594037929055": 231, "72057594037929057": 231, "72057594037929060": 231, "72057594037934811": 231, "72057594037934813": 231, "72057594037934816": 231, "72057594037934821": 231, "72057594037934822": 231, "72057594037934823": 231, "72057594037934828": 231, "72057594037934835": 231, "72057594037934837": 231, "72057594037934975": 231, "72057594037934976": 231, "72057594037935032": 231, "72057594037935038": 231, "72057594037935045": 231, "72057594037935664": 231, "72057594037935673": 231, "72057594037935678": 231, "72057594037935685": 231, "72057594037931549": 231, "72057594037931550": 231, "72057594037931552": 231, "72057594037931554": 231, "72057594037931557": 231, "72057594037931560": 231, "72057594037931566": 231, "72057594037935671": 231, "72057594037935670": 231, "72057594037934977": 231, "72057594037931543": 231, "72057594037929518": 231, "72057594037935679": 231, "72057594037931575": 231, "72057594037932438": 231, "72057594037932878": 231, "72057594037932886": 231, "72057594037932888": 231, "72057594037927982": 231, "72057594037930526": 231, "72057594037930535": 231, "72057594037930546": 231, "72057594037930976": 231, "72057594037930536": 231, "72057594037931358": 231, "72057594037930366": 231, "72057594037931574": 231, "72057594037932435": 231, "72057594037935020": 231, "72057594037935864": 231, "72057594037933861": 231, "72057594037932440": 231, "72057594037927981": 231, "72057594037931349": 231, "72057594037931366": 231, "72057594037932885": 231, "72057594037927980": 231, "72057594037930529": 231, "72057594037930532": 231, "72057594037931304": 231, "72057594037932433": 231, "72057594037932441": 231, "72057594037934547": 231, "query11": 231, "live": 231, "startdat": 231, "enddat": 231, "216172782113784091": 231, "216172782113784250": 231, "216172782113784403": 231, "216172782113784537": 231, "216172782113784122": 231, "query14": 231, "country1": 231, "country2": 231, "subscor": 231, "award": [231, 488], "chile": 231, "case1": 231, "case2": 231, "case3": 231, "case4": 231, "216172782113784153": 231, "216172782113784100": 231, "216172782113783956": 231, "216172782113784673": 231, "216172782113784252": 231, "216172782113784263": 231, "216172782113784193": 231, "216172782113784242": 231, "216172782113784623": 231, "216172782113784498": 231, "216172782113784251": 231, "216172782113784538": 231, "216172782113784167": 231, "216172782113783864": 231, "216172782113784613": 231, "216172782113784116": 231, "faq": 232, "javasdk": [233, 482], "creation": [234, 315, 389], "transit": [234, 434, 462], "magnitud": [234, 247], "superior": [234, 246, 248, 252], "rich": [234, 245, 248, 250, 315, 317], "neg": [234, 235, 313, 317, 319, 321, 325, 330, 349, 427], "gsl": [234, 235, 245, 315, 316, 317, 318, 322, 329], "gat": [234, 250, 313, 321, 497], "deepwalk": [234, 313, 497], "trans": [234, 313, 497], "pyg": [234, 235, 238, 239, 250, 251, 252], "flexibli": [234, 245, 250, 252], "pytorch": [234, 235, 242, 245, 250, 319, 321], "onlin": [234, 247, 250, 251, 474, 478], "fed": [234, 246, 250], "ek": 234, "aw": [234, 253, 489], "ack": 234, "failov": [234, 252], "concentr": [234, 252, 369], "secur": [235, 250, 251], "industri": [235, 245, 250, 252, 253], "feasibl": [235, 250], "preprocess": [235, 325], "uniformli": [235, 402, 403, 404, 412, 413, 414, 415, 416, 460], "lookup": [235, 250, 325, 465], "topolog": [235, 315], "nn": [235, 237, 240, 241, 242, 243, 246, 250, 256, 313, 325, 492, 497], "ego": [235, 250, 321, 466, 497], "dimension": [235, 241, 246, 250, 314, 316, 317], "conv": [235, 238, 250], "edge_index": [235, 238, 242, 243], "carri": 235, "predict": [235, 241, 245, 246, 250], "asynchron": 235, "tensor": [235, 238, 255, 256, 257, 296, 313, 317, 321, 323, 469, 471], "plaintext": 235, "clearli": [235, 250], "space": [235, 250, 314, 315, 319, 330, 364, 412, 413, 414, 415, 416], "dimens": [235, 237, 240, 241, 246, 250, 314, 412, 413, 414, 415, 457, 492], "batchgraph": 235, "mini": [235, 250], "loss": [235, 237, 240, 241, 242, 243, 246, 250, 325, 492, 497], "mind": 235, "classif": [235, 239, 246, 250, 254, 313, 314, 325], "trainer": [235, 237, 240, 241, 246, 313, 492, 497], "hk": 236, "rm": [236, 325], "4g": 236, "aarch64": 237, "processor": 237, "egographsag": [237, 240, 246, 492], "349": [237, 241, 246, 492], "venu": [237, 246], "confer": [237, 246, 317, 488], "www": [237, 240, 241, 246, 330, 384, 438, 447, 450, 478, 492], "tf": [237, 238, 240, 241, 246, 313, 314, 319, 320, 325, 492, 497], "disable_v2_behavior": [237, 240, 241, 246, 492], "importerror": [237, 240, 241, 246, 492], "load_ogbn_mag": [237, 240, 241, 244, 246, 492, 498], "egosagesuperviseddataload": [237, 241, 246, 492], "localtrain": [237, 240, 241, 246, 492], "node_typ": [237, 240, 241, 246, 313, 315, 316, 319, 322, 325, 329, 492, 497], "class_num": [237, 241, 246, 313, 492, 497], "features_num": [237, 240, 241, 246, 313, 492, 497], "hops_num": [237, 241, 246, 313, 492, 497], "nbrs_num": [237, 240, 241, 246, 492], "epoch": [237, 238, 240, 241, 242, 243, 246, 313, 318, 476, 492, 497], "hidden_dim": [237, 240, 241, 246, 313, 325, 492, 497], "256": [237, 241, 242, 243, 246, 253, 394, 454, 478, 492], "in_drop_r": [237, 241, 246, 492], "learning_r": [237, 240, 241, 246, 325, 492], "reset_default_tf_graph": [237, 241, 246, 492], "act_func": [237, 241, 246, 492], "relu": [237, 241, 246, 492], "dropout": [237, 240, 241, 246, 325, 492], "train_data": [237, 240, 241, 246, 492], "mask": [237, 241, 246, 329, 492], "train_embed": [237, 241, 246, 492], "src_ego": [237, 240, 241, 246, 492], "train_label": [237, 241, 246, 492], "reduce_mean": [237, 241, 246, 313, 325, 492, 497], "sparse_softmax_cross_entropy_with_logit": [237, 241, 246, 313, 325, 492, 497], "logit": [237, 241, 246, 325, 492], "adamoptim": [237, 240, 241, 246, 325, 492], "test_embed": [237, 241, 246, 492], "test_label": [237, 241, 246, 492], "test_indic": [237, 241, 246, 492], "argmax": [237, 241, 242, 243, 246, 492], "output_typ": [237, 241, 246, 300, 469, 492], "test_acc": [237, 241, 242, 243, 246, 492], "div": [237, 241, 246, 492], "reduce_sum": [237, 241, 246, 492], "cast": [237, 241, 244, 246, 325, 477, 492], "float32": [237, 241, 242, 243, 246, 316, 325, 492], "obgn": [237, 241], "mag": [237, 241, 246, 492], "paper_featur": [237, 246, 492], "feat_": [237, 240, 241, 242, 243, 246, 492], "128": [237, 240, 241, 242, 243, 246, 325, 492], "lg": [237, 240, 241, 246, 308, 472, 486, 492], "cite": [237, 240, 241, 246, 492], "gen_label": [237, 240, 241, 246, 308, 472, 492], "val": [237, 240, 241, 246, 313, 329, 472, 492, 497], "85": [237, 240, 241, 246, 253, 256, 472, 492], "seed": [238, 313, 321, 325, 384, 387, 388, 389, 390, 392, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 412, 413, 414, 415, 416, 419, 420, 421, 422, 425, 457, 460, 462], "sampler": [238, 240, 318, 321, 323], "perceptu": 238, "unsupervis": [238, 240, 254, 313, 319, 321, 322, 472], "mainstream": [238, 317, 318], "putback": 238, "outofrangeerror": [238, 318, 319, 325], "evolv": [238, 245, 478], "neighborsampl": [238, 317], "edge_weight": [238, 317, 319], "random_with_replac": 238, "topk": [238, 317, 319], "pad": [238, 317], "expand_factor": [238, 317, 322], "sparsenod": [238, 316, 317, 319], "sparseedg": [238, 316, 317, 319], "layer1": [238, 317], "layer2": [238, 317], "neighbor_sampl": [238, 317], "bui": [238, 245, 316, 317, 318, 319, 322, 325], "i2i": [238, 317, 319], "layer_nod": [238, 317], "int_attr": [238, 316, 317, 318, 322, 325], "layer_edg": [238, 317], "float_attr": [238, 316, 317, 318, 322, 325], "egograph": [238, 250, 313, 321, 497], "negativesampl": [238, 322], "node_weight": [238, 319, 322], "edge_sampl": [238, 318, 322], "negative_sampl": [238, 313, 322, 497], "neg_nod": [238, 322], "heterogen": [238, 241, 246, 248, 250, 314, 315, 316, 317, 319], "randomli": [238, 319, 384, 390, 394, 396, 405, 407, 412, 415, 420, 462], "outv": [238, 313, 317, 319, 325, 496, 497], "overs": 238, "citat": [239, 241, 242, 243, 246, 254, 325, 492], "revisit": [239, 240, 254], "ho2": 239, "with_dataset": [240, 242, 312, 472, 498], "k8s_service_typ": [240, 242, 312, 472, 492], "loadbalanc": [240, 472, 492], "k8s_image_pull_polici": [240, 242, 312, 472], "cell": [240, 458], "metainfo": 240, "obgn_mag": 240, "ogbn_mag_smal": [240, 244, 492, 498], "chose": [240, 241], "i_featur": [240, 241], "argpars": [240, 242], "tfg": 240, "egosageunsuperviseddataload": 240, "parse_arg": [240, 242], "argumentpars": [240, 242], "egosag": 240, "add_argu": [240, 242], "output_dim": [240, 313, 497], "neg_num": 240, "0001": 240, "agg_typ": 240, "drop_out": 240, "neg_sampl": 240, "temperatur": 240, "dim": [240, 242, 243, 412, 413, 414, 415], "src_emb": [240, 313, 497], "dst_emb": 240, "dst_ego": 240, "neg_dst_emb": 240, "neg_dst_ego": 240, "unsupervised_softmax_cross_entropy_loss": 240, "ogbn": [241, 242, 243, 246, 492], "academ": [241, 246, 492], "microsoft": [241, 246, 492], "institut": [241, 246, 492], "accomplish": [241, 246, 384], "word2vec": [241, 246, 492], "load_ogbn_arxiv": [242, 243], "num_server_nod": 242, "num_client_nod": 242, "ogbn_arxiv": [242, 243], "8gi": 242, "ifnotpres": [242, 472], "0a20240115": 242, "glt_graph": [242, 243], "graphlearn_torch": [242, 243], "node_featur": [242, 243], "node_label": [242, 243, 472], "edge_dir": [242, 243], "random_node_split": [242, 243], "num_val": [242, 243], "num_test": [242, 243], "num_client": [242, 243], "manifest_path": 242, "client_folder_path": 242, "kubeflow": [242, 324], "pytorchjob": 242, "torch": [242, 243], "pytorchreplicaspec": 242, "restartpolici": 242, "onfailur": 242, "imagepullpolici": 242, "node_rank": 242, "master_addr": [242, 243], "volumemount": 242, "medium": 242, "sizelimit": 242, "num_worker_replica": 242, "my_pod_nam": 242, "group_mast": 242, "valuefrom": 242, "fieldref": 242, "fieldpath": 242, "distributeddataparallel": 242, "torch_geometr": [242, 243], "glt": [242, 243], "gl_torch_graph": 242, "gltorchgraph": 242, "no_grad": [242, 243], "test_load": [242, 243], "dataset_nam": [242, 243], "eval": [242, 243, 469], "y_true": [242, 243], "devic": [242, 243, 253], "del": [242, 243, 327, 465], "y_pred": [242, 243], "keepdim": [242, 243], "run_client_proc": 242, "num_serv": [242, 243], "client_rank": [242, 243], "server_rank_list": 242, "training_pg_master_port": 242, "init_cli": [242, 243], "master_port": [242, 243], "server_client_master_port": [242, 243], "num_rpc_thread": [242, 243], "client_group_nam": 242, "k8s_glt_client": 242, "is_dynam": [242, 243], "current_ctx": 242, "get_context": 242, "init_process_group": 242, "gloo": 242, "world_siz": 242, "init_method": 242, "train_load": [242, 243], "distneighborload": [242, 243], "num_neighbor": [242, 243], "input_nod": [242, 243], "collect_featur": [242, 243], "to_devic": [242, 243], "worker_opt": [242, 243], "remotedistsamplingworkeropt": [242, 243], "server_rank": 242, "worker_devic": [242, 243], "worker_concurr": [242, 243], "buffer_s": [242, 243], "256mb": 242, "prefetch_s": [242, 243], "workload_typ": [242, 243], "in_channel": [242, 243], "hidden_channel": [242, 243], "num_lay": [242, 243], "out_channel": [242, 243], "device_id": 242, "adam": [242, 243], "lr": [242, 243], "001": 242, "arxiv": [242, 243, 330, 373, 388, 389, 390, 404, 457], "zero_grad": [242, 243], "log_softmax": [242, 243], "nll_loss": [242, 243], "backward": [242, 243, 250, 319, 416, 472], "03d": [242, 243], "04f": 242, "barrier": 242, "4f": [242, 243], "shutdown": 242, "shutdown_cli": [242, 243], "__name__": [242, 325], "__main__": [242, 325], "supervis": [242, 246, 254, 314, 317, 325, 472, 492], "sage": 242, "9997": 242, "train_loader_master_port": 242, "9998": 242, "test_loader_master_port": 242, "9999": 242, "9001": 242, "9002": 242, "9003": 242, "9004": 242, "k8s_launch": 242, "ogb": 243, "nodeproppr": 243, "unsqueez": 243, "acc": 243, "512": [243, 319], "1gb": 243, "shut": 243, "trivial": [244, 252, 381], "bucket": [244, 472, 488], "_e": [244, 327, 474, 498], "ldbc_sampl": [244, 478, 496, 498], "person_0_0": [244, 478, 493, 498], "didn": [244, 253], "person_knows_person_0_0": [244, 478, 493, 498], "comment_0_0": [244, 493, 498], "person_likes_comment_0_0": [244, 498], "deal": [244, 248, 317], "unseen": [244, 250, 480], "person_likes_post_0_0": [244, 498], "post_0_0": [244, 498], "ndarrai": [244, 257, 272, 283, 316, 317, 319, 322, 327, 329, 465, 498], "apart": [244, 412], "comment_replyof_comment_0_0": [244, 493, 498], "col_0": [244, 498], "col_1": [244, 498], "coo": [244, 476, 498], "array_v": [244, 498], "col": [244, 498], "array_": [244, 498], "s3": [244, 327, 498], "hood": 244, "distributedli": [244, 315, 321, 323, 324, 325], "fsspec": [244, 498], "kwarg": [244, 256, 257, 264, 275, 287, 291, 292, 309, 312, 322, 327, 328, 329, 472], "ds1": [244, 498], "datafil": [244, 498], "ds2": [244, 498], "graphscope_bucket": [244, 498], "hangzhou": [244, 314, 498], "ds3": [244, 498], "9000": [244, 478, 498], "extra_conf": [244, 498], "conf1": [244, 498], "d34": [244, 498], "client_kwarg": [244, 498], "region_nam": [244, 498], "east": [244, 498], "ossf": [244, 498], "subclass": [244, 255, 465], "abstractfilesystem": [244, 498], "abstractbufferfil": 244, "_upload_chunk": [244, 498], "_initiate_upload": [244, 498], "_fetch_rang": [244, 498], "register_implement": [244, 498], "protocol_nam": [244, 498], "protocol_file_system": [244, 498], "direction": 244, "exce": [244, 423, 424], "super": [244, 256, 315, 319], "precis": [244, 250, 457], "modular": [245, 457], "rapidli": [245, 317], "seller": 245, "buyer": [245, 249], "fraudul": 245, "sell": 245, "suspici": 245, "fraud": [245, 252], "feed": [245, 308, 313, 316, 319, 325, 329, 472, 497], "webui": 245, "diversifi": 245, "ingest": [245, 478], "rapid": 245, "analyst": 245, "resembl": [245, 457, 462, 464], "olap": 245, "gen": [245, 319], "dataflow": [245, 247], "arriv": 245, "financi": 245, "billion": [245, 248, 252], "preval": 245, "miniconda": 246, "scientif": 246, "field_of_studi": [246, 492], "subject": 246, "4307": [246, 492], "n1": 246, "n2": 246, "proven": 246, "2014": [246, 330, 492], "2020": [246, 492], "ret1": [246, 492], "k_core": [246, 256, 330, 466, 488, 492], "ret2": [246, 492], "kcore": [246, 492], "downstream": [246, 319], "train_sag": 246, "130": [246, 492], "conduit": 246, "icde2023": 247, "sigmod2017": [247, 488, 494], "gra": 247, "ph": 247, "arallel": 247, "ngine": 247, "opensourc": 247, "raph": 247, "nalysi": 247, "elat": 247, "ransact": 247, "loos": [247, 252, 474], "mysql": [247, 474], "nutshel": [247, 474], "exploit": [247, 474], "ahead": [247, 474], "wal": [247, 474], "etriev": 247, "terfac": 247, "portabl": [247, 477], "rust": [247, 477, 478], "handler": [247, 472], "chive": 247, "guardian": 247, "galaxi": 247, "steal": 247, "tackl": [247, 248], "imbal": 247, "nvlink": 247, "acut": 247, "asymmetr": 247, "holist": 247, "innov": 247, "speedup": 247, "cncf": 247, "sandbox": 247, "soon": [247, 251, 252, 253, 316], "amplifi": 247, "dissoci": 247, "ly": 247, "dag": [247, 256, 257, 275, 327, 465, 469, 472], "laptop": 247, "loop": [247, 330, 340, 353, 392, 394, 396, 398, 404, 412, 413, 414, 415, 416, 422, 425, 465, 466, 496], "correl": [247, 330], "subtask": 247, "earli": 247, "nsdi": [247, 494], "legaci": 247, "interchang": 247, "memoiz": 247, "vldb2021": 247, "artial": 247, "ncrement": 247, "transport": 248, "protein": [248, 406], "uncov": 248, "vari": [248, 314], "unless": [248, 317, 465], "discov": 248, "discoveri": [248, 250, 472, 478], "rough": 248, "accordingli": [248, 305], "snap": 248, "stanford": [248, 456], "cs224w": 248, "constitu": 248, "bellman": [248, 330], "ford": [248, 330], "wiki": [248, 256, 427, 431, 432, 433, 434, 436, 437, 438, 444, 445, 446, 447, 449, 450, 451, 452], "s_algorithm": 248, "towardsdatasci": 248, "9bd8951e7da": 248, "road": [248, 480], "logist": 248, "deliveri": 248, "media": 248, "nontrivi": [248, 437], "steep": 248, "sought": 248, "monei": [249, 252], "launder": [249, 252], "exact": [249, 394, 396, 492], "exclud": 249, "purchas": 249, "bolder": 249, "border": 249, "sens": [249, 457, 472], "worst": 249, "embrac": 249, "grasp": 249, "drug": 250, "likelihood": 250, "biologi": 250, "valuabl": 250, "bioinformat": 250, "chemic": 250, "promis": 250, "driven": [250, 457, 477], "carefulli": 250, "rewind": 250, "stack": 250, "convolut": [250, 321], "weigh": 250, "choic": [250, 477, 478], "huge": [250, 480], "gradient": 250, "recal": 250, "f1": [250, 327], "assess": [250, 325, 442], "irregular": 250, "unstructur": 250, "pool": 250, "hardwar": [250, 481], "undergo": 250, "perceiv": 250, "maxgraph": [251, 494], "2x": 251, "excel": 251, "elast": [251, 478], "encrypt": 251, "geminigraph": [252, 253], "plato": [252, 253], "empir": 252, "enjoi": 252, "janusgraph": 252, "nebula": 252, "dbm": 252, "relaunch": [252, 478], "recoveri": 252, "coars": 252, "grain": 252, "invest": 252, "trace": [252, 256], "dgl": 252, "nebular": 252, "movement": [252, 319], "grade": 253, "r6": 253, "8xlarg": 253, "alibabacloud": 253, "ec": 253, "xl": 253, "a038f97": 253, "170e7d3": 253, "21009d6": 253, "v4": 253, "mpich": 253, "fair": 253, "huge_pag": 253, "jemalloc": 253, "o3": 253, "stub": [253, 259, 261, 394, 422, 425], "determinist": [253, 258, 472, 478], "cdlp": [253, 256, 488], "load_direct": 253, "load_undirected_from_direct": 253, "reformat": 253, "mark": [253, 330], "datagen": 253, "9_0": 253, "fb": 253, "62": 253, "9_1": 253, "78": [253, 384, 458], "9_2": 253, "zf": 253, "88": [253, 397, 399], "60": [253, 330, 458, 478], "61": 253, "176": [253, 421], "graph500": 253, "71": [253, 330, 402, 406, 412], "79": [253, 397, 399], "friendster": 253, "97": 253, "39": [253, 315, 316, 318, 330, 458, 488, 490], "86": 253, "57": 253, "126": [253, 398], "98": 253, "83": 253, "66": 253, "1695": 253, "2742": 253, "3600": 253, "425": 253, "55": [253, 364], "lcc": 253, "521": 253, "51": [253, 458], "296": 253, "1859": 253, "201": [253, 461], "842": 253, "68": 253, "competitor": 253, "pagerank_loc": 253, "65": 253, "72": 253, "84": 253, "63": [253, 401, 403], "gunrock": 253, "0c9a96": 253, "grout": 253, "5ce160": 253, "v7": 253, "v10": 253, "gn6v": 253, "c8g1": 253, "16xlarg": 253, "8x": 253, "16gb": 253, "nvidia": 253, "v100": 253, "gb": 253, "soc": [253, 385, 386], "livejournal1": 253, "89": 253, "9345": 253, "215": [253, 454], "560": 253, "3029": 253, "129": [253, 420], "389": 253, "155": 253, "0549": 253, "sinaweibo": 253, "1649": 253, "647": 253, "orkut": 253, "105": [253, 385, 386], "121": 253, "193": 253, "658": 253, "3201": 253, "7677": 253, "137": [253, 392], "2139": 253, "319": 253, "261": 253, "69": [253, 452, 458], "235": 253, "567": 253, "283": 253, "073": 253, "6619": 253, "45": [253, 315, 316, 318, 394], "150": 253, "87299": 253, "162": 253, "60403": 253, "9676": 253, "141": 253, "347": 253, "7772": 253, "0118": 253, "306": 253, "8618": 253, "9134": 253, "467": 253, "60801": 253, "8666": 253, "3501": 253, "870": 253, "6451": 253, "198": 253, "829": 253, "5036": 253, "229": 253, "024": 253, "483": 253, "178": 253, "5593": 253, "807": 253, "367": 253, "6946": 253, "2339": 253, "jupyt": [254, 472], "notebook": [254, 472], "jupyterlab": 254, "playground": [254, 499], "bipartit": [254, 313, 315, 371, 419, 420, 421, 453, 497], "grapeengin": 255, "vineyardserv": 255, "grapeinst": 255, "graphscopeserv": 255, "inlin": 255, "dag_fil": 255, "dagfil": 255, "rundagfil": 255, "subscrib": 255, "charg": 255, "commspec": [255, 474, 477, 479], "comm_spec": [255, 474, 477, 479], "vineyard_socket": 255, "bl": 255, "dispatchresult": 255, "onrec": 255, "commanddetail": 255, "gsobject": 255, "objectmanag": 255, "appentri": 255, "icontextwrapp": 255, "ifragmentwrapp": 255, "projector": 255, "propertygraphutil": 255, "objecttyp": 255, "putobject": 255, "obj": 255, "removeobject": 255, "getobject": [255, 478, 479], "hasobject": 255, "analyticalserv": 255, "startserv": 255, "stopserv": 255, "engineconfig": 255, "tojsonstr": 255, "vineyard_rpc_endpoint": 255, "enable_java_sdk": 255, "setcommand": 255, "aggregatepolici": 255, "kpickfirst": 255, "kpickfirstnonempti": 255, "krequireconsist": 255, "kconcat": 255, "kpickfirstnonemptygraphdef": 255, "kmergegraphdef": 255, "worker_id": 255, "error_cod": 255, "set_error": 255, "has_large_data": 255, "set_graph_def": 255, "graphdefpb": 255, "graph_def": 255, "set_data": 255, "large_data": 255, "inarch": 255, "arc": 255, "aggregate_polici": 255, "fragmentwrapp": 255, "addcolumn": 255, "vdata_t": 255, "edata_t": 255, "arrowvertexmap": 255, "internaltyp": 255, "arrowprojectedfragmentbas": 255, "bareregist": 255, "internal_oid_t": 255, "property_graph_typ": 255, "eid_typ": 255, "vertexrang": [255, 258], "inner_vertices_t": 255, "outer_vertices_t": 255, "vertices_t": 255, "sub_vertices_t": 255, "nbr_t": 255, "arrow_projected_fragment_impl": 255, "compact_nbr_t": 255, "compactnbr": 255, "nbrunit": 255, "compact_adj_list_t": 255, "compactadjlist": 255, "const_adj_list_t": 255, "const_compact_adj_list_t": 255, "property_vertex_map_t": 255, "arrowprojectedvertexmap": 255, "label_id_typ": 255, "prop_id_typ": 255, "property_graph_t": 255, "eid_array_t": 255, "data_t": 255, "inner_vertex_array_t": 255, "outer_vertex_array_t": 255, "objectmeta": 255, "preparetorunapp": 255, "prepareconf": 255, "fnum": [255, 258], "vertex_prop_id": 255, "edge_prop_id": 255, "mirrorvertic": 255, "getid": 255, "getinternalid": 255, "getfragid": 255, "typedarrai": 255, "value_typ": 255, "gid2vertex": 255, "vertex2gid": 255, "getinnerverticesnum": 255, "getouterverticesnum": 255, "getverticesnum": 255, "getedgenum": [255, 479], "getinedgenum": [255, 479], "getoutedgenum": [255, 479], "getoutgoingedgenum": 255, "getincomingedgenum": 255, "gettotalverticesnum": 255, "isinnervertex": 255, "getoutervertex": 255, "getinnervertexid": 255, "getinnervertexinternalid": 255, "getoutervertexid": 255, "getoutervertexinternalid": 255, "gid2oid": 255, "oid2gid": 255, "innervertexgid2vertex": 255, "outervertexgid2vertex": 255, "getoutervertexgid": 255, "getinnervertexgid": 255, "compact_": 255, "enable_if": 255, "getincominginnervertexadjlist": 255, "getoutgoinginnervertexadjlist": 255, "getincomingoutervertexadjlist": 255, "getoutgoingoutervertexadjlist": 255, "src_fid": 255, "dst_fid": 255, "getlocaloutdegre": 255, "getlocalindegre": 255, "destlist": 255, "iedest": 255, "oedest": 255, "ioedest": 255, "getvertexmap": 255, "get_out_edges_ptr": 255, "get_in_edges_ptr": 255, "get_oe_offsets_begin_ptr": 255, "get_oe_offsets_end_ptr": 255, "get_ie_offsets_begin_ptr": 255, "get_ie_offsets_end_ptr": 255, "get_edata_array_accessor": 255, "get_vdata_array_accessor": 255, "get_arrow_frag": 255, "vertex_map_id": 255, "local_vertex_map": [255, 479], "getoid": 255, "getgid": 255, "offset2lid": 255, "getoffsetfromlid": 255, "getlidfromgid": 255, "getfidfromgid": 255, "oid_t_": 255, "vid_t_": 255, "arrowfragmentload": 255, "efil": [255, 479], "vfile": [255, 479], "graph_info": 255, "leaf": [255, 257, 302, 330, 375, 459], "table_vec_t": 255, "loadvertexedget": 255, "loadvertext": 255, "loadedget": 255, "loadfrag": 255, "loadfragmentasfragmentgroup": 255, "addlabelstofrag": 255, "frag_id": [255, 474, 479], "adddatatoexistedvlabel": 255, "adddatatoexistedelabel": 255, "addlabelstofragmentasfragmentgroup": 255, "extendlabeldata": 255, "extend_typ": 255, "initpartition": 255, "doxygenclass": 255, "arrowfragmentappend": 255, "doxygen": 255, "runner": [255, 488], "_build": 255, "appbas": 255, "defaultmessagemanag": 255, "need_split_edg": 255, "konlyout": 255, "propertyappbas": 255, "propertymessagemanag": 255, "propertyautoappbas": 255, "propertyautomessagemanag": 255, "app_t": 255, "defaultwork": 255, "parallelenginespec": 255, "pe_spec": 255, "defaultparallelenginespec": 255, "getcontext": 255, "ostream": 255, "parallelpropertywork": 255, "parallelpropertymessagemanag": 255, "propertyautowork": 255, "pointer": 255, "appfram": 255, "creatework": 255, "deletework": 255, "lib_path": 255, "worker_handl": 255, "queryarg": 255, "query_arg": [255, 300, 469], "context_kei": 255, "frag_wrapp": 255, "functiontyp": 255, "argsnum": 255, "argsunpack": 255, "datatyp": 255, "argtypeat": 255, "defaultpropertywork": 255, "ctx_t": 255, "ctxwrapperbuild": 255, "contextwrapp": 255, "vertexpropertycontext": [255, 488], "contextbas": 255, "labeledvertexdatacontext": 255, "contextdatatyp": 255, "icolumn": 255, "get_column": 255, "get_typed_column": 255, "vertex_properti": [255, 256, 258], "properties_map": 255, "vertexdatacontextwrapp": 255, "ivertexdatacontextwrapp": 255, "fragment_wrapp": 255, "unique_ptr": 255, "tondarrai": 255, "todatafram": 255, "tovineyardtensor": 255, "tovineyarddatafram": 255, "toarrowarrai": 255, "tensorcontext": [255, 257], "set_shap": 255, "tensor_t": 255, "tensorcontextwrapp": 255, "itensorcontextwrapp": 255, "cmake_extra_opt": 256, "asset": 256, "labeled_vertex_data": 256, "dynamic_vertex_data": 256, "labeled_vertex_properti": 256, "cpp_pregel": 256, "cython_pi": 256, "cython_pregel": 256, "appdagnod": [256, 291, 297], "__init__": [256, 313, 320, 327, 328, 329, 465, 466, 468, 472, 478, 497], "bytesio": [256, 264], "is_compat": 256, "graphdagnod": [256, 268, 282, 283, 299, 306, 308, 327, 328, 472], "invalidargumenterror": [256, 472], "scannererror": 256, "incorrect": 256, "signatur": [256, 319, 465], "full_jar_path": [256, 488], "java_app_class": [256, 488], "neccessari": 256, "resouc": 256, "__call__": 256, "qualifi": [256, 488], "app_asset": [256, 268, 274], "app_nod": 256, "__del__": 256, "unload": [256, 279, 297, 299], "attribute_assortativity_coeffici": [256, 488], "assort": 256, "ref": [256, 477], "joint": [256, 422, 423, 424, 425, 466], "newman": [256, 330, 394, 396, 457], "026126": 256, "2003": [256, 330, 387, 394, 405, 413], "numeric_assortativity_coeffici": [256, 488], "analog": 256, "k_": [256, 366, 430], "rac": 256, "s_i": 256, "sum_": [256, 330, 398], "w_": [256, 330, 398], "ij": [256, 330], "k_j": 256, "valueerror": [256, 312, 327, 330, 404, 461, 472], "barrat": 256, "barth\u00e9lemi": 256, "pastor": 256, "satorra": 256, "vespignani": 256, "pna": 256, "101": [256, 494], "3747": 256, "3752": 256, "2004": [256, 419], "average_shortest_path_length": [256, 330, 466, 488], "frac": [256, 330, 340, 398], "vertexdatacontextdagnod": [256, 257], "avg_clust": [256, 488], "degree_threshold": 256, "threshold": [256, 412, 413, 414, 415], "1e9": 256, "unweight": [256, 330], "foster": 256, "grassberg": 256, "paczuski": 256, "107": [256, 418], "10815": 256, "1e": [256, 325, 330, 384], "06": [256, 330], "html": [256, 330, 414, 417, 426, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 445, 447], "gv": 256, "hits_algorithm": 256, "vertexpropertycontextdagnod": [256, 257], "is_simple_path": [256, 488], "nonempti": 256, "biject": [256, 460], "smallest": [256, 417, 437, 447], "pairwis": 256, "k_shell": [256, 488], "katz_centrality_numpi": [256, 330], "auttenu": 256, "maximun": 256, "min_progress": 256, "progress_tri": 256, "progress": [256, 409], "met": 256, "blondel": 256, "et": [256, 462], "al": [256, 462], "stat": [256, 412, 414], "mech": 256, "10008": 256, "2008": [256, 384, 407], "sotera": 256, "lpa_u2i": [256, 488], "labeledvertexpropertycontextdagnod": [256, 257], "pagerank_nx": [256, 488], "max_it": [256, 330, 384], "tol": [256, 330, 384], "solver": 256, "voterank": [256, 488], "unsign": [256, 478], "basecontextdagnod": [257, 327], "bound_app": [257, 274], "contextdagnod": 257, "to_vineyard_tensor": [257, 471, 488], "to_vineyard_datafram": [257, 471, 488], "lazi": [257, 327, 472], "sg": 257, "resultdagnod": [257, 292], "r4": [257, 480], "62586": 257, "comparis": 257, "alphabet": [257, 471], "tensorcontextdagnod": 257, "quer": 257, "labeledvertexdatacontextdagnod": 257, "label_nam": [257, 471], "column_nam": [257, 471], "labeld": 257, "context_nod": 257, "result_schema": 257, "dynamicvertexdatacontext": 257, "dag_nod": 257, "get_str": 258, "get_doubl": 258, "edge_label_id": 258, "edge_label_nam": 258, "incoming_edg": 258, "register_aggreg": 258, "pregelaggregatortyp": 258, "aggr_typ": 258, "get_aggregated_valu": 258, "get_total_vertices_num": 258, "vertex_property_num": 258, "vertex_label_nam": 258, "vertex_label_id": 258, "edge_property_num": 258, "get_vertex_label_by_id": 258, "get_vertex_label_id_by_nam": 258, "get_edge_label_by_id": 258, "get_edge_label_id_by_nam": 258, "edge_properti": 258, "get_vertex_property_id_by_nam": 258, "vertex_property_nam": [258, 477], "get_vertex_property_by_id": 258, "vertex_property_id": 258, "get_edge_property_id_by_nam": 258, "edge_property_nam": 258, "get_edge_property_by_id": 258, "edge_property_id": 258, "kboolandaggreg": 258, "kbooloraggreg": 258, "kbooloverwriteaggreg": 258, "overwritten": 258, "kdoubleminaggreg": 258, "kdoublemaxaggreg": 258, "kdoublesumaggreg": 258, "kdoubleproductaggreg": 258, "kdoubleoverwriteaggreg": 258, "kint64minaggreg": 258, "kint64maxaggreg": 258, "kint64sumaggreg": 258, "kint64productaggreg": 258, "kint64overwriteaggreg": 258, "ktextappendaggreg": 258, "kalongoutgoingedgetooutervertex": 258, "kalongincomingedgetooutervertex": 258, "kalongedgetooutervertex": 258, "get_total_nodes_num": 258, "get_nodes_num": 258, "get_inner_nodes_num": 258, "get_outer_nodes_num": 258, "outer_nod": 258, "get_node_fid": 258, "is_inner_nod": 258, "is_outer_nod": 258, "get_nod": [258, 316], "get_outer_nod": 258, "get_node_id": 258, "get_incoming_edg": 258, "has_child": 258, "child": [258, 367, 459], "has_par": 258, "parent": [258, 260, 300, 305, 459], "get_indegre": 258, "get_outdegre": 258, "kmaxaggreg": 258, "ksumaggreg": 258, "kproductaggreg": 258, "koverwriteaggreg": 258, "subproject": 260, "scratch": 260, "never": [260, 465], "hopefulli": 260, "dmaven": 260, "antrun": 260, "jni": 260, "gae_java": 261, "graphscope_typ": 263, "graphscopetyp": 263, "myalgorithm": 263, "filenotfounderror": 264, "typeerror": [264, 300, 472], "arrowproperti": [265, 327], "subrang": 265, "loader_op": 266, "notimplementederror": 266, "run_app": [271, 272, 287, 295, 296], "copy_typ": 273, "session_id": [275, 279, 300, 327, 328, 465, 469], "graph_typ": [275, 465], "graphtyp": [275, 465, 474, 479], "view_typ": 276, "vertex_or_edge_label_list": 277, "graph_util": 277, "vertexlabel": 277, "op_typ": [279, 300, 469], "uiliti": 279, "interactive_queri": [284, 472], "gremlin_script": [284, 328], "request_opt": [284, 328], "interactivequerydagnod": 284, "modify_typ": [285, 286], "attr": [285, 286, 300, 319, 332, 333, 334, 465, 468], "type_pb2": [285, 286, 290], "nx_add_edg": 285, "nx_del_edg": 285, "nx_update_edg": 285, "nx_add_nod": 286, "nx_del_nod": 286, "nx_update_nod": 286, "fd": [287, 292, 488], "storage_opt": [287, 292], "write_opt": [287, 292], "adaptor": 287, "result_path": [287, 292], "vertex_collect": 288, "edge_collect": 288, "report_typ": 290, "variati": 290, "node_num": [290, 492, 496], "has_nod": [290, 465], "has_edg": [290, 465], "node_data": 290, "neighbors_by_nod": 290, "succs_by_nod": 290, "preds_by_nod": 290, "neighbors_by_loc": 290, "succs_by_loc": 290, "preds_by_loc": 290, "deg_by_nod": 290, "in_deg_by_nod": 290, "out_deg_by_nod": 290, "deg_by_loc": 290, "in_deg_by_loc": 290, "out_deg_by_loc": 290, "nodes_by_loc": 290, "loc": 290, "multigraph": [290, 330, 332, 340, 344, 353, 358, 359, 385, 386, 394, 396, 409, 410, 411, 465, 468], "multidigraph": [290, 332, 344, 353, 358, 359, 396, 404, 405, 463, 465], "large_attr": [300, 469], "types_pb2": [300, 465], "operationtyp": 300, "opdef": [300, 304], "attrvalu": [300, 327, 496], "largeattrvalu": 300, "op_def_pb2": 304, "incoming_data": [306, 327, 472], "as_default": [306, 472], "alia": [311, 313, 319, 465, 472, 497], "k8s_gs_imag": [312, 472, 490], "k8s_etcd_imag": 312, "k8s_image_pull_secret": [312, 472], "k8s_coordinator_cpu": [312, 472], "k8s_coordinator_mem": [312, 472], "k8s_vineyard_cpu": [312, 472], "k8s_mars_worker_cpu": [312, 472], "k8s_mars_worker_mem": [312, 472], "k8s_mars_scheduler_cpu": [312, 472], "k8s_mars_scheduler_mem": [312, 472], "with_mar": [312, 472], "k8s_waiting_for_delet": [312, 472], "dataset_download_retri": 312, "k8s_deploy_mod": [312, 472], "kv": 312, "cooper": [313, 327], "\u02bbegograph": 313, "\u02bbegotensor": 313, "sample_se": [313, 497], "positive_sampl": [313, 497], "receptive_fn": [313, 497], "egotensor": [313, 321, 497], "egoflow": [313, 321, 497], "cora": [313, 325, 497], "convers": [313, 314, 474], "node_t": [313, 314, 325, 497], "edge_table_with_self_loop": [313, 497], "train_tabl": [313, 497], "val_tabl": [313, 497], "test_tabl": [313, 497], "dataset_fold": [313, 497], "decod": [313, 314, 315, 325, 497], "attr_typ": [313, 314, 315, 325, 497], "1433": [313, 325, 497], "attr_delimit": [313, 314, 315, 497], "learningbasedmodel": [313, 497], "categorical_attrs_desc": [313, 497], "_sample_se": [313, 497], "_positive_sampl": [313, 497], "_receptive_fn": [313, 497], "ego_flow": [313, 497], "src_ego_spec": [313, 497], "pos_src_ego_tensor": [313, 497], "identityencod": [313, 497], "widendeepencod": [313, 497], "feature_encod": [313, 497], "gcnconv": [313, 497], "sparseegographencod": [313, 497], "_encod": [313, 497], "conv_lay": [313, 497], "_supervised_loss": [313, 497], "full_graph_mod": [313, 497], "localtftrain": [313, 497], "model_fn": [313, 325, 497], "load_graph": [313, 497], "server_id": [313, 497], "server_count": [313, 315, 325, 497], "tracker": [313, 325, 497], "bought": 314, "saturdai": 314, "morn": 314, "bigint": 314, "shanghai": 314, "localfilesystem": 314, "pai": [314, 319, 320], "tab": 314, "s2": [314, 430], "215340": 314, "933091": 314, "grei": 314, "362519": 314, "097545": 314, "chapter": [314, 315, 317, 411, 448], "dscript": 314, "dentryfil": 314, "dtabl": 314, "prj": 314, "define_str": 314, "node_sourc": 314, "edge_sourc": 314, "hash": [314, 327], "bucket_s": 314, "greatli": [314, 315, 477], "your_attr_typ": 314, "you_delimit": 314, "scr_id": 314, "10001": [314, 315, 316, 318], "feature1": 314, "10002": [314, 315, 316, 318], "feature2": 314, "10003": [314, 315, 316, 318], "feature3": 314, "124": 314, "\u02bbitem_node_decod": 314, "\u02bbuser_node_decod": 314, "\u02bbedge_decod": 314, "item_node_decod": 314, "user_node_decod": 314, "edge_decod": [314, 325], "graph_object": 314, "commod": 315, "swing": [315, 316], "30001": [315, 316, 318], "30002": [315, 316, 318], "30003": [315, 316, 318], "table_1": 315, "table_2": 315, "dest": 315, "10004": [315, 316], "20001": [315, 316, 318], "20003": [315, 316, 318], "20004": [315, 316, 318], "46": [315, 316, 318, 330, 452], "ui_decod": 315, "uv_decod": 315, "table_3": 315, "table_4": 315, "click_v": 315, "task_index": [315, 325], "task_count": 315, "atyp": 315, "job_nam": [315, 325], "worker_host": 315, "necessarili": [315, 427], "serious": 315, "decreas": [315, 394, 396], "speak": 315, "client_count": [315, 325], "wait_for_clos": [315, 325], "matter": [315, 471], "get_topologi": 316, "dst_type": 316, "figure1": 316, "topo": 316, "print_al": 316, "string_attr": 316, "src_node": 316, "dst_node": 316, "dense_shap": 316, "__next__": 316, "table1": 316, "u_nod": 316, "table2": 316, "table3": 316, "click_edg": 316, "table4": 316, "conduc": 317, "recept": [317, 321], "ai": 317, "meta_path": 317, "layer_id": 317, "famili": [317, 330, 368, 426, 454], "random_without_replac": 317, "ueri": 317, "default_neighbor_id": 317, "set_default_neighbor_id": [317, 326], "xx": 317, "set_padding_mod": 317, "circular": [317, 319, 369], "throw": 318, "nodesampl": 318, "node_sampl": 318, "by_ord": 318, "node_from": [318, 329], "edge_src": [318, 329], "edge_dst": [318, 329], "edgesampl": 318, "matur": 319, "dl": 319, "sheer": 319, "sink": 319, "generatortyp": [319, 329], "won": [319, 480], "cursor": 319, "ingo": 319, "query\u5bf9\u8c61": 319, "outneg": [319, 322], "inneg": [319, 322, 325], "candid": [319, 322], "u2i": 319, "ouv": 319, "func": 319, "edeg": 319, "src_1hop": 319, "dst_1hop": 319, "neg_i": 319, "neg_i_1hop": 319, "params_list": 319, "arrang": 319, "anonym": [319, 457], "src_attr": 319, "neg_attr": 319, "encode_fn": [319, 325], "src_atr": 319, "outnegv": 319, "gen1": 319, "gen2": 319, "circumst": 319, "foewa": 319, "from_gener": [319, 325], "make_one_shot_iter": [319, 325], "get_next": [319, 325], "zhangjiak": 320, "cp27": 320, "cp27mu": 320, "linux_x86_64": 320, "autoconf": 320, "automak": 320, "libtool": 320, "your_wheel_nam": [320, 323], "test_cpp_ut": 320, "test_python_ut": 320, "fastgcn": [321, 497], "graphsaint": 321, "amd": 321, "object_typ": 322, "oprequest": 323, "req": 323, "oprespons": 323, "params_": 323, "tensors_": 323, "redirect": [323, 403], "rewrit": 323, "till": [323, 472], "happen": [323, 477, 480], "stitch": 323, "myoper": 323, "register_oper": 323, "opnam": 323, "randomsampl": 323, "xxxsampler": 323, "litestr": 324, "getfiles": 324, "getrecordcount": 324, "register_file_system": 324, "myfilesystem": 324, "registr": 324, "ppi": 325, "train_supervis": 325, "gen_test_data": 325, "getopt": 325, "argv": 325, "cur_path": 325, "elif": 325, "102": [325, 461], "dirnam": 325, "rf": 325, "\u4f60\u9700\u8981\u628agen_test_data": 325, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 325, "fi": 325, "sleep": 325, "case_bas": 325, "genetic_algorithm": 325, "neural_network": 325, "probabilistic_method": 325, "reinforcement_learn": 325, "rule_learn": 325, "bag": 325, "1033": 325, "103482": 325, "103515": 325, "31336": 325, "1061127": 325, "05882353": 325, "1106406": 325, "n_featur": 325, "node_decod": 325, "n_class": 325, "140": [325, 388], "n_hop": 325, "n_epoch": 325, "tripl": 325, "graph_object_cn": 325, "sample_gen": 325, "input_fn": 325, "sample_input_fn": 325, "float64": 325, "tensorshap": 325, "layer_featur": 325, "aggregate_fn": 325, "self_vec": 325, "neigh_vec": 325, "raw_feat_layer_index": 325, "layer_index": 325, "variable_scop": 325, "_layer": 325, "auto_reus": 325, "neigh_weight": 325, "get_vari": 325, "self_weight": 325, "output_shap": 325, "get_shap": 325, "neigh_mean": 325, "from_neigh": 325, "matmul": 325, "from_self": 325, "add_n": 325, "leaky_relu": 325, "depth_to_encod": 325, "h_self_vec": 325, "h_neighbor_vec": 325, "features_column": 325, "feature_column": 325, "numeric_column": 325, "loss_fn": 325, "train_op": 325, "global_step": 325, "get_global_step": 325, "estimatorspec": 325, "modekei": 325, "set_xxx": 326, "set_yyi": 326, "other_model": 326, "fill": [326, 366, 377, 387, 421], "nbr_id": 326, "set_default_int_attribut": 326, "set_default_float_attribut": 326, "set_default_string_attribut": 326, "set_inter_threadnum": 326, "intra": [326, 384, 387], "set_intra_threadnum": 326, "16mb": 326, "reset": 326, "enlarg": 326, "set_rpc_message_max_s": 326, "objectnam": 327, "degener": 327, "unspecifi": [327, 342], "consolidate_column": 327, "result_column": 327, "consolid": [327, 479, 486], "weight0": 327, "weight1": 327, "graph_nod": 327, "detach": 327, "varaibl": 327, "lexic": 327, "classmethod": 327, "graphar_store_in_loc": [327, 476], "save_to": [327, 476], "graphar_graph_nam": [327, 476], "graphar_file_typ": [327, 476], "parquet": [327, 476], "orc": [327, 476], "graphar_vertex_chunk_s": [327, 476], "graphar_edge_chunk_s": [327, 476], "graphschema": [327, 465], "schema_path": 327, "currrent": 327, "object_id": [327, 328, 329], "filetyp": 327, "ordinari": 327, "graph_build": 327, "deprec": [327, 345, 443], "group_id": 327, "member_s": 327, "leader_student_id": 327, "student": 327, "member_student_id": 327, "group_for_teacher_stud": 327, "group_nam": 327, "establish_d": 327, "teacher_in_charge_id": 327, "teacher": 327, "lesson_num": 327, "avg_scor": 327, "student_id": 327, "salari": 327, "teacher_id": 327, "both_in_out": 327, "unambigu": 327, "orign": 327, "interactivequeri": [328, 470, 472, 496], "frontend_gremlin_endpoint": 328, "frontend_cypher_endpoint": 328, "gremlin_url": 328, "lifetim": 328, "traversal_sourc": 328, "graphtraversalsourc": 328, "cypher_driv": 328, "cypher_url": 328, "gremlin_cli": 328, "runtimeerror": [328, 472], "modern_graph_data_dir": 328, "tolist": [328, 478], "dtype": 329, "pywrap": 329, "nodefrom": 329, "get_handl": 329, "worker_count": 329, "base64": 329, "nstart": 330, "poweriterationfailedconverg": 330, "langvil": 330, "meyer": 330, "survei": [330, 418], "cites": 330, "ist": 330, "psu": 330, "edu": 330, "713792": 330, "jon": 330, "kleinberg": 330, "authorit": 330, "journal": [330, 399, 407, 424, 455, 458, 462], "acm": [330, 405, 456, 488], "604": 330, "1999": [330, 385, 386], "doi": [330, 400, 407, 442], "1145": 330, "324133": 330, "324140": 330, "cornel": 330, "kleinber": 330, "pdf": [330, 412, 414, 415], "load_centr": 330, "in_degree_centr": [330, 466], "networkxnotimpl": 330, "out_degree_centr": [330, 466], "equat": 330, "ax": 330, "eigenvalu": [330, 410], "virtu": 330, "perron": 330, "frobeniu": 330, "theorem": [330, 409, 421], "0e": 330, "strength": 330, "2f": 330, "networkxpointlessconcept": [330, 460], "networkxerror": [330, 336, 343, 345, 349, 350, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 400, 406, 409, 410, 411, 422, 425, 457, 465, 468], "eigenvector_centrality_numpi": 330, "discern": 330, "phillip": 330, "bonacich": 330, "american": 330, "sociologi": 330, "1170": 330, "1182": 330, "1986": [330, 454], "leonidzhukov": 330, "net": [330, 384], "hse": 330, "socialnetwork": 330, "oxford": [330, 363, 364, 413, 457], "press": [330, 363, 364, 411, 453, 456, 457], "usa": [330, 417, 418, 464], "pp": [330, 394, 397, 398, 399, 412, 418, 419, 456, 462], "169": 330, "x_i": 330, "a_": 330, "x_j": 330, "lambda_": 330, "distant": 330, "penal": 330, "strictli": [330, 384], "invers": [330, 409], "phi": 330, "sqrt": [330, 410], "adjacency_spectrum": 330, "720": 330, "leo": 330, "sociometr": 330, "psychometrika": 330, "1953": 330, "springer": [330, 419], "1007": [330, 364, 400], "bf02289026": 330, "has_path": [330, 466], "djikstra": 330, "floyd": 330, "warshal": 330, "bfs_edg": [330, 466], "depth_limit": 330, "core_numb": 330, "vladimir": 330, "batagelj": 330, "matjaz": 330, "zaversnik": 330, "ab": [330, 388, 389, 390, 404, 412, 416, 457, 459], "0310049": 330, "c_u": 330, "deg": [330, 384, 398, 465], "geometr": [330, 452, 466], "vw": 330, "hat": 330, "uv": [330, 398], "uw": 330, "tot": 330, "2deg": 330, "leftrightarrow": 330, "complete_graph": [330, 336, 465], "saram\u00e4ki": 330, "kivel\u00e4": 330, "onnela": 330, "kaski": 330, "kert\u00e9sz": 330, "027105": 330, "2007": [330, 412, 458], "jponnela": 330, "web_docu": 330, "a9": 330, "intens": 330, "coher": 330, "motif": 330, "065103": 330, "2005": [330, 406, 412], "sign": 330, "costantini": 330, "perugini": 330, "plo": 330, "e88669": 330, "fagiolo": 330, "76": 330, "026107": 330, "average_clust": [330, 466], "count_zero": 330, "c_v": 330, "nonzero": [330, 394, 411], "marcu": 330, "kaiser": 330, "0802": 330, "2512": 330, "g_to_add_to": [332, 333, 334], "nodes_for_cycl": 332, "add_path": [332, 334, 465], "add_star": [332, 333], "nodes_for_path": 333, "add_cycl": [333, 334], "nodes_for_star": 334, "star": [334, 371, 380], "middl": 334, "cnbor": 336, "with_data": 337, "empty_graph": [337, 378], "frequenc": 339, "width": 339, "2m": [340, 418], "prevent": 343, "frozen": [343, 348], "unfreez": 343, "frozen_graph": 343, "unfrozen_graph": 343, "is_frozen": 343, "neighbour": 345, "freez": [348, 466], "nodelist": [353, 392], "selfloop_edg": [353, 358, 394, 396], "number_of_selfloop": [353, 359], "selfloop": [358, 359, 392, 398], "nloop": 358, "nodes_with_selfloop": [358, 359], "datadict": [359, 465], "datavalu": 359, "attrnam": [359, 496], "edgeit": 359, "ekei": 359, "graph_atlas_g": 363, "linearli": [363, 379], "ronald": [363, 364, 454], "robin": [363, 364], "wilson": [363, 364], "1998": [363, 364], "111223": 364, "112222": 364, "automorph": [364, 437], "graph_atla": 364, "expens": 364, "popul": [364, 365, 367, 368, 370, 372, 375, 377, 379, 380, 383, 394, 396, 397, 399, 401, 402, 403, 409, 410, 411, 417, 418, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 460, 467], "book": 364, "violat": 364, "lexicograph": 364, "nondecreas": 364, "001111": 364, "000112": 364, "1008": 364, "3333444": 364, "3333336": 364, "1012": 364, "1213": 364, "1244555": 364, "1244456": 364, "perfectli": 365, "ari": [365, 375], "height": 365, "children": [365, 375, 459], "barbel": [366, 377], "bell": 366, "p_": [366, 398, 412], "mere": [366, 377], "aldou": [366, 377], "jim": [366, 377], "binomi": 367, "leftmost": 367, "ci_n": 368, "x_1": 368, "x_2": 368, "x_m": 368, "mod": [368, 382, 411, 430], "subfamili": 368, "ladder": [369, 376], "cl_n": 369, "k_n": 370, "is_direct": [370, 465], "subset_s": 371, "multipartit": [371, 382], "tripartit": 371, "bc": 371, "complete_bipartite_graph": 371, "c_n": 372, "hierarch": 373, "dorogovtsev": 373, "goltsev": 373, "mend": 373, "mat": 373, "0112143": 373, "kw": [374, 472], "unknown": [374, 477], "abc": 374, "rightmost": 375, "jame": 375, "andrew": 375, "storer": 375, "birkhaus": 375, "boston": 375, "2001": [375, 388, 396, 401, 403, 411, 420, 478], "225": [375, 465], "lollipop": 377, "k_m": 377, "p_n": [377, 379], "etext": 377, "turan": 382, "disjoint": [382, 393, 431], "2r": 382, "tau1": 384, "tau2": 384, "mu": 384, "average_degre": 384, "min_degre": 384, "max_degre": 384, "min_commun": 384, "max_commun": 384, "lfr": 384, "mathrm": 384, "expon": 384, "reassign": [384, 422], "affili": [384, 492], "random_st": [384, 387, 388, 389, 390, 392, 394, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 412, 413, 414, 415, 416, 419, 420, 421, 425, 457, 460, 462], "exceededmaxiter": 384, "250": 384, "frozenset": [384, 467], "rewir": [384, 386, 390, 422, 425], "wire": 384, "robust": 384, "somewhat": 384, "narrow": 384, "andrea": 384, "lancichinetti": 384, "santo": [384, 388, 389, 390], "fortunato": [384, 388, 389, 390], "filippo": 384, "radicchi": 384, "phy": [384, 396, 401, 402, 403, 406], "rev": [384, 396, 401, 402, 403, 406], "046110": 384, "santofortunato": 384, "caveman": [385, 386, 390], "unclear": [385, 386], "connected_caveman_graph": [385, 391], "watt": [385, 386, 396], "phenomenon": [385, 386], "amer": [385, 386], "493": [385, 386], "527": [385, 386], "caveman_graph": 386, "p_in": [387, 388, 389], "p_out": [387, 388, 389], "gaussian": [387, 413, 414, 415], "drawn": [387, 415], "varianc": 387, "probabilti": [387, 390], "random_partition_graph": [387, 392], "ulrik": 387, "brand": 387, "marco": 387, "gaertler": 387, "dorothea": 387, "wagner": 387, "11th": 387, "europ": 387, "symp": 387, "plant": [388, 389], "random_partition_model": 388, "condon": 388, "karp": 388, "algor": 388, "116": 388, "486": [388, 389, 390], "174": [388, 389, 390], "0906": [388, 389, 390], "0612": [388, 389, 390], "relax": 390, "februari": 390, "num_cliqu": 391, "clique_s": 391, "ring": 391, "stochast": [392, 466], "densiti": [392, 394, 412, 414], "symmetr": [392, 411, 434, 438, 444, 446, 457], "300": [392, 461], "prob": 392, "450": 392, "quotient_graph": 392, "relabel": 392, "245": 392, "348": 392, "405": 392, "051": 392, "022": 392, "planted_partition_graph": 392, "gaussian_random_partition_graph": 392, "gnp_random_graph": [392, 419, 420, 421], "holland": 392, "laskei": 392, "leinhardt": 392, "blockmodel": 392, "109": 392, "1983": 392, "windmil": 393, "contract": 393, "wd": 393, "deg_sequ": [394, 395, 396, 397, 399], "pseudograph": [394, 396], "nonneg": [394, 396], "is_graph": [394, 400], "graphic": [394, 396, 399, 400], "realiz": [394, 396, 399, 422, 423, 424, 425, 452, 477], "tend": 394, "poisson": 394, "constant": [394, 496], "siam": [394, 399, 405], "167": 394, "random_sequ": 394, "random_powerlaw_tree_sequ": 394, "5000": [394, 478], "actual_degre": 394, "in_degree_sequ": 396, "out_degree_sequ": 396, "directed_random": 396, "configuration_model": [396, 397, 400], "finit": [396, 398, 411], "strogatz": 396, "026118": 396, "din": 396, "dout": 396, "in_deg_sequ": 397, "out_deg_sequ": 397, "kleitman": [397, 399], "valenc": [397, 399], "1973": [397, 399], "w_0": 398, "w_1": 398, "ldot": 398, "w_u": [398, 412, 415], "w_v": [398, 412, 415], "sum_k": 398, "w_k": 398, "z": [398, 411, 412, 416], "mathcal": 398, "ne": 398, "uu": 398, "fan": [398, 412, 488], "chung": [398, 412], "lu": [398, 488], "ann": 398, "combinator": [398, 458], "145": 398, "2002": 398, "joel": 398, "miller": 398, "aric": [398, 412], "hagberg": [398, 412], "waw": [398, 412], "alan": 398, "friez": 398, "paul": 398, "horn": 398, "pawe\u0142": 398, "pra\u0142at": 398, "lnc": 398, "6732": 398, "115": 398, "havel": 399, "hakimi": 399, "networkxexcept": 399, "resort": 399, "496": 399, "506": 399, "1962": [399, 417, 418, 464], "d_m": 400, "uniform": [400, 412, 421], "networkxunfeas": 400, "moshen": 400, "bayati": 400, "jeong": 400, "han": 400, "kim": 400, "amin": 400, "saberi": 400, "algorithmica": 400, "58": 400, "860": 400, "910": 400, "s00453": 400, "009": 400, "9340": 400, "gn": [401, 464], "a_k": 401, "krapivski": [401, 402, 403, 406], "redner": [401, 402, 403], "066123": [401, 403], "gnc": 402, "growth": [402, 462], "036118": 402, "2005k": 402, "gnr": 403, "probabilii": 403, "self_loop": 404, "preferenti": 404, "proport": 404, "peterson": [404, 447], "nichola": 404, "bori": 404, "pittel": 404, "preprint": 404, "1311": 404, "5961": 404, "2013": [404, 424], "gamma": 405, "delta_in": 405, "delta_out": 405, "bia": 405, "bollob\u00e1": 405, "borg": 405, "chay": 405, "riordan": 405, "fourteenth": 405, "annual": 405, "symposium": 405, "132": [405, 420], "139": 405, "diverg": [406, 466], "retent": 406, "disallow": 406, "ispolatov": 406, "yuryev": 406, "061911": 406, "inclus": 407, "knudsen": 407, "michael": 407, "carsten": 407, "wiuf": 407, "markov": 407, "chain": 407, "1155": 407, "190836": 407, "radiu": [408, 413, 414, 415], "chordal": 409, "chord": [409, 423], "mildli": 409, "lubotzki": 409, "invari": 409, "birkh\u00e4us": 409, "verlag": 409, "basel": 409, "1994": 409, "marguli": 410, "gabber": 410, "galil": 410, "palei": 411, "pz": 411, "f_q": 411, "odd": 411, "bolloba": 411, "cambridg": 411, "theta": [412, 415], "po": [412, 413, 414, 415, 416], "p_dist": [412, 414], "geograph": [412, 415], "rectangular": [412, 416], "ge": [412, 416], "prone": 412, "le": [412, 416, 456], "euclidean": [412, 413, 414, 415, 416], "taxicab": [412, 416], "expovari": [412, 415], "masuda": 412, "miwa": 412, "konno": 412, "036108": 412, "milan": 412, "bradonji\u0107": 412, "allon": 412, "percu": 412, "giant": 412, "antoni": 412, "bonato": 412, "209": 412, "216": 412, "cube": [413, 414, 415, 433, 450], "kdtree": [413, 414, 415], "minkowski": [413, 414, 415], "infin": [413, 414, 415], "erd\u0151": [413, 414, 415], "r\u00e9nyi": [413, 414, 415], "twenti": 413, "2d": [413, 414, 415, 465, 468], "deviat": [413, 414, 415], "gauss": [413, 414, 415], "penros": [413, 414], "mathew": [413, 414], "soft": 414, "exp": [414, 416], "annal": 414, "2016": 414, "986": 414, "1028": 414, "summat": 415, "nodethr": 415, "cole": 415, "maclean": 415, "blog": 415, "thesi": [415, 421], "waxman": 416, "x_min": 416, "y_min": 416, "x_max": 416, "y_max": 416, "Their": 416, "rout": 416, "multipoint": 416, "ieee": [416, 424, 425, 457, 462], "1988": 416, "1617": 416, "1622": 416, "harari": [417, 418, 466], "h_": [417, 418], "ceil": 417, "kn": 417, "hnm_harary_graph": 417, "weisstein": 417, "eric": 417, "mathworld": [417, 426, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 445], "wolfram": [417, 426, 430, 432, 434, 435, 436, 437, 438, 439, 440, 441, 445], "hararygraph": 417, "nat": [417, 418, 464], "acad": [417, 418, 464], "sci": [417, 418, 464], "1142": [417, 418, 464], "1146": [417, 418, 464], "floor": 418, "hkn_harary_graph": 418, "boesch": 418, "satyanarayana": 418, "suffel": 418, "reliabl": 418, "synthesi": 418, "99": [418, 496], "2009": [418, 458], "uniform_random_intersection_graph": [419, 420], "nikoletsea": 419, "raptopoulo": 419, "spiraki": 419, "icalp": 419, "\u0131az": 419, "karhum": 419, "aki": 419, "lepist": 419, "sannella": 419, "vol": [419, 462], "3142": 419, "lectur": 419, "1029": 419, "1040": 419, "godehardt": 420, "jaworski": 420, "electron": [420, 458], "singer": 421, "cohen": 421, "1995": 421, "phd": 421, "john": [421, 438], "hopkin": 421, "scheinerman": 421, "evolut": 421, "2000": 421, "156": 421, "nkk": [422, 423], "degree_seq": 422, "n_edges_add": 422, "li": [422, 425], "unsatur": 422, "proof": 422, "tillman": [422, 423, 425], "markopoul": [422, 423, 424, 425, 457], "butt": [422, 423, 457], "gjoka": [422, 423, 424, 425], "2k": [422, 423], "kdd": [422, 423], "seconnd": 423, "joint_degre": [424, 425], "diagon": [424, 440], "joint_degree_graph": 424, "kurant": 424, "5k": 424, "infocom": [424, 425, 457], "stanton": 424, "pinar": 424, "prescrib": 424, "experiment": [424, 472], "n_th": 426, "m_1": 426, "singleton": [426, 465], "m_2": 426, "m_i": 426, "mycielskian": 426, "m_": 426, "mycielskigraph": 426, "p_2": 426, "chromat": [427, 458], "2n": 427, "bigcup": 427, "nonisomporph": 428, "adjanc": 428, "matric": [428, 457], "nonisomorph": 429, "shift_list": 430, "cubic": [430, 433, 434, 437, 438, 444, 446, 447, 452], "lcf": [430, 432, 434, 436, 438, 444, 446], "lederberg": 430, "coxet": 430, "frucht": [430, 437], "hamiltonian": [430, 432, 437, 438, 441, 446, 452], "symmetri": [430, 437], "dodecahedral_graph": 430, "desargues_graph": 430, "heawood_graph": 430, "pappus_graph": 430, "s1": 430, "sk": 430, "v_current": 430, "shiftlist": 430, "heawood": [430, 438], "lcfnotat": 430, "bull": 431, "planar": [431, 434, 435, 437], "pendant": 431, "leg": 431, "chv\u00e1tal": 432, "370": 432, "chv": 432, "c3": [432, 444, 445], "a1tal_graph": 432, "chvatalgraph": 432, "platon": [433, 436, 441, 445, 449, 451], "hypercub": 433, "aris": 433, "desargu": 434, "desarguesgraph": 434, "kite": [435, 442], "diamondgraph": 435, "dodecahedr": 436, "dodecahedron": 436, "regular_dodecahedron": 436, "dodecahedralgraph": 436, "fruchtgraph": 437, "cage": 438, "perci": 438, "nonplanar": 438, "girth": 438, "heawoodgraph": 438, "win": [438, 447], "tue": [438, 447], "nl": [438, 447], "aeb": [438, 447], "housegraph": [439, 440], "pentatop": 440, "icosahedr": 441, "icosahedron": 441, "icosahedralgraph": 441, "krackhardt": 442, "andr": 442, "beverlei": 442, "carol": 442, "dian": 442, "fernando": 442, "garth": 442, "heather": 442, "ik": 442, "jane": 442, "polit": 442, "landscap": 442, "cognit": 442, "quarterli": 442, "342": [442, 465], "369": 442, "2307": 442, "2393394": 442, "jstor": 442, "june": 442, "1990": 442, "graph_descript": 443, "ltype": 443, "adjacencylist": 443, "from_dict_of_list": 443, "from_edgelist": 443, "xlist": 443, "c_4": 443, "w2": 443, "vk": 443, "wk": 443, "vj": 443, "wj": 443, "moebiu": 444, "kantor": 444, "m\u00f6biu": 444, "petersen": [444, 447], "b6biu": 444, "93kantor_graph": 444, "octahedr": 445, "octahedron": 445, "shake": 445, "hi": [445, 455, 464], "her": 445, "partner": 445, "handshak": 445, "cocktail": 445, "octahedralgraph": 445, "tur": 445, "a1n_graph": 445, "special_cas": 445, "pappu": 446, "juliu": 447, "counterexampl": [447, 452], "bridgeless": 447, "colour": 447, "drg": 447, "maze": 448, "sedgewick": 448, "3rd": 448, "tetrahedr": 449, "k4": 449, "w4": 449, "grpah": 449, "tetrahedron": [449, 451, 452], "archimedean": [450, 451], "octagon": 450, "triangular": 450, "truncated_cub": 450, "coolmath": 450, "polyhedra": 450, "hexagon": 451, "equilater": 451, "truncated_tetrahedron": 451, "tutt": 452, "polyhedr": 452, "tait": 452, "conjectur": 452, "polyhedron": 452, "davi": 453, "southern": 453, "women": 453, "gardner": 453, "1941": 453, "south": 453, "chicago": 453, "il": 453, "florentin": 454, "breiger": 454, "philippa": 454, "pattison": 454, "cumul": 454, "dualiti": 454, "septemb": 454, "zachari": 455, "karat": 455, "club": 455, "mr": [455, 458], "offic": 455, "wayn": 455, "fission": 455, "anthropolog": 455, "452": 455, "473": 455, "1977": 455, "coappear": 456, "novel": 456, "miser": 456, "knuth": 456, "1993": 456, "graphbas": 456, "combinatori": 456, "york": 456, "spectral": [457, 466], "forg": 457, "sgf": 457, "eigenstructur": 457, "synthes": 457, "percentag": 457, "telecommun": 457, "bernoulli": 457, "baldesi": 457, "1801": 457, "01715": 457, "karate_club_graph": 457, "sud": 458, "81": 458, "810": 458, "herzberg": 458, "murti": 458, "polynomi": 458, "am": 458, "708": 458, "717": 458, "sander": 458, "torsten": 458, "7pp": 458, "2529816": 458, "encyclopedia": 458, "dec": 458, "nil": 459, "arboresc": 459, "downward": 459, "synthet": 459, "trie": 459, "recov": [459, 472], "pr\u00fcfer": 460, "from_prufer_sequ": 460, "forest_str": 460, "triad_nam": 461, "003": 461, "012": 461, "021d": 461, "021u": 461, "021c": 461, "111d": 461, "111u": 461, "030t": 461, "030c": 461, "120d": 461, "120u": 461, "120c": 461, "triadic_censu": 461, "autonom": [462, 464], "elmokashfi": 462, "tier": 462, "mid": 462, "adv": 462, "bidirect": 462, "peer": 462, "commerci": 462, "agreement": 462, "kvalbein": 462, "dovroli": 462, "bgp": 462, "1250": 462, "1261": 462, "octob": 462, "reweight": 463, "mathematician": 464, "frank": 464, "incoming_graph_data": [465, 468], "default_label": [465, 468], "to_networkx_graph": 465, "110": 465, "protect": 465, "bracket": 465, "shortcut": 465, "nbrsdict": 465, "miscellan": 465, "__contains__": 465, "__getitem__": 465, "adj_dict": 465, "atlasview": 465, "__iter__": 465, "niter": 465, "__len__": 465, "nnode": 465, "u_of_edg": 465, "v_of_edg": 465, "ebunch_to_add": 465, "wn2898": 465, "node_for_ad": 465, "nodes_for_ad": 465, "hello": 465, "k3": 465, "attrdict": 465, "behav": 465, "idiom": 465, "foovalu": 465, "adj_it": 465, "nbrdict": 465, "adjlist_inner_dict_factori": 465, "neighbordict": 465, "adjlist_outer_dict_factori": 465, "adjlistdict": 465, "clear_edg": 465, "deepcopi": 465, "fresh": [465, 474], "__class__": 465, "degreeview": 465, "nd_view": 465, "edge_attr_dict_factori": 465, "neighborattrdict": 465, "edge_subgraph": 465, "edgeview": 465, "edgedataview": 465, "ddict": 465, "get_edge_data": 465, "edge_dict": 465, "safe": 465, "graph_attr_dict_factori": 465, "graph_cache_factori": 465, "keyerror": 465, "edge_ind": 465, "data_dictionari": 465, "is_multigraph": 465, "corespond": 465, "nbunch_it": 465, "exhaust": 465, "possibli": 465, "node_attr_dict_factori": 465, "nodeattrdict": 465, "node_dict_factori": 465, "nodedict": 465, "nodeview": 465, "nodedataview": 465, "nodedata": 465, "bar": 465, "nedg": 465, "Will": 465, "nodes_for_remov": 465, "set_edge_data": 465, "set_node_data": 465, "set_item": 465, "adjedgeattr": 465, "dd": 465, "nodeattr": 465, "netowrkx": 465, "to_undirected_class": 465, "itertool": 465, "mg": 465, "nd_iter": 465, "outedgeview": 465, "in_edg": 465, "outedgedataview": 465, "has_predecessor": 465, "has_successor": 465, "indegreeview": 465, "inedgeview": 465, "outdegreeview": 465, "pred": 465, "succ": 465, "_convert_arrow_to_dynam": [466, 468], "atla": 466, "triad": 466, "mycielski": 466, "sudoku": 466, "utf": [467, 478], "filenam": [467, 478], "rb": 467, "bz2": 467, "uncompress": 467, "whitespac": 467, "obsolet": 467, "write_edgelist": 467, "fh": 467, "textlin": 467, "parse_edgelist": 467, "read_adjlist": 467, "marker": 467, "v_0": 468, "v_1": 468, "add_label": 469, "talk": 471, "output_to_cli": [471, 488], "person_id": [471, 478], "deregist": 472, "256mi": 472, "4gi": 472, "5gi": 472, "__enter__": 472, "__exit__": 472, "exc_typ": 472, "exc_valu": 472, "exc_tb": 472, "unregist": 472, "preemptiv": 472, "burstabl": 472, "qo": 472, "preempt": 472, "k8s_vineyard_imag": 472, "fallback": 472, "512mi": 472, "etcd_addr": 472, "etcd01": 472, "etcd02": 472, "etcd03": 472, "4mi": 472, "k8s_coordinator_pod_node_selector": 472, "tinyurl": 472, "3nx6k7ph": 472, "k8s_engine_pod_node_selector": 472, "path1": 472, "path2": 472, "claimnam": 472, "dangling_timeout_second": 472, "heartbeat": 472, "dangl": 472, "config_fil": 472, "resource_nam": 472, "sigint": 472, "sigterm": 472, "signal": 472, "get_vineyard_object_mapping_t": 472, "with_cyph": 472, "recreat": 472, "restore_from_pvc": 472, "kubeconfig": 472, "run_fetch": 472, "lock": 472, "store_to_pvc": 472, "backup": [472, 478], "maxwel": 474, "binlog": 474, "buildgartfrag": 474, "etcd_endpoint": 474, "gartfrag": 474, "etcd_client": 474, "make_shar": 474, "mpi_comm_world": 474, "schema_kei": 474, "gart_schema_p": 474, "to_str": 474, "edge_config_str": 474, "as_str": 474, "gart_blob_m": 474, "_p": 474, "config_str": 474, "edge_config": 474, "inner_vertices_it": 474, "elabel": [474, 479], "edge_it": 474, "hive": 476, "ordered_by_sourc": 476, "ordered_by_dest": 476, "textual": 476, "unix": [476, 491], "ldbc_graphar": 476, "4096": 476, "ldbc_subgraph_graphar": 476, "ldbc_subgraph": 476, "ldbc__graphar": 476, "test_graphar": 476, "broader": 477, "ffi": 477, "agnost": 477, "grin_": 477, "partitioned_graph": 477, "edge_type_nam": 477, "boundari": 477, "sync_properti": 477, "grin_partitioned_graph": 477, "grin_partit": 477, "grin_graph": 477, "grin_get_local_graph_from_partit": 477, "grin_edge_typ": 477, "etyp": 477, "grin_get_edge_type_by_nam": 477, "grin_vertex_type_list": 477, "src_vtype": 477, "grin_get_src_types_from_edge_typ": 477, "dst_vtype": 477, "grin_get_dst_types_from_edge_typ": 477, "src_vtypes_num": 477, "grin_get_vertex_type_list_s": 477, "dst_vtypes_num": 477, "grin_vertex_typ": 477, "grin_get_vertex_type_from_list": 477, "grin_vertex_properti": 477, "dst_vp": 477, "grin_get_vertex_property_by_nam": 477, "grin_null_vertex_properti": 477, "grin_vertex_property_t": 477, "dst_vpt": 477, "grin_get_vertex_property_table_by_typ": 477, "grin_datatyp": 477, "dst_vp_dt": 477, "grin_get_vertex_property_data_typ": 477, "grin_vertex_list": 477, "__src_vl": 477, "grin_get_vertex_list": 477, "_src_vl": 477, "grin_select_type_for_vertex_list": 477, "src_vl": 477, "grin_select_master_for_vertex_list": 477, "src_vl_num": 477, "grin_get_vertex_list_s": 477, "grin_vertex": 477, "grin_get_vertex_from_list": 477, "ifdef": 477, "grin_trait_select_edge_type_for_adjacent_list": 477, "grin_adjacent_list": 477, "_adj_list": 477, "grin_get_adjacent_list": 477, "grin_direct": 477, "adj_list": 477, "grin_select_edge_type_for_adjacent_list": 477, "adj_lsit": 477, "endif": 477, "al_sz": 477, "grin_get_adjacent_list_s": 477, "ifndef": 477, "grin_edg": 477, "grin_get_edge_from_adjacent_list": 477, "grin_get_edge_typ": 477, "grin_equal_edge_typ": 477, "grin_get_neighbor_from_adjacent_list": 477, "grin_get_value_from_vertex_property_t": 477, "grin_vertex_ref": 477, "uref": 477, "grin_get_vertex_ref_for_vertex": 477, "recogn": [477, 478], "u_master_partit": 477, "grin_get_master_partition_from_vertex_ref": 477, "send_valu": 477, "fragment_group_id": [477, 479], "get_partitioned_graph_by_object_id": 477, "local_partit": 477, "grin_get_local_partition_list": 477, "pnum": 477, "grin_get_partition_list_s": 477, "grin_get_partition_from_list": 477, "disclaim": 477, "sacrif": 477, "boilerpl": 477, "ineffici": 477, "enorm": 477, "grin_assume_all_vertex_property_local_complet": 477, "grin_assume_master_vertex_property_local_complet": 477, "grin_assume_by_type_all_vertex_property_local_complet": 477, "grin_assume_by_type_master_vertex_property_local_complet": 477, "assumpt": 477, "wider": 477, "undefin": 477, "granular": 477, "grin_frag": 477, "storagespecif": 477, "vertexhandl": 477, "goe": 477, "grin_edge_list": 477, "grin_partition_list": 477, "grin_enable_": 477, "_list_arrai": 477, "vertexlist": 477, "grin_enable_vertex_list_arrai": 477, "vl": 477, "idx": 477, "sz": 477, "caller": 477, "_list_iter": 477, "grin_enable_vertex_list_iter": 477, "grin_vertex_list_iter": 477, "grin_get_vertex_list_begin": 477, "grin_get_next_vertex_list_it": 477, "vli": 477, "grin_is_vertex_list_end": 477, "grin_get_vertex_from_it": 477, "grin_get_vertex_type_by_nam": 477, "vtype": 477, "grin_vertex_property_list": 477, "grin_get_vertex_properties_by_nam": 477, "vprop": 477, "vpl": 477, "separatedli": 477, "with_vertex_label": 477, "with_edge_label": 477, "grin_serialize_vertex_ref": 477, "grin_deserialize_to_vertex_ref": 477, "grin_get_vertex_from_vertex_ref": 477, "vref": 477, "deseri": 477, "borrow": 477, "vertexcut": 477, "edgecut": 477, "judgement": 477, "columnar": 478, "gear": 478, "compromis": 478, "strict": 478, "multitud": 478, "exemplifi": 478, "said": 478, "grpc_port": 478, "grpc_endpoint": 478, "conn": 478, "add_vertex_label": 478, "v_label_nam": 478, "add_primary_kei": 478, "pk_name": 478, "prop_name_1": 478, "prop_name_2": 478, "add_edge_label": 478, "e_label_nam": 478, "prop_name_3": 478, "add_properti": 478, "xmln": 478, "xsi": 478, "w3": 478, "xmlschema": 478, "schemaloc": 478, "xsd": 478, "modelvers": 478, "gremlinexampl": 478, "codehau": 478, "mojo": 478, "classpath": 478, "mainclass": 478, "compliancelevel": 478, "killaft": 478, "credenti": 478, "valuemap": [478, 496], "javascript": 478, "data_load": 478, "load_tool": 478, "xzvf": 478, "alic": 478, "person_id_1": 478, "20210611151923": 478, "mapreduc": 478, "data_output": 478, "55555": 478, "propertiescolmap": 478, "srcpkcolmap": 478, "dstpkcolmap": 478, "mb": 478, "columnidx": 478, "_success": 478, "xxxxx": 478, "sst": 478, "00000": 478, "00001": 478, "00002": 478, "load_data": 478, "test_store_servic": 478, "insert_vertex": 478, "vertexrecordkei": 478, "insert_vertic": 478, "update_vertex_properti": 478, "vertex_pk": 478, "delete_vertic": 478, "insert_edg": 478, "edgerecordkei": 478, "update_edge_properti": 478, "edge_pk": 478, "remote_flush": 478, "snapshot_id": 478, "src_vertex_kei": 478, "dst_vertex_kei": 478, "realtimewrit": 478, "unus": 478, "current_timestamp": 478, "replay_record": 478, "grootclient": 478, "grootclientbuild": 478, "replayrecord": 478, "provis": 478, "lapp": 478, "reinstal": 478, "pv_name": 478, "pod_nam": [478, 486, 491], "logback": 478, "zk": 478, "storegcintervalm": 478, "try_catch_up_with_primari": 478, "otel": 478, "arrowfragmentgroup": 479, "spread": 479, "ipc": 479, "docket": 479, "string_oid": 479, "ipcclient": 479, "writeout": 479, "nb": 479, "fragmentloc": 479, "gettotalnodesnum": 479, "labeltyp": 479, "vlabel": 479, "vertex_data_t": 479, "edge_data_t": 479, "willing": 480, "implic": 480, "polymorph": 480, "instant": 480, "aka": 480, "pygrap": [480, 481], "frist": 480, "from_numpi": 480, "bind_sssp1": 480, "delai": 480, "screen": 480, "bind_sssp2": 480, "vertex_bal": 481, "vcut": 481, "ecut": 481, "repo_hom": 485, "flexbuild": 485, "graph_identifi": 485, "syoov": 486, "79b44f7b58": 486, "ctmqb": 486, "10m": 486, "9m53": 486, "9m46": 486, "6dd67c65fc": 486, "gn4mb": 486, "15334625083466732": 486, "33d": 486, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 488, "\u8be5\u7cfb\u7edf\u4e8e": 488, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 488, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 488, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 488, "\u5728": [488, 489, 490, 491, 492, 495, 496, 497, 498], "\u4e2d": [488, 490, 491, 492, 498], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 488, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 488, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 488, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 488, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 488, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 488, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 488, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 488, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 488, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 488, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 488, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 488, "\u521b\u5efa\u9ed8\u8ba4": 488, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 488, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 488, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 488, "result_lpa": 488, "result_sssp": 488, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 488, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 488, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 488, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 488, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 488, "\u7c7b": [488, 498], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 488, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 488, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 488, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 488, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 488, "\u6216\u5199\u5165": 488, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 488, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 488, "\u6216\u5199\u5165\u672c\u5730\u7684": 488, "lpa_result": 488, "\u6570\u636e\u7ed3\u6784": 488, "\u6b64\u5916": [488, 492], "\u5982": [488, 491, 494, 496], "\u5feb\u901f\u4e0a\u624b": [488, 494], "\u4e2d\u6240\u793a": 488, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 488, "\u7684\u65b0\u5c5e\u6027": 488, "\u5217": 488, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 488, "\u5217\u540d\u4e3a": 488, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 488, "new_graph": [488, 493], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 488, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 488, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 488, "\u7c7b\u4f3c\u7684": 488, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 488, "\u4f8b\u5982\u9876\u70b9id": 488, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 488, "\u4ee3\u8868\u7ed3\u679c": 488, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 488, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 488, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 488, "\u8f6c\u6362\u4e3a": [488, 497], "\u4f7f\u7528\u9876\u70b9\u7684": 488, "\u4f5c\u4e3a\u540d\u4e3a": 488, "\u7684\u5217": 488, "df_vd": 488, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 488, "df_result": 488, "property0": 488, "label0": 488, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 488, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 488, "\u5c06": [488, 497], "\u9876\u70b9\u7684": 488, "\u4f5c\u4e3a": [488, 489, 498], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 488, "gs_data": 488, "\u53ef\u4ee5\u67e5\u770b": 488, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 488, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 488, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 488, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 488, "\u5728\u7eaf": 488, "\u6a21\u5f0f": [488, 496], "\u4e0b\u4f7f\u7528": 488, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 488, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 488, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 488, "\u5982\u4ee3\u7801\u6240\u793a": 488, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 488, "\u88c5\u9970\u7684\u7c7b": 488, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 488, "\u56fe\u7b97\u6cd5\u51fd\u6570": 488, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 488, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 488, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 488, "\u4e0e": 488, "\u76f8\u5173\u7684\u5b8c\u6574": 488, "\u53ef\u4ee5\u53c2\u8003": 488, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 488, "\u4e3a\u4f8b": [488, 492], "\u7528\u6237\u5728": 488, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 488, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 488, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 488, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 488, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 488, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 488, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 488, "\u589e\u91cf\u8ba1\u7b97": 488, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 488, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 488, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 488, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [488, 498], "\u7ecf\u5178\u7684": 488, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 488, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 488, "\u6a21\u578b\u4e4b\u5916": 488, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 488, "\u7f16\u7a0b\u6a21\u578b": 488, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 488, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 488, "\u6a21\u578b\u4e0d\u540c": 488, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 488, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 488, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 488, "\u800c\u4e0d\u540c\u4e8e": 488, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 488, "\u8fd8\u662f\u4ee5": 488, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 488, "\u88c5\u9970\u5668": 488, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 488, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 488, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 488, "\u4e2d\u7684": [488, 489, 491], "\u51fd\u6570": [488, 496], "\u4e0b\u5217\u4ee3\u7801": 488, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 488, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 488, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 488, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 488, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 488, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 488, "\u8fd9\u91cc": [488, 489, 498], "\u662f\u4e0e": 488, "\u76f8\u5bf9\u5e94\u7684": 488, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 488, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 488, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 488, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 488, "\u5728\u6b64\u4e4b\u540e": 488, "\u60a8\u53ef\u4ee5\u4ece": 488, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 488, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 488, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 488, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 488, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 488, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 488, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 488, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 488, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 488, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 488, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 488, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 488, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 488, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 488, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 488, "dist_0": 488, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 488, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 488, "\u8bf7\u53c2\u8003": [488, 496], "\u6765\u5c06": 488, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 488, "\u5b89\u88c5\u5b8c\u6210\u540e": 488, "\u4f60\u9700\u8981\u5c06": 488, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 488, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 488, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 488, "\u6765\u786e\u4fdd": 488, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 488, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 488, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 488, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 488, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 488, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 488, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 488, "\u7528\u6237\u9700\u8981\u6309\u7167": 488, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 488, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 488, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 488, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 488, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 488, "defaultpropertyappbas": 488, "\u6216": [488, 489, 490, 491, 494, 496], "parallelpropertyappbas": 488, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 488, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 488, "defaultappbas": 488, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 488, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 488, "\u5176\u5e94\u8be5\u662f": 488, "defaultpropertycontextbas": 488, "parallelpropertycontextbas": 488, "defaultcontextbas": 488, "\u6216\u8005": [488, 490, 497, 498], "\u7684\u7684\u5b50\u7c7b": 488, "\u901a\u8fc7\u7ee7\u627f": 488, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 488, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 488, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 488, "client\u4e2dquery\u8fd4\u56de\u7684context": 488, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 488, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 488, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 488, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 488, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 488, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 488, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 488, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 488, "\u8fd9\u4e2a\u9700\u6c42": 488, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 488, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 488, "graphscope_repo": 488, "app_class_nam": 488, "java_path": 488, "path_to_your_jar": 488, "param_str": 488, "params_str": 488, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 488, "app\u7684\u7c7b\u7684\u5168\u540d": 488, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 488, "\u53ef\u4ee5\u901a\u8fc7": 488, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 488, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 488, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 488, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 488, "\u53ef\u4ee5": 488, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 488, "jar_path": 488, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 488, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 488, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 488, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 488, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 488, "\u7684app": 488, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 488, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 488, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [488, 489, 491], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 488, "\u76f8\u5173\u8bba\u6587": 488, "wenfei": 488, "jingbo": 488, "xu": 488, "wenyuan": 488, "yu": 488, "jingren": 488, "zhou": 488, "xiaojian": 488, "luo": 488, "qiang": 488, "yin": 488, "cao": 488, "ruiqi": 488, "tod": [488, 494], "yinghui": 488, "wu": 488, "jiaxin": 488, "jiang": 488, "43rd": 488, "zeyu": 488, "zheng": 488, "bohan": 488, "chao": 488, "tian": 488, "\u4ee5": [489, 492, 493, 495, 498], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 489, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [489, 491], "\u5982\u679c\u8fd0\u884c": 489, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 489, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 489, "\u56e0\u6b64": [489, 490, 492], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 489, "\u4f1a\u8bdd": [489, 492], "\u5ba2\u6237\u7aef": [489, 490, 494], "\u5b83\u5c01\u88c5": 489, "\u7ba1\u7406\u7740": 489, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 489, "\u5e76": 489, "\u8fde\u63a5": 489, "\u64cd\u4f5c\u7528\u6237\u5728": 489, "\u96c6\u7fa4\u4e0a\u7684": 489, "\u5f15\u64ce": 489, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 489, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 489, "\u5b9e\u4f8b": 489, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 489, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 489, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 489, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 489, "\u8def\u5f84": [489, 498], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 489, "\u7136\u540e": [489, 497], "\u5c06\u5176\u901a\u8fc7": 489, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 489, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 489, "\u8282\u70b9\u7684\u6982\u5ff5": 489, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 489, "\u521b\u5efa\u7684\u96c6\u7fa4": 489, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 489, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 489, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 489, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 489, "\u4e0a\u7684\u4e00\u4e2a": 489, "\u5b9e\u4f8b\u5305\u542b": 489, "\u4e00\u4e2a\u8fd0\u884c": 489, "\u7684": [489, 490, 491, 494, 499], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 489, "\u8d1f\u8d23\u5bf9": 489, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 489, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 489, "\u5f15\u64ce\u5bb9\u5668\u7684": 489, "replicaset": 489, "\u5bf9\u8c61": 489, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 489, "\u901a\u8fc7": [489, 492], "\u63a5\u6536\u6765\u81ea": 489, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 489, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 489, "\u56fe\u67e5\u8be2\u5f15\u64ce": 489, "\u56fe\u5b66\u4e60\u5f15\u64ce": [489, 494], "\u7684\u751f\u547d\u5468\u671f": 489, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 489, "\u8bf7\u5728": 489, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 489, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 489, "\u5b89\u88c5": [489, 494], "release_nam": 489, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 489, "\u53c2\u8003": 489, "\u8be5\u94fe\u63a5": 489, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 489, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 489, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 489, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 489, "\u96c6\u7fa4": [489, 491, 495], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 489, "\u7528\u6cd5\u5982\u4e0b": 489, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 489, "launch_clust": 489, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 489, "pyyaml": 489, "boto3": 489, "your_access_key_id": 489, "your_access_key_secret": 489, "region": 489, "your_region_nam": 489, "kube_config_path": 489, "alibabacloud_cs20151215": 489, "alibabacloud_ecs20140526": 489, "alibabacloud_vpc20160428": 489, "your_region_id": 489, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 489, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 489, "\u5e73\u53f0\u4e0a": 489, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 489, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 489, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 489, "\u672c\u5730\u90e8\u7f72": 489, "graphscope_env": [489, 490], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 490, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 490, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 490, "\u9075\u5faa": 490, "\u7684\u5f00\u6e90\u534f\u8bae": 490, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 490, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 490, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 490, "\u955c\u50cf": 490, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 490, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 490, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 490, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 490, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 490, "\u6267\u884c": 490, "10240m": 490, "minitest": 490, "unittest": 490, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 490, "\u6bd4\u5982": [490, 498], "\u56fe\u5206\u6790\u5f15\u64ce": [490, 494], "\u6a21\u5757": 490, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 490, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 490, "\u7684\u6784\u5efa\u8fc7\u7a0b": 490, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 490, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 490, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 490, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 490, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 490, "\u4e3a": [490, 491, 492], "shortsha": 490, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 490, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 490, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 490, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 490, "\u90a3\u4e48": 490, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 490, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 490, "\u5ba2\u6237\u7aef\u5373\u53ef": 490, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 490, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 490, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 490, "\u4e0b\u7684": 490, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 490, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 490, "install_prefix": 490, "\u4e0b\u5206\u522b\u6784\u5efa": 490, "\u7531\u4e8e": 490, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 490, "\u975edocker": 490, "\u4e2d\u8fdb\u884c": 490, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 490, "\u7684\u4f9d\u8d56": 490, "\u57fa\u4e8e\u5f53\u524d": 490, "\u73af\u5883\u4e0b\u7684": 490, "\u7248\u672c\u6784\u5efa": 490, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [490, 492], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 490, "\u7248\u672c": [490, 495], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 490, "conda": 490, "pyenv": 490, "\u5b89\u88c5\u591a\u4e2a": 490, "\u7684\u7248\u672c": 490, "\u98ce\u683c": 490, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 490, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 490, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 490, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 491, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 491, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 491, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 491, "\u6216\u8005\u5728": 491, "\u4e0e\u6211\u4eec\u8054\u7cfb": 491, "\u8fd0\u884c": 491, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 491, "\u5728\u901a\u8fc7": 491, "\u5ba2\u6237\u7aef\u4f7f\u7528": 491, "\u8fc7\u7a0b\u4e2d": 491, "\u9700\u8981\u7684\u6700\u4f4e": 491, "\u7248\u672c\u662f3": 491, "\u6700\u4f4epip\u7248\u672c\u662f": 491, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 491, "\u5355\u673a\u60c5\u51b5\u4e0b": 491, "\u8d44\u6e90\u9700\u6c42": 491, "\u6838": 491, "\u5185\u5b58": 491, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 491, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 491, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 491, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 491, "\u662f\u5426\u5f3a\u4f9d\u8d56": 491, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 491, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 491, "\u7684\u5f62\u5f0f\u5206\u53d1": 491, "\u53ef\u4ee5\u7528": 491, "\u5feb\u901f\u5b89\u88c5": 491, "\u5982\u4f55\u5982\u67e5\u770b": 491, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 491, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 491, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 491, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 491, "\u53ef\u4ee5\u4f7f\u7528": [491, 497], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 491, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 491, "\u7684\u78c1\u76d8": 491, "\u4e5f\u53ef\u5728": 491, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 491, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 491, "\u547d\u4ee4\u65f6": 491, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 491, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 491, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 491, "\u8fdb\u884c\u5220\u9664": 491, "\u901a\u5e38\u60c5\u51b5\u4e0b": 491, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 491, "\u90e8\u7f72": [491, 494], "\u65f6": [491, 492], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 491, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 491, "\u7b49\u6743\u9650": 491, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 491, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 491, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 491, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 491, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 491, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 491, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 491, "\u76ee\u524d": [491, 498], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 491, "\u53ef\u901a\u8fc7": 491, "\u8be5\u6587\u6863": 491, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 491, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 491, "\u5982\u679c": 491, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 491, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 491, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 491, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 491, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 491, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 491, "\u8f7d\u56fe\u9636\u6bb5": 491, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 491, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 491, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 491, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 491, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 491, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 491, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 491, "\u53ef\u89c1": 491, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 491, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 491, "\u90e8\u7f72\u7684": 491, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 491, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 491, "\u865a\u62df\u7684": 491, "\u6709\u4ec0\u4e48\u533a\u522b": 491, "\u5982\u4f55\u8bbe\u7f6e": 491, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 491, "\u5b83\u5b58\u50a8\u7531": 491, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 491, "\u7684\u5143\u4fe1\u606f": 491, "\u4f8b\u5982\u5f62\u72b6": 491, "\u540d\u79f0\u7b49": 491, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 491, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 491, "\u5b83\u76f8\u5f53\u4e8e": 491, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 491, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 491, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 491, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 491, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 491, "\u7684\u540c\u6837\u5927\u5c0f": 491, "\u5bfc\u81f4\u5728": 491, "\u73af\u5883\u4e0b\u5b89\u88c5": 491, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 491, "\u7f16\u8bd1": 491, "\u5931\u8d25": 491, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 491, "\u8be6\u60c5\u53ef\u53c2\u8003": 491, "\u4f60\u53ef\u4ee5\u6839\u636e": 491, "\u6b64\u6559\u7a0b": 491, "\u6765\u6e90\u7801\u7f16\u8bd1": 491, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 491, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 491, "\u4e0a\u5206\u914d": 491, "\u65f6\u9047\u5230\u4e86": 491, "\u95ee\u9898": 491, "\u5982\u4f55\u89e3\u51b3": 491, "\u901a\u5e38\u5f53\u4f7f\u7528": 491, "\u7684\u65b9\u5f0f\u5b89\u88c5": 491, "\u4f1a\u62a5": 491, "\u9519\u8bef": [491, 493], "\u6211\u4eec\u901a\u8fc7": 491, "\u6765\u67e5\u770b\u65e5\u5fd7": 491, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 491, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 491, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 491, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 491, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 491, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 491, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 491, "\u7136\u540e\u5c06": 491, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 491, "\u4e3a\u4ec0\u4e48\u5728": 491, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 491, "\u5b9e\u4f8b\u65f6": 491, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 491, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 491, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 491, "\u96c6\u7fa4\u62c9\u8d77": 491, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 491, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 491, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 491, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 491, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 491, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 491, "\u6216\u5bb9\u5668": 491, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 491, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 491, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 491, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 491, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 491, "\u4ee5\u53ca": [491, 498], "\u8bf7\u6ce8\u610f": 491, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 491, "stackexchang": 491, "23452": 491, "\u5176\u4ed6\u95ee\u9898": 491, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 491, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 491, "\u540c\u65f6": [491, 496], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 491, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 492, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 492, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 492, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 492, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 492, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 492, "\u4f7f\u7528": [492, 494, 497, 498, 499], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 492, "\u6570\u636e\u96c6": 492, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 492, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 492, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 492, "\u5373\u8bba\u6587": 492, "\u4f5c\u8005": 492, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 492, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 492, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 492, "\u7ed9\u51fa\u5f02\u6784\u7684": 492, "\u6570\u636e": 492, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 492, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 492, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 492, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 492, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 492, "\u5728\u8be5\u6570\u636e\u4e2d": 492, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 492, "\u6458\u8981\u62bd\u53d6\u7684": 492, "\u7ef4": 492, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 492, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 492, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 492, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 492, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 492, "\u5ba2\u6237\u7aef\u8c03\u7528": 492, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 492, "\u6b65\u9aa4": 492, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 492, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 492, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 492, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 492, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 492, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 492, "\u7684\u7b2c\u4e00\u6b65": 492, "\u6211\u4eec\u9700\u8981\u5728": 492, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 492, "\u5bf9\u4e8e": [492, 495], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 492, "\u670d\u52a1\u7c7b\u578b": 492, "\u9ed8\u8ba4\u662f": 492, "\u53e6\u5916": [492, 498], "\u6ce8\u610f": [492, 495], "\u662f": 492, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 492, "\u5f53\u5728": 492, "\u4e0a\u4f7f\u7528": 492, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 492, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 492, "\u901a\u5e38\u4e3a": 492, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 492, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 492, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 492, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 492, "\u8be5": 492, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 492, "\u6240\u6709\u8d44\u6e90": 492, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 492, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 492, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 492, "\u90fd\u6709\u4e00\u4e2a": 492, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 492, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 492, "\u8f7d\u56fe": [492, 493, 494], "\u4ee5\u5c5e\u6027\u56fe": 492, "\u5efa\u6a21\u56fe\u6570\u636e": [492, 498], "\u5c5e\u6027\u56fe\u4e2d": 492, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 492, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 492, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 492, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 492, "\u5206\u522b\u6807\u8bb0\u4e3a": 492, "\u8bba\u6587": 492, "\u673a\u6784": 492, "\u7814\u7a76\u9886\u57df": 492, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 492, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 492, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 492, "\u5f15\u7528": 492, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 492, "\u9876\u70b9": 492, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 492, "\u64b0\u5199": 492, "\u7684\u8fb9": [492, 498], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 492, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 492, "\u6240\u6709\u7684\u9876\u70b9": 492, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 492, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 492, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 492, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 492, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 492, "\u6570\u636e\u6587\u4ef6": 492, "\u7ed3\u5408\u4f7f\u7528": 492, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 492, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 492, "author_affiliated_with_institut": 492, "paper_has_topic_field_of_studi": 492, "hastop": 492, "paper_cites_pap": 492, "author_writes_pap": 492, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 492, "\u8fd9\u91cc\u7684": 492, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 492, "\u4e2d\u7684\u56fe": 492, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 492, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 492, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 492, "\u63a2\u7d22\u6027": 492, "\u65b9\u5f0f\u6765\u63a2\u7d22": 492, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 492, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 492, "\u91c7\u7528\u79f0\u4e3a": 492, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 492, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 492, "\u5728\u6b64\u793a\u4f8b\u4e2d": 492, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 492, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 492, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 492, "\u552f\u4e00\u6807\u8bc6": 492, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 492, "\u4e8b\u5b9e\u8bc1\u660e": 492, "\u8bb8\u591a\u7b97\u6cd5": 492, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 492, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 492, "\u96c6\u4e2d\u6027": 492, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 492, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 492, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 492, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 492, "\u80cc\u540e\u57fa\u4e8e": 492, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 492, "\u7136\u540e\u8fd0\u884c": 492, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 492, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 492, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 492, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 492, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 492, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 492, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 492, "\u5f53\u524d": 492, "\u652f\u6301\u7528\u6237\u4ee5": 492, "\u6a21\u578b\u548c": 492, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 492, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 492, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 492, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 492, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 492, "\u6211\u4eec\u8bad\u7ec3\u4e86": 492, "\u6a21\u578b": 492, "\u5c06\u8282\u70b9": 492, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 492, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 492, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 492, "\u4e3a\u6b64": 492, "\u63a5\u7740\u4e0a\u4e00\u6b65": 492, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 492, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 492, "train_gcn": 492, "\u6700\u540e": [492, 493, 496], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 492, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 492, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 492, "\u548c\u5f15\u64ce": 492, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 492, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 493, "\u6295\u5f71\u7684\u65b9\u6cd5": 493, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 493, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 493, "\u5177\u4f53\u800c\u8a00": 493, "\u56fe": 493, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 493, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 493, "\u6211\u4eec\u5df2\u7ecf\u5728": 493, "\u4e00\u8282\u89c1\u5230\u8fc7": 493, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 493, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 493, "\u8fdb\u4e00\u6b65\u7684": 493, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 493, "\u4e2d\u4e4b\u540e": 493, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 493, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 493, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 493, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 493, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 493, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 493, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 493, "pathlib": 493, "\u5230\u8fd9\u91cc": 493, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 493, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 493, "graph1": 493, "graph2": 493, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 493, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 493, "\u5728\u5e95\u5c42": 493, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 493, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 493, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 493, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 493, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 493, "\u6765\u5b8c\u6210": 493, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 493, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 493, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 493, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 493, "\u503c\u53ef\u4ee5\u4e3a": 493, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 493, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 493, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 493, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 493, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 493, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 493, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 493, "sub_graph2": 493, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 493, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 493, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 493, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 493, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 493, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 493, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 493, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 493, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 493, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 493, "\u8fb9\u6807\u7b7e": 493, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 493, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 493, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 493, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 493, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 493, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 493, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 493, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 494, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 494, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 494, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 494, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 494, "\u63d0\u4f9b\u4e86": 494, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 494, "\u5177\u6709\u4e00\u7ad9\u5f0f": 494, "\u5f00\u53d1\u4fbf\u6377": 494, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 494, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 494, "\u5305\u62ec": [494, 497], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 494, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 494, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 494, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 494, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 494, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 494, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 494, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 494, "\u5982\u98ce\u63a7": 494, "\u7535\u5546\u63a8\u8350": 494, "\u5e7f\u544a": 494, "\u7f51\u7edc\u5b89\u5168": [494, 497], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 494, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 494, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 494, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 494, "\u6700\u4f73\u8bba\u6587\u5956": 494, "vldb2017": 494, "\u6700\u4f73\u6f14\u793a\u5956": 494, "vldb2020": 494, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 494, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 494, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 494, "2021\u5f55\u7528": 494, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 494, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 494, "kdd\u7b49": 494, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 494, "\u57fa\u4e8e": [494, 499], "\u793a\u4f8b": 494, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 494, "\u521b\u5efa\u4f1a\u8bdd": 494, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 494, "\u56fe\u5206\u6790": 494, "\u56fe\u795e\u7ecf\u7f51\u7edc": 494, "\u5173\u95ed\u4f1a\u8bdd": 494, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 494, "\u5728aw": 494, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 494, "\u672c\u5730\u90e8\u7f72graphscop": 494, "\u5165\u95e8\u6559\u7a0b": 494, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [494, 499], "\u4f7f\u7528\u517c\u5bb9": [494, 499], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [494, 499], "\u7528": [494, 496, 499], "\u50cf": [494, 499], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [494, 499], "\u8f7d\u5165\u56fe\u6570\u636e": [494, 499], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [494, 499], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [494, 499], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [494, 499], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [494, 499], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [494, 499], "bipartitegraphsag": [494, 499], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [494, 499], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [494, 499], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [494, 499], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 494, "\u624b\u52a8\u914d\u7f6e\u56fe": 494, "\u9ad8\u7ea7\u7528\u6cd5": 494, "\u4ece": [494, 496], "\u4e2d\u8f7d\u56fe": 494, "\u7684\u53d8\u79cd": 494, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 494, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 494, "\u6295\u5f71": 494, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 494, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 494, "\u5185\u7f6e\u7b97\u6cd5": 494, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 494, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 494, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 494, "\u4e2d\u7684\u51fd\u6570": 494, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 494, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 494, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 494, "\u5229\u7528python": 494, "\u8fde\u63a5graphscop": 494, "\u5229\u7528java": 494, "\u5f00\u53d1\u63a7\u5236\u53f0": 494, "gremlin\u7f16\u7a0b\u5165\u95e8": 494, "gremlin\u517c\u5bb9\u6027": 494, "\u5bf9\u6bd4tinkerpop": 494, "\u56fe\u5b66\u4e60\u6a21\u578b": 494, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 494, "\u5e38\u89c1\u95ee\u9898": 494, "\u5f00\u53d1\u8005\u6307\u5357": 494, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 494, "\u6784\u5efa": 494, "\u4ee3\u7801\u98ce\u683c": 494, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 495, "monterei": 495, "\u7a0b\u5e8f\u5305": 495, "\u7684\u5f62\u5f0f\u53d1\u5e03": 495, "\u53ef\u76f4\u63a5\u901a\u8fc7": 495, "\u9700\u8981\u6ee1\u8db3": 495, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 495, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 495, "\u73af\u5883\u4e0b\u8fd0\u884c": 495, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 495, "\u7684\u7528\u6237": 495, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 495, "\u5e76\u5728": 495, "\u4e2d\u5f00\u542f": 495, "\u529f\u80fd": 495, "\u53d1\u884c\u7248\u7528\u6237": 495, "\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528": 495, "\u90e8\u7f72\u4e00\u4e2a\u672c\u5730\u7684": 495, "\u7684\u5b89\u88c5\u548c\u90e8\u7f72\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684": 495, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 495, "\u4e0a\u5b89\u88c5": 495, "wsl2": 495, "\u6765\u6a21\u62df": 495, "\u73af\u5883": [495, 499], "\u63a5\u4e0b\u6765": [495, 496, 497], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 495, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 496, "\u7b80\u79f0gie": 496, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 496, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 496, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 496, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 496, "\u8be5\u5f15\u64ce\u652f\u6301": 496, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 496, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 496, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 496, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 496, "\u63a5\u53e3": [496, 497], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 496, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 496, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 496, "\u5982\u4e0b\u6240\u793a": 496, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 496, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 496, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 496, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 496, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 496, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 496, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 496, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 496, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 496, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 496, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 496, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 496, "\u683c\u5f0f": 496, "\u7684\u8f93\u51fa": 496, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 496, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 496, "python\u8bbf\u95ee\u56fe\u6570\u636e": 496, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 496, "\u5b98\u65b9\u6587\u6863": 496, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 496, "\u8be6\u89c1gremlin": 496, "java\u7684": 496, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 496, "\u4e5f\u53eb\u505arepl\u73af\u5883": 496, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 496, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 496, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 496, "\u5b89\u88c5gremlin": 496, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 496, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 496, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 496, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 496, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 496, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 496, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 496, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 496, "\u5176\u4e2d\u7684": 496, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 496, "\u6216ip": 496, "\u548c\u7aef\u53e3": 496, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 496, "\u63d0\u793a\u7b26\u4e0b": 496, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 496, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 496, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 496, "\u8fdc\u7a0b": 496, "graphscope\u6267\u884c": 496, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 496, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 496, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 496, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 496, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 496, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 496, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 496, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 496, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 496, "hoc": 496, "\u904d\u5386\u67e5\u8be2": 496, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 496, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 496, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 496, "\u70b9\u6216\u8fb9": 496, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 496, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 496, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 496, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 496, "\u952e": 496, "\u503c": 496, "\u5bf9": 496, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 496, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 496, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 496, "\u5b83\u5305\u542b": 496, "\u7528\u6237": 496, "\u5546\u54c1": 496, "\u5730\u5740": 496, "\u4e09\u7c7b\u70b9": 496, "\u5b83\u4eec\u901a\u8fc7": 496, "\u8d2d\u4e70": 496, "\u9012\u9001": 496, "belongs_to": 496, "\u5c5e\u4e8e": 496, "home_of": 496, "\u5bb6\u5ead\u5730\u5740": 496, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 496, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 496, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 496, "\u8def\u5f841": 496, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 496, "\u4e70\u5bb6": 496, "tom": 496, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 496, "jack": 496, "\u63d0\u4f9b\u7684\u6807\u4ef7": 496, "\u7684\u5546\u54c1": 496, "gift": 496, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 496, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 496, "\u904d\u5386\u5668": 496, "\u6807\u8bc6": 496, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 496, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 496, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 496, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 496, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 496, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 496, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 496, "\u8fb9\u6216\u5c5e\u6027": 496, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 496, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 496, "\u5d4c\u5957\u904d\u5386": 496, "\u7684\u652f\u6301": 496, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 496, "\u5b50": 496, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 496, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 496, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 496, "\u8fc7\u6ee4": 496, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 496, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 496, "\u800c": 496, "\u6620\u5c04": 496, "\u6392\u5e8f": 496, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 496, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 496, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 496, "\u5728gremlin\u4e2d\u901a\u8fc7": 496, "\u5faa\u73af": 496, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 496, "\u7ec8\u6b62\u6761\u4ef6": 496, "\u8868\u8fbe": 496, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 496, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 496, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 496, "\u6761\u4ef6\u7ec8\u6b62": 496, "\u64cd\u4f5c\u7c7b\u4f3c": 496, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 496, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 496, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 496, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 496, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 496, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 496, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 496, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 496, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 496, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 496, "\u7684\u6709\u5411\u73af\u8def": 496, "\u9996\u5148": [496, 498], "\u8f93\u5165\u56fe\u64cd\u4f5c": 496, "\u5305\u542b\u4e00\u4e2a": 496, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 496, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 496, "\u70b9": 496, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 496, "\u7684\u70b9": 496, "\u7d27\u968f\u5176\u540e\u7684": 496, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 496, "\u4fee\u9970\u7b26": 496, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 496, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 496, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 496, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 496, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 496, "\u67e5\u8be2\u6cbf\u7740": 496, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 496, "\u6b21": 496, "\u8f93\u51fahops\u5728": 496, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 496, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 496, "\u901a\u8fc7\u5728": 496, "\u5185\u914d\u7f6e": 496, "\u9009\u9879\u5b9e\u73b0": 496, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 496, "\u6307\u4ee3": 496, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 496, "\u7684\u73af": 496, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 496, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 496, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 496, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 496, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 496, "\u5982\u679c\u6709\u7684\u8bdd": 496, "gie\u652f\u6301apach": 496, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 496, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 496, "3\u548c3": 496, "4\u7248\u672c\u517c\u5bb9\u7684": 496, "\u670d\u52a1\u63a5\u53e3": 496, "\u9664\u6b64\u4e4b\u5916": 496, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 496, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 496, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 496, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 496, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 496, "\u76ee\u524d\u7684": 496, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 496, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 496, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 496, "\u4e0d\u53ef\u4fee\u6539": 496, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 496, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 496, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 496, "\u7ea6\u675f": 496, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 496, "\u5305\u62ec\u70b9": 496, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 496, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 496, "\u4e3b\u952e\u7ea6\u675f": 496, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 496, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 496, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 496, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 496, "id\u7f16\u7801\u4e86\u7c7b\u578b": 496, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 496, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 496, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 496, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 496, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 496, "\u56fe\u4fee\u6539\u64cd\u4f5c": 496, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 496, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 496, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 496, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 496, "\u4e8b\u52a1": 496, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 496, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 496, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 496, "\u548c\u793a\u4f8b\u7528\u6cd5": 496, "\u8f93\u5165\u56fe": 496, "labelnam": 496, "labelname1": 496, "labelname2": 496, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 496, "\u8bed\u6cd5\u7cd6": 496, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 496, "\u4ee3\u8868": 496, "\u8282\u70b9\u7684age\u5c5e\u6027": 496, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 496, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 496, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 496, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 496, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 496, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 496, "dedup": 496, "aaa": 496, "otherv": 496, "flatmap": 496, "\u591a\u91cd\u6620\u5c04": 496, "bothv": 496, "\u627e\u5230\u6240\u6709\u4ece": 496, "\u5f00\u59cb\u901a\u8fc7": 496, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 496, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 496, "\u70b9\u4e0d\u91cd\u590d": 496, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 496, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 496, "\u70b9\u53ef\u91cd\u590d": 496, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 496, "\u805a\u5408": 496, "groupbi": 496, "groupby\u591a\u4e2akei": 496, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 496, "groupby\u591a\u4e2avalu": 496, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 496, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 496, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 496, "\u4f1a\u9010\u6b65\u652f\u6301": 496, "\u53ef\u4ee5\u901a\u8fc7path": 496, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 496, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 496, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 496, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 496, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 496, "\u8ba1\u7b97\u5b50\u56fe": 496, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 496, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 496, "cap": 496, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 496, "\u4f8b\u5982pagerank\u548cshortestpath": 496, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 496, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 497, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 497, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 497, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 497, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 497, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 497, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 497, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 497, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 497, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 497, "\u57fa\u4e8egl": 497, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 497, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 497, "\u4f8b\u5982\u56fe\u91c7\u6837": 497, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 497, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 497, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 497, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 497, "\u539f\u59cb\u7684gcn": 497, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 497, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 497, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 497, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 497, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 497, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 497, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 497, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 497, "graphsaint\u7b49": 497, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 497, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 497, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 497, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 497, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 497, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 497, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 497, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 497, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 497, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 497, "\u5305\u62ectensorflow": 497, "\u548cpytorch": 497, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 497, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 497, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 497, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 497, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 497, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 497, "\u79f0\u4e3a": 497, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 497, "\u611f\u53d7\u91ce": 497, "\u591a\u8df3\u90bb\u5c45": 497, "\u7ec4\u6210": 497, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 497, "\u6211\u4eec\u5b9e\u73b0": 497, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 497, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 497, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 497, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 497, "\u7136\u540e\u7528": 497, "\u7ba1\u7406": 497, "\u5230": 497, "\u7684\u8f6c\u6362": 497, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 497, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 497, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 497, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 497, "\u5411\u91cf": 497, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 497, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 497, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 497, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 497, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 497, "\u56fe\u7f16\u7801\u5668": 497, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 497, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 497, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 497, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 497, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 497, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 497, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 497, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 497, "\u5982tensorflow": 497, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 497, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 497, "\u901a\u5e38\u6765\u8bf4": 497, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 497, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 497, "\u7528\u56fe\u91c7\u6837": 497, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 497, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 497, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 497, "\u4ee5\u8fd9\u4e9b": 497, "\u4e3a\u8f93\u5165\u4ea7\u751f": 497, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 497, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 497, "\u4ea7\u751f\u8d1f\u6837\u672c": 497, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 497, "\u6211\u4eec\u62bd\u8c61\u4e86": 497, "\u6765\u91c7\u6837\u90bb\u5c45": 497, "\u6700\u540e\u5c06": 497, "\u4ea7\u751f\u7684": 497, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 497, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 497, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 497, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 497, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 497, "\u624d\u80fd\u4f7f\u7528": 497, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 497, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 497, "\u5b9a\u4e49\u7f16\u7801\u5668": 497, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 497, "\u5f97\u5230": 497, "\u540e": 497, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 497, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 497, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 497, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 497, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 497, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 497, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 497, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 497, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 497, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 497, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 497, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 497, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 497, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 497, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 497, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 497, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 497, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 497, "\u6765": 497, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 497, "\u9700\u8981\u7684\u683c\u5f0f": 497, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 497, "\u5206\u522b\u662f\u70b9\u8868": 497, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 497, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 497, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 497, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 497, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 497, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 497, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 497, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 497, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 497, "\u56de\u4e00\u8df3\u90bb\u5c45": 497, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 497, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 497, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 497, "\u56e0\u6b64\u9009\u62e9": 497, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 497, "\u6210": 497, "\u8fd4\u56de": 497, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 497, "\u6765\u628a": 497, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 497, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 497, "\u4f60\u53ef\u4ee5\u4ece": 497, "\u83b7\u53d6\u548c\u524d\u9762": 497, "\u5bf9\u5e94\u7684": 497, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 497, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 497, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 497, "\u56e0\u4e3a": 497, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 497, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 497, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 497, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 497, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 497, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 497, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 497, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 497, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 497, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 497, "\u7136\u540e\u5728": 497, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 497, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 497, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 497, "\u6765\u8fdb\u884c\u8bad\u7ec3": 497, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 497, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 497, "\u76ee\u5f55": 497, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 497, "gat\u7b49\u6a21\u578b": 497, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 497, "\u5c5e\u6027\u56fe": 498, "\u56fe\u4e0a\u7684\u70b9": 498, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 498, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 498, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 498, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 498, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 498, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 498, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 498, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 498, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 498, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 498, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 498, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 498, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 498, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 498, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 498, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 498, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 498, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 498, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 498, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 498, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 498, "\u7684\u672c\u5730\u8def\u5f84": 498, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 498, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 498, "\u662f\u6211\u4eec\u901a\u8fc7": 498, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 498, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 498, "\u4f60\u53ef\u4ee5\u5728": 498, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 498, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 498, "\u7136\u800c": 498, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 498, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 498, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 498, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 498, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 498, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 498, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 498, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 498, "\u6211\u4eec\u5c06\u4f7f\u7528": 498, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 498, "\u627e\u5230\u6e90\u6570\u636e": 498, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 498, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 498, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 498, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 498, "\u4ee3\u8868\u6570\u636e\u6e90": 498, "\u6307\u793a": 498, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 498, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 498, "\u6570\u7ec4\u7b49": 498, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 498, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 498, "\u8f7d\u5165\u6570\u636e": 498, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 498, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 498, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 498, "\u9ed8\u8ba4\u4e3a": 498, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 498, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 498, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 498, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 498, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 498, "\u4e3e\u4e2a\u4f8b\u5b50": 498, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 498, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 498, "\u53ef\u9009\u9879": 498, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 498, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 498, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 498, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 498, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 498, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 498, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 498, "\u6bd4\u5982\u8bf4": 498, "\u5217\u7684\u5217\u540d": 498, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 498, "\u6216\u76ee\u6807\u70b9": 498, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 498, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 498, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 498, "\u4ee3\u8868\u7b2c\u51e0\u5217": 498, "\u4ece0\u5f00\u59cb": 498, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 498, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 498, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 498, "\u7c7b\u4f3c": 498, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 498, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 498, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 498, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 498, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 498, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 498, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 498, "\u8fb9\u7684\u6807\u7b7e\u540d": 498, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 498, "\u4e00\u5217\u5c5e\u6027": 498, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 498, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 498, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 498, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 498, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 498, "\u4e3e\u4f8b\u6765\u8bf4": 498, "\u8d77\u70b9\u7684": 498, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 498, "\u5217\u540d": 498, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 498, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 498, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 498, "\u4e00\u5217\u4e3a\u8d77\u70b9": 498, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 498, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 498, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 498, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 498, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 498, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 498, "\u5982\u679c\u7528\u6237\u7684": 498, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 498, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 498, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 498, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 498, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 498, "\u6709\u4e00\u4e2a\u540d\u4e3a": 498, "\u7684\u8fb9\u6807\u7b7e": 498, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 498, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 498, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 498, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 498, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 498, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 498, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 498, "\u50cf\u8fd9\u6837": 498, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 498, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 498, "\u5728\u8fd9\u91cc": 498, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 498, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 498, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 498, "\u7b49\u7c7b\u578b": 498, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 498, "\u5206\u522b\u4e3a": 498, "\u53ef\u4ee5\u4e3a": 498, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 498, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 498, "\u5f53id\u4e0d\u80fd\u7528": 498, "\u8868\u793a\u65f6": 498, "\u624d\u5e94\u8be5\u4f7f\u7528": 498, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 498, "\u5efa\u8bae\u4f7f\u7528": 498, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 498, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 498, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 498, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 498, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 498, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 498, "\u5c5e\u6027\u56fe\u7684": 498, "\u4f8b\u5b50": 498, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 498, "\u7684\u7c7b": 498, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 498, "\u652f\u6301\u4ece": 498, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 498, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 498, "\u9664\u4e86": 498, "\u5916": 498, "\u5176\u4ed6\u5c5e\u6027": 498, "id\u5217": 498, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 498, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 498, "\u6211\u4eec\u5c06\u5176\u4ee5": 498, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 498, "\u5f53": 498, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 498, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 498, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 498, "\u6807\u51c6": 498, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 498, "\u5c06\u4f1a\u89e3\u6790": 498, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 498, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 498, "\u672c\u5730": 498, "\u6570\u636e\u7531": 498, "\u8d1f\u8d23\u8f7d\u5165": 498, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 498, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 498, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 498, "\u4e4b\u4e8e": 498, "\u6216\u8005\u662f": 498, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 498, "\u6bd4\u5982\u53c2\u7167": 498, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 498, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 498, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 498, "abstractbufferedfil": 498, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 498, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 498, "write\u529f\u80fd": 498, "\u6700\u540e\u901a\u8fc7": 498, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 498, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 499, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 499, "\u5982\u4f55\u8f7d\u56fe": 499, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 499, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 499, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 499, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 499, "\u6211\u4eec\u7528jupyt": 499, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 499, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 499, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 499, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 499, "lab": 499, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 499, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 499}, "objects": {"": [[255, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [255, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [255, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [255, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [255, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [255, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [255, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [255, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [255, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [255, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [255, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [255, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [255, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [255, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [255, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [255, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [255, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [255, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [255, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [255, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [255, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [255, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [255, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [255, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [255, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [255, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [255, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [255, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [255, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [255, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [255, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [255, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [255, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [255, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [255, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [255, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [255, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [255, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [255, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::frag_id"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::label_id"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::frag_id"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::label_id"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::extend_type"], [255, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::frag_id"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [255, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [255, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [255, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [255, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [255, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [255, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [255, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [255, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [255, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [255, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [255, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [255, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [255, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [255, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [255, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [255, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [255, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [255, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [255, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [255, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [255, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [255, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [255, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [255, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [255, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [255, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [255, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [255, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [255, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [255, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [255, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [255, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [255, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [255, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [255, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [255, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [255, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [255, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [255, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [255, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [255, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [255, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [255, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [255, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [255, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [255, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [255, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [255, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [255, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [255, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [255, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [255, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [255, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [255, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [255, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [255, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [255, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [255, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [255, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [255, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [255, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [255, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [255, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [255, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [255, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [255, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [255, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [255, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [255, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [255, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [255, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [255, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [255, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [255, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [255, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [255, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [255, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [255, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [255, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [255, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [255, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [255, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [255, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [255, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [255, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [255, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [255, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [255, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [255, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [255, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [255, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [255, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [255, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [255, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [255, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [255, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [255, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [255, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [255, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [255, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [255, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [255, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [255, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [255, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [255, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [255, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [255, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [255, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [255, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [255, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [255, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [255, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [255, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [255, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [255, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [255, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [255, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [255, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [255, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [255, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [255, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [255, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [255, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [255, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [255, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [255, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [255, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [255, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [255, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [255, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [255, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [255, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [255, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [255, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [255, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [255, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [255, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [255, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [255, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [255, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [255, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [255, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [255, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [255, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [255, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [255, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [255, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [255, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [255, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [255, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [255, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [255, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [255, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [255, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [255, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [255, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [255, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [255, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [255, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [255, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [255, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [255, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [255, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [255, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [255, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [255, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [255, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [255, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [255, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [255, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [255, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [255, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [255, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [255, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [255, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [255, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [255, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [255, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [255, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [255, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [255, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [255, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [255, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [255, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [255, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [255, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [255, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [255, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [255, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [255, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [255, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [255, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [255, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [255, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [255, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [255, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [255, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [255, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [255, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [255, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [255, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [255, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [255, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [255, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [255, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [255, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [255, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [255, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [255, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [255, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [255, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [255, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [255, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [255, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [255, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [255, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [255, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [255, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [255, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [255, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [255, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [255, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [255, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [255, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [255, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [255, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [255, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [255, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [255, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [255, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [255, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [255, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [255, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [255, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [255, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [255, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [255, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [255, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [255, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [255, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [255, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [255, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [255, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [255, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [255, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [255, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [255, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [255, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [255, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [255, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [255, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [255, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [255, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [255, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [255, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [255, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [255, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [255, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [255, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [255, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [255, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [255, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [255, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [255, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [255, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [255, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [255, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [255, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [255, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [255, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [255, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [255, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [255, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [255, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [255, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [255, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [255, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [255, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [255, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [255, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [255, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [255, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [255, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [255, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [255, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [255, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [255, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [255, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [255, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [255, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [255, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [255, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [255, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [255, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [255, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [255, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [255, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [255, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [255, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [255, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [255, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [255, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [255, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [255, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [255, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [255, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [255, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [255, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [255, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [255, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [255, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [255, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [255, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [255, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [255, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [255, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [255, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [255, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [255, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [255, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [255, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [255, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [255, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [255, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [255, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [255, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [255, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[472, 9, 1, "", "Session"], [262, 12, 1, "", "Vertex"], [256, 8, 1, "", "attribute_assortativity_coefficient"], [256, 8, 1, "", "average_degree_connectivity"], [256, 8, 1, "", "average_shortest_path_length"], [256, 8, 1, "", "avg_clustering"], [256, 8, 1, "", "bfs"], [256, 8, 1, "", "cdlp"], [256, 8, 1, "", "clustering"], [263, 8, 1, "", "declare"], [256, 8, 1, "", "degree_assortativity_coefficient"], [256, 8, 1, "", "degree_centrality"], [256, 8, 1, "", "eigenvector_centrality"], [306, 8, 1, "", "g"], [307, 8, 1, "", "get_default_session"], [308, 8, 1, "", "graphlearn"], [309, 8, 1, "", "gremlin"], [310, 8, 1, "", "has_default_session"], [256, 8, 1, "", "hits"], [256, 8, 1, "", "is_simple_path"], [256, 8, 1, "", "k_core"], [256, 8, 1, "", "k_shell"], [256, 8, 1, "", "katz_centrality"], [256, 8, 1, "", "louvain"], [256, 8, 1, "", "lpa"], [256, 8, 1, "", "lpa_u2i"], [256, 8, 1, "", "numeric_assortativity_coefficient"], [256, 8, 1, "", "pagerank"], [256, 8, 1, "", "pagerank_nx"], [311, 14, 1, "", "session"], [312, 8, 1, "", "set_option"], [256, 8, 1, "", "sssp"], [256, 8, 1, "", "triangles"], [256, 8, 1, "", "voterank"], [256, 8, 1, "", "wcc"]], "graphscope.Session": [[472, 10, 1, "", "__enter__"], [472, 10, 1, "", "__exit__"], [472, 10, 1, "", "__init__"], [472, 10, 1, "", "add_lib"], [472, 10, 1, "", "as_default"], [472, 10, 1, "", "close"], [472, 10, 1, "", "connected"], [472, 11, 1, "", "engine_config"], [472, 10, 1, "", "g"], [472, 10, 1, "", "get_config"], [472, 10, 1, "", "get_vineyard_object_mapping_table"], [472, 10, 1, "", "graphlearn"], [472, 11, 1, "", "info"], [472, 10, 1, "", "interactive"], [472, 10, 1, "", "load_from"], [472, 10, 1, "", "restore_from_pvc"], [472, 10, 1, "", "run_fetches"], [472, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[256, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[256, 10, 1, "", "__call__"], [256, 10, 1, "", "__init__"], [256, 10, 1, "", "is_compatible"], [256, 10, 1, "", "signature"]], "graphscope.framework.app": [[256, 9, 1, "", "App"], [256, 9, 1, "", "AppAssets"], [256, 9, 1, "", "AppDAGNode"], [264, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[256, 10, 1, "", "__del__"], [256, 10, 1, "", "__init__"], [256, 11, 1, "", "key"], [256, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[256, 10, 1, "", "__init__"], [256, 11, 1, "", "algo"], [256, 11, 1, "", "context_type"], [256, 11, 1, "", "gar"], [256, 10, 1, "", "is_compatible"], [256, 11, 1, "", "signature"], [256, 11, 1, "", "type"]], "graphscope.framework.context": [[257, 9, 1, "", "BaseContextDAGNode"], [257, 9, 1, "", "Context"], [257, 9, 1, "", "DynamicVertexDataContext"], [257, 9, 1, "", "LabeledVertexDataContextDAGNode"], [257, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [257, 9, 1, "", "ResultDAGNode"], [257, 9, 1, "", "TensorContextDAGNode"], [257, 9, 1, "", "VertexDataContextDAGNode"], [257, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[257, 10, 1, "", "to_dataframe"], [257, 10, 1, "", "to_numpy"], [257, 10, 1, "", "to_vineyard_dataframe"], [257, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[469, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[265, 8, 1, "", "add_column"], [266, 8, 1, "", "add_labels_to_graph"], [267, 8, 1, "", "arrow_to_dynamic"], [268, 8, 1, "", "bind_app"], [269, 8, 1, "", "clear_edges"], [270, 8, 1, "", "clear_graph"], [271, 8, 1, "", "context_to_dataframe"], [272, 8, 1, "", "context_to_numpy"], [273, 8, 1, "", "copy_graph"], [274, 8, 1, "", "create_app"], [275, 8, 1, "", "create_graph"], [276, 8, 1, "", "create_graph_view"], [277, 8, 1, "", "create_loader"], [278, 8, 1, "", "create_subgraph"], [279, 8, 1, "", "create_unload_op"], [280, 8, 1, "", "dynamic_to_arrow"], [281, 8, 1, "", "get_context_data"], [282, 8, 1, "", "graph_to_dataframe"], [283, 8, 1, "", "graph_to_numpy"], [284, 8, 1, "", "gremlin_to_subgraph"], [285, 8, 1, "", "modify_edges"], [286, 8, 1, "", "modify_vertices"], [287, 8, 1, "", "output"], [288, 8, 1, "", "project_arrow_property_graph"], [289, 8, 1, "", "project_to_simple"], [290, 8, 1, "", "report_graph"], [291, 8, 1, "", "run_app"], [292, 8, 1, "", "to_data_sink"], [293, 8, 1, "", "to_directed"], [294, 8, 1, "", "to_undirected"], [295, 8, 1, "", "to_vineyard_dataframe"], [296, 8, 1, "", "to_vineyard_tensor"], [297, 8, 1, "", "unload_app"], [298, 8, 1, "", "unload_context"], [299, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[327, 9, 1, "", "Graph"], [327, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[327, 10, 1, "", "__init__"], [327, 10, 1, "", "add_column"], [327, 10, 1, "", "add_edges"], [327, 10, 1, "", "add_vertices"], [327, 10, 1, "", "consolidate_columns"], [327, 10, 1, "", "detach"], [327, 11, 1, "", "key"], [327, 10, 1, "", "load_from"], [327, 10, 1, "", "loaded"], [327, 10, 1, "", "project"], [327, 10, 1, "", "save_to"], [327, 11, 1, "", "schema"], [327, 11, 1, "", "schema_path"], [327, 11, 1, "", "session_id"], [327, 10, 1, "", "to_dataframe"], [327, 10, 1, "", "to_directed"], [327, 10, 1, "", "to_numpy"], [327, 10, 1, "", "to_undirected"], [327, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[327, 10, 1, "", "__init__"], [327, 10, 1, "", "add_column"], [327, 10, 1, "", "add_edges"], [327, 10, 1, "", "add_vertices"], [327, 10, 1, "", "consolidate_columns"], [327, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[327, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[327, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[327, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[469, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[300, 10, 1, "", "__init__"], [301, 10, 1, "", "as_op_def"], [302, 10, 1, "", "eval"], [303, 11, 1, "", "evaluated"], [304, 11, 1, "", "key"], [305, 11, 1, "", "signature"]], "graphscope.interactive.query": [[328, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[328, 10, 1, "", "__init__"], [328, 10, 1, "", "close"], [328, 11, 1, "", "cypher_driver"], [328, 11, 1, "", "cypher_url"], [328, 10, 1, "", "execute"], [328, 11, 1, "", "graph_url"], [328, 11, 1, "", "gremlin_client"], [328, 11, 1, "", "gremlin_url"], [328, 11, 1, "", "object_id"], [328, 11, 1, "", "session"], [328, 11, 1, "", "session_id"], [328, 10, 1, "", "subgraph"], [328, 10, 1, "", "submit"], [328, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[329, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[329, 10, 1, "", "E"], [329, 10, 1, "", "V"], [329, 10, 1, "", "__init__"], [329, 10, 1, "", "get_handle"]], "graphscope.nx": [[465, 9, 1, "", "DiGraph"], [465, 9, 1, "", "Graph"], [467, 8, 1, "", "read_adjlist"], [467, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[465, 10, 1, "", "__contains__"], [465, 10, 1, "", "__getitem__"], [465, 10, 1, "", "__init__"], [465, 10, 1, "", "__iter__"], [465, 10, 1, "", "__len__"], [465, 10, 1, "", "add_edge"], [465, 10, 1, "", "add_edges_from"], [465, 10, 1, "", "add_node"], [465, 10, 1, "", "add_nodes_from"], [465, 10, 1, "", "add_weighted_edges_from"], [465, 11, 1, "", "adj"], [465, 10, 1, "", "adjacency"], [465, 14, 1, "", "adjlist_inner_dict_factory"], [465, 14, 1, "", "adjlist_outer_dict_factory"], [465, 10, 1, "", "clear"], [465, 10, 1, "", "clear_edges"], [465, 10, 1, "", "copy"], [465, 11, 1, "", "degree"], [465, 14, 1, "", "edge_attr_dict_factory"], [465, 10, 1, "", "edge_subgraph"], [465, 11, 1, "", "edges"], [465, 10, 1, "", "get_edge_data"], [465, 14, 1, "", "graph_attr_dict_factory"], [465, 14, 1, "", "graph_cache_factory"], [465, 11, 1, "", "graph_type"], [465, 10, 1, "", "has_edge"], [465, 10, 1, "", "has_node"], [465, 10, 1, "", "has_predecessor"], [465, 10, 1, "", "has_successor"], [465, 11, 1, "", "in_degree"], [465, 11, 1, "", "in_edges"], [465, 10, 1, "", "is_directed"], [465, 10, 1, "", "is_multigraph"], [465, 11, 1, "", "key"], [465, 11, 1, "", "name"], [465, 10, 1, "", "nbunch_iter"], [465, 10, 1, "", "neighbors"], [465, 14, 1, "", "node_attr_dict_factory"], [465, 14, 1, "", "node_dict_factory"], [465, 11, 1, "", "nodes"], [465, 10, 1, "", "number_of_edges"], [465, 10, 1, "", "number_of_nodes"], [465, 11, 1, "", "op"], [465, 10, 1, "", "order"], [465, 11, 1, "", "out_degree"], [465, 11, 1, "", "out_edges"], [465, 11, 1, "", "pred"], [465, 10, 1, "", "predecessors"], [465, 10, 1, "", "remove_edge"], [465, 10, 1, "", "remove_edges_from"], [465, 10, 1, "", "remove_node"], [465, 10, 1, "", "remove_nodes_from"], [465, 10, 1, "", "reverse"], [465, 11, 1, "", "schema"], [465, 11, 1, "", "session"], [465, 11, 1, "", "session_id"], [465, 10, 1, "", "set_edge_data"], [465, 10, 1, "", "set_node_data"], [465, 11, 1, "", "signature"], [465, 10, 1, "", "size"], [465, 10, 1, "", "subgraph"], [465, 11, 1, "", "succ"], [465, 10, 1, "", "successors"], [465, 10, 1, "", "to_directed"], [465, 10, 1, "", "to_undirected"], [465, 10, 1, "", "to_undirected_class"], [465, 10, 1, "", "update"]], "graphscope.nx.Graph": [[465, 10, 1, "", "__contains__"], [465, 10, 1, "", "__getitem__"], [468, 8, 1, "", "__init__"], [465, 10, 1, "", "__iter__"], [465, 10, 1, "", "__len__"], [468, 8, 1, "", "_convert_arrow_to_dynamic"], [465, 10, 1, "", "add_edge"], [465, 10, 1, "", "add_edges_from"], [465, 10, 1, "", "add_node"], [465, 10, 1, "", "add_nodes_from"], [465, 10, 1, "", "add_weighted_edges_from"], [465, 11, 1, "", "adj"], [465, 10, 1, "", "adjacency"], [465, 14, 1, "", "adjlist_inner_dict_factory"], [465, 14, 1, "", "adjlist_outer_dict_factory"], [465, 10, 1, "", "clear"], [465, 10, 1, "", "clear_edges"], [465, 10, 1, "", "copy"], [465, 11, 1, "", "degree"], [465, 14, 1, "", "edge_attr_dict_factory"], [465, 10, 1, "", "edge_subgraph"], [465, 11, 1, "", "edges"], [465, 10, 1, "", "get_edge_data"], [465, 14, 1, "", "graph_attr_dict_factory"], [465, 14, 1, "", "graph_cache_factory"], [465, 11, 1, "", "graph_type"], [465, 10, 1, "", "has_edge"], [465, 10, 1, "", "has_node"], [465, 10, 1, "", "is_directed"], [465, 10, 1, "", "is_multigraph"], [465, 11, 1, "", "key"], [465, 11, 1, "", "name"], [465, 10, 1, "", "nbunch_iter"], [465, 10, 1, "", "neighbors"], [465, 14, 1, "", "node_attr_dict_factory"], [465, 14, 1, "", "node_dict_factory"], [465, 11, 1, "", "nodes"], [465, 10, 1, "", "number_of_edges"], [465, 10, 1, "", "number_of_nodes"], [465, 11, 1, "", "op"], [465, 10, 1, "", "order"], [465, 10, 1, "", "remove_edge"], [465, 10, 1, "", "remove_edges_from"], [465, 10, 1, "", "remove_node"], [465, 10, 1, "", "remove_nodes_from"], [465, 11, 1, "", "schema"], [465, 11, 1, "", "session"], [465, 11, 1, "", "session_id"], [465, 10, 1, "", "set_edge_data"], [465, 10, 1, "", "set_node_data"], [465, 11, 1, "", "signature"], [465, 10, 1, "", "size"], [465, 10, 1, "", "subgraph"], [465, 10, 1, "", "to_directed"], [465, 10, 1, "", "to_undirected"], [465, 10, 1, "", "to_undirected_class"], [465, 10, 1, "", "update"]], "graphscope.nx.builtin": [[330, 8, 1, "", "average_clustering"], [330, 8, 1, "", "average_shortest_path_length"], [330, 8, 1, "", "bfs_edges"], [330, 8, 1, "", "clustering"], [330, 8, 1, "", "degree_centrality"], [330, 8, 1, "", "eigenvector_centrality"], [330, 8, 1, "", "has_path"], [330, 8, 1, "", "hits"], [330, 8, 1, "", "in_degree_centrality"], [330, 8, 1, "", "k_core"], [330, 8, 1, "", "katz_centrality"], [330, 8, 1, "", "out_degree_centrality"], [330, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[331, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[332, 8, 1, "", "add_cycle"], [333, 8, 1, "", "add_path"], [334, 8, 1, "", "add_star"], [335, 8, 1, "", "all_neighbors"], [336, 8, 1, "", "common_neighbors"], [337, 8, 1, "", "create_empty_copy"], [338, 8, 1, "", "degree"], [339, 8, 1, "", "degree_histogram"], [340, 8, 1, "", "density"], [341, 8, 1, "", "edge_subgraph"], [342, 8, 1, "", "edges"], [343, 8, 1, "", "freeze"], [344, 8, 1, "", "induced_subgraph"], [345, 8, 1, "", "info"], [346, 8, 1, "", "is_directed"], [347, 8, 1, "", "is_empty"], [348, 8, 1, "", "is_frozen"], [349, 8, 1, "", "is_negatively_weighted"], [350, 8, 1, "", "is_weighted"], [351, 8, 1, "", "neighbors"], [352, 8, 1, "", "nodes"], [353, 8, 1, "", "nodes_with_selfloops"], [354, 8, 1, "", "non_edges"], [355, 8, 1, "", "non_neighbors"], [356, 8, 1, "", "number_of_edges"], [357, 8, 1, "", "number_of_nodes"], [358, 8, 1, "", "number_of_selfloops"], [359, 8, 1, "", "selfloop_edges"], [360, 8, 1, "", "subgraph"], [361, 8, 1, "", "to_directed"], [362, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[464, 13, 0, "-", "atlas"], [464, 13, 0, "-", "classic"], [464, 13, 0, "-", "community"], [464, 13, 0, "-", "degree_seq"], [464, 13, 0, "-", "directed"], [464, 13, 0, "-", "duplication"], [464, 13, 0, "-", "ego"], [464, 13, 0, "-", "expanders"], [464, 13, 0, "-", "geometric"], [464, 13, 0, "-", "harary_graph"], [464, 13, 0, "-", "intersection"], [464, 13, 0, "-", "joint_degree_seq"], [464, 13, 0, "-", "mycielski"], [464, 13, 0, "-", "nonisomorphic_trees"], [464, 13, 0, "-", "small"], [464, 13, 0, "-", "social"], [464, 13, 0, "-", "spectral_graph_forge"], [464, 13, 0, "-", "sudoku"], [464, 13, 0, "-", "trees"], [464, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[363, 8, 1, "", "graph_atlas"], [364, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[365, 8, 1, "", "balanced_tree"], [366, 8, 1, "", "barbell_graph"], [367, 8, 1, "", "binomial_tree"], [368, 8, 1, "", "circulant_graph"], [369, 8, 1, "", "circular_ladder_graph"], [370, 8, 1, "", "complete_graph"], [371, 8, 1, "", "complete_multipartite_graph"], [372, 8, 1, "", "cycle_graph"], [373, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [374, 8, 1, "", "empty_graph"], [375, 8, 1, "", "full_rary_tree"], [376, 8, 1, "", "ladder_graph"], [377, 8, 1, "", "lollipop_graph"], [378, 8, 1, "", "null_graph"], [379, 8, 1, "", "path_graph"], [380, 8, 1, "", "star_graph"], [381, 8, 1, "", "trivial_graph"], [382, 8, 1, "", "turan_graph"], [383, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[384, 8, 1, "", "LFR_benchmark_graph"], [385, 8, 1, "", "caveman_graph"], [386, 8, 1, "", "connected_caveman_graph"], [387, 8, 1, "", "gaussian_random_partition_graph"], [388, 8, 1, "", "planted_partition_graph"], [389, 8, 1, "", "random_partition_graph"], [390, 8, 1, "", "relaxed_caveman_graph"], [391, 8, 1, "", "ring_of_cliques"], [392, 8, 1, "", "stochastic_block_model"], [393, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[394, 8, 1, "", "configuration_model"], [395, 8, 1, "", "degree_sequence_tree"], [396, 8, 1, "", "directed_configuration_model"], [397, 8, 1, "", "directed_havel_hakimi_graph"], [398, 8, 1, "", "expected_degree_graph"], [399, 8, 1, "", "havel_hakimi_graph"], [400, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[401, 8, 1, "", "gn_graph"], [402, 8, 1, "", "gnc_graph"], [403, 8, 1, "", "gnr_graph"], [404, 8, 1, "", "random_k_out_graph"], [405, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[406, 8, 1, "", "duplication_divergence_graph"], [407, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[408, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[409, 8, 1, "", "chordal_cycle_graph"], [410, 8, 1, "", "margulis_gabber_galil_graph"], [411, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[412, 8, 1, "", "geographical_threshold_graph"], [413, 8, 1, "", "random_geometric_graph"], [414, 8, 1, "", "soft_random_geometric_graph"], [415, 8, 1, "", "thresholded_random_geometric_graph"], [416, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[417, 8, 1, "", "hkn_harary_graph"], [418, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[419, 8, 1, "", "general_random_intersection_graph"], [420, 8, 1, "", "k_random_intersection_graph"], [421, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[422, 8, 1, "", "directed_joint_degree_graph"], [423, 8, 1, "", "is_valid_directed_joint_degree"], [424, 8, 1, "", "is_valid_joint_degree"], [425, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[426, 8, 1, "", "mycielski_graph"], [427, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[428, 8, 1, "", "nonisomorphic_trees"], [429, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[430, 8, 1, "", "LCF_graph"], [431, 8, 1, "", "bull_graph"], [432, 8, 1, "", "chvatal_graph"], [433, 8, 1, "", "cubical_graph"], [434, 8, 1, "", "desargues_graph"], [435, 8, 1, "", "diamond_graph"], [436, 8, 1, "", "dodecahedral_graph"], [437, 8, 1, "", "frucht_graph"], [438, 8, 1, "", "heawood_graph"], [439, 8, 1, "", "house_graph"], [440, 8, 1, "", "house_x_graph"], [441, 8, 1, "", "icosahedral_graph"], [442, 8, 1, "", "krackhardt_kite_graph"], [443, 8, 1, "", "make_small_graph"], [444, 8, 1, "", "moebius_kantor_graph"], [445, 8, 1, "", "octahedral_graph"], [446, 8, 1, "", "pappus_graph"], [447, 8, 1, "", "petersen_graph"], [448, 8, 1, "", "sedgewick_maze_graph"], [449, 8, 1, "", "tetrahedral_graph"], [450, 8, 1, "", "truncated_cube_graph"], [451, 8, 1, "", "truncated_tetrahedron_graph"], [452, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[453, 8, 1, "", "davis_southern_women_graph"], [454, 8, 1, "", "florentine_families_graph"], [455, 8, 1, "", "karate_club_graph"], [456, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[457, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[458, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[459, 8, 1, "", "prefix_tree"], [460, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[461, 8, 1, "", "triad_graph"]], "networkx.generators": [[464, 13, 0, "-", "internet_as_graphs"], [464, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[462, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[463, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 234, 244, 325, 478, 480], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 234, 313, 330, 480, 482], "all": [0, 31, 32, 36, 41], "pair": 0, "shortest": 0, "path": [0, 227, 229, 231], "length": 0, "attribut": [0, 20, 314, 331], "assort": 0, "averag": 0, "degre": [0, 338, 464], "connect": [0, 29, 30, 222, 230, 478, 485], "between": [0, 227, 474], "central": [0, 17], "breadth": 0, "first": [0, 218], "search": 0, "cdlp": 0, "close": [0, 485], "cluster": [0, 27, 30, 33, 41, 218, 240, 242], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": 0, "katz": 0, "k": 0, "core": 0, "shell": [0, 222], "label": [0, 229, 231, 244, 314, 477, 498], "propag": 0, "lcc": 0, "pagerank": 0, "sampl": [0, 44, 46, 229, 238, 250, 313, 317, 319, 322, 325], "singl": [0, 48, 215], "sourc": [0, 17, 31, 32, 46, 229, 260, 314, 320, 323, 324], "voterank": 0, "wcc": 0, "custom": [1, 23, 27, 44, 45, 48, 221, 478], "aggreg": [1, 227, 229, 231, 235], "local": [1, 7, 32, 36, 38, 41, 52, 220, 221, 229, 236, 237, 241, 243, 477, 478], "vertex": [1, 10, 24, 46, 231, 244, 262, 471, 477, 498], "map": [1, 46, 211, 474], "support": [1, 11, 23, 46, 224, 229, 234], "deploy": [2, 27, 38, 48, 217, 218], "gae": [2, 34, 247, 482, 486], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 204, 218, 478], "onli": [2, 37], "python": [2, 15, 18, 31, 35, 36, 200, 222, 230, 234, 254, 470, 478, 482, 490], "sdk": [2, 16, 34, 126, 200, 206, 230, 258], "helm": [2, 29, 48], "execut": [2, 34, 223, 245], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 45, 46, 47, 48, 205, 214, 215, 217, 223, 226, 227, 231, 234, 235, 238, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 252, 253, 313, 315, 316, 317, 318, 319, 321, 325, 327, 329, 331, 464, 465, 467, 468, 474, 476, 477, 478, 479, 480, 486], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 214, 217, 234, 245, 246, 248, 253, 255, 256, 486], "uninstal": [2, 29, 478], "design": [3, 9, 34, 219, 234, 235, 245, 323, 477], "engin": [3, 4, 7, 9, 10, 12, 24, 31, 36, 44, 52, 217, 221, 234, 236, 237, 241, 242, 243, 245, 253, 255, 477, 486], "dev": [4, 32, 36, 41, 52, 220, 236], "test": [4, 36, 37, 41, 52, 200, 220, 236, 242, 243, 320], "setup": [4, 32], "understand": [4, 52], "codebas": [4, 52], "make": [4, 20], "modif": 4, "build": [4, 17, 32, 36, 41, 52, 220, 236, 260, 313, 320, 478, 498], "faq": [5, 227], "program": [6, 12, 14, 34, 215, 323], "model": [6, 12, 14, 15, 16, 17, 24, 34, 47, 205, 235, 240, 241, 242, 243, 247, 250, 313, 321, 325, 477, 478], "flash": [6, 15, 247], "motiv": [6, 9, 219, 245, 477], "The": [6, 19, 30, 205, 209, 219, 476], "overview": [6, 9, 12, 201, 205, 209, 217, 321, 478], "api": [6, 9, 12, 19, 20, 43, 126, 200, 201, 223, 255, 258, 259, 314, 325, 466, 470, 494], "strong": 6, "express": [6, 229, 231], "implement": [6, 15, 17, 37, 323, 477], "architectur": [6, 12, 219, 474], "optim": [6, 13, 226, 227, 243], "get": [7, 17, 37, 126, 200, 202, 213, 221, 229, 237, 246, 320, 475], "start": [7, 45, 126, 200, 201, 202, 213, 220, 221, 231, 237, 246, 325, 475], "instal": [7, 27, 29, 30, 31, 32, 36, 37, 52, 126, 200, 204, 217, 221, 236, 237, 320, 478, 485], "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 41, 202, 215, 221, 229, 237, 242, 320], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 41, 50, 51, 206, 210, 215, 217, 221, 237, 245, 248, 250, 251, 252, 255, 258, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 474, 476, 486, 490, 494, 495], "what": [7, 14, 221, 227, 237, 248, 250, 251], "": [7, 221, 227, 237, 255], "next": [7, 221, 237, 251], "guid": [8, 35, 36, 49, 228, 239, 478, 482, 483], "exampl": [8, 17, 22, 23, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 228, 229, 239, 482, 483], "ingress": [9, 247], "increment": [9, 12], "messag": [9, 235], "driven": 9, "differenti": 9, "flexibl": [9, 34], "memoiz": 9, "distribut": [9, 215, 315, 323], "runtim": [9, 34, 323], "kei": [10, 205, 223, 227, 234, 304], "concept": [10, 477], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 46, 231, 244, 331, 342, 467, 477, 498], "cut": [10, 477], "vertic": [10, 231, 244, 498], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 20, 462, 463, 466], "compat": [11, 227], "convert": 11, "nx": [11, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461], "oper": [11, 20, 28, 224, 231, 300, 301, 302, 303, 304, 305, 323, 469], "storag": [12, 33, 34, 217, 245, 474, 477], "layer": [12, 245], "grape": [12, 17, 247, 260], "ffi": 12, "comput": [12, 215, 217, 245, 477], "applic": [12, 15, 22, 23, 231, 245, 480], "perform": [13, 19, 34, 227, 234, 253], "tune": 13, "memori": [13, 244, 479], "footprint": 13, "properti": [13, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 205, 224, 227, 229, 231, 244, 476, 477, 498], "data": [13, 45, 46, 47, 48, 126, 200, 215, 218, 224, 227, 244, 314, 321, 324, 325, 476, 478], "structur": [13, 126, 200, 224, 260, 331], "usag": [13, 200, 209, 227, 244], "estim": [13, 473], "pie": [14, 16, 17, 18, 247, 258, 488], "i": [14, 229, 248, 250, 251], "workflow": [14, 234, 474], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 231, 233, 240, 241, 242, 243, 254], "develop": [15, 16, 17, 18, 22, 23, 36, 49, 52, 201, 217, 313, 325, 478, 482], "your": [15, 16, 17, 18, 22, 37, 44, 218, 241, 243, 244, 313, 323, 482], "c": [15, 16, 35, 50, 482], "defin": [15, 16, 241, 242, 243, 323, 474], "A": [15, 205, 217, 226], "function": [15, 18, 242, 243, 256, 258, 313, 327, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 472], "integr": [15, 37, 215, 324], "client": [15, 27, 30, 36, 242, 315, 485], "step": [16, 45, 229, 231, 250], "1": [16, 45, 211, 223, 314, 315, 317, 325], "context": [16, 255, 257, 471], "class": [16, 323, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362], "2": [16, 45, 211, 223, 314, 315, 325, 478], "3": [16, 45, 211, 223, 314, 315, 325, 478], "packag": [16, 31, 32, 242, 320], "4": [16, 211, 223, 314, 325], "gar": 16, "file": [16, 27, 31, 46, 324, 476], "github": [16, 17, 25, 37], "templat": [16, 17], "java": [17, 35, 39, 126, 230, 233, 261, 478, 482], "jar": 17, "own": [17, 18, 22, 218, 244, 313, 323], "prepar": [17, 27, 30, 41, 202, 325], "jdk": [17, 260], "from": [17, 19, 20, 31, 32, 33, 46, 217, 223, 231, 244, 260, 320, 474, 478], "maven": [17, 126], "repositori": 17, "submit": [17, 22, 23, 37, 40], "javasdk": 17, "write": [18, 242, 478], "pregel": [18, 24, 258, 488], "us": [18, 20, 27, 32, 45, 218, 223, 227, 234, 251, 320, 323, 325, 471, 474, 478, 479], "math": [18, 488], "h": [18, 488], "how": [19, 37, 39, 40, 41, 216, 227, 236, 313, 323, 325, 486], "doe": 19, "analysi": [19, 245], "displai": 19, "speed": 19, "up": [19, 27, 30, 33], "over": 19, "creat": [20, 33, 37, 45, 50, 240, 243], "an": [20, 223, 323], "empti": 20, "ad": [20, 244], "node": [20, 48, 235, 240, 241, 242, 243, 331, 352, 478], "examin": 20, "element": 20, "remov": [20, 218], "constructor": 20, "access": 20, "neighbor": [20, 243, 351], "deepcopi": 20, "subgraph": [20, 227, 229, 235, 238, 250, 360], "edge_subgraph": [20, 341], "copi": [20, 31], "direct": [20, 401, 402, 403, 404, 405, 464], "analyz": 20, "object": [20, 256, 257, 315, 327, 469, 472], "transform": [20, 468], "builtin": [21, 256, 330, 469], "giraph": 22, "try": [22, 45, 325], "some": [22, 231], "app": [22, 23, 255, 256, 264], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 30, 48, 218, 478], "along": 23, "spark": 23, "includ": 23, "depend": [23, 31, 32, 320], "toward": 23, "centric": [24, 235], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 37], "discuss": [25, 37], "cloud": [26, 234, 314], "k8": [27, 240, 242, 486], "kubernet": [27, 30, 33, 38, 41, 240, 490, 495], "launch": [27, 241, 242, 243], "default": 27, "paramet": [27, 53, 54, 55, 56, 91, 92, 96, 101, 118, 127, 128, 129, 130, 165, 166, 171, 175, 192, 242, 244], "frequent": [27, 212], "imag": [27, 32, 41, 320, 478], "uri": 27, "specifi": [27, 244], "number": 27, "worker": [27, 255], "provid": 27, "kubeconfig": 27, "other": [27, 45, 126, 218, 244, 324, 478], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 30, 33], "coordin": [28, 36, 42, 43], "configur": [28, 29, 44, 46, 48, 218, 221, 242, 326, 478], "releas": [29, 37], "offlin": [29, 31, 478], "exist": 30, "vineyard": [30, 220, 247, 479], "lifecycl": 30, "load": [30, 46, 223, 231, 240, 241, 242, 243, 244, 474, 476, 478, 479], "dataset": [30, 223, 244, 478], "anoth": 30, "session": [30, 240, 311, 472], "environ": [31, 32, 36, 41, 52, 220, 223, 236], "wheel": [31, 320, 490], "download": [31, 223], "destin": 31, "extract": [31, 231], "them": [31, 244], "locat": 31, "basic": [31, 231, 314], "gcc": 31, "g": [31, 306], "third": 31, "parti": 31, "stabl": 32, "version": 32, "preview": 32, "linux": [32, 490], "maco": [32, 490], "persist": [33, 478], "pv": 33, "pvc": 33, "store": [33, 50, 51, 203, 207, 220, 478], "retor": 33, "framework": [34, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], "multi": [34, 471], "languag": [34, 205, 319], "high": [34, 234, 245, 478], "librari": [34, 234, 320], "code": [35, 37, 201, 323, 484], "style": [35, 37, 466, 477], "rust": 35, "script": [35, 242, 485], "linter": 35, "checker": 35, "contain": [36, 52, 236], "dep": [36, 52, 236], "target": [36, 41, 244], "compon": 36, "individu": 36, "contribut": 37, "conduct": 37, "commun": [37, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 464], "report": [37, 216], "bug": [37, 216], "request": [37, 40, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 201], "featur": [37, 205, 234, 476, 478], "improv": 37, "document": [37, 126, 200, 201], "chang": [37, 485], "pre": 37, "commit": [37, 478], "minor": 37, "fix": 37, "fork": 37, "branch": [37, 229], "suit": 37, "format": [37, 314, 476, 478], "right": 37, "keep": 37, "pull": [37, 40], "updat": [37, 485], "merg": 37, "pr": 37, "maintain": 37, "ship": 37, "review": 37, "continu": 37, "debug": 38, "find": [38, 486], "log": [38, 474, 478, 486], "command": [38, 201, 209, 485], "techniqu": [38, 244], "instrument": 39, "automat": 39, "rest": [43, 201], "servic": [44, 45, 126, 200, 201, 202, 209, 218, 220, 478], "avail": [44, 478], "new": [45, 323], "import": [45, 46, 242, 478], "column": 46, "csv": 46, "odp": 46, "tabl": [46, 211, 217, 314], "modern": 46, "breakdown": 46, "entiti": 47, "primit": 47, "type": [47, 53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 224, 226, 244, 252, 258, 314, 465, 476], "string": 47, "tempor": 47, "arrai": [47, 477], "docker": [48, 52, 236, 320, 490], "quickstart": 48, "multipl": [48, 227, 231, 244], "valu": [48, 227, 229, 231], "yaml": 48, "procedur": [50, 51, 203, 207, 209], "interact": [50, 51, 52, 202, 204, 206, 210, 214, 217, 221, 246, 249, 253, 328, 486], "turn": 51, "cypher": [51, 202, 203, 205, 222, 224, 234, 249], "queri": [51, 52, 202, 205, 207, 214, 219, 223, 227, 231, 245, 246, 316, 328, 478], "craft": 51, "compil": [51, 52, 201, 203, 207, 320, 323], "enabl": [51, 201, 207], "invok": 51, "adminservicegraphmanagementapi": [53, 127], "createdataloadingjob": 53, "return": [53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192], "author": [53, 54, 55, 56, 91, 92, 101, 118, 126, 127, 128, 129, 130, 165, 166, 175, 192, 200], "http": [53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 201], "header": [53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192], "respons": [53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 201], "detail": [53, 54, 55, 56, 91, 92, 101, 118, 127, 128, 129, 130, 165, 166, 175, 192, 201, 209, 477], "creategraph": [53, 201], "deletegraph": [53, 201], "getgraph": 53, "getgraphstatist": [53, 201], "getschema": 53, "listgraph": [53, 201], "adminservicejobmanagementapi": [54, 128], "deletejobbyid": 54, "getjobbyid": [54, 201], "listjob": 54, "adminserviceproceduremanagementapi": [55, 129], "createprocedur": [55, 201], "deleteprocedur": [55, 201], "getprocedur": [55, 201], "listprocedur": 55, "updateprocedur": [55, 201], "adminserviceservicemanagementapi": [56, 130], "getservicestatu": 56, "restartservic": [56, 201], "startservic": [56, 201], "stopservic": [56, 201], "baseedgetyp": [57, 131], "baseedgetypevertextypepairrelationsinn": [58, 132], "enum": [58, 59, 68, 83, 85, 88, 94, 97, 103, 104, 109], "relationenum": 58, "baseedgetypevertextypepairrelationsinnerxcsrparam": [59, 133], "edgestoragestrategyenum": 59, "basepropertymeta": [60, 134], "basevertextyp": [61, 135], "basevertextypexcsrparam": [62, 136], "columnmap": [63, 137], "createedgetyp": [64, 138], "creategraphrequest": [65, 139], "creategraphrespons": [66, 140], "creategraphschemarequest": [67, 141], "createprocedurerequest": [68, 142], "typeenum": [68, 88, 109], "createprocedurerespons": [69, 143], "createpropertymeta": [70, 144], "createvertextyp": [71, 145], "datetyp": [72, 146], "edgedata": [73, 147], "edgemap": [74, 148], "edgemappingdestinationvertexmappingsinn": [75, 149], "edgemappingsourcevertexmappingsinn": [76, 150], "edgemappingsourcevertexmappingsinnercolumn": [77, 151], "edgemappingtypetriplet": [78, 152], "edgerequest": [79, 153], "edgestatist": [80, 154], "fixedchar": [81, 155], "fixedcharchar": [82, 156], "gsdatatyp": [83, 157], "primitivetypeenum": [83, 97], "getedgetyp": [84, 158], "getgraphrespons": [85, 159], "storetypeenum": 85, "getgraphschemarespons": [86, 160], "getgraphstatisticsrespons": [87, 161], "getprocedurerespons": [88, 162], "getpropertymeta": [89, 163], "getvertextyp": [90, 164], "graphserviceedgemanagementapi": [91, 165], "addedg": 91, "deleteedg": 91, "getedg": 91, "updateedg": 91, "graphservicevertexmanagementapi": [92, 166], "addvertex": 92, "deletevertex": 92, "getvertex": 92, "updatevertex": 92, "jobrespons": [93, 167], "jobstatu": [94, 168], "statusenum": 94, "longtext": [95, 169], "primitivetyp": [97, 172], "propertyarrai": [99, 173], "queryrequest": [100, 174], "queryserviceapi": [101, 175], "proccal": 101, "proccallcurr": 101, "schemamap": [102, 176], "schemamappingloadingconfig": [103, 177], "importoptionenum": 103, "schemamappingloadingconfigdatasourc": [104, 178], "schemeenum": 104, "schemamappingloadingconfigformat": [105, 179], "schemamappingloadingconfigxcsrparam": [106, 180], "servicestatu": [107, 181, 201], "startservicerequest": [108, 182], "storedproceduremeta": [109, 183], "stringtyp": [110, 184], "stringtypestr": [111, 185], "temporaltyp": [112, 186], "temporaltypetempor": [113, 187], "timestamptyp": [114, 188], "typedvalu": [115, 189], "updateprocedurerequest": [116, 190], "uploadfilerespons": [117, 191], "utilsapi": [118, 192], "uploadfil": 118, "varchar": [119, 193], "varcharvarchar": [120, 194], "vertexdata": [121, 195], "vertexmap": [122, 196], "vertexrequest": [123, 197], "vertexstatist": [124, 198], "vertextypepairstatist": [125, 199], "refer": [126, 200, 217, 255, 259, 261, 470, 477], "requir": [126, 200], "user": [126, 233, 254, 314, 482, 483], "gs_interact": [127, 128, 129, 130, 165, 166, 175, 192], "create_dataloading_job": 127, "create_graph": [127, 275], "delete_graph": 127, "get_graph": 127, "get_graph_statist": 127, "get_schema": 127, "list_graph": 127, "delete_job_by_id": 128, "get_job_by_id": 128, "list_job": 128, "create_procedur": 129, "delete_procedur": 129, "get_procedur": 129, "list_procedur": 129, "update_procedur": 129, "get_service_statu": 130, "restart_servic": 130, "start_servic": 130, "stop_servic": 130, "add_edg": 165, "delete_edg": 165, "get_edg": 165, "update_edg": 165, "add_vertex": 166, "delete_vertex": 166, "get_vertex": 166, "update_vertex": 166, "modelproperti": 170, "proc_cal": 175, "proc_call_curr": 175, "upload_fil": 192, "pip": [200, 320], "setuptool": 200, "For": [200, 225, 232, 477], "introduct": [201, 211, 229, 317], "graphmanag": 201, "categori": 201, "descript": 201, "curl": 201, "expect": 201, "statu": [201, 202], "getgraphschema": 201, "getgraphmeta": 201, "importgraph": 201, "proceduremanag": 201, "listallprocedur": 201, "servicemanag": 201, "systemmetr": 201, "nodemetr": 201, "jobmanag": 201, "getalljob": 201, "canceljobbyid": 201, "adminservic": 201, "error": [201, 484], "manag": 202, "initi": 202, "stop": [202, 217, 246], "restart": [202, 478], "check": 202, "destroi": [202, 478], "gremlin": [202, 203, 205, 227, 229, 230, 231, 234, 249, 309, 496], "glossari": [203, 247], "solid": 205, "foundat": 205, "limit": [205, 229, 231, 251, 478], "disabl": 207, "view": [207, 478], "tool": [208, 209], "administr": 209, "root": 209, "databas": [209, 252], "arrowfrag": 211, "0": [211, 223], "\u672f\u8bed": 211, "\u8f7d\u56fe": [211, 498], "\u521d\u59cb\u5316partition": 211, "\u6784\u5efa\u539f\u59cbarrow": 211, "shuffl": 211, "vtabl": 211, "\u6784\u5efavertex": 211, "basicarrowvertexmapbuild": 211, "5": [211, 223, 314], "\u6784\u5efafragment\u51c6\u5907": 211, "\u5904\u7406edg": 211, "basicevfragmentload": 211, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 211, "basicarrowfragmentbuild": 211, "6": 211, "fragment\u6784\u5efa": 211, "\u8bbf\u95eefragment": 211, "\u8bbf\u95ee\u9876\u70b9": 211, "\u8bbf\u95ee\u5185\u90e8\u70b9": 211, "\u8303\u56f4\u5916\u90e8\u70b9": 211, "\u8bbf\u95ee\u5168\u90e8\u70b9": 211, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 211, "\u8bbf\u95ee\u8fb9": 211, "\u8bbf\u95ee\u51fa\u8fb9": 211, "\u8bbf\u95ee\u5165\u8fb9": 211, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 211, "ask": 212, "question": [212, 223], "gle": [213, 235, 483, 486], "workload": [214, 248, 249, 250, 252, 474], "learn": [214, 217, 235, 236, 237, 241, 243, 245, 246, 250, 252, 313, 321, 329, 486], "scientist": 215, "challeng": [215, 248, 250], "handl": [215, 252], "solut": 215, "machin": [215, 241, 243], "pydata": 215, "ecosystem": [215, 225, 232], "One": [217, 246, 471], "larg": [217, 244, 248, 250], "scale": [217, 481], "system": [217, 252, 324, 326], "alibaba": [217, 314], "flex": [217, 259], "troubleshoot": [217, 478], "util": [217, 485], "indic": 217, "standalon": 218, "gie": [218, 219, 220, 221, 222, 223, 225, 226, 227, 230, 232, 247, 486], "process": [219, 241, 242, 246, 252, 313, 478], "manual": [220, 244], "instanc": [221, 478], "via": [222, 230], "driver": 222, "llm": 223, "assist": 223, "set": [223, 242], "endpoint": 223, "gener": [223, 226, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "sentenc": 223, "construct": [224, 325], "claus": 224, "neo4j": [225, 249], "tinkerpop": [225, 227, 232, 249, 496], "rule": 226, "base": [226, 235], "rbo": 226, "filtermatchrul": 226, "degreefusionrul": 226, "notmatchtoantijoinrul": 226, "fieldtrimrul": 226, "cost": 226, "cbo": 226, "infer": [226, 234], "constraint": 227, "differ": [227, 471], "inner": 227, "id": [227, 229, 231, 477], "expand": [227, 229, 409, 410, 411, 464], "filter": [227, 229, 231], "like": 227, "sql": 227, "group": [227, 229, 231], "appropri": 227, "index": 227, "standard": [229, 476], "v": 229, "e": 229, "out": [229, 231, 325], "inE": [229, 231], "both": [229, 231], "outv": [229, 231], "inv": [229, 231], "otherv": [229, 231], "bothv": [229, 231], "hasid": [229, 231], "haslabel": 229, "ha": 229, "hasnot": 229, "where": [229, 231], "travers": [229, 231, 234, 238, 249, 318], "predic": 229, "dedup": [229, 231], "project": [229, 231, 260], "constant": [229, 231], "valuemap": [229, 231], "elementmap": 229, "select": [229, 231], "count": 229, "fold": [229, 231], "sum": [229, 231], "min": [229, 231], "max": [229, 231], "mean": [229, 231], "groupcount": [229, 231], "h3": 229, "order": [229, 231, 477], "statist": 229, "coin": 229, "union": 229, "match": [229, 231, 249], "ident": 229, "unfold": 229, "syntact": [229, 231], "sugar": [229, 231], "pathexpand": 229, "endv": 229, "properit": 229, "To": 229, "Will": 229, "Not": 229, "repeat": 229, "sideeffect": 229, "consol": [230, 496], "ldbc": 231, "retriev": [231, 477], "appli": [231, 250], "real": 231, "expans": 231, "mani": 231, "point": 231, "after": 231, "pattern": [231, 249], "relat": [231, 244, 474], "syntax": 231, "complex": 231, "bi2": 231, "bi3": 231, "bi4": 231, "left": 231, "part": 231, "bi11": 231, "bi14": 231, "apach": [232, 496], "eas": 234, "interfac": [234, 323, 324, 477], "extens": 234, "gnn": [234, 240, 250, 325, 492], "train": [234, 240, 241, 242, 243, 250, 313], "nativ": 234, "across": 234, "orchestr": 234, "paradigm": [235, 250], "egograph": 235, "pass": 235, "pipelin": 235, "neighborhood": 238, "neg": [238, 322], "gsl": [238, 319], "classif": [240, 241, 242, 243], "neural": [240, 250], "network": [240, 250, 464], "egographsag": 241, "pyg": [242, 243], "server": [242, 315, 485], "pod": 242, "loader": [242, 244, 327, 498], "main": 242, "evalu": [243, 303], "loaderfor": 243, "valid": 243, "graphsag": 243, "advanc": 244, "deduc": 244, "when": 244, "ambigu": 244, "put": [244, 314], "togeth": [244, 314], "panda": [244, 498], "numpi": [244, 498], "variant": 244, "tip": 244, "reduc": 244, "consumpt": 244, "unifi": [245, 477], "platform": 245, "disaggreg": 245, "divers": 245, "bi": 245, "qp": 245, "task": 246, "quick": [246, 325], "gart": [247, 474], "grin": [247, 477], "graphar": [247, 476], "groot": [247, 478, 486], "gum": 247, "maxgraph": 247, "deprec": 247, "v6d": 247, "gaia": 247, "pegasu": 247, "can": [248, 250], "do": [248, 250], "typic": 250, "introduc": 251, "why": 251, "ar": 251, "case": 251, "posit": 252, "compar": 252, "variou": 252, "benchmark": 253, "result": [253, 471], "gpu": 253, "reproduc": 253, "fragment": 255, "appasset": 256, "javaapp": 256, "cython": 258, "about": 260, "javadoc": 261, "declar": 263, "load_app": 264, "dag_util": [265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "add_column": 265, "add_labels_to_graph": 266, "arrow_to_dynam": 267, "bind_app": 268, "clear_edg": 269, "clear_graph": 270, "context_to_datafram": 271, "context_to_numpi": 272, "copy_graph": 273, "create_app": 274, "create_graph_view": 276, "create_load": 277, "create_subgraph": 278, "create_unload_op": 279, "dynamic_to_arrow": 280, "get_context_data": 281, "graph_to_datafram": 282, "graph_to_numpi": 283, "gremlin_to_subgraph": 284, "modify_edg": 285, "modify_vertic": 286, "output": 287, "project_arrow_property_graph": 288, "project_to_simpl": 289, "report_graph": 290, "run_app": 291, "to_data_sink": 292, "to_direct": [293, 361], "to_undirect": [294, 362], "to_vineyard_datafram": 295, "to_vineyard_tensor": 296, "unload_app": 297, "unload_context": 298, "unload_graph": 299, "__init__": 300, "as_op_def": 301, "eval": 302, "signatur": 305, "get_default_sess": 307, "graphlearn": 308, "has_default_sess": 310, "set_opt": 312, "encod": [313, 321], "loss": 313, "weight": 314, "maxcomput": 314, "describ": 315, "topologi": 315, "stand": 315, "alon": 315, "mode": [315, 485], "tensorflow": 320, "git": 320, "clone": 323, "regist": [323, 324], "bytestreamaccessfil": 324, "structuredaccessfil": 324, "writablefil": 324, "scheme": 324, "gl": 325, "self": 331, "loop": 331, "freez": [331, 343], "add_cycl": 332, "add_path": 333, "add_star": 334, "all_neighbor": 335, "common_neighbor": 336, "create_empty_copi": 337, "degree_histogram": 339, "densiti": 340, "induced_subgraph": 344, "info": 345, "is_direct": 346, "is_empti": 347, "is_frozen": 348, "is_negatively_weight": 349, "is_weight": 350, "nodes_with_selfloop": 353, "non_edg": 354, "non_neighbor": 355, "number_of_edg": 356, "number_of_nod": 357, "number_of_selfloop": 358, "selfloop_edg": 359, "atla": [363, 364, 464], "graph_atla": 363, "graph_atlas_g": 364, "classic": [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 464], "balanced_tre": 365, "barbell_graph": 366, "binomial_tre": 367, "circulant_graph": 368, "circular_ladder_graph": 369, "complete_graph": 370, "complete_multipartite_graph": 371, "cycle_graph": 372, "dorogovtsev_goltsev_mendes_graph": 373, "empty_graph": 374, "full_rary_tre": 375, "ladder_graph": 376, "lollipop_graph": 377, "null_graph": 378, "path_graph": 379, "star_graph": 380, "trivial_graph": 381, "turan_graph": 382, "wheel_graph": 383, "lfr_benchmark_graph": 384, "caveman_graph": 385, "connected_caveman_graph": 386, "gaussian_random_partition_graph": 387, "planted_partition_graph": 388, "random_partition_graph": 389, "relaxed_caveman_graph": 390, "ring_of_cliqu": 391, "stochastic_block_model": 392, "windmill_graph": 393, "degree_seq": [394, 395, 396, 397, 398, 399, 400], "configuration_model": 394, "degree_sequence_tre": 395, "directed_configuration_model": 396, "directed_havel_hakimi_graph": 397, "expected_degree_graph": 398, "havel_hakimi_graph": 399, "random_degree_sequence_graph": 400, "gn_graph": 401, "gnc_graph": 402, "gnr_graph": 403, "random_k_out_graph": 404, "scale_free_graph": 405, "duplic": [406, 407, 464], "duplication_divergence_graph": 406, "partial_duplication_graph": 407, "ego": [408, 464], "ego_graph": 408, "chordal_cycle_graph": 409, "margulis_gabber_galil_graph": 410, "paley_graph": 411, "geometr": [412, 413, 414, 415, 416, 464], "geographical_threshold_graph": 412, "random_geometric_graph": 413, "soft_random_geometric_graph": 414, "thresholded_random_geometric_graph": 415, "waxman_graph": 416, "harary_graph": [417, 418], "hkn_harary_graph": 417, "hnm_harary_graph": 418, "intersect": [419, 420, 421, 464], "general_random_intersection_graph": 419, "k_random_intersection_graph": 420, "uniform_random_intersection_graph": 421, "joint_degree_seq": [422, 423, 424, 425], "directed_joint_degree_graph": 422, "is_valid_directed_joint_degre": 423, "is_valid_joint_degre": 424, "joint_degree_graph": 425, "mycielski": [426, 427, 464], "mycielski_graph": 426, "mycielskian": 427, "nonisomorphic_tre": [428, 429], "number_of_nonisomorphic_tre": 429, "small": [430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464], "lcf_graph": 430, "bull_graph": 431, "chvatal_graph": 432, "cubical_graph": 433, "desargues_graph": 434, "diamond_graph": 435, "dodecahedral_graph": 436, "frucht_graph": 437, "heawood_graph": 438, "house_graph": 439, "house_x_graph": 440, "icosahedral_graph": 441, "krackhardt_kite_graph": 442, "make_small_graph": 443, "moebius_kantor_graph": 444, "octahedral_graph": 445, "pappus_graph": 446, "petersen_graph": 447, "sedgewick_maze_graph": 448, "tetrahedral_graph": 449, "truncated_cube_graph": 450, "truncated_tetrahedron_graph": 451, "tutte_graph": 452, "social": [453, 454, 455, 456, 464], "davis_southern_women_graph": 453, "florentine_families_graph": 454, "karate_club_graph": 455, "les_miserables_graph": 456, "spectral_graph_forg": 457, "sudoku": [458, 464], "sudoku_graph": 458, "tree": [459, 460, 464], "prefix_tre": 459, "random_tre": 460, "triad": [461, 464], "triad_graph": 461, "internet_as_graph": 462, "random_internet_as_graph": 462, "stochast": [463, 464], "stochastic_graph": 463, "diverg": 464, "sequenc": 464, "AS": 464, "spectral": 464, "non": 464, "isomorph": 464, "joint": 464, "harari": 464, "digraph": 465, "read": 467, "list": [467, 477], "adjac": 467, "selector": 471, "tensorcontext": 471, "vertexdatacontext": 471, "labeledvertexdatacontext": 471, "vertexpropertycontext": 471, "labeledvertexpropertycontext": 471, "method": 471, "dimension": 471, "rang": 471, "resourc": 473, "bridg": 474, "gap": 474, "oltp": 474, "inform": 476, "save": 476, "predefin": 477, "macro": 477, "partit": [477, 478, 481], "strategi": 477, "guidelin": 477, "handler": 477, "iter": 477, "master": 477, "mirror": 477, "complet": 477, "natur": 477, "trait": 477, "known": 478, "artifacthub": 478, "directori": 478, "common": 478, "modifi": 478, "j": 478, "realtim": 478, "secondari": 478, "trace": 478, "In": 479, "immut": 479, "bind": 480, "repartit": 481, "fennel": 481, "xtrapulp": 481, "hybrid": 481, "line": 485, "gsctl": 485, "scope": 485, "monitor": 487, "\u56fe\u5206\u6790\u5f15\u64ce": 488, "\u5185\u7f6e\u7b97\u6cd5": 488, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 488, "\u4f7f\u7528": 488, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 488, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 488, "\u4e2d\u7684\u51fd\u6570": 488, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 488, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 488, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 488, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 488, "\u90e8\u7f72": 489, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 489, "\u5728aw": 489, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 489, "\u672c\u5730\u90e8\u7f72graphscop": 489, "\u5f00\u53d1\u8005\u6307\u5357": 490, "\u57fa\u4e8e": [490, 495], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 490, "\u6784\u5efa": 490, "\u4ee3\u7801\u98ce\u683c": 490, "\u5e38\u89c1\u95ee\u9898": 491, "\u5feb\u901f\u4e0a\u624b": 492, "\u793a\u4f8b": 492, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 492, "\u521b\u5efa\u4f1a\u8bdd": 492, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 492, "\u56fe\u5206\u6790": 492, "\u56fe\u795e\u7ecf\u7f51\u7edc": 492, "\u5173\u95ed\u4f1a\u8bdd": 492, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 493, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 493, "\u6295\u5f71": 493, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 493, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 493, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 494, "\u76ee\u5f55": [494, 499], "\u53c2\u8003": 494, "\u7d22\u5f15": 494, "\u5b89\u88c5": 495, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 495, "\u5ba2\u6237\u7aef": 495, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 496, "\u5229\u7528python": 496, "\u8fde\u63a5graphscop": 496, "\u5229\u7528java": 496, "\u5f00\u53d1\u63a7\u5236\u53f0": 496, "gremlin\u7f16\u7a0b\u5165\u95e8": 496, "101": 496, "\u56fe\u6570\u636e\u6a21\u578b": 496, "\u67e5\u8be2\u8bed\u8a00": 496, "\u4e00\u4e2a\u4f8b\u5b50": 496, "gremlin\u517c\u5bb9\u6027": 496, "\u5bf9\u6bd4tinkerpop": 496, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 496, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 496, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 496, "\u5df2\u77e5\u9650\u5236": 496, "\u56fe\u5b66\u4e60\u5f15\u64ce": 497, "\u56fe\u5b66\u4e60\u6a21\u578b": 497, "\u6570\u636e\u6a21\u578b": 497, "\u7f16\u7801\u5668": 497, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 497, "\u91c7\u6837": 497, "\u56fe\u6570\u636e\u6d41": 497, "\u6a21\u578b": 497, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 497, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 498, "\u624b\u52a8\u914d\u7f6e\u56fe": 498, "vid_field": 498, "src_label": 498, "dst_label": 498, "src_field": 498, "dst_field": 498, "\u9ad8\u7ea7\u7528\u6cd5": 498, "\u6ca1\u6709\u6b67\u4e49\u65f6": 498, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 498, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 498, "\u591a\u79cd\u8fb9\u5173\u7cfb": 498, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 498, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 498, "\u5b8c\u6574\u7684\u793a\u4f8b": 498, "\u4ece": 498, "\u6216": 498, "\u4e2d\u8f7d\u56fe": 498, "\u7684\u53d8\u79cd": 498, "\u5165\u95e8\u6559\u7a0b": 499}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "CDLP": [[0, "cdlp"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LCC": [[0, "lcc"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [204, "prerequisites"], [218, "prerequisites"], [478, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null]], "Dev and Test": [[4, "dev-and-test"], [52, "dev-and-test"], [220, "dev-and-test"], [236, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"], [52, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"], [52, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [245, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [205, "overview"], [209, "overview"], [217, null], [321, "overview"], [478, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [126, "getting-started"], [200, "getting-started"], [202, "getting-started"], [221, "getting-started"], [237, "getting-started"], [246, "getting-started"], [475, "getting-started"]], "Installation": [[7, "installation"], [29, "installation"], [126, "installation"], [204, "installation"], [221, "installation"], [237, "installation"], [478, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [221, "whats-the-next"], [237, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [228, "guide-and-examples"], [239, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with GitHub Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Get from Maven Central Repository": [[17, "get-from-maven-central-repository"]], "Build from source": [[17, "build-from-source"], [320, "build-from-source"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with GitHub Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetworkX APIs": [[19, "tutorial-graph-algorithms-with-networkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetworkX APIs": [[20, "tutorial-graph-operations-with-networkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"], [244, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [37, "slack"]], "Discussion on GitHub": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [41, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope Operator": [[28, "deploy-graphscope-operator"]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Deploy GraphScope with helm": [[29, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Configuration": [[29, "configuration"]], "Offline Installation": [[29, "offline-installation"]], "Deploy with Existing Vineyard Cluster": [[30, "deploy-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[30, "cleaning-up"]], "Install GraphScope in offline environment": [[31, "install-graphscope-in-offline-environment"]], "Install from wheels": [[31, "install-from-wheels"]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[32, "install-graphscope-on-local"]], "Install from packages": [[32, "install-from-packages"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[32, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[33, "retore-graphs-from-the-pvc"]], "Clean up": [[33, "clean-up"]], "Design of GAE": [[34, "design-of-gae"]], "Graph Storage": [[34, "graph-storage"]], "Execution Framework": [[34, "execution-framework"]], "Flexible programming models": [[34, "flexible-programming-models"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "High-performance runtime": [[34, "high-performance-runtime"]], "Algorithm Library": [[34, "algorithm-library"]], "Code Style Guide": [[35, "code-style-guide"]], "C++ Style": [[35, "c-style"]], "Python Style": [[35, "python-style"]], "Rust Style": [[35, "rust-style"]], "Java Style": [[35, "java-style"]], "Script Style": [[35, "script-style"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "Development Guide": [[36, "development-guide"]], "Dev Environment": [[36, "dev-environment"], [41, "dev-environment"], [52, "dev-environment"], [220, "dev-environment"], [236, "dev-environment"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Install deps on local": [[36, "install-deps-on-local"], [236, "install-deps-on-local"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [41, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Python Client": [[36, "build-python-client"]], "How to Contribute": [[37, "how-to-contribute"]], "Code of Conduct": [[37, "code-of-conduct"]], "Community": [[37, "community"], [464, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[37, "github-discussion"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Requesting Features": [[37, "requesting-features"]], "Improving Documentation": [[37, "improving-documentation"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[37, "install-pre-commit"]], "Minor Fixes": [[37, "minor-fixes"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Debugging on local deployment": [[38, "debugging-on-local-deployment"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Debugging Techniques": [[38, "debugging-techniques"]], "How to instrument": [[39, "how-to-instrument"]], "Java": [[39, "java"], [478, "java"], [478, "id2"]], "Automatic instrument": [[39, "automatic-instrument"]], "How to Submit Pull-requests": [[40, "how-to-submit-pull-requests"]], "How to Test": [[41, "how-to-test"], [236, "how-to-test"]], "Test GraphScope on local": [[41, "test-graphscope-on-local"]], "Run tests": [[41, "run-tests"], [41, "id1"]], "Test GraphScope on Kubernetes cluster": [[41, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[41, "build-images"]], "Coordinator": [[42, "coordinator"]], "Coordinator RESTFul API": [[43, "coordinator-restful-api"]], "Engine Configuration": [[44, "engine-configuration"]], "Customizing Your Service Configuration": [[44, "customizing-your-service-configuration"]], "Sample Configuration": [[44, "sample-configuration"]], "Available Configurations": [[44, "available-configurations"]], "Service configurations": [[44, "service-configurations"]], "Using Custom Graph": [[45, "using-custom-graph"]], "Step 1: Create a New Graph": [[45, "step-1-create-a-new-graph"]], "Step 2: Import Graph Data": [[45, "step-2-import-graph-data"]], "Step 3: Start the Service with the New Graph": [[45, "step-3-start-the-service-with-the-new-graph"]], "Try other graphs": [[45, "try-other-graphs"]], "Data Import Configuration": [[46, "data-import-configuration"]], "Supported data source": [[46, "supported-data-source"]], "Column mapping": [[46, "column-mapping"]], "Import from CSV": [[46, "import-from-csv"]], "Import from ODPS Table": [[46, "import-from-odps-table"]], "Sample Configuration for loading \u201cModern\u201d Graph from csv files": [[46, "sample-configuration-for-loading-modern-graph-from-csv-files"]], "Sample configuration for loading \u201cModern Graph\u201d from odps tables": [[46, "sample-configuration-for-loading-modern-graph-from-odps-tables"]], "Configuration Breakdown": [[46, "configuration-breakdown"]], "Loading Configurations": [[46, "loading-configurations"]], "Vertex Mappings": [[46, "vertex-mappings"]], "Edge Mappings": [[46, "edge-mappings"]], "Data Model": [[47, "data-model"]], "Graph Data": [[47, "graph-data"]], "Entity Data": [[47, "entity-data"]], "Primitive Types": [[47, "primitive-types"]], "String Types": [[47, "string-types"]], "Temporal types": [[47, "temporal-types"]], "Array Types": [[47, "array-types"]], "Deployment": [[48, "deployment"]], "Deploy with docker": [[48, "deploy-with-docker"]], "Deploy with helm": [[48, "deploy-with-helm"]], "QuickStart": [[48, "quickstart"]], "Customizing Configuration": [[48, "customizing-configuration"]], "Customize Graph Data.": [[48, "customize-graph-data"]], "Single Node": [[48, "single-node"]], "Multiple nodes": [[48, "multiple-nodes"]], "Customize Values.yaml": [[48, "customize-values-yaml"]], "Development guide": [[49, "development-guide"]], "Create c++ Stored Procedures on GraphScope Interactive": [[50, "create-c-stored-procedures-on-graphscope-interactive"]], "Turning Cypher Queries into Stored Procedures with GraphScope Interactive": [[51, "turning-cypher-queries-into-stored-procedures-with-graphscope-interactive"]], "Crafting a Cypher Stored Procedure": [[51, "crafting-a-cypher-stored-procedure"]], "Compiling and Enabling the Stored Procedure": [[51, "compiling-and-enabling-the-stored-procedure"]], "Invoking the Cypher Stored Procedure": [[51, "invoking-the-cypher-stored-procedure"]], "Install Deps on Local": [[52, "install-deps-on-local"]], "Develop on Docker Container": [[52, "develop-on-docker-container"]], "Interactive Query Engine": [[52, "interactive-query-engine"]], "Compiler": [[52, "compiler"]], "Build Interactive": [[52, "build-interactive"]], "AdminServiceGraphManagementApi": [[53, "adminservicegraphmanagementapi"]], "createDataloadingJob": [[53, "createdataloadingjob"]], "Example": [[53, "example"], [53, "id1"], [53, "id7"], [53, "id13"], [53, "id19"], [53, "id25"], [53, "id31"], [54, "example"], [54, "id1"], [54, "id7"], [55, "example"], [55, "id1"], [55, "id7"], [55, "id13"], [55, "id19"], [56, "example"], [56, "id1"], [56, "id7"], [56, "id13"], [91, "example"], [91, "id1"], [91, "id7"], [91, "id13"], [92, "example"], [92, "id1"], [92, "id7"], [92, "id13"], [101, "example"], [101, "id1"], [118, "example"], [127, "example"], [127, "id1"], [127, "id7"], [127, "id13"], [127, "id19"], [127, "id25"], [127, "id31"], [128, "example"], [128, "id1"], [128, "id7"], [129, "example"], [129, "id1"], [129, "id7"], [129, "id13"], [129, "id19"], [130, "example"], [130, "id1"], [130, "id7"], [130, "id13"], [131, "example"], [132, "example"], [133, "example"], [134, "example"], [135, "example"], [136, "example"], [137, "example"], [138, "example"], [139, "example"], [140, "example"], [141, "example"], [142, "example"], [143, "example"], [144, "example"], [145, "example"], [146, "example"], [147, "example"], [148, "example"], [149, "example"], [150, "example"], [151, "example"], [152, "example"], [153, "example"], [154, "example"], [155, "example"], [156, "example"], [157, "example"], [158, "example"], [159, "example"], [160, "example"], [161, "example"], [162, "example"], [163, "example"], [164, "example"], [165, "example"], [165, "id1"], [165, "id7"], [165, "id13"], [166, "example"], [166, "id1"], [166, "id7"], [166, "id13"], [167, "example"], [168, "example"], [169, "example"], [170, "example"], [171, "example"], [172, "example"], [173, "example"], [174, "example"], [175, "example"], [175, "id1"], [176, "example"], [177, "example"], [178, "example"], [179, "example"], [180, "example"], [181, "example"], [182, "example"], [183, "example"], [184, "example"], [185, "example"], [186, "example"], [187, "example"], [188, "example"], [189, "example"], [190, "example"], [191, "example"], [192, "example"], [193, "example"], [194, "example"], [195, "example"], [196, "example"], [197, "example"], [198, "example"], [199, "example"]], "Parameters": [[53, "parameters"], [53, "id2"], [53, "id8"], [53, "id14"], [53, "id20"], [53, "id26"], [53, "id32"], [54, "parameters"], [54, "id2"], [54, "id8"], [55, "parameters"], [55, "id2"], [55, "id8"], [55, "id14"], [55, "id20"], [56, "parameters"], [56, "id2"], [56, "id8"], [56, "id14"], [91, "parameters"], [91, "id2"], [91, "id8"], [91, "id14"], [92, "parameters"], [92, "id2"], [92, "id8"], [92, "id14"], [101, "parameters"], [101, "id2"], [118, "parameters"], [127, "parameters"], [127, "id2"], [127, "id8"], [127, "id14"], [127, "id20"], [127, "id26"], [127, "id32"], [128, "parameters"], [128, "id2"], [128, "id8"], [129, "parameters"], [129, "id2"], [129, "id8"], [129, "id14"], [129, "id20"], [130, "parameters"], [130, "id2"], [130, "id8"], [130, "id14"], [165, "parameters"], [165, "id2"], [165, "id8"], [165, "id14"], [166, "parameters"], [166, "id2"], [166, "id8"], [166, "id14"], [175, "parameters"], [175, "id2"], [192, "parameters"]], "Return type": [[53, "return-type"], [53, "id3"], [53, "id9"], [53, "id15"], [53, "id21"], [53, "id27"], [53, "id33"], [54, "return-type"], [54, "id3"], [54, "id9"], [55, "return-type"], [55, "id3"], [55, "id9"], [55, "id15"], [55, "id21"], [56, "return-type"], [56, "id3"], [56, "id9"], [56, "id15"], [91, "return-type"], [91, "id3"], [91, "id9"], [91, "id15"], [92, "return-type"], [92, "id3"], [92, "id9"], [92, "id15"], [101, "return-type"], [101, "id3"], [118, "return-type"], [127, "return-type"], [127, "id3"], [127, "id9"], [127, "id15"], [127, "id21"], [127, "id27"], [127, "id33"], [128, "return-type"], [128, "id3"], [128, "id9"], [129, "return-type"], [129, "id3"], [129, "id9"], [129, "id15"], [129, "id21"], [130, "return-type"], [130, "id3"], [130, "id9"], [130, "id15"], [165, "return-type"], [165, "id3"], [165, "id9"], [165, "id15"], [166, "return-type"], [166, "id3"], [166, "id9"], [166, "id15"], [175, "return-type"], [175, "id3"], [192, "return-type"]], "Authorization": [[53, "authorization"], [53, "id4"], [53, "id10"], [53, "id16"], [53, "id22"], [53, "id28"], [53, "id34"], [54, "authorization"], [54, "id4"], [54, "id10"], [55, "authorization"], [55, "id4"], [55, "id10"], [55, "id16"], [55, "id22"], [56, "authorization"], [56, "id4"], [56, "id10"], [56, "id16"], [91, "authorization"], [91, "id4"], [91, "id10"], [91, "id16"], [92, "authorization"], [92, "id4"], [92, "id10"], [92, "id16"], [101, "authorization"], [101, "id4"], [118, "authorization"], [127, "authorization"], [127, "id4"], [127, "id10"], [127, "id16"], [127, "id22"], [127, "id28"], [127, "id34"], [128, "authorization"], [128, "id4"], [128, "id10"], [129, "authorization"], [129, "id4"], [129, "id10"], [129, "id16"], [129, "id22"], [130, "authorization"], [130, "id4"], [130, "id10"], [130, "id16"], [165, "authorization"], [165, "id4"], [165, "id10"], [165, "id16"], [166, "authorization"], [166, "id4"], [166, "id10"], [166, "id16"], [175, "authorization"], [175, "id4"], [192, "authorization"]], "HTTP request headers": [[53, "http-request-headers"], [53, "id5"], [53, "id11"], [53, "id17"], [53, "id23"], [53, "id29"], [53, "id35"], [54, "http-request-headers"], [54, "id5"], [54, "id11"], [55, "http-request-headers"], [55, "id5"], [55, "id11"], [55, "id17"], [55, "id23"], [56, "http-request-headers"], [56, "id5"], [56, "id11"], [56, "id17"], [91, "http-request-headers"], [91, "id5"], [91, "id11"], [91, "id17"], [92, "http-request-headers"], [92, "id5"], [92, "id11"], [92, "id17"], [101, "http-request-headers"], [101, "id5"], [118, "http-request-headers"], [127, "http-request-headers"], [127, "id5"], [127, "id11"], [127, "id17"], [127, "id23"], [127, "id29"], [127, "id35"], [128, "http-request-headers"], [128, "id5"], [128, "id11"], [129, "http-request-headers"], [129, "id5"], [129, "id11"], [129, "id17"], [129, "id23"], [130, "http-request-headers"], [130, "id5"], [130, "id11"], [130, "id17"], [165, "http-request-headers"], [165, "id5"], [165, "id11"], [165, "id17"], [166, "http-request-headers"], [166, "id5"], [166, "id11"], [166, "id17"], [175, "http-request-headers"], [175, "id5"], [192, "http-request-headers"]], "HTTP response details": [[53, "http-response-details"], [53, "id6"], [53, "id12"], [53, "id18"], [53, "id24"], [53, "id30"], [53, "id36"], [54, "http-response-details"], [54, "id6"], [54, "id12"], [55, "http-response-details"], [55, "id6"], [55, "id12"], [55, "id18"], [55, "id24"], [56, "http-response-details"], [56, "id6"], [56, "id12"], [56, "id18"], [91, "http-response-details"], [91, "id6"], [91, "id12"], [91, "id18"], [92, "http-response-details"], [92, "id6"], [92, "id12"], [92, "id18"], [101, "http-response-details"], [101, "id6"], [118, "http-response-details"], [127, "http-response-details"], [127, "id6"], [127, "id12"], [127, "id18"], [127, "id24"], [127, "id30"], [127, "id36"], [128, "http-response-details"], [128, "id6"], [128, "id12"], [129, "http-response-details"], [129, "id6"], [129, "id12"], [129, "id18"], [129, "id24"], [130, "http-response-details"], [130, "id6"], [130, "id12"], [130, "id18"], [165, "http-response-details"], [165, "id6"], [165, "id12"], [165, "id18"], [166, "http-response-details"], [166, "id6"], [166, "id12"], [166, "id18"], [175, "http-response-details"], [175, "id6"], [192, "http-response-details"]], "createGraph": [[53, "creategraph"]], "deleteGraph": [[53, "deletegraph"]], "getGraph": [[53, "getgraph"]], "getGraphStatistic": [[53, "getgraphstatistic"]], "getSchema": [[53, "getschema"]], "listGraphs": [[53, "listgraphs"]], "AdminServiceJobManagementApi": [[54, "adminservicejobmanagementapi"]], "deleteJobById": [[54, "deletejobbyid"]], "getJobById": [[54, "getjobbyid"]], "listJobs": [[54, "listjobs"]], "AdminServiceProcedureManagementApi": [[55, "adminserviceproceduremanagementapi"]], "createProcedure": [[55, "createprocedure"]], "deleteProcedure": [[55, "deleteprocedure"]], "getProcedure": [[55, "getprocedure"]], "listProcedures": [[55, "listprocedures"]], "updateProcedure": [[55, "updateprocedure"]], "AdminServiceServiceManagementApi": [[56, "adminserviceservicemanagementapi"]], "getServiceStatus": [[56, "getservicestatus"]], "restartService": [[56, "restartservice"]], "startService": [[56, "startservice"]], "stopService": [[56, "stopservice"]], "BaseEdgeType": [[57, "baseedgetype"], [131, "baseedgetype"]], "Properties": [[57, "properties"], [58, "properties"], [59, "properties"], [60, "properties"], [61, "properties"], [62, "properties"], [63, "properties"], [64, "properties"], [65, "properties"], [66, "properties"], [67, "properties"], [68, "properties"], [69, "properties"], [70, "properties"], [71, "properties"], [72, "properties"], [73, "properties"], [74, "properties"], [75, "properties"], [76, "properties"], [77, "properties"], [78, "properties"], [79, "properties"], [80, "properties"], [81, "properties"], [82, "properties"], [83, "properties"], [84, "properties"], [85, "properties"], [86, "properties"], [87, "properties"], [88, "properties"], [89, "properties"], [90, "properties"], [93, "properties"], [94, "properties"], [95, "properties"], [96, "properties"], [97, "properties"], [98, "properties"], [99, "properties"], [100, "properties"], [102, "properties"], [103, "properties"], [104, "properties"], [105, "properties"], [106, "properties"], [107, "properties"], [108, "properties"], [109, "properties"], [110, "properties"], [111, "properties"], [112, "properties"], [113, "properties"], [114, "properties"], [115, "properties"], [116, "properties"], [117, "properties"], [119, "properties"], [120, "properties"], [121, "properties"], [122, "properties"], [123, "properties"], [124, "properties"], [125, "properties"], [131, "properties"], [132, "properties"], [133, "properties"], [134, "properties"], [135, "properties"], [136, "properties"], [137, "properties"], [138, "properties"], [139, "properties"], [140, "properties"], [141, "properties"], [142, "properties"], [143, "properties"], [144, "properties"], [145, "properties"], [146, "properties"], [147, "properties"], [148, "properties"], [149, "properties"], [150, "properties"], [151, "properties"], [152, "properties"], [153, "properties"], [154, "properties"], [155, "properties"], [156, "properties"], [157, "properties"], [158, "properties"], [159, "properties"], [160, "properties"], [161, "properties"], [162, "properties"], [163, "properties"], [164, "properties"], [167, "properties"], [168, "properties"], [169, "properties"], [170, "properties"], [171, "properties"], [172, "properties"], [173, "properties"], [174, "properties"], [176, "properties"], [177, "properties"], [178, "properties"], [179, "properties"], [180, "properties"], [181, "properties"], [182, "properties"], [183, "properties"], [184, "properties"], [185, "properties"], [186, "properties"], [187, "properties"], [188, "properties"], [189, "properties"], [190, "properties"], [191, "properties"], [193, "properties"], [194, "properties"], [195, "properties"], [196, "properties"], [197, "properties"], [198, "properties"], [199, "properties"]], "BaseEdgeTypeVertexTypePairRelationsInner": [[58, "baseedgetypevertextypepairrelationsinner"], [132, "baseedgetypevertextypepairrelationsinner"]], "Enum: RelationEnum": [[58, "enum-relationenum"]], "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams": [[59, "baseedgetypevertextypepairrelationsinnerxcsrparams"], [133, "baseedgetypevertextypepairrelationsinnerxcsrparams"]], "Enum: EdgeStorageStrategyEnum": [[59, "enum-edgestoragestrategyenum"]], "BasePropertyMeta": [[60, "basepropertymeta"], [134, "basepropertymeta"]], "BaseVertexType": [[61, "basevertextype"], [135, "basevertextype"]], "BaseVertexTypeXCsrParams": [[62, "basevertextypexcsrparams"], [136, "basevertextypexcsrparams"]], "ColumnMapping": [[63, "columnmapping"], [137, "columnmapping"]], "CreateEdgeType": [[64, "createedgetype"], [138, "createedgetype"]], "CreateGraphRequest": [[65, "creategraphrequest"], [139, "creategraphrequest"]], "CreateGraphResponse": [[66, "creategraphresponse"], [140, "creategraphresponse"]], "CreateGraphSchemaRequest": [[67, "creategraphschemarequest"], [141, "creategraphschemarequest"]], "CreateProcedureRequest": [[68, "createprocedurerequest"], [142, "createprocedurerequest"]], "Enum: TypeEnum": [[68, "enum-typeenum"], [88, "enum-typeenum"], [109, "enum-typeenum"]], "CreateProcedureResponse": [[69, "createprocedureresponse"], [143, "createprocedureresponse"]], "CreatePropertyMeta": [[70, "createpropertymeta"], [144, "createpropertymeta"]], "CreateVertexType": [[71, "createvertextype"], [145, "createvertextype"]], "DateType": [[72, "datetype"], [146, "datetype"]], "EdgeData": [[73, "edgedata"], [147, "edgedata"]], "EdgeMapping": [[74, "edgemapping"], [148, "edgemapping"]], "EdgeMappingDestinationVertexMappingsInner": [[75, "edgemappingdestinationvertexmappingsinner"], [149, "edgemappingdestinationvertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInner": [[76, "edgemappingsourcevertexmappingsinner"], [150, "edgemappingsourcevertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInnerColumn": [[77, "edgemappingsourcevertexmappingsinnercolumn"], [151, "edgemappingsourcevertexmappingsinnercolumn"]], "EdgeMappingTypeTriplet": [[78, "edgemappingtypetriplet"], [152, "edgemappingtypetriplet"]], "EdgeRequest": [[79, "edgerequest"], [153, "edgerequest"]], "EdgeStatistics": [[80, "edgestatistics"], [154, "edgestatistics"]], "FixedChar": [[81, "fixedchar"], [155, "fixedchar"]], "FixedCharChar": [[82, "fixedcharchar"], [156, "fixedcharchar"]], "GSDataType": [[83, "gsdatatype"], [157, "gsdatatype"]], "Enum: PrimitiveTypeEnum": [[83, "enum-primitivetypeenum"], [97, "enum-primitivetypeenum"]], "GetEdgeType": [[84, "getedgetype"], [158, "getedgetype"]], "GetGraphResponse": [[85, "getgraphresponse"], [159, "getgraphresponse"]], "Enum: StoreTypeEnum": [[85, "enum-storetypeenum"]], "GetGraphSchemaResponse": [[86, "getgraphschemaresponse"], [160, "getgraphschemaresponse"]], "GetGraphStatisticsResponse": [[87, "getgraphstatisticsresponse"], [161, "getgraphstatisticsresponse"]], "GetProcedureResponse": [[88, "getprocedureresponse"], [162, "getprocedureresponse"]], "GetPropertyMeta": [[89, "getpropertymeta"], [163, "getpropertymeta"]], "GetVertexType": [[90, "getvertextype"], [164, "getvertextype"]], "GraphServiceEdgeManagementApi": [[91, "graphserviceedgemanagementapi"]], "addEdge": [[91, "addedge"]], "deleteEdge": [[91, "deleteedge"]], "getEdge": [[91, "getedge"]], "updateEdge": [[91, "updateedge"]], "GraphServiceVertexManagementApi": [[92, "graphservicevertexmanagementapi"]], "addVertex": [[92, "addvertex"]], "deleteVertex": [[92, "deletevertex"]], "getVertex": [[92, "getvertex"]], "updateVertex": [[92, "updatevertex"]], "JobResponse": [[93, "jobresponse"], [167, "jobresponse"]], "JobStatus": [[94, "jobstatus"], [168, "jobstatus"]], "Enum: StatusEnum": [[94, "enum-statusenum"]], "LongText": [[95, "longtext"], [169, "longtext"]], "Parameter": [[96, "parameter"], [171, "parameter"]], "PrimitiveType": [[97, "primitivetype"], [172, "primitivetype"]], "Property": [[98, "property"], [477, "property"]], "PropertyArray": [[99, "propertyarray"], [173, "propertyarray"]], "QueryRequest": [[100, "queryrequest"], [174, "queryrequest"]], "QueryServiceApi": [[101, "queryserviceapi"]], "procCall": [[101, "proccall"]], "procCallCurrent": [[101, "proccallcurrent"]], "SchemaMapping": [[102, "schemamapping"], [176, "schemamapping"]], "SchemaMappingLoadingConfig": [[103, "schemamappingloadingconfig"], [177, "schemamappingloadingconfig"]], "Enum: ImportOptionEnum": [[103, "enum-importoptionenum"]], "SchemaMappingLoadingConfigDataSource": [[104, "schemamappingloadingconfigdatasource"], [178, "schemamappingloadingconfigdatasource"]], "Enum: SchemeEnum": [[104, "enum-schemeenum"]], "SchemaMappingLoadingConfigFormat": [[105, "schemamappingloadingconfigformat"], [179, "schemamappingloadingconfigformat"]], "SchemaMappingLoadingConfigXCsrParams": [[106, "schemamappingloadingconfigxcsrparams"], [180, "schemamappingloadingconfigxcsrparams"]], "ServiceStatus": [[107, "servicestatus"], [181, "servicestatus"], [201, "servicestatus"]], "StartServiceRequest": [[108, "startservicerequest"], [182, "startservicerequest"]], "StoredProcedureMeta": [[109, "storedproceduremeta"], [183, "storedproceduremeta"]], "StringType": [[110, "stringtype"], [184, "stringtype"]], "StringTypeString": [[111, "stringtypestring"], [185, "stringtypestring"]], "TemporalType": [[112, "temporaltype"], [186, "temporaltype"]], "TemporalTypeTemporal": [[113, "temporaltypetemporal"], [187, "temporaltypetemporal"]], "TimeStampType": [[114, "timestamptype"], [188, "timestamptype"]], "TypedValue": [[115, "typedvalue"], [189, "typedvalue"]], "UpdateProcedureRequest": [[116, "updateprocedurerequest"], [190, "updateprocedurerequest"]], "UploadFileResponse": [[117, "uploadfileresponse"], [191, "uploadfileresponse"]], "UtilsApi": [[118, "utilsapi"]], "uploadFile": [[118, "uploadfile"]], "VarChar": [[119, "varchar"], [193, "varchar"]], "VarCharVarChar": [[120, "varcharvarchar"], [194, "varcharvarchar"]], "VertexData": [[121, "vertexdata"], [195, "vertexdata"]], "VertexMapping": [[122, "vertexmapping"], [196, "vertexmapping"]], "VertexRequest": [[123, "vertexrequest"], [197, "vertexrequest"]], "VertexStatistics": [[124, "vertexstatistics"], [198, "vertexstatistics"]], "VertexTypePairStatistics": [[125, "vertextypepairstatistics"], [199, "vertextypepairstatistics"]], "Java SDK Reference": [[126, "java-sdk-reference"]], "Requirements": [[126, "requirements"]], "Maven users": [[126, "maven-users"]], "Others": [[126, "others"]], "Documentation for Service APIs": [[126, "documentation-for-service-apis"], [200, "documentation-for-service-apis"]], "Documentation for Data Structures": [[126, "documentation-for-data-structures"], [200, "documentation-for-data-structures"]], "Documentation for Authorization": [[126, "documentation-for-authorization"]], "gs_interactive.AdminServiceGraphManagementApi": [[127, "gs-interactive-adminservicegraphmanagementapi"]], "create_dataloading_job": [[127, "create-dataloading-job"]], "create_graph": [[127, "create-graph"]], "delete_graph": [[127, "delete-graph"]], "get_graph": [[127, "get-graph"]], "get_graph_statistic": [[127, "get-graph-statistic"]], "get_schema": [[127, "get-schema"]], "list_graphs": [[127, "list-graphs"]], "gs_interactive.AdminServiceJobManagementApi": [[128, "gs-interactive-adminservicejobmanagementapi"]], "delete_job_by_id": [[128, "delete-job-by-id"]], "get_job_by_id": [[128, "get-job-by-id"]], "list_jobs": [[128, "list-jobs"]], "gs_interactive.AdminServiceProcedureManagementApi": [[129, "gs-interactive-adminserviceproceduremanagementapi"]], "create_procedure": [[129, "create-procedure"]], "delete_procedure": [[129, "delete-procedure"]], "get_procedure": [[129, "get-procedure"]], "list_procedures": [[129, "list-procedures"]], "update_procedure": [[129, "update-procedure"]], "gs_interactive.AdminServiceServiceManagementApi": [[130, "gs-interactive-adminserviceservicemanagementapi"]], "get_service_status": [[130, "get-service-status"]], "restart_service": [[130, "restart-service"]], "start_service": [[130, "start-service"]], "stop_service": [[130, "stop-service"]], "gs_interactive.GraphServiceEdgeManagementApi": [[165, "gs-interactive-graphserviceedgemanagementapi"]], "add_edge": [[165, "add-edge"]], "delete_edge": [[165, "delete-edge"]], "get_edge": [[165, "get-edge"]], "update_edge": [[165, "update-edge"]], "gs_interactive.GraphServiceVertexManagementApi": [[166, "gs-interactive-graphservicevertexmanagementapi"]], "add_vertex": [[166, "add-vertex"]], "delete_vertex": [[166, "delete-vertex"]], "get_vertex": [[166, "get-vertex"]], "update_vertex": [[166, "update-vertex"]], "ModelProperty": [[170, "modelproperty"]], "gs_interactive.QueryServiceApi": [[175, "gs-interactive-queryserviceapi"]], "proc_call": [[175, "proc-call"]], "proc_call_current": [[175, "proc-call-current"]], "gs_interactive.UtilsApi": [[192, "gs-interactive-utilsapi"]], "upload_file": [[192, "upload-file"]], "Python SDK Reference": [[200, "python-sdk-reference"]], "Requirements.": [[200, "requirements"]], "Installation & Usage": [[200, "installation-usage"]], "pip install": [[200, "pip-install"]], "Setuptools": [[200, "setuptools"]], "Tests": [[200, "tests"]], "Documentation For Authorization": [[200, "documentation-for-authorization"]], "RESTful API Documentation": [[201, "restful-api-documentation"]], "Introduction": [[201, "introduction"], [229, "introduction"]], "API Overview": [[201, "api-overview"]], "Detailed API Documentation": [[201, "detailed-api-documentation"]], "ListGraphs API (GraphManagement Category)": [[201, "listgraphs-api-graphmanagement-category"]], "Description": [[201, "description"], [201, "id1"], [201, "id6"], [201, "id11"], [201, "id16"], [201, "id21"], [201, "id26"], [201, "id31"], [201, "id36"], [201, "id41"], [201, "id46"], [201, "id51"], [201, "id56"], [201, "id61"], [201, "id66"], [201, "id71"], [201, "id75"], [201, "id80"], [201, "id85"], [201, "id90"]], "HTTP Request": [[201, "http-request"], [201, "id2"], [201, "id7"], [201, "id12"], [201, "id17"], [201, "id22"], [201, "id27"], [201, "id32"], [201, "id37"], [201, "id42"], [201, "id47"], [201, "id52"], [201, "id57"], [201, "id62"], [201, "id67"], [201, "id72"], [201, "id76"], [201, "id81"], [201, "id86"], [201, "id91"]], "Curl Command Example": [[201, "curl-command-example"], [201, "id3"], [201, "id8"], [201, "id13"], [201, "id18"], [201, "id23"], [201, "id28"], [201, "id33"], [201, "id38"], [201, "id43"], [201, "id48"], [201, "id53"], [201, "id58"], [201, "id63"], [201, "id68"], [201, "id77"], [201, "id82"], [201, "id87"], [201, "id92"]], "Expected Response": [[201, "expected-response"], [201, "id4"], [201, "id9"], [201, "id14"], [201, "id19"], [201, "id24"], [201, "id29"], [201, "id34"], [201, "id39"], [201, "id44"], [201, "id49"], [201, "id54"], [201, "id59"], [201, "id64"], [201, "id69"], [201, "id73"], [201, "id78"], [201, "id83"], [201, "id88"], [201, "id93"]], "Status Codes": [[201, "status-codes"], [201, "id5"], [201, "id10"], [201, "id15"], [201, "id20"], [201, "id25"], [201, "id30"], [201, "id35"], [201, "id40"], [201, "id45"], [201, "id50"], [201, "id55"], [201, "id60"], [201, "id65"], [201, "id70"], [201, "id74"], [201, "id79"], [201, "id84"], [201, "id89"], [201, "id94"]], "GetGraphStatistics API (GraphManagement Category)": [[201, "getgraphstatistics-api-graphmanagement-category"]], "CreateGraph (GraphManagement Category)": [[201, "creategraph-graphmanagement-category"]], "DeleteGraph  (GraphManagement Category)": [[201, "deletegraph-graphmanagement-category"]], "GetGraphSchema  (GraphManagement Category)": [[201, "getgraphschema-graphmanagement-category"]], "GetGraphMeta  (GraphManagement Category)": [[201, "getgraphmeta-graphmanagement-category"]], "ImportGraph  (GraphManagement Category)": [[201, "importgraph-graphmanagement-category"]], "CreateProcedure (ProcedureManagement Category)": [[201, "createprocedure-proceduremanagement-category"]], "ListAllProcedure  (ProcedureManagement Category)": [[201, "listallprocedure-proceduremanagement-category"]], "GetProcedure (ProcedureManagement Category)": [[201, "getprocedure-proceduremanagement-category"]], "UpdateProcedure (ProcedureManagement Category)": [[201, "updateprocedure-proceduremanagement-category"]], "DeleteProcedure (ProcedureManagement Category)": [[201, "deleteprocedure-proceduremanagement-category"]], "StartService (ServiceManagement Category)": [[201, "startservice-servicemanagement-category"]], "RestartService (ServiceManagement Category)": [[201, "restartservice-servicemanagement-category"]], "StopService (ServiceManagement Category)": [[201, "stopservice-servicemanagement-category"]], "SystemMetrics (NodeMetrics Category)": [[201, "systemmetrics-nodemetrics-category"]], "GetJobById (JobManagement Category)": [[201, "getjobbyid-jobmanagement-category"]], "GetAllJobs (JobManagement category)": [[201, "getalljobs-jobmanagement-category"]], "CancelJobById (JobManagement category)": [[201, "canceljobbyid-jobmanagement-category"]], "Enable AdminService in development": [[201, "enable-adminservice-in-development"]], "Start Compiler Service": [[201, "start-compiler-service"]], "Http error code": [[201, "http-error-code"]], "Preparation": [[202, "preparation"]], "Manage Interactive Service": [[202, "manage-interactive-service"]], "Initialize the Service": [[202, "initialize-the-service"]], "Start the Service": [[202, "start-the-service"]], "Stop the Service": [[202, "stop-the-service"]], "Restart the Service": [[202, "restart-the-service"]], "Check Service Status": [[202, "check-service-status"]], "Destroy the Service": [[202, "destroy-the-service"]], "Running Cypher Queries": [[202, "running-cypher-queries"]], "Running Gremlin Queries": [[202, "running-gremlin-queries"]], "Glossary": [[203, "glossary"], [247, "glossary"]], "Stored Procedure.": [[203, "stored-procedure"]], "Cypher.": [[203, "cypher"]], "Gremlin": [[203, "gremlin"]], "Compile.": [[203, "compile"]], "Install Interactive": [[204, "install-interactive"]], "A Solid Foundation": [[205, "a-solid-foundation"]], "Key Features": [[205, "key-features"], [234, "key-features"]], "Property Graph Model and Graph Queries": [[205, "property-graph-model-and-graph-queries"]], "The Cypher Query Language": [[205, "the-cypher-query-language"]], "The Gremlin Query Language": [[205, "the-gremlin-query-language"]], "Limitations": [[205, "limitations"], [229, "limitations"]], "GraphScope Interactive SDK": [[206, "graphscope-interactive-sdk"]], "Stored Procedures": [[207, "stored-procedures"]], "Compiling a Stored Procedure": [[207, "compiling-a-stored-procedure"]], "Enabling Stored Procedures": [[207, "enabling-stored-procedures"]], "Disabling Stored Procedures": [[207, "disabling-stored-procedures"]], "Viewing Enabled Stored Procedures": [[207, "viewing-enabled-stored-procedures"]], "Querying Stored Procedures": [[207, "querying-stored-procedures"]], "Tools": [[208, "tools"]], "The Administrative tool": [[209, "the-administrative-tool"]], "Detailed Usage": [[209, "detailed-usage"]], "Root Commands": [[209, "root-commands"]], "Service Commands": [[209, "service-commands"]], "Database Commands": [[209, "database-commands"]], "Procedure Commands": [[209, "procedure-commands"]], "GraphScope Interactive": [[210, "graphscope-interactive"]], "Introduction to ArrowFragment": [[211, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[211, "id1"]], "1. \u8f7d\u56fe": [[211, "id2"]], "1.1 \u521d\u59cb\u5316partitioner": [[211, "partitioner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[211, "arrow-table"]], "1.3. Shuffle vtable": [[211, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[211, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[211, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[211, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[211, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[211, "id3"]], "2. \u8bbf\u95eeFragment": [[211, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[211, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[211, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[211, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[211, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[211, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[211, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[211, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[211, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[211, "id13"]], "Frequently Asked Questions": [[212, "frequently-asked-questions"]], "Getting Started for GLE": [[213, "getting-started-for-gle"]], "Graph Workloads": [[214, "graph-workloads"]], "Graph Analytics": [[214, "graph-analytics"]], "Graph Interactive Query": [[214, "graph-interactive-query"]], "Graph Learning": [[214, "graph-learning"], [329, "graph-learning"]], "GraphScope for Data Scientists": [[215, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[215, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[215, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[215, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[215, "integration-with-pydata-ecosystem"]], "How to Report Bugs": [[216, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[217, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[217, null]], "GraphScope Flex": [[217, null]], "Graph Analytical Engine": [[217, null], [253, "graph-analytical-engine"]], "Graph Interactive Engine": [[217, null], [253, "graph-interactive-engine"]], "Graph Learning Engine": [[217, null]], "Storage Engine": [[217, null]], "Troubleshooting & Utilities": [[217, null]], "Development": [[217, null]], "Reference": [[217, null], [477, "reference"]], "Indices and tables": [[217, "indices-and-tables"]], "Standalone Deployment for GIE": [[218, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[218, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[218, "remove-the-gie-service"]], "Using Your Own Data": [[218, "using-your-own-data"]], "Deploy on a Cluster": [[218, "deploy-on-a-cluster"]], "Other Useful Configurations": [[218, "other-useful-configurations"]], "Design of GIE": [[219, "design-of-gie"]], "The Motivations": [[219, "the-motivations"]], "The Architecture": [[219, "the-architecture"]], "Query Processing": [[219, "query-processing"]], "Build GIE with Vineyard Store on Local": [[220, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[220, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[220, "manually-start-the-gie-services"]], "Running GraphScope Interactive Engine on Local": [[221, "running-graphscope-interactive-engine-on-local"]], "Customize Configurations for GIE instance": [[221, "customize-configurations-for-gie-instance"]], "GIE for Cypher": [[222, "gie-for-cypher"]], "Connecting via Python Driver": [[222, "connecting-via-python-driver"]], "Connecting via Cypher-Shell": [[222, "connecting-via-cypher-shell"]], "Using LLM as an Assistant in GIE": [[223, "using-llm-as-an-assistant-in-gie"]], "0. Environment": [[223, "environment"]], "1. Download Datasets": [[223, "download-datasets"]], "2. Load the Graph": [[223, "load-the-graph"]], "3. Set Endpoint and API Key": [[223, "set-endpoint-and-api-key"]], "4. Generate Graph Query Sentence from Questions": [[223, "generate-graph-query-sentence-from-questions"]], "5. Execute Generated Query Sentence with GIE": [[223, "execute-generated-query-sentence-with-gie"]], "Cypher Support": [[224, "cypher-support"]], "Data Types": [[224, "data-types"], [476, "data-types"]], "Property Types": [[224, "property-types"]], "Structural types": [[224, "structural-types"]], "Constructed Types": [[224, "constructed-types"]], "Operators": [[224, "operators"]], "Clause": [[224, "clause"]], "Neo4j Ecosystem": [[225, "neo4j-ecosystem"]], "GIE For Tinkerpop Ecosystem": [[225, null], [232, null]], "A Generic Graph Optimizer for GIE": [[226, "a-generic-graph-optimizer-for-gie"]], "Rule-based Optimizer (RBO)": [[226, "rule-based-optimizer-rbo"]], "FilterMatchRule": [[226, "filtermatchrule"]], "DegreeFusionRule": [[226, "degreefusionrule"]], "NotMatchToAntiJoinRule": [[226, "notmatchtoantijoinrule"]], "FieldTrimRule": [[226, "fieldtrimrule"]], "Cost-based Optimizer (CBO)": [[226, "cost-based-optimizer-cbo"]], "Graph Type Inference": [[226, "graph-type-inference"]], "FAQs for GIE Gremlin Usage": [[227, "faqs-for-gie-gremlin-usage"]], "Compatibility with TinkerPop": [[227, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[227, "property-graph-constraints"]], "What\u2019s the difference between Inner ID and Property ID ?": [[227, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[227, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[227, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[227, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[227, "group-by-multiple-keys"]], "group by multiple values:": [[227, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[227, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[227, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[227, "how-to-use-subgraph-in-gie-gremlin"]], "Supported Gremlin Steps": [[229, "supported-gremlin-steps"]], "Standard Steps": [[229, "standard-steps"]], "Source": [[229, "source"]], "V()": [[229, "v"]], "E()": [[229, "e"]], "Expand": [[229, "expand"]], "outE()": [[229, "oute"]], "inE()": [[229, "ine"]], "bothE()": [[229, "bothe"]], "out()": [[229, "out"], [229, "id7"]], "in()": [[229, "in"], [229, "id8"]], "both()": [[229, "both"], [229, "id9"]], "outV()": [[229, "outv"]], "inV()": [[229, "inv"]], "otherV()": [[229, "otherv"]], "bothV()": [[229, "bothv"]], "Filter": [[229, "filter"]], "hasId()": [[229, "hasid"], [231, "hasid"]], "hasLabel()": [[229, "haslabel"]], "has()": [[229, "has"]], "hasNot()": [[229, "hasnot"]], "is()": [[229, "is"]], "where(traversal)": [[229, "where-traversal"]], "where(predicate)": [[229, "where-predicate"]], "not(traversal)": [[229, "not-traversal"]], "dedup()": [[229, "dedup"], [231, "dedup"]], "Project": [[229, "project"]], "id()": [[229, "id"]], "label()": [[229, "label"]], "constant()": [[229, "constant"], [231, "constant"]], "valueMap()": [[229, "valuemap"], [231, "valuemap"]], "values()": [[229, "values"]], "elementMap()": [[229, "elementmap"]], "select()": [[229, "select"], [231, "select"]], "Aggregate": [[229, "aggregate"]], "count()": [[229, "count"]], "fold()": [[229, "fold"], [231, "fold"]], "sum()": [[229, "sum"]], "min()": [[229, "min"]], "max()": [[229, "max"]], "mean()": [[229, "mean"]], "group()": [[229, "group"], [231, "group"]], "groupCount()": [[229, "groupcount"], [231, "groupcount"]], "<h3 id=\"gremlin-order\">Order</h3>": [[229, "order"]], "order()": [[229, "id1"]], "Statistics": [[229, "statistics"]], "limit()": [[229, "limit"]], "coin()": [[229, "coin"]], "sample()": [[229, "sample"]], "Union": [[229, "union"]], "union()": [[229, "id2"]], "Match": [[229, "match"]], "match()": [[229, "id3"]], "Subgraph": [[229, "subgraph"]], "subgraph()": [[229, "id4"]], "Identity": [[229, "identity"]], "identity()": [[229, "id5"]], "Unfold": [[229, "unfold"]], "unfold()": [[229, "id6"], [229, "id10"]], "Syntactic Sugars": [[229, "syntactic-sugars"]], "PathExpand": [[229, "pathexpand"]], "endV()": [[229, "endv"]], "Getting Properites": [[229, "getting-properites"]], "Expression": [[229, "expression"]], "Running Examples": [[229, "running-examples"]], "Aggregate (Group)": [[229, "aggregate-group"]], "To be Supported": [[229, "to-be-supported"]], "path()": [[229, "path"]], "local()": [[229, "local"]], "Will Not be Supported": [[229, "will-not-be-supported"]], "repeat()": [[229, "repeat"]], "properties()": [[229, "properties"]], "sideEffect": [[229, "sideeffect"]], "branch": [[229, "branch"]], "GIE for Gremlin": [[230, "gie-for-gremlin"]], "Connecting via Python SDK": [[230, "connecting-via-python-sdk"]], "Connecting via Java SDK": [[230, "connecting-via-java-sdk"]], "Connecting via Gremlin-Console": [[230, "connecting-via-gremlin-console"]], "Tutorial: LDBC Gremlin": [[231, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[231, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[231, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[231, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[231, "apply-some-filters"]], "Extract Property Values": [[231, "extract-property-values"]], "Real Applications": [[231, "real-applications"], [231, "id1"]], "Basic Traversal Query": [[231, "basic-traversal-query"]], "Expansion": [[231, "expansion"]], "out(), in() and both()": [[231, "out-in-and-both"]], "outE(), inE() and bothE()": [[231, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[231, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[231, "multiple-expansion-steps"]], "Expansion from many starting points": [[231, "expansion-from-many-starting-points"]], "Filter & Expansion": [[231, "filter-expansion"]], "Apply filters after expansion": [[231, "apply-filters-after-expansion"]], "Expansion as filters": [[231, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[231, "path-expansion-syntactic-sugar"]], "Pattern Match": [[231, "pattern-match"]], "Relational Operations": [[231, "relational-operations"]], "Filter Steps": [[231, "filter-steps"]], "where()": [[231, "where"]], "Project Steps": [[231, "project-steps"]], "id() and label()": [[231, "id-and-label"]], "Aggregate Steps": [[231, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[231, "sum-min-max-and-mean"]], "Order Step": [[231, "order-step"]], "Limit Step": [[231, "limit-step"]], "Expression(Syntax Sugar)": [[231, "expression-syntax-sugar"]], "Complex Queries": [[231, "complex-queries"]], "LDBC BI2": [[231, "ldbc-bi2"]], "LDBC BI3": [[231, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[231, "ldbc-bi4-left-part"]], "LDBC BI11": [[231, "ldbc-bi11"]], "LDBC BI14": [[231, "ldbc-bi14"]], "Apache TinkerPop Ecosystem": [[232, "apache-tinkerpop-ecosystem"]], "Tutorials for Java Users": [[233, "tutorials-for-java-users"]], "Ease-of-use: Python Interface": [[234, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[234, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[234, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[234, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[234, "gnn-training-inference"]], "Cloud Native Design": [[234, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[234, "across-engine-workflow-orchestration"]], "Design of GLE": [[235, "design-of-gle"]], "Model Paradigms": [[235, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[235, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[235, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[235, "pipeline-for-learning"]], "Dev on docker container": [[236, "dev-on-docker-container"]], "Build Learning Engine": [[236, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[237, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[238, "graph-sampling"], [317, "graph-sampling"]], "Graph Traversal": [[238, "graph-traversal"], [249, "graph-traversal"], [318, "graph-traversal"]], "Neighborhood Sampling": [[238, "neighborhood-sampling"]], "Subgraph Sampling": [[238, "subgraph-sampling"], [250, "subgraph-sampling"]], "Negative Sampling": [[238, "negative-sampling"], [322, "negative-sampling"]], "GSL": [[238, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[240, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[240, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[240, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[241, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[241, "load-graph"], [243, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[241, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[241, "launch-the-learning-engine"], [243, "launch-the-learning-engine"]], "Train the Model": [[241, "train-the-model"]], "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster": [[242, "tutorial-training-a-node-classification-model-pyg-on-a-k8s-cluster"]], "Set parameters & load graph": [[242, "set-parameters-load-graph"]], "Launch the Server Engine": [[242, "launch-the-server-engine"]], "Configure the parameters for client pods": [[242, "configure-the-parameters-for-client-pods"]], "Write training and testing script": [[242, "write-training-and-testing-script"]], "Import packages": [[242, "import-packages"]], "Define test function": [[242, "define-test-function"]], "Define the loader and training process": [[242, "define-the-loader-and-training-process"]], "main function": [[242, "main-function"]], "Run the script": [[242, "run-the-script"]], "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine": [[243, "tutorial-training-a-node-classification-model-pyg-on-your-local-machine"]], "Define the evaluation function": [[243, "define-the-evaluation-function"]], "Create neighbor loaderfor training, testing and validation": [[243, "create-neighbor-loaderfor-training-testing-and-validation"]], "Define the PyG GraphSage Model and optimizer": [[243, "define-the-pyg-graphsage-model-and-optimizer"]], "Train and test": [[243, "train-and-test"]], "Loading Graphs": [[244, "loading-graphs"]], "Load Built-in Datasets": [[244, "load-built-in-datasets"]], "Loading Your Own Datasets": [[244, "loading-your-own-datasets"]], "Adding Vertices": [[244, "adding-vertices"]], "Advanced Usages": [[244, "advanced-usages"]], "Deduce vertex labels when not ambiguous": [[244, "deduce-vertex-labels-when-not-ambiguous"]], "Deduce vertex from edges": [[244, "deduce-vertex-from-edges"]], "Multiple relations": [[244, "multiple-relations"]], "Specify data types of properties manually": [[244, "specify-data-types-of-properties-manually"]], "Other parameters of graph": [[244, "other-parameters-of-graph"]], "Putting them Together": [[244, "putting-them-together"]], "Loading From Pandas or Numpy": [[244, "loading-from-pandas-or-numpy"]], "From Pandas": [[244, "from-pandas"]], "From Numpy": [[244, "from-numpy"]], "Loader Variants": [[244, "loader-variants"]], "Techniques targeting at large graph": [[244, "techniques-targeting-at-large-graph"]], "Tips for reduce memory consumption of graphs": [[244, "tips-for-reduce-memory-consumption-of-graphs"]], "Design of GraphScope": [[245, "design-of-graphscope"]], "Unified Graph Computing Platform": [[245, "unified-graph-computing-platform"]], "Application layer": [[245, "application-layer"]], "Execution engine layer": [[245, "execution-engine-layer"]], "Storage layer": [[245, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[245, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[245, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[245, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[245, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[245, "graphscope-for-learning"]], "One-stop Graph Processing": [[246, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[246, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[246, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[246, "graph-learning-quick-start"]], "FLASH": [[247, "flash"]], "GRAPE": [[247, "grape"]], "GAE": [[247, "gae"]], "GART": [[247, "gart"]], "GRIN": [[247, "grin"]], "GraphAr": [[247, "graphar"]], "Groot": [[247, "groot"]], "GUM": [[247, "gum"]], "MaxGraph (deprecated)": [[247, "maxgraph-deprecated"]], "Vineyard, or v6d": [[247, "vineyard-or-v6d"]], "GIE": [[247, "gie"]], "GAIA": [[247, "gaia"]], "Pegasus": [[247, "pegasus"]], "Ingress": [[247, "ingress"]], "PIE-model": [[247, "pie-model"]], "Graph Analytics Workloads": [[248, "graph-analytics-workloads"]], "What is Graph Analytics": [[248, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[248, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[248, "what-can-graphscope-do"], [250, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[249, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[249, "tinkerpop-and-gremlin"]], "Pattern Matching": [[249, "pattern-matching"], [249, "id1"]], "Neo4j and Cypher": [[249, "neo4j-and-cypher"]], "Graph Learning Workloads": [[250, "graph-learning-workloads"]], "What is Graph Neural Network": [[250, "what-is-graph-neural-network"]], "Typical GNN Models": [[250, "typical-gnn-models"]], "Paradigm of Model Training": [[250, "paradigm-of-model-training"]], "Steps of Model Training": [[250, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[250, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[251, "introducing-graphscope"]], "What is GraphScope": [[251, "what-is-graphscope"]], "Why use GraphScope": [[251, "why-use-graphscope"]], "What are the Use Cases": [[251, "what-are-the-use-cases"]], "What are the Limitations": [[251, "what-are-the-limitations"]], "What are the Next": [[251, "what-are-the-next"]], "Positioning of GraphScope": [[252, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[252, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[252, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[252, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[252, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[253, "performance-and-benchmark"]], "Results": [[253, "results"]], "Performance on GPUs": [[253, "performance-on-gpus"]], "Reproducing the results": [[253, "reproducing-the-results"]], "Tutorials for Python Users": [[254, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[255, "analytical-engine-api-reference"]], "Analytical Engine": [[255, "analytical-engine"]], "Fragments in GraphScope": [[255, "fragments-in-graphscope"]], "Analytical Apps": [[255, "analytical-apps"]], "Analytical Workers": [[255, "analytical-workers"]], "App\u2019s Context": [[255, "app-s-context"]], "Analytical App": [[256, "analytical-app"]], "AppAssets": [[256, "appassets"]], "JavaApp": [[256, "javaapp"]], "App object": [[256, "app-object"]], "Functions": [[256, "functions"], [258, "functions"], [331, "functions"]], "BuiltIn apps": [[256, "builtin-apps"]], "Context": [[257, "context"]], "Context object": [[257, "context-object"]], "Cython SDK API": [[258, "cython-sdk-api"]], "Pregel": [[258, "pregel"]], "PIE": [[258, "pie"]], "GraphScope types": [[258, "graphscope-types"]], "Flex API Reference": [[259, "flex-api-reference"]], "About Grape JDK": [[260, "about-grape-jdk"]], "Project Structure": [[260, "project-structure"]], "Building from source": [[260, "building-from-source"]], "Java Reference (javadoc)": [[261, "java-reference-javadoc"]], "graphscope.Vertex": [[262, "graphscope-vertex"]], "graphscope.declare": [[263, "graphscope-declare"]], "graphscope.framework.app.load_app": [[264, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[265, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[266, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[267, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[268, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[269, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[270, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[271, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[272, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[273, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[274, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[275, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[276, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[277, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[278, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[279, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[280, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.get_context_data": [[281, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[282, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[283, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[284, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[285, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[286, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[287, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[288, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[289, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[290, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[291, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[292, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[293, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[294, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[295, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[296, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[297, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[298, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[299, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[300, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[301, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[302, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[303, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[304, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[305, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[306, "graphscope-g"]], "graphscope.get_default_session": [[307, "graphscope-get-default-session"]], "graphscope.graphlearn": [[308, "graphscope-graphlearn"]], "graphscope.gremlin": [[309, "graphscope-gremlin"]], "graphscope.has_default_session": [[310, "graphscope-has-default-session"]], "graphscope.session": [[311, "graphscope-session"]], "graphscope.set_option": [[312, "graphscope-set-option"]], "Developing Your Own Model": [[313, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[313, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[313, "sampling"]], "Encoder": [[313, "encoder"], [321, "encoder"]], "Loss Function and Training Process": [[313, "loss-function-and-training-process"]], "Data Source": [[314, "data-source"]], "1 Data format": [[314, "data-format"]], "1.1 Basic format": [[314, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[314, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[314, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[314, "label-format-labeled"]], "1.5 Putting together": [[314, "putting-together"]], "2 Data source type": [[314, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[314, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[314, "user-api"]], "Graph Object": [[315, "graph-object"]], "2 Describe the Topology": [[315, "describe-the-topology"]], "3.1 Stand-alone Mode": [[315, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[315, "distributed-mode-client-server-mode"]], "Graph Query": [[316, "graph-query"]], "1 Introduction": [[317, "introduction"]], "Graph Sampling Language\uff08GSL)": [[319, "graph-sampling-language-gsl"]], "Install from pip": [[320, "install-from-pip"]], "Get wheel package": [[320, "get-wheel-package"]], "Install using pip": [[320, "install-using-pip"]], "Install TensorFlow": [[320, "install-tensorflow"]], "Install git": [[320, "install-git"]], "Install dependent libraries": [[320, "install-dependent-libraries"]], "Compile": [[320, "compile"], [323, "compile"]], "Install": [[320, "install"]], "Run test": [[320, "run-test"]], "Docker image": [[320, "docker-image"]], "Graph Learning Model": [[321, "graph-learning-model"]], "Data model": [[321, "data-model"]], "Defining Your Own Operator": [[323, "defining-your-own-operator"]], "Programming Interface": [[323, "programming-interface"]], "Distributed Runtime Design": [[323, "distributed-runtime-design"]], "Implement a New Operator": [[323, "implement-a-new-operator"]], "Clone source code": [[323, "clone-source-code"]], "Implement your operator class": [[323, "implement-your-operator-class"]], "Register Operator": [[323, "register-operator"]], "How to Use an Operator": [[323, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[324, "integrating-other-data-sources"]], "File System Interface": [[324, "file-system-interface"]], "ByteStreamAccessFile": [[324, "bytestreamaccessfile"]], "StructuredAccessFile": [[324, "structuredaccessfile"]], "WritableFile": [[324, "writablefile"]], "Register with Scheme": [[324, "register-with-scheme"]], "Quick Start": [[325, "quick-start"]], "1 Trying out the built-in models": [[325, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[325, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[325, "developing-a-gnn-model"]], "3.1 Data Preparation": [[325, "data-preparation"]], "3.2 Graph Construction": [[325, "graph-construction"]], "3.3 Graph Sampling": [[325, "graph-sampling"]], "3.4 GNN Model": [[325, "gnn-model"]], "System configuration": [[326, "system-configuration"]], "Graph": [[327, "graph"], [331, "graph"], [465, "graph"]], "Graph object": [[327, "graph-object"]], "Loader object": [[327, "loader-object"]], "Graph Functions": [[327, "graph-functions"]], "Interactive Query": [[328, "interactive-query"]], "Builtin algorithms": [[330, "builtin-algorithms"]], "Nodes": [[331, "nodes"]], "Edges": [[331, "edges"]], "Self loops": [[331, "self-loops"]], "Attributes": [[331, "attributes"]], "Freezing graph structure": [[331, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[332, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[333, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[334, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[335, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[336, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[337, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[338, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[339, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[340, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[341, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[342, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[343, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[344, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[345, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[346, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[347, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[348, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[349, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[350, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[351, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[352, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[353, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[354, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[355, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[356, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[357, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[358, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[359, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[360, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[361, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[362, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[363, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[364, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[365, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[366, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[367, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[368, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[369, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[370, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[371, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[372, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[373, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[374, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[375, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[376, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[377, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[378, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[379, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[380, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[381, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[382, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[383, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[384, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[385, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[386, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[387, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[388, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[389, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[390, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[391, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[392, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[393, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[394, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[395, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[396, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[397, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[398, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[399, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[400, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[401, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[402, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[403, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[404, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[405, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[406, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[407, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[408, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[409, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[410, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[411, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[412, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[413, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[414, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[415, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[416, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[417, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[418, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[419, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[420, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[421, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[422, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[423, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[424, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[425, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[426, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[427, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[428, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[429, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[430, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[431, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[432, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[433, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[434, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[435, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[436, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[437, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[438, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[439, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[440, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[441, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[442, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[443, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[444, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[445, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[446, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[447, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[448, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[449, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[450, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[451, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[452, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[453, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[454, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[455, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[456, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[457, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[458, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[459, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[460, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[461, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[462, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[463, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[464, "graph-generators"]], "Atlas": [[464, "module-graphscope.nx.generators.atlas"]], "Classic": [[464, "module-graphscope.nx.generators.classic"]], "Expanders": [[464, "module-graphscope.nx.generators.expanders"]], "Small": [[464, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[464, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[464, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[464, "module-graphscope.nx.generators.directed"]], "Geometric": [[464, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[464, "module-graphscope.nx.generators.ego"]], "Stochastic": [[464, "module-networkx.generators.stochastic"]], "AS graph": [[464, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[464, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[464, "module-graphscope.nx.generators.social"]], "Spectral": [[464, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[464, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[464, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[464, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[464, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[464, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[464, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[464, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[465, "graph-types"]], "DiGraph": [[465, "digraph"]], "NetworkX-style API": [[466, "networkx-style-api"]], "Reading graphs": [[467, "reading-graphs"]], "Edge List": [[467, "edge-list"]], "Adjacency List": [[467, "adjacency-list"]], "Graph Transformation": [[468, "graph-transformation"]], "Operation": [[469, "operation"]], "Operation object": [[469, "operation-object"]], "BuiltIn operations": [[469, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[470, "python-api-reference"]], "Selector": [[471, "selector"]], "Selectors in different context": [[471, "selectors-in-different-context"]], "TensorContext": [[471, "tensorcontext"]], "VertexDataContext": [[471, "vertexdatacontext"]], "LabeledVertexDataContext": [[471, "labeledvertexdatacontext"]], "VertexPropertyContext": [[471, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[471, "labeledvertexpropertycontext"]], "Methods that use selectors": [[471, "methods-that-use-selectors"]], "One-dimensional results": [[471, "one-dimensional-results"]], "Multi-dimensional results": [[471, "multi-dimensional-results"]], "Vertex Range": [[471, "vertex-range"]], "Session": [[472, "session"]], "Session object": [[472, "session-object"]], "Session Functions": [[472, "session-functions"]], "Resources Estimator": [[473, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[474, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[474, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[474, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[474, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[474, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[476, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[476, "the-graphar-file-format"]], "Features": [[476, "features"]], "File Format": [[476, "file-format"]], "Information files": [[476, "information-files"]], "Data files": [[476, "data-files"]], "Property Data Types": [[476, "property-data-types"]], "GraphAr in GraphScope": [[476, "graphar-in-graphscope"]], "Saving Graph Data in GraphAr": [[476, "saving-graph-data-in-graphar"]], "Loading GraphAr Data into GraphScope": [[476, "loading-graphar-data-into-graphscope"]], "GRIN: Graph Retrieval INterface": [[477, "grin-graph-retrieval-interface"]], "Motivations": [[477, "motivations"]], "Unified Graph Retrieval": [[477, "unified-graph-retrieval"]], "GRIN Concepts": [[477, "grin-concepts"]], "Predefined Macros": [[477, "predefined-macros"]], "Partition Strategy": [[477, "partition-strategy"]], "Edge-cut Partition Strategy": [[477, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[477, "vertex-cut-partition-strategy"]], "Property Graph Model": [[477, "property-graph-model"]], "Implementation Guideline": [[477, "implementation-guideline"]], "For computing engine": [[477, "for-computing-engine"]], "For storage engine": [[477, "for-storage-engine"]], "Design Details": [[477, "design-details"]], "Handler": [[477, "handler"]], "Edge": [[477, "edge"]], "List": [[477, "list"]], "Array-style Retrieval": [[477, "array-style-retrieval"]], "List Iterator": [[477, "list-iterator"]], "Label": [[477, "label"], [498, "label"]], "Order": [[477, "order"]], "Master and Mirror": [[477, "master-and-mirror"]], "Local Complete": [[477, "local-complete"]], "Natural ID Trait": [[477, "natural-id-trait"]], "Groot: Persistent Graph Store": [[478, "groot-persistent-graph-store"]], "Known Limitation": [[478, "known-limitation"]], "Deploy Groot": [[478, "deploy-groot"]], "Install from ArtifactHub": [[478, "install-from-artifacthub"]], "Installing from a local directory": [[478, "installing-from-a-local-directory"]], "Common Configurations": [[478, "common-configurations"]], "Connecting to Groot": [[478, "connecting-to-groot"]], "Connection": [[478, "connection"]], "Building and Modifying Graph Models": [[478, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[478, "using-built-in-datasets"]], "Customizing Models and Datasets": [[478, "customizing-models-and-datasets"]], "Querying Data": [[478, "querying-data"]], "Python": [[478, "python"], [478, "id1"]], "Node.js": [[478, "node-js"]], "Data Import": [[478, "data-import"]], "Offline Import": [[478, "offline-import"]], "Prerequisite": [[478, "prerequisite"]], "Data Format": [[478, "data-format"]], "Loading Process": [[478, "loading-process"]], "Build: Building a partitioned graph": [[478, "build-building-a-partitioned-graph"]], "2. Loading graph partitions": [[478, "loading-graph-partitions"]], "3. Commit to store service": [[478, "commit-to-store-service"]], "Realtime Write": [[478, "realtime-write"]], "Other features": [[478, "other-features"]], "Uninstalling and Restarting": [[478, "uninstalling-and-restarting"]], "Uninstall Groot": [[478, "uninstall-groot"]], "Restart Groot": [[478, "restart-groot"]], "Destroy Groot": [[478, "destroy-groot"]], "Developing Guide": [[478, "developing-guide"]], "Build image": [[478, "build-image"]], "Persistence": [[478, "persistence"]], "Troubleshooting": [[478, "troubleshooting"]], "Viewing logs": [[478, "viewing-logs"]], "Configuring logs": [[478, "configuring-logs"]], "Secondary Instance": [[478, "secondary-instance"]], "Traces": [[478, "traces"]], "Write High-availability": [[478, "write-high-availability"]], "In-memory immutable graphs on Vineyard": [[479, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[479, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[479, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[479, "using-loaded-graphs"]], "Applications and algorithms": [[480, "applications-and-algorithms"]], "Bind application to graph": [[480, "bind-application-to-graph"]], "Built-in algorithms": [[480, "built-in-algorithms"]], "Scaling and repartitioning": [[481, "scaling-and-repartitioning"]], "Fennel": [[481, "fennel"]], "XtraPuLP": [[481, "xtrapulp"]], "Hybrid partitioning": [[481, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[482, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[482, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[482, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[482, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[483, "user-guide-and-examples-of-gle"]], "Error Codes": [[484, "error-codes"]], "Command-line Utility gsctl": [[485, "command-line-utility-gsctl"]], "Install/Update gsctl": [[485, "install-update-gsctl"]], "Commands": [[485, "commands"]], "Utility Scripts": [[485, "utility-scripts"]], "Client/Server Mode": [[485, "client-server-mode"]], "Change scope": [[485, "change-scope"]], "Close the connection": [[485, "close-the-connection"]], "How to Find logs": [[486, "how-to-find-logs"]], "Find logs in k8s": [[486, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[486, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[486, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[486, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[486, "find-logs-for-groot"]], "Monitoring": [[487, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[488, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[488, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[488, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[488, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[488, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[488, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[488, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[488, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[488, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[488, "id7"]], "\u90e8\u7f72": [[489, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[489, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[489, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[489, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[490, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[490, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[490, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[490, "python-wheels"]], "Linux": [[490, "linux"]], "macOS": [[490, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[490, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[491, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[492, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[492, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[492, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[492, "id6"]], "\u56fe\u5206\u6790": [[492, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[492, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[492, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[493, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[493, "id2"]], "\u6295\u5f71": [[493, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[493, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[493, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[494, "graphscope"]], "\u76ee\u5f55": [[494, null], [499, null]], "API \u53c2\u8003": [[494, null]], "\u7d22\u5f15": [[494, "id1"]], "\u5b89\u88c5": [[495, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[495, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[495, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[496, "id1"]], "Apache TinkerPop": [[496, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[496, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[496, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[496, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[496, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[496, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[496, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[496, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[496, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[496, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[496, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[496, "id13"]], "\u5df2\u77e5\u9650\u5236": [[496, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[497, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[497, "id2"]], "\u6570\u636e\u6a21\u578b": [[497, "id3"]], "\u7f16\u7801\u5668": [[497, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[497, "id5"]], "\u91c7\u6837": [[497, "id6"]], "\u56fe\u6570\u636e\u6d41": [[497, "id7"]], "\u6a21\u578b": [[497, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[497, "id9"]], "\u8f7d\u56fe": [[498, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[498, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[498, "id4"]], "Build Vertex": [[498, "build-vertex"]], "vertices": [[498, "vertices"]], "properties": [[498, "properties"], [498, "id7"]], "vid_field": [[498, "vid-field"]], "Build Edge": [[498, "build-edge"]], "edges": [[498, "edges"]], "label": [[498, "id6"]], "src_label and dst_label": [[498, "src-label-and-dst-label"]], "src_field and dst_field": [[498, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[498, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[498, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[498, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[498, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[498, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[498, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[498, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[498, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[498, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[498, "numpy"]], "Loader \u7684\u53d8\u79cd": [[498, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[499, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "cdlp()": [[0, "id0"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id1"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lcc()": [[0, "id2"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id3"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id4"]], "wcc()": [[0, "id5"]], "gs::appbase (c++ class)": [[255, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[255, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[255, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[255, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[255, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[255, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[255, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[255, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[255, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[255, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[255, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[255, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[255, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[255, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[255, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[255, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[255, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[255, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::adddatatoexistedelabel (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::adddatatoexistedvlabel (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [255, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb"]], "gs::arrowfragmentloader::extendlabeldata (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[255, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[255, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[255, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[255, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[255, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [255, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [255, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[255, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[255, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[255, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [255, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [255, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[255, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[255, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[255, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [255, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [255, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [255, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[255, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[255, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[255, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[255, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[255, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[255, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[255, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[255, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[255, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[255, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[255, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[255, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[255, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[255, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[255, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[255, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[255, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[255, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[255, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [255, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[255, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[255, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[255, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[255, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[255, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[255, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[255, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[255, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv"]], "gs::ctxwrapperbuilder (c++ struct)": [[255, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[255, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[255, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[255, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[255, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[255, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[255, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[255, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[255, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[255, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[255, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[255, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[255, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[255, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[255, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[255, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[255, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[255, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[255, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[255, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[255, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[255, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[255, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[255, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[255, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[255, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[255, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[255, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[255, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[255, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[255, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[255, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [255, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[255, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[255, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[255, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[255, "_CPPv4N2gs14DispatchResult9graph_defEv"], [255, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[255, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[255, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[255, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [255, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[255, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[255, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[255, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[255, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[255, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[255, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[255, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[255, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[255, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[255, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[255, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[255, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[255, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[255, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[255, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[255, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[255, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[255, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[255, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[255, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[255, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[255, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[255, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[255, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[255, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [255, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[255, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[255, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[255, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[255, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[255, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[255, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[255, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[255, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[255, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [255, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[255, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[255, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[255, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[255, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[255, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[255, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[255, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[255, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[255, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[255, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[255, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[255, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[255, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[255, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[255, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[255, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[255, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[255, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[255, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[255, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[255, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[255, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[255, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[255, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[255, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[255, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[255, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[255, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[255, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[255, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[255, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[255, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[255, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[255, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[255, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[255, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[255, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[255, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[255, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[255, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[255, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[255, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[255, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[255, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[255, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [255, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[255, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[255, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[255, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[255, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[255, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[255, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[255, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[255, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[255, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[255, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[255, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[255, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[255, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[255, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[255, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[255, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[255, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[255, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[255, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[255, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[255, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[255, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[255, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[255, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[255, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[255, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[255, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[255, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[255, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [255, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[255, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [255, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[255, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[255, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[255, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[255, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[255, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[255, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[255, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[255, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[255, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[256, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[256, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[256, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[256, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[256, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[256, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[256, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[256, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[256, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[256, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[256, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[256, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[256, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[256, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[256, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[256, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[256, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[256, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[256, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[256, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[256, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[256, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[256, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[256, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[256, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[256, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[256, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[256, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[256, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[256, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[256, "graphscope.louvain"]], "lpa() (in module graphscope)": [[256, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[256, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[256, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[256, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[256, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[256, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[256, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[256, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[256, "graphscope.sssp"]], "triangles() (in module graphscope)": [[256, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[256, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[256, "graphscope.voterank"]], "wcc() (in module graphscope)": [[256, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[257, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[257, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[257, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[257, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[257, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[257, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[257, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[257, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[257, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[257, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[257, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[257, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[257, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[262, "graphscope.Vertex"]], "declare() (in module graphscope)": [[263, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[264, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[265, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[266, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[267, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[268, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[269, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[270, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[271, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[272, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[273, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[274, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[275, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[276, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[277, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[278, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[279, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[280, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[281, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[282, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[283, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[284, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[285, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[286, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[287, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[288, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[289, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[290, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[291, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[292, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[293, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[294, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[295, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[296, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[297, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[298, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[299, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[300, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[301, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[302, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[303, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[304, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[305, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[306, "graphscope.g"]], "get_default_session() (in module graphscope)": [[307, "graphscope.get_default_session"]], "graphlearn() (in module graphscope)": [[308, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[309, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[310, "graphscope.has_default_session"]], "session (in module graphscope)": [[311, "graphscope.session"]], "set_option() (in module graphscope)": [[312, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[327, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[327, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[327, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[327, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[327, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.add_column"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[327, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.add_edges"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[327, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.add_vertices"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[327, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.consolidate_columns"]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[327, "graphscope.framework.graph.GraphDAGNode.consolidate_columns"]], "detach() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[327, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[327, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[327, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.project"]], "project() (graphscope.framework.graph.graphdagnode method)": [[327, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[327, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[327, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[327, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[327, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[327, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[328, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[328, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[328, "graphscope.interactive.query.InteractiveQuery.close"]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[328, "graphscope.interactive.query.InteractiveQuery.cypher_driver"]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[328, "graphscope.interactive.query.InteractiveQuery.cypher_url"]], "execute() (graphscope.interactive.query.interactivequery method)": [[328, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[328, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[328, "graphscope.interactive.query.InteractiveQuery.gremlin_client"]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[328, "graphscope.interactive.query.InteractiveQuery.gremlin_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[328, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[328, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[328, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[328, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[328, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[328, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[329, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[329, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[329, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[329, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[329, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[330, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[331, "module-graphscope.nx.classes.function"]], "module": [[331, "module-graphscope.nx.classes.function"], [464, "module-graphscope.nx.generators.atlas"], [464, "module-graphscope.nx.generators.classic"], [464, "module-graphscope.nx.generators.community"], [464, "module-graphscope.nx.generators.degree_seq"], [464, "module-graphscope.nx.generators.directed"], [464, "module-graphscope.nx.generators.duplication"], [464, "module-graphscope.nx.generators.ego"], [464, "module-graphscope.nx.generators.expanders"], [464, "module-graphscope.nx.generators.geometric"], [464, "module-graphscope.nx.generators.harary_graph"], [464, "module-graphscope.nx.generators.intersection"], [464, "module-graphscope.nx.generators.joint_degree_seq"], [464, "module-graphscope.nx.generators.mycielski"], [464, "module-graphscope.nx.generators.nonisomorphic_trees"], [464, "module-graphscope.nx.generators.small"], [464, "module-graphscope.nx.generators.social"], [464, "module-graphscope.nx.generators.spectral_graph_forge"], [464, "module-graphscope.nx.generators.sudoku"], [464, "module-graphscope.nx.generators.trees"], [464, "module-graphscope.nx.generators.triads"], [464, "module-networkx.generators.internet_as_graphs"], [464, "module-networkx.generators.stochastic"], [469, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[332, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[333, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[334, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[335, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[336, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[337, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[338, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[339, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[340, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[341, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[342, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[343, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[344, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[345, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[346, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[347, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[348, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[349, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[350, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[351, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[352, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[353, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[354, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[355, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[356, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[357, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[358, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[359, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[360, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[361, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[362, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[363, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[364, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[365, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[366, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[367, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[368, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[369, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[370, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[371, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[372, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[373, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[374, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[375, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[376, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[377, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[378, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[379, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[380, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[381, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[382, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[383, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[384, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[385, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[386, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[387, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[388, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[389, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[390, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[391, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[392, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[393, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[394, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[395, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[396, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[397, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[398, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[399, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[400, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[401, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[402, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[403, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[404, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[405, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[406, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[407, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[408, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[409, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[410, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[411, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[412, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[413, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[414, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[415, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[416, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[417, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[418, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[419, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[420, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[421, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[422, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[423, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[424, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[425, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[426, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[427, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[428, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[429, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[430, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[431, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[432, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[433, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[434, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[435, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[436, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[437, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[438, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[439, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[440, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[441, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[442, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[443, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[444, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[445, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[446, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[447, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[448, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[449, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[450, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[451, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[452, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[453, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[454, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[455, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[456, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[457, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[458, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[459, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[460, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[461, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[462, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[463, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[464, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[464, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[464, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[464, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[464, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[464, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[464, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[464, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[464, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[464, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[464, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[464, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[464, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[464, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[464, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[464, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[464, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[464, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[464, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[464, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[464, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[464, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[465, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[465, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[465, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[465, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[465, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[465, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[465, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[465, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[465, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[465, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[465, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[465, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[465, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[465, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[465, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[465, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[465, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[465, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[465, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[465, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[467, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[467, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[468, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[468, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[469, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[469, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[472, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[472, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[472, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[472, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[472, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[472, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[472, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[472, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[472, "graphscope.Session.engine_config"]], "g() (graphscope.session method)": [[472, "graphscope.Session.g"]], "get_config() (graphscope.session method)": [[472, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[472, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[472, "graphscope.Session.graphlearn"]], "info (graphscope.session property)": [[472, "graphscope.Session.info"]], "interactive() (graphscope.session method)": [[472, "graphscope.Session.interactive"]], "load_from() (graphscope.session method)": [[472, "graphscope.Session.load_from"]], "restore_from_pvc() (graphscope.session method)": [[472, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[472, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[472, "graphscope.Session.store_to_pvc"]]}})