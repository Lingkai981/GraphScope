Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_submit_pr", "development/how_to_test", "flex/interactive/configuration", "flex/interactive/custom_graph_data", "flex/interactive/data_import", "flex/interactive/data_model", "flex/interactive/dev_guide", "flex/interactive/development/admin_service", "flex/interactive/development/cpp_procedure", "flex/interactive/development/cypher_procedure", "flex/interactive/getting_started", "flex/interactive/glossary", "flex/interactive/installation", "flex/interactive/overview", "flex/interactive/stored_procedures", "flex/interactive/tools/admin_tool", "flex/interactive/tools/cypher_shell", "flex/interactive_intro", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/llm_assistant", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/optimizer", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "learning_engine/tutorial_node_classification_pyg_local", "loading_graphs", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "flex/interactive/configuration.md", "flex/interactive/custom_graph_data.md", "flex/interactive/data_import.md", "flex/interactive/data_model.md", "flex/interactive/dev_guide.md", "flex/interactive/development/admin_service.md", "flex/interactive/development/cpp_procedure.md", "flex/interactive/development/cypher_procedure.md", "flex/interactive/getting_started.md", "flex/interactive/glossary.md", "flex/interactive/installation.md", "flex/interactive/overview.md", "flex/interactive/stored_procedures.md", "flex/interactive/tools/admin_tool.md", "flex/interactive/tools/cypher_shell.md", "flex/interactive_intro.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/llm_assistant.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/optimizer.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "learning_engine/tutorial_node_classification_pyg_local.md", "loading_graphs.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetowrkX APIs", "Tutorial: Graph Operations with NetowrkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of GAE", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to Submit Pull-requests", "How to Test", "Engine Configuration", "Using Custom Graph", "Data Import Configuration", "Data Model", "GraphScope Interactive Development guide", "GraphScope Interactive Admin Service Documentation", "Create c++ Stored Procedures on GraphScope Interactive", "Turning Cypher Queries into Stored Procedures with GraphScope Interactive", "Getting Started", "Glossary", "Installation", "Overview", "Stored Procedures", "The Administrative tool", "Cypher Shell", "GraphScope Interactive", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GIE for Cypher", "Using LLM as an Assistant in GIE", "Cypher Support", "Neo4j Ecosystem", "A Generic Graph Optimizer for GIE", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 46, 49, 53, 55, 56, 58, 64, 66, 67, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 111, 129, 130, 131, 134, 142, 144, 145, 152, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 179, 180, 184, 185, 186, 189, 190, 192, 194, 195, 200, 203, 208, 209, 210, 211, 212, 213, 216, 219, 222, 225, 227, 228, 229, 231, 232, 234, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 295, 296, 297, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 312, 313, 316, 317, 319, 322, 323, 324, 325, 326, 327, 330, 331, 333], "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 41, 45, 46, 48, 49, 50, 53, 54, 56, 58, 64, 65, 66, 67, 68, 70, 71, 75, 76, 78, 79, 83, 85, 92, 96, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 118, 120, 121, 123, 125, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138, 139, 144, 151, 153, 159, 165, 168, 169, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 311, 314, 315, 316, 317, 326, 327, 333, 337, 338, 339, 341, 342, 343], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 34, 36, 37, 38, 40, 48, 58, 77, 79, 92, 94, 96, 97, 99, 103, 105, 108, 113, 172, 310, 315, 323, 326, 327, 333], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 34, 38, 40, 50, 52, 53, 56, 58, 61, 64, 65, 66, 69, 72, 73, 74, 77, 81, 85, 86, 89, 91, 92, 93, 94, 95, 97, 101, 105, 113, 129, 153, 158, 166, 172, 173, 174, 310, 316, 317, 319, 323, 324, 325, 326, 336, 337], "gae": [0, 3, 10, 12, 14, 15, 28, 32, 58, 63, 79, 80, 90, 93, 97, 98, 99, 105, 129, 173, 334, 335], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 41, 42, 43, 44, 49, 50, 51, 52, 53, 54, 55, 57, 58, 60, 64, 66, 68, 69, 72, 74, 75, 76, 77, 79, 80, 82, 85, 86, 87, 88, 89, 91, 92, 94, 98, 99, 101, 102, 105, 172, 173, 174, 175, 310, 312, 313, 314, 315, 316, 317, 318, 322, 323, 324, 325, 326, 327, 330, 333, 334, 336, 337, 338, 341, 343, 344], "offer": [0, 2, 9, 12, 20, 34, 42, 43, 44, 46, 48, 49, 52, 53, 63, 66, 70, 72, 76, 80, 81, 90, 92, 96, 97, 322], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 44, 52, 56, 58, 61, 65, 82, 89, 91, 92, 93, 95, 159, 166, 213, 257, 259, 310, 322, 327], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 40, 41, 43, 44, 52, 53, 58, 61, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 103, 105, 109, 112, 125, 134, 136, 158, 159, 160, 161, 162, 163, 164, 166, 168, 169, 170, 172, 173, 174, 175, 189, 214, 216, 229, 230, 231, 239, 241, 258, 259, 260, 267, 269, 270, 288, 300, 302, 304, 308, 309, 310, 312, 313, 314, 316, 317, 319, 321, 322, 323, 324, 325, 327, 330], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 41, 45, 46, 49, 52, 54, 56, 58, 76, 77, 81, 86, 87, 90, 91, 92, 94, 95, 96, 97, 98, 100, 169, 175, 310, 317, 322, 323, 326, 327, 331], "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 40, 41, 43, 44, 45, 48, 49, 52, 55, 58, 63, 65, 69, 73, 75, 77, 80, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 158, 160, 161, 162, 163, 164, 165, 167, 170, 173, 310, 316, 317, 319, 322, 323, 326, 337, 341], "analyz": [0, 7, 13, 19, 27, 76, 90, 91, 93, 94, 96, 164, 322], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 45, 46, 49, 50, 51, 52, 53, 54, 56, 58, 63, 65, 66, 69, 71, 72, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 108, 110, 116, 117, 122, 127, 128, 132, 140, 141, 158, 160, 161, 162, 163, 164, 168, 172, 182, 188, 204, 205, 220, 237, 253, 272, 302, 310, 312, 313, 316, 317, 319, 322, 324, 325, 327, 333, 334, 336, 337, 342], "least": [0, 6, 37, 77, 175, 209, 231], "effort": [0, 34, 52, 98, 322], "cover": [0, 6, 15, 40, 84], "wide": [0, 11, 12, 24, 67, 79, 80, 84, 90, 91, 93, 94, 95, 97, 162, 321, 327], "rang": [0, 13, 18, 43, 44, 73, 75, 77, 80, 83, 84, 86, 87, 88, 90, 91, 94, 97, 100, 102, 103, 116, 117, 127, 128, 132, 140, 141, 158, 163, 167, 215, 217, 219, 222, 225, 237, 243, 257, 258, 259, 260, 288, 310, 315, 322, 333, 336, 337, 341, 342], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 46, 50, 52, 58, 64, 65, 68, 76, 78, 80, 81, 92, 93, 94, 95, 98, 100, 101, 103, 113, 162, 241, 265, 321, 331], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 80, 90, 91, 92, 93, 96, 100, 101, 105, 160, 168, 261, 302, 307, 311, 321, 330], "detect": [0, 6, 8, 9, 80, 90, 91, 93, 94, 96, 97, 101, 229, 233, 234, 235], "etc": [0, 6, 7, 15, 29, 61, 65, 73, 81, 84, 89, 91, 92, 95, 98, 102, 158, 161, 162, 163, 166, 177, 189, 198, 203, 204, 310, 312, 323], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 49, 50, 51, 52, 53, 55, 58, 61, 64, 65, 66, 69, 70, 72, 73, 75, 76, 77, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 105, 108, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 175, 184, 185, 186, 199, 200, 205, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 225, 228, 229, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 244, 245, 249, 253, 255, 256, 257, 258, 259, 260, 261, 265, 267, 269, 271, 272, 275, 293, 302, 303, 304, 305, 306, 310, 313, 316, 317, 319, 321, 322, 323, 324, 326, 330, 331, 343], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 49, 61, 65, 68, 70, 71, 73, 75, 78, 80, 81, 84, 88, 89, 90, 94, 97, 100, 101, 105, 158, 160, 162, 163, 164, 166, 169, 170, 172, 173, 175, 251, 252, 256, 257, 259, 261, 262, 263, 304, 305, 313, 333], "pie": [0, 1, 3, 8, 12, 34, 77, 79, 80, 93, 105, 108, 315, 327, 337, 339], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 48, 52, 53, 79, 80, 84, 90, 92, 93, 95, 97, 98, 105, 158, 163, 164, 322, 323, 327], "model": [0, 1, 3, 8, 9, 18, 42, 56, 61, 65, 71, 72, 73, 77, 79, 80, 83, 84, 85, 89, 90, 91, 93, 94, 97, 105, 160, 162, 164, 165, 229, 233, 237, 239, 241, 243, 249, 251, 252, 257, 258, 259, 260, 261, 265, 266, 300, 307, 317, 321, 327, 337], "highli": [0, 4, 12, 34, 71, 77, 80, 92, 93, 321], "optim": [0, 9, 12, 14, 34, 41, 43, 44, 48, 53, 63, 65, 76, 77, 78, 80, 81, 83, 86, 87, 90, 91, 92, 93, 94, 95, 96, 98, 101, 158, 170, 172, 322, 324, 337], "best": [0, 16, 90, 92, 94, 97, 98, 101, 310, 333], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 40, 41, 43, 63, 65, 70, 72, 75, 77, 78, 79, 81, 90, 92, 93, 95, 96, 97, 102, 160, 164, 166, 172, 267, 272, 302, 314, 316, 319, 323, 325, 327], "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 58, 61, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 84, 86, 89, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 105, 109, 111, 135, 136, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 184, 185, 188, 192, 213, 216, 229, 230, 231, 238, 239, 241, 257, 258, 259, 260, 267, 271, 272, 279, 281, 283, 288, 291, 296, 297, 302, 304, 310, 313, 314, 316, 317, 319, 321, 322, 323, 324, 325, 327, 330, 331, 333], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 40, 41, 43, 44, 49, 50, 52, 53, 54, 55, 56, 58, 61, 65, 66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 110, 111, 135, 136, 145, 150, 158, 159, 160, 161, 162, 164, 166, 169, 171, 172, 173, 174, 175, 194, 195, 204, 216, 219, 223, 229, 230, 231, 237, 239, 243, 244, 246, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 267, 271, 275, 288, 293, 302, 304, 307, 308, 310, 312, 313, 315, 317, 321, 322, 325, 326, 327, 330, 331, 333, 337, 343], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 40, 53, 58, 61, 65, 70, 75, 77, 86, 90, 91, 93, 95, 97, 98, 99, 110, 158, 161, 170, 215, 302, 316, 322, 323, 333], "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 73, 76, 81, 88, 89, 91, 92, 93, 94, 97, 101, 103, 158, 161, 162, 164, 172, 175, 232, 241, 242, 249, 250, 253, 267, 268, 304, 308, 310, 322, 323, 324, 326, 337, 341], "box": [0, 92, 303], "manner": [0, 2, 17, 18, 32, 36, 52, 91, 93, 94], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 40, 41, 42, 44, 46, 51, 53, 58, 64, 65, 66, 69, 70, 72, 73, 75, 76, 77, 80, 82, 83, 86, 87, 89, 95, 98, 101, 159, 160, 164, 167, 169, 170, 172, 175, 229, 241, 256, 257, 259, 268, 288, 310, 313, 321, 322, 323, 337], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 98, 100, 101, 102, 103, 104, 105, 106, 109, 111, 135, 145, 147, 151, 152, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 179, 180, 181, 183, 185, 187, 189, 190, 191, 192, 193, 194, 195, 204, 205, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 330, 331, 333, 336, 337, 341, 342, 343], "full": [0, 4, 12, 16, 17, 18, 22, 34, 43, 73, 80, 81, 84, 90, 95, 97, 101, 158, 161, 162, 164, 220, 323, 327, 333, 342], "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 42, 43, 44, 46, 53, 64, 70, 73, 75, 77, 80, 86, 89, 92, 95, 99, 101, 103, 122, 123, 130, 131, 145, 159, 162, 164, 172, 175, 184, 186, 189, 196, 198, 204, 205, 208, 209, 213, 215, 216, 234, 237, 239, 241, 242, 243, 244, 245, 257, 261, 264, 267, 268, 273, 275, 288, 304, 310, 311, 313, 317, 323, 326, 331, 338, 341], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 41, 42, 44, 49, 52, 55, 58, 61, 64, 65, 67, 71, 73, 77, 78, 79, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 105, 111, 158, 159, 160, 162, 163, 164, 166, 167, 169, 172, 173, 175, 310, 313, 316, 317, 319, 321, 323, 324, 326, 327, 330, 336], "bf": [0, 15, 17, 34, 98, 101, 333], "df": [0, 34], "hit": [0, 34, 36, 101, 102, 175, 311, 316, 333], "lpa": [0, 7, 34, 91, 101, 333], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 57, 91, 98, 101, 102, 109, 316, 317, 325, 326, 333], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 54, 58, 61, 64, 65, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 119, 132, 135, 150, 158, 159, 160, 162, 163, 164, 165, 166, 168, 170, 172, 175, 192, 206, 207, 208, 209, 210, 211, 216, 219, 221, 222, 229, 230, 231, 233, 234, 237, 238, 239, 241, 243, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 269, 271, 288, 290, 293, 298, 302, 304, 305, 307, 308, 309, 310, 312, 314, 316, 317, 318, 319, 321, 322, 323, 327, 330, 331, 333], "find": [0, 4, 8, 9, 22, 31, 32, 36, 37, 40, 42, 51, 58, 61, 63, 66, 73, 75, 77, 86, 89, 91, 93, 94, 98, 100, 109, 157, 175, 180, 199, 200, 229, 317, 322, 323], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 31, 37, 38, 58, 60, 61, 65, 77, 93, 95], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 41, 43, 48, 49, 50, 51, 52, 53, 55, 58, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 109, 129, 130, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 189, 208, 210, 215, 217, 219, 222, 229, 232, 236, 237, 238, 239, 241, 244, 249, 250, 252, 253, 257, 258, 259, 260, 261, 262, 269, 276, 285, 297, 302, 304, 305, 309, 310, 312, 313, 316, 317, 322, 324, 330, 333, 337, 338, 341, 343], "given": [0, 7, 9, 13, 14, 20, 34, 43, 52, 53, 54, 56, 61, 64, 65, 66, 75, 76, 77, 84, 89, 91, 94, 95, 97, 101, 162, 164, 167, 170, 172, 174, 209, 216, 227, 239, 240, 241, 242, 243, 244, 245, 253, 261, 262, 263, 267, 268, 269, 270, 274, 302, 305, 306, 309, 310, 316, 317, 321, 322, 325, 326], "weight": [0, 7, 19, 20, 33, 43, 46, 57, 75, 77, 84, 91, 93, 98, 101, 130, 158, 160, 161, 162, 163, 164, 167, 170, 172, 175, 177, 178, 179, 183, 194, 195, 237, 249, 253, 257, 260, 300, 308, 309, 310, 312, 317, 342], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 52, 58, 65, 67, 70, 77, 83, 84, 90, 94, 158, 160, 166, 167, 168, 239, 321, 322], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 52, 53, 61, 65, 66, 67, 69, 72, 75, 76, 77, 80, 84, 90, 91, 93, 94, 95, 100, 101, 102, 110, 116, 117, 126, 132, 134, 136, 137, 140, 141, 158, 161, 162, 164, 166, 167, 169, 172, 173, 175, 239, 241, 244, 263, 310, 323, 325, 333, 337], "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 50, 52, 65, 66, 75, 77, 80, 81, 84, 91, 92, 93, 94, 95, 96, 97, 100, 101, 103, 162, 163, 166, 168, 175, 256, 259, 260, 264, 269, 278, 301, 302, 314, 317, 323, 324, 333], "minimum": [0, 6, 58, 66, 70, 75, 77, 101, 229, 317], "distanc": [0, 7, 15, 17, 18, 91, 101, 175, 210, 249, 253, 257, 258, 259, 260, 261, 279, 291, 333], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 41, 42, 53, 54, 64, 65, 67, 73, 75, 76, 77, 89, 90, 91, 93, 94, 97, 99, 100, 102, 111, 118, 162, 172, 173, 174, 175, 186, 190, 205, 229, 234, 236, 239, 241, 257, 259, 261, 310, 313, 316, 322, 330], "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 42, 44, 57, 64, 70, 72, 73, 75, 79, 80, 81, 84, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 103, 108, 129, 159, 160, 161, 162, 163, 164, 167, 170, 172, 174, 175, 249, 254, 271, 272, 288, 313, 315, 319, 321, 323, 324, 327, 333, 338], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 42, 43, 51, 53, 58, 61, 65, 73, 75, 77, 80, 81, 84, 86, 90, 92, 93, 94, 95, 96, 97, 101, 103, 158, 160, 162, 164, 168, 171, 172, 173, 175, 179, 210, 212, 216, 219, 229, 238, 244, 250, 259, 260, 302, 310, 312, 313, 316, 317, 321, 322, 323, 326], "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 43, 44, 52, 57, 64, 65, 67, 70, 72, 73, 75, 81, 84, 90, 91, 93, 94, 95, 100, 101, 102, 103, 131, 159, 160, 161, 162, 163, 164, 167, 170, 172, 233, 244, 254, 256, 271, 272, 283, 285, 296, 297, 303, 316, 317, 319, 321, 322, 323, 324, 333, 337, 338], "all_pairs_shortest_path_length": [0, 34], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 30, 33, 34, 37, 40, 42, 44, 49, 50, 52, 53, 55, 58, 64, 66, 67, 70, 73, 75, 77, 81, 82, 84, 93, 94, 95, 97, 101, 120, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 175, 208, 209, 220, 229, 230, 231, 232, 233, 234, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 309, 310, 323, 327, 341], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 37, 42, 64, 65, 73, 76, 77, 81, 84, 89, 90, 93, 97, 101, 158, 159, 160, 161, 164, 167, 172, 302, 310], "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 58, 61, 75, 79, 84, 90, 92, 93, 97, 98, 101, 103, 161, 175, 197, 198, 204, 256, 310, 319, 327], "dissimilar": 0, "measur": [0, 6, 20, 65, 93, 95, 101, 159, 175, 253, 254, 287], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 44, 49, 55, 65, 70, 75, 77, 81, 89, 93, 94, 98, 159, 160, 164, 165, 168, 170, 172, 174, 175, 203, 204, 225, 233, 234, 239, 241, 267, 268, 270, 303, 304, 310, 317, 321, 322, 323, 324, 325], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 42, 43, 44, 46, 56, 57, 66, 69, 72, 78, 91, 93, 94, 95, 100, 101, 102, 103, 120, 134, 148, 149, 150, 161, 164, 172, 173, 257, 272, 302, 307, 310, 313, 316, 317, 319, 321, 323, 324, 331, 337, 338, 341], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 40, 42, 43, 44, 46, 48, 64, 65, 72, 73, 75, 76, 77, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 149, 158, 159, 160, 161, 162, 163, 164, 168, 169, 170, 172, 175, 184, 186, 204, 205, 210, 214, 216, 221, 227, 229, 231, 232, 233, 235, 236, 238, 239, 241, 242, 244, 249, 252, 254, 257, 258, 259, 260, 261, 264, 265, 267, 269, 270, 275, 278, 290, 295, 300, 304, 306, 307, 308, 310, 316, 317, 319, 321, 322, 323, 324, 327, 331], "attribute_assort": [0, 34], "nearest": [0, 101], "neighbor": [0, 6, 9, 13, 14, 17, 18, 57, 72, 75, 77, 81, 84, 93, 94, 95, 101, 103, 158, 159, 161, 162, 164, 166, 167, 168, 170, 171, 175, 180, 181, 200, 252, 253, 267, 270, 303, 310, 319, 322, 333], "return": [0, 6, 9, 15, 18, 20, 46, 48, 49, 57, 65, 67, 68, 69, 70, 72, 75, 76, 77, 84, 86, 88, 91, 94, 101, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 151, 152, 153, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 316, 317, 319, 322, 333, 342], "success": [0, 13, 22, 46, 105, 160, 244, 275], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 41, 42, 43, 46, 58, 61, 64, 66, 67, 71, 75, 77, 81, 83, 84, 86, 87, 88, 89, 91, 98, 100, 101, 102, 103, 117, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 175, 177, 178, 179, 181, 185, 186, 189, 190, 194, 204, 208, 209, 211, 212, 213, 214, 216, 219, 221, 222, 224, 225, 226, 228, 229, 232, 233, 234, 235, 237, 238, 239, 241, 242, 245, 248, 250, 257, 258, 259, 260, 261, 267, 268, 272, 275, 288, 293, 302, 304, 305, 310, 312, 313, 317, 319, 322, 323, 324, 325, 331, 333, 335, 336, 337, 338, 340, 341, 342, 343], "1": [0, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 41, 43, 46, 56, 61, 64, 65, 66, 67, 71, 73, 75, 77, 81, 83, 84, 86, 87, 88, 89, 91, 94, 95, 98, 101, 102, 158, 161, 163, 164, 165, 167, 172, 173, 174, 175, 177, 178, 179, 181, 185, 186, 189, 194, 195, 198, 203, 204, 208, 210, 211, 212, 213, 214, 216, 220, 221, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 310, 312, 313, 317, 322, 323, 324, 325, 331, 333, 337, 338, 340, 341, 342, 343], "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 41, 43, 46, 56, 64, 65, 66, 67, 71, 75, 77, 81, 83, 84, 86, 87, 88, 89, 91, 94, 95, 98, 101, 102, 158, 161, 162, 163, 164, 165, 167, 175, 177, 178, 179, 181, 189, 190, 194, 195, 198, 203, 204, 211, 212, 213, 216, 221, 222, 227, 229, 231, 233, 235, 236, 237, 239, 240, 241, 243, 244, 245, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 277, 279, 281, 282, 283, 287, 288, 290, 292, 293, 295, 302, 303, 304, 305, 310, 312, 313, 317, 322, 324, 325, 333, 334, 335, 337, 338, 341, 342, 343], "average_degree_connect": [0, 101, 333], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 41, 48, 50, 52, 53, 58, 65, 70, 75, 76, 77, 84, 88, 91, 95, 100, 101, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 150, 157, 159, 160, 162, 164, 167, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 190, 192, 193, 194, 195, 199, 200, 204, 205, 208, 210, 212, 213, 215, 216, 217, 219, 220, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 317, 322, 323], "str": [0, 20, 86, 87, 89, 101, 102, 103, 109, 110, 116, 117, 118, 120, 127, 128, 129, 132, 134, 135, 136, 137, 140, 141, 170, 172, 173, 188, 190, 304, 310, 312, 316, 317, 323, 338, 343], "target": [0, 6, 17, 22, 24, 66, 81, 82, 90, 91, 95, 97, 101, 103, 164, 166, 172, 175, 246, 248, 267, 270, 302, 323, 333], "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 41, 43, 45, 52, 61, 65, 66, 69, 73, 75, 77, 80, 84, 90, 91, 92, 93, 94, 95, 98, 100, 101, 102, 124, 130, 158, 160, 162, 164, 165, 166, 172, 175, 246, 285, 300, 310, 322, 323, 327, 333, 342], "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 49, 57, 61, 67, 70, 73, 76, 77, 84, 91, 94, 95, 100, 101, 102, 103, 158, 161, 162, 163, 164, 167, 170, 172, 173, 174, 175, 181, 204, 229, 232, 237, 239, 243, 249, 252, 257, 260, 267, 270, 272, 304, 310, 316, 317, 322, 323, 333, 337, 341, 342], "sum": [0, 20, 70, 73, 93, 101, 103, 175, 229, 234, 237, 239, 240, 241, 250, 257, 260, 261, 268, 269, 308, 310, 341], "fraction": [0, 101, 175, 229], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 41, 52, 53, 65, 67, 69, 75, 77, 84, 89, 94, 95, 101, 103, 108, 164, 168, 170, 219, 257, 259, 302, 310, 314, 323, 333, 338, 343], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 42, 49, 63, 64, 65, 67, 68, 69, 71, 72, 75, 76, 77, 78, 81, 84, 89, 91, 93, 94, 95, 97, 102, 105, 159, 160, 162, 163, 164, 169, 170, 172, 175, 205, 219, 236, 275, 310, 322, 323], "betweenness_centr": [0, 34, 175], "normal": [0, 6, 27, 58, 77, 101, 164, 172, 175, 232, 322], "endpoint": [0, 9, 10, 27, 28, 29, 46, 64, 66, 68, 71, 75, 76, 86, 89, 91, 100, 164, 173, 175, 317, 319, 323, 333, 341, 343], "bool": [0, 6, 14, 15, 20, 57, 70, 89, 100, 101, 103, 147, 155, 172, 175, 182, 192, 194, 195, 204, 233, 243, 249, 253, 269, 310, 312, 317, 322, 343], "whether": [0, 37, 43, 53, 64, 65, 75, 77, 89, 90, 94, 100, 101, 159, 160, 164, 172, 232, 234, 237, 257, 268, 269, 310, 322, 323, 324], "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 43, 48, 49, 64, 65, 67, 69, 73, 75, 77, 89, 90, 91, 95, 100, 101, 109, 112, 125, 134, 168, 169, 172, 174, 175, 205, 229, 257, 258, 259, 260, 310, 312, 317, 319, 322, 323, 324, 325], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 42, 43, 44, 46, 52, 53, 54, 61, 63, 65, 66, 70, 71, 72, 75, 77, 80, 81, 82, 83, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 160, 161, 164, 166, 172, 175, 190, 229, 237, 243, 253, 302, 309, 310, 321, 322, 323, 330, 331], "count": [0, 6, 33, 46, 48, 65, 67, 70, 72, 73, 76, 77, 84, 91, 93, 100, 101, 162, 163, 167, 168, 171, 175, 185, 243, 310, 323, 337, 341], "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 40, 41, 42, 43, 44, 45, 46, 49, 52, 53, 54, 56, 58, 61, 64, 65, 66, 67, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 105, 109, 112, 113, 114, 115, 116, 117, 119, 120, 122, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 140, 141, 142, 144, 145, 153, 158, 159, 160, 162, 163, 164, 166, 167, 169, 170, 172, 174, 175, 186, 187, 192, 197, 198, 204, 205, 207, 208, 209, 211, 214, 215, 216, 217, 219, 220, 222, 224, 225, 228, 230, 231, 239, 241, 242, 243, 245, 246, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 266, 267, 268, 269, 270, 271, 275, 277, 283, 288, 292, 295, 296, 300, 302, 303, 304, 305, 307, 308, 310, 313, 314, 316, 317, 319, 321, 322, 323, 324, 325, 326, 327, 330], "travers": [0, 6, 13, 15, 17, 52, 65, 70, 73, 76, 81, 90, 91, 92, 93, 158, 161, 164, 166, 170, 173, 304, 310, 319, 322, 323, 324, 333, 341], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 37, 40, 42, 43, 44, 48, 52, 58, 61, 64, 65, 67, 69, 70, 73, 75, 76, 77, 80, 81, 87, 89, 91, 92, 93, 94, 95, 96, 97, 100, 101, 105, 151, 158, 159, 160, 164, 166, 168, 172, 173, 175, 179, 234, 238, 262, 263, 267, 270, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 291, 294, 296, 297, 302, 310, 317, 321, 322, 323, 324, 330, 331], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 41, 44, 46, 52, 53, 54, 55, 56, 63, 64, 68, 69, 70, 75, 76, 84, 86, 88, 89, 94, 96, 99, 100, 102, 158, 162, 164, 173, 174, 175, 210, 235, 239, 241, 242, 245, 261, 275, 304, 312, 317, 322, 323, 327], "root": [0, 4, 27, 32, 36, 41, 58, 89, 92, 210, 212, 303, 304, 321], "explor": [0, 17, 42, 43, 51, 56, 61, 66, 75, 77, 90, 91, 94, 322], "present": [0, 2, 20, 27, 43, 54, 72, 77, 84, 85, 86, 87, 88, 90, 91, 93, 105, 175, 186, 229, 310, 321, 322], "prior": [0, 12, 34, 42, 77, 80, 90], "move": [0, 4, 6, 42, 69, 92, 164, 267, 270], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 51, 76, 77, 81, 84, 85, 89, 90, 95, 158, 159, 162, 164, 166, 168, 169, 170, 236, 304, 316, 319, 322, 323, 325], "level": [0, 6, 12, 38, 41, 61, 65, 90, 92, 95, 101, 166, 220, 267, 268, 307, 322, 323], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 57, 73, 86, 89, 100, 101, 102, 103, 135, 159, 160, 161, 162, 163, 164, 167, 170, 171, 172, 174, 175, 203, 208, 210, 212, 215, 217, 219, 220, 222, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 245, 246, 247, 248, 249, 251, 252, 255, 256, 257, 258, 259, 260, 261, 264, 265, 266, 271, 272, 273, 274, 305, 310, 312, 317, 319, 323, 333, 341, 343], "evalu": [0, 6, 14, 15, 16, 18, 37, 80, 91, 92, 95, 98, 100, 101, 102, 113, 136, 145, 147, 151, 153, 172, 317, 327, 341], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 44, 45, 50, 52, 54, 58, 61, 64, 65, 69, 73, 77, 80, 83, 85, 86, 90, 91, 92, 93, 95, 97, 98, 100, 101, 103, 105, 158, 159, 160, 162, 165, 166, 167, 170, 172, 173, 175, 210, 229, 254, 256, 257, 261, 280, 285, 290, 302, 304, 308, 310, 313, 316, 317, 319, 321, 322, 323, 326, 327, 333], "known": [0, 6, 8, 9, 24, 32, 64, 67, 69, 70, 77, 93, 94, 101, 192, 210, 213, 262, 263, 280, 304, 325], "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 49, 58, 64, 67, 69, 73, 76, 77, 80, 89, 96, 101, 102, 105, 151, 153, 159, 160, 162, 167, 170, 172, 208, 218, 223, 229, 232, 233, 234, 235, 237, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 264, 265, 266, 267, 270, 275, 302, 305, 307, 310, 312, 316, 317, 321, 322, 323, 326], "max_round": [0, 101, 333], "10": [0, 13, 15, 16, 17, 20, 27, 31, 44, 58, 60, 61, 65, 67, 68, 73, 75, 77, 83, 84, 86, 87, 88, 91, 98, 101, 159, 160, 161, 163, 164, 170, 172, 175, 177, 178, 179, 213, 219, 229, 232, 234, 243, 244, 245, 246, 248, 252, 257, 261, 265, 281, 287, 292, 305, 310, 317, 323, 331, 333, 337, 341], "maximum": [0, 64, 70, 75, 77, 93, 101, 161, 175, 229, 245, 260, 261, 262, 263, 268, 309, 323], "round": [0, 9, 14, 17, 24, 101, 103, 227, 237], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 40, 41, 43, 48, 49, 53, 54, 55, 58, 61, 64, 66, 67, 73, 75, 77, 83, 86, 89, 98, 100, 101, 102, 103, 120, 129, 151, 152, 155, 159, 160, 164, 171, 172, 174, 175, 177, 178, 179, 182, 204, 206, 207, 210, 212, 213, 215, 217, 219, 220, 222, 224, 225, 228, 229, 232, 233, 234, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 302, 303, 305, 307, 308, 310, 312, 313, 317, 319, 323, 330, 331, 343], "origin": [0, 4, 6, 9, 12, 13, 22, 42, 65, 72, 73, 75, 81, 86, 87, 95, 100, 102, 129, 158, 160, 172, 173, 229, 251, 257, 296, 304, 308, 310, 316, 317, 323, 324], "reciproc": [0, 175], "n": [0, 19, 20, 30, 33, 38, 41, 43, 46, 48, 53, 54, 65, 67, 68, 70, 75, 77, 80, 84, 91, 95, 98, 101, 102, 162, 164, 167, 169, 175, 185, 189, 190, 192, 196, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 228, 229, 231, 232, 233, 238, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 271, 272, 275, 288, 303, 304, 305, 307, 310], "reachabl": [0, 175], "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 44, 46, 48, 58, 61, 70, 71, 83, 84, 85, 90, 91, 93, 95, 97, 99, 101, 102, 103, 123, 126, 131, 134, 135, 153, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 192, 196, 198, 200, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 322, 324, 333, 336, 337, 342], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 34, 80, 90, 92, 93, 95, 97, 162, 168, 319, 322], "improv": [0, 6, 9, 17, 19, 23, 73, 92, 95, 96, 97, 326], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 40, 44, 46, 48, 49, 52, 53, 58, 61, 65, 66, 67, 69, 72, 73, 75, 77, 80, 81, 82, 83, 84, 89, 90, 92, 93, 94, 95, 96, 97, 100, 101, 102, 105, 158, 159, 162, 163, 164, 168, 169, 172, 175, 208, 249, 256, 257, 271, 272, 304, 310, 312, 317, 321, 322, 323, 326, 327, 330], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 52, 58, 64, 65, 70, 75, 77, 79, 84, 89, 90, 93, 94, 96, 97, 101, 160, 162, 164, 171, 175, 185, 219, 227, 229, 231, 236, 238, 249, 251, 260, 317, 322, 323, 326, 327], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 40, 44, 46, 48, 52, 58, 61, 63, 64, 65, 70, 73, 75, 77, 81, 84, 89, 91, 94, 95, 97, 100, 101, 103, 109, 110, 150, 158, 159, 160, 161, 162, 164, 168, 172, 175, 184, 208, 209, 212, 213, 216, 225, 226, 229, 238, 239, 244, 246, 247, 248, 249, 250, 252, 267, 270, 278, 281, 285, 288, 294, 295, 296, 302, 304, 306, 310, 316, 317, 319, 321, 322, 323, 326, 337, 341], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 40, 44, 58, 67, 72, 90, 92, 93, 94, 100, 101, 175, 243, 257, 316, 322, 323], "ratio": [0, 13, 77, 302], "actor": [0, 53, 77, 90, 287], "group": [0, 2, 52, 58, 65, 89, 91, 93, 94, 100, 166, 172, 233, 234, 235, 237, 254, 282, 300, 321, 323, 341, 343], "who": [0, 11, 29, 52, 77, 90, 94, 165, 170, 323], "closeness_centr": [0, 34], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 43, 44, 49, 53, 54, 58, 60, 61, 63, 64, 66, 69, 72, 74, 75, 76, 77, 78, 79, 85, 86, 87, 88, 90, 91, 93, 94, 95, 97, 99, 102, 105, 113, 159, 160, 164, 166, 317, 318, 322, 324, 326, 327, 337], "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 41, 42, 43, 52, 53, 54, 61, 69, 72, 73, 75, 77, 81, 83, 84, 87, 89, 90, 91, 93, 94, 95, 101, 102, 103, 150, 158, 160, 164, 168, 170, 172, 175, 217, 220, 227, 229, 249, 254, 267, 270, 278, 297, 307, 317, 322, 323, 325], "being": [0, 73, 84, 94, 172, 209, 239, 319, 322, 323, 324], "cliqu": [0, 6, 77, 90, 93, 230, 231, 235, 236, 238, 252], "complet": [0, 14, 31, 33, 34, 65, 69, 73, 77, 89, 92, 158, 160, 164, 185, 210, 211, 213, 215, 216, 222, 227, 236, 267, 270, 294, 310, 323], "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 44, 51, 58, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 77, 79, 80, 82, 84, 89, 90, 91, 93, 94, 95, 97, 101, 102, 105, 109, 158, 159, 160, 161, 162, 164, 165, 167, 168, 170, 172, 175, 185, 189, 192, 204, 210, 215, 220, 229, 239, 240, 241, 243, 249, 252, 267, 268, 270, 286, 290, 304, 310, 316, 317, 321, 322, 323, 325, 327, 331, 337], "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 42, 44, 46, 52, 57, 64, 65, 69, 70, 73, 75, 81, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 97, 100, 101, 102, 103, 114, 115, 118, 123, 130, 134, 135, 153, 158, 159, 160, 161, 162, 163, 164, 166, 167, 170, 171, 172, 173, 174, 175, 177, 178, 179, 182, 185, 186, 188, 189, 190, 192, 194, 195, 198, 199, 201, 203, 204, 205, 209, 211, 212, 213, 214, 215, 216, 219, 221, 222, 223, 226, 227, 229, 231, 234, 235, 237, 239, 240, 241, 243, 245, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 294, 295, 296, 297, 300, 304, 307, 308, 309, 310, 311, 313, 316, 317, 319, 321, 323, 324, 325, 333, 337, 338, 342], "u": [0, 6, 14, 16, 18, 20, 37, 57, 58, 73, 77, 89, 91, 101, 164, 168, 170, 172, 175, 181, 204, 216, 229, 243, 249, 252, 257, 260, 272, 310, 322, 333, 343], "equal": [0, 10, 58, 70, 75, 77, 83, 87, 89, 91, 175, 227, 229, 260, 265, 303, 337], "degree_assortativity_coeffici": [0, 101, 333], "hold": [0, 10, 20, 75, 100, 101, 102, 103, 129, 137, 160, 172, 175, 310, 316], "numer": [0, 20, 90, 92, 93, 101, 102, 175, 310, 316, 322], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 41, 43, 48, 57, 58, 64, 65, 67, 70, 81, 86, 89, 93, 95, 100, 101, 102, 103, 136, 145, 157, 158, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 174, 175, 184, 204, 219, 229, 257, 258, 259, 260, 267, 269, 270, 302, 303, 304, 310, 312, 313, 316, 317, 319, 322, 323, 324, 333, 341, 342, 343], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 41, 42, 43, 49, 51, 53, 54, 55, 58, 64, 66, 67, 69, 75, 77, 83, 89, 91, 97, 101, 102, 105, 157, 159, 160, 164, 165, 168, 169, 171, 172, 173, 174, 175, 180, 181, 183, 190, 194, 195, 204, 205, 210, 211, 212, 213, 215, 216, 217, 219, 220, 222, 224, 225, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 270, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 302, 305, 306, 308, 310, 312, 313, 316, 317, 319, 322, 323, 324, 330, 331], "fals": [0, 13, 15, 17, 18, 19, 20, 43, 64, 69, 88, 89, 100, 101, 103, 151, 158, 159, 160, 164, 170, 172, 174, 175, 188, 192, 194, 195, 204, 206, 207, 232, 233, 234, 237, 243, 253, 268, 310, 313, 317, 323, 333, 342], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 40, 41, 42, 44, 52, 58, 61, 65, 66, 67, 69, 70, 72, 73, 74, 77, 81, 84, 85, 86, 89, 90, 91, 92, 94, 95, 96, 97, 100, 101, 102, 103, 105, 150, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 173, 175, 192, 194, 195, 198, 203, 204, 210, 225, 227, 229, 240, 244, 249, 257, 258, 259, 260, 261, 267, 270, 276, 277, 281, 282, 286, 292, 294, 297, 300, 302, 304, 308, 310, 314, 316, 317, 325, 327, 337, 338, 341], "adjac": [0, 10, 16, 20, 24, 75, 77, 95, 101, 161, 166, 175, 198, 231, 255, 273, 288, 302, 303, 310, 311, 322], "direct": [0, 9, 10, 15, 42, 44, 64, 77, 81, 84, 87, 89, 91, 92, 95, 100, 101, 121, 151, 158, 160, 164, 167, 170, 172, 175, 180, 185, 191, 206, 217, 230, 231, 232, 233, 234, 237, 241, 242, 244, 253, 254, 255, 256, 267, 268, 277, 304, 308, 310, 311, 313, 317, 321, 322, 324, 338, 342, 343], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 40, 42, 77, 89, 90, 92, 97, 98, 105, 159, 162, 163, 164, 167, 168, 169, 170, 175, 204, 209, 216, 292, 297, 306, 310, 323, 327], "separ": [0, 6, 17, 30, 36, 53, 64, 66, 77, 90, 97, 159, 160, 257, 312, 322, 323], "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 42, 43, 44, 52, 53, 58, 64, 69, 73, 75, 77, 80, 83, 86, 89, 90, 91, 92, 94, 100, 101, 105, 120, 158, 159, 162, 164, 167, 169, 170, 175, 212, 234, 236, 259, 316, 317, 321, 322, 323, 337], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 40, 41, 42, 43, 44, 46, 49, 53, 54, 58, 64, 65, 66, 69, 70, 72, 73, 75, 77, 88, 89, 90, 92, 94, 100, 101, 102, 103, 109, 145, 159, 161, 164, 166, 168, 170, 172, 173, 175, 194, 195, 209, 276, 283, 288, 300, 306, 310, 312, 313, 316, 317, 321, 322, 323, 331, 333, 334, 336, 341, 343], "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 44, 49, 53, 64, 67, 72, 73, 81, 87, 89, 90, 91, 92, 93, 94, 95, 101, 103, 158, 159, 160, 172, 173, 174, 189, 198, 203, 204, 209, 229, 253, 256, 261, 267, 270, 317, 319, 321, 322, 323, 325, 326, 340, 341], "degree_centr": [0, 34, 61, 101, 175, 311, 333], "centrality_typ": [0, 101], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 41, 49, 64, 65, 72, 75, 79, 81, 90, 91, 93, 97, 252, 259, 275, 302, 319, 322, 323, 325, 327], "far": [0, 90, 159], "possibl": [0, 4, 6, 15, 43, 52, 56, 58, 65, 81, 94, 95, 101, 160, 166, 167, 175, 243, 251, 252, 267, 268, 269, 270, 302, 306, 322], "along": [0, 6, 10, 20, 24, 31, 54, 73, 75, 81, 103, 160, 164, 170, 304, 310, 324], "branch": [0, 70, 77, 164, 210, 220, 341], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 41, 42, 49, 54, 69, 77, 84, 86, 100, 101, 105, 158, 164, 171, 210, 212, 213, 215, 217, 220, 222, 224, 225, 228, 239, 241, 242, 244, 246, 247, 248, 254, 255, 256, 262, 263, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 305, 312, 317, 319, 322, 323, 325], "backtrack": 0, "influenc": [0, 27, 175], "relationship": [0, 44, 52, 58, 65, 70, 71, 77, 81, 84, 90, 93, 94, 95, 159, 160, 170, 322, 323], "high": [0, 6, 9, 52, 56, 61, 65, 72, 77, 89, 92, 93, 95, 96, 97, 98, 166, 244, 275, 317, 319, 323], "score": [0, 77, 95], "contribut": [0, 4, 63, 322], "low": [0, 6, 7, 13, 32, 65, 83, 90, 91, 95, 96, 97, 302, 323], "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 41, 43, 44, 50, 56, 61, 66, 68, 70, 76, 77, 81, 83, 89, 90, 92, 93, 94, 95, 98, 100, 101, 102, 103, 110, 111, 113, 114, 115, 118, 121, 123, 130, 131, 135, 136, 145, 162, 163, 164, 167, 169, 172, 173, 174, 175, 177, 178, 179, 181, 182, 184, 186, 188, 189, 190, 192, 193, 194, 195, 198, 203, 204, 205, 208, 209, 210, 212, 213, 215, 219, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 245, 249, 251, 252, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 270, 272, 276, 278, 287, 298, 302, 303, 304, 305, 307, 308, 310, 312, 317, 321, 322, 323, 324, 325], "mean": [0, 2, 20, 29, 30, 36, 37, 41, 52, 64, 65, 73, 86, 100, 102, 108, 147, 160, 163, 164, 174, 175, 215, 232, 239, 249, 258, 259, 260, 310, 313, 316, 317, 319, 322, 323, 325, 330], "themselv": [0, 65, 77, 81, 304], "eigenvector_centr": [0, 34, 101, 175, 311, 333], "toler": [0, 101, 175, 229], "doubl": [0, 9, 14, 16, 17, 18, 33, 43, 57, 70, 73, 89, 98, 103, 159, 169, 280, 304, 325, 333, 341, 343], "error": [0, 2, 32, 36, 37, 38, 41, 46, 58, 63, 65, 67, 100, 101, 164, 168, 172, 175, 209, 310, 323], "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 54, 58, 64, 65, 69, 77, 84, 86, 93, 94, 101, 168, 172, 175, 268, 269, 310, 317, 322, 323, 331, 336, 337], "converg": [0, 6, 9, 14, 17, 24, 95, 98, 101, 175], "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 41, 61, 64, 66, 67, 74, 75, 77, 81, 85, 86, 91, 93, 95, 98, 100, 101, 103, 160, 161, 162, 163, 164, 167, 171, 175, 185, 190, 192, 201, 202, 203, 208, 209, 211, 213, 216, 220, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 275, 283, 288, 293, 300, 302, 303, 305, 307, 308, 309, 310, 317, 319, 322, 323, 324, 331, 337, 341], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 75, 76, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 101, 103, 158, 161, 170, 174, 175, 177, 178, 179, 180, 181, 186, 197, 198, 199, 200, 204, 205, 215, 216, 217, 219, 222, 224, 225, 228, 229, 257, 258, 259, 260, 261, 267, 270, 272, 304, 310, 333, 337, 342], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 46, 54, 56, 61, 63, 65, 67, 68, 69, 76, 77, 79, 81, 83, 84, 86, 87, 88, 89, 91, 93, 95, 101, 102, 151, 153, 158, 159, 160, 162, 165, 167, 169, 170, 171, 172, 175, 229, 257, 258, 259, 260, 310, 317, 321, 325, 327, 331, 333, 334, 335, 337, 338, 341, 342, 343], "rate": [0, 42, 52, 56, 90, 96, 101, 257, 259, 260], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 44, 52, 58, 61, 64, 65, 69, 72, 73, 77, 81, 82, 89, 91, 93, 94, 95, 97, 98, 158, 159, 160, 161, 162, 164, 166, 168, 170, 172, 175, 181, 204, 211, 212, 214, 216, 217, 221, 238, 249, 250, 257, 258, 259, 260, 261, 265, 267, 270, 271, 276, 277, 285, 303, 304, 309, 310, 321, 322, 323, 330, 337], "hub": [0, 29, 101, 102, 175, 228, 316], "author": [0, 27, 87, 91, 101, 175, 229, 317, 337], "estim": [0, 65, 72, 77, 93, 94, 170, 175], "within": [0, 13, 30, 36, 41, 43, 44, 48, 52, 53, 54, 56, 69, 70, 72, 73, 75, 76, 77, 82, 90, 91, 92, 93, 94, 95, 164, 173, 175, 229, 232, 233, 253, 259, 260, 317, 322, 331, 337, 341], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 42, 43, 44, 46, 48, 49, 51, 53, 55, 58, 61, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 105, 109, 111, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 213, 227, 229, 239, 241, 267, 288, 310, 313, 316, 317, 322, 323, 325, 327, 337, 343], "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 40, 41, 42, 48, 49, 58, 61, 64, 65, 69, 77, 80, 81, 82, 83, 86, 89, 90, 91, 92, 94, 95, 97, 100, 101, 105, 158, 159, 160, 162, 164, 167, 168, 169, 171, 172, 244, 257, 262, 268, 288, 304, 310, 313, 319, 322, 323, 325, 326, 327, 333], "rel": [0, 27, 41, 43, 65, 66, 81, 89, 95, 160, 164, 175, 323], "immedi": [0, 6, 52, 65, 96, 101, 103, 164, 175, 313, 317, 323], "under": [0, 9, 10, 14, 17, 24, 38, 44, 53, 72, 77, 83, 89, 90, 101, 105, 164, 166, 167, 175, 322], "consider": [0, 72, 73, 89, 175, 232], "katz_centr": [0, 34, 101, 175, 311, 333], "alpha": [0, 77, 101, 175, 249, 250, 261, 302], "beta": [0, 101, 175, 250, 261], "attenu": [0, 175], "factor": [0, 13, 66, 77, 101, 175, 210, 220, 242, 244, 322], "neighborhood": [0, 6, 90, 92, 95, 101, 164, 168, 175, 253], "maxim": [0, 6, 175, 263, 309], "subgraph": [0, 6, 9, 17, 33, 77, 78, 80, 91, 92, 93, 101, 123, 129, 158, 164, 166, 172, 173, 175, 186, 189, 211, 222, 253, 310, 337, 341], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 42, 43, 49, 51, 53, 58, 61, 64, 65, 70, 72, 74, 75, 77, 81, 84, 85, 89, 90, 91, 93, 95, 97, 98, 100, 103, 105, 158, 159, 162, 164, 167, 168, 169, 170, 172, 175, 177, 178, 179, 186, 189, 190, 205, 215, 216, 217, 219, 222, 237, 262, 263, 267, 268, 310, 313, 314, 317, 322, 323, 331, 335, 341], "found": [0, 4, 9, 16, 17, 18, 36, 46, 58, 64, 76, 77, 81, 82, 92, 98, 151, 171, 229, 271, 272, 308, 310, 317, 321, 322, 323, 327], "recurs": [0, 6, 164, 212], "prune": 0, "less": [0, 2, 6, 13, 17, 27, 64, 69, 70, 89, 101, 164, 171, 175, 227, 238, 249, 251, 323], "kkore": [0, 34], "order": [0, 6, 34, 43, 52, 65, 70, 72, 80, 92, 94, 95, 101, 102, 159, 164, 170, 175, 177, 178, 184, 208, 209, 212, 217, 224, 237, 238, 241, 273, 274, 277, 302, 303, 310, 316, 319, 323, 341], "That": [0, 27, 101, 169, 227, 270, 313, 325], "kshell": [0, 34], "fast": [0, 9, 20, 65, 101, 168], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 40, 41, 55, 58, 69, 70, 72, 73, 80, 81, 89, 90, 91, 94, 95, 97, 101, 145, 159, 160, 162, 164, 168, 175, 185, 192, 210, 239, 243, 245, 254, 257, 258, 259, 260, 288, 310, 317, 321, 322, 323, 330, 337, 341], "assign": [0, 7, 9, 15, 18, 20, 36, 37, 64, 73, 82, 89, 91, 93, 95, 100, 101, 103, 175, 229, 237, 239, 241, 243, 257, 260, 265, 310, 313, 316, 319, 322, 323, 343], "unlabel": 0, "dure": [0, 6, 9, 13, 24, 53, 58, 67, 75, 77, 92, 93, 95, 100, 159, 164, 229, 317, 319, 323, 324, 325, 326], "aim": [0, 22, 48, 52, 77, 87, 92, 93, 94, 95, 97], "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 58, 63, 64, 68, 76, 77, 85, 89, 90, 91, 95, 100, 101, 105, 135, 159, 160, 168, 169, 170, 172, 324, 340, 341], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 41, 42, 43, 48, 49, 51, 53, 54, 56, 58, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 105, 109, 158, 159, 160, 161, 162, 164, 167, 168, 170, 172, 174, 209, 229, 239, 243, 249, 252, 262, 263, 269, 272, 293, 306, 310, 317, 319, 321, 322, 323, 324, 326, 327, 330, 331], "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 40, 41, 48, 49, 54, 58, 61, 64, 65, 67, 70, 72, 73, 77, 80, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 162, 163, 164, 167, 170, 172, 229, 257, 261, 310, 316, 319, 321, 322], "ldbc": [0, 4, 34, 52, 64, 66, 73, 74, 80, 89, 93, 97, 98, 338, 343], "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 42, 48, 52, 53, 58, 61, 64, 65, 72, 73, 76, 80, 92, 94, 95, 162, 164, 166, 168, 175, 229, 295, 302, 304, 310, 317, 321, 322, 324], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 27, 34, 37, 41, 48, 54, 55, 61, 63, 70, 72, 75, 81, 89, 90, 92, 93, 94, 95, 97, 101, 103, 109, 111, 155, 157, 159, 162, 164, 168, 169, 172, 175, 194, 195, 199, 241, 250, 264, 308, 310, 317, 319, 321], "variant": [0, 31, 95, 98], "networkx": [0, 3, 7, 8, 12, 20, 34, 61, 80, 96, 99, 100, 101, 135, 175, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 190, 192, 193, 194, 195, 199, 200, 204, 205, 209, 210, 212, 213, 215, 216, 217, 220, 222, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 246, 247, 248, 250, 253, 254, 255, 256, 261, 262, 263, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 303, 305, 310, 312, 313, 315, 339, 344], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 40, 41, 42, 43, 49, 52, 58, 61, 64, 65, 66, 67, 70, 71, 72, 75, 77, 80, 83, 84, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 103, 151, 157, 158, 159, 160, 162, 164, 167, 170, 171, 172, 173, 174, 175, 189, 213, 229, 243, 244, 249, 253, 261, 264, 265, 266, 271, 272, 290, 305, 308, 310, 313, 317, 321, 322, 323, 324, 327, 330, 335, 336, 340], "sampling_path": [0, 34], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 75, 77, 81, 83, 95, 150, 302, 323, 325], "rank": [0, 6, 33, 90, 100, 101, 102, 302, 316], "vote": [0, 103], "scheme": [0, 6, 9, 42, 46, 64, 89], "With": [0, 4, 12, 19, 24, 34, 36, 40, 53, 66, 70, 72, 73, 75, 77, 80, 85, 86, 90, 91, 92, 248, 321, 330], "top": [0, 9, 12, 22, 34, 73, 75, 77, 97, 162, 284, 323, 341], "highest": [0, 77, 244], "elect": 0, "num_of_nod": [0, 101], "select": [0, 9, 15, 36, 65, 69, 73, 81, 84, 89, 90, 93, 95, 102, 110, 116, 117, 127, 128, 132, 140, 141, 158, 164, 172, 229, 238, 261, 273, 307, 310, 316, 317, 321, 322, 341], "influenti": 0, "extract": [0, 51, 68, 70, 75, 89, 90, 91, 92, 101, 109, 173, 317, 319, 323], "weakli": [0, 101, 175, 249], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 41, 42, 43, 44, 48, 50, 52, 53, 58, 61, 63, 64, 65, 66, 67, 69, 70, 73, 75, 76, 77, 79, 80, 81, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 175, 232, 261, 264, 267, 268, 270, 310, 313, 316, 319, 322, 323, 325, 327, 330], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 61, 65, 66, 67, 70, 73, 75, 77, 79, 80, 81, 84, 89, 92, 98, 120, 136, 159, 160, 161, 162, 172, 304, 310, 323, 327], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 40, 52, 53, 58, 66, 67, 69, 72, 77, 90, 91, 95, 96, 98, 99, 158, 172, 246, 247, 248, 319, 327], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 45, 46, 49, 52, 53, 54, 58, 61, 63, 64, 65, 69, 70, 72, 73, 75, 76, 77, 79, 80, 81, 82, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 119, 158, 160, 164, 165, 166, 170, 175, 206, 207, 229, 257, 258, 259, 260, 307, 310, 312, 317, 319, 321, 322, 323, 324, 327, 330, 333], "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 41, 42, 45, 46, 53, 54, 55, 56, 58, 64, 66, 68, 69, 75, 76, 79, 82, 85, 86, 89, 90, 91, 92, 95, 97, 99, 100, 101, 102, 136, 147, 164, 168, 169, 170, 172, 173, 262, 263, 313, 314, 317, 322, 323, 324, 325, 326, 327, 330, 331, 333, 335, 340], "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 40, 42, 49, 51, 52, 53, 56, 58, 66, 67, 68, 69, 76, 81, 82, 83, 85, 86, 91, 97, 99, 101, 105, 160, 165, 169, 170, 219, 239, 310, 317, 319, 322, 330, 333, 341], "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 49, 69, 73, 79, 80, 93, 99, 105, 150, 162, 165, 170, 229, 239, 317, 322, 323, 327], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 41, 43, 44, 52, 53, 54, 56, 61, 63, 67, 72, 73, 77, 83, 84, 85, 86, 92, 94, 95, 96, 97, 100, 158, 160, 166, 175, 310, 323], "extens": [1, 4, 6, 27, 36, 43, 65, 67, 70, 84, 90, 159], "henc": [1, 2, 10, 32, 89, 184, 307, 310, 323], "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 48, 49, 51, 53, 55, 58, 64, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 82, 83, 85, 86, 89, 91, 94, 96, 97, 99, 101, 105, 157, 159, 160, 163, 164, 165, 168, 169, 172, 175, 188, 219, 229, 239, 241, 253, 258, 259, 260, 310, 317, 319, 322, 323, 325, 330, 331, 333, 343], "flash": [1, 3, 8, 12, 90], "java": [1, 4, 8, 12, 14, 34, 63, 66, 78, 80, 92, 93, 97, 101, 105, 109, 322, 333], "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 41, 42, 45, 48, 49, 50, 52, 53, 54, 56, 75, 77, 80, 81, 90, 92, 93, 100, 101, 102, 105, 108, 120, 132, 160, 164, 168, 170, 175, 208, 209, 219, 239, 250, 263, 264, 267, 268, 302, 304, 306, 307, 310, 322, 325, 331, 333, 335, 341], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 58, 61, 63, 64, 67, 69, 71, 77, 78, 81, 83, 86, 89, 90, 91, 93, 94, 96, 97, 100, 101, 108, 158, 161, 165, 168, 170, 173, 174, 310, 312, 313, 321, 322, 330, 331, 333, 334, 336, 337, 339, 340, 341, 343], "These": [1, 4, 9, 15, 20, 24, 43, 44, 52, 64, 70, 81, 89, 90, 91, 93, 94, 95, 96, 164, 170, 322, 330], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 42, 43, 46, 49, 52, 53, 61, 64, 65, 66, 69, 71, 73, 75, 77, 81, 84, 86, 87, 88, 90, 91, 93, 94, 95, 98, 100, 101, 102, 108, 109, 111, 112, 116, 117, 120, 121, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 137, 140, 141, 145, 151, 153, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 174, 175, 180, 181, 184, 186, 189, 190, 192, 194, 195, 198, 199, 200, 203, 204, 205, 208, 209, 210, 212, 213, 215, 216, 217, 219, 220, 222, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 302, 303, 304, 305, 306, 307, 311, 312, 314, 315, 317, 319, 321, 322, 323, 325, 334, 337, 342], "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 41, 42, 45, 46, 50, 55, 56, 58, 61, 64, 66, 67, 68, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 110, 116, 117, 129, 132, 136, 140, 141, 145, 158, 160, 162, 164, 166, 170, 172, 174, 194, 195, 315, 317, 322, 325, 327, 331, 337], "upon": [1, 2, 9, 14, 52, 70, 72, 97, 172, 323, 324], "pregel": [1, 4, 8, 12, 17, 22, 34, 80, 90, 93, 315, 327, 337, 339], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 40, 41, 61, 66, 72, 77, 84, 89, 91, 158, 308, 310, 343], "deploi": [2, 15, 33, 58, 63, 65, 66, 67, 68, 76, 80, 83, 90, 92, 97, 160, 317, 319, 324], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 43, 51, 55, 58, 64, 66, 67, 68, 76, 82, 83, 85, 86, 90, 91, 92, 93, 94, 95, 101, 158, 170, 317, 322], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 40, 41, 49, 53, 58, 65, 69, 77, 80, 81, 89, 91, 92, 95, 105, 122, 159, 162, 163, 164, 168, 170, 172, 175, 238, 259, 290, 308, 310, 314, 316, 322, 323, 324, 325], "advantag": [2, 65, 80, 89, 96, 97, 326], "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 40, 46, 56, 58, 61, 64, 65, 66, 67, 71, 73, 75, 76, 77, 81, 84, 88, 91, 95, 98, 101, 102, 161, 162, 163, 164, 167, 172, 173, 175, 177, 178, 179, 181, 186, 190, 194, 195, 211, 213, 216, 219, 225, 229, 230, 231, 233, 234, 235, 237, 241, 244, 245, 249, 250, 254, 256, 267, 268, 270, 272, 275, 278, 283, 287, 288, 291, 294, 297, 299, 302, 303, 304, 305, 310, 312, 313, 322, 325, 334, 337, 340, 341], "gie": [2, 32, 33, 63, 70, 77, 80, 89, 90, 94, 97, 98, 99, 129, 317, 334, 335, 344], "gle": [2, 32, 63, 80, 83, 84, 85, 90, 95, 97, 99, 334, 335, 342], "address": [2, 9, 14, 17, 23, 31, 41, 55, 58, 73, 90, 95, 323, 341], "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 40, 49, 61, 65, 69, 72, 75, 77, 78, 80, 81, 84, 89, 90, 91, 92, 93, 94, 95, 97, 98, 101, 120, 158, 159, 160, 161, 162, 163, 164, 166, 167, 169, 229, 233, 234, 235, 257, 260, 267, 287, 302, 310, 315, 317, 319, 321, 322, 324, 325, 326, 327], "complex": [2, 4, 6, 12, 22, 34, 37, 52, 53, 61, 65, 66, 73, 74, 75, 80, 81, 89, 90, 92, 93, 94, 95, 96, 97, 101, 161, 175, 239, 243, 258, 259, 260, 322], "relat": [2, 4, 13, 23, 24, 27, 33, 38, 42, 44, 46, 49, 50, 52, 54, 58, 63, 65, 69, 71, 72, 75, 76, 81, 84, 87, 90, 91, 92, 94, 95, 100, 160, 164, 170, 266, 302, 307, 322, 323], "show": [2, 14, 19, 20, 27, 29, 30, 38, 53, 54, 58, 65, 66, 77, 80, 85, 86, 91, 93, 94, 95, 161, 162, 170, 313, 317, 319, 322], "kubernet": [2, 29, 58, 61, 63, 64, 80, 85, 89, 91, 96, 317, 323, 334, 336, 337, 339, 343, 344], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 58, 61, 63, 66, 68, 76, 77, 80, 83, 85, 89, 90, 91, 92, 93, 94, 95, 96, 101, 160, 170, 175, 232, 311, 317, 323, 324, 331, 333, 340], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 41, 44, 49, 58, 61, 64, 65, 67, 69, 70, 72, 73, 77, 81, 89, 90, 95, 97, 159, 160, 161, 166, 175, 239, 310, 322, 323], "scenario": [2, 4, 6, 8, 12, 13, 40, 52, 53, 65, 75, 76, 77, 81, 84, 89, 90, 94, 95, 97, 159, 160, 162], "quit": [2, 30, 69, 229], "common": [2, 6, 12, 15, 30, 65, 69, 77, 81, 84, 89, 90, 92, 93, 94, 95, 97, 158, 159, 166, 167, 181, 302, 304, 310, 322, 331], "intend": [2, 13, 36, 70, 302, 316], "analysi": [2, 7, 8, 11, 13, 65, 76, 77, 80, 89, 95, 96, 98, 99, 101, 263], "offlin": [2, 63, 80, 81, 92, 95, 96, 319], "everi": [2, 6, 23, 41, 44, 75, 77, 84, 95, 100, 164, 175, 177, 178, 179, 194, 195, 213, 227, 290, 297, 310, 316, 322], "dai": [2, 20, 77, 310, 313], "export": [2, 4, 23, 29, 31, 33, 51, 58, 66, 82, 321, 336], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 41, 53, 54, 64, 73, 75, 90, 92, 97, 105, 118, 159, 161, 162, 163, 164, 185, 222, 236, 243, 249, 250, 257, 258, 259, 260, 261, 310, 313, 317, 322, 323, 325, 341], "real": [2, 6, 9, 12, 13, 34, 46, 61, 64, 73, 75, 80, 90, 91, 93, 95, 302, 323], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 46, 49, 58, 65, 70, 73, 75, 77, 80, 84, 88, 89, 91, 94, 95, 98, 101, 159, 160, 164, 175, 208, 209, 245, 246, 247, 248, 258, 259, 260, 262, 263, 272, 275, 310, 322, 323, 325, 337, 341], "sampl": [2, 29, 30, 31, 33, 42, 48, 56, 63, 64, 80, 81, 90, 91, 97, 105, 159, 160, 161, 163, 166, 168, 171, 174, 249, 269, 302, 323, 342], "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 40, 58, 61, 64, 65, 70, 73, 77, 84, 89, 94, 98, 103, 159, 160, 164, 166, 168, 171, 175, 229, 237, 243, 267, 278, 294, 316, 317, 322, 323, 327, 330], "unnecessari": [2, 6, 9, 72, 77, 322], "capabl": [2, 6, 11, 16, 20, 52, 70, 71, 72, 75, 78, 90, 92, 94, 97, 310], "independ": [2, 6, 30, 90, 97, 159, 173, 186, 189, 237, 264, 310], "document": [2, 10, 27, 29, 33, 35, 36, 38, 45, 53, 54, 56, 58, 66, 69, 70, 71, 75, 76, 78, 80, 82, 95, 101, 158, 159, 165, 317, 318, 323], "walk": [2, 4, 32, 42, 49, 64, 77, 90, 91, 94, 164, 211, 222], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 41, 42, 49, 50, 52, 53, 56, 61, 63, 64, 66, 67, 71, 72, 76, 77, 79, 80, 81, 83, 84, 85, 86, 90, 92, 93, 94, 95, 96, 100, 111, 159, 160, 162, 164, 168, 170, 239, 241, 244, 272, 278, 310, 317, 319, 321, 322, 325, 327], "standalon": [2, 23, 27, 32, 58, 63, 66, 67, 77, 89, 90, 324, 330, 343], "self": [2, 64, 77, 89, 145, 158, 161, 164, 175, 185, 198, 237, 239, 241, 243, 249, 257, 258, 259, 260, 261, 310, 311, 313, 317, 323, 338, 342, 343], "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 45, 46, 50, 53, 54, 56, 58, 61, 64, 71, 77, 80, 84, 85, 86, 90, 92, 93, 94, 95, 96, 97, 98, 100, 317, 323, 324, 330, 333], "k8": [2, 4, 7, 17, 22, 30, 37, 38, 40, 58, 61, 63, 64, 68, 76, 80, 83, 85, 89, 97, 99, 317, 323, 333, 334, 335, 337, 340, 343], "7": [2, 10, 20, 23, 27, 30, 31, 32, 58, 67, 77, 98, 159, 165, 170, 177, 178, 190, 213, 275, 281, 283, 287, 288, 291, 293, 305, 310, 325, 336, 340, 341], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 41, 42, 43, 48, 49, 51, 52, 53, 58, 61, 64, 65, 77, 79, 80, 81, 82, 84, 86, 87, 89, 90, 91, 95, 97, 98, 101, 105, 158, 159, 160, 162, 164, 165, 166, 168, 170, 175, 188, 239, 241, 246, 248, 257, 260, 300, 304, 310, 312, 316, 317, 319, 321, 322, 323, 326, 327, 330, 331], "get": [2, 4, 6, 12, 16, 17, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 40, 46, 52, 56, 58, 63, 64, 65, 66, 70, 75, 77, 81, 84, 89, 94, 96, 99, 101, 102, 103, 121, 158, 161, 162, 163, 164, 167, 172, 173, 174, 175, 208, 229, 300, 310, 316, 317, 319, 322, 323, 327, 330, 331, 333, 336, 337], "instal": [2, 4, 15, 16, 19, 23, 33, 35, 40, 49, 56, 58, 64, 66, 68, 76, 91, 101, 105, 168, 310, 313, 317, 334, 335, 336, 337, 340], "client": [2, 17, 22, 23, 29, 33, 38, 40, 55, 57, 65, 76, 78, 80, 86, 88, 100, 101, 170, 317, 319, 321, 322, 323, 324, 333, 335, 340], "prepar": [2, 4, 33, 36, 42, 56, 64, 67, 69, 81, 82, 83, 84, 86, 87, 91, 95, 99, 322, 337, 340], "continu": [2, 6, 15, 16, 20, 27, 64, 65, 76, 77, 80, 81, 90, 91, 95, 98, 158, 229, 267, 270, 322, 323, 324], "incas": [2, 64], "doesn": [2, 13, 29, 32, 37, 38, 40, 64, 77, 105, 164, 172, 239, 241, 243, 310, 316, 325], "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 40, 51, 54, 57, 58, 64, 73, 75, 77, 88, 89, 92, 98, 100, 101, 103, 105, 111, 158, 163, 164, 170, 172, 174, 175, 188, 204, 239, 241, 243, 263, 267, 268, 302, 304, 307, 310, 316, 323, 325, 342], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 40, 44, 64, 66, 67, 75, 80, 82, 89, 99, 101, 153, 160, 162, 163, 172, 238, 321, 322, 323, 324], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 43, 45, 46, 49, 52, 54, 55, 56, 58, 64, 66, 67, 69, 75, 76, 77, 89, 90, 91, 94, 95, 100, 101, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 129, 130, 131, 135, 138, 139, 145, 151, 152, 153, 162, 164, 167, 169, 172, 173, 188, 210, 212, 213, 215, 216, 217, 219, 220, 222, 224, 225, 227, 228, 229, 231, 232, 234, 237, 239, 241, 242, 244, 245, 246, 247, 248, 250, 251, 252, 254, 255, 256, 258, 259, 260, 262, 263, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 304, 305, 310, 312, 313, 314, 317, 323, 324, 325, 326, 331, 333, 336], "distinct": [2, 48, 70, 75, 90, 91, 94, 215, 277, 303, 322], "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 46, 72, 77, 84, 86, 89, 93, 95, 100, 101, 103, 124, 135, 150, 158, 162, 166, 167, 172, 173, 175, 238, 246, 248, 257, 259, 310, 313, 315, 317, 322, 323, 327, 333], "entir": [2, 9, 34, 53, 65, 77, 91, 95, 164, 175, 310], "discret": [2, 81, 95, 158, 229, 242, 244, 250, 254, 265], "util": [2, 4, 6, 9, 15, 32, 36, 40, 42, 44, 48, 54, 70, 71, 72, 77, 80, 82, 87, 89, 90, 92, 93, 96, 100, 101, 103, 174, 275, 321, 322, 323, 326], "either": [2, 13, 30, 34, 53, 58, 72, 73, 76, 77, 84, 101, 160, 164, 172, 173, 213, 216, 229, 256, 267, 300, 310, 324], "aforement": [2, 48, 89, 93, 95, 159, 164, 323], "per": [2, 43, 52, 64, 322, 323], "prefer": [2, 13, 27, 36, 41, 52, 322], "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 58, 61, 67, 69, 74, 76, 77, 80, 83, 85, 89, 91, 99, 101, 102, 120, 151, 152, 153, 155, 157, 172, 173, 310, 314, 315, 323, 325, 330, 331, 333, 334, 335, 337, 338, 341, 343], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 70, 77, 84, 87, 89, 91, 95, 100, 101, 102, 103, 108, 158, 159, 172, 173, 174, 175, 219, 288, 310, 314, 317, 322, 323, 324, 333, 342], "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 40, 41, 43, 48, 53, 54, 64, 66, 68, 69, 70, 73, 75, 76, 77, 80, 82, 89, 92, 94, 97, 101, 102, 105, 108, 129, 135, 136, 137, 147, 157, 159, 162, 164, 172, 173, 175, 177, 178, 179, 194, 195, 204, 210, 212, 213, 215, 217, 219, 220, 222, 224, 225, 228, 232, 233, 234, 237, 239, 241, 242, 244, 245, 246, 247, 248, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 302, 305, 308, 310, 312, 313, 316, 317, 323, 324], "control": [2, 6, 27, 38, 89, 90, 92, 100, 175, 310, 322], "subset": [2, 6, 20, 52, 73, 75, 87, 91, 216, 227, 316, 317], "launch": [2, 8, 9, 17, 22, 29, 36, 40, 58, 61, 64, 74, 83, 85, 86, 91, 99, 151, 169, 314, 317, 323, 324, 330, 337], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 40, 41, 42, 44, 46, 48, 49, 52, 53, 58, 61, 64, 65, 70, 72, 73, 75, 77, 80, 81, 84, 86, 89, 90, 91, 93, 94, 95, 101, 103, 109, 158, 159, 160, 161, 164, 166, 168, 170, 172, 175, 187, 208, 211, 213, 216, 239, 241, 243, 244, 249, 252, 253, 257, 258, 259, 260, 261, 272, 275, 304, 310, 314, 316, 317, 323, 325, 326, 331], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 40, 42, 43, 44, 45, 48, 51, 53, 61, 63, 64, 67, 69, 70, 72, 73, 75, 76, 77, 78, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 101, 102, 108, 109, 151, 153, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 175, 177, 178, 179, 181, 186, 188, 189, 194, 195, 198, 203, 204, 209, 211, 213, 215, 216, 219, 222, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 243, 245, 246, 248, 250, 253, 257, 258, 259, 260, 261, 267, 270, 275, 300, 302, 303, 304, 305, 308, 310, 312, 313, 314, 316, 317, 321, 322, 323, 324, 325, 330, 331, 333, 337, 342], "set_opt": [2, 7, 15, 17, 19, 29, 38, 58, 67, 69, 83, 86, 87, 88, 91, 331, 336], "show_log": [2, 7, 15, 17, 19, 29, 38, 58, 67, 83, 86, 87, 88, 91, 157, 331, 336], "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 41, 43, 46, 58, 64, 67, 72, 75, 76, 77, 83, 84, 86, 87, 88, 89, 91, 100, 101, 103, 105, 147, 151, 155, 158, 159, 160, 164, 167, 170, 172, 175, 182, 191, 192, 193, 194, 195, 204, 206, 207, 213, 215, 233, 237, 239, 243, 249, 253, 256, 268, 308, 310, 312, 313, 317, 323, 324, 331, 333, 336, 341, 342, 343], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 61, 69, 86, 87, 89, 101, 102, 147, 151, 172, 173, 317, 325, 331, 333, 334, 335, 337, 338, 341, 343], "enabled_engin": [2, 157, 317], "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 36, 37, 40, 42, 48, 49, 53, 54, 61, 66, 67, 69, 73, 75, 76, 77, 79, 80, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 109, 153, 158, 160, 161, 162, 163, 164, 165, 167, 168, 170, 172, 173, 175, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 209, 210, 212, 213, 215, 216, 219, 220, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 264, 266, 267, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 300, 302, 303, 307, 308, 310, 312, 313, 316, 317, 319, 321, 322, 323, 324, 326, 327, 330, 331, 333, 336, 337, 338, 340, 341, 342, 343], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 43, 44, 46, 49, 56, 65, 80, 84, 89, 90, 93, 95, 96, 158, 159, 162, 164, 166, 167, 168, 257, 259, 260, 307, 327], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 40, 41, 42, 45, 48, 49, 53, 58, 63, 66, 82, 83, 100, 159, 323, 324, 331], "line": [2, 4, 6, 7, 17, 36, 37, 38, 40, 48, 54, 63, 65, 82, 83, 92, 97, 158, 159, 310, 312, 323, 324, 331, 342], "releas": [2, 27, 31, 32, 35, 42, 49, 55, 58, 73, 86, 98, 267, 270, 316, 317, 323, 336, 340], "replac": [2, 17, 19, 22, 23, 29, 30, 42, 65, 66, 69, 75, 92, 98, 161, 162, 163, 172, 310], "my": [2, 18, 29, 310, 313, 317, 323], "illustr": [2, 4, 29, 42, 43, 44, 72, 77, 81, 87, 88, 93, 95, 161, 287], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 49, 61, 64, 65, 68, 76, 77, 84, 86, 89, 90, 91, 158, 164, 304, 319, 325], "connect": [2, 6, 15, 17, 19, 20, 27, 37, 40, 44, 55, 58, 64, 65, 71, 77, 78, 80, 84, 86, 89, 90, 91, 92, 93, 95, 101, 102, 103, 159, 160, 162, 164, 167, 173, 175, 179, 196, 211, 213, 215, 217, 221, 222, 224, 225, 227, 228, 229, 231, 232, 233, 234, 236, 238, 243, 244, 249, 250, 252, 257, 259, 260, 261, 262, 263, 264, 266, 275, 285, 286, 288, 290, 292, 309, 310, 317, 324, 325, 330, 333, 341], "servic": [2, 27, 28, 29, 38, 43, 45, 48, 53, 55, 56, 68, 76, 80, 86, 90, 91, 93, 95, 100, 317, 324], "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 41, 42, 43, 44, 45, 49, 58, 60, 64, 70, 72, 77, 80, 83, 84, 89, 93, 95, 97, 100, 101, 102, 151, 153, 157, 159, 160, 162, 163, 166, 167, 168, 170, 267, 310, 317, 321, 323, 326, 327], "addr": [2, 29, 103, 317], "ip": [2, 29, 55, 64, 66, 76, 317, 323, 341], "port": [2, 23, 29, 38, 41, 49, 54, 55, 58, 64, 66, 69, 76, 89, 100, 317, 323, 341, 343], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 58, 61, 64, 65, 67, 69, 73, 75, 77, 81, 83, 86, 89, 90, 91, 94, 95, 96, 97, 111, 159, 164, 166, 167, 168, 169, 172, 209, 232, 239, 241, 249, 310, 313, 316, 317, 322, 323, 325, 327, 330], "would": [2, 4, 20, 29, 31, 36, 37, 40, 58, 66, 69, 77, 90, 100, 101, 164, 170, 313, 316, 317, 323], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 40, 77, 91, 101, 110, 158, 162, 164, 248, 323], "wcc_result": 2, "wcc": [2, 13, 98, 101, 333, 338], "print": [2, 7, 16, 20, 29, 30, 33, 58, 61, 64, 67, 68, 69, 76, 77, 83, 84, 86, 87, 88, 89, 91, 101, 102, 161, 163, 164, 167, 170, 172, 173, 175, 188, 237, 305, 310, 313, 323, 331, 338, 341, 343], "to_datafram": [2, 7, 15, 61, 91, 102, 172, 316, 333], "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 42, 43, 44, 46, 48, 57, 58, 61, 64, 65, 66, 69, 70, 72, 78, 81, 84, 89, 91, 94, 95, 98, 100, 101, 102, 103, 129, 135, 137, 158, 159, 160, 161, 162, 163, 164, 167, 168, 170, 171, 172, 174, 267, 268, 307, 310, 313, 316, 317, 323, 324, 331, 333, 334, 336, 337, 341, 342, 343], "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 61, 64, 70, 91, 92, 95, 101, 102, 210, 220, 227, 233, 237, 249, 257, 266, 298, 303, 316, 317, 323, 333, 337, 338], "tip": [2, 13, 295], "encount": [2, 32, 37, 58, 93, 111], "fail": [2, 37, 58, 65, 72, 75, 95, 175, 310, 323], "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 49, 52, 65, 68, 70, 91, 92, 94, 100, 101, 102, 134, 165, 172, 317, 323, 333, 337, 338, 341], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 41, 43, 49, 53, 58, 63, 65, 67, 73, 75, 77, 83, 89, 90, 91, 94, 101, 102, 134, 158, 160, 173, 175, 239, 241, 244, 245, 267, 268, 269, 270, 272, 284, 302, 310, 316, 323, 333, 336, 337, 341], "empti": [2, 19, 29, 40, 46, 54, 57, 75, 77, 89, 101, 103, 192, 216, 219, 249, 250, 288, 304, 310, 313, 323], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 42, 49, 50, 54, 58, 61, 63, 64, 65, 66, 67, 68, 71, 76, 83, 91, 92, 93, 95, 98, 99, 100, 101, 109, 111, 113, 142, 158, 160, 169, 170, 172, 317, 322], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 58, 61, 67, 71, 77, 83, 86, 87, 88, 91, 95, 98, 101, 102, 158, 164, 170, 317, 333, 335, 337, 341, 343], "load_modern_graph": [2, 7, 30, 33, 67, 91, 101, 173], "modern": [2, 6, 7, 33, 41, 42, 46, 48, 49, 53, 54, 56, 64, 66, 67, 77, 80, 91, 92, 93, 319, 323, 324], "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 41, 42, 44, 46, 49, 52, 53, 54, 55, 58, 61, 64, 65, 70, 73, 75, 77, 80, 84, 86, 89, 91, 93, 94, 96, 101, 103, 152, 155, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 173, 302, 305, 310, 317, 322, 323, 333, 340], "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 46, 57, 61, 66, 70, 72, 73, 77, 79, 80, 83, 84, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98, 101, 102, 111, 160, 161, 162, 163, 164, 167, 170, 172, 173, 174, 175, 211, 229, 239, 241, 243, 244, 246, 247, 248, 251, 256, 257, 264, 265, 266, 267, 270, 272, 288, 293, 299, 301, 310, 312, 313, 316, 317, 319, 321, 322, 324, 326, 327, 333, 337, 340, 341, 343], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 41, 42, 43, 46, 64, 65, 66, 69, 70, 72, 78, 80, 81, 84, 89, 91, 93, 94, 97, 101, 109, 159, 160, 162, 164, 169, 170, 172, 175, 178, 211, 217, 221, 222, 224, 241, 304, 310, 312, 314, 316, 317, 321, 323, 325, 333, 334, 337, 338, 341], "store": [2, 10, 12, 13, 16, 17, 30, 34, 41, 42, 45, 46, 49, 52, 54, 56, 58, 63, 64, 70, 71, 73, 75, 77, 80, 89, 90, 92, 93, 94, 96, 97, 102, 103, 116, 117, 132, 140, 141, 160, 166, 172, 173, 229, 234, 257, 258, 259, 260, 261, 310, 312, 317, 319, 321, 322, 324, 331, 333, 336], "pod": [2, 27, 28, 29, 30, 38, 40, 46, 58, 61, 64, 86, 89, 317, 323, 331, 334, 336, 337, 343], "elimin": [2, 6, 14, 48, 160], "extran": 2, "resourc": [2, 27, 29, 33, 38, 51, 58, 61, 76, 86, 90, 97, 101, 109, 229, 262, 317, 323, 326, 330, 336], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 41, 44, 49, 51, 53, 58, 61, 65, 67, 69, 72, 73, 75, 77, 81, 84, 86, 89, 90, 91, 95, 97, 101, 105, 119, 158, 159, 160, 162, 163, 167, 168, 169, 170, 171, 208, 256, 257, 261, 310, 317, 322, 323, 326, 340], "equival": [2, 20, 58, 70, 72, 73, 75, 77, 164, 229, 266, 310], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 42, 44, 52, 53, 54, 58, 69, 70, 73, 75, 76, 77, 81, 89, 90, 92, 95, 97, 100, 164, 168, 175, 208, 209, 216, 219, 239, 241, 246, 257, 258, 259, 260, 261, 269, 305, 308, 309, 310, 311, 312, 315, 321, 322, 327, 330, 333], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 43, 44, 53, 58, 61, 64, 65, 69, 70, 75, 76, 77, 81, 84, 86, 90, 92, 93, 95, 97, 98, 101, 102, 103, 111, 145, 151, 159, 160, 161, 162, 163, 164, 167, 168, 169, 171, 172, 174, 175, 219, 229, 249, 257, 258, 259, 260, 266, 310, 312, 313, 317, 319, 321, 322, 323, 325, 331], "close": [2, 6, 27, 29, 30, 33, 76, 84, 86, 90, 101, 160, 170, 173, 312, 317, 323, 330, 337], "free": [2, 9, 37, 58, 84, 97, 250, 257, 267, 270, 272, 303, 309, 317], "delet": [2, 9, 27, 29, 30, 33, 46, 58, 130, 169, 317, 319, 323, 336], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 52, 54, 56, 64, 65, 73, 76, 77, 80, 90, 92, 93, 94, 95, 102, 132, 159, 171, 174, 310, 312, 322, 323], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 40, 41, 52, 54, 65, 73, 77, 80, 81, 90, 91, 92, 93, 95, 96, 122, 172, 275, 322, 327], "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 58, 61, 65, 79, 81, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 105, 160, 163, 164, 166, 172, 220, 229, 232, 233, 241, 242, 243, 244, 245, 249, 250, 251, 252, 257, 262, 263, 266, 267, 269, 270, 293, 302, 307, 310, 311, 313, 315, 316, 326], "deriv": [3, 12, 34, 91, 94, 100, 102, 172, 175, 319], "grape": [3, 4, 15, 16, 22, 23, 34, 63, 79, 90, 96, 100, 109, 319, 322, 324, 325, 326, 327, 333, 339], "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 46, 48, 49, 50, 52, 58, 61, 64, 65, 67, 70, 71, 72, 73, 77, 78, 79, 80, 83, 90, 92, 93, 94, 95, 96, 98, 159, 160, 165, 168, 307, 309, 319, 321, 322, 323, 325, 327, 333, 341], "sigmod": [3, 12, 14, 24, 34, 90, 333, 339], "2017": [3, 12, 14, 34, 90, 267, 268, 333], "further": [3, 6, 10, 14, 20, 27, 30, 34, 52, 61, 66, 70, 73, 75, 77, 91, 92, 102, 160, 172, 173, 188, 319, 322], "enhanc": [3, 4, 9, 46, 52, 72, 91], "introduc": [3, 6, 10, 19, 20, 24, 43, 63, 65, 70, 73, 75, 77, 79, 81, 90, 92, 94, 97, 158, 161, 162, 164, 166, 175, 287, 309, 322, 327], "lot": [3, 13, 37, 61, 77, 79, 327], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 41, 46, 52, 56, 65, 67, 72, 77, 82, 90, 91, 92, 100, 103, 110, 111, 152, 169, 172, 173, 175, 182, 188, 229, 241, 250, 252, 272, 301, 308, 310, 317, 319, 321, 322, 323, 325, 337], "featur": [3, 6, 9, 12, 23, 32, 34, 42, 56, 70, 79, 81, 83, 86, 87, 90, 91, 94, 95, 96, 97, 100, 105, 158, 159, 166, 170, 172, 310, 317, 322, 327, 337, 342], "storag": [3, 9, 30, 58, 65, 66, 70, 72, 73, 77, 89, 92, 95, 97, 137, 160, 172, 321, 323, 324], "languag": [3, 12, 16, 35, 50, 56, 61, 65, 67, 72, 73, 75, 76, 77, 78, 80, 81, 84, 90, 91, 92, 93, 94, 97, 105, 173, 322, 323, 327], "pattern": [3, 6, 12, 23, 30, 41, 52, 65, 66, 69, 72, 73, 75, 80, 84, 90, 93, 97, 101, 163, 168, 323], "better": [3, 8, 12, 20, 24, 29, 34, 64, 65, 77, 79, 95, 97, 317, 323, 327], "integr": [3, 4, 9, 12, 13, 23, 34, 43, 49, 65, 67, 69, 72, 78, 79, 90, 92, 94, 96, 97, 303, 322, 323, 325, 327], "big": [3, 6, 12, 37, 79, 92, 327], "overview": [3, 23, 34, 45, 49, 56, 72, 77, 91, 319], "architectur": [3, 9, 52, 90, 95, 101], "kei": [3, 4, 13, 20, 27, 42, 43, 44, 46, 56, 64, 67, 70, 71, 72, 75, 77, 89, 92, 94, 95, 96, 101, 102, 103, 134, 135, 136, 145, 161, 164, 170, 172, 175, 204, 253, 257, 258, 259, 260, 308, 310, 312, 313, 316, 317, 322, 323, 333, 343], "concept": [3, 92, 95, 158, 159], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 34, 79, 80, 90, 92, 93, 327], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 34, 76, 81, 92, 100, 327], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 49, 55, 58, 61, 64, 67, 70, 78, 80, 81, 83, 84, 85, 86, 87, 91, 95, 96, 99, 101, 166, 173, 316, 317, 319, 321, 337], "tune": [3, 61, 89, 90], "guid": [4, 7, 9, 16, 27, 29, 32, 37, 40, 41, 42, 43, 46, 49, 51, 53, 54, 56, 63, 64, 67, 69, 71, 75, 76, 78, 83, 86, 87, 91, 105, 337], "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 45, 50, 52, 53, 63, 65, 66, 69, 70, 77, 82, 90, 91, 92, 97, 98, 100, 101, 103, 108, 158, 159, 160, 161, 164, 165, 170, 229, 271, 314, 322, 323, 325, 330], "organ": [4, 48, 54, 69, 75, 77, 80, 81, 95, 99, 158, 160, 162, 166, 167, 246, 248, 287], "identifi": [4, 9, 13, 24, 44, 73, 75, 77, 90, 91, 93, 101, 150, 237, 304, 307, 310, 317, 323, 343], "simplic": [4, 9], "suggest": [4, 13, 65, 69, 77, 89, 92, 229], "prebuilt": [4, 40, 66], "docker": [4, 27, 32, 33, 36, 38, 40, 42, 49, 51, 54, 58, 66, 80, 323, 330, 334, 337, 339, 340], "imag": [4, 29, 36, 38, 49, 54, 58, 66, 80, 82, 98, 161, 317, 330], "necessari": [4, 6, 23, 27, 37, 40, 42, 51, 53, 66, 67, 72, 76, 89, 112, 120, 125, 159, 160, 162, 164, 172, 322, 323, 331], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 40, 58, 66, 68, 69, 76, 77, 82, 83, 92, 95, 101, 164, 232, 237, 323, 330, 333], "shm": [4, 32, 40, 66, 82, 335], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 40, 43, 57, 58, 64, 66, 76, 81, 82, 84, 89, 95, 98, 103, 159, 161, 162, 164, 169, 171, 215, 216, 227, 229, 230, 231, 232, 234, 235, 236, 237, 238, 241, 252, 261, 265, 267, 310, 322, 323, 324, 335], "4096m": [4, 32, 40, 66, 82], "registri": [4, 27, 32, 40, 66, 82, 165, 317, 323, 335], "cn": [4, 23, 27, 29, 31, 32, 40, 66, 82, 89, 165, 323, 334, 335, 343], "hongkong": [4, 27, 32, 40, 66, 82, 323, 335], "aliyunc": [4, 23, 27, 29, 31, 32, 40, 66, 82, 89, 165, 323, 334, 335, 343], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 40, 66, 67, 69, 82, 83, 89, 92, 93, 98, 101, 105, 165, 168, 175, 262, 271, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 290, 295, 317, 322, 323, 333, 334, 335, 336, 343], "latest": [4, 14, 32, 37, 38, 40, 49, 51, 66, 69, 82, 83, 322, 323, 335, 340], "altern": [4, 42, 44, 70, 238, 257, 261, 310, 322, 323], "manual": [4, 9, 27, 30, 33, 58, 90, 97, 172, 323], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 44, 46, 49, 52, 53, 54, 58, 64, 65, 67, 70, 72, 73, 75, 76, 77, 82, 84, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 103, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 175, 179, 180, 182, 183, 187, 189, 204, 205, 209, 210, 213, 215, 216, 220, 229, 238, 247, 253, 267, 268, 270, 272, 296, 304, 305, 308, 310, 317, 321, 322, 323, 326, 331], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 40, 41, 42, 44, 49, 51, 52, 58, 66, 69, 73, 84, 86, 89, 91, 158, 159, 160, 162, 163, 164, 165, 168, 170, 321, 323, 327, 330, 337], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 42, 49, 58, 61, 63, 67, 71, 80, 86, 91, 92, 99, 101, 105, 165, 169, 175, 317, 322, 323, 324, 331, 336, 340], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 41, 53, 61, 69, 73, 75, 81, 92, 93, 95, 101, 102, 103, 113, 158, 159, 160, 161, 168, 169, 170, 175, 272, 283, 302, 310, 314, 316, 317, 319, 322, 323, 324, 330, 331, 333], "clone": [4, 22, 29, 30, 31, 32, 36, 37, 66, 69, 105, 165, 323, 335], "repositori": [4, 17, 29, 36, 37, 64, 69, 105, 317, 323], "enter": [4, 65, 76], "analatical_engin": 4, "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 41, 42, 53, 58, 69, 76, 80, 100, 104, 106, 158, 169, 317, 321, 330, 331, 334, 336, 337], "git": [4, 22, 29, 30, 31, 32, 35, 37, 66, 69, 105, 168, 322, 335], "http": [4, 7, 19, 22, 23, 27, 29, 30, 31, 32, 35, 41, 45, 49, 58, 66, 67, 68, 69, 71, 76, 83, 86, 87, 91, 92, 93, 101, 105, 165, 168, 175, 229, 233, 234, 235, 249, 252, 259, 260, 262, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 294, 295, 296, 297, 302, 317, 322, 323, 333, 334, 335, 336, 337, 341, 343], "github": [4, 22, 29, 30, 31, 32, 35, 66, 69, 92, 93, 101, 105, 165, 168, 260, 317, 322, 333, 335, 343], "alibaba": [4, 17, 22, 23, 29, 31, 32, 66, 80, 90, 92, 95, 96, 105, 165, 168, 333, 335, 343], "cd": [4, 22, 29, 31, 32, 35, 51, 66, 68, 76, 105, 165, 168, 170, 323, 330, 331, 333, 335, 341], "sinc": [4, 6, 23, 24, 29, 30, 37, 41, 65, 69, 77, 82, 86, 89, 90, 98, 111, 160, 164, 172, 208, 209, 239, 241, 288, 305, 312, 316, 322, 323, 330], "inherit": [4, 6, 9, 16, 65, 92, 100, 158, 168], "libgrap": [4, 16, 31, 34, 92, 105], "lite": [4, 16, 31, 34, 92, 105], "note": [4, 13, 14, 20, 27, 29, 37, 38, 41, 42, 44, 48, 49, 53, 65, 69, 70, 72, 77, 81, 86, 87, 89, 91, 92, 93, 101, 102, 103, 111, 150, 152, 160, 164, 172, 175, 184, 185, 188, 192, 205, 206, 207, 208, 209, 210, 216, 217, 222, 225, 227, 229, 230, 231, 232, 234, 236, 238, 239, 241, 242, 243, 244, 245, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 270, 271, 272, 287, 302, 303, 304, 305, 307, 310, 312, 313, 316, 317, 321, 323, 330, 337, 343], "core": [4, 6, 12, 34, 37, 58, 65, 67, 90, 91, 92, 101, 105, 170, 175, 317, 337], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 41, 43, 44, 52, 61, 65, 72, 76, 77, 87, 91, 92, 93, 94, 95, 101, 159, 160, 161, 172, 220, 239, 287, 302, 304, 310, 311, 321, 322, 323, 326], "partition": [4, 57, 168], "worker": [4, 9, 13, 14, 23, 28, 34, 41, 66, 84, 86, 160, 163, 170, 172, 317], "between": [4, 6, 9, 10, 12, 13, 18, 19, 44, 58, 63, 65, 77, 78, 81, 93, 95, 100, 101, 159, 160, 162, 164, 170, 175, 232, 233, 234, 237, 243, 249, 250, 252, 256, 257, 258, 259, 261, 264, 266, 267, 268, 270, 275, 305, 307, 310, 322, 323, 330], "heavili": 4, "reus": [4, 30, 53, 72, 81, 84, 92, 101, 170, 172, 317, 319], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 53, 73, 77, 83, 89, 96, 105, 111, 157, 168, 172, 219, 253, 310, 316, 317, 319, 323, 330], "fulli": [4, 81, 84, 94, 101, 111, 252, 322], "analytci": 4, "recomman": 4, "locat": [4, 23, 27, 36, 38, 42, 43, 44, 46, 49, 51, 64, 66, 70, 77, 82, 89, 94, 104, 106, 160, 161, 172, 323, 324, 330], "analytical_engin": [4, 15, 31, 36, 105, 333], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 32, 36, 37, 40, 41, 44, 58, 61, 64, 65, 67, 69, 72, 77, 78, 80, 82, 89, 90, 91, 95, 96, 97, 99, 100, 101, 159, 164, 168, 170, 172, 229, 239, 241, 249, 310, 316, 317, 319, 322, 323, 324, 343], "therebi": [4, 73], "fledg": [4, 12, 90], "coordin": [4, 15, 27, 29, 35, 37, 38, 40, 67, 86, 100, 172, 222, 317, 323, 330, 331, 334, 335, 337], "while": [4, 6, 12, 19, 20, 29, 34, 43, 44, 49, 52, 53, 61, 64, 68, 70, 72, 73, 75, 76, 77, 81, 90, 92, 93, 94, 96, 97, 159, 164, 170, 206, 207, 267, 270, 272, 304, 310, 319, 322, 323, 331], "": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 54, 58, 64, 66, 68, 69, 70, 71, 72, 75, 76, 77, 78, 80, 81, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 101, 111, 127, 128, 145, 158, 160, 162, 164, 167, 169, 171, 172, 175, 211, 222, 229, 232, 234, 237, 241, 244, 246, 247, 248, 264, 272, 273, 274, 297, 300, 302, 310, 316, 317, 319, 321, 322, 323, 324, 341, 342], "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 41, 42, 44, 52, 55, 61, 64, 65, 70, 72, 73, 75, 77, 80, 81, 83, 84, 89, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 105, 109, 158, 159, 160, 162, 163, 164, 165, 172, 173, 175, 194, 195, 204, 230, 231, 256, 257, 261, 269, 282, 303, 304, 310, 316, 317, 322, 323, 324, 327], "ship": [4, 330], "6": [4, 10, 17, 18, 22, 31, 46, 61, 67, 75, 76, 77, 91, 98, 101, 159, 164, 170, 175, 194, 213, 242, 243, 244, 261, 275, 277, 283, 284, 287, 290, 294, 295, 303, 305, 310, 323, 325, 333, 336, 337, 341], "graphalyt": [4, 97], "benchmark": [4, 34, 52, 73, 77, 80, 93, 95, 97, 229], "flatten": [4, 13], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 58, 61, 77, 86, 95, 101, 163, 205, 213, 310, 322], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 40, 41, 42, 44, 49, 50, 52, 53, 55, 61, 64, 65, 66, 67, 71, 72, 75, 77, 80, 91, 92, 94, 95, 100, 101, 102, 129, 164, 168, 172, 173, 175, 270, 314, 317, 319, 323, 325, 330, 331, 333, 337, 341], "written": [4, 12, 20, 44, 77, 90, 92, 94, 288, 319, 322, 325, 333], "giraph": [4, 7, 8, 12, 17, 23, 24, 79, 97, 327], "graphx": [4, 7, 8, 12, 17, 24, 79, 97, 327], "app": [4, 15, 16, 17, 18, 33, 102, 103, 105, 110, 113, 136, 142, 145, 159, 172, 315, 316, 322, 333], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 49, 52, 65, 66, 90, 100, 101, 105, 323], "serv": [4, 27, 58, 69, 72, 80, 91, 92, 95, 160, 323], "layer": [4, 6, 65, 81, 84, 92, 95, 97, 158, 159, 162, 166, 170, 342], "cuda": [4, 98], "suit": [4, 36, 61, 66, 81, 95, 330], "gpu": [4, 92, 165], "acceler": [4, 27, 322], "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 57, 65, 93, 95, 103, 135, 172, 173, 319, 324, 327, 333], "extend": [4, 9, 17, 23, 52, 72, 73, 75, 76, 77, 97, 102, 159, 167, 168, 256, 322, 333], "loader": [4, 22, 66, 88, 100, 111, 122, 315, 324, 338, 339], "mutabl": [4, 92], "io": [4, 27, 30, 33, 40, 92, 93, 101, 169, 172, 260, 317, 323, 326], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 61, 80, 90, 92, 94, 100, 103, 160, 239, 241, 278, 310, 313, 323, 333], "sub": [4, 12, 14, 18, 77, 80, 89, 102, 162, 164, 322, 327], "helper": [4, 330], "thread": [4, 6, 31, 41, 64, 66, 81, 98, 171], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 46, 54, 58, 65, 77, 84, 95, 100, 103, 171, 322, 333], "buffer": [4, 169], "sync": [4, 103, 169, 322], "serial": [4, 75, 76, 100, 172, 317, 322, 341], "vertex_map": [4, 13, 42, 43, 46, 151, 172, 317], "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 46, 49, 64, 65, 67, 70, 73, 75, 76, 81, 89, 90, 93, 95, 101, 158, 159, 160, 166, 168, 170, 171, 172, 173, 220, 229, 239, 241, 244, 263, 304, 309, 310, 322, 323, 324, 330], "map": [4, 6, 13, 42, 49, 54, 70, 73, 75, 77, 93, 100, 159, 168, 172, 302, 317, 323, 324, 338, 341], "intern": [4, 13, 42, 46, 49, 73, 93, 172, 210, 333, 335], "frame": [4, 95], "wrap": [4, 89, 92, 100, 105], "becaus": [4, 37, 65, 69, 73, 77, 95, 158, 161, 175, 305, 322, 323], "reli": [4, 9, 19, 69, 71, 165, 322], "templat": [4, 9, 15, 28, 57, 100, 322], "inadequ": 4, "usual": [4, 9, 13, 19, 27, 38, 58, 61, 65, 69, 75, 77, 81, 84, 85, 86, 95, 164, 168, 171, 238, 261, 304, 310, 322, 324, 325], "multipl": [4, 6, 12, 14, 17, 29, 30, 40, 43, 44, 52, 53, 64, 65, 70, 72, 75, 80, 81, 90, 91, 92, 93, 94, 95, 96, 97, 101, 102, 103, 159, 160, 164, 175, 272, 310, 316, 321, 322, 325, 331], "label": [4, 6, 7, 13, 15, 20, 33, 48, 57, 64, 69, 70, 73, 83, 87, 88, 90, 91, 93, 95, 100, 101, 102, 103, 111, 158, 161, 164, 170, 172, 175, 210, 214, 221, 225, 226, 228, 238, 239, 241, 242, 243, 244, 245, 287, 288, 310, 312, 313, 316, 317, 321, 323, 324, 337, 338, 341, 342], "cannot": [4, 27, 30, 58, 75, 77, 81, 95, 97, 100, 101, 160, 172, 229, 268, 269, 317, 323, 325, 336], "determin": [4, 37, 41, 65, 75, 77, 81, 84, 89, 93, 94, 100, 101, 160, 164, 255, 258, 259, 260, 317], "reason": [4, 58, 73, 75, 81, 159, 160, 290], "jit": 4, "technologi": [4, 63, 65, 96], "compil": [4, 15, 31, 32, 34, 41, 45, 49, 52, 54, 56, 58, 65, 66, 70, 76, 90, 101, 113, 322, 323, 325, 331], "associ": [4, 6, 9, 29, 41, 42, 44, 53, 70, 75, 95, 244, 256, 302, 304, 310, 317, 322, 323], "runtim": [4, 6, 17, 23, 31, 45, 48, 49, 65, 90, 92, 93, 94, 100, 101, 105, 322, 335, 336], "wrapper": [4, 68, 76, 78, 80, 94, 100, 113, 119, 172, 173, 322], "facilit": [4, 20, 66, 80, 81, 84, 95, 159, 322, 323], "task": [4, 6, 7, 14, 34, 37, 40, 65, 67, 77, 80, 81, 83, 85, 86, 87, 88, 90, 92, 93, 95, 159, 170, 322], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 45, 61, 63, 71, 80, 90, 96, 99, 105, 111, 158, 160, 162, 163, 164, 168, 174, 310, 317, 322, 323, 324, 333, 344], "jar": [4, 8, 22, 23, 35, 101, 323, 333], "read": [4, 8, 20, 24, 37, 43, 52, 61, 68, 70, 74, 85, 89, 90, 91, 92, 158, 159, 164, 169, 170, 172, 208, 209, 308, 310, 311, 315, 317, 319, 321, 323, 341], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 64, 66, 67, 77, 82, 83, 90, 95, 96, 100, 101, 164, 168, 169, 316, 317, 321, 326, 333], "cmake": [4, 31, 32, 36, 58, 165], "script": [4, 32, 37, 97, 98, 129, 158, 159, 170, 173, 334, 340], "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 42, 49, 51, 53, 54, 56, 58, 66, 75, 76, 77, 86, 89, 90, 100, 101, 112, 113, 119, 120, 125, 150, 169, 170, 172, 229, 239, 241, 317, 319, 324, 330], "figur": [4, 6, 9, 12, 24, 27, 30, 34, 65, 69, 77, 81, 84, 91, 93, 94, 95, 160, 162, 293, 319], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 42, 53, 61, 64, 67, 73, 77, 79, 83, 89, 93, 94, 158, 159, 160, 164, 168, 213, 229, 249, 272, 306, 316, 323, 325, 327, 331], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 44, 65, 69, 72, 73, 80, 81, 89, 91, 92, 93, 94, 95, 99, 164, 172, 180, 213, 261, 310, 319, 323, 326, 327, 331], "thei": [4, 6, 20, 24, 27, 30, 31, 61, 65, 69, 77, 80, 86, 90, 93, 95, 97, 158, 159, 167, 172, 216, 224, 229, 257, 259, 260, 303, 304, 310, 316, 317, 319, 322, 323], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 40, 44, 46, 61, 64, 65, 67, 72, 75, 80, 84, 89, 90, 91, 92, 93, 94, 95, 100, 102, 162, 164, 172, 309, 310, 316, 325], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 64, 65, 73, 84, 90, 93, 95, 101, 163, 168, 227, 232, 233, 234, 237, 268, 327], "object": [4, 15, 38, 66, 67, 68, 75, 76, 77, 81, 84, 89, 90, 91, 93, 95, 98, 100, 112, 125, 137, 151, 159, 161, 162, 163, 164, 167, 170, 173, 174, 188, 208, 209, 267, 307, 310, 312, 313, 315, 316, 321, 323, 333, 343], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 73, 75, 76, 77, 84, 95, 98, 103, 162, 163, 164, 167, 168, 313, 326, 341], "respons": [4, 9, 12, 16, 27, 34, 36, 37, 45, 58, 65, 69, 90, 100, 168, 171, 317, 319], "state": [4, 6, 9, 10, 12, 24, 27, 34, 65, 80, 93, 94, 96, 98, 169, 172, 229, 232, 233, 234, 235, 237, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 264, 265, 266, 270, 302, 305, 307], "synchron": [4, 6, 10, 12, 14, 15, 90, 322], "explicitli": [4, 13, 100, 160, 229, 317, 323], "implicitli": [4, 111], "main": [4, 6, 30, 34, 37, 42, 52, 65, 72, 73, 76, 77, 97, 158, 167, 170, 175, 317, 323, 342, 343], "logic": [4, 6, 9, 14, 16, 17, 65, 75, 77, 80, 92, 94, 98, 161, 321, 322, 323, 331, 333], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 48, 50, 52, 58, 64, 66, 69, 76, 77, 81, 84, 89, 90, 92, 93, 94, 95, 159, 160, 161, 162, 163, 164, 169, 170, 172, 310, 313, 317, 319, 321, 322, 323, 324, 331, 343], "send": [4, 6, 10, 18, 24, 66, 93, 103, 322, 330, 333], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 89, 90, 93, 95, 103, 164, 168, 319, 333], "messagemanag": [4, 17, 333], "call": [4, 6, 12, 13, 16, 17, 19, 24, 48, 52, 53, 58, 73, 75, 77, 84, 100, 103, 158, 160, 164, 167, 168, 172, 173, 205, 219, 220, 250, 261, 290, 302, 310, 313, 317, 321, 322, 323], "encourag": [4, 6, 15, 24, 37], "fork": 4, "repo": [4, 29, 37, 66, 92, 323, 334, 335], "much": [4, 6, 13, 19, 22, 58, 65, 75, 77, 160, 164, 322], "easier": [4, 32, 36, 37, 75, 92, 93, 94, 164, 317], "begin": [4, 15, 16, 30, 42, 57, 61, 69, 70, 74, 77, 91, 102, 103, 249, 316, 322], "small": [4, 9, 11, 13, 20, 52, 61, 77, 93, 94, 97, 175, 230, 231, 257, 300, 311, 317, 323], "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 41, 49, 77, 90, 94, 95, 97, 98, 101, 118, 150, 159, 172, 175, 188, 310, 317, 323, 330], "revis": [4, 14, 98], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 70, 80, 81, 95, 97, 98, 109, 110, 160, 172, 177, 178, 188, 246, 247, 248, 250, 304, 310, 319, 341, 343], "gradual": 4, "avoid": [4, 13, 73, 76, 322], "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 58, 61, 64, 65, 67, 71, 76, 77, 78, 80, 81, 84, 85, 86, 90, 91, 92, 96, 97, 101, 145, 159, 160, 162, 164, 166, 170, 171, 184, 208, 209, 229, 264, 322, 333], "singl": [4, 6, 7, 11, 14, 15, 20, 24, 27, 36, 37, 40, 44, 46, 53, 58, 64, 70, 73, 75, 77, 82, 83, 85, 86, 90, 91, 93, 94, 101, 102, 158, 172, 183, 190, 212, 216, 221, 231, 236, 253, 259, 304, 306, 310, 317, 321, 325], "commit": [4, 98, 319], "python3": [4, 7, 23, 27, 28, 30, 31, 32, 35, 36, 40, 58, 66, 67, 82, 83, 91, 333, 334, 335, 336], "gsctl": [4, 32, 36, 40, 63, 66, 82, 334, 335], "py": [4, 15, 32, 36, 40, 66, 82, 158, 165, 170, 317, 323, 330, 333, 334, 335, 342], "cmakelist": 4, "txt": [4, 31, 35, 333], "artifact": [4, 17, 23, 29, 36, 66, 82, 330], "grape_engin": [4, 38, 135, 331], "togeth": [4, 9, 10, 20, 40, 65, 77, 86, 90, 98, 164, 168, 211], "share": [4, 6, 30, 31, 37, 41, 44, 77, 82, 90, 92, 93, 322, 324, 335], "bunch": [4, 40, 97, 100], "binari": [4, 15, 27, 31, 95, 330], "choos": [4, 6, 12, 22, 34, 40, 65, 75, 77, 80, 81, 90, 95, 158, 159, 249, 250, 288], "prefix": [4, 31, 36, 37, 50, 58, 66, 82, 172, 304, 322, 341], "usr": [4, 323], "look": [4, 15, 18, 20, 27, 41, 42, 46, 64, 77, 89, 105, 171, 316, 319, 323, 324], "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 41, 42, 43, 44, 46, 48, 49, 51, 52, 53, 54, 58, 63, 64, 66, 69, 89, 100, 101, 109, 132, 158, 159, 165, 170, 172, 208, 209, 260, 310, 312, 317, 319, 323, 324, 330, 331, 333, 343], "investig": [4, 6], "ensur": [4, 6, 9, 32, 35, 36, 37, 41, 42, 43, 49, 51, 52, 53, 65, 70, 73, 91, 97, 317], "correct": [4, 6, 14, 37, 38, 65, 69, 164, 172, 175, 322], "unit": [4, 65, 77, 94, 168, 258, 259, 260, 323], "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 53, 58, 64, 67, 77, 80, 90, 91, 92, 94, 95, 97, 164, 166, 322], "graphscope_hom": [4, 23, 335], "pwd": [4, 30, 51, 170], "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 51, 54, 67, 68, 71, 76, 82, 83, 89, 98, 165, 170, 335], "tmp": [4, 18, 19, 28, 38, 64, 66, 132, 137, 170, 317, 323, 331, 333, 336], "gstest": [4, 19, 22, 23, 30, 333, 335], "against": [4, 14, 37, 66, 101, 292], "compar": [4, 19, 65, 70, 72, 73, 75, 77, 93, 98, 100, 101, 161, 229, 316], "ground": [4, 72, 95], "truth": [4, 95], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 52, 58, 63, 64, 65, 67, 71, 73, 75, 78, 80, 81, 84, 85, 86, 88, 90, 92, 93, 95, 96, 97, 101, 105, 158, 161, 163, 167, 169, 170, 174, 229, 232, 239, 241, 250, 257, 258, 259, 260, 261, 269, 323, 324], "broad": [6, 92], "spectrum": [6, 92, 175, 302], "central": [6, 15, 61, 80, 81, 91, 92, 95, 96, 101, 164, 175, 287], "match": [6, 15, 41, 46, 48, 49, 52, 65, 66, 67, 68, 69, 70, 72, 90, 91, 92, 101, 209, 229, 237, 239, 241, 268, 304, 341], "mine": [6, 15, 90, 92, 93], "philosophi": [6, 24, 92], "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 49, 56, 64, 65, 66, 67, 68, 73, 76, 78, 80, 81, 88, 89, 90, 91, 92, 94, 103, 158, 159, 160, 162, 164, 167, 170, 229, 237, 249, 302, 323, 331, 343], "stronger": [6, 92], "flexibl": [6, 12, 13, 23, 41, 71, 77, 80, 90, 91, 92, 317, 321], "flow": [6, 92, 93, 158, 300], "oper": [6, 9, 12, 15, 30, 31, 36, 41, 52, 53, 54, 55, 58, 61, 63, 64, 65, 67, 71, 72, 73, 75, 80, 81, 84, 89, 90, 92, 93, 94, 95, 96, 101, 103, 111, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 130, 131, 132, 134, 135, 138, 139, 140, 141, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 192, 271, 272, 310, 313, 315, 317, 319, 322, 323, 330], "arbitrari": [6, 75, 77, 92, 162, 237, 241, 257, 258, 259, 260, 310, 313, 323, 341], "beyond": [6, 24, 92, 96, 270], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 40, 42, 48, 49, 52, 53, 63, 64, 65, 66, 68, 69, 70, 72, 76, 77, 80, 82, 89, 92, 93, 94, 95, 98, 164, 165, 168, 170, 172, 188, 240, 304, 310, 317, 322, 323, 330, 334, 335], "divers": [6, 10, 12, 34, 44, 63, 65, 92, 93, 159, 319], "easi": [6, 7, 12, 52, 53, 61, 64, 65, 67, 68, 76, 77, 78, 80, 83, 84, 89, 90, 91, 92, 96, 159, 164, 168, 330], "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 52, 55, 58, 61, 70, 73, 77, 80, 89, 90, 91, 92, 93, 94, 99, 103, 105, 158, 164, 172, 173, 312, 313, 319, 322, 327, 333, 337], "few": [6, 29, 52, 58, 64, 92, 322], "satisfactori": [6, 92, 95], "major": [6, 12, 13, 14, 70, 93, 100], "recent": [6, 162, 323], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 58, 65, 72, 78, 81, 84, 89, 90, 92, 93, 94, 95, 96, 97, 101, 102, 151, 162, 164, 166, 168, 172, 173, 314, 317, 319, 321, 333, 338, 343], "focu": [6, 40, 90, 94, 97, 168], "hand": [6, 30, 33, 65, 73, 75, 290], "point": [6, 13, 14, 22, 37, 65, 75, 84, 93, 158, 213, 238, 267, 270, 310, 323, 324, 325, 330], "breadth": [6, 101, 175], "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 42, 43, 49, 58, 61, 65, 66, 67, 68, 70, 75, 76, 77, 81, 85, 86, 89, 91, 92, 94, 95, 101, 102, 158, 159, 164, 166, 168, 172, 175, 179, 209, 225, 228, 237, 250, 253, 264, 265, 266, 267, 268, 271, 304, 309, 310, 313, 316, 317, 319, 322, 323, 324, 325], "search": [6, 37, 63, 69, 81, 90, 93, 95, 97, 101, 175, 339], "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 61, 90, 93, 96, 98, 101, 102, 175, 313, 316, 333], "shortest": [6, 7, 19, 24, 65, 91, 93, 101, 175, 325], "leav": [6, 77, 172, 210, 220], "varieti": [6, 12, 34, 61, 90, 97], "suffer": [6, 61], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 44, 46, 48, 52, 53, 58, 61, 63, 69, 72, 73, 76, 77, 80, 81, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 105, 162, 164, 166, 243, 264, 321, 322, 324, 326], "limit": [6, 9, 13, 22, 56, 58, 64, 68, 69, 70, 73, 78, 81, 93, 94, 95, 97, 98, 317, 336, 341], "phase": [6, 16, 23, 24, 159, 164], "propag": [6, 7, 9, 14, 36, 90, 91, 93, 95, 101, 164, 182, 272], "short": [6, 92, 97, 98, 190, 322, 323], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 30, 75, 77, 95, 169, 229, 252, 323, 341], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 41, 46, 80, 81, 90, 93, 95, 97, 165, 168, 310, 319, 323, 333, 334], "Such": [6, 13, 50, 94, 97, 132, 137, 269, 278], "abstract": [6, 61, 80, 84, 87, 90, 91, 92, 158, 159, 166, 168, 169, 324], "bring": [6, 40], "product": [6, 12, 32, 58, 84, 90, 94, 97, 103, 159, 160, 164, 341], "sacrific": 6, "almost": [6, 22, 77, 245, 322], "infeas": 6, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 58, 77, 89, 91, 92, 97, 100, 102, 162, 164, 168, 169, 307, 316, 321, 323, 325, 326, 334, 336, 340], "At": [6, 12, 14, 15, 20, 34, 37, 65, 76, 77, 159, 169, 323, 325], "advanc": [6, 7, 15, 65, 83, 84, 92, 256], "pose": 6, "challeng": [6, 9, 60, 90, 322], "repres": [6, 9, 12, 15, 41, 43, 44, 61, 65, 69, 73, 77, 81, 83, 84, 87, 89, 90, 91, 92, 93, 95, 98, 100, 101, 102, 109, 136, 159, 160, 161, 162, 164, 168, 170, 172, 216, 249, 257, 258, 259, 260, 261, 269, 276, 279, 283, 291, 300, 302, 304, 305, 310, 314, 317, 322, 323], "non": [6, 9, 27, 75, 97, 100, 103, 161, 199, 200, 220, 239, 241, 244, 268, 272, 279, 297, 310, 311], "ones": [6, 9, 96, 101, 166], "distil": 6, "critic": [6, 13, 81, 101], "context": [6, 15, 17, 18, 20, 27, 31, 44, 73, 92, 94, 101, 103, 108, 109, 110, 116, 117, 132, 137, 140, 141, 143, 152, 155, 168, 172, 175, 300, 315, 317, 322, 333], "fall": 6, "meet": [6, 15, 18, 37, 61, 65, 67, 84, 90, 95, 162, 163, 229, 258, 259, 260, 325, 327], "therefor": [6, 12, 15, 61, 65, 67, 69, 70, 73, 75, 77, 81, 91, 158, 159, 164, 256, 322, 331], "fulfil": [6, 15, 18, 52, 92], "ligra": 6, "By": [6, 13, 17, 20, 30, 36, 41, 42, 43, 49, 58, 61, 73, 75, 77, 78, 83, 89, 93, 95, 96, 159, 160, 175, 310, 319, 322, 331], "must": [6, 13, 24, 27, 30, 37, 42, 43, 44, 48, 53, 54, 58, 64, 75, 77, 90, 100, 102, 111, 159, 160, 162, 163, 164, 172, 174, 175, 188, 227, 229, 237, 240, 250, 252, 254, 257, 259, 261, 269, 272, 308, 310, 312, 316, 322, 323], "race": 6, "schedul": [6, 23, 36, 90, 92, 317], "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 40, 41, 42, 44, 58, 64, 65, 66, 69, 70, 73, 77, 89, 100, 101, 102, 119, 135, 160, 172, 229, 241, 253, 257, 267, 270, 288, 304, 310, 313, 316, 317, 322, 327, 330], "so": [6, 12, 13, 30, 37, 40, 55, 58, 64, 65, 67, 71, 76, 77, 81, 84, 86, 89, 90, 92, 101, 105, 158, 164, 166, 185, 220, 225, 238, 239, 240, 243, 258, 259, 260, 271, 304, 310, 322, 323, 337], "middlewar": 6, "flashwar": 6, "hide": [6, 61], "automat": [6, 9, 12, 14, 34, 41, 43, 52, 53, 64, 65, 68, 73, 76, 80, 89, 90, 93, 94, 95, 97, 102, 170, 172, 310, 323, 325, 326, 343], "adapt": [6, 22, 41, 52, 65, 95, 97, 98, 325, 326], "70": [6, 15, 341], "40": [6, 15, 98, 160, 161, 163, 237, 303], "commonli": [6, 70, 75, 80, 84, 89], "now": [6, 7, 20, 23, 27, 42, 49, 52, 64, 66, 69, 70, 72, 76, 77, 83, 101, 168, 241, 323, 325, 338], "succinct": [6, 73], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 46, 58, 61, 63, 65, 77, 78, 79, 81, 84, 90, 93, 94, 95, 96, 97, 100, 105, 160, 161, 162, 164, 165, 166, 167, 310, 317, 327], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 49, 54, 69, 75, 77, 89, 93, 94, 168, 172, 322, 324, 330, 334], "demonstr": [6, 16, 41, 64, 65, 72, 80, 85, 87, 90, 91, 93, 95, 97, 102, 158, 170, 172, 317, 322], "up": [6, 13, 20, 23, 37, 49, 69, 75, 77, 80, 82, 84, 96, 103, 168, 171, 209, 213, 237, 304, 322, 323, 340], "92": [6, 175], "bulk": [6, 15], "bsp": [6, 15], "paradigm": [6, 15, 80, 84, 90, 158, 164], "primari": [6, 15, 42, 43, 44, 52, 56, 73, 90, 97, 323], "constitut": [6, 87, 89], "superstep": [6, 16, 17, 24, 103], "vertexsubset": [6, 15], "indic": [6, 13, 24, 37, 38, 43, 44, 46, 48, 52, 53, 64, 77, 89, 92, 93, 94, 98, 109, 159, 161, 164, 172, 216, 219, 229, 232, 233, 234, 235, 237, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 254, 257, 258, 259, 260, 261, 264, 265, 266, 270, 300, 302, 305, 307, 312, 322], "maintain": [6, 10, 14, 35, 36, 43, 72, 73, 75, 90, 93, 94, 323], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 44, 48, 49, 53, 65, 66, 81, 101, 103, 160, 161, 164, 170, 172, 173, 175, 205, 310, 317, 323, 330], "describ": [6, 27, 36, 37, 38, 44, 53, 58, 64, 66, 77, 81, 82, 90, 94, 95, 102, 159, 162, 164, 169, 170, 209, 213, 229, 230, 231, 234, 239, 241, 242, 267, 268, 281, 288, 290, 304, 306, 307, 321, 322, 323, 331, 336], "vsize": [6, 15], "size_t": [6, 13, 57, 100, 103, 169, 319, 322], "vertexmap": [6, 13, 15, 57], "condit": [6, 9, 14, 24, 27, 38, 41, 65, 72, 77, 84, 92, 94, 98, 229, 258, 259, 260, 268, 269, 322], "f": [6, 20, 33, 64, 66, 83, 88, 91, 164, 175, 262, 263, 309, 323, 331, 337], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 61, 64, 66, 69, 72, 73, 75, 77, 81, 83, 84, 87, 90, 91, 95, 98, 100, 129, 137, 145, 158, 164, 166, 170, 172, 173, 257, 259, 261, 302, 314, 316, 323, 333, 334, 337, 342], "form": [6, 20, 65, 71, 73, 75, 77, 81, 84, 94, 95, 101, 158, 160, 161, 164, 211, 231, 261, 276, 278, 281, 284, 288, 310, 316], "special": [6, 20, 52, 56, 77, 90, 159, 278, 294, 304, 327], "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 64, 65, 67, 77, 83, 91, 101, 102, 175, 185, 216, 220, 222, 233, 239, 241, 243, 245, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 289, 298, 302, 303, 307, 310, 333], "omit": [6, 53, 89, 102, 183, 324, 343], "filter": [6, 15, 23, 41, 65, 72, 78, 89, 94, 101, 102, 302, 316, 322, 341], "semant": [6, 65, 84, 163, 322], "unchang": 6, "edgemap": [6, 15], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 42, 43, 44, 52, 57, 58, 64, 66, 67, 69, 70, 77, 81, 82, 84, 89, 91, 93, 94, 95, 97, 100, 101, 102, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 155, 157, 160, 161, 162, 163, 164, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 314, 316, 317, 319, 321, 322, 323, 325, 330, 333, 334, 335, 341, 343], "satisfi": [6, 9, 24, 32, 52, 67, 77, 94, 97, 101, 105, 169, 175, 227, 257, 261, 268, 269, 327], "h": [6, 9, 15, 16, 20, 36, 40, 46, 54, 81, 82, 98, 109, 175, 186, 189, 210, 237, 241, 257, 302, 309, 310, 322, 334, 339], "conduct": [6, 15, 77, 98, 164], "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 41, 42, 49, 52, 61, 64, 65, 69, 70, 72, 73, 75, 77, 78, 79, 80, 84, 89, 90, 91, 93, 94, 95, 96, 97, 159, 164, 234, 239, 241, 244, 249, 252, 257, 302, 310, 319, 322, 327, 330], "dynam": [6, 12, 34, 49, 50, 52, 65, 80, 90, 92, 93, 95, 101, 112, 125, 230, 231, 313, 319, 323], "even": [6, 8, 20, 65, 69, 77, 92, 93, 166, 172, 175, 239, 249, 267, 269, 270, 310, 322], "virtual": [6, 9, 23, 67, 69, 91, 100, 168, 169], "gener": [6, 9, 13, 14, 17, 27, 34, 40, 44, 49, 53, 61, 63, 65, 71, 73, 75, 77, 81, 84, 89, 90, 91, 92, 93, 95, 101, 110, 158, 159, 160, 164, 170, 172, 174, 175, 310, 311, 315, 317, 319, 321, 322, 323, 324, 325, 331], "index": [6, 12, 13, 31, 42, 43, 46, 57, 63, 81, 84, 89, 95, 100, 101, 102, 160, 161, 169, 172, 174, 175, 184, 208, 209, 239, 241, 242, 243, 245, 322, 339, 343], "pre": [6, 27, 29, 32, 48, 58, 65, 72, 77, 83, 87, 91, 94, 317, 336], "conveni": [6, 29, 58, 64, 69, 77, 81, 92, 164, 308, 310], "revers": [6, 20, 70, 77, 118, 121, 174, 175, 253, 261, 310], "exchang": [6, 14], "chosen": [6, 239, 246, 247, 248, 249, 250, 261, 265, 305], "temporari": 6, "sequenti": [6, 12, 14, 18, 34, 36, 90, 208, 209, 245, 322, 327, 333], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 49, 58, 64, 93, 165, 168, 317, 323, 335], "mode": [6, 15, 27, 32, 36, 58, 76, 85, 89, 100, 101, 102, 151, 158, 162, 168, 170, 172, 312, 317, 327, 331, 343], "push": [6, 12, 34, 37, 41, 65, 72, 93, 168], "anoth": [6, 9, 10, 20, 36, 44, 65, 75, 77, 89, 90, 91, 95, 103, 239, 272, 310, 322, 325, 326], "final": [6, 9, 13, 14, 17, 19, 24, 65, 69, 77, 81, 86, 90, 94, 100, 158, 164, 166, 252, 272, 310, 324], "reduc": [6, 9, 13, 14, 15, 17, 65, 69, 72, 76, 84, 159, 162, 258, 259, 260, 310, 323], "commut": 6, "alwai": [6, 51, 77, 86, 102, 206, 207, 246, 248, 267, 270, 304, 322, 330], "ctrue": 6, "doe": [6, 11, 12, 13, 20, 34, 37, 52, 75, 84, 89, 92, 94, 97, 161, 164, 169, 175, 194, 195, 237, 239, 241, 256, 267, 310, 312, 317, 322], "sometim": [6, 27, 77, 89, 220, 280], "similarli": [6, 19, 20, 44, 66, 77, 93, 175, 213, 239, 241, 257, 260, 267, 310, 331], "suppli": [6, 58, 73, 259], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 46, 48, 53, 54, 64, 77, 101, 162, 164, 167, 170, 175, 185, 230, 231, 239, 241, 242, 244, 245, 246, 248, 253, 257, 258, 259, 260, 261, 264, 301, 310, 312, 317], "auxiliari": [6, 15, 16, 77], "union": [6, 172, 238, 338], "minu": [6, 213], "intersect": [6, 94, 311], "add": [6, 15, 19, 20, 23, 29, 33, 37, 58, 77, 89, 91, 100, 103, 110, 111, 120, 159, 170, 172, 177, 178, 179, 229, 236, 249, 267, 270, 272, 288, 310, 313, 317, 322, 323, 334, 337, 338, 343], "getv": [6, 65], "besid": [6, 10, 38, 169, 170], "combin": [6, 14, 18, 34, 63, 65, 77, 80, 90, 91, 94, 158, 159, 160, 164, 310, 317, 326, 333], "primit": [6, 42, 92], "natur": [6, 12, 13, 24, 44, 61, 73, 77], "multi": [6, 31, 63, 73, 77, 80, 81, 84, 90, 92, 94, 95, 96, 97, 101, 162, 164, 166, 319, 323], "tradit": [6, 65, 69, 71, 73, 95, 287], "awkward": 6, "supplement": 6, "perspect": [6, 24, 92], "whole": [6, 9, 12, 24, 34, 52, 64, 65, 77, 81, 90, 92, 94, 95, 166, 323, 326], "pick": [6, 77, 98, 252, 267, 270], "transfer": [6, 61, 63, 80, 94, 96, 341], "intuit": [6, 52, 65, 73, 80, 94, 317], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 52, 63, 65, 70, 77, 80, 81, 84, 89, 90, 93, 95, 96, 98, 102, 158, 164, 166, 168, 169, 175, 216, 310, 316, 317, 322, 323], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 48, 65, 67, 77, 83, 84, 93, 95, 98, 159, 160, 161, 164, 170], "input": [6, 9, 12, 13, 15, 17, 22, 24, 42, 43, 46, 53, 54, 61, 81, 83, 84, 87, 89, 90, 91, 94, 95, 101, 120, 124, 145, 158, 159, 160, 161, 162, 164, 167, 170, 173, 175, 243, 257, 259, 261, 267, 268, 302, 310, 313, 314, 317, 322, 323, 337, 342], "second": [6, 13, 27, 43, 52, 61, 70, 77, 81, 89, 94, 97, 98, 102, 166, 255, 256, 264, 265, 266, 267, 271, 309, 310, 317, 323, 324], "fundament": [6, 9, 44, 65, 92], "modul": [6, 8, 9, 15, 19, 20, 23, 63, 65, 69, 75, 80, 90, 91, 92, 94, 95, 171, 309, 339], "produc": [6, 38, 40, 42, 65, 98, 101, 110, 158, 170, 172, 173, 175, 229, 243, 245, 253, 314, 323], "abil": [6, 12, 34, 48, 69, 73, 77, 84, 90], "activ": [6, 9, 23, 24, 30, 48, 53, 67, 86, 91, 95, 170, 317], "dens": [6, 81, 93, 95, 161, 170], "spars": [6, 13, 81, 95, 158, 161, 237, 310, 313], "dispatch": [6, 34, 90, 100], "kernel": [6, 246], "auto": [6, 14, 16, 34, 57, 77, 103, 319, 322, 324], "switch": [6, 12, 23, 34, 76, 93, 267, 270, 322, 330], "prove": [6, 24, 302], "world": [6, 9, 13, 61, 75, 77, 90, 91, 93, 100, 175, 230, 231, 257], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 13, 16, 20, 23, 30, 37, 44, 69, 72, 75, 77, 89, 92, 160, 161, 162, 168, 169, 172, 236, 243, 248, 256, 257, 261, 267, 310, 316, 319, 322], "co": [6, 23, 61, 91, 159, 337], "lead": [6, 17, 24, 58, 77, 95, 239, 241], "master": [6, 19, 22, 23, 24, 31, 333], "broadcast": [6, 100, 322], "mirror": [6, 7, 10, 24, 27, 32, 67, 82, 83], "On": [6, 27, 30, 37, 52, 65, 73, 75, 101, 244, 307, 322], "contrari": 6, "total": [6, 8, 12, 34, 61, 65, 66, 76, 77, 103, 185, 229, 252, 269, 275, 310, 324, 337], "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 49, 55, 58, 65, 66, 68, 71, 73, 75, 76, 77, 88, 91, 98, 109, 158, 160, 161, 163, 164, 165, 175, 181, 186, 188, 189, 194, 195, 213, 215, 216, 225, 233, 236, 238, 245, 254, 256, 261, 270, 277, 280, 281, 287, 288, 294, 296, 303, 304, 305, 310, 312, 313, 317, 322, 323, 324, 325, 326, 333, 336, 337, 341], "redund": [6, 53, 72], "programm": [6, 17, 90, 105], "scope": [6, 23, 37, 92, 172], "disabl": [6, 31, 46, 49, 54, 56, 66, 69, 98, 317], "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 46, 52, 56, 61, 65, 66, 71, 72, 73, 77, 78, 79, 80, 81, 82, 90, 93, 94, 95, 97, 105, 162, 164, 165, 166, 168, 229, 322, 330], "katz": [6, 101, 175], "eigenvector": [6, 101, 175, 302], "harmon": 6, "coeffici": [6, 19, 101, 175], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 41, 42, 44, 49, 55, 58, 67, 69, 73, 76, 83, 90, 92, 97, 98, 101, 165, 172, 230, 231, 246, 248, 261, 267, 288, 310, 319, 321, 322, 323, 330, 333, 336], "color": [6, 19, 20, 77, 310], "biconnect": 6, "bridg": [6, 63, 92], "seven": [6, 170, 209], "strongli": [6, 36, 67, 69, 77, 164, 249], "cut": [6, 12, 24, 295], "k": [6, 20, 37, 57, 66, 77, 81, 90, 91, 92, 94, 101, 102, 162, 175, 212, 220, 230, 231, 232, 233, 235, 237, 238, 239, 246, 249, 258, 259, 260, 262, 265, 266, 267, 268, 269, 270, 275, 310, 316, 322, 337, 341], "decomposit": [6, 91, 175], "degeneraci": 6, "onion": 6, "minim": [6, 11, 93, 170, 261, 262, 283, 309], "domin": [6, 175, 322], "cycl": [6, 92, 94, 97, 100, 177, 213, 214, 217, 228, 250, 254, 275, 277, 293, 297], "triangl": [6, 33, 77, 91, 94, 101, 175, 272, 276, 280, 284, 296, 311, 333, 337], "acycl": [6, 92, 304], "cyclic": [6, 90, 92, 94, 217], "diamond": [6, 280], "rectangl": 6, "tail": [6, 64, 69, 75, 77, 92, 331], "approxim": [6, 229, 302], "densest": 6, "articlerank": 6, "hyperlink": [6, 101, 175], "induc": [6, 73, 75, 101, 123, 186, 189, 205, 253, 310], "topic": [6, 7, 67, 83, 91, 101], "person": [6, 7, 30, 33, 42, 43, 44, 46, 48, 49, 64, 67, 69, 72, 73, 75, 77, 89, 91, 172, 290, 299, 310, 313, 316, 322, 323, 324, 338, 343], "standard": [6, 35, 49, 63, 65, 72, 77, 78, 89, 92, 173, 243, 258, 259, 260, 322], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 77, 225, 228, 253], "four": [6, 9, 12, 20, 87, 91, 92, 100, 158, 161, 170, 257, 261, 322], "random": [6, 28, 31, 84, 86, 90, 98, 162, 163, 164, 167, 170, 211, 222, 229, 232, 233, 234, 235, 237, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 270, 302, 305, 307, 309, 317], "give": [7, 12, 13, 31, 34, 43, 67, 77, 83, 89, 98, 164, 172, 237, 257, 277, 309, 310], "quick": [7, 67, 83, 323], "ll": [7, 13, 20, 29, 42, 43, 83], "pip": [7, 27, 30, 31, 32, 58, 64, 67, 83, 91, 168, 323, 330, 336, 340], "upgrad": [7, 23, 32, 67, 83, 340], "occur": [7, 9, 14, 32, 58, 75, 83, 323], "veri": [7, 13, 32, 61, 65, 67, 77, 80, 83, 89, 91, 95, 160, 162, 333], "speed": [7, 32, 52, 56, 77, 82, 83, 92, 171, 237, 310], "try": [7, 17, 23, 32, 36, 40, 58, 61, 67, 76, 82, 83, 86, 87, 91, 99, 101, 188, 229, 313, 317, 337], "site": [7, 32, 67, 83], "aliyun": [7, 27, 32, 67, 82, 83, 98, 317, 334], "pypi": [7, 27, 32, 58, 67, 68, 83, 336], "trust": [7, 27, 32, 67, 83], "host": [7, 15, 17, 22, 23, 27, 28, 32, 43, 46, 49, 55, 61, 66, 67, 69, 76, 83, 89, 98, 100, 101, 102, 313, 317, 333, 341, 343], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 58, 64, 67, 83, 91, 168, 257, 259, 310, 313, 323, 330, 335], "everyth": [7, 83, 91, 322], "job": [7, 13, 23, 61, 65, 83, 90, 91, 92, 96, 100, 135, 159, 317, 323], "modern_graph": [7, 30, 33, 43, 46, 64, 67, 91, 324], "gremlin": [7, 29, 33, 52, 58, 61, 64, 65, 66, 67, 72, 74, 78, 81, 84, 90, 91, 92, 96, 97, 99, 129, 164, 173, 317, 323, 331, 336, 337, 339, 344], "apach": [7, 17, 22, 23, 31, 63, 72, 73, 76, 79, 80, 90, 91, 94, 321, 323, 327, 333, 335, 339], "tinkerpop": [7, 49, 61, 63, 64, 66, 67, 76, 80, 91, 92, 173, 323, 339], "org": [7, 17, 23, 49, 58, 68, 76, 83, 86, 87, 91, 93, 101, 175, 233, 234, 235, 249, 252, 259, 272, 276, 277, 278, 279, 281, 282, 283, 289, 290, 291, 292, 294, 295, 296, 297, 302, 323, 333, 336, 337, 341], "doc": [7, 16, 17, 30, 37, 91, 92, 100, 104, 106, 172, 259], "tutori": [7, 8, 12, 14, 24, 64, 66, 67, 74, 80, 85, 89, 91, 93, 95, 170, 259, 327], "trigger": [7, 14, 15, 18, 37, 84, 91, 111, 325, 330], "ret": [7, 18, 76, 91, 333, 338], "selector": [7, 15, 33, 38, 91, 100, 102, 110, 116, 117, 127, 128, 132, 140, 141, 172, 315, 317, 333, 338], "homogen": [7, 81, 89, 91, 95, 160], "pg": [7, 91, 101, 317, 322], "none": [7, 9, 20, 27, 31, 70, 86, 88, 89, 91, 101, 102, 109, 116, 117, 120, 123, 127, 128, 129, 130, 132, 135, 137, 140, 141, 145, 151, 153, 157, 158, 159, 164, 172, 173, 174, 175, 183, 187, 189, 190, 194, 195, 204, 205, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 302, 304, 305, 307, 310, 312, 313, 314, 317, 322, 323, 338, 342, 343], "know": [7, 8, 30, 33, 38, 43, 44, 46, 64, 72, 74, 75, 77, 85, 89, 91, 94, 159, 160, 168, 172, 323, 324, 338, 341, 343], "src": [7, 13, 15, 16, 17, 18, 30, 34, 57, 61, 73, 76, 83, 84, 87, 89, 91, 101, 102, 109, 158, 160, 172, 316, 319, 322, 323, 325, 333, 337, 342, 343], "our": [7, 12, 13, 17, 32, 34, 36, 37, 40, 41, 43, 44, 49, 61, 65, 70, 72, 73, 82, 91, 93, 94, 95, 97, 98, 99, 165, 166, 175, 323, 325, 333], "learn": [7, 27, 32, 36, 37, 38, 40, 61, 65, 67, 80, 84, 85, 86, 92, 93, 96, 99, 153, 159, 162, 163, 164, 165, 168, 170, 315, 317, 337, 339], "technic": [7, 83, 166, 304, 310], "disaggreg": [7, 36], "deploy": [7, 29, 30, 33, 58, 61, 66, 77, 90, 96, 160, 170, 317, 323], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 52, 61, 64, 66, 71, 76, 77, 78, 80, 81, 90, 91, 92, 93, 95, 96, 97, 160, 162, 164, 166, 171, 239, 250, 257, 309, 322], "usag": [7, 17, 31, 32, 36, 37, 46, 51, 75, 77, 78, 82, 83, 84, 102, 161, 162, 163, 167, 172, 229, 310, 317, 323, 324], "section": [8, 13, 27, 29, 41, 43, 44, 53, 54, 74, 77, 81, 85, 90, 164, 165, 172, 209, 322, 323], "assum": [8, 23, 27, 30, 51, 64, 74, 77, 85, 91, 159, 172, 208, 269, 308, 310, 317, 322, 337], "getting_start": [8, 41, 51, 74, 85], "most": [8, 9, 13, 15, 22, 33, 38, 44, 52, 58, 65, 69, 70, 72, 75, 77, 81, 89, 91, 93, 95, 97, 98, 102, 158, 160, 164, 166, 168, 172, 230, 231, 255, 258, 259, 260, 323], "suffici": [8, 17, 58, 90, 159], "louvain": [8, 93, 101, 333], "social": [8, 44, 61, 66, 77, 90, 93, 95, 98, 237, 287, 302, 311], "scientist": [8, 80, 97], "familiar": [8, 14, 16, 29, 65], "manipul": [8, 11, 19, 20, 52, 75, 77, 80, 94, 97, 99, 100, 310], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 45, 52, 53, 89, 100, 162, 163, 167, 317, 333], "pydata": [8, 96], "eco": 8, "still": [8, 24, 27, 34, 38, 61, 77, 93, 188, 317, 322, 323], "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 52, 61, 69, 72, 73, 77, 79, 81, 84, 89, 95, 100, 159, 162, 164, 165, 166, 167, 302, 310, 313, 317, 323, 327], "migrat": [8, 65, 83, 86, 87, 91, 92, 97, 319, 337], "transpar": [8, 90], "don": [8, 17, 23, 30, 33, 36, 37, 58, 64, 77, 111, 204, 310, 323], "autom": [9, 29, 92], "abl": [9, 24, 27, 49, 64, 92, 163, 267, 322, 323], "batch": [9, 12, 19, 43, 66, 76, 81, 84, 88, 92, 95, 158, 161, 163, 164, 166, 168, 170, 174, 323, 342], "counterpart": [9, 72, 80, 92], "redesign": [9, 92], "underli": [9, 61, 65, 77, 92, 166, 322], "equip": [9, 79, 80, 92, 98, 327], "polici": [9, 58, 92, 100, 317], "memori": [9, 12, 23, 24, 27, 34, 46, 58, 61, 63, 73, 76, 80, 82, 85, 86, 90, 92, 93, 95, 96, 97, 98, 158, 159, 160, 166, 170, 172, 310, 317, 323, 326, 335, 336], "todai": 9, "static": [9, 16, 31, 76, 100, 323, 325], "recomput": 9, "costli": 9, "consum": [9, 58, 95, 166, 169], "especi": [9, 89], "trillion": 9, "commerc": [9, 90, 93], "constantli": 9, "issu": [9, 17, 32, 37, 58, 61, 64, 67, 76, 92, 93, 97, 233, 234, 235, 299, 336], "involv": [9, 13, 37, 40, 41, 52, 61, 65, 77, 81, 84, 90, 93, 94, 95, 96, 97], "adjust": [9, 12, 41, 42, 58], "old": [9, 12, 14, 32, 34, 69, 317], "typic": [9, 24, 41, 49, 52, 61, 73, 75, 77, 90, 93, 94, 97, 159, 164, 239, 310, 316, 322], "often": [9, 37, 44, 52, 61, 64, 76, 90, 93, 94, 95, 97, 160, 161, 164, 310, 323, 331], "overlap": [9, 317], "intervent": 9, "burden": [9, 15, 160], "expert": 9, "light": 9, "overal": [9, 95], "verifi": [9, 27, 38, 61, 64, 66, 70, 98, 164], "characterist": [9, 73, 84, 90, 95, 158, 163], "deduc": [9, 172, 343], "appropri": [9, 27, 40, 43, 65, 81, 90, 95, 158], "record": [9, 13, 52, 64, 67, 68, 69, 77, 91, 169, 319, 323], "part": [9, 13, 37, 61, 65, 75, 81, 84, 92, 164, 165, 168, 170, 293, 310, 322, 323], "intermedi": [9, 12, 17, 65, 72, 77, 80, 90, 92], "deliv": [9, 341], "There": [9, 10, 12, 34, 37, 38, 58, 64, 65, 77, 91, 93, 94, 95, 101, 160, 163, 164, 166, 310, 316, 317, 322, 323], "reshap": [9, 170], "eas": [9, 12, 34, 46, 67, 95, 97, 98], "achiev": [9, 12, 20, 24, 27, 34, 52, 77, 90, 93, 98, 319], "decid": [9, 160, 257], "due": [9, 58, 90, 97, 164], "among": [9, 65, 77, 90, 97, 100, 169, 175, 304, 323], "fetch": [9, 15, 17, 317, 323, 333], "suffic": 9, "replai": [9, 84, 92, 319], "affect": [9, 13, 30, 36, 37, 72, 310], "area": [9, 15, 52, 69, 261, 307], "readili": 9, "obtain": [9, 14, 17, 29, 30, 65, 66, 68, 72, 76, 80, 81, 84, 87, 91, 95, 159, 163, 164, 166, 285, 288, 304, 310, 317, 323], "simpli": [9, 17, 20, 41, 53, 64, 69, 77, 89, 91, 164, 232, 236, 310], "coincid": 9, "idea": [9, 37, 81, 95, 105, 166], "invalid": [9, 172, 317], "miss": [9, 37, 162, 172, 220, 317], "comparison": [9, 19, 70, 75, 77, 80, 97, 98], "those": [9, 29, 44, 46, 52, 64, 66, 69, 70, 73, 77, 89, 99, 162, 172, 175, 186, 215, 217, 219, 310, 312, 316], "although": [9, 12, 14, 22, 34, 48, 61, 91, 105, 209, 322, 323], "solut": [9, 31, 52, 58, 94, 95, 97, 175, 336], "enough": [9, 84, 159, 162, 229, 317, 321], "caus": [9, 14, 22, 32, 37, 58, 76, 83, 95, 160, 166, 172, 209], "overwhelm": 9, "overhead": [9, 13, 97, 159, 160], "mf": 9, "delta": [9, 12, 13, 33, 37, 101, 172], "php": 9, "mp": 9, "cc": [9, 322, 338], "sswp": 9, "mv": [9, 69], "track": 9, "gcn": [9, 80, 84, 95, 99, 158, 162, 166, 170, 337, 339, 342, 344], "commnet": 9, "me": 9, "keep": [9, 77, 84, 103, 164, 172, 267, 270, 323], "graphsag": [9, 80, 84, 91, 95, 99, 158, 162, 164, 166, 170, 339, 342, 344], "gin": [9, 95], "vldb": [9, 333, 339], "paper": [9, 14, 24, 81, 83, 86, 87, 88, 90, 91, 92, 98, 170, 175, 307, 317, 333, 337], "publish": [9, 14, 24, 29, 72, 90, 91], "2021": [9, 92], "denot": [9, 48, 50, 52, 75, 77, 163, 238, 323], "w": [9, 76, 101, 175, 237, 243, 257, 260, 262, 267, 270, 272, 300, 310, 312, 323, 341], "respect": [9, 16, 38, 53, 63, 65, 70, 75, 89, 90, 91, 94, 95, 101, 120, 137, 145, 161, 164, 175, 216, 229, 276, 310, 316, 322, 323], "initi": [9, 16, 18, 19, 41, 42, 43, 54, 66, 77, 88, 93, 95, 100, 159, 160, 170, 172, 174, 175, 249, 251, 252, 310, 313, 323, 327, 333], "init_v": 9, "init_m": 9, "aggreg": [9, 65, 70, 78, 95, 103, 158, 164, 166, 170, 322, 341], "vector": [9, 57, 81, 87, 91, 95, 100, 103, 158, 166, 168, 175, 257, 261], "element": [9, 13, 44, 70, 75, 77, 93, 100, 159, 162, 164, 172, 175, 205, 237, 282, 304, 316, 317, 322], "specifi": [9, 16, 20, 23, 24, 30, 36, 41, 42, 43, 44, 46, 48, 49, 52, 53, 54, 64, 70, 73, 75, 80, 84, 91, 93, 101, 103, 109, 116, 117, 127, 128, 132, 136, 140, 141, 157, 158, 159, 161, 164, 167, 172, 174, 175, 186, 194, 195, 216, 229, 239, 241, 242, 245, 246, 253, 257, 258, 259, 260, 261, 267, 270, 272, 275, 288, 307, 310, 312, 316, 317, 323, 324], "addition": [9, 12, 14, 36, 44, 69, 81, 87, 90, 92, 94, 97, 166, 175, 322, 331], "correspond": [9, 10, 13, 15, 17, 18, 37, 40, 65, 69, 73, 75, 77, 80, 84, 89, 94, 97, 101, 135, 158, 159, 160, 161, 163, 164, 168, 172, 175, 208, 209, 239, 241, 242, 243, 244, 245, 257, 303, 304, 306, 310, 312, 313, 319, 323, 331], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 57, 100, 319, 322, 323, 324, 333], "m1": [9, 58, 67, 211, 336, 340], "m2": [9, 211], "below": [9, 10, 12, 20, 34, 35, 36, 37, 43, 46, 48, 49, 84, 90, 91, 93, 94, 95, 98, 159, 162, 164, 167, 170, 209, 239, 241, 275, 310, 317, 323], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 91, 98, 100, 168, 323, 333, 337], "dbl_max": 9, "backend": [9, 27, 29, 80, 83, 90, 91, 95, 172, 310, 317, 324, 337], "seamless": [9, 48, 61, 96, 323], "block": [9, 58, 65, 161, 237, 323], "spawn": 9, "adopt": [9, 41, 53, 97, 162, 323], "csc": [9, 321], "csr": [9, 13, 57, 172, 321, 324], "sent": [9, 10, 14, 16, 24, 76], "mainten": [9, 322], "preserv": [9, 13, 53, 72, 102, 172, 272, 302], "effect": [9, 36, 37, 41, 52, 53, 61, 72, 75, 76, 84, 90, 95, 162, 241, 310, 323], "readi": [9, 30, 32, 37, 52, 58, 61, 66, 76, 90, 160, 162, 317, 323, 331], "accept": [9, 41, 49, 175, 257, 261, 323, 324], "insert": [9, 14, 65, 130, 323], "newli": [9, 40, 41], "particular": [9, 37, 70, 75, 101, 161, 164, 239], "incid": [9, 20, 73, 75, 77, 186, 187, 229, 251, 300, 310], "encod": [9, 13, 70, 73, 101, 159, 164, 170, 172, 174, 312, 323, 342], "dummi": 9, "furthermor": [9, 76, 77, 80, 90, 97], "proprieti": 9, "deduct": 9, "techniqu": [9, 34, 84, 92, 93, 164], "cancel": 9, "compens": 9, "whose": [9, 24, 69, 77, 162, 164, 175, 180, 200, 282, 286, 302, 304, 305, 321, 322], "proce": [9, 49, 229, 323], "inner": [10, 13, 16, 57, 77, 78, 103, 172, 322], "outer": [10, 14, 57, 70, 103, 225, 322], "cross": [10, 73, 105, 285], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 44, 48, 49, 52, 53, 58, 64, 73, 77, 86, 90, 91, 93, 94, 98, 100, 101, 102, 109, 111, 113, 129, 136, 153, 161, 172, 210, 212, 213, 215, 217, 219, 220, 222, 224, 225, 228, 239, 241, 242, 244, 246, 247, 248, 250, 254, 255, 256, 262, 263, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 305, 312, 317, 322, 323, 331], "5": [10, 13, 19, 20, 31, 58, 66, 71, 75, 77, 83, 84, 86, 87, 88, 91, 94, 98, 158, 161, 163, 164, 165, 167, 170, 175, 181, 186, 188, 194, 213, 216, 229, 233, 234, 235, 237, 238, 246, 248, 255, 256, 257, 258, 260, 261, 275, 276, 278, 279, 280, 281, 283, 284, 287, 289, 291, 293, 294, 300, 305, 310, 316, 317, 323, 325, 331, 336, 337, 341], "9": [10, 31, 64, 67, 77, 91, 159, 175, 213, 215, 261, 279, 287, 300, 305, 340], "12": [10, 20, 32, 58, 67, 77, 98, 101, 159, 160, 161, 163, 165, 177, 178, 179, 215, 277, 278, 282, 286, 290, 296, 334, 336, 340, 341], "split": [10, 43, 72, 75, 77, 86, 87, 88, 159, 160, 317, 323], "roughli": 10, "across": [10, 14, 34, 35, 36, 49, 73, 90, 92, 93, 97, 322, 324], "divid": [10, 70, 77, 81, 90, 101, 159, 162, 166, 167, 175, 321], "place": [10, 18, 19, 36, 42, 43, 64, 77, 168, 169, 172, 237, 257, 258, 259, 260, 261, 290, 308], "itself": [10, 20, 22, 37, 75, 77, 81, 89, 90, 103, 158, 160, 316, 317, 322], "replic": [10, 66, 251], "resid": [10, 14, 38], "j": [10, 31, 57, 101, 170, 175, 208, 209, 230, 231, 239, 241, 242, 244, 250, 261, 264, 265, 266, 288, 322], "outcom": 10, "outgo": [10, 13, 16, 24, 75, 77, 94, 103, 164, 175, 310, 322], "incom": [10, 13, 14, 16, 34, 75, 77, 100, 103, 175], "consid": [10, 15, 18, 27, 37, 72, 77, 84, 93, 101, 102, 159, 160, 175, 239, 302, 319, 322], "vice": [10, 257], "versa": [10, 257], "compani": [10, 322], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 61, 75, 89, 97, 159, 160, 164, 167, 322, 323], "regardless": [10, 53, 70, 92, 159, 255, 322], "friendli": [11, 12, 37, 63, 80, 93, 95, 96, 97], "research": [11, 72, 84, 95, 300, 317], "particularli": [11, 95, 302], "field": [11, 27, 30, 33, 38, 42, 44, 64, 84, 86, 87, 89, 91, 162, 166, 170, 172, 256, 317, 323, 334, 337], "scienc": [11, 264, 287], "solv": [11, 24, 37, 58, 60, 77, 93], "recast": [12, 14, 34], "ga": 12, "plug": [12, 34, 90], "minor": [12, 14, 34, 80, 90, 95, 98, 325], "cope": [12, 34], "life": [12, 32, 34, 64, 90], "extrem": [12, 27, 90, 166, 211, 222, 322], "fashion": [12, 20], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 41, 44, 65, 72, 73, 75, 77, 80, 81, 84, 92, 93, 95, 97, 98, 100, 101, 103, 161, 162, 164, 166, 212, 213, 214, 225, 228, 236, 282, 304, 317, 319, 321, 322, 323, 324], "format": [12, 13, 20, 22, 34, 35, 42, 43, 46, 61, 63, 77, 81, 89, 95, 96, 98, 101, 129, 136, 158, 161, 164, 166, 169, 170, 172, 173, 310, 312, 317, 319, 335], "unifi": [12, 34, 61, 63, 65, 159, 319], "care": [12, 34, 77, 168, 169, 322], "foreign": [12, 322], "ecosystem": [12, 49, 55, 63, 67, 79, 80, 94, 97, 327], "freedom": 12, "accord": [12, 19, 36, 41, 46, 58, 64, 65, 69, 75, 77, 81, 89, 90, 94, 95, 100, 162, 164, 168, 229, 237, 249, 250, 319, 323], "demand": [12, 52, 65, 93, 322, 323, 327], "sdk": [12, 18, 58, 64, 68, 78, 79, 80, 93, 94, 97, 105, 315, 323, 327, 333], "domain": [12, 69, 90, 95, 257, 258, 259, 260, 261], "dedic": 12, "treat": [12, 14, 20, 34, 77, 172, 310, 312, 317], "immut": [12, 34, 63, 73, 92], "persist": [12, 15, 30, 34, 58, 63, 64, 90, 92, 97, 321], "fortun": [12, 20, 42, 61], "grin": [12, 63], "awar": [12, 37, 41, 49, 58, 64, 92], "introduct": [12, 34, 45, 78, 93, 163, 164, 167, 175, 220, 302, 322], "foundat": [12, 56, 72, 90], "visit": [12, 29, 49, 69, 77, 94, 159], "meanwhil": [12, 61, 80, 95, 322], "compress": [12, 13, 51, 91, 101, 159, 275], "pipelin": [12, 34, 80, 90, 93, 97, 326], "balanc": [12, 160, 210], "link": [12, 31, 37, 38, 44, 48, 58, 60, 65, 73, 81, 95, 98, 101, 172, 175, 212, 233, 235, 236, 246, 247, 248, 307, 310, 317], "popular": [12, 22, 29, 50, 61, 89, 91, 94, 95, 158, 170, 323], "freeli": [12, 24], "background": [12, 60], "interoper": [12, 322], "panda": [12, 61, 69, 100, 102, 116, 127, 172, 310, 339], "mar": [12, 27, 61, 75, 92, 317], "fastffi": [12, 105], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 42, 52, 53, 58, 64, 70, 71, 73, 75, 78, 79, 80, 90, 92, 94, 97, 100, 211, 222, 229, 305, 308, 310, 327, 333], "emploi": [12, 24, 34, 48, 87, 92, 93], "captur": [12, 95], "20": [12, 13, 27, 29, 32, 34, 64, 67, 75, 77, 80, 98, 101, 102, 160, 161, 163, 172, 229, 257, 258, 279, 281, 310, 333, 334, 340, 341], "100": [12, 34, 69, 77, 83, 86, 87, 91, 101, 170, 175, 232, 239, 243, 250, 259, 310, 317, 337, 341], "build": [12, 15, 31, 34, 35, 37, 58, 65, 69, 76, 80, 81, 89, 92, 100, 101, 111, 113, 160, 164, 166, 168, 169, 172, 258, 259, 260, 302, 317, 319, 330, 335, 342], "been": [12, 17, 23, 24, 28, 29, 33, 37, 41, 58, 65, 66, 67, 69, 72, 75, 77, 79, 81, 90, 92, 93, 94, 95, 97, 101, 150, 162, 164, 172, 173, 175, 229, 252, 302, 314, 327], "go": [13, 82, 170, 237, 290, 323], "impact": [13, 94], "dive": 13, "arrowfrag": [13, 16, 100, 324], "vineyard": [13, 15, 16, 23, 28, 31, 33, 57, 58, 63, 64, 73, 80, 85, 86, 90, 96, 97, 100, 102, 132, 137, 140, 141, 172, 173, 317, 322, 323, 331, 333, 336, 337, 338, 341, 343], "basic": [13, 16, 20, 42, 43, 75, 94, 158, 161, 166, 168, 169, 170, 229, 239, 244, 316], "member": [13, 16, 77, 100, 300], "string": [13, 17, 23, 33, 44, 64, 69, 70, 73, 89, 100, 101, 103, 108, 145, 159, 160, 161, 162, 163, 164, 167, 169, 170, 171, 172, 174, 175, 190, 194, 195, 204, 302, 304, 306, 310, 312, 319, 322, 323, 324, 333, 341, 343], "consecut": 13, "hashmap": [13, 57, 172], "arrai": [13, 17, 57, 70, 81, 89, 95, 100, 101, 102, 161, 162, 164, 167, 170, 310, 313, 325, 333], "o2g_": 13, "fragment_id": 13, "_": [13, 30, 37, 68, 89, 101, 172, 175, 310, 313, 333, 336, 338, 343], "vertex_label": [13, 100, 103], "perfect": [13, 172], "int64_t": [13, 57, 64, 89, 100, 101, 172, 325, 343], "std": [13, 14, 15, 57, 100, 319, 324], "string_view": 13, "uint64_t": [13, 16, 172, 319], "oid_arrays_": [13, 57], "topologi": [13, 81, 84, 92, 161, 166, 307, 319, 321, 322], "row": [13, 43, 64, 72, 81, 95, 159, 172, 303, 323], "matrix": [13, 89, 95, 101, 166, 175, 237, 255, 270, 273, 302, 310, 313], "src_type": [13, 161], "edge_typ": [13, 42, 44, 46, 83, 86, 87, 91, 158, 160, 161, 162, 163, 164, 167, 170, 174, 322, 337, 342], "pair": [13, 20, 67, 70, 73, 77, 100, 101, 103, 157, 170, 209, 214, 215, 221, 237, 255, 261, 310, 313, 316, 322, 324], "indptr": 13, "ie_lists_": [13, 57], "edge_label": [13, 69, 100, 103, 317], "neighbor_vertex_id": 13, "edge_table_index": 13, "tabl": [13, 41, 43, 46, 72, 73, 77, 81, 89, 98, 158, 160, 172, 317, 319, 321, 322, 324], "uint32_t": [13, 100, 172], "num_edg": 13, "ie_offsets_lists_": [13, 57], "offset": [13, 57, 100, 161, 169, 213], "slice": [13, 65, 102, 172, 316], "ie_list": 13, "ie_offset": 13, "arai": 13, "num_vertic": 13, "oe_lists_": [13, 57], "oe_offsets_lists_": [13, 57], "oe_list": 13, "oe_offset": 13, "edge_tables_": [13, 57], "vertex_tables_": [13, 57], "oid_t": [13, 15, 16, 57, 100], "vid_t": [13, 15, 16, 57, 100], "sizeof": 13, "uint8_t": 13, "load_factor": 13, "observ": [13, 23, 58], "practic": [13, 16, 28, 65, 73, 81, 84, 90, 95, 159, 160, 162, 323], "load_factori": 13, "15": [13, 58, 77, 86, 87, 88, 98, 160, 161, 163, 164, 270, 292, 303, 310, 317], "extra": [13, 37, 58, 64, 66, 175, 271, 336], "column": [13, 18, 33, 42, 43, 44, 46, 57, 61, 65, 73, 81, 89, 91, 95, 100, 102, 103, 110, 159, 169, 172, 303, 319, 323, 324, 333, 337, 343], "edge_id": 13, "uniqu": [13, 42, 43, 44, 54, 65, 69, 73, 89, 90, 91, 92, 101, 149, 150, 159, 163, 168, 169, 172, 175, 277, 283, 316, 323, 324], "kept": [13, 75, 77, 100], "summari": [13, 97, 190], "argument": [13, 23, 30, 75, 77, 84, 89, 175, 177, 178, 179, 208, 216, 246, 253, 257, 258, 259, 260, 261, 288, 310, 313, 316, 317, 323, 324, 333], "use_perfect_hash": [13, 100, 151, 172, 317], "load_from": [13, 22, 30, 172, 317], "realli": 13, "margin": 13, "former": [13, 93], "globalvertexmap": 13, "later": [13, 18, 20, 32, 33, 67, 69, 77, 94, 172, 317, 322, 323, 340], "localvertexmap": 13, "suitabl": [13, 51, 90, 97, 160, 164, 170, 229, 323, 326], "dozen": 13, "hundr": [13, 239, 250], "repeatedli": [13, 65, 93], "add_vertic": [13, 61, 69, 89, 172, 310, 313, 314, 337, 338, 343], "sure": [13, 23, 27, 30, 40, 42, 49, 66, 69, 77, 164, 168, 170, 317, 323], "fairli": [13, 67], "8": [13, 20, 31, 32, 33, 35, 37, 58, 64, 67, 69, 77, 80, 83, 98, 101, 159, 213, 236, 255, 278, 287, 289, 295, 299, 305, 307, 310, 312, 323, 325, 336, 341], "absolut": 13, "int32_t": [13, 89, 172, 343], "vid_typ": [13, 33, 100, 151, 172, 317], "compact_edg": [13, 100, 151, 172, 317], "compact": [13, 100, 172], "varint": [13, 172], "half": [13, 172], "generated_eid": 13, "save": [13, 18, 28, 29, 48, 64, 160, 175, 323], "interact": [13, 27, 29, 33, 36, 37, 38, 40, 41, 42, 44, 50, 52, 53, 54, 55, 61, 64, 65, 66, 68, 69, 71, 72, 74, 76, 77, 78, 80, 89, 90, 92, 93, 96, 97, 99, 129, 172, 251, 300, 315, 317, 337, 341], "vertex_id": [13, 24, 53, 61, 89, 343], "retain_oid": [13, 64, 89, 100, 151, 172, 317, 324, 343], "gain": [13, 37], "signific": [13, 92, 97], "arrowprojectedfrag": [13, 15, 16, 100, 109], "implicit": [13, 313], "arrowflattenfrag": 13, "thought": [13, 238], "view": [13, 20, 24, 56, 89, 90, 121, 183, 187, 206, 207, 310, 313, 319, 331], "mainli": [13, 43, 65, 70, 77, 97, 166], "purpos": [13, 72, 77, 90, 322], "penalti": 13, "arrowprojectfrag": 13, "r1": [13, 102, 325, 326], "r2": [13, 102, 325, 326], "r3": [13, 102, 325], "projected_g": 13, "_project_to_simpl": [13, 16, 17, 22], "otherwis": [13, 33, 77, 93, 101, 159, 163, 164, 165, 175, 192, 229, 249, 259, 308, 310, 317, 322, 323], "express": [14, 15, 24, 65, 70, 71, 73, 84, 92, 94, 102, 159, 161, 164, 261, 310, 341], "modifi": [14, 20, 24, 28, 46, 52, 64, 70, 76, 114, 115, 130, 131, 165, 188, 241, 308, 321, 322], "adher": [14, 35, 44, 322], "think": [14, 24], "principl": [14, 168], "privileg": 14, "experienc": [14, 94], "inform": [14, 15, 16, 19, 27, 29, 38, 46, 49, 58, 65, 66, 69, 70, 73, 87, 91, 93, 95, 96, 105, 119, 158, 159, 160, 161, 164, 166, 168, 172, 175, 190, 208, 249, 271, 272, 300, 310, 317, 319, 323, 330], "hop": [14, 65, 73, 75, 77, 80, 81, 84, 90, 94, 95, 158, 162, 164, 166, 167, 168, 170], "slow": [14, 67], "consequ": [14, 90, 93], "piec": [14, 50, 63, 169, 317], "destin": [14, 33, 42, 43, 44, 64, 69, 70, 77, 81, 89, 91, 100, 102, 118, 159, 160, 161, 163, 164, 170, 172, 174, 316, 321, 322, 323, 343], "abovement": 14, "peval": [14, 16, 17, 18, 34, 93, 100, 108, 327, 333], "incev": [14, 16, 17, 18, 34, 93, 100, 108, 327, 333], "assembl": [14, 34, 65, 92, 93, 100, 172], "unlik": [14, 17, 71, 81, 84, 90, 310], "modif": [14, 22, 80, 90, 95, 172, 313], "convent": [14, 37, 58, 72, 243, 269, 331], "taught": [14, 77], "colleg": 14, "textbook": 14, "answer": [14, 34, 37, 58, 69, 90, 323], "collect": [14, 34, 70, 75, 76, 77, 94, 95, 96, 170, 310], "partial": [14, 16, 18, 34, 75, 100, 102, 159, 252, 327], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 64, 84, 97, 159, 167, 175, 245, 310], "accur": [14, 69, 72], "long": [14, 17, 30, 33, 38, 53, 69, 73, 77, 92, 97, 101, 164, 322, 323, 333, 341], "const": [14, 15, 16, 57, 100, 103, 168, 169, 322, 323, 324], "fragment_t": [14, 15, 16, 100], "frag": [14, 17, 18, 57, 108, 319, 324, 333], "context_t": [14, 15, 16, 100], "ctx": [14, 17, 22, 100, 333], "message_manager_t": [14, 16, 100], "vertex_t": [14, 16, 57, 100], "native_sourc": [14, 18, 333], "getinnervertex": [14, 100], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 57, 100, 319, 333], "get_neighbor": 14, "min": [14, 18, 24, 67, 70, 103, 333, 341], "static_cast": [14, 16, 57, 319], "get_data": [14, 57], "isoutervertex": [14, 100], "put": [14, 16, 17, 22, 46, 168], "channel": [14, 16, 37], "syncstateonoutervertex": 14, "els": [14, 16, 18, 57, 77, 160, 170, 172, 268, 322, 323, 333], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 57, 100, 319, 333], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 77, 103, 322], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 333], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 57, 100], "dijkstra": [14, 18, 93, 175, 333], "checkout": [14, 37, 165], "seri": [15, 77, 95, 100, 164, 322], "strong": [15, 65, 93], "typenam": [15, 16, 57, 100], "frag_t": [15, 16, 100], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 37, 41, 42, 64, 76, 77, 94, 161, 164, 168, 170, 316, 325], "shared_ptr": [15, 57, 100, 319, 324], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 29, 36, 40, 53, 69, 77, 89, 317, 333, 343], "global": [15, 24, 65, 73, 75, 77, 95, 151, 172, 302, 317, 324, 341], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 40, 43, 64, 65, 77, 89, 95, 272, 316], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "o_sourc": 15, "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 42, 46, 49, 54, 57, 86, 89, 100, 101, 103, 108, 158, 160, 161, 165, 168, 170, 310, 313, 319, 327, 333, 342, 343], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 218], "len": [15, 77, 86, 160, 175, 184, 215, 232, 234, 237, 239, 240, 244, 310], "ed": [15, 23, 243, 257, 264, 287, 293], "ctruee": 15, "rather": [15, 18, 52, 77, 89, 94, 96, 97, 175, 229, 271, 322], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 30, 112, 313], "dynamic_properti": [15, 125, 313], "def": [15, 18, 23, 68, 83, 86, 87, 88, 89, 91, 108, 158, 160, 161, 162, 163, 164, 167, 170, 216, 323, 333, 337, 338, 342, 343], "arg": [15, 86, 100, 101, 102, 103, 136, 154, 161, 162, 163, 164, 167, 170, 174, 317, 323], "appasset": [15, 18, 108, 109, 113, 315, 333], "algo": [15, 16, 17, 22, 23, 101, 109], "flash_bf": 15, "vertex_data": [15, 16, 101, 109], "gscoordin": [15, 28, 36], "builtin": [15, 19, 20, 53, 311, 313, 315], "gs_conf": [15, 16, 109], "yaml": [15, 16, 28, 29, 38, 41, 42, 43, 44, 49, 53, 54, 64, 76, 101, 109, 317, 321, 323, 341], "cpp_flash": 15, "class_nam": [15, 16, 109], "compatible_graph": [15, 16, 109], "immutableedgecutfrag": 15, "log": [15, 17, 41, 58, 63, 86, 87, 90, 92, 322, 324, 336], "p2p": [15, 17, 22, 23], "network": [15, 27, 44, 58, 61, 63, 66, 77, 81, 85, 87, 90, 91, 93, 96, 97, 98, 99, 101, 158, 159, 160, 162, 164, 166, 170, 175, 230, 231, 237, 239, 243, 246, 247, 248, 251, 263, 287, 298, 299, 301, 302, 307, 311, 325, 336], "load_p2p_network": [15, 16, 17, 18, 61, 101, 102, 333], "attribut": [15, 19, 73, 84, 87, 91, 93, 95, 100, 101, 134, 145, 160, 161, 163, 166, 170, 171, 174, 175, 177, 178, 179, 194, 195, 204, 216, 229, 234, 253, 257, 258, 259, 260, 261, 264, 265, 266, 300, 302, 304, 307, 308, 310, 311, 313, 319], "convert": [15, 20, 23, 48, 72, 81, 101, 116, 117, 127, 128, 140, 141, 158, 159, 166, 170, 230, 231, 288, 305, 310, 312, 313, 319], "simple_graph": [15, 16], "dist": [15, 17, 49, 68, 101, 102, 165, 168, 257, 259, 261, 317, 333, 341], "codegen": [15, 65], "bit": [15, 67, 70, 75, 77], "longer": [15, 86, 103, 317], "retriev": [15, 45, 48, 63, 69, 73, 75, 91, 92, 102, 116, 117, 127, 128, 132, 136, 140, 141, 161, 162, 164, 170, 175, 316, 323, 324], "displai": [15, 54, 76, 159], "vertex_rang": [15, 102, 116, 117, 127, 128, 132, 140, 141, 172, 316], "end": [15, 16, 57, 61, 70, 75, 77, 84, 85, 86, 87, 88, 89, 90, 91, 94, 97, 102, 103, 164, 169, 175, 189, 198, 203, 204, 217, 229, 312, 316, 322, 327], "sort_valu": 15, "pip3": [16, 19, 23, 35, 37, 58, 68, 76, 334, 336, 340], "degre": [16, 19, 20, 57, 61, 72, 77, 84, 101, 103, 161, 162, 167, 175, 184, 209, 210, 229, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 255, 267, 268, 269, 270, 304, 310, 311, 323], "vertexdatacontext": [16, 17, 100, 175, 333], "myappcontext": 16, "explicit": [16, 100, 254, 310, 317], "parallelmessagemanag": [16, 17, 333], "param1": 16, "setvalu": [16, 17, 333], "vertex_array_t": [16, 100], "variabl": [16, 29, 33, 40, 58, 66, 75, 108, 229, 317, 323, 324, 336], "And": [16, 18, 23, 29, 31, 36, 38, 61, 65, 67, 75, 77, 89, 98, 101, 102, 163, 168, 313, 316, 317], "zero": [16, 44, 92, 101, 159, 164, 175, 192, 210, 219, 252, 304, 305, 324], "myapp": 16, "parallelappbas": [16, 17, 333], "parallelengin": [16, 17, 333], "install_parallel_work": 16, "constexpr": [16, 100], "messagestrategi": [16, 18, 100, 103, 333], "message_strategi": [16, 100], "ksynconoutervertex": [16, 18, 100, 103, 333], "loadstrategi": [16, 100], "load_strategi": [16, 100], "kbothoutin": [16, 100], "initchannel": 16, "noth": [16, 103, 119, 172, 174, 310], "forc": [16, 37, 89], "forcecontinu": [16, 17, 333], "getincomingadjlist": [16, 57, 100], "counter": [16, 77], "runnabl": [16, 17, 23], "content": [16, 46, 51, 61, 77, 87, 89, 91, 175, 307, 321, 343], "my_app": [16, 18, 333], "cpp_pie": [16, 101, 109], "context_typ": [16, 100, 101, 109], "dynamicprojectedfrag": 16, "codebas": [16, 35], "my_app_context": 16, "zip": [16, 49, 51, 68, 69, 76, 109, 257, 261, 310, 341], "jr": 16, "load_app": [16, 17, 18, 22, 333], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 101, 102, 172, 316, 333], "demo": [17, 22, 23, 67, 105, 317, 321, 323, 331, 333], "turn": [17, 45, 56, 58, 69, 98, 105, 304, 331], "verbos": [17, 23, 38, 58, 331], "lauch": [17, 22, 333], "cluster_typ": [17, 22, 69, 89, 101, 102, 317, 333, 343], "add_lib": [17, 22, 317], "home": [17, 22, 23, 28, 38, 42, 43, 58, 61, 89, 100, 165, 166, 168, 169, 171, 172, 175, 219, 331, 333, 335, 343], "19": [17, 22, 23, 32, 58, 68, 77, 98, 160, 161, 163, 331, 336, 340], "shade": [17, 22, 23, 333], "java_pi": [17, 101], "threadnum": [17, 333], "info": [17, 38, 41, 49, 58, 67, 77, 103, 172, 310, 313, 317, 321, 322, 323, 324, 331], "maven": [17, 23, 105, 323, 333], "groupid": [17, 23, 323, 333], "artifactid": [17, 23, 323, 333], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 323, 333], "spark": [17, 321], "drastic": 17, "great": [17, 23, 37, 323], "suppos": [17, 77, 172, 304, 322], "traversecontext": [17, 333], "overrid": [17, 89, 100, 158, 168, 333], "ifrag": [17, 333], "parallelcontextbas": [17, 333], "adjlist": [17, 100, 103, 321, 333], "nbr": [17, 20, 57, 100, 103, 310, 333], "dst": [17, 18, 30, 61, 73, 84, 89, 102, 158, 161, 172, 174, 316, 319, 322, 333, 342, 343], "largest": [17, 77, 175, 255, 333], "vertexarrai": [17, 100, 103, 333], "math": [17, 83, 87, 91, 175, 259, 260, 337, 339], "max": [17, 70, 103, 171, 175, 333, 341], "pars": [17, 65, 89, 101, 159, 319, 323], "maxiter": [17, 333], "jsonobject": [17, 333], "gsvertexarrai": [17, 333], "createfficontext": [17, 333], "avail": [17, 23, 29, 30, 40, 43, 46, 50, 56, 61, 69, 70, 73, 76, 84, 89, 92, 98, 101, 157, 170, 258, 259, 260, 310, 317, 319, 322, 323, 330, 333], "containskei": [17, 333], "getinteg": [17, 333], "javadoc": [17, 35], "mvn": [17, 22, 105, 323], "proper": [17, 37], "javaapp": [17, 315, 333], "But": [17, 64, 77, 89, 97, 105, 310, 316], "rememb": [17, 22, 23, 30, 33, 41, 53, 330], "singel": 17, "full_jar_path": [17, 101, 333], "pack": [17, 23, 333], "java_app_class": [17, 101, 333], "fullli": [17, 333], "qualifi": [17, 101, 333], "b": [17, 18, 22, 37, 70, 75, 77, 164, 219, 237, 250, 256, 257, 261, 266, 267, 268, 270, 298, 306, 310, 333, 341], "param": [17, 23, 29, 46, 58, 67, 69, 101, 121, 122, 136, 151, 153, 157, 164, 170, 172, 317, 323, 333], "bother": 17, "click": [17, 36, 37, 84, 160, 161, 164, 334], "pure": [18, 100, 327], "just": [18, 19, 23, 27, 49, 51, 53, 58, 61, 64, 75, 77, 97, 105, 168, 172, 310, 313, 317, 325], "udf": [18, 108, 316, 333], "decor": [18, 333], "vd_type": [18, 103, 108, 333], "md_type": [18, 103, 108, 333], "youralgorithm": [18, 333], "staticmethod": [18, 108, 333], "statu": [18, 27, 29, 30, 38, 45, 53, 54, 58, 86, 168, 169, 175, 323, 327, 331], "cython": [18, 34, 58, 136, 315, 333], "sssp_pie": [18, 333], "v_label_num": [18, 324, 333], "vertex_label_num": [18, 103, 319, 324, 333], "v_label_id": [18, 103, 333], "init_valu": [18, 103, 333], "1000000000": [18, 101, 333], "pieaggregatetyp": [18, 103, 333], "kminaggreg": [18, 103, 333], "register_sync_buff": [18, 103, 333], "get_config": [18, 103, 317, 333], "declar": [18, 52, 65, 75, 77, 80, 94, 97, 160, 333], "get_inner_nod": [18, 103, 333], "break": [18, 37, 48, 52, 76, 170, 333], "set_node_valu": [18, 103, 333], "e_label_num": [18, 57, 324, 333], "edge_label_num": [18, 103, 319, 324, 333], "e_label_id": [18, 333], "get_outgoing_edg": [18, 103, 333], "third": [18, 89, 90, 94, 172, 295, 296], "get_int": [18, 103, 333], "get_node_valu": [18, 103, 333], "iv": [18, 333], "inner_nod": [18, 103, 333], "v_dist": [18, 333], "u_dist": [18, 57, 333], "classic": [18, 84, 163, 311], "yourpregelalgorithm": [18, 333], "sssp_pregel": [18, 333], "set_valu": [18, 103, 333], "src_id": [18, 57, 84, 159, 160, 161, 163, 164, 167, 170, 174, 333], "cur_dist": [18, 333], "new_dist": [18, 333], "outgoing_edg": [18, 103, 333], "vote_to_halt": [18, 103, 333], "sin": [18, 333], "m_pi": [18, 333], "translat": [18, 37, 69, 90], "generate_eid": [18, 64, 89, 100, 151, 172, 317, 324, 333, 343], "test": [18, 23, 29, 33, 48, 58, 63, 64, 67, 77, 80, 83, 86, 87, 91, 95, 158, 168, 170, 174, 194, 195, 229, 310, 312, 317, 322, 323, 330, 334, 335, 337, 342], "futur": [18, 44, 49, 52, 70, 75, 77, 89], "to_gar": [18, 333], "my_sssp_pregel": [18, 333], "gar": [18, 101, 109, 172, 317, 321, 333], "construct": [19, 52, 56, 77, 81, 84, 89, 90, 91, 92, 100, 151, 158, 159, 160, 161, 162, 172, 173, 177, 178, 218, 239, 241, 242, 244, 250, 254, 255, 256, 264, 267, 268, 269, 270, 272, 288, 292, 296, 302, 304, 317, 321, 324], "expand": [19, 52, 65, 77, 78, 162, 164, 311], "add_edges_from": [19, 20, 194, 310], "add_nod": [19, 20, 310, 313], "number_of_nod": [19, 20, 175, 219, 303, 310], "number_of_edg": [19, 20, 184, 219, 303, 310], "sort": [19, 20, 57, 65, 77, 175, 181, 209, 213, 216, 219, 244, 245, 303, 304, 310, 322], "connected_compon": [19, 175], "nx": [19, 20, 61, 112, 114, 115, 118, 121, 123, 125, 130, 131, 135, 138, 139, 172, 175, 310, 312, 313], "add_nodes_from": [19, 20, 310], "red": [19, 20, 37, 69, 159, 310], "green": [19, 20, 36, 37], "add_edg": [19, 20, 61, 69, 89, 172, 188, 194, 195, 198, 203, 204, 310, 313, 337, 338, 343], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": [19, 50], "dict": [19, 20, 27, 101, 102, 129, 137, 157, 160, 161, 164, 172, 173, 257, 258, 259, 260, 267, 268, 288, 310, 316, 317, 323], "draw": [19, 48, 52, 77, 257, 260], "matplotlib": [19, 77], "with_label": 19, "font_weight": 19, "bold": [19, 98], "twitter": [19, 98], "wget": [19, 22, 23, 29, 35, 49, 68, 165, 341], "raw": [19, 22, 23, 42, 43, 49, 54, 64, 65, 81, 127, 128, 160, 166, 168, 169, 174], "githubusercont": [19, 22, 23], "p": [19, 20, 31, 36, 48, 69, 75, 77, 91, 92, 101, 160, 170, 175, 233, 234, 235, 237, 246, 247, 248, 251, 252, 254, 256, 258, 259, 260, 261, 264, 266, 341], "netwrokx": 19, "o": [19, 22, 23, 27, 30, 33, 38, 49, 100, 170, 175, 192, 243, 245, 250, 258, 259, 260, 262, 263, 264, 310, 323, 334, 337], "gs_nx": 19, "g1": [19, 172, 314, 325, 326], "read_edgelist": [19, 312], "expandvar": [19, 22], "nodetyp": [19, 312], "create_us": [19, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 239, 240, 241, 242, 244, 246, 247, 248, 250, 254, 255, 256, 262, 263, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 305, 312], "g2": [19, 172, 310, 314, 325, 326], "ret_g": 19, "ret_nx": 19, "lack": [20, 32, 69, 96, 175], "hashabl": [20, 190, 205, 267, 310, 312], "float": [20, 70, 73, 86, 89, 98, 101, 158, 159, 160, 161, 169, 170, 171, 175, 229, 232, 233, 234, 235, 237, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 264, 265, 266, 302, 310, 312, 317, 325, 341, 342, 343], "tupl": [20, 77, 89, 159, 160, 161, 170, 172, 175, 194, 195, 204, 216, 257, 261, 267, 306, 310, 312, 317], "though": [20, 55, 229, 310, 323], "yield": [20, 48, 53, 164, 170, 257, 261, 310], "node_attribute_dict": 20, "discuss": [20, 58, 77, 175, 322, 336], "incorpor": [20, 48, 72], "path_graph": [20, 175, 186, 188, 189, 195, 310, 312], "grown": [20, 219, 252, 310], "unpack": [20, 76, 100, 310], "ebunch": [20, 310], "dictionari": [20, 50, 101, 145, 175, 257, 258, 259, 260, 267, 268, 269, 270, 310, 312], "11": [20, 27, 30, 31, 32, 64, 67, 77, 83, 98, 101, 159, 160, 161, 163, 177, 178, 179, 215, 310, 323, 331], "complaint": 20, "clear": [20, 37, 75, 77, 114, 115, 210, 212, 213, 215, 217, 219, 220, 222, 224, 225, 228, 239, 241, 242, 244, 246, 247, 248, 250, 254, 255, 256, 262, 263, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 305, 310, 312, 323], "quietli": [20, 205, 310], "ignor": [20, 175, 186, 205, 310, 317], "spam": 20, "stage": [20, 58, 63, 81, 96, 97, 164, 322], "seen": [20, 65, 90, 322], "report": [20, 58, 98, 135, 233, 234, 235, 310, 313], "adj": [20, 103, 175, 310], "item": [20, 29, 43, 49, 90, 159, 160, 161, 164, 170, 175, 310, 323], "One": [20, 65, 70, 90, 94, 95, 96, 97, 101, 162, 164, 241, 250, 304, 323], "nbunch": [20, 183, 187, 189, 205, 310], "remove_nod": [20, 310], "remove_nodes_from": [20, 310], "remove_edg": [20, 310], "remove_edges_from": [20, 239, 241, 310], "instanti": [20, 101, 170, 325], "digraph": [20, 172, 177, 187, 189, 194, 195, 198, 203, 204, 215, 232, 233, 234, 237, 241, 242, 244, 246, 247, 248, 249, 253, 304, 305, 306, 308, 311, 312, 313], "edgelist": [20, 288, 312], "subscript": [20, 310], "notat": [20, 41, 43, 275, 277, 279, 281, 283, 289, 291, 310], "yellow": [20, 159], "blue": [20, 159, 310], "undirect": [20, 44, 89, 95, 101, 121, 160, 164, 172, 175, 181, 185, 207, 230, 231, 237, 239, 246, 248, 251, 253, 254, 255, 257, 258, 259, 260, 261, 267, 272, 276, 277, 280, 283, 284, 286, 292, 305, 307, 310, 324], "twice": [20, 288, 310], "fg": [20, 324], "add_weighted_edges_from": [20, 194, 310], "125": [20, 159, 243, 254], "75": [20, 77, 83, 86, 87, 91, 98, 175, 233, 234, 235, 237, 317, 337], "375": 20, "eattr": [20, 310], "wt": 20, "attach": [20, 100, 159, 246, 249], "fridai": [20, 310, 313], "mondai": 20, "5pm": [20, 310], "2pm": [20, 310], "room": [20, 310], "714": [20, 310], "to_direct": [20, 172, 230, 231, 246, 248, 310], "representaion": 20, "dg": [20, 80, 95], "represent": [20, 52, 65, 90, 92, 95, 172, 308, 310, 321], "dgv": 20, "as_view": [20, 206, 207, 310], "shallow": 20, "out_edg": [20, 187, 310], "in_degre": [20, 84, 86, 162, 164, 167, 170, 241, 267, 268, 310], "predecessor": [20, 180, 253, 304, 310], "successor": [20, 147, 180, 247, 248, 253, 310], "out_degre": [20, 241, 267, 268, 310], "feel": [20, 37, 58], "inconsist": [20, 98], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 37, 75, 84, 95, 101, 162, 167, 232, 233, 234, 235, 237, 239, 243, 246, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 264, 266], "to_undirect": [20, 172, 246, 248, 310], "theoret": 20, "load_ldbc": [20, 77, 341], "foo": [20, 310], "famou": [22, 23, 309], "hadoop": [22, 323], "cetric": 22, "stop": [22, 27, 30, 42, 54, 92, 96, 100, 175], "intergr": 22, "open": [22, 36, 37, 66, 76, 78, 84, 94, 97, 170, 312, 322], "actual": [22, 23, 28, 42, 66, 73, 75, 77, 84, 104, 106, 163, 261, 310, 313, 321, 331], "vertexinputformat": 22, "edgeinputformat": 22, "vformat": [22, 172], "p2pvertexinputformat": 22, "eformat": [22, 172], "p2pedgeinputformat": 22, "gs_test_dir": [22, 33], "graphscope_sess": [22, 172], "31": [22, 23, 61, 89, 160, 161, 163, 343], "v_prop": [22, 100, 134], "vdata": 22, "e_prop": [22, 100, 134], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 49, 175], "toward": [22, 323], "offici": [22, 55, 64, 66, 67, 76, 94], "pl": 22, "snapshot": [22, 73, 97, 319, 323], "writabl": 22, "degrad": [22, 97], "procedur": [22, 29, 41, 42, 45, 46, 49, 52, 56, 64, 65, 77, 111, 252], "except": [22, 52, 58, 76, 83, 86, 87, 89, 91, 96, 163, 170, 188, 205, 209, 220, 229, 239, 241, 290, 310, 317, 322, 337], "right": [22, 70, 72, 89, 168, 211, 220, 222, 243, 308], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 32, 37, 46, 48, 61, 65, 80, 93, 95, 97, 98, 232], "proceed": [23, 27, 49, 232, 250], "side": [23, 37, 65, 75, 76, 101, 120, 160, 213, 322, 330], "venv": [23, 67, 91], "virtualenv": 23, "pyspark_venv": 23, "bin": [23, 31, 41, 42, 48, 49, 53, 66, 67, 76, 77, 90, 91, 184, 323, 331, 335, 341], "pyspark_venv_g": 23, "tar": [23, 29, 31, 323], "gz": [23, 31, 312, 323], "upload": [23, 64], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 90, 172, 341], "oss": [23, 29, 31, 42, 89, 100, 165, 172, 323, 333, 334, 343], "beij": [23, 29, 31, 81, 95, 159, 323, 334], "fixm": 23, "yuansi": 23, "env": [23, 58, 67, 91, 165], "var": [23, 33, 38, 58, 89, 170, 323, 331, 343], "gs_jar": 23, "l": [23, 29, 35, 53, 84, 95, 162, 230, 231, 233, 234, 235, 242, 243, 244, 246, 247, 248, 251, 258, 259, 260, 261, 263, 267, 268, 269, 270, 299, 302, 310, 331], "lib": [23, 31, 50, 66, 109, 323], "7077": 23, "master_url": 23, "conf": [23, 41, 42, 49, 66, 76, 100, 323, 341], "executor": [23, 35, 38, 64, 66, 90, 173, 331], "driver": [23, 27, 71, 76, 89, 137, 172, 323, 341], "2g": 23, "10g": [23, 335], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": [23, 70], "url": [23, 46, 66, 172, 173, 323, 341], "rdd": 23, "pom": [23, 323], "xml": [23, 100, 323], "classifi": [23, 81, 83, 87, 91, 95, 170, 333], "conflict": [23, 67, 77, 83, 172, 300], "correctli": [23, 37, 58, 80, 175, 323], "resolv": [23, 28, 58, 89, 172, 324], "goal": [23, 52, 56, 65, 70, 81, 92, 95, 322], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 57, 65, 216, 323], "config": [23, 27, 28, 31, 54, 64, 66, 76, 135, 145, 157, 158, 171, 174, 314, 317, 319, 323, 324, 330, 341, 342], "socket": [23, 28, 30, 66, 100, 324], "bound": [23, 46, 75, 77, 94, 136, 229, 317, 322, 325], "vineyardsock": 23, "filepath": 23, "sock": [23, 28, 66], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "shell": [23, 35, 48, 49, 53, 64, 66, 71, 94, 101], "grow": [24, 52, 61, 80, 90, 229, 239, 246, 247, 248, 309, 322], "capac": [24, 33, 66, 310, 317], "indivis": 24, "succinctli": 24, "oppos": [24, 84], "orient": [24, 84, 97, 167, 323], "googl": [24, 35, 93, 335], "powergraph": [24, 97, 98], "wa": [24, 29, 30, 37, 53, 72, 75, 77, 92, 98, 164, 175, 229, 244, 257, 258, 259, 260, 309, 323], "2010": [24, 98, 101, 175, 235, 302, 307], "sequenc": [24, 70, 75, 77, 101, 172, 209, 229, 239, 240, 241, 242, 243, 244, 245, 261, 267, 268, 271, 304, 305, 310, 311, 324], "conceptu": [24, 72], "behavior": [24, 41, 75, 77, 89, 103, 317], "becom": [24, 53, 61, 72, 77, 84, 310, 322, 323], "inact": 24, "again": [24, 58, 89, 325, 330], "termin": [24, 36, 49, 69, 330], "halt": [24, 94, 103, 249], "individu": [24, 64, 66, 72, 87, 91], "messageiter": [24, 103], "mindist": 24, "issourc": 24, "inf": 24, "done": [24, 81, 84, 159, 170, 175, 272, 324], "getvalu": [24, 57], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 37, 58, 323], "dramat": 24, "face": [24, 31, 65, 77, 93, 295, 296], "power": [24, 53, 71, 77, 80, 94, 101, 175, 229, 239, 287, 310], "law": [24, 229, 239], "gather": [24, 317], "scatter": [24, 160], "accumul": [24, 84, 304], "workload": [27, 36, 61, 63, 65, 66, 74, 77, 80, 90, 92, 98, 323, 325, 326], "grpc": [27, 28, 31, 58, 100, 334, 336], "linux": [27, 30, 31, 36, 51, 64, 83, 98, 105, 340], "maco": [27, 30, 36, 58, 67, 334, 336, 337, 340], "skip": [27, 31, 35, 94, 105, 323], "recommend": [27, 30, 36, 37, 58, 64, 67, 69, 77, 81, 89, 90, 91, 95, 164], "minikub": [27, 30, 323], "instruct": [27, 29, 30, 33, 37, 53, 64, 66, 67, 68, 69, 76, 91, 94, 100, 113, 164], "platform": [27, 32, 37, 63, 64, 65, 83, 96, 97, 98, 105, 159, 301, 317], "desktop": [27, 323, 337], "server": [27, 29, 46, 65, 66, 69, 73, 76, 78, 80, 84, 88, 90, 92, 94, 99, 163, 168, 169, 170, 322, 323, 335, 341], "kubectl": [27, 29, 30, 33, 38, 58, 64, 323, 331, 336], "kube": [27, 317], "apivers": [27, 33], "v1": [27, 33, 35, 46, 58, 75, 77, 83, 86, 87, 91, 94, 158, 275, 288, 313, 336, 337, 342], "certif": 27, "ca": 27, "crt": 27, "last": [27, 30, 77, 164, 169, 172, 232, 304, 331], "16": [27, 31, 64, 66, 77, 98, 158, 160, 161, 163, 165, 266, 289, 303, 342], "2023": [27, 72, 331], "44": [27, 98, 160, 161, 163, 303], "05": [27, 237, 250], "cst": 27, "sig": [27, 333], "28": [27, 77, 81, 95, 98, 160, 161, 163, 307], "cluster_info": 27, "172": [27, 98], "21": [27, 31, 61, 77, 98, 101, 160, 161, 163, 283, 323], "67": [27, 98, 101], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 30, 33, 38, 317], "profil": [27, 341], "encapsul": [27, 48, 49, 53, 80, 81, 158, 164, 317], "entranc": [27, 164], "tag": [27, 40, 75, 77, 98, 237, 317, 323, 335], "intranet": 27, "internet": [27, 29, 31, 69, 77, 93, 307, 309], "might": [27, 41, 44, 49, 58, 175, 267, 310, 326], "k8s_image_registri": [27, 33, 317], "k8s_image_repositori": [27, 317], "k8s_image_tag": [27, 33, 317], "fit": [27, 61, 64, 85, 86, 105], "increas": [27, 38, 41, 58, 61, 160, 208, 209, 217, 239, 241, 249, 267, 270, 272, 322], "cpu": [27, 46, 58, 64, 88, 165, 317, 326, 336], "num_work": [27, 28, 33, 88, 157, 317, 341], "k8s_engine_cpu": [27, 157, 317], "32": [27, 75, 98, 160, 161, 163, 171, 175], "k8s_engine_mem": [27, 58, 157, 317, 336], "256gi": 27, "vineyard_shared_mem": [27, 58, 157, 317, 336], "k8s_client_config": [27, 317], "disk": [27, 58, 64, 90, 323], "test_data": [27, 83, 87, 91, 334, 337], "testingdata": [27, 30, 33, 334, 337], "k8s_volum": [27, 30, 33, 157, 317, 334, 337], "constructor": [27, 89, 210, 212, 213, 215, 217, 219, 220, 222, 224, 225, 228, 239, 241, 242, 244, 246, 247, 248, 250, 254, 255, 256, 262, 263, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 305, 312], "vm": [27, 30, 100], "copi": [27, 29, 30, 64, 90, 92, 97, 118, 175, 182, 186, 188, 189, 247, 253, 308, 310, 313, 321, 322, 323, 324, 325], "hostpath": [27, 30, 33, 64, 317, 334, 337], "expandus": [27, 334, 337], "mountpath": [27, 30, 33, 317, 334, 337], "expect": [27, 34, 37, 45, 58, 89, 105, 239, 241, 243, 313, 317], "monitor": [27, 29, 80], "wait": [27, 58, 317], "finish": [27, 57, 76, 86, 103, 160, 163], "remov": [27, 29, 54, 72, 75, 77, 101, 105, 165, 182, 188, 190, 236, 239, 241, 243, 285, 288, 304, 310, 323], "remain": [27, 52, 53, 70, 75, 89, 93, 159, 164, 244, 271], "statefulset": [27, 323], "svc": [27, 64], "left": [27, 36, 41, 70, 72, 101, 172, 175, 211, 243], "service_port": 28, "63800": 28, "launcher_typ": 28, "operator_launch": 28, "gae_endpoint": 28, "60001": 28, "instance_id": [28, 324], "0000": [28, 61, 77], "rpc_port": 28, "9600": 28, "sai": [28, 40], "configmap": 28, "mount": [28, 30, 33, 42, 58, 65, 89, 169, 317, 334, 336, 337], "ideal": [29, 37, 52, 97], "deploy_graphscope_on_self_managed_k8": 29, "chart": [29, 58, 64, 66, 77, 323, 334, 336], "minut": [29, 58, 65], "succe": 29, "past": [29, 65, 325], "noteport": 29, "node_ip": [29, 323], "ojsonpath": 29, "hostip": 29, "node_port": 29, "spec": [29, 33, 100, 170], "nodeport": [29, 317, 323, 337], "echo": [29, 31], "listen": [29, 41, 66, 100], "statement": [29, 164, 323], "ident": [29, 102, 118, 172, 206, 207, 211, 282, 302, 304, 310], "reconnect": [29, 317], "disconnect": [29, 175, 251, 252, 267, 270, 317, 330], "sess2": 29, "comment": [29, 37, 61, 69, 70, 77, 89, 159, 310, 312, 313, 338, 343], "homepag": 29, "remot": [29, 36, 76, 88, 105, 173, 317, 341], "cater": [29, 90], "tgz": 29, "unzip": [29, 49, 51, 68, 69, 76, 341], "zxvf": 29, "bundl": [30, 317], "aliv": 30, "reserv": 30, "simplifi": [30, 48, 64, 90, 91, 92, 94, 96, 159, 164, 322], "etcd": [30, 58, 64, 317, 319, 334], "replica": [30, 64], "etcd_replica": 30, "greater": [30, 33, 70, 101, 160, 175, 229, 260, 317, 322], "ag": [30, 33, 43, 44, 46, 49, 65, 73, 75, 77, 81, 95, 158, 159, 172, 316, 331, 341, 342], "33": [30, 52, 160, 161, 163, 300, 303], "vineyardd": [30, 33, 66], "vineyardctl": [30, 317], "v6d": [30, 31, 64, 89, 317], "blob": [30, 58, 333], "cmd": [30, 100, 317], "readm": [30, 105], "md": [30, 170], "notic": [30, 33, 64, 73, 77, 90, 164, 172, 303, 310, 317, 325], "charact": [30, 43, 301, 306, 312], "vineyard_deploy": 30, "restart": [30, 41, 48, 53, 54, 331], "etcd0": 30, "73m": 30, "5db59987f": 30, "vr2fg": 30, "beforehand": 30, "onto": 30, "stai": 30, "k8s_namespac": [30, 33, 157, 317], "k8s_vineyard_deploy": [30, 33, 157, 317], "reload": [30, 323], "vineyard_id": [30, 33, 172, 331], "new_sess": 30, "22731319746904674": 30, "objectid": [30, 33, 100, 172, 317, 322, 324], "softwar": [30, 33, 43, 46, 64, 67, 75, 80, 90, 172, 324], "successfulli": [30, 66, 69, 81, 86, 229, 323], "folder": [31, 38, 42, 51, 54, 89, 322], "cento": [31, 32, 58, 67, 98, 336, 340], "82": [31, 98], "boost": [31, 80, 90, 100], "perl": 31, "v3": [31, 94, 98], "24": [31, 64, 77, 98, 160, 161, 163, 277, 295, 303], "openmpi": [31, 98], "gflag": 31, "glog": [31, 72], "arrow": [31, 57, 100, 112, 125, 172, 313], "74": [31, 98, 301], "openssl": [31, 58, 336], "zlib": 31, "protobuf": 31, "49": [31, 77, 98, 160, 161, 163], "13": [31, 35, 77, 98, 159, 160, 161, 163, 215, 256], "libclang": 31, "curl": [31, 45, 76], "lo": [31, 76], "czf": 31, "mkdir": [31, 58, 170, 336], "workdir": 31, "xzf": 31, "yum": 31, "scl": 31, "rh": [31, 57], "y": [31, 32, 77, 88, 101, 256, 257, 261], "devtoolset": 31, "python38": 31, "opt": [31, 36, 41, 53, 65, 66, 82, 170], "bash": [31, 75, 331, 335], "euxo": 31, "pipefail": 31, "dir": [31, 323], "ld_library_path": 31, "lib64": 31, "py2": 31, "py3": [31, 335], "manylinux2010_x86_64": 31, "whl": [31, 165, 168], "x86_64": 31, "sh": [31, 35, 76, 165, 323, 340, 341], "licens": [31, 335], "dbuild_shared_lib": 31, "ON": 31, "dcmake_prefix_path": 31, "dcmake_install_prefix": 31, "boost_1_74_0": 31, "bootstrap": 31, "filesystem": [31, 159], "program_opt": 31, "regex": 31, "chrono": 31, "atom": [31, 323], "date_tim": 31, "b2": 31, "openssl_1_1_1h": 31, "fpic": 31, "cpp": [31, 46], "darrow_comput": 31, "darrow_with_utf8proc": 31, "off": [31, 65, 90, 295, 323], "darrow_csv": 31, "darrow_filesystem": 31, "darrow_ipc": 31, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_util": 31, "darrow_build_test": 31, "darrow_enable_timing_test": 31, "darrow_fuzz": 31, "darrow_jemalloc": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "mpi": [31, 100], "cxx": 31, "dlopen": 31, "nproc": 31, "dgrpc_instal": 31, "dgrpc_build_test": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_protobuf_provid": 31, "dgrpc_zlib_provid": 31, "dgrpc_ssl_provid": 31, "dopenssl_root_dir": 31, "dcmake_cxx_flag": 31, "fpermiss": 31, "dbuild_vineyard_test": 31, "dbuild_vineyard_python_bind": 31, "j4": 31, "dnetworkx": 31, "denable_java_sdk": 31, "dbuild_test": 31, "ubuntu": [32, 58, 64, 67, 165, 334, 336, 340], "04": [32, 58, 64, 67, 77, 98, 165, 334, 336, 340], "intel": [32, 67, 334, 336, 340], "appl": [32, 58, 67, 310, 334, 336, 340], "silicon": [32, 67, 334, 336], "jdk": [32, 64, 67, 79, 327, 333], "wheel": [32, 58, 228, 294, 336, 339], "manylinux2014": [32, 335], "abi": 32, "wish": [32, 37, 41, 49, 53], "nightli": [32, 58, 336], "clean": [32, 61, 67, 69, 91, 105, 168, 322], "tidi": 32, "quickli": [32, 36, 52, 80, 91, 94, 95, 97, 170, 317], "insid": [32, 38, 43, 58, 75, 77, 101, 109, 159, 171, 172, 285, 316, 317, 341], "apt": [32, 165], "ipython": 32, "tensorflow": [32, 80, 81, 83, 86, 87, 90, 91, 95, 96, 158, 159, 160, 163, 164, 166, 170, 337], "tool": [32, 35, 36, 42, 49, 52, 61, 64, 71, 78, 80, 82, 90, 257, 259, 319, 322, 323, 324, 340], "dep": [32, 35, 330, 334, 335], "fly": [32, 52, 91], "clang": [32, 35, 67, 335], "essenti": [32, 43, 44, 70, 75, 80, 94, 96], "arm": 32, "preliminari": 32, "yet": [32, 51, 68, 75, 102, 267, 270, 310, 316, 323], "calcul": [33, 65, 72, 75, 77, 101, 103, 161, 175, 229, 261], "period": [33, 323], "restor": [33, 172, 317], "persistentvolum": [33, 323], "dump": [33, 101, 137, 172], "cat": [33, 88, 323, 331], "eof": 33, "metadata": [33, 42, 43, 46, 53, 54, 58, 100, 172, 310, 319, 323], "1gi": 33, "accessmod": 33, "readwriteonc": 33, "storageclassnam": 33, "importantli": 33, "lost": [33, 317], "persistentvolumeclaim": [33, 317, 323], "matchlabel": 33, "request": [33, 45, 58, 89, 100, 129, 160, 168, 171, 173, 204, 310, 317, 336], "extern": [33, 37, 42, 84, 90, 317, 323], "ccc": 33, "sub_graph": [33, 73, 91, 337, 338], "haslabel": [33, 61, 67, 73, 77, 91, 341], "simple_g": [33, 91, 333, 337], "pr_result": 33, "tc_result": 33, "add_column": [33, 91, 100, 172, 333, 337, 338], "tc": [33, 91, 337], "997255889378630": 33, "997163552113975": 33, "store_graphs_to_pvc": 33, "graphid": [33, 317], "pvc_name": [33, 317], "schema": [33, 42, 43, 46, 52, 54, 65, 66, 69, 71, 73, 77, 86, 87, 89, 101, 159, 160, 169, 172, 310, 319, 321, 322, 323, 324, 338, 341, 343], "oid_typ": [33, 89, 100, 101, 129, 151, 172, 317, 343], "ulong": 33, "lang": [33, 35, 43, 46, 67, 69, 91, 173], "eid": [33, 57, 69, 172, 323], "restore_graphs_from_pvc": 33, "anymor": 33, "nativ": [34, 41, 65, 71, 90, 94, 96, 97], "behind": [34, 86, 322, 325, 331], "scene": [34, 65, 86, 167], "lower": [34, 65, 75, 77, 94, 229, 236, 249], "cost": [34, 65, 77, 90, 94, 175, 323], "ownership": 34, "cach": [34, 49, 81, 93, 97, 310], "layout": [34, 93, 323], "were": [34, 37, 77, 98, 261, 323], "outperform": [34, 80, 93, 95, 96, 97], "art": [34, 80, 93, 96, 98], "voderank": 34, "average_degree_assort": 34, "degree_assort": 34, "guidelin": [35, 37, 52, 53], "promot": 35, "readabl": [35, 48, 310], "qualiti": [35, 37, 95], "black": [35, 335], "enforc": 35, "rule": [35, 41, 53, 65, 77, 84, 93, 162, 168, 172, 209, 319], "cpplint": 35, "flake8": 35, "fmt": 35, "lint": [35, 37], "makefil": 35, "graphscope_clformat": 35, "graphscope_cpplint": 35, "dev": [35, 63, 334, 335], "pushd": 35, "isort": 35, "diff": 35, "popd": 35, "interactive_engin": [35, 36, 66, 76], "check_format": 35, "files_to_format": 35, "aosp": 35, "toolchain": [36, 82], "devcontain": 36, "json": [36, 46, 64, 66, 317, 319, 323, 324], "setup": [36, 37, 58, 172, 317, 335], "visual": [36, 37, 52, 90], "studio": 36, "collabor": [36, 90, 322], "stabl": [36, 101, 172, 319, 323, 340], "haven": [36, 51, 77], "navig": [36, 322, 330], "icon": 36, "bottom": [36, 220], "corner": 36, "window": [36, 77, 340], "reopen": 36, "marketplac": 36, "prompt": [36, 48, 69, 76], "shift": [36, 70, 77, 175, 275], "ctrl": 36, "made": [36, 37, 41, 49, 64, 84, 98, 159, 162, 168, 175, 270, 322], "rebuild": 36, "subcommand": [36, 82], "assembli": [36, 66], "learning_engin": 36, "graphlearn": [36, 38, 81, 83, 86, 87, 91, 158, 159, 160, 164, 165, 170, 171, 174, 317, 331, 337, 342], "compos": [36, 38, 81, 84, 91, 93, 97], "alon": [36, 65, 73, 330], "circul": [36, 213], "edit": [36, 37, 69, 256, 293, 330], "entrypoint": [36, 330, 337], "plai": [36, 65, 79, 99, 169, 174, 327], "thank": [37, 61, 69, 90], "interest": [37, 77, 80, 93, 323], "focus": [37, 72, 77, 90, 96, 98, 164, 302, 323], "eager": [37, 101, 102, 151, 153, 172, 317], "contributor": [37, 303], "welcom": [37, 46, 49], "engag": [37, 90, 91], "good": 37, "particip": [37, 41], "join": [37, 41, 70, 72, 77, 160, 170, 211, 214, 222, 229, 238, 239, 252, 254, 257, 258, 259, 260, 261, 269, 270, 310, 322], "ask": [37, 63], "question": [37, 63, 71, 77, 336], "ve": [37, 42, 49, 53, 64, 68, 76, 90], "hasn": [37, 77], "confirm": 37, "concis": [37, 72, 73, 94, 173], "descript": [37, 43, 45, 53, 54, 64, 65, 70, 72, 84, 89, 159, 162, 167, 168, 267, 275, 323], "relev": [37, 41, 42, 165, 204, 310, 321], "reproduc": [37, 310], "yourself": 37, "why": [37, 58, 77, 101], "saw": 37, "incomplet": 37, "inaccur": 37, "knowledg": [37, 61, 69, 81, 95, 166], "submiss": 37, "fact": [37, 65, 69, 72, 267, 270], "page": [37, 42, 49, 63, 92, 101, 104, 106, 220, 235, 299, 339], "button": [37, 69], "tbf": [37, 62, 98, 318, 329, 332], "isn": [37, 54, 73, 163], "someon": 37, "approach": [37, 52, 69, 73, 80, 81, 90, 92, 94, 95, 163, 239, 252, 307, 322], "spend": 37, "secret": [37, 89, 317, 334, 343], "accident": 37, "hook": 37, "titl": [37, 42, 77, 87, 91], "grammar": 37, "spell": 37, "500": [37, 46, 229], "word": [37, 53, 77, 87, 91, 94, 95, 170, 172, 310], "42": [37, 77, 98, 160, 161, 163, 233, 235, 245, 303], "ticket": 37, "chines": 37, "everyon": 37, "beginn": [37, 94], "patch": 37, "rest": [37, 46, 310, 323], "attain": 37, "brief": [37, 60], "descipt": 37, "valid": [37, 65, 86, 87, 95, 108, 158, 205, 229, 251, 257, 306, 317, 319], "typo": 37, "feat": 37, "inv": [37, 164, 170, 341], "refactor": 37, "gulp": 37, "broccoli": 37, "npm": [37, 323], "ci": 37, "perf": 37, "neither": 37, "nor": 37, "chore": 37, "routin": [37, 175, 310], "insight": [37, 61, 93, 95], "addtion": 37, "depoli": 37, "feedback": [37, 61], "discourag": 37, "rebas": 37, "workflow": [37, 61, 90, 95, 96, 100], "upstream": [37, 164], "leas": 37, "ping": [37, 333], "await": 37, "unfamiliar": 37, "acronym": 37, "glossari": [37, 56, 63, 303], "approv": 37, "date": [37, 70, 77, 322, 323], "todo": [37, 70, 72, 88, 168], "dongz": 37, "potenti": [37, 52, 81, 90, 322], "concern": [37, 90, 97, 322], "reach": [37, 58, 73, 77, 94, 164, 169, 172, 175, 252, 267, 270, 322], "action": [37, 49, 54], "realiti": [37, 164], "uncommon": 37, "infrastructur": 37, "vital": 37, "inspect": [37, 38, 89, 317, 323], "failur": [37, 97], "stream": [38, 58, 64, 75, 76, 77, 81, 164, 169, 172], "stdout": 38, "log_level": [38, 41, 157], "permiss": [38, 44, 58, 109, 336], "consol": [38, 64, 66, 69, 78, 80, 89, 94, 173, 323, 339], "frontend": [38, 64, 66, 67, 68, 76, 323, 331], "event": [38, 229], "involvedobject": 38, "warn": [38, 310], "pinpoint": 38, "exec": [38, 323, 331], "diagnost": 38, "forward": [38, 81, 83, 84, 86, 87, 91, 95, 164, 337], "browser": [38, 77], "explain": [38, 77, 159, 317, 322, 341], "compris": [40, 42, 70, 73, 87, 90, 163], "busi": [40, 65, 77, 81, 89, 90, 91, 97], "e2": [40, 289], "coupl": [40, 92, 97, 290, 319], "straightforward": [41, 67, 91], "gs_interact": [41, 42, 48, 49, 53, 54], "tailor": [41, 46], "align": [41, 42, 44, 49, 53, 65, 84, 94, 158, 161, 162, 261, 322], "engine_config": [41, 317], "unconfigur": 41, "glimps": 41, "what": [41, 53, 58, 64, 77, 78, 94, 169, 256, 310, 316, 322], "compute_engin": 41, "shard_num": 41, "planner": [41, 53], "is_on": 41, "rbo": [41, 65], "filtermatchrul": 41, "filterintojoinrul": 41, "notexisttoantijoinrul": 41, "query_timeout": 41, "20000": 41, "timeout": [41, 58, 66, 67], "millisecond": [41, 98], "http_servic": 41, "default_listen_address": 41, "localhost": [41, 49, 55, 66, 68, 76, 89, 317, 343], "admin_port": 41, "7777": 41, "query_port": [41, 46], "10000": [41, 307], "hierarchi": [41, 43], "propertynam": [41, 323], "databas": [41, 42, 50, 55, 58, 65, 71, 72, 77, 90, 92, 94, 96, 98, 323, 333], "debug": [41, 58, 159, 164, 317, 323, 331], "default_graph": 41, "benefit": [41, 72, 76, 89, 93, 322], "throughput": [41, 52, 56, 65, 90, 96, 97, 323], "ison": 41, "cypher": [41, 45, 46, 49, 53, 56, 64, 65, 66, 67, 69, 71, 72, 90, 91, 92, 96, 97, 173, 317], "claus": [41, 52, 55, 71, 72], "calcit": [41, 72], "notmatchtoantijoinrul": 41, "transform": [41, 48, 65, 72, 77, 100, 112, 125, 302, 310, 311, 315, 321], "anti": [41, 70, 72, 90, 94, 97], "bind": [41, 101, 322], "admin": [41, 45, 52, 56, 172, 323], "submit": [41, 52, 55, 65, 68, 69, 76, 77, 91, 94, 159, 160, 173, 319, 323, 337], "movi": [42, 53, 92, 160], "interactive_hom": [42, 51], "destroi": [42, 49, 54], "csv": [42, 43, 61, 64, 69, 89, 172, 310, 313, 321, 323, 324, 337, 338, 343], "volum": [42, 49, 54, 58, 64, 72, 76, 233, 234, 235, 245, 254, 299, 317, 322], "crucial": [42, 44, 46, 48, 90], "conclud": [42, 158], "reflect": [42, 75, 322, 330], "v0": [42, 98, 165, 313], "vertex_typ": [42, 44, 46], "type_nam": [42, 43, 44, 46], "property_nam": [42, 44, 46, 77, 102, 103, 316], "property_typ": [42, 44, 46], "primitive_typ": [42, 44, 46], "dt_signed_int64": [42, 44, 46], "dt_signed_int32": [42, 44, 46], "taglin": 42, "dt_string": [42, 44, 46], "primary_kei": [42, 44, 46, 323], "born": 42, "acted_in": 42, "vertex_type_pair_rel": [42, 44, 46], "source_vertex": [42, 43, 44, 46], "destination_vertex": [42, 43, 44, 46], "many_to_mani": [42, 44, 46], "review": [42, 90, 101, 175, 239, 257], "wrote": 42, "dt_unsigned_int32": [42, 44], "dt_unsigned_int64": [42, 44], "dt_bool": [42, 44], "comprehens": [42, 46, 52, 53, 54, 90, 96, 98, 99], "administr": [42, 46, 49, 287], "loading_config": [42, 43, 46], "data_sourc": [42, 43, 46], "s3": [42, 89, 172, 343], "hdf": [42, 64, 89, 137, 169, 172, 323, 333, 343], "import_opt": [42, 46], "append": [42, 57, 77, 86, 87, 88, 91, 103, 158, 169, 170, 241, 304, 337, 342], "overwrit": [42, 54, 317, 323], "delimit": [42, 43, 64, 172, 312, 324, 338], "edge_map": [42, 43, 46], "type_triplet": [42, 43, 46], "column_map": [42, 43, 46], "understand": [42, 43, 46, 77, 84, 94, 158, 164, 172, 322], "consult": 42, "delv": [43, 46], "deeper": 43, "thorough": 43, "examin": [43, 91], "modern_import_ful": 43, "showcas": 43, "dissect": 43, "header_row": [43, 64, 172, 324], "quot": 43, "quote_char": 43, "double_quot": 43, "escape_char": 43, "block_siz": 43, "4mb": 43, "person_knows_person": [43, 323], "source_vertex_map": [43, 46], "destination_vertex_map": [43, 46], "person_created_softwar": 43, "mandatori": [43, 44, 91, 159], "ye": [43, 61, 310], "intial": 43, "header": [43, 64, 172, 322, 323], "No": [43, 58, 75, 310], "escap": 43, "batch_siz": [43, 84, 86, 88, 158, 162, 163, 164, 167, 170, 326, 342], "triplet": [43, 44, 73], "outlin": [43, 66, 70], "seamlessli": [43, 49, 61, 64, 71, 78, 80, 90, 96, 97], "encompass": [44, 68, 76, 87], "friendship": 44, "peopl": [44, 65, 69, 77, 310, 323], "since_d": 44, "explan": [44, 46, 101, 162], "terminologi": [44, 70], "delin": 44, "plan": [44, 52, 65, 70, 90, 92, 93, 94, 105, 323, 331], "character": [44, 162], "exclus": [44, 48, 70], "symbol": 44, "skill": 44, "profici": [44, 77], "one_to_on": 44, "one_to_mani": [44, 46], "many_to_on": 44, "pertain": [44, 64], "dt_float": 44, "dt_doubl": [44, 46], "dt_date32": 44, "albeit": 44, "previous": [44, 53, 77, 109, 246, 247, 248, 321, 322], "mention": [44, 77, 321, 322, 331], "component_typ": 44, "max_length": 44, "overflow": 44, "truncat": [44, 295, 296, 297, 302], "craft": [45, 52, 53], "listgraph": 45, "graphmanag": 45, "categori": [45, 70, 81, 83, 84, 91, 95, 170], "creategraph": 45, "deletegraph": 45, "getgraphschema": 45, "importgraph": 45, "createprocedur": 45, "proceduremanag": 45, "listallprocedur": 45, "getprocedur": 45, "updateprocedur": 45, "deleteprocedur": 45, "startservic": 45, "servicemanag": 45, "servicestatu": 45, "systemmetr": 45, "nodemetr": 45, "seek": [46, 169], "intric": [46, 48, 77], "toolkit": 46, "categor": [46, 52, 84], "graph_nam": [46, 53, 54, 66], "post": [46, 58, 77, 89, 164, 229, 343], "dataload": [46, 88], "showprocedur": 46, "procedure_nam": [46, 53], "bodi": [46, 164, 168, 276], "metric": [46, 95, 257, 258, 259, 260, 261], "x": [46, 76, 77, 88, 98, 101, 158, 164, 170, 175, 213, 246, 254, 256, 257, 261, 285, 342], "type_id": 46, "property_id": [46, 103], "200": [46, 77, 158, 316, 326, 342], "ok": [46, 55, 100], "yourfil": 46, "404": 46, "Not": [46, 52, 72, 310, 323], "path_to_fil": 46, "bound_graph": 46, "cpu_usag": 46, "memory_usag": 46, "inspir": [48, 105, 310], "neo4j": [48, 49, 50, 52, 53, 55, 63, 64, 66, 67, 68, 69, 70, 92, 97, 98, 173, 321], "empow": [48, 71, 78, 94], "skeleton": [48, 278, 281, 295, 296], "param_nam": [48, 52], "clariti": [48, 70], "mandat": 48, "hous": [48, 90, 284, 285], "personid": 48, "draft": 48, "query1": 48, "firstnam": [48, 77, 89, 338, 343], "lastnam": [48, 77, 89, 338, 343], "intrins": 48, "absenc": 48, "imper": [48, 75, 94], "subsequ": [48, 49, 53, 64, 65, 66, 76, 101, 159, 160], "1l": [48, 53], "conclus": [48, 77], "effortlessli": [48, 91], "streamlin": [48, 72], "depth": [49, 66, 70, 91, 158, 170, 175, 342], "adminstr": 49, "graph_data": 49, "gs_interactive_conf": 49, "breakdown": [49, 56], "regist": [49, 50, 52, 65, 72, 89, 100, 103, 132, 317], "meta": [49, 66, 81, 89, 100, 161, 162, 172, 321, 323], "7687": [49, 55, 64, 66, 68, 69], "eras": [49, 54], "irrevers": [49, 54], "caution": 49, "establish": [49, 61, 323], "bolt": [49, 55, 66, 68, 69, 94], "connector": [49, 55, 68, 75, 77], "opencyph": [49, 92], "supported_cyph": [49, 52], "22": [49, 55, 77, 98, 160, 161, 163, 303], "password": [49, 66, 323], "authent": [49, 66, 68, 96, 323], "peter": [49, 75], "35": [49, 75, 77, 98, 160, 161, 163, 170, 237, 287, 303], "term": [50, 81], "proc": [50, 262, 263, 267, 268, 309], "storp": 50, "sproc": 50, "stopro": 50, "storedproc": 50, "storeproc": 50, "subroutin": 50, "rdbm": [50, 69], "wikipedia": [50, 93, 101, 272, 276, 277, 278, 279, 281, 282, 283, 289, 290, 291, 292, 294, 295, 296, 297, 303], "mac": [51, 105, 335, 337], "gs_interactive_hom": 51, "flex": [52, 56], "concurr": [52, 56, 90, 160], "impress": [52, 56], "Its": [52, 56, 58, 92, 289, 322], "timefram": [52, 56], "emphas": [52, 56, 97], "stand": [52, 97, 162, 163, 322], "shoulder": 52, "pivot": 52, "pillar": 52, "qp": [52, 64, 77, 96, 323], "snb": [52, 77, 89, 338, 343], "180": 52, "87": [52, 98, 301], "op": [52, 102, 112, 114, 115, 116, 117, 119, 120, 122, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 140, 141, 142, 144, 145, 168, 310, 314, 317], "boast": 52, "highlight": [52, 70, 90, 94], "laid": 52, "triumph": 52, "ten": [52, 93, 97, 162], "thousand": 52, "swiftli": 52, "versatil": [52, 72, 96, 322], "expans": [52, 94, 95, 167, 341], "prowess": 52, "prime": [52, 254, 256], "gql": [52, 65, 90, 97], "scalabl": [52, 64, 76, 93, 94, 95, 96, 97, 307], "possess": 52, "larger": [52, 73, 77, 87, 257], "constraint": [52, 70, 77, 78, 94], "portion": [52, 77, 93, 94, 102, 172], "occurr": [52, 69, 94], "ddl": 52, "acid": [52, 96], "stored_procedure_1": 53, "flag": [53, 159, 160], "taken": [53, 310], "account": [53, 65, 94, 308, 341], "compile_onli": [53, 54], "stored_procedur": [53, 54], "comma": [53, 159], "proc1": 53, "proc2": 53, "appear": [53, 58, 65, 77, 101, 215, 217, 219, 222, 224, 251, 252, 310, 336], "capit": [53, 70, 72], "aspect": [54, 65, 72, 77, 97], "entri": [54, 65, 75, 77, 84, 86, 174, 175, 222, 239, 241, 242, 267, 269, 270, 288, 330], "proc_nam": 54, "desc": [54, 75, 77], "input_fil": 54, "currenli": 55, "solid": [56, 278, 295, 296], "prerequisit": 56, "entiti": [56, 73, 77, 87, 91, 95, 159], "\u6807\u7b7e": 57, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 57, "\u5c5e\u6027": [57, 341, 343], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 57, "\u539f\u59cbid": 57, "oid": [57, 100, 102, 103], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 57, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 57, "\u5b50\u56feid": 57, "fid": [57, 100, 103, 135, 319], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 57, "\u5206\u533a\u5668": 57, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 57, "\u7684\u6620\u5c04": 57, "\u5b50\u56fe": 57, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 57, "\u5b58\u50a8\u4e86\u9876\u70b9": 57, "\u8fb9": [57, 333], "\u9876\u70b9\u6570\u636e": 57, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 57, "\u5185\u90e8\u70b9": 57, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 57, "\u5916\u90e8\u70b9": 57, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 57, "\u672c\u5730id": 57, "lid": [57, 100, 135], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 57, "\u5168\u5c40id": 57, "gid": [57, 100, 135], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 57, "\u88abfragment\u5171\u8bc6": 57, "\u7528\u4e8e\u5b58\u50a8gid": 57, "oid\u7684\u6620\u5c04\u5173\u7cfb": 57, "\u7684\u8282\u70b9": 57, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 57, "gid\u7f16\u7801": 57, "\u5176\u4e2d": [57, 333, 338], "\u548c": [57, 164, 333, 335, 336, 337, 338, 340, 341, 342, 343], "\u5171\u540c\u7ec4\u6210": 57, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 57, "\u7684\u9876\u70b9": 57, "\u5e8f\u53f7": 57, "lid\u7f16\u7801": 57, "\u586b\u5145": 57, "\u603b\u662f": 57, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 57, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 57, "\u5206\u4e3ahashpartitioner\u548csegmentedpartiton": 57, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 57, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 57, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 57, "\u8fb9\u6587\u4ef6": 57, "\u5f97\u5230\u591a\u4e2avertex": 57, "\u548cedg": 57, "etabl": 57, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 57, "\u5206\u7ec4": 57, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 57, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 57, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 57, "\u8fb9\u8868": 57, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 57, "partial_v_t": 57, "partial_e_t": 57, "num": [57, 66, 75, 76, 77, 171, 322], "table\u5305\u542boid": 57, "table\u5305\u62ecsrc\u548cdst\u7684oid": 57, "\u8bbf\u95eevtable\u7684oid\u5217": 57, "\u6839\u636eoid\u67e5\u8be2partit": 57, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 57, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 57, "gather\u64cd\u4f5c": 57, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 57, "\u6839\u636efrag\u6570\u91cf": 57, "label\u6570\u91cf\u548c\u5168\u90e8oid": 57, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 57, "fid_t": [57, 100], "fnum_": 57, "label_id_t": [57, 100], "label_num_": 57, "hashmapbuild": 57, "cur_gid": 57, "id_parser_": 57, "generateid": 57, "\u8d77\u59cbgid": 57, "vnum": 57, "length": [57, 61, 70, 75, 77, 89, 94, 101, 162, 175, 214, 216, 221, 243, 264, 268, 274, 296, 305, 310, 343], "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 57, "\u751f\u6210gid": 57, "emplac": 57, "getview": 57, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 57, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 57, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 57, "\u6839\u636epartitioner\u83b7\u53d6fid": 57, "\u6839\u636efid": 57, "id\u548coid\u67e5\u8be2gid": 57, "\u751f\u6210gid\u6570\u7ec4": 57, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 57, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 57, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 57, "\u5bf9etable\u6267\u884cshuffl": 57, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 57, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 57, "\u5904\u7406\u9876\u70b9": 57, "\u521d\u59cb\u5316id": 57, "parser": [57, 65], "\u521d\u59cb\u5316ivnum": 57, "ovnum\u548ctvnum\u6570\u7ec4": 57, "\u6309\u7167vertex": 57, "label\u5206\u7ec4": 57, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 57, "\u5411vertex": 57, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 57, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 57, "\u5c06vertex": 57, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 57, "vid_parser_": 57, "vertex_label_num_": 57, "resiz": 57, "ivnums_": 57, "ovnums_": 57, "tvnums_": 57, "combinechunk": 57, "default_memory_pool": 57, "vm_ptr_": 57, "getinnervertexs": [57, 100], "fid_": 57, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 57, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 57, "\u901a\u8fc7src": 57, "gid\u5217\u548cdst": 57, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 57, "\u5e76\u6309\u7167vertex": 57, "edge_t": [57, 159, 170], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 57, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 57, "collect_outer_vertic": 57, "dynamic_pointer_cast": [57, 324], "converttoarrowtyp": [57, 100], "arraytyp": [57, 100], "chunk": [57, 145], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 57, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 57, "\u5916\u90e8\u70b9\u7684lid\u7531label": 57, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 57, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 57, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 57, "ovg2l_maps_": 57, "ovgid_lists_": 57, "cur_list": 57, "collected_ovgids_": 57, "\u6392\u5e8fgid": 57, "cur_map": 57, "buildertyp": 57, "vec_build": 57, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 57, "\u5176\u4e2dfid\u4e3a0": 57, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 57, "cur_id": 57, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 57, "cur_list_length": 57, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 57, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 57, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 57, "\u5220\u9664edg": 57, "table\u7684src\u5217\u548cdst\u5217": 57, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 57, "generate_local_id_list": 57, "gid_list": 57, "lid_list": 57, "vec": 57, "getfid": 57, "\u751f\u6210\u5185\u90e8\u70b9lid": 57, "getlabelid": 57, "getoffset": 57, "\u67e5\u8be2g2l": 57, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 57, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 57, "edge_src_": 57, "edge_dst_": 57, "table\u7684src\u5217\u548cgid\u5217": 57, "\u53ea\u4fdd\u7559\u5c5e\u6027": 57, "tmp_table0": 57, "removecolumn": 57, "\u6784\u5efacsr": 57, "\u5bf9\u4e8e\u6709\u5411\u56fe": 57, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 57, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 57, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 57, "\u6784\u5efarow": 57, "offset\u6570\u7ec4": 57, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 57, "\u4f7f\u7528row": 57, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 57, "\u586b\u5145dst": 57, "lid\u548ceid\u5230nbr": 57, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 57, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 57, "generate_directed_csr": 57, "vid_array_t": [57, 100], "src_list": 57, "dst_list": 57, "fixedsizebinaryarrai": 57, "int64arrai": 57, "edge_offset": 57, "actual_edge_num": 57, "v_label": [57, 100, 319], "edge_num": [57, 135, 337, 341], "src_list_ptr": 57, "raw_valu": 57, "dst_list_ptr": 57, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 57, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 57, "tvnum": 57, "offset_vec": 57, "degree_vec": 57, "int64build": 57, "podarraybuild": 57, "nbr_unit_t": [57, 100], "edge_build": 57, "v_offset": 57, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 57, "ptr": 57, "mutablepoint": 57, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 57, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 57, "vid": [57, 100, 172], "eid_t": [57, 100], "\u66f4\u65b0offset": 57, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 57, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 57, "offsets_ptr": 57, "lh": 57, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 57, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 57, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 57, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 57, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 57, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 57, "lid\u548ceid": 57, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 57, "\u5c01\u88c5": 57, "seal": [57, 80, 95], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 57, "ovgid\u548cg2l_map\u540e": 57, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 57, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 57, "\u4e5f\u5c31\u662f\u8bf4": [57, 334], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 57, "\u5f53\u524dfragment": 57, "fragment\u603b\u6570": 57, "directed_": 57, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 57, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 57, "edge_label_num_": 57, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 57, "propertygraphschema": 57, "schema_": 57, "shcema": 57, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 57, "\u9876\u70b9\u5c5e\u6027\u8868": 57, "\u4e0d\u5305\u542bid\u5217": 57, "\u5916\u90e8\u70b9gid": 57, "gid\u5230lid\u6620\u5c04": 57, "\u8fb9\u5c5e\u6027": 57, "csr\u7ed3\u6784\u7684column": 57, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 57, "csr\u7ed3\u6784\u7684row": 57, "vertex_map_t": [57, 100], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 57, "edge_tables_columns_": 57, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 57, "flatten_edge_tables_columns_": 57, "\u540c\u4e0a": 57, "vertex_tables_columns_": 57, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 57, "ie_ptr_lists_": 57, "oe_ptr_lists_": 57, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 57, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 57, "\u4e5f\u5c31\u662fcolumn": 57, "index\u7684\u8d77\u59cb\u5730\u5740": 57, "ie_offsets_ptr_lists_": 57, "oe_offsets_ptr_lists_": 57, "\u51fa\u8fb9\u7684row": 57, "offset\u8d77\u59cb\u5730\u5740": 57, "offset\u7684\u8d77\u59cb\u5730\u5740": 57, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 57, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 57, "\u76ee\u7684\u9876\u70b9fid": 57, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 57, "idst_": 57, "odst_": 57, "iodst_": 57, "idoffset_": 57, "odoffset_": 57, "iodoffset_": 57, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 57, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 57, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 57, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 57, "id\u548c\u9876\u70b9\u5e8f\u53f7": 57, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 57, "ivnum": 57, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 57, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 57, "vertex_range_t": [57, 100], "label_id": [57, 102, 103, 135], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 57, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 57, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 57, "\u5c5e\u6027id": 57, "\u5217\u53f7": 57, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 57, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 57, "\u884c\u53f7": 57, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 57, "getdata": [57, 100], "prop_id_t": [57, 100], "prop_id": 57, "property_graph_util": [57, 100], "valuegett": 57, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 57, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 57, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 57, "adj_list_t": [57, 100], "e_label": [57, 100], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 57, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 57, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 57, "offset_arrai": 57, "\u8bbf\u95eerow": 57, "oe": 57, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 57, "\u751f\u6210adjlist\u5bf9\u8c61": 57, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 57, "\u7ed3\u675f\u5730\u5740": 57, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 57, "\u548c\u51fa\u8fb9\u540c\u7406": 57, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 57, "ie": 57, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 57, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 57, "\u5bf9\u5e94\u5230\u884c\u53f7": 57, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 57, "\u4f8b\u5982": [57, 333, 337, 341, 343], "\u83b7\u53d6edg": 57, "struct": [57, 100, 233, 266], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 57, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 57, "edata_arrays_": 57, "nbr_": 57, "mininum": 58, "8g": 58, "18": [58, 67, 77, 98, 160, 161, 163, 175, 233, 282, 287, 291, 293, 296, 302, 333, 336, 340], "depoly": 58, "enssenti": 58, "silent": [58, 310, 331], "helm": [58, 63, 64, 323, 334, 336], "did": [58, 170], "role": [58, 65, 79, 92, 160, 169, 175, 261, 299, 307, 323, 327, 331, 336], "rolebind": [58, 336], "uninstal": [58, 64, 336], "recycl": 58, "alloc": [58, 82, 86], "seem": [58, 77], "stuck": 58, "consumpt": 58, "poor": [58, 166], "acquir": [58, 68, 76], "mostli": [58, 66, 136], "visibl": [58, 103], "engnin": 58, "cloud": [58, 96, 97, 323], "k8s_vineyard_mem": [58, 157, 317, 336], "shape": [58, 83, 84, 87, 91, 100, 102, 161, 162, 163, 164, 167, 170, 174, 232, 337], "forth": 58, "smaller": [58, 77, 98, 173, 175, 231, 232, 236], "shared_mem": [58, 336], "grpcio": [58, 336], "grpc_python_build_system_openssl": [58, 336], "scipi": [58, 257, 258, 259, 260, 310, 313, 336], "anaconda": [58, 336], "workaround": 58, "openbla": 58, "tri": [58, 61, 86, 94, 239, 245], "pkgconfig": 58, "cmake_prefix_path": 58, "brew": 58, "deni": [58, 109, 336], "pv": [58, 64, 317, 323, 336], "nf": [58, 169, 336], "kafka": [58, 319, 336], "zookeep": [58, 336], "crashloopbackoff": [58, 336], "bitnami": [58, 336], "755": 58, "1001": [58, 323], "brutal": 58, "chmod": [58, 76, 336], "777": [58, 98, 336], "eleg": [58, 61], "grant": [58, 307], "rais": [58, 65, 101, 109, 111, 145, 157, 164, 172, 173, 175, 181, 190, 194, 195, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 244, 245, 249, 251, 254, 255, 256, 267, 270, 302, 305, 306, 310, 313, 317], "timeout_second": [58, 157, 317, 336], "600": [58, 98, 317, 336], "enterpris": 58, "proxi": [58, 336], "properli": [58, 73], "wrong": 58, "resolut": [58, 323], "occup": 58, "hostnam": [58, 336], "no_proxi": [58, 336], "suffix": 58, "flush": 58, "forcibli": 58, "contact": 58, "slack": [58, 336], "dingtalk": [58, 336], "happi": 58, "90": [60, 98], "traffic": 61, "web": [61, 101, 175, 243, 257, 262, 303], "ever": [61, 84], "amount": [61, 76, 82, 95, 162, 164, 166], "hidden": [61, 92, 93, 95, 158, 342], "attract": 61, "attent": [61, 95, 164], "compuatit": 61, "difficult": [61, 159, 169, 323], "obstacl": 61, "attempt": [61, 64, 93, 94, 97, 310], "curv": [61, 93], "hard": [61, 75, 85, 86, 271, 322], "complic": [61, 65, 77, 102], "sql": [61, 65, 72, 77, 78], "deep": [61, 84, 90, 158, 163, 164, 166, 186, 189, 298, 310], "gnn": [61, 63, 81, 83, 84, 87, 90, 91, 96, 97, 158, 162, 163, 164, 166, 167, 317, 339, 342], "train": [61, 69, 81, 83, 84, 85, 90, 91, 96, 97, 99, 160, 163, 164, 166, 167, 170, 174, 317, 337, 342], "fist": 61, "interpret": [61, 90, 175], "mount_dataset": [61, 89], "ran": [61, 86], "p2p_network": 61, "embed": [61, 81, 87, 91, 95, 159, 166], "inter": [61, 171, 229, 232], "wherea": [61, 229, 322], "numpi": [61, 77, 81, 100, 102, 117, 128, 137, 161, 162, 164, 165, 166, 167, 170, 172, 174, 175, 302, 310, 313, 339], "datafram": [61, 89, 102, 116, 127, 137, 140, 172, 310, 333, 343], "head": [61, 64, 69, 75, 77], "creationd": [61, 77, 89, 338, 343], "locationip": [61, 89, 343], "browserus": [61, 77, 89, 343], "618475290625": 61, "2011": [61, 77, 243], "08": [61, 98, 175], "17t14": 61, "26": [61, 77, 98, 160, 161, 163, 259], "59": [61, 98], "961": 61, "210": [61, 98, 306], "17": [61, 77, 98, 160, 161, 163, 333], "48": [61, 98, 160, 161, 163, 262, 263, 309], "chrome": [61, 77], "618475290626": 61, "17t11": 61, "570": 61, "comment_replyof_com": 61, "274877907301": 61, "274877907299": 61, "274877907302": 61, "pd": [61, 69, 89, 343], "df_v": [61, 89, 333, 343], "read_csv": [61, 69, 89, 343], "sep": [61, 69, 89, 172, 343], "df_e": [61, 89, 343], "graphcomput": [63, 341], "gl": [63, 84, 96, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171], "neural": [63, 81, 90, 91, 96, 97, 99, 158, 159, 162, 164, 166, 170], "posit": [63, 77, 95, 96, 158, 164, 175, 220, 239, 241, 242, 244, 245, 249, 257, 258, 259, 260, 261, 305, 308, 322, 325], "frequent": [63, 90, 93, 323], "groot": [63, 73, 90, 97], "graphar": 63, "gart": 63, "gap": 63, "oltp": [63, 90, 92], "style": [63, 80, 90, 315], "too": [64, 77, 97, 160, 229, 310], "wonder": 64, "throughout": [64, 65, 75], "smoothli": 64, "easiest": 64, "websit": [64, 93, 229], "untar": 64, "cp": [64, 66, 307, 322], "tree": [64, 92, 210, 212, 220, 240, 246, 248, 258, 259, 260, 273, 274, 311, 317, 343], "claim": [64, 292, 322, 323], "pvc": [64, 317, 323], "your_release_nam": 64, "gremlinport": 64, "grep": 64, "awk": 64, "cypherport": 64, "littl": [64, 75, 77], "v6d_modern_load": [64, 66], "data_path": [64, 324], "store_data_path": [64, 66], "src_label": [64, 89, 172, 313, 317, 323, 324, 337, 338], "dst_label": [64, 89, 172, 313, 317, 323, 324, 337, 338], "thing": [64, 164, 330], "key1": 64, "value1": [64, 89, 343], "key2": 64, "value2": 64, "token": [64, 75], "column_typ": 64, "infer": [64, 89, 95, 96], "filed1": 64, "filed2": 64, "unexpect": 64, "troubl": 64, "correspondingli": [64, 84, 267, 270], "v6d_ldbc_loader": 64, "physic": [64, 65, 90, 101, 175, 233, 234, 235, 257, 321], "replicacount": [64, 323], "8182": [64, 66, 76, 323], "pegasusworkernum": 64, "pegasustimeout": 64, "durat": [64, 75], "000": [64, 77, 98], "pegasusbatchs": 64, "1024": [64, 66], "pegasusoutputcapac": 64, "frontendquerypersecondlimit": 64, "2147483647": [64, 323], "inher": 65, "massiv": [65, 94], "manufactur": 65, "upcom": 65, "sticki": 65, "shelv": 65, "intellig": [65, 77, 90, 97, 267, 270], "hybrid": [65, 322, 323], "dedupl": 65, "higher": [65, 96, 175, 185, 249, 323], "latenc": [65, 76, 90, 96, 97], "hope": [65, 77, 323], "trade": [65, 90, 323], "inevit": 65, "realist": [65, 302], "lengthi": 65, "ir": [65, 66, 90, 92], "verif": [65, 90], "80": [65, 98, 289], "decoupl": [65, 90, 97], "upper": [65, 75, 77, 81, 94, 229, 322], "briefli": [65, 95], "algebra": [65, 299], "edgeexpans": 65, "pathexpans": 65, "legal": 65, "predic": [65, 77], "arithmet": [65, 75, 77], "firstli": [65, 73, 77, 89, 97], "down": [65, 72, 227], "cbo": 65, "statist": [65, 72, 77, 161], "glogu": 65, "shuffl": [65, 75, 88, 164, 170, 174], "plu": [65, 77, 213, 285], "unaccept": 65, "come": [65, 69, 77, 80, 89, 91, 92, 95, 96, 98, 161, 276, 313], "kubenet": 66, "end2end": 66, "sf": [66, 77], "v6d_object_id": 66, "unsur": [66, 69], "assist": [66, 71, 93], "vineyard_ipc_socket": [66, 324], "gie_test_hom": 66, "rpc": [66, 100, 171, 317, 323], "1234": 66, "127": [66, 98, 323], "11234": 66, "pegasu": [66, 90], "gaia_executor": 66, "log4r": [66, 323], "yml": [66, 321, 323], "240000": 66, "usernam": [66, 323], "auth": [66, 68, 175, 323], "djna": 66, "kill": [66, 317], "pkill": 66, "gcc": [67, 98, 340], "64": [67, 76, 84, 163, 164, 241, 341], "chip": [67, 340], "hereaft": [67, 77, 91], "q1": [67, 69, 77, 91], "q2": [67, 77, 91], "q3": [67, 77, 91], "someth": [67, 310], "453": 67, "xxx": [67, 69, 168, 317, 333], "pppp": 67, "startup": 67, "600000": 67, "entr": 67, "ee": 67, "syntact": [67, 73, 78, 94], "sugar": [67, 73, 78, 94], "protocol": [68, 71, 89, 97, 317], "graphdatabas": 68, "routingcontrol": [68, 91], "uri": [68, 89, 343], "print_top_10": 68, "execute_queri": 68, "routing_": [68, 91], "simpler": [68, 76, 77, 310], "nowadai": 69, "sole": [69, 70], "shortcom": [69, 73, 77], "gpt": 69, "materi": 69, "year": [69, 77, 91, 93, 337], "mislead": 69, "hot": 69, "cold": 69, "workabl": 69, "significantli": [69, 72, 73, 93, 96], "openai": 69, "novic": 69, "dream": 69, "chamber": 69, "25": [69, 77, 83, 87, 91, 98, 160, 161, 163, 232, 234, 237, 256, 303, 337], "langchain": 69, "316": 69, "suchun": 69, "sv": 69, "nodes_set": 69, "stone_story_nodes_rel": 69, "vid_field": [69, 89, 172, 338], "edges_set": 69, "stone_story_edg": 69, "edges_sets_": 69, "src_field": [69, 89, 172, 338], "dst_field": [69, 89, 172, 338], "daughter_in_law_of_grandson_of": 69, "wife_of": 69, "api_kei": 69, "query_to_cyph": 69, "langchain_prompt": 69, "son": 69, "baoyu": 69, "jia": 69, "\u8d3e\u5b9d\u7389\u662f\u8c01\u7684\u513f\u5b50": 69, "cypher_sent": 69, "son_of": 69, "q": [69, 76, 162, 164, 170, 252, 256], "\u8d3e\u5b9d\u7389": 69, "lastli": 69, "\u8d3e\u653f": 69, "stori": 69, "syntax": [70, 75, 84, 94, 102, 164, 310, 316], "compli": [70, 164], "unaddress": 70, "regard": [70, 77, 87, 322], "keyword": [70, 177, 178, 179, 246, 253, 257, 258, 259, 260, 261, 310, 313, 316, 317], "insensit": 70, "lowercas": 70, "letter": [70, 304], "slightli": [70, 165, 229, 316], "elabor": [70, 97], "boolean": [70, 89, 101, 103, 160, 164, 175, 194, 195, 232, 234, 237, 268, 308], "integ": [70, 75, 175, 210, 213, 214, 215, 216, 217, 219, 221, 222, 224, 225, 228, 229, 232, 233, 234, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 275, 288, 302, 303, 304, 305, 307, 310, 323], "byte": [70, 101, 109, 169], "tempor": 70, "int32": [70, 83, 87, 91, 159, 161, 169, 170, 337], "uint32": 70, "int64": [70, 89, 103, 129, 151, 159, 161, 162, 167, 169, 170, 172, 317, 343], "uint64": [70, 151, 172, 317], "byte_arrai": 70, "null": [70, 175, 192, 208, 209, 216, 223, 275, 305, 310], "datetim": 70, "zone": 70, "citizen": 70, "unsupport": [70, 73, 75], "conceiv": [70, 257], "inner_typ": 70, "mathemat": [70, 242, 244, 252, 254, 256, 265], "moment": [70, 105, 323], "averag": [70, 75, 87, 91, 101, 175, 229], "avg": [70, 175], "summar": [70, 77, 81], "subtract": 70, "divis": 70, "modulo": [70, 254], "exponenti": [70, 75, 77, 95, 257, 259, 260], "inequ": 70, "NOT": [70, 322], "WITH": 70, "conjunct": 70, "AND": [70, 91, 103], "disjunct": 70, "OR": [70, 73, 103, 310], "xor": 70, "negat": 70, "bitopr": 70, "scalar": [70, 168, 175], "listliter": 70, "fold": [70, 322, 341], "mapliter": 70, "sinl": 70, "interv": [70, 229, 261, 317], "sensit": [70, 302], "notabl": 70, "AS": [70, 73, 307, 311], "BY": [70, 73], "leverag": [71, 73, 79, 80, 92, 94, 105, 302, 319, 327], "interconnect": [71, 93, 160], "tcp": 71, "llm": 71, "sentenc": [71, 75, 77], "tradition": 72, "accommod": [72, 97], "heurist": [72, 94, 237], "coexist": 72, "sophist": [72, 92], "cardin": 72, "primarili": [72, 77, 94, 322], "stem": 72, "atc": 72, "instrument": 72, "efficaci": 72, "alias": [72, 75], "p1": [72, 77], "p2": [72, 77], "id1": [72, 341], "id2": [72, 341], "expedit": 72, "intent": 72, "k1": [72, 75], "k2": [72, 75], "p3": 72, "retain": [72, 75, 251, 324], "websocket": [73, 341], "worth": [73, 87, 164, 172, 310], "mutat": 73, "lambda": [73, 77, 158, 164, 170, 175, 246, 257, 259, 260, 261, 342], "groovi": 73, "currenttimemilli": [73, 341], "expr": [73, 75, 77, 341], "transact": [73, 90, 96, 97, 98, 319, 323, 333], "secondari": 73, "rocksdb": [73, 323], "isol": [73, 175, 271, 323], "therein": 73, "council": [73, 98], "birthdai": [73, 89, 343], "differenti": 73, "123456": [73, 81, 95, 323], "hasid": 73, "expos": [73, 79, 162, 173, 317, 327], "secondli": [73, 97], "path_expand": 73, "desir": [73, 172, 229, 251, 271, 273, 274], "concret": [73, 101, 102, 172], "endv": [73, 77, 94, 341], "repeat": [73, 94, 95, 164, 170, 244, 249, 252, 272, 275, 341], "path_opt": [73, 75, 77, 94, 341], "pathexpand": 73, "marko": [73, 75, 77], "27": [73, 75, 77, 98, 160, 161, 163, 291], "hasstep": 73, "groupcount": [73, 341], "age_cnt": 73, "age_sum": 73, "scan": [73, 322], "propertyidvalu": 73, "inE": [73, 164, 341], "conquer": 74, "situat": [75, 77, 80, 159, 160, 323], "meant": [75, 77], "moreov": [75, 90, 94, 96, 322], "vertexid": 75, "inject": 75, "edgeid": 75, "edgelabel": [75, 122], "histori": [75, 77, 94], "elementid": 75, "propertykei": 75, "accessor": 75, "eq": [75, 77, 94, 101, 341], "neq": [75, 341], "gt": [75, 77, 341], "lt": [75, 77, 341], "gte": [75, 77, 91, 337, 341], "lte": [75, 91, 337, 341], "outsid": [75, 341], "textp": [75, 341], "startingwith": [75, 341], "endingwith": [75, 341], "rko": 75, "ark": 75, "notstartingwith": [75, 341], "notendingwith": [75, 341], "notcontain": [75, 341], "unequ": 75, "nest": 75, "wheretravers": 75, "act": [75, 158, 307, 310, 330, 342], "startkei": 75, "alter": [75, 310], "opposit": [75, 164, 238, 285], "nottravers": 75, "duplic": [75, 77, 237, 239, 241, 310, 311], "deduplabel": 75, "composit": [75, 77], "de": [75, 86], "impli": 75, "flat": 75, "br": 75, "selectkei": 75, "roll": [75, 77, 80], "accompani": 75, "aggregatefunc": 75, "emit": [75, 77, 158, 161, 164, 170, 342], "ascend": [75, 77], "asc": [75, 77], "bias": 75, "toss": 75, "merg": [75, 164], "uniontravers": 75, "matchsent": 75, "binder": 75, "__": [75, 76, 77, 91, 164, 337, 341], "graphnam": 75, "unrol": 75, "linear": [75, 244, 246, 302, 322], "result_opt": [75, 77, 341], "all_v": [75, 77, 341], "lengthrang": 75, "keyvaluepair": 75, "end_v": [75, 77, 341], "all_v_": 75, "vada": 75, "josh": 75, "isnul": 75, "rippl": 75, "lop": 75, "v2": [75, 77, 83, 94, 158, 288, 342], "29": [75, 77, 160, 161, 163], "simplepath": [75, 341], "latter": [75, 77, 93], "mix": [75, 101, 322], "sack": [75, 341], "guidanc": 76, "gremlinpython": [76, 323], "sy": [76, 170], "gremlin_python": [76, 323], "graph_travers": 76, "driver_remote_connect": 76, "driverremoteconnect": [76, 323], "gremlin_endpoint": [76, 323], "remoteconn": [76, 323], "withremot": [76, 323], "assert": [76, 101, 322], "oom": 76, "vast": 76, "mitig": 76, "risk": [76, 90], "queue": [76, 103], "graph_url": [76, 173, 323, 341], "stopiter": 76, "resultiterationbatchs": 76, "addcontactpoint": [76, 323], "resultset": [76, 323], "hasnext": 76, "dlcdn": 76, "your_endpoint_address": 76, "your_endpoint_port": 76, "classnam": [76, 341], "ser": [76, 341], "gryomessageserializerv1d0": [76, 341], "serializeresulttostr": [76, 341], "exit": [76, 101, 341], "realm": 77, "audit": 77, "toolsuit": 77, "simul": [77, 135, 170], "confid": 77, "permit": [77, 310], "3k": 77, "gremlin_queri": 77, "190376": 77, "787074": 77, "sf1": 77, "432345564227583365": 77, "504403158265495622": 77, "576460752303435306": 77, "432345564227579434": 77, "hastyp": 77, "504403158265495612": 77, "144115188075855941": 77, "issubclassof": 77, "504403158265495553": 77, "confus": [77, 258, 259, 260], "mechan": [77, 92, 95, 97, 319, 327], "belong": [77, 95, 101, 102, 103, 172, 300, 303, 310, 316, 323], "distinguish": [77, 90, 158, 159, 160, 322], "worri": 77, "havelabel": 77, "veritc": 77, "216172782113783808": 77, "216172782113784710": 77, "label1": 77, "label2": 77, "forum": 77, "72057594037936036": 77, "360287970189718653": 77, "360287970189718655": 77, "joseph": 77, "joeseph": 77, "yacin": 77, "01": [77, 83, 87, 88, 91, 101, 159, 175, 234, 337], "01t00": 77, "00": 77, "curiou": 77, "38416": 77, "mayb": 77, "pyplot": 77, "plt": 77, "comment_cont": 77, "comment_length": 77, "histogram": 77, "hist": [77, 184], "50": [77, 98, 257, 259, 260], "607c8e": 77, "grid": [77, 303], "axi": [77, 100, 101, 102, 117, 141, 170, 316], "xlabel": 77, "ylabel": 77, "gender": [77, 89, 343], "person_gend": 77, "male": 77, "femal": 77, "male_count": 77, "female_count": 77, "216172782113784483": 77, "around": [77, 173], "432345564227569033": 77, "288230376151712472": 77, "144115188075856168": 77, "144115188075860911": 77, "72057594037934114": 77, "hasmoder": 77, "studyat": 77, "workat": 77, "islocatedin": 77, "432345564227582847": 77, "hasinterest": 77, "504403158265496227": 77, "864691128455136658": 77, "1008806316530991636": 77, "360287970189645858": 77, "en": [77, 93, 101, 272, 276, 277, 278, 279, 281, 282, 283, 289, 290, 291, 292, 294, 295, 296, 297], "e1": 77, "citi": [77, 81, 93, 95], "ispartof": 77, "countri": 77, "288230376151711797": 77, "216172782113784555": 77, "14": [77, 98, 160, 161, 163, 215, 275, 283, 295, 310], "exactli": [77, 81, 94, 101, 175, 220, 229, 243, 288, 316, 323], "432345564227569357": 77, "432345564227570524": 77, "288230376151712984": 77, "144115188075861043": 77, "replyof": [77, 338], "54336": 77, "33411": 77, "360287970189700805": 77, "59465": 77, "33403": 77, "awai": 77, "ineffect": 77, "illeg": 77, "simple_path": 77, "unfold": [77, 101], "hascreat": 77, "nation": 77, "china": 77, "np": [77, 161, 164, 170, 174, 325], "market": 77, "japan": 77, "browsers_us": 77, "browser_list": 77, "firefox": 77, "safari": 77, "browser_count": 77, "autopct": 77, "1f": 77, "univers": [77, 90, 175, 208, 209, 256, 266, 298, 302], "person1": 77, "person2": 77, "university1": 77, "university2": 77, "studi": [77, 87, 91, 97, 256, 258], "216172782113784481": 77, "216172782113784279": 77, "144115188075858884": 77, "216172782113784361": 77, "216172782113784291": 77, "144115188075858879": 77, "216172782113784642": 77, "216172782113784473": 77, "216172782113784328": 77, "144115188075858700": 77, "216172782113784700": 77, "216172782113784331": 77, "144115188075860619": 77, "216172782113784375": 77, "216172782113784333": 77, "144115188075858813": 77, "216172782113784593": 77, "216172782113784688": 77, "144115188075860870": 77, "216172782113784047": 77, "216172782113784692": 77, "144115188075862429": 77, "isomorph": [77, 95, 160, 164, 289, 311], "23": [77, 160, 161, 163], "216172782113784192": 77, "216172782113784107": 77, "216172782113784171": 77, "regular": [77, 249, 254, 255, 256, 278, 283, 286, 291, 294, 295, 296, 297], "squar": [77, 237, 256, 284, 285, 288, 303], "butterfli": 77, "notion": 77, "matchanalyticsalgorithm": 77, "matchoptimizationalgorithm": 77, "216172782113784587": 77, "216172782113784363": 77, "144115188075860919": 77, "216172782113784532": 77, "216172782113784400": 77, "144115188075861858": 77, "216172782113784491": 77, "216172782113784401": 77, "144115188075858086": 77, "216172782113784598": 77, "216172782113784629": 77, "144115188075858881": 77, "216172782113783931": 77, "216172782113784657": 77, "144115188075858708": 77, "repli": 77, "pa": 77, "pb": 77, "216172782113783809": 77, "216172782113784011": 77, "360287970189640007": 77, "360287970189640008": 77, "360287970189640009": 77, "34": [77, 98, 160, 161, 163, 303], "2012": [77, 269], "216172782113783812": 77, "216172782113783882": 77, "36": [77, 98, 160, 161, 163, 215, 295, 303, 335], "360287970189640010": 77, "37": [77, 98, 160, 161, 163, 175, 303, 335], "216172782113784105": 77, "38": [77, 98, 160, 161, 163, 303, 335], "41": [77, 98, 160, 161, 163, 250, 303], "43": [77, 160, 161, 163, 175, 277, 303, 333], "216172782113783814": 77, "216172782113783962": 77, "360287970189640135": 77, "52": [77, 303], "216172782113784199": 77, "54": [77, 98, 250, 303], "216172782113784038": 77, "56": [77, 98, 209, 303], "216172782113783816": 77, "216172782113784144": 77, "175": 77, "360287970189640462": 77, "72057594037927936": 77, "144115188075855872": 77, "288230376151711744": 77, "432345564227567616": 77, "504403158265495555": 77, "india": 77, "hasmemb": 77, "8248": 77, "8101": 77, "imposs": 77, "back": [77, 80, 86, 168, 322, 330], "2822": 77, "tag1": 77, "tag2": 77, "37164": 77, "432": 77, "vertinc": 77, "property1": 77, "properti2": 77, "donati": 77, "luigi": 77, "hall": 77, "costa": 77, "carlo": 77, "khan": 77, "meera": 77, "mahinda": 77, "eli": 77, "94": 77, "228": [77, 98], "emb": [77, 158, 342], "th": [77, 162, 175, 288], "dom": 77, "pedro": 77, "ii": 77, "condariuc": 77, "bonomi": 77, "anyth": 77, "david": [77, 211, 222, 287], "silva": 77, "guliyev": 77, "tagclass": 77, "504403158265495552": 77, "504403158265495554": 77, "504403158265495556": 77, "504403158265495557": 77, "504403158265495558": 77, "504403158265495559": 77, "504403158265495560": 77, "504403158265495561": 77, "504403158265495562": 77, "504403158265495563": 77, "504403158265495564": 77, "504403158265495565": 77, "504403158265495566": 77, "504403158265495567": 77, "504403158265495568": 77, "504403158265495569": 77, "504403158265495570": 77, "504403158265495571": 77, "504403158265495572": 77, "504403158265495573": 77, "504403158265495574": 77, "504403158265495575": 77, "504403158265495576": 77, "504403158265495577": 77, "504403158265495578": 77, "504403158265495579": 77, "504403158265495580": 77, "504403158265495581": 77, "504403158265495582": 77, "504403158265495583": 77, "504403158265495584": 77, "504403158265495585": 77, "504403158265495586": 77, "504403158265495587": 77, "504403158265495588": 77, "504403158265495589": 77, "504403158265495590": 77, "504403158265495591": 77, "504403158265495592": 77, "504403158265495593": 77, "504403158265495594": 77, "504403158265495595": 77, "504403158265495596": 77, "504403158265495597": 77, "504403158265495598": 77, "504403158265495599": 77, "504403158265495600": 77, "504403158265495601": 77, "504403158265495602": 77, "504403158265495603": 77, "504403158265495604": 77, "504403158265495605": 77, "504403158265495606": 77, "504403158265495607": 77, "504403158265495608": 77, "504403158265495609": 77, "504403158265495610": 77, "504403158265495611": 77, "504403158265495613": 77, "504403158265495614": 77, "504403158265495615": 77, "504403158265495616": 77, "504403158265495617": 77, "504403158265495618": 77, "504403158265495619": 77, "504403158265495620": 77, "504403158265495621": 77, "q4": 77, "690": 77, "134313148716225": 77, "216172782113783811": 77, "216172782113783813": 77, "216172782113784707": 77, "216172782113784708": 77, "216172782113784709": 77, "216172782113783910": 77, "216172782113784104": 77, "216172782113784207": 77, "216172782113784318": 77, "216172782113784305": 77, "216172782113784597": 77, "216172782113784693": 77, "216172782113784018": 77, "216172782113784092": 77, "216172782113784108": 77, "216172782113784161": 77, "216172782113784162": 77, "73": [77, 98, 256], "216172782113783875": 77, "216172782113783932": 77, "216172782113784057": 77, "216172782113784068": 77, "216172782113784065": 77, "216172782113784235": 77, "216172782113784247": 77, "meaning": [77, 89, 102, 172], "449": 77, "454": [77, 98], "216172782113783810": 77, "acsend": 77, "descend": [77, 304], "216172782113784082": 77, "216172782113784169": 77, "216172782113784267": 77, "216172782113784368": 77, "216172782113784376": 77, "216172782113783938": 77, "216172782113784405": 77, "216172782113783980": 77, "216172782113783844": 77, "216172782113783901": 77, "216172782113783935": 77, "216172782113784439": 77, "216172782113784315": 77, "216172782113784374": 77, "216172782113784601": 77, "216172782113784431": 77, "216172782113783815": 77, "216172782113783817": 77, "216172782113783971": 77, "216172782113784154": 77, "216172782113784381": 77, "216172782113783933": 77, "earlier": [77, 261, 323], "216172782113783819": 77, "216172782113783826": 77, "216172782113783836": 77, "bi": [77, 93, 96], "query2": 77, "09": [77, 98], "07": [77, 86, 98, 229, 237], "hastag": 77, "count1": 77, "count2": 77, "jet_li": 77, "zhang_yim": 77, "faye_wong": 77, "tsui_hark": 77, "bruce_le": 77, "johnny_depp": 77, "tom_cruis": 77, "jackie_chan": 77, "query3": 77, "moder": 77, "infinit": [77, 271], "seriou": 77, "song": 77, "containerof": 77, "message_count": 77, "824633725780": 77, "08t02": 77, "334": [77, 98], "album": 77, "hao": 77, "wang": [77, 242, 244], "19791209300479": 77, "755914248304": 77, "02t20": 77, "03": [77, 98, 331], "344": 77, "wall": 77, "lin": 77, "lei": 77, "24189255811275": 77, "824633725045": 77, "02": [77, 237], "03t18": 77, "633": 77, "893353201782": 77, "28t23": 77, "53": [77, 98, 303], "251": 77, "1030792152809": 77, "03t09": 77, "47": [77, 88, 98, 160, 161, 163], "414": 77, "chen": 77, "32985348833887": 77, "07t07": 77, "30": [77, 98, 160, 161, 163, 234, 279, 281, 286, 323, 341], "038": 77, "zhang": [77, 333], "yang": [77, 333], "15393162789707": 77, "query4": 77, "membercount": 77, "country_count": 77, "counri": 77, "personcount": 77, "72057594037932503": 77, "72057594037932473": 77, "72057594037932489": 77, "72057594037932494": 77, "72057594037932501": 77, "72057594037934803": 77, "72057594037934804": 77, "72057594037935005": 77, "72057594037928132": 77, "72057594037935879": 77, "288230376151711799": 77, "country_top100_forums_dict": 77, "personcountforum": 77, "72057594037935702": 77, "72057594037930685": 77, "72057594037932114": 77, "72057594037934231": 77, "72057594037935703": 77, "72057594037935730": 77, "72057594037935734": 77, "72057594037932509": 77, "72057594037935707": 77, "72057594037935708": 77, "72057594037935711": 77, "72057594037935714": 77, "72057594037935719": 77, "72057594037935729": 77, "72057594037935731": 77, "72057594037935724": 77, "72057594037929560": 77, "72057594037931546": 77, "72057594037931545": 77, "72057594037932479": 77, "72057594037932485": 77, "72057594037932505": 77, "72057594037932511": 77, "72057594037935710": 77, "72057594037935722": 77, "72057594037929246": 77, "72057594037928266": 77, "72057594037935713": 77, "72057594037934308": 77, "72057594037934313": 77, "72057594037934302": 77, "72057594037930430": 77, "72057594037934303": 77, "72057594037932482": 77, "72057594037935147": 77, "72057594037935148": 77, "72057594037935157": 77, "72057594037927973": 77, "72057594037929386": 77, "72057594037934315": 77, "72057594037935720": 77, "72057594037935015": 77, "72057594037934300": 77, "72057594037930861": 77, "72057594037934319": 77, "72057594037931542": 77, "72057594037929583": 77, "72057594037933324": 77, "72057594037929182": 77, "72057594037929739": 77, "72057594037934829": 77, "72057594037935658": 77, "72057594037935660": 77, "72057594037935674": 77, "72057594037935682": 77, "72057594037935683": 77, "72057594037935672": 77, "72057594037927978": 77, "72057594037935163": 77, "72057594037935014": 77, "72057594037931544": 77, "72057594037934297": 77, "72057594037927979": 77, "72057594037932474": 77, "72057594037934384": 77, "72057594037932639": 77, "72057594037934380": 77, "72057594037935146": 77, "72057594037935152": 77, "72057594037928134": 77, "72057594037928674": 77, "72057594037929248": 77, "72057594037931240": 77, "72057594037931247": 77, "72057594037931256": 77, "72057594037930958": 77, "72057594037930963": 77, "72057594037931259": 77, "72057594037931260": 77, "72057594037931262": 77, "72057594037929365": 77, "72057594037929419": 77, "72057594037929421": 77, "72057594037929431": 77, "72057594037929434": 77, "72057594037929437": 77, "72057594037929446": 77, "72057594037929447": 77, "72057594037929449": 77, "72057594037929450": 77, "72057594037935166": 77, "72057594037929519": 77, "72057594037929451": 77, "72057594037929452": 77, "72057594037935046": 77, "72057594037932339": 77, "72057594037932481": 77, "72057594037934294": 77, "72057594037932389": 77, "72057594037932976": 77, "72057594037930870": 77, "72057594037931266": 77, "72057594037928092": 77, "72057594037928495": 77, "72057594037929510": 77, "72057594037929517": 77, "72057594037929961": 77, "72057594037929965": 77, "72057594037930242": 77, "72057594037930248": 77, "72057594037930250": 77, "72057594037930313": 77, "72057594037931547": 77, "72057594037935686": 77, "72057594037929052": 77, "72057594037929053": 77, "72057594037929055": 77, "72057594037929057": 77, "72057594037929060": 77, "72057594037934811": 77, "72057594037934813": 77, "72057594037934816": 77, "72057594037934821": 77, "72057594037934822": 77, "72057594037934823": 77, "72057594037934828": 77, "72057594037934835": 77, "72057594037934837": 77, "72057594037934975": 77, "72057594037934976": 77, "72057594037935032": 77, "72057594037935038": 77, "72057594037935045": 77, "72057594037935664": 77, "72057594037935673": 77, "72057594037935678": 77, "72057594037935685": 77, "72057594037931549": 77, "72057594037931550": 77, "72057594037931552": 77, "72057594037931554": 77, "72057594037931557": 77, "72057594037931560": 77, "72057594037931566": 77, "72057594037935671": 77, "72057594037935670": 77, "72057594037934977": 77, "72057594037931543": 77, "72057594037929518": 77, "72057594037935679": 77, "72057594037931575": 77, "72057594037932438": 77, "72057594037932878": 77, "72057594037932886": 77, "72057594037932888": 77, "72057594037927982": 77, "72057594037930526": 77, "72057594037930535": 77, "72057594037930546": 77, "72057594037930976": 77, "72057594037930536": 77, "72057594037931358": 77, "72057594037930366": 77, "72057594037931574": 77, "72057594037932435": 77, "72057594037935020": 77, "72057594037935864": 77, "72057594037933861": 77, "72057594037932440": 77, "72057594037927981": 77, "72057594037931349": 77, "72057594037931366": 77, "72057594037932885": 77, "72057594037927980": 77, "72057594037930529": 77, "72057594037930532": 77, "72057594037931304": 77, "72057594037932433": 77, "72057594037932441": 77, "72057594037934547": 77, "query11": 77, "live": 77, "startdat": 77, "enddat": 77, "216172782113784091": 77, "216172782113784250": 77, "216172782113784403": 77, "216172782113784537": 77, "216172782113784122": 77, "query14": 77, "country1": 77, "country2": 77, "subscor": 77, "award": [77, 333], "chile": 77, "case1": 77, "case2": 77, "case3": 77, "case4": 77, "216172782113784153": 77, "216172782113784100": 77, "216172782113783956": 77, "216172782113784673": 77, "216172782113784252": 77, "216172782113784263": 77, "216172782113784193": 77, "216172782113784242": 77, "216172782113784623": 77, "216172782113784498": 77, "216172782113784251": 77, "216172782113784538": 77, "216172782113784167": 77, "216172782113783864": 77, "216172782113784613": 77, "216172782113784116": 77, "faq": 78, "jave": [79, 327], "javasdk": [79, 327], "creation": [80, 160, 234], "transit": [80, 279, 307], "magnitud": [80, 92], "superior": [80, 91, 93, 97], "rich": [80, 90, 93, 95, 160, 162], "neg": [80, 81, 158, 162, 164, 166, 170, 175, 194, 272], "gsl": [80, 81, 90, 160, 161, 162, 163, 167, 174], "gat": [80, 95, 158, 166, 342], "deepwalk": [80, 158, 342], "trans": [80, 158, 342], "pyg": [80, 81, 84, 85, 95, 96, 97], "flexibli": [80, 90, 95, 97], "pytorch": [80, 81, 90, 95, 164, 166], "onlin": [80, 92, 95, 96, 319, 323], "fed": [80, 91, 95], "dockerfil": [80, 165], "ek": 80, "aw": [80, 98, 334], "ack": 80, "failov": [80, 97], "concentr": [80, 97, 214], "secur": [81, 95, 96], "industri": [81, 90, 95, 97, 98], "feasibl": [81, 95], "preprocess": [81, 170], "uniformli": [81, 247, 248, 249, 257, 258, 259, 260, 261, 305], "lookup": [81, 95, 170, 310], "topolog": [81, 160], "nn": [81, 83, 86, 87, 88, 91, 95, 101, 158, 170, 337, 342], "ego": [81, 95, 166, 311, 342], "dimension": [81, 87, 91, 95, 159, 161, 162], "conv": [81, 84, 95], "edge_index": [81, 84, 88], "carri": 81, "predict": [81, 87, 90, 91, 95], "asynchron": 81, "tensor": [81, 84, 100, 101, 102, 141, 158, 162, 166, 168, 314, 316], "plaintext": 81, "clearli": [81, 95], "space": [81, 95, 159, 160, 164, 175, 209, 257, 258, 259, 260, 261], "dimens": [81, 83, 86, 87, 91, 95, 159, 257, 258, 259, 260, 302, 337], "batchgraph": 81, "mini": [81, 95], "loss": [81, 83, 86, 87, 88, 91, 95, 170, 337, 342], "mind": 81, "classif": [81, 85, 91, 95, 99, 158, 159, 170], "trainer": [81, 83, 86, 87, 91, 158, 337, 342], "dependic": 82, "hk": 82, "rm": [82, 170], "4g": 82, "aarch64": 83, "processor": 83, "verion": 83, "egographsag": [83, 86, 91, 337], "349": [83, 87, 91, 337], "venu": [83, 91], "confer": [83, 91, 162, 333], "www": [83, 86, 87, 91, 175, 229, 283, 292, 295, 323, 337], "tf": [83, 84, 86, 87, 91, 158, 159, 164, 165, 170, 337, 342], "disable_v2_behavior": [83, 86, 87, 91, 337], "importerror": [83, 86, 87, 91, 337], "load_ogbn_mag": [83, 86, 87, 89, 91, 337, 343], "egosagesuperviseddataload": [83, 87, 91, 337], "localtrain": [83, 86, 87, 91, 337], "node_typ": [83, 86, 87, 91, 158, 160, 161, 164, 167, 170, 174, 337, 342], "class_num": [83, 87, 91, 158, 337, 342], "features_num": [83, 86, 87, 91, 158, 337, 342], "hops_num": [83, 87, 91, 158, 337, 342], "nbrs_num": [83, 86, 87, 91, 337], "epoch": [83, 84, 86, 87, 88, 91, 158, 163, 337, 342], "hidden_dim": [83, 86, 87, 91, 158, 170, 337, 342], "256": [83, 87, 88, 91, 98, 239, 299, 323, 337], "in_drop_r": [83, 87, 91, 337], "learning_r": [83, 86, 87, 91, 170, 337], "reset_default_tf_graph": [83, 87, 91, 337], "act_func": [83, 87, 91, 337], "relu": [83, 87, 91, 337], "dropout": [83, 86, 87, 91, 170, 337], "train_data": [83, 86, 87, 91, 337], "mask": [83, 87, 91, 174, 337], "train_embed": [83, 87, 91, 337], "src_ego": [83, 86, 87, 91, 337], "train_label": [83, 87, 91, 337], "reduce_mean": [83, 87, 91, 158, 170, 337, 342], "sparse_softmax_cross_entropy_with_logit": [83, 87, 91, 158, 170, 337, 342], "logit": [83, 87, 91, 170, 337], "adamoptim": [83, 86, 87, 91, 170, 337], "test_embed": [83, 87, 91, 337], "test_label": [83, 87, 91, 337], "test_indic": [83, 87, 91, 337], "argmax": [83, 87, 88, 91, 337], "output_typ": [83, 87, 91, 145, 314, 337], "test_acc": [83, 87, 88, 91, 337], "div": [83, 87, 91, 337], "reduce_sum": [83, 87, 91, 337], "cast": [83, 87, 89, 91, 170, 322, 337], "float32": [83, 87, 88, 91, 161, 170, 337], "obgn": [83, 87], "mag": [83, 87, 91, 337], "paper_featur": [83, 91, 337], "feat_": [83, 86, 87, 88, 91, 337], "128": [83, 86, 87, 88, 91, 170, 337], "lg": [83, 86, 87, 91, 153, 317, 331, 337], "cite": [83, 86, 87, 91, 337], "gen_label": [83, 86, 87, 91, 153, 317, 337], "val": [83, 86, 87, 91, 158, 174, 317, 337, 342], "85": [83, 86, 87, 91, 98, 101, 317, 337], "seed": [84, 158, 166, 170, 229, 232, 233, 234, 235, 237, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 264, 265, 266, 267, 270, 302, 305, 307], "sampler": [84, 86, 163, 166, 168], "perceptu": 84, "theori": [84, 162, 170], "unsupervis": [84, 86, 99, 158, 164, 166, 167, 317], "mainstream": [84, 162, 163], "putback": 84, "outofrangeerror": [84, 163, 164, 170], "evolv": [84, 90, 323], "neighborsampl": [84, 162], "edge_weight": [84, 162, 164], "random_with_replac": 84, "topk": [84, 162, 164], "pad": [84, 162], "expand_factor": [84, 162, 167], "sparsenod": [84, 161, 162, 164], "sparseedg": [84, 161, 162, 164], "layer1": [84, 162], "layer2": [84, 162], "neighbor_sampl": [84, 162], "bui": [84, 90, 161, 162, 163, 164, 167, 170], "i2i": [84, 162, 164], "layer_nod": [84, 162], "int_attr": [84, 161, 162, 163, 167, 170], "layer_edg": [84, 162], "float_attr": [84, 161, 162, 163, 167, 170], "egograph": [84, 95, 158, 166, 342], "negativesampl": [84, 167], "node_weight": [84, 164, 167], "edge_sampl": [84, 163, 167], "negative_sampl": [84, 158, 167, 342], "neg_nod": [84, 167], "heterogen": [84, 87, 91, 93, 95, 159, 160, 161, 162, 164], "randomli": [84, 164, 229, 235, 239, 241, 250, 252, 257, 260, 265, 307], "outv": [84, 158, 162, 164, 170, 341, 342], "overs": 84, "citat": [85, 87, 88, 91, 99, 170, 337], "revisit": [85, 86, 99], "ho2": 85, "with_dataset": [86, 157, 317, 343], "k8s_service_typ": [86, 157, 317, 337], "loadbalanc": [86, 317, 337], "k8s_image_pull_polici": [86, 157, 317], "cell": [86, 303], "metainfo": 86, "obgn_mag": 86, "ogbn_mag_smal": [86, 89, 337, 343], "chose": [86, 87], "i_featur": [86, 87], "argpars": 86, "tfg": 86, "egosageunsuperviseddataload": 86, "parse_arg": 86, "argumentpars": 86, "egosag": 86, "add_argu": 86, "output_dim": [86, 158, 342], "neg_num": 86, "0001": 86, "agg_typ": 86, "drop_out": 86, "neg_sampl": 86, "temperatur": 86, "dim": [86, 88, 257, 258, 259, 260], "src_emb": [86, 158, 342], "dst_emb": 86, "dst_ego": 86, "neg_dst_emb": 86, "neg_dst_ego": 86, "unsupervised_softmax_cross_entropy_loss": 86, "ogbn": [87, 88, 91, 337], "academ": [87, 91, 337], "microsoft": [87, 91, 337], "institut": [87, 91, 337], "accomplish": [87, 91, 229], "word2vec": [87, 91, 337], "torch": 88, "ogb": 88, "nodeproppr": 88, "torch_geometr": 88, "graphlearn_torch": 88, "glt": 88, "load_ogbn_arxiv": 88, "ogbn_arxiv": 88, "no_grad": 88, "test_load": 88, "dataset_nam": 88, "eval": [88, 314], "y_true": 88, "enumer": [88, 100], "devic": [88, 98], "del": [88, 172, 310], "y_pred": 88, "keepdim": 88, "unsqueez": 88, "acc": 88, "glt_graph": 88, "node_featur": 88, "node_label": [88, 317], "edge_dir": 88, "random_node_split": 88, "num_val": 88, "num_test": 88, "init_cli": 88, "num_serv": 88, "num_client": 88, "client_rank": 88, "master_addr": 88, "master_port": 88, "server_client_master_port": 88, "num_rpc_thread": 88, "is_dynam": 88, "train_load": 88, "distneighborload": 88, "num_neighbor": 88, "input_nod": 88, "512": [88, 164], "collect_featur": 88, "to_devic": 88, "worker_opt": 88, "remotedistsamplingworkeropt": 88, "worker_devic": 88, "worker_concurr": 88, "buffer_s": 88, "1gb": 88, "prefetch_s": 88, "workload_typ": 88, "in_channel": 88, "hidden_channel": 88, "num_lay": 88, "out_channel": 88, "adam": 88, "lr": 88, "arxiv": [88, 175, 218, 233, 234, 235, 249, 302], "zero_grad": 88, "log_softmax": 88, "nll_loss": 88, "backward": [88, 95, 164, 261, 317], "03d": 88, "4f": 88, "accuraci": [88, 95], "shutdown": 88, "shutdown_cli": 88, "trivial": [89, 97, 226], "bucket": [89, 317, 333], "avaiabl": [89, 323], "_e": [89, 172, 319, 343], "ldbc_sampl": [89, 323, 341, 343], "person_0_0": [89, 323, 338, 343], "didn": [89, 98], "person_knows_person_0_0": [89, 323, 338, 343], "comment_0_0": [89, 338, 343], "person_likes_comment_0_0": [89, 343], "deal": [89, 93, 162], "unseen": [89, 95, 325], "person_likes_post_0_0": [89, 343], "post_0_0": [89, 343], "ndarrai": [89, 102, 117, 128, 161, 162, 164, 167, 172, 174, 310, 343], "apart": [89, 257], "comment_replyof_comment_0_0": [89, 338, 343], "datasourc": [89, 343], "col_0": [89, 343], "col_1": [89, 343], "coo": [89, 321, 343], "array_v": [89, 343], "col": [89, 343], "array_": [89, 343], "hood": 89, "distributedli": [89, 160, 166, 168, 169, 170], "fsspec": [89, 343], "kwarg": [89, 101, 102, 109, 120, 132, 136, 137, 154, 157, 167, 172, 173, 174, 317], "ds1": [89, 343], "datafil": [89, 343], "ds2": [89, 343], "graphscope_bucket": [89, 343], "hangzhou": [89, 159, 343], "ds3": [89, 343], "9000": [89, 323, 343], "extra_conf": [89, 343], "conf1": [89, 343], "d34": [89, 343], "client_kwarg": [89, 343], "region_nam": [89, 343], "east": [89, 343], "ossf": [89, 343], "subclass": [89, 100, 310], "abstractfilesystem": [89, 343], "abstractbufferfil": 89, "_upload_chunk": [89, 343], "_initiate_upload": [89, 343], "_fetch_rang": [89, 343], "register_implement": [89, 343], "protocol_nam": [89, 343], "protocol_file_system": [89, 343], "direction": 89, "exce": [89, 268, 269], "super": [89, 101, 160, 164], "precis": [89, 95, 302], "modular": [90, 302], "rapidli": [90, 162], "seller": 90, "buyer": [90, 94], "fraudul": 90, "sell": 90, "suspici": 90, "fraud": [90, 97], "feed": [90, 153, 158, 161, 164, 170, 174, 317, 342], "webui": 90, "necessit": 90, "diversifi": 90, "ingest": [90, 323], "rapid": 90, "parti": [90, 290], "analyst": 90, "gaia": [90, 341], "resembl": [90, 302, 307, 309], "olap": 90, "gen": [90, 164], "dataflow": [90, 92], "arriv": 90, "hiactor": 90, "financi": 90, "billion": [90, 93, 97], "preval": 90, "definit": [90, 175, 256, 257, 259], "miniconda": 91, "scientif": 91, "field_of_studi": [91, 337], "subject": 91, "4307": [91, 337], "n1": 91, "n2": 91, "proven": 91, "2014": [91, 175, 337], "2020": [91, 337], "ret1": [91, 337], "k_core": [91, 101, 175, 311, 333, 337], "ret2": [91, 337], "kcore": [91, 337], "downstream": [91, 164], "supervis": [91, 99, 159, 162, 170, 317, 337], "train_sag": 91, "130": [91, 337], "conduit": 91, "simultan": [91, 97, 319], "icde2023": 92, "indroduc": 92, "sigmod2017": [92, 333, 339], "gra": 92, "ph": 92, "arallel": 92, "ngine": 92, "opensourc": 92, "raph": 92, "nalysi": 92, "elat": 92, "ransact": 92, "loos": [92, 97, 319], "mysql": [92, 319], "nutshel": [92, 319], "exploit": [92, 319], "ahead": [92, 319], "wal": [92, 319], "etriev": 92, "IN": 92, "terfac": 92, "portabl": [92, 322], "rust": [92, 322, 323], "handler": [92, 317], "chive": 92, "guardian": 92, "galaxi": 92, "steal": 92, "tackl": [92, 93], "imbal": 92, "nvlink": 92, "acut": 92, "asymmetr": 92, "holist": 92, "innov": 92, "speedup": 92, "cncf": 92, "sandbox": 92, "soon": [92, 96, 97, 98, 161], "amplifi": 92, "dissoci": 92, "ly": 92, "dag": [92, 101, 102, 120, 172, 310, 314, 317], "laptop": 92, "loop": [92, 175, 185, 198, 237, 239, 241, 243, 249, 257, 258, 259, 260, 261, 267, 270, 310, 311, 341], "correl": [92, 175], "subtask": 92, "earli": 92, "nsdi": [92, 339], "legaci": 92, "interchang": 92, "memoiz": 92, "vldb2021": 92, "artial": 92, "ncrement": 92, "transport": 93, "protein": [93, 251], "uncov": 93, "vari": [93, 159], "unless": [93, 162, 310], "discov": 93, "discoveri": [93, 95, 317], "rough": 93, "accordingli": [93, 150], "snap": 93, "stanford": [93, 301], "cs224w": 93, "constitu": 93, "bellman": [93, 175], "ford": [93, 175], "wiki": [93, 101, 272, 276, 277, 278, 279, 281, 282, 283, 289, 290, 291, 292, 294, 295, 296, 297], "s_algorithm": 93, "towardsdatasci": 93, "9bd8951e7da": 93, "road": [93, 325], "logist": 93, "deliveri": 93, "media": 93, "nontrivi": [93, 282], "steep": 93, "sought": 93, "monei": [94, 97], "launder": [94, 97], "exact": [94, 239, 241, 337], "exclud": 94, "purchas": 94, "bolder": 94, "border": 94, "sens": [94, 302, 317], "worst": 94, "embrac": 94, "grasp": 94, "drug": 95, "likelihood": 95, "biologi": 95, "valuabl": 95, "bioinformat": 95, "chemic": 95, "promis": 95, "driven": [95, 302, 322], "carefulli": 95, "rewind": 95, "stack": 95, "convolut": [95, 166], "weigh": 95, "choic": [95, 322, 323], "huge": [95, 325], "plain": 95, "text": [95, 103, 211], "gradient": 95, "recal": 95, "f1": [95, 172], "assess": [95, 170, 287], "irregular": 95, "unstructur": 95, "pool": 95, "hardwar": [95, 326], "undergo": 95, "perceiv": 95, "maxgraph": [96, 339], "2x": 96, "excel": 96, "elast": [96, 323], "encrypt": 96, "geminigraph": [97, 98], "plato": [97, 98], "empir": 97, "enjoi": 97, "janusgraph": 97, "nebula": 97, "dbm": 97, "relaunch": [97, 323], "recoveri": 97, "coars": 97, "grain": 97, "invest": 97, "trace": [97, 101], "dgl": 97, "nebular": 97, "movement": [97, 164], "grade": 98, "r6": 98, "8xlarg": 98, "alibabacloud": 98, "ec": 98, "xl": 98, "a038f97": 98, "170e7d3": 98, "21009d6": 98, "v4": 98, "mpich": 98, "fair": 98, "huge_pag": 98, "jemalloc": 98, "o3": 98, "stub": [98, 104, 106, 239, 267, 270], "determinist": [98, 103, 317, 323], "cdlp": [98, 101, 333], "load_direct": 98, "load_undirected_from_direct": 98, "reformat": 98, "mark": [98, 175], "datagen": 98, "9_0": 98, "fb": 98, "62": 98, "9_1": 98, "78": [98, 229, 303], "9_2": 98, "zf": 98, "88": [98, 242, 244], "60": [98, 175, 303], "61": 98, "176": [98, 266], "graph500": 98, "71": [98, 175, 247, 251, 257], "79": [98, 242, 244], "friendster": 98, "97": 98, "39": [98, 160, 161, 163, 175, 303, 333, 335], "86": 98, "57": 98, "126": [98, 243], "98": 98, "83": 98, "66": 98, "1695": 98, "2742": 98, "3600": 98, "425": 98, "55": [98, 209], "lcc": 98, "521": 98, "51": [98, 303], "296": 98, "1859": 98, "201": [98, 306], "842": 98, "68": 98, "competitor": 98, "pagerank_loc": 98, "65": 98, "72": 98, "84": 98, "63": [98, 246, 248], "gunrock": 98, "0c9a96": 98, "grout": 98, "5ce160": 98, "v7": 98, "v10": 98, "gn6v": 98, "c8g1": 98, "16xlarg": 98, "8x": 98, "16gb": 98, "nvidia": 98, "v100": 98, "gb": 98, "soc": [98, 230, 231], "livejournal1": 98, "89": 98, "9345": 98, "215": [98, 299], "560": 98, "3029": 98, "129": [98, 265], "389": 98, "155": 98, "0549": 98, "sinaweibo": 98, "168": 98, "1649": 98, "647": 98, "orkut": 98, "105": [98, 230, 231], "121": 98, "193": 98, "658": 98, "3201": 98, "7677": 98, "137": [98, 237], "2139": 98, "319": 98, "261": 98, "69": [98, 297, 303], "235": 98, "567": 98, "283": 98, "073": 98, "6619": 98, "45": [98, 160, 161, 163, 239], "150": 98, "87299": 98, "162": 98, "60403": 98, "9676": 98, "141": 98, "347": 98, "7772": 98, "0118": 98, "306": 98, "8618": 98, "9134": 98, "467": 98, "60801": 98, "8666": 98, "3501": 98, "870": 98, "6451": 98, "198": 98, "829": 98, "5036": 98, "229": 98, "024": 98, "483": 98, "178": 98, "5593": 98, "807": 98, "367": 98, "6946": 98, "2339": 98, "jupyt": [99, 317], "notebook": [99, 317], "jupyterlab": 99, "playground": [99, 344], "bipartit": [99, 158, 160, 216, 264, 265, 266, 298, 342], "grapeengin": 100, "vineyardserv": 100, "grapeinst": 100, "graphscopeserv": 100, "inlin": 100, "dag_fil": 100, "dagfil": 100, "rundagfil": 100, "subscrib": 100, "charg": 100, "commspec": [100, 319, 322, 324], "comm_spec": [100, 319, 322, 324], "vineyard_socket": 100, "bl": 100, "dispatchresult": 100, "onrec": 100, "commanddetail": 100, "gsobject": 100, "objectmanag": 100, "appentri": 100, "icontextwrapp": 100, "ifragmentwrapp": 100, "projector": 100, "propertygraphutil": 100, "objecttyp": 100, "tostr": [100, 324], "putobject": 100, "obj": 100, "removeobject": 100, "getobject": [100, 323, 324], "hasobject": 100, "analyticalserv": 100, "startserv": 100, "stopserv": 100, "engineconfig": 100, "tojsonstr": 100, "vineyard_rpc_endpoint": 100, "enable_java_sdk": 100, "setcommand": 100, "enum": 100, "aggregatepolici": 100, "kpickfirst": 100, "kpickfirstnonempti": 100, "krequireconsist": 100, "kconcat": 100, "kpickfirstnonemptygraphdef": 100, "kmergegraphdef": 100, "worker_id": [100, 172], "error_cod": 100, "set_error": 100, "has_large_data": 100, "set_graph_def": 100, "graphdefpb": 100, "graph_def": 100, "set_data": 100, "large_data": 100, "inarch": 100, "arc": 100, "aggregate_polici": 100, "fragmentwrapp": 100, "addcolumn": 100, "vdata_t": 100, "edata_t": 100, "arrowvertexmap": 100, "internaltyp": 100, "arrowprojectedfragmentbas": 100, "bareregist": 100, "internal_oid_t": 100, "property_graph_typ": 100, "eid_typ": 100, "vertexrang": [100, 103], "inner_vertices_t": 100, "outer_vertices_t": 100, "vertices_t": 100, "sub_vertices_t": 100, "nbr_t": 100, "arrow_projected_fragment_impl": 100, "compact_nbr_t": 100, "compactnbr": 100, "nbrunit": 100, "compact_adj_list_t": 100, "compactadjlist": 100, "const_adj_list_t": 100, "const_compact_adj_list_t": 100, "property_vertex_map_t": 100, "arrowprojectedvertexmap": 100, "label_id_typ": 100, "prop_id_typ": 100, "property_graph_t": 100, "eid_array_t": 100, "data_t": 100, "inner_vertex_array_t": 100, "outer_vertex_array_t": 100, "objectmeta": 100, "preparetorunapp": 100, "prepareconf": 100, "fnum": [100, 103], "vertex_prop_id": 100, "edge_prop_id": 100, "mirrorvertic": 100, "getvertex": 100, "getid": 100, "getinternalid": 100, "getfragid": 100, "typedarrai": 100, "value_typ": 100, "gid2vertex": 100, "vertex2gid": 100, "getinnerverticesnum": 100, "getouterverticesnum": 100, "getverticesnum": 100, "getedgenum": [100, 324], "getinedgenum": [100, 324], "getoutedgenum": [100, 324], "getoutgoingedgenum": 100, "getincomingedgenum": 100, "gettotalverticesnum": 100, "isinnervertex": 100, "getoutervertex": 100, "getinnervertexid": 100, "getinnervertexinternalid": 100, "getoutervertexid": 100, "getoutervertexinternalid": 100, "gid2oid": 100, "oid2gid": 100, "innervertexgid2vertex": 100, "outervertexgid2vertex": 100, "getoutervertexgid": 100, "getinnervertexgid": 100, "compact_": 100, "enable_if": 100, "getincominginnervertexadjlist": 100, "getoutgoinginnervertexadjlist": 100, "getincomingoutervertexadjlist": 100, "getoutgoingoutervertexadjlist": 100, "src_fid": 100, "dst_fid": 100, "getlocaloutdegre": 100, "getlocalindegre": 100, "destlist": 100, "iedest": 100, "oedest": 100, "ioedest": 100, "getvertexmap": 100, "get_out_edges_ptr": 100, "get_in_edges_ptr": 100, "get_oe_offsets_begin_ptr": 100, "get_oe_offsets_end_ptr": 100, "get_ie_offsets_begin_ptr": 100, "get_ie_offsets_end_ptr": 100, "get_edata_array_accessor": 100, "get_vdata_array_accessor": 100, "get_arrow_frag": 100, "vertex_map_id": 100, "local_vertex_map": [100, 324], "getoid": 100, "getgid": 100, "offset2lid": 100, "getoffsetfromlid": 100, "getlidfromgid": 100, "getfidfromgid": 100, "oid_t_": 100, "vid_t_": 100, "arrowfragmentload": 100, "efil": [100, 324], "vfile": [100, 324], "graph_info": 100, "leaf": [100, 102, 147, 175, 220, 304], "table_vec_t": 100, "loadvertexedget": 100, "loadvertext": 100, "loadedget": 100, "loadfrag": 100, "loadfragmentasfragmentgroup": 100, "addlabelstofrag": 100, "frag_id": [100, 319, 324], "addlabelstofragmentasfragmentgroup": 100, "initpartition": 100, "doxygenclass": 100, "arrowfragmentappend": 100, "doxygen": 100, "runner": [100, 333], "_build": 100, "appbas": 100, "defaultmessagemanag": 100, "need_split_edg": 100, "konlyout": 100, "propertyappbas": 100, "propertymessagemanag": 100, "propertyautoappbas": 100, "propertyautomessagemanag": 100, "app_t": 100, "defaultwork": 100, "parallelenginespec": 100, "pe_spec": 100, "defaultparallelenginespec": 100, "getcontext": 100, "ostream": 100, "parallelpropertywork": 100, "parallelpropertymessagemanag": 100, "propertyautowork": 100, "pointer": 100, "appfram": 100, "creatework": 100, "deletework": 100, "lib_path": 100, "worker_handl": 100, "queryarg": 100, "query_arg": [100, 145, 314], "context_kei": 100, "frag_wrapp": 100, "functiontyp": 100, "argsnum": 100, "argsunpack": 100, "proto": [100, 120, 145], "datatyp": 100, "argtypeat": 100, "defaultpropertywork": 100, "ctx_t": 100, "ctxwrapperbuild": 100, "contextwrapp": 100, "vertexpropertycontext": [100, 333], "contextbas": 100, "labeledvertexdatacontext": 100, "contextdatatyp": 100, "icolumn": 100, "get_column": 100, "get_typed_column": 100, "vertex_properti": [100, 101, 103], "properties_map": 100, "vertexdatacontextwrapp": 100, "ivertexdatacontextwrapp": 100, "fragment_wrapp": 100, "unique_ptr": 100, "tondarrai": 100, "todatafram": 100, "tovineyardtensor": 100, "tovineyarddatafram": 100, "toarrowarrai": 100, "tensorcontext": [100, 102], "set_shap": 100, "tensor_t": 100, "tensorcontextwrapp": 100, "itensorcontextwrapp": 100, "cmake_extra_opt": 101, "asset": 101, "labeled_vertex_data": 101, "dynamic_vertex_data": 101, "labeled_vertex_properti": 101, "cpp_pregel": 101, "cython_pi": 101, "cython_pregel": 101, "appdagnod": [101, 136, 142], "__init__": [101, 158, 165, 172, 173, 174, 310, 311, 313, 317, 323, 342], "bytesio": [101, 109], "is_compat": 101, "graphdagnod": [101, 113, 127, 128, 144, 151, 153, 172, 173, 317], "invalidargumenterror": [101, 317], "scannererror": 101, "incorrect": 101, "signatur": [101, 164, 310], "neccessari": 101, "resouc": 101, "__call__": 101, "app_asset": [101, 113, 119], "app_nod": 101, "__del__": 101, "unload": [101, 124, 142, 144], "attribute_assortativity_coeffici": [101, 333], "assort": 101, "ref": [101, 322], "joint": [101, 267, 268, 269, 270, 311], "newman": [101, 175, 239, 241, 302], "026126": 101, "2003": [101, 175, 232, 239, 250, 258], "numeric_assortativity_coeffici": [101, 333], "analog": 101, "k_": [101, 211, 275], "rac": 101, "s_i": 101, "sum_": [101, 175, 243], "w_": [101, 175, 243], "ij": [101, 175], "k_j": 101, "valueerror": [101, 157, 172, 175, 249, 306, 317], "barrat": 101, "barth\u00e9lemi": 101, "pastor": 101, "satorra": 101, "vespignani": 101, "pna": 101, "101": [101, 339], "3747": 101, "3752": 101, "2004": [101, 264], "average_shortest_path_length": [101, 175, 311, 333], "frac": [101, 175, 185, 243], "vertexdatacontextdagnod": [101, 102], "avg_clust": [101, 333], "degree_threshold": 101, "threshold": [101, 257, 258, 259, 260], "1e9": 101, "unweight": [101, 175], "foster": 101, "grassberg": 101, "paczuski": 101, "107": [101, 263], "10815": 101, "1e": [101, 170, 175, 229], "06": [101, 175], "html": [101, 175, 259, 262, 271, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 290, 292], "gv": 101, "hits_algorithm": 101, "vertexpropertycontextdagnod": [101, 102], "is_simple_path": [101, 333], "nonempti": 101, "biject": [101, 305], "smallest": [101, 262, 282, 292], "pairwis": 101, "k_shell": [101, 333], "katz_centrality_numpi": [101, 175], "auttenu": 101, "maximun": 101, "min_progress": 101, "1000": [101, 160, 175, 307, 310, 323], "progress_tri": 101, "progress": [101, 254], "met": 101, "blondel": 101, "et": [101, 307], "al": [101, 307], "stat": [101, 257, 259], "mech": 101, "10008": 101, "2008": [101, 229, 252], "sotera": 101, "lpa_u2i": [101, 333], "labeledvertexpropertycontextdagnod": [101, 102], "pagerank_nx": [101, 333], "max_it": [101, 175, 229], "tol": [101, 175, 229], "solver": 101, "voterank": [101, 333], "unsign": [101, 323], "basecontextdagnod": [102, 172], "bound_app": [102, 119], "contextdagnod": 102, "to_vineyard_tensor": [102, 316, 333], "to_vineyard_datafram": [102, 316, 333], "lazi": [102, 172, 317], "sg": 102, "ramework": 102, "resultdagnod": [102, 137], "r4": [102, 325], "62586": 102, "comparis": 102, "alphabet": [102, 316], "tensorcontextdagnod": 102, "quer": [102, 316], "labeledvertexdatacontextdagnod": 102, "label_nam": [102, 316], "column_nam": [102, 316], "labeld": [102, 159], "context_nod": 102, "result_schema": 102, "referenc": 102, "dynamicvertexdatacontext": 102, "dag_nod": 102, "get_str": 103, "get_doubl": 103, "edge_label_id": 103, "edge_label_nam": 103, "incoming_edg": 103, "register_aggreg": 103, "pregelaggregatortyp": 103, "aggr_typ": 103, "get_aggregated_valu": 103, "get_total_vertices_num": 103, "vertex_property_num": 103, "vertex_label_nam": 103, "vertex_label_id": 103, "edge_property_num": 103, "get_vertex_label_by_id": 103, "get_vertex_label_id_by_nam": 103, "get_edge_label_by_id": 103, "get_edge_label_id_by_nam": 103, "edge_properti": 103, "get_vertex_property_id_by_nam": 103, "vertex_property_nam": [103, 322], "get_vertex_property_by_id": 103, "vertex_property_id": 103, "get_edge_property_id_by_nam": 103, "edge_property_nam": 103, "get_edge_property_by_id": 103, "edge_property_id": 103, "kboolandaggreg": 103, "kbooloraggreg": 103, "kbooloverwriteaggreg": 103, "overwritten": 103, "kdoubleminaggreg": 103, "kdoublemaxaggreg": 103, "kdoublesumaggreg": 103, "kdoubleproductaggreg": 103, "kdoubleoverwriteaggreg": 103, "kint64minaggreg": 103, "kint64maxaggreg": 103, "kint64sumaggreg": 103, "kint64productaggreg": 103, "kint64overwriteaggreg": 103, "ktextappendaggreg": 103, "kalongoutgoingedgetooutervertex": 103, "kalongincomingedgetooutervertex": 103, "kalongedgetooutervertex": 103, "nerghbor": 103, "get_total_nodes_num": 103, "get_nodes_num": 103, "get_inner_nodes_num": 103, "get_outer_nodes_num": 103, "outer_nod": 103, "get_node_fid": 103, "is_inner_nod": 103, "is_outer_nod": 103, "get_nod": [103, 161], "get_outer_nod": 103, "get_node_id": 103, "get_incoming_edg": 103, "has_child": 103, "child": [103, 212, 304], "has_par": 103, "parent": [103, 105, 145, 150, 304], "get_indegre": 103, "get_outdegre": 103, "kmaxaggreg": 103, "ksumaggreg": 103, "kproductaggreg": 103, "koverwriteaggreg": 103, "subproject": 105, "scratch": 105, "never": [105, 310], "hopefulli": 105, "dskiptest": 105, "dmaven": 105, "antrun": 105, "jni": 105, "gae_java": 106, "graphscope_typ": 108, "graphscopetyp": 108, "myalgorithm": 108, "filenotfounderror": 109, "permissionerror": 109, "typeerror": [109, 145, 317], "arrowproperti": 110, "subrang": 110, "loader_op": 111, "notimplementederror": 111, "run_app": [116, 117, 132, 140, 141], "copy_typ": 118, "session_id": [120, 124, 145, 172, 173, 310, 314], "graph_typ": [120, 310], "graphtyp": [120, 310, 319, 324], "view_typ": 121, "vertex_or_edge_label_list": 122, "graph_util": 122, "vertexlabel": 122, "op_typ": [124, 145, 314], "uiliti": 124, "interactive_queri": [129, 317], "gremlin_script": [129, 173], "request_opt": [129, 173], "interactivequerydagnod": 129, "modify_typ": [130, 131], "attr": [130, 131, 145, 164, 177, 178, 179, 310, 313], "type_pb2": [130, 131, 135], "nx_add_edg": 130, "nx_del_edg": 130, "nx_update_edg": 130, "nx_add_nod": 131, "nx_del_nod": 131, "nx_update_nod": 131, "fd": [132, 137, 333], "storage_opt": [132, 137], "write_opt": [132, 137], "adaptor": 132, "result_path": [132, 137], "vertex_collect": 133, "edge_collect": 133, "report_typ": 135, "variati": 135, "node_num": [135, 337, 341], "has_nod": [135, 310], "has_edg": [135, 310], "node_data": 135, "edge_data": [135, 325], "neighbors_by_nod": 135, "succs_by_nod": 135, "preds_by_nod": 135, "neighbors_by_loc": 135, "succs_by_loc": 135, "preds_by_loc": 135, "deg_by_nod": 135, "in_deg_by_nod": 135, "out_deg_by_nod": 135, "deg_by_loc": 135, "in_deg_by_loc": 135, "out_deg_by_loc": 135, "nodes_by_loc": 135, "loc": 135, "multigraph": [135, 175, 177, 185, 189, 198, 203, 204, 230, 231, 239, 241, 254, 255, 256, 310, 313], "multidigraph": [135, 177, 189, 198, 203, 204, 241, 249, 250, 308, 310], "large_attr": [145, 314], "types_pb2": [145, 310], "operationtyp": 145, "opdef": [145, 149], "attrvalu": [145, 172, 341], "largeattrvalu": 145, "op_def_pb2": 149, "incoming_data": [151, 172, 317], "as_default": [151, 317], "alia": [156, 158, 164, 310, 317, 342], "k8s_gs_imag": [157, 317, 335], "k8s_etcd_imag": 157, "k8s_image_pull_secret": [157, 317], "k8s_coordinator_cpu": [157, 317], "k8s_coordinator_mem": [157, 317], "k8s_vineyard_cpu": [157, 317], "k8s_mars_worker_cpu": [157, 317], "k8s_mars_worker_mem": [157, 317], "k8s_mars_scheduler_cpu": [157, 317], "k8s_mars_scheduler_mem": [157, 317], "with_mar": [157, 317], "k8s_waiting_for_delet": [157, 317], "dataset_download_retri": 157, "k8s_deploy_mod": [157, 317], "kv": 157, "cooper": [158, 172], "\u02bbegograph": 158, "\u02bbegotensor": 158, "sample_se": [158, 342], "positive_sampl": [158, 342], "receptive_fn": [158, 342], "egotensor": [158, 166, 342], "egoflow": [158, 166, 342], "cora": [158, 170, 342], "convers": [158, 159, 319], "node_t": [158, 159, 170, 342], "edge_table_with_self_loop": [158, 342], "train_tabl": [158, 342], "val_tabl": [158, 342], "test_tabl": [158, 342], "dataset_fold": [158, 342], "decod": [158, 159, 160, 170, 342], "attr_typ": [158, 159, 160, 170, 342], "1433": [158, 170, 342], "attr_delimit": [158, 159, 160, 342], "learningbasedmodel": [158, 342], "categorical_attrs_desc": [158, 342], "_sample_se": [158, 342], "_positive_sampl": [158, 342], "_receptive_fn": [158, 342], "ego_flow": [158, 342], "src_ego_spec": [158, 342], "pos_src_ego_tensor": [158, 342], "identityencod": [158, 342], "widendeepencod": [158, 342], "feature_encod": [158, 342], "gcnconv": [158, 342], "sparseegographencod": [158, 342], "_encod": [158, 342], "conv_lay": [158, 342], "_supervised_loss": [158, 342], "full_graph_mod": [158, 342], "localtftrain": [158, 342], "model_fn": [158, 170, 342], "batch_szi": [158, 342], "load_graph": [158, 342], "server_id": [158, 342], "server_count": [158, 160, 170, 342], "tracker": [158, 170, 342], "bought": 159, "saturdai": 159, "morn": 159, "bigint": 159, "dst_id": [159, 160, 161, 163, 164, 170, 174], "shanghai": 159, "localfilesystem": 159, "pai": [159, 164, 165], "tab": 159, "s2": [159, 275], "215340": 159, "933091": 159, "grei": 159, "362519": 159, "097545": 159, "chapter": [159, 160, 162, 256, 293], "dscript": 159, "dentryfil": 159, "dtabl": 159, "odp": 159, "prj": 159, "define_str": 159, "node_sourc": 159, "edge_sourc": 159, "hash": [159, 172], "bucket_s": 159, "greatli": [159, 160, 322], "your_attr_typ": 159, "you_delimit": 159, "weightd": 159, "scr_id": 159, "10001": [159, 160, 161, 163], "feature1": 159, "10002": [159, 160, 161, 163], "feature2": 159, "10003": [159, 160, 161, 163], "feature3": 159, "123": 159, "124": 159, "\u02bbitem_node_decod": 159, "\u02bbuser_node_decod": 159, "\u02bbedge_decod": 159, "item_node_decod": 159, "user_node_decod": 159, "edge_decod": [159, 170], "graph_object": 159, "commod": 160, "swing": [160, 161], "30001": [160, 161, 163], "30002": [160, 161, 163], "30003": [160, 161, 163], "table_1": 160, "table_2": 160, "dest": 160, "10004": [160, 161], "20001": [160, 161, 163], "20003": [160, 161, 163], "20004": [160, 161, 163], "46": [160, 161, 163, 175, 297], "ui_decod": 160, "uv_decod": 160, "table_3": 160, "table_4": 160, "click_v": 160, "task_index": [160, 170], "task_count": 160, "atyp": 160, "job_nam": [160, 170], "worker_host": 160, "respond": 160, "necessarili": [160, 272], "serious": 160, "decreas": [160, 239, 241], "speak": 160, "client_count": [160, 170], "wait_for_clos": [160, 170], "matter": [160, 316], "infom": 161, "get_topologi": 161, "dst_type": 161, "figure1": 161, "topo": 161, "print_al": 161, "egde_typ": 161, "ravers": 161, "string_attr": 161, "src_node": 161, "dst_node": 161, "diment": 161, "dense_shap": 161, "arra": 161, "__next__": 161, "dimenti": 161, "table1": 161, "u_nod": 161, "traves": 161, "get_edg": 161, "inferfac": 161, "table2": 161, "table3": 161, "click_edg": 161, "table4": 161, "conduc": 162, "recept": [162, 166], "ai": 162, "meta_path": 162, "layer_id": 162, "famili": [162, 175, 213, 271, 299], "random_without_replac": 162, "ueri": 162, "default_neighbor_id": 162, "set_default_neighbor_id": [162, 171], "xx": 162, "set_padding_mod": 162, "circular": [162, 164, 214], "alogrithm": 163, "throw": 163, "nodesampl": 163, "node_sampl": 163, "by_ord": 163, "node_from": [163, 174], "edge_src": [163, 174], "edge_dst": [163, 174], "edgesampl": 163, "matur": 164, "dl": 164, "sheer": 164, "sink": 164, "generatortyp": [164, 174], "won": [164, 325], "cursor": 164, "ingo": 164, "query\u5bf9\u8c61": 164, "outneg": [164, 167], "inneg": [164, 167, 170], "candid": [164, 167], "u2i": 164, "ouv": 164, "func": 164, "edeg": 164, "src_1hop": 164, "dst_1hop": 164, "neg_i": 164, "neg_i_1hop": 164, "parmas_list": 164, "params_list": 164, "arrang": 164, "anonym": [164, 302], "src_attr": 164, "neg_attr": 164, "encode_fn": [164, 170], "src_atr": 164, "outnegv": 164, "gen1": 164, "gen2": 164, "circumst": 164, "sour": 164, "foewa": 164, "from_gener": [164, 170], "make_one_shot_iter": [164, 170], "get_next": [164, 170], "zhangjiak": 165, "cp27": 165, "cp27mu": 165, "linux_x86_64": 165, "sudo": [165, 334, 335], "autoconf": 165, "automak": 165, "libtool": 165, "submodul": [165, 168, 322], "your_wheel_nam": [165, 168], "test_cpp_ut": 165, "test_python_ut": 165, "fastgcn": [166, 342], "graphsaint": 166, "amd": 166, "oprat": 167, "object_typ": 167, "oprequest": 168, "req": 168, "oprespons": 168, "params_": 168, "tensors_": 168, "redirect": [168, 248], "rewrit": 168, "till": [168, 317], "happen": [168, 322, 325], "stitch": 168, "myoper": 168, "register_oper": 168, "opnam": 168, "randomsampl": 168, "writ": 168, "xxxsampler": 168, "kubeflow": 169, "reader": 169, "litestr": 169, "char": [169, 172, 322], "getfiles": 169, "getrecordcount": 169, "register_file_system": 169, "myfilesystem": 169, "registr": 169, "ppi": 170, "train_supervis": 170, "gen_test_data": 170, "getopt": 170, "argv": 170, "cur_path": 170, "elif": 170, "102": [170, 306], "__name__": 170, "__main__": 170, "dirnam": 170, "rf": 170, "\u4f60\u9700\u8981\u628agen_test_data": 170, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 170, "fi": 170, "sleep": 170, "case_bas": 170, "genetic_algorithm": 170, "neural_network": 170, "probabilistic_method": 170, "reinforcement_learn": 170, "rule_learn": 170, "bag": 170, "1033": 170, "103482": 170, "103515": 170, "31336": 170, "1061127": 170, "05882353": 170, "1106406": 170, "n_featur": 170, "node_decod": 170, "n_class": 170, "140": [170, 233], "n_hop": 170, "n_epoch": 170, "tripl": 170, "graph_object_cn": 170, "sample_gen": 170, "input_fn": 170, "sample_input_fn": 170, "float64": 170, "tensorshap": 170, "layer_featur": 170, "aggregate_fn": 170, "self_vec": 170, "neigh_vec": 170, "raw_feat_layer_index": 170, "layer_index": 170, "variable_scop": 170, "_layer": 170, "auto_reus": 170, "neigh_weight": 170, "get_vari": 170, "self_weight": 170, "output_shap": 170, "get_shap": 170, "neigh_mean": 170, "from_neigh": 170, "matmul": 170, "from_self": 170, "add_n": 170, "leaky_relu": 170, "depth_to_encod": 170, "h_self_vec": 170, "h_neighbor_vec": 170, "features_column": 170, "feature_column": 170, "numeric_column": 170, "loss_fn": 170, "train_op": 170, "global_step": 170, "get_global_step": 170, "estimatorspec": 170, "modekei": 170, "set_xxx": 171, "set_yyi": 171, "other_model": 171, "fill": [171, 211, 222, 232, 266], "nbr_id": 171, "set_default_int_attribut": 171, "set_default_float_attribut": 171, "set_default_string_attribut": 171, "set_inter_threadnum": 171, "intra": [171, 229, 232], "set_intra_threadnum": 171, "16mb": 171, "reset": 171, "enlarg": 171, "set_rpc_message_max_s": 171, "objectnam": 172, "degener": 172, "unspecifi": [172, 187], "consolidate_column": 172, "result_column": 172, "consolid": [172, 324, 331], "weight0": 172, "weight1": 172, "graph_nod": 172, "deseri": [172, 322], "detach": 172, "varaibl": 172, "lexic": 172, "classmethod": 172, "broken": 172, "save_to": 172, "path_": 172, "graphschema": [172, 310], "schema_path": 172, "currrent": 172, "object_id": [172, 173, 174], "filetyp": 172, "ordinari": 172, "f0": 172, "orc": [172, 321], "parquet": [172, 321], "graph_build": 172, "deprec": [172, 190, 288], "group_id": 172, "member_s": 172, "leader_student_id": 172, "student": 172, "member_student_id": 172, "group_for_teacher_stud": 172, "group_nam": 172, "establish_d": 172, "teacher_in_charge_id": 172, "teacher": 172, "lesson_num": 172, "avg_scor": 172, "student_id": 172, "salari": 172, "teacher_id": 172, "both_in_out": 172, "unambigu": 172, "orign": 172, "interactivequeri": [173, 315, 317, 341], "frontend_gremlin_endpoint": 173, "frontend_cypher_endpoint": 173, "gremlin_url": 173, "lifetim": 173, "traversal_sourc": 173, "graphtraversalsourc": 173, "cypher_driv": 173, "cypher_url": 173, "gremlin_cli": 173, "runtimeerror": [173, 317], "modern_graph_data_dir": 173, "tolist": [173, 323], "dtype": 174, "pywrap": 174, "nodefrom": 174, "get_handl": 174, "worker_count": 174, "base64": 174, "nstart": 175, "poweriterationfailedconverg": 175, "langvil": 175, "meyer": 175, "survei": [175, 263], "cites": 175, "ist": 175, "psu": 175, "edu": 175, "713792": 175, "jon": 175, "kleinberg": 175, "authorit": 175, "journal": [175, 244, 252, 269, 300, 303, 307], "acm": [175, 250, 301, 333], "604": 175, "1999": [175, 230, 231], "doi": [175, 245, 252, 287], "1145": 175, "324133": 175, "324140": 175, "cornel": 175, "kleinber": 175, "pdf": [175, 257, 259, 260], "load_centr": 175, "in_degree_centr": [175, 311], "networkxnotimpl": 175, "out_degree_centr": [175, 311], "equat": 175, "ax": 175, "eigenvalu": [175, 255], "virtu": 175, "perron": 175, "frobeniu": 175, "theorem": [175, 254, 266], "0e": 175, "strength": 175, "2f": 175, "networkxpointlessconcept": [175, 305], "networkxerror": [175, 181, 188, 190, 194, 195, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 245, 251, 254, 255, 256, 267, 270, 302, 310, 313], "eigenvector_centrality_numpi": 175, "discern": 175, "phillip": 175, "bonacich": 175, "american": 175, "sociologi": 175, "1170": 175, "1182": 175, "1986": [175, 299], "leonidzhukov": 175, "net": [175, 229], "hse": 175, "socialnetwork": 175, "oxford": [175, 208, 209, 258, 302], "press": [175, 208, 209, 256, 298, 301, 302], "usa": [175, 262, 263, 309], "pp": [175, 239, 242, 243, 244, 257, 263, 264, 301, 307], "169": 175, "x_i": 175, "a_": 175, "x_j": 175, "lambda_": 175, "distant": 175, "penal": 175, "strictli": [175, 229], "invers": [175, 254], "phi": 175, "sqrt": [175, 255], "adjacency_spectrum": 175, "720": 175, "leo": 175, "sociometr": 175, "psychometrika": 175, "1953": 175, "springer": [175, 264], "1007": [175, 209, 245], "bf02289026": 175, "has_path": [175, 311], "djikstra": 175, "floyd": 175, "warshal": 175, "bfs_edg": [175, 311], "depth_limit": 175, "core_numb": 175, "vladimir": 175, "batagelj": 175, "matjaz": 175, "zaversnik": 175, "ab": [175, 233, 234, 235, 249, 257, 261, 302, 304], "0310049": 175, "c_u": 175, "deg": [175, 229, 243, 310], "geometr": [175, 297, 311], "vw": 175, "hat": 175, "uv": [175, 243], "uw": 175, "tot": 175, "2deg": 175, "leftrightarrow": 175, "complete_graph": [175, 181, 310], "saram\u00e4ki": 175, "kivel\u00e4": 175, "onnela": 175, "kaski": 175, "kert\u00e9sz": 175, "027105": 175, "2007": [175, 257, 303], "jponnela": 175, "web_docu": 175, "a9": 175, "intens": 175, "coher": 175, "motif": 175, "065103": 175, "2005": [175, 251, 257], "sign": 175, "costantini": 175, "perugini": 175, "plo": 175, "e88669": 175, "fagiolo": 175, "76": 175, "026107": 175, "average_clust": [175, 311], "count_zero": 175, "c_v": 175, "nonzero": [175, 239, 256], "marcu": 175, "kaiser": 175, "0802": 175, "2512": 175, "g_to_add_to": [177, 178, 179], "nodes_for_cycl": 177, "add_path": [177, 179, 310], "add_star": [177, 178], "nodes_for_path": 178, "add_cycl": [178, 179], "nodes_for_star": 179, "star": [179, 216, 225], "middl": 179, "cnbor": 181, "with_data": 182, "empty_graph": [182, 223], "frequenc": 184, "width": 184, "2m": [185, 263], "prevent": 188, "err": 188, "frozen": [188, 193], "unfreez": 188, "frozen_graph": 188, "unfrozen_graph": 188, "is_frozen": 188, "neighbour": 190, "freez": [193, 311], "signifi": [194, 195], "nodelist": [198, 237], "selfloop_edg": [198, 203, 239, 241], "number_of_selfloop": [198, 204], "selfloop": [203, 204, 237, 243], "nloop": 203, "nodes_with_selfloop": [203, 204], "datadict": [204, 310], "datavalu": 204, "attrnam": [204, 341], "edgeit": 204, "ekei": 204, "graph_atlas_g": 208, "linearli": [208, 224], "ronald": [208, 209, 299], "robin": [208, 209], "wilson": [208, 209], "1998": [208, 209], "111223": 209, "112222": 209, "automorph": [209, 282], "graph_atla": 209, "expens": 209, "popul": [209, 210, 212, 213, 215, 217, 220, 222, 224, 225, 228, 239, 241, 242, 244, 246, 247, 248, 254, 255, 256, 262, 263, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 295, 296, 297, 305, 312], "book": 209, "violat": 209, "lexicograph": 209, "nondecreas": 209, "001111": 209, "000112": 209, "1008": 209, "3333444": 209, "3333336": 209, "1012": 209, "1213": 209, "1244555": 209, "1244456": 209, "perfectli": 210, "ari": [210, 220], "height": 210, "children": [210, 220, 304], "barbel": [211, 222], "bell": 211, "p_": [211, 243, 257], "mere": [211, 222], "aldou": [211, 222], "jim": [211, 222], "binomi": 212, "leftmost": 212, "ci_n": 213, "x_1": 213, "x_2": 213, "x_m": 213, "mod": [213, 227, 256, 275], "subfamili": 213, "ladder": [214, 221], "cl_n": 214, "k_n": 215, "is_direct": [215, 310], "subset_s": 216, "multipartit": [216, 227], "tripartit": 216, "bc": 216, "complete_bipartite_graph": 216, "c_n": 217, "hierarch": 218, "dorogovtsev": 218, "goltsev": 218, "mend": 218, "mat": 218, "0112143": 218, "kw": [219, 317], "unknown": [219, 322], "abc": 219, "rightmost": 220, "jame": 220, "andrew": 220, "storer": 220, "birkhaus": 220, "boston": 220, "2001": [220, 233, 241, 246, 248, 256, 265, 323], "225": [220, 310], "lollipop": 222, "k_m": 222, "p_n": [222, 224], "etext": 222, "turan": 227, "disjoint": [227, 238, 276], "2r": 227, "tau1": 229, "tau2": 229, "mu": 229, "average_degre": 229, "min_degre": 229, "max_degre": 229, "min_commun": 229, "max_commun": 229, "lfr": 229, "mathrm": 229, "expon": 229, "reassign": [229, 267], "affili": [229, 337], "random_st": [229, 232, 233, 234, 235, 237, 239, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 264, 265, 266, 270, 302, 305, 307], "exceededmaxiter": 229, "250": 229, "frozenset": [229, 312], "rewir": [229, 231, 235, 267, 270], "wire": 229, "robust": 229, "somewhat": 229, "narrow": 229, "andrea": 229, "lancichinetti": 229, "santo": [229, 233, 234, 235], "fortunato": [229, 233, 234, 235], "filippo": 229, "radicchi": 229, "phy": [229, 241, 246, 247, 248, 251], "rev": [229, 241, 246, 247, 248, 251], "046110": 229, "santofortunato": 229, "caveman": [230, 231, 235], "unclear": [230, 231], "connected_caveman_graph": [230, 236], "watt": [230, 231, 241], "phenomenon": [230, 231], "amer": [230, 231], "493": [230, 231], "527": [230, 231], "caveman_graph": 231, "p_in": [232, 233, 234], "p_out": [232, 233, 234], "gaussian": [232, 258, 259, 260], "drawn": [232, 260], "varianc": 232, "probabilti": [232, 235], "random_partition_graph": [232, 237], "ulrik": 232, "brand": 232, "marco": 232, "gaertler": 232, "dorothea": 232, "wagner": 232, "11th": 232, "europ": 232, "symp": 232, "plant": [233, 234], "random_partition_model": 233, "condon": 233, "karp": 233, "algor": 233, "116": 233, "486": [233, 234, 235], "174": [233, 234, 235], "0906": [233, 234, 235], "0612": [233, 234, 235], "relax": 235, "februari": 235, "num_cliqu": 236, "clique_s": 236, "ring": 236, "stochast": [237, 311], "densiti": [237, 239, 257, 259], "symmetr": [237, 256, 279, 283, 289, 291, 302], "300": [237, 306], "prob": 237, "450": 237, "quotient_graph": 237, "relabel": 237, "245": 237, "348": 237, "405": 237, "051": 237, "022": 237, "planted_partition_graph": 237, "gaussian_random_partition_graph": 237, "gnp_random_graph": [237, 264, 265, 266], "holland": 237, "laskei": 237, "leinhardt": 237, "blockmodel": 237, "109": 237, "1983": 237, "windmil": 238, "contract": 238, "wd": 238, "deg_sequ": [239, 240, 241, 242, 244], "pseudograph": [239, 241], "nonneg": [239, 241], "is_graph": [239, 245], "graphic": [239, 241, 244, 245], "realiz": [239, 241, 244, 267, 268, 269, 270, 297, 322], "tend": 239, "poisson": 239, "constant": [239, 341], "siam": [239, 244, 250], "167": 239, "random_sequ": 239, "random_powerlaw_tree_sequ": 239, "5000": 239, "actual_degre": 239, "in_degree_sequ": 241, "out_degree_sequ": 241, "directed_random": 241, "configuration_model": [241, 242, 245], "finit": [241, 243, 256], "strogatz": 241, "026118": 241, "din": 241, "dout": 241, "in_deg_sequ": 242, "out_deg_sequ": 242, "kleitman": [242, 244], "valenc": [242, 244], "1973": [242, 244], "w_0": 243, "w_1": 243, "ldot": 243, "w_u": [243, 257, 260], "w_v": [243, 257, 260], "sum_k": 243, "w_k": 243, "z": [243, 256, 257, 261], "mathcal": 243, "ne": 243, "uu": 243, "fan": [243, 257, 333], "chung": [243, 257], "lu": [243, 333], "ann": 243, "combinator": [243, 303], "145": 243, "2002": 243, "joel": 243, "miller": 243, "aric": [243, 257], "hagberg": [243, 257], "waw": [243, 257], "alan": 243, "friez": 243, "paul": 243, "horn": 243, "pawe\u0142": 243, "pra\u0142at": 243, "lnc": 243, "6732": 243, "115": 243, "havel": 244, "hakimi": 244, "networkxexcept": 244, "resort": 244, "496": 244, "506": 244, "1962": [244, 262, 263, 309], "d_m": 245, "uniform": [245, 257, 266], "networkxunfeas": 245, "moshen": 245, "bayati": 245, "jeong": 245, "han": 245, "kim": 245, "amin": 245, "saberi": 245, "algorithmica": 245, "58": 245, "860": 245, "910": 245, "s00453": 245, "009": 245, "9340": 245, "gn": [246, 309], "a_k": 246, "krapivski": [246, 247, 248, 251], "redner": [246, 247, 248], "066123": [246, 248], "gnc": 247, "growth": [247, 307], "036118": 247, "2005k": 247, "gnr": 248, "probabilii": 248, "self_loop": 249, "preferenti": 249, "proport": 249, "peterson": [249, 292], "nichola": 249, "bori": 249, "pittel": 249, "preprint": 249, "1311": 249, "5961": 249, "2013": [249, 269], "gamma": 250, "delta_in": 250, "delta_out": 250, "bia": 250, "bollob\u00e1": 250, "borg": 250, "chay": 250, "riordan": 250, "fourteenth": 250, "annual": 250, "symposium": 250, "132": [250, 265], "139": 250, "diverg": [251, 311], "retent": 251, "disallow": 251, "ispolatov": 251, "yuryev": 251, "061911": 251, "inclus": 252, "knudsen": 252, "michael": 252, "carsten": 252, "wiuf": 252, "markov": 252, "chain": 252, "1155": 252, "190836": 252, "radiu": [253, 258, 259, 260], "chordal": 254, "chord": [254, 268], "mildli": 254, "lubotzki": 254, "invari": 254, "birkh\u00e4us": 254, "verlag": 254, "basel": 254, "1994": 254, "marguli": 255, "gabber": 255, "galil": 255, "palei": 256, "pz": 256, "f_q": 256, "odd": 256, "bolloba": 256, "cambridg": 256, "theta": [257, 260], "po": [257, 258, 259, 260, 261], "p_dist": [257, 259], "geograph": [257, 260], "rectangular": [257, 261], "ge": [257, 261], "prone": 257, "le": [257, 261, 301], "euclidean": [257, 258, 259, 260, 261], "taxicab": [257, 261], "expovari": [257, 260], "masuda": 257, "miwa": 257, "konno": 257, "036108": 257, "milan": 257, "bradonji\u0107": 257, "allon": 257, "percu": 257, "giant": 257, "antoni": 257, "bonato": 257, "209": 257, "216": 257, "cube": [258, 259, 260, 278, 295], "kdtree": [258, 259, 260], "minkowski": [258, 259, 260], "infin": [258, 259, 260], "erd\u0151": [258, 259, 260], "r\u00e9nyi": [258, 259, 260], "twenti": 258, "2d": [258, 259, 260, 310, 313], "deviat": [258, 259, 260], "gauss": [258, 259, 260], "penros": [258, 259], "mathew": [258, 259], "soft": 259, "exp": [259, 261], "annal": 259, "2016": 259, "986": 259, "1028": 259, "summat": 260, "nodethr": 260, "cole": 260, "maclean": 260, "blog": 260, "thesi": [260, 266], "waxman": 261, "x_min": 261, "y_min": 261, "x_max": 261, "y_max": 261, "Their": 261, "incompat": [261, 322], "rout": 261, "multipoint": 261, "ieee": [261, 269, 270, 302, 307], "1988": 261, "1617": 261, "1622": 261, "harari": [262, 263, 311], "h_": [262, 263], "ceil": 262, "kn": 262, "hnm_harary_graph": 262, "weisstein": 262, "eric": 262, "mathworld": [262, 271, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 290], "wolfram": [262, 271, 275, 277, 279, 280, 281, 282, 283, 284, 285, 286, 290], "hararygraph": 262, "nat": [262, 263, 309], "acad": [262, 263, 309], "sci": [262, 263, 309], "1142": [262, 263, 309], "1146": [262, 263, 309], "floor": 263, "hkn_harary_graph": 263, "boesch": 263, "satyanarayana": 263, "suffel": 263, "reliabl": 263, "synthesi": 263, "99": [263, 341], "2009": [263, 303], "uniform_random_intersection_graph": [264, 265], "nikoletsea": 264, "raptopoulo": 264, "spiraki": 264, "icalp": 264, "\u0131az": 264, "karhum": 264, "aki": 264, "lepist": 264, "sannella": 264, "vol": [264, 307], "3142": 264, "lectur": 264, "1029": 264, "1040": 264, "godehardt": 265, "jaworski": 265, "electron": [265, 303], "singer": 266, "cohen": 266, "1995": 266, "phd": 266, "john": [266, 283], "hopkin": 266, "scheinerman": 266, "evolut": 266, "2000": 266, "156": 266, "nkk": [267, 268], "degree_seq": 267, "n_edges_add": 267, "li": [267, 270], "unsatur": 267, "proof": 267, "tillman": [267, 268, 270], "markopoul": [267, 268, 269, 270, 302], "butt": [267, 268, 302], "gjoka": [267, 268, 269, 270], "2k": [267, 268], "kdd": [267, 268], "seconnd": 268, "joint_degre": [269, 270], "diagon": [269, 285], "joint_degree_graph": 269, "kurant": 269, "5k": 269, "infocom": [269, 270, 302], "stanton": 269, "pinar": 269, "prescrib": 269, "experiment": [269, 317], "n_th": 271, "m_1": 271, "singleton": [271, 310], "m_2": 271, "m_i": 271, "mycielskian": 271, "m_": 271, "mycielskigraph": 271, "p_2": 271, "chromat": [272, 303], "2n": 272, "bigcup": 272, "nonisomporph": 273, "adjanc": 273, "matric": [273, 302], "nonisomorph": 274, "shift_list": 275, "cubic": [275, 278, 279, 282, 283, 289, 291, 292, 297], "lcf": [275, 277, 279, 281, 283, 289, 291], "lederberg": 275, "coxet": 275, "frucht": [275, 282], "hamiltonian": [275, 277, 282, 283, 286, 291, 297], "symmetri": [275, 282], "dodecahedral_graph": 275, "desargues_graph": 275, "heawood_graph": 275, "pappus_graph": 275, "s1": 275, "sk": 275, "v_current": 275, "shiftlist": 275, "heawood": [275, 283], "lcfnotat": 275, "bull": 276, "planar": [276, 279, 280, 282], "pendant": 276, "leg": 276, "chv\u00e1tal": 277, "370": 277, "chv": 277, "c3": [277, 289, 290], "a1tal_graph": 277, "chvatalgraph": 277, "platon": [278, 281, 286, 290, 294, 296], "hypercub": 278, "aris": 278, "desargu": 279, "desarguesgraph": 279, "kite": [280, 287], "diamondgraph": 280, "dodecahedr": 281, "dodecahedron": 281, "regular_dodecahedron": 281, "dodecahedralgraph": 281, "fruchtgraph": 282, "cage": 283, "perci": 283, "nonplanar": 283, "girth": 283, "heawoodgraph": 283, "win": [283, 292], "tue": [283, 292], "nl": [283, 292], "aeb": [283, 292], "housegraph": [284, 285], "pentatop": 285, "icosahedr": 286, "icosahedron": 286, "icosahedralgraph": 286, "krackhardt": 287, "andr": 287, "beverlei": 287, "carol": 287, "dian": 287, "fernando": 287, "garth": 287, "heather": 287, "ik": 287, "jane": 287, "polit": 287, "landscap": 287, "cognit": 287, "quarterli": 287, "342": [287, 310], "369": 287, "2307": 287, "2393394": 287, "jstor": 287, "june": 287, "1990": 287, "graph_descript": 288, "ltype": 288, "adjacencylist": 288, "from_dict_of_list": 288, "from_edgelist": 288, "xlist": 288, "c_4": 288, "w2": 288, "vk": 288, "wk": 288, "vj": 288, "wj": 288, "moebiu": 289, "kantor": 289, "m\u00f6biu": 289, "petersen": [289, 292], "b6biu": 289, "93kantor_graph": 289, "octahedr": 290, "octahedron": 290, "shake": 290, "hi": [290, 300, 309], "her": 290, "partner": 290, "handshak": 290, "cocktail": 290, "octahedralgraph": 290, "tur": 290, "a1n_graph": 290, "special_cas": 290, "pappu": 291, "juliu": 292, "counterexampl": [292, 297], "bridgeless": 292, "colour": 292, "drg": 292, "maze": 293, "sedgewick": 293, "3rd": 293, "tetrahedr": 294, "k4": 294, "w4": 294, "grpah": 294, "tetrahedron": [294, 296, 297], "archimedean": [295, 296], "octagon": 295, "triangular": 295, "truncated_cub": 295, "coolmath": 295, "polyhedra": 295, "hexagon": 296, "equilater": 296, "truncated_tetrahedron": 296, "tutt": 297, "polyhedr": 297, "tait": 297, "conjectur": 297, "polyhedron": 297, "multipli": 297, "davi": 298, "southern": 298, "women": 298, "gardner": 298, "1941": 298, "south": 298, "chicago": 298, "il": 298, "florentin": 299, "breiger": 299, "philippa": 299, "pattison": 299, "cumul": 299, "dualiti": 299, "septemb": 299, "zachari": 300, "karat": 300, "club": 300, "mr": [300, 303], "offic": 300, "wayn": 300, "fission": 300, "anthropolog": 300, "452": 300, "473": 300, "1977": 300, "coappear": 301, "novel": 301, "miser": 301, "knuth": 301, "1993": 301, "graphbas": 301, "combinatori": 301, "york": 301, "spectral": [302, 311], "forg": 302, "sgf": 302, "eigenstructur": 302, "synthes": 302, "percentag": 302, "telecommun": 302, "bernoulli": 302, "baldesi": 302, "1801": 302, "01715": 302, "karate_club_graph": 302, "sud": 303, "81": 303, "810": 303, "herzberg": 303, "murti": 303, "polynomi": 303, "am": 303, "708": 303, "717": 303, "sander": 303, "torsten": 303, "7pp": 303, "2529816": 303, "encyclopedia": 303, "dec": 303, "2019": 303, "nil": 304, "arboresc": 304, "downward": 304, "synthet": 304, "trie": 304, "recov": [304, 317], "pr\u00fcfer": 305, "from_prufer_sequ": 305, "forest_str": 305, "triad_nam": 306, "003": 306, "012": 306, "021d": 306, "021u": 306, "021c": 306, "111d": 306, "111u": 306, "030t": 306, "030c": 306, "120d": 306, "120u": 306, "120c": 306, "triadic_censu": 306, "autonom": [307, 309], "elmokashfi": 307, "tier": 307, "mid": 307, "adv": 307, "bidirect": 307, "peer": 307, "commerci": 307, "agreement": 307, "kvalbein": 307, "dovroli": 307, "bgp": 307, "1250": 307, "1261": 307, "octob": 307, "reweight": 308, "mathematician": 309, "frank": 309, "incoming_graph_data": [310, 313], "default_label": [310, 313], "to_networkx_graph": 310, "110": 310, "protect": 310, "bracket": 310, "shortcut": 310, "nbrsdict": 310, "persion": 310, "miscellan": 310, "__contains__": 310, "__getitem__": 310, "adj_dict": 310, "atlasview": 310, "__iter__": 310, "niter": 310, "__len__": 310, "nnode": 310, "u_of_edg": 310, "v_of_edg": 310, "ebunch_to_add": 310, "preced": 310, "wn2898": 310, "node_for_ad": 310, "nodes_for_ad": 310, "hello": 310, "k3": 310, "attrdict": 310, "behav": 310, "idiom": 310, "foovalu": 310, "adj_it": 310, "nbrdict": 310, "adjlist_inner_dict_factori": 310, "neighbordict": 310, "adjlist_outer_dict_factori": 310, "adjlistdict": 310, "clear_edg": 310, "deepcopi": 310, "fresh": [310, 319], "__class__": 310, "degreeview": 310, "nd_view": 310, "edge_attr_dict_factori": 310, "neighborattrdict": 310, "edge_subgraph": 310, "edgeview": 310, "edgedataview": 310, "ddict": 310, "get_edge_data": 310, "edge_dict": 310, "safe": 310, "graph_attr_dict_factori": 310, "graph_cache_factori": 310, "keyerror": 310, "edge_ind": 310, "data_dictionari": 310, "is_multigraph": 310, "corespond": 310, "nbunch_it": 310, "membership": 310, "exhaust": 310, "possibli": 310, "node_attr_dict_factori": 310, "nodeattrdict": 310, "node_dict_factori": 310, "nodedict": 310, "nodeview": 310, "nodedataview": 310, "nodedata": 310, "bar": 310, "nedg": 310, "Will": 310, "nodes_for_remov": 310, "set_edge_data": 310, "set_node_data": 310, "set_item": 310, "adjedgeattr": 310, "dd": 310, "nodeattr": 310, "netowrkx": 310, "to_undirected_class": 310, "itertool": 310, "mg": 310, "nd_iter": 310, "outedgeview": 310, "in_edg": 310, "outedgedataview": 310, "has_predecessor": 310, "has_successor": 310, "indegreeview": 310, "inedgeview": 310, "outdegreeview": 310, "pred": 310, "succ": 310, "_convert_arrow_to_dynam": [311, 313], "atla": 311, "triad": 311, "mycielski": 311, "sudoku": 311, "edgetyp": 312, "utf": [312, 323], "filenam": [312, 323], "rb": 312, "bz2": 312, "uncompress": 312, "whitespac": 312, "obsolet": 312, "write_edgelist": 312, "fh": 312, "textlin": 312, "parse_edgelist": 312, "read_adjlist": 312, "marker": 312, "v_0": 313, "v_1": 313, "add_label": 314, "talk": 316, "output_to_cli": [316, 333], "person_id": [316, 323], "400": 316, "api_cli": 317, "apicli": 317, "deregist": 317, "256mi": 317, "4gi": 317, "5gi": 317, "__enter__": 317, "__exit__": 317, "exc_typ": 317, "exc_valu": 317, "exc_tb": 317, "unregist": 317, "preemptiv": 317, "burstabl": 317, "qo": 317, "preempt": 317, "ifnotpres": 317, "k8s_vineyard_imag": 317, "fallback": 317, "512mi": 317, "etcd_addr": 317, "etcd01": 317, "etcd02": 317, "etcd03": 317, "4mi": 317, "k8s_coordinator_pod_node_selector": 317, "tinyurl": 317, "3nx6k7ph": 317, "k8s_engine_pod_node_selector": 317, "path1": 317, "path2": 317, "claimnam": 317, "dangling_timeout_second": 317, "heartbeat": 317, "dangl": 317, "config_fil": 317, "reject": 317, "resource_nam": 317, "sigint": 317, "sigterm": 317, "signal": 317, "get_vineyard_object_mapping_t": 317, "with_cyph": 317, "recreat": 317, "load_from_gar": [317, 321], "restore_from_pvc": 317, "kubeconfig": 317, "run_fetch": 317, "lock": 317, "store_to_pvc": 317, "backup": 317, "graph_id": 317, "describl": 318, "maxwel": 319, "binlog": 319, "buildgartfrag": 319, "etcd_endpoint": 319, "gartfrag": 319, "etcd_client": 319, "make_shar": 319, "mpi_comm_world": 319, "schema_kei": 319, "gart_schema_p": 319, "to_str": 319, "edge_config_str": 319, "as_str": 319, "gart_blob_m": 319, "_p": 319, "config_str": 319, "edge_config": 319, "inner_vertices_it": 319, "elabel": [319, 324], "edge_it": 319, "hive": 321, "ordered_by_sourc": 321, "ordered_by_dest": 321, "graph_yaml_path": 321, "broader": 322, "ffi": 322, "agnost": 322, "grin_": 322, "partitioned_graph": 322, "edge_type_nam": 322, "boundari": 322, "sync_properti": 322, "grin_partitioned_graph": 322, "grin_partit": 322, "grin_graph": 322, "grin_get_local_graph_from_partit": 322, "grin_edge_typ": 322, "etyp": 322, "grin_get_edge_type_by_nam": 322, "grin_vertex_type_list": 322, "src_vtype": 322, "grin_get_src_types_from_edge_typ": 322, "dst_vtype": 322, "grin_get_dst_types_from_edge_typ": 322, "src_vtypes_num": 322, "grin_get_vertex_type_list_s": 322, "dst_vtypes_num": 322, "grin_vertex_typ": 322, "grin_get_vertex_type_from_list": 322, "grin_vertex_properti": 322, "dst_vp": 322, "grin_get_vertex_property_by_nam": 322, "grin_null_vertex_properti": 322, "grin_vertex_property_t": 322, "dst_vpt": 322, "grin_get_vertex_property_table_by_typ": 322, "grin_datatyp": 322, "dst_vp_dt": 322, "grin_get_vertex_property_data_typ": 322, "grin_vertex_list": 322, "__src_vl": 322, "grin_get_vertex_list": 322, "_src_vl": 322, "grin_select_type_for_vertex_list": 322, "src_vl": 322, "grin_select_master_for_vertex_list": 322, "src_vl_num": 322, "grin_get_vertex_list_s": 322, "grin_vertex": 322, "grin_get_vertex_from_list": 322, "ifdef": 322, "grin_trait_select_edge_type_for_adjacent_list": 322, "grin_adjacent_list": 322, "_adj_list": 322, "grin_get_adjacent_list": 322, "grin_direct": 322, "adj_list": 322, "grin_select_edge_type_for_adjacent_list": 322, "adj_lsit": 322, "endif": 322, "al_sz": 322, "grin_get_adjacent_list_s": 322, "ifndef": 322, "grin_edg": 322, "grin_get_edge_from_adjacent_list": 322, "grin_get_edge_typ": 322, "grin_equal_edge_typ": 322, "grin_get_neighbor_from_adjacent_list": 322, "grin_get_value_from_vertex_property_t": 322, "grin_vertex_ref": 322, "uref": 322, "grin_get_vertex_ref_for_vertex": 322, "recogin": 322, "u_master_partit": 322, "grin_get_master_partition_from_vertex_ref": 322, "send_valu": 322, "fragment_group_id": [322, 324], "get_partitioned_graph_by_object_id": 322, "local_partit": 322, "grin_get_local_partition_list": 322, "pnum": 322, "grin_get_partition_list_s": 322, "grin_get_partition_from_list": 322, "disclaim": 322, "sacrif": 322, "boilerpl": 322, "ineffici": 322, "enorm": 322, "grin_assume_all_vertex_property_local_complet": 322, "grin_assume_master_vertex_property_local_complet": 322, "grin_assume_by_type_all_vertex_property_local_complet": 322, "grin_assume_by_type_master_vertex_property_local_complet": 322, "assumpt": 322, "wider": 322, "undefin": 322, "tell": 322, "granular": 322, "grin_frag": 322, "storagespecif": 322, "vertexhandl": 322, "goe": 322, "grin_edge_list": 322, "grin_partition_list": 322, "grin_enable_": 322, "_list_arrai": 322, "vertexlist": 322, "grin_enable_vertex_list_arrai": 322, "vl": 322, "idx": 322, "sz": 322, "caller": 322, "_list_iter": 322, "grin_enable_vertex_list_iter": 322, "grin_vertex_list_iter": 322, "grin_get_vertex_list_begin": 322, "grin_get_next_vertex_list_it": 322, "vli": 322, "grin_is_vertex_list_end": 322, "grin_get_vertex_from_it": 322, "grin_get_vertex_type_by_nam": 322, "vtype": 322, "grin_vertex_property_list": 322, "grin_get_vertex_properties_by_nam": 322, "vprop": 322, "vpl": 322, "seperatedli": 322, "with_vertex_label": 322, "with_edge_label": 322, "facili": 322, "recogn": [322, 323], "grin_serialize_vertex_ref": 322, "grin_deserialize_to_vertex_ref": 322, "grin_get_vertex_from_vertex_ref": 322, "vref": 322, "recgon": 322, "reciev": 322, "borrow": 322, "vertexcut": 322, "centur": 322, "edgecut": 322, "repect": 322, "judgement": 322, "columnar": 323, "gear": 323, "compromis": 323, "timestamp": 323, "strict": 323, "foward": 323, "ingestor": [323, 331], "multitud": 323, "exemplifi": 323, "said": 323, "grpc_port": 323, "gremlin_port": 323, "grpc_endpoint": 323, "conn": 323, "add_vertex_label": 323, "v_label_nam": 323, "add_primary_kei": 323, "pk_name": 323, "prop_name_1": 323, "prop_name_2": 323, "add_edge_label": 323, "e_label_nam": 323, "prop_name_3": 323, "add_properti": 323, "xmln": 323, "xsi": 323, "w3": 323, "xmlschema": 323, "schemaloc": 323, "xsd": 323, "modelvers": 323, "gremlinexampl": 323, "codehau": 323, "mojo": 323, "classpath": 323, "mainclass": 323, "compliancelevel": 323, "killaft": 323, "credenti": 323, "valuemap": [323, 341], "println": 323, "javascript": 323, "catch": 323, "data_load": 323, "load_tool": 323, "xzvf": 323, "alic": 323, "bob": 323, "person_id_1": 323, "20210611151923": 323, "seper": 323, "mapreduc": 323, "data_output": 323, "55555": 323, "propertiescolmap": 323, "srclabel": 323, "dstlabel": 323, "srcpkcolmap": 323, "dstpkcolmap": 323, "mb": 323, "columnidx": 323, "_success": 323, "xxxxx": 323, "sst": 323, "00000": 323, "00001": 323, "00002": 323, "load_data": 323, "test_store_servic": 323, "insert_vertex": 323, "vertexrecordkei": 323, "insert_vertic": 323, "update_vertex_properti": 323, "delel": 323, "delete_vertex": 323, "vertex_pk": 323, "delete_vertic": 323, "insert_edg": 323, "edgerecordkei": 323, "update_edge_properti": 323, "delete_edg": 323, "edge_pk": 323, "remote_flush": 323, "snapshot_id": 323, "src_vertex_kei": 323, "dst_vertex_kei": 323, "realtimewrit": 323, "provis": 323, "lapp": 323, "reinstal": 323, "pv_name": 323, "pod_nam": [323, 331, 336], "logback": 323, "arrowfragmentgroup": 324, "spread": 324, "ipc": 324, "docket": 324, "string_oid": 324, "ipcclient": 324, "writeout": 324, "nb": 324, "fragmentloc": 324, "gettotalnodesnum": 324, "labeltyp": 324, "vlabel": 324, "vertex_data_t": 324, "edge_data_t": 324, "willing": 325, "implic": 325, "polymorph": 325, "instant": 325, "aka": 325, "applciat": 325, "pygrap": [325, 326], "frist": 325, "from_numpi": 325, "bind_sssp1": 325, "delai": 325, "screen": 325, "bind_sssp2": 325, "vertex_bal": 326, "vcut": 326, "ecut": 326, "repo_hom": 330, "gsconfig": 330, "syoov": 331, "79b44f7b58": 331, "ctmqb": 331, "10m": 331, "9m53": 331, "9m46": 331, "6dd67c65fc": 331, "gn4mb": 331, "15334625083466732": 331, "33d": 331, "kubetl": 331, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 333, "\u8be5\u7cfb\u7edf\u4e8e": 333, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 333, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 333, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 333, "\u5728": [333, 334, 335, 336, 337, 340, 341, 342, 343], "\u4e2d": [333, 335, 336, 337, 343], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 333, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 333, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 333, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 333, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 333, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 333, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 333, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 333, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 333, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 333, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 333, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 333, "\u521b\u5efa\u9ed8\u8ba4": 333, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 333, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 333, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 333, "result_lpa": 333, "result_sssp": 333, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 333, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 333, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 333, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 333, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 333, "\u7c7b": [333, 343], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 333, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 333, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 333, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 333, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 333, "\u6216\u5199\u5165": 333, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 333, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 333, "\u6216\u5199\u5165\u672c\u5730\u7684": 333, "lpa_result": 333, "\u6570\u636e\u7ed3\u6784": 333, "\u6b64\u5916": [333, 337], "\u5982": [333, 336, 339, 341], "\u5feb\u901f\u4e0a\u624b": [333, 339], "\u4e2d\u6240\u793a": 333, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 333, "\u7684\u65b0\u5c5e\u6027": 333, "\u5217": 333, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 333, "\u5217\u540d\u4e3a": 333, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 333, "new_graph": [333, 338], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 333, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 333, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 333, "\u7c7b\u4f3c\u7684": 333, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 333, "\u4f8b\u5982\u9876\u70b9id": 333, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 333, "\u4ee3\u8868\u7ed3\u679c": 333, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 333, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 333, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 333, "\u8f6c\u6362\u4e3a": [333, 342], "\u4f7f\u7528\u9876\u70b9\u7684": 333, "\u4f5c\u4e3a\u540d\u4e3a": 333, "\u7684\u5217": 333, "df_vd": 333, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 333, "df_result": 333, "property0": 333, "label0": 333, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 333, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 333, "\u5c06": [333, 342], "\u9876\u70b9\u7684": 333, "\u4f5c\u4e3a": [333, 334, 343], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 333, "gs_data": 333, "\u53ef\u4ee5\u67e5\u770b": 333, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 333, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 333, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 333, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 333, "\u5728\u7eaf": 333, "\u6a21\u5f0f": [333, 341], "\u4e0b\u4f7f\u7528": 333, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 333, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 333, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 333, "\u5982\u4ee3\u7801\u6240\u793a": 333, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 333, "\u88c5\u9970\u7684\u7c7b": 333, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 333, "\u56fe\u7b97\u6cd5\u51fd\u6570": 333, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 333, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 333, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 333, "\u4e0e": 333, "\u76f8\u5173\u7684\u5b8c\u6574": 333, "\u53ef\u4ee5\u53c2\u8003": 333, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 333, "\u4e3a\u4f8b": [333, 337], "\u7528\u6237\u5728": 333, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 333, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 333, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 333, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 333, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 333, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 333, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 333, "\u589e\u91cf\u8ba1\u7b97": 333, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 333, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 333, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 333, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [333, 343], "\u7ecf\u5178\u7684": 333, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 333, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 333, "\u6a21\u578b\u4e4b\u5916": 333, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 333, "\u7f16\u7a0b\u6a21\u578b": 333, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 333, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 333, "\u6a21\u578b\u4e0d\u540c": 333, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 333, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 333, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 333, "\u800c\u4e0d\u540c\u4e8e": 333, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 333, "\u8fd8\u662f\u4ee5": 333, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 333, "\u88c5\u9970\u5668": 333, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 333, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 333, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 333, "\u4e2d\u7684": [333, 334, 336], "\u51fd\u6570": [333, 341], "\u4e0b\u5217\u4ee3\u7801": 333, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 333, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 333, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 333, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 333, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 333, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 333, "\u8fd9\u91cc": [333, 334, 343], "\u662f\u4e0e": 333, "\u76f8\u5bf9\u5e94\u7684": 333, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 333, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 333, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 333, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 333, "\u5728\u6b64\u4e4b\u540e": 333, "\u60a8\u53ef\u4ee5\u4ece": 333, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 333, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 333, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 333, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 333, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 333, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 333, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 333, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 333, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 333, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 333, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 333, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 333, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 333, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 333, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 333, "dist_0": 333, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 333, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 333, "\u8bf7\u53c2\u8003": [333, 341], "\u6765\u5c06": 333, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 333, "\u5b89\u88c5\u5b8c\u6210\u540e": 333, "\u4f60\u9700\u8981\u5c06": 333, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 333, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 333, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 333, "\u6765\u786e\u4fdd": 333, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 333, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 333, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 333, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 333, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 333, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 333, "pluge": 333, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 333, "\u7528\u6237\u9700\u8981\u6309\u7167": 333, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 333, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 333, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 333, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 333, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 333, "defaultpropertyappbas": 333, "\u6216": [333, 334, 335, 336, 339, 341], "parallelpropertyappbas": 333, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 333, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 333, "defaultappbas": 333, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 333, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 333, "\u5176\u5e94\u8be5\u662f": 333, "defaultpropertycontextbas": 333, "parallelpropertycontextbas": 333, "defaultcontextbas": 333, "\u6216\u8005": [333, 335, 342, 343], "\u7684\u7684\u5b50\u7c7b": 333, "\u901a\u8fc7\u7ee7\u627f": 333, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 333, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 333, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 333, "client\u4e2dquery\u8fd4\u56de\u7684context": 333, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 333, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 333, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 333, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 333, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 333, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 333, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 333, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 333, "\u8fd9\u4e2a\u9700\u6c42": 333, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 333, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 333, "graphscope_repo": 333, "app_class_nam": 333, "java_path": 333, "path_to_your_jar": 333, "param_str": 333, "params_str": 333, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 333, "app\u7684\u7c7b\u7684\u5168\u540d": 333, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 333, "\u53ef\u4ee5\u901a\u8fc7": 333, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 333, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 333, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 333, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 333, "\u53ef\u4ee5": 333, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 333, "jar_path": 333, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 333, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 333, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 333, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 333, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 333, "\u7684app": 333, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 333, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 333, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [333, 334, 336], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 333, "\u76f8\u5173\u8bba\u6587": 333, "wenfei": 333, "jingbo": 333, "xu": 333, "wenyuan": 333, "yu": 333, "jingren": 333, "zhou": 333, "xiaojian": 333, "luo": 333, "qiang": 333, "yin": 333, "cao": 333, "ruiqi": 333, "tod": [333, 339], "yinghui": 333, "wu": 333, "jiaxin": 333, "jiang": 333, "43rd": 333, "zeyu": 333, "zheng": 333, "bohan": 333, "chao": 333, "tian": 333, "\u4ee5": [334, 337, 338, 340, 343], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 334, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [334, 336], "\u5982\u679c\u8fd0\u884c": 334, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 334, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 334, "\u56e0\u6b64": [334, 335, 337], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 334, "\u4f1a\u8bdd": [334, 337], "\u5ba2\u6237\u7aef": [334, 335, 339], "\u5b83\u5c01\u88c5": 334, "\u7ba1\u7406\u7740": 334, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 334, "\u5e76": 334, "\u8fde\u63a5": 334, "\u64cd\u4f5c\u7528\u6237\u5728": 334, "\u96c6\u7fa4\u4e0a\u7684": 334, "\u5f15\u64ce": 334, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 334, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 334, "\u5b9e\u4f8b": 334, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 334, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 334, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 334, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 334, "\u8def\u5f84": [334, 343], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 334, "\u7136\u540e": [334, 342], "\u5c06\u5176\u901a\u8fc7": 334, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 334, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 334, "\u8282\u70b9\u7684\u6982\u5ff5": 334, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 334, "\u521b\u5efa\u7684\u96c6\u7fa4": 334, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 334, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 334, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 334, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 334, "\u4e0a\u7684\u4e00\u4e2a": 334, "\u5b9e\u4f8b\u5305\u542b": 334, "\u4e00\u4e2a\u8fd0\u884c": 334, "\u7684": [334, 335, 336, 339, 344], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 334, "\u8d1f\u8d23\u5bf9": 334, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 334, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 334, "\u5f15\u64ce\u5bb9\u5668\u7684": 334, "replicaset": 334, "\u5bf9\u8c61": 334, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 334, "\u901a\u8fc7": [334, 337], "\u63a5\u6536\u6765\u81ea": 334, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 334, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 334, "\u56fe\u67e5\u8be2\u5f15\u64ce": 334, "\u56fe\u5b66\u4e60\u5f15\u64ce": [334, 339], "\u7684\u751f\u547d\u5468\u671f": 334, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 334, "\u8bf7\u5728": 334, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 334, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 334, "\u5b89\u88c5": [334, 339], "release_nam": 334, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 334, "\u53c2\u8003": 334, "\u8be5\u94fe\u63a5": 334, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 334, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 334, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 334, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 334, "\u96c6\u7fa4": [334, 336, 340], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 334, "\u7528\u6cd5\u5982\u4e0b": 334, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 334, "launch_clust": 334, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 334, "pyyaml": 334, "boto3": 334, "your_access_key_id": 334, "your_access_key_secret": 334, "region": 334, "your_region_nam": 334, "kube_config_path": 334, "alibabacloud_cs20151215": 334, "alibabacloud_ecs20140526": 334, "alibabacloud_vpc20160428": 334, "your_region_id": 334, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 334, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 334, "\u5e73\u53f0\u4e0a": 334, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 334, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 334, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 334, "\u672c\u5730\u90e8\u7f72": 334, "graphscope_env": [334, 335], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 335, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 335, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 335, "\u9075\u5faa": 335, "\u7684\u5f00\u6e90\u534f\u8bae": 335, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 335, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 335, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 335, "\u955c\u50cf": 335, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 335, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 335, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 335, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 335, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 335, "\u6267\u884c": 335, "10240m": 335, "minitest": 335, "unittest": 335, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 335, "\u6bd4\u5982": [335, 343], "\u56fe\u5206\u6790\u5f15\u64ce": [335, 339], "\u6a21\u5757": 335, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 335, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 335, "\u7684\u6784\u5efa\u8fc7\u7a0b": 335, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 335, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 335, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 335, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 335, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 335, "\u4e3a": [335, 336, 337], "shortsha": 335, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 335, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 335, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 335, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 335, "\u90a3\u4e48": 335, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 335, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 335, "\u5ba2\u6237\u7aef\u5373\u53ef": 335, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 335, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 335, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 335, "\u4e0b\u7684": 335, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 335, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 335, "install_prefix": 335, "\u4e0b\u5206\u522b\u6784\u5efa": 335, "\u7531\u4e8e": 335, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 335, "\u975edocker": 335, "\u4e2d\u8fdb\u884c": 335, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 335, "\u7684\u4f9d\u8d56": 335, "\u57fa\u4e8e\u5f53\u524d": 335, "\u73af\u5883\u4e0b\u7684": 335, "\u7248\u672c\u6784\u5efa": 335, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [335, 337], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 335, "\u7248\u672c": [335, 340], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 335, "conda": 335, "pyenv": 335, "\u5b89\u88c5\u591a\u4e2a": 335, "\u7684\u7248\u672c": 335, "\u98ce\u683c": 335, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 335, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 335, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 335, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 336, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 336, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 336, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 336, "\u6216\u8005\u5728": 336, "\u4e0e\u6211\u4eec\u8054\u7cfb": 336, "\u8fd0\u884c": 336, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 336, "\u5728\u901a\u8fc7": 336, "\u5ba2\u6237\u7aef\u4f7f\u7528": 336, "\u8fc7\u7a0b\u4e2d": 336, "\u9700\u8981\u7684\u6700\u4f4e": 336, "\u7248\u672c\u662f3": 336, "\u6700\u4f4epip\u7248\u672c\u662f": 336, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 336, "\u5355\u673a\u60c5\u51b5\u4e0b": 336, "\u8d44\u6e90\u9700\u6c42": 336, "\u6838": 336, "\u5185\u5b58": 336, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 336, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 336, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 336, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 336, "\u662f\u5426\u5f3a\u4f9d\u8d56": 336, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 336, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 336, "\u7684\u5f62\u5f0f\u5206\u53d1": 336, "\u53ef\u4ee5\u7528": 336, "\u5feb\u901f\u5b89\u88c5": 336, "\u5982\u4f55\u5982\u67e5\u770b": 336, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 336, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 336, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 336, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 336, "\u53ef\u4ee5\u4f7f\u7528": [336, 342], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 336, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 336, "\u7684\u78c1\u76d8": 336, "\u4e5f\u53ef\u5728": 336, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 336, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 336, "\u547d\u4ee4\u65f6": 336, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 336, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 336, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 336, "\u8fdb\u884c\u5220\u9664": 336, "\u901a\u5e38\u60c5\u51b5\u4e0b": 336, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 336, "\u90e8\u7f72": [336, 339], "\u65f6": [336, 337], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 336, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 336, "\u7b49\u6743\u9650": 336, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 336, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 336, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 336, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 336, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 336, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 336, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 336, "\u76ee\u524d": [336, 343], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 336, "\u53ef\u901a\u8fc7": 336, "\u8be5\u6587\u6863": 336, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 336, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 336, "\u5982\u679c": 336, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 336, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 336, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 336, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 336, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 336, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 336, "\u8f7d\u56fe\u9636\u6bb5": 336, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 336, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 336, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 336, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 336, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 336, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 336, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 336, "\u53ef\u89c1": 336, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 336, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 336, "\u90e8\u7f72\u7684": 336, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 336, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 336, "\u865a\u62df\u7684": 336, "\u6709\u4ec0\u4e48\u533a\u522b": 336, "\u5982\u4f55\u8bbe\u7f6e": 336, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 336, "\u5b83\u5b58\u50a8\u7531": 336, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 336, "\u7684\u5143\u4fe1\u606f": 336, "\u4f8b\u5982\u5f62\u72b6": 336, "\u540d\u79f0\u7b49": 336, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 336, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 336, "\u5b83\u76f8\u5f53\u4e8e": 336, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 336, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 336, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 336, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 336, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 336, "\u7684\u540c\u6837\u5927\u5c0f": 336, "\u5bfc\u81f4\u5728": 336, "\u73af\u5883\u4e0b\u5b89\u88c5": 336, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 336, "\u7f16\u8bd1": 336, "\u5931\u8d25": 336, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 336, "\u8be6\u60c5\u53ef\u53c2\u8003": 336, "\u4f60\u53ef\u4ee5\u6839\u636e": 336, "\u6b64\u6559\u7a0b": 336, "\u6765\u6e90\u7801\u7f16\u8bd1": 336, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 336, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 336, "\u4e0a\u5206\u914d": 336, "\u65f6\u9047\u5230\u4e86": 336, "\u95ee\u9898": 336, "\u5982\u4f55\u89e3\u51b3": 336, "\u901a\u5e38\u5f53\u4f7f\u7528": 336, "\u7684\u65b9\u5f0f\u5b89\u88c5": 336, "\u4f1a\u62a5": 336, "\u9519\u8bef": [336, 338], "\u6211\u4eec\u901a\u8fc7": 336, "\u6765\u67e5\u770b\u65e5\u5fd7": 336, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 336, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 336, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 336, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 336, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 336, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 336, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 336, "\u7136\u540e\u5c06": 336, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 336, "\u4e3a\u4ec0\u4e48\u5728": 336, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 336, "\u5b9e\u4f8b\u65f6": 336, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 336, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 336, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 336, "\u96c6\u7fa4\u62c9\u8d77": 336, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 336, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 336, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 336, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 336, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 336, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 336, "\u6216\u5bb9\u5668": 336, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 336, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 336, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 336, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 336, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 336, "\u4ee5\u53ca": [336, 343], "\u8bf7\u6ce8\u610f": 336, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 336, "unix": 336, "stackexchang": 336, "23452": 336, "\u5176\u4ed6\u95ee\u9898": 336, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 336, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 336, "\u540c\u65f6": [336, 341], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 336, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 337, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 337, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 337, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 337, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 337, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 337, "\u4f7f\u7528": [337, 339, 342, 343, 344], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 337, "\u6570\u636e\u96c6": 337, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 337, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 337, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 337, "\u5373\u8bba\u6587": 337, "\u4f5c\u8005": 337, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 337, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 337, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 337, "\u7ed9\u51fa\u5f02\u6784\u7684": 337, "\u6570\u636e": 337, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 337, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 337, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 337, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 337, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 337, "\u5728\u8be5\u6570\u636e\u4e2d": 337, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 337, "\u6458\u8981\u62bd\u53d6\u7684": 337, "\u7ef4": 337, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 337, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 337, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 337, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 337, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 337, "\u5ba2\u6237\u7aef\u8c03\u7528": 337, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 337, "\u6b65\u9aa4": 337, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 337, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 337, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 337, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 337, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 337, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 337, "\u7684\u7b2c\u4e00\u6b65": 337, "\u6211\u4eec\u9700\u8981\u5728": 337, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 337, "\u5bf9\u4e8e": [337, 340], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 337, "\u670d\u52a1\u7c7b\u578b": 337, "\u9ed8\u8ba4\u662f": 337, "\u53e6\u5916": [337, 343], "\u6ce8\u610f": [337, 340], "\u662f": 337, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 337, "\u5f53\u5728": 337, "\u4e0a\u4f7f\u7528": 337, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 337, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 337, "\u901a\u5e38\u4e3a": 337, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 337, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 337, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 337, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 337, "\u8be5": 337, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 337, "\u6240\u6709\u8d44\u6e90": 337, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 337, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 337, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 337, "\u90fd\u6709\u4e00\u4e2a": 337, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 337, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 337, "\u8f7d\u56fe": [337, 338, 339], "\u4ee5\u5c5e\u6027\u56fe": 337, "\u5efa\u6a21\u56fe\u6570\u636e": [337, 343], "\u5c5e\u6027\u56fe\u4e2d": 337, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 337, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 337, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 337, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 337, "\u5206\u522b\u6807\u8bb0\u4e3a": 337, "\u8bba\u6587": 337, "\u673a\u6784": 337, "\u7814\u7a76\u9886\u57df": 337, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 337, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 337, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 337, "\u5f15\u7528": 337, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 337, "\u9876\u70b9": 337, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 337, "\u64b0\u5199": 337, "\u7684\u8fb9": [337, 343], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 337, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 337, "\u6240\u6709\u7684\u9876\u70b9": 337, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 337, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 337, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 337, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 337, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 337, "\u6570\u636e\u6587\u4ef6": 337, "\u7ed3\u5408\u4f7f\u7528": 337, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 337, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 337, "author_affiliated_with_institut": 337, "paper_has_topic_field_of_studi": 337, "hastop": 337, "paper_cites_pap": 337, "author_writes_pap": 337, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 337, "\u8fd9\u91cc\u7684": 337, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 337, "\u4e2d\u7684\u56fe": 337, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 337, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 337, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 337, "\u63a2\u7d22\u6027": 337, "\u65b9\u5f0f\u6765\u63a2\u7d22": 337, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 337, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 337, "\u91c7\u7528\u79f0\u4e3a": 337, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 337, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 337, "\u5728\u6b64\u793a\u4f8b\u4e2d": 337, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 337, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 337, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 337, "\u552f\u4e00\u6807\u8bc6": 337, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 337, "\u4e8b\u5b9e\u8bc1\u660e": 337, "\u8bb8\u591a\u7b97\u6cd5": 337, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 337, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 337, "\u96c6\u4e2d\u6027": 337, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 337, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 337, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 337, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 337, "\u80cc\u540e\u57fa\u4e8e": 337, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 337, "\u7136\u540e\u8fd0\u884c": 337, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 337, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 337, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 337, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 337, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 337, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 337, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 337, "\u5f53\u524d": 337, "\u652f\u6301\u7528\u6237\u4ee5": 337, "\u6a21\u578b\u548c": 337, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 337, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 337, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 337, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 337, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 337, "\u6211\u4eec\u8bad\u7ec3\u4e86": 337, "\u6a21\u578b": 337, "\u5c06\u8282\u70b9": 337, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 337, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 337, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 337, "\u4e3a\u6b64": 337, "\u63a5\u7740\u4e0a\u4e00\u6b65": 337, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 337, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 337, "train_gcn": 337, "\u6700\u540e": [337, 338, 341], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 337, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 337, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 337, "\u548c\u5f15\u64ce": 337, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 337, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 338, "\u6295\u5f71\u7684\u65b9\u6cd5": 338, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 338, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 338, "\u5177\u4f53\u800c\u8a00": 338, "\u56fe": 338, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 338, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 338, "\u6211\u4eec\u5df2\u7ecf\u5728": 338, "\u4e00\u8282\u89c1\u5230\u8fc7": 338, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 338, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 338, "\u8fdb\u4e00\u6b65\u7684": 338, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 338, "\u4e2d\u4e4b\u540e": 338, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 338, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 338, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 338, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 338, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 338, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 338, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 338, "pathlib": 338, "\u5230\u8fd9\u91cc": 338, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 338, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 338, "graph1": 338, "graph2": 338, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 338, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 338, "\u5728\u5e95\u5c42": 338, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 338, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 338, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 338, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 338, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 338, "\u6765\u5b8c\u6210": 338, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 338, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 338, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 338, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 338, "\u503c\u53ef\u4ee5\u4e3a": 338, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 338, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 338, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 338, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 338, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 338, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 338, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 338, "sub_graph2": 338, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 338, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 338, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 338, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 338, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 338, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 338, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 338, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 338, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 338, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 338, "\u8fb9\u6807\u7b7e": 338, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 338, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 338, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 338, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 338, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 338, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 338, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 338, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 339, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 339, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 339, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 339, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 339, "\u63d0\u4f9b\u4e86": 339, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 339, "\u5177\u6709\u4e00\u7ad9\u5f0f": 339, "\u5f00\u53d1\u4fbf\u6377": 339, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 339, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 339, "\u5305\u62ec": [339, 342], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 339, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 339, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 339, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 339, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 339, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 339, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 339, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 339, "\u5982\u98ce\u63a7": 339, "\u7535\u5546\u63a8\u8350": 339, "\u5e7f\u544a": 339, "\u7f51\u7edc\u5b89\u5168": [339, 342], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 339, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 339, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 339, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 339, "\u6700\u4f73\u8bba\u6587\u5956": 339, "vldb2017": 339, "\u6700\u4f73\u6f14\u793a\u5956": 339, "vldb2020": 339, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 339, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 339, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 339, "2021\u5f55\u7528": 339, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 339, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 339, "kdd\u7b49": 339, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 339, "\u57fa\u4e8e": [339, 344], "\u793a\u4f8b": 339, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 339, "\u521b\u5efa\u4f1a\u8bdd": 339, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 339, "\u56fe\u5206\u6790": 339, "\u56fe\u795e\u7ecf\u7f51\u7edc": 339, "\u5173\u95ed\u4f1a\u8bdd": 339, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 339, "\u5728aw": 339, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 339, "\u672c\u5730\u90e8\u7f72graphscop": 339, "\u5165\u95e8\u6559\u7a0b": 339, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [339, 344], "\u4f7f\u7528\u517c\u5bb9": [339, 344], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [339, 344], "\u7528": [339, 341, 344], "\u50cf": [339, 344], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [339, 344], "\u8f7d\u5165\u56fe\u6570\u636e": [339, 344], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [339, 344], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [339, 344], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [339, 344], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [339, 344], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [339, 344], "bipartitegraphsag": [339, 344], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [339, 344], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [339, 344], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [339, 344], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 339, "\u624b\u52a8\u914d\u7f6e\u56fe": 339, "\u9ad8\u7ea7\u7528\u6cd5": 339, "\u4ece": [339, 341], "\u4e2d\u8f7d\u56fe": 339, "\u7684\u53d8\u79cd": 339, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 339, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 339, "\u6295\u5f71": 339, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 339, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 339, "\u5185\u7f6e\u7b97\u6cd5": 339, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 339, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 339, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 339, "\u4e2d\u7684\u51fd\u6570": 339, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 339, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 339, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 339, "\u5229\u7528python": 339, "\u8fde\u63a5graphscop": 339, "\u5229\u7528java": 339, "\u5f00\u53d1\u63a7\u5236\u53f0": 339, "gremlin\u7f16\u7a0b\u5165\u95e8": 339, "gremlin\u517c\u5bb9\u6027": 339, "\u5bf9\u6bd4tinkerpop": 339, "\u56fe\u5b66\u4e60\u6a21\u578b": 339, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 339, "\u5e38\u89c1\u95ee\u9898": 339, "\u5f00\u53d1\u8005\u6307\u5357": 339, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 339, "\u6784\u5efa": 339, "\u4ee3\u7801\u98ce\u683c": 339, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 340, "monterei": 340, "\u7a0b\u5e8f\u5305": 340, "\u7684\u5f62\u5f0f\u53d1\u5e03": 340, "\u53ef\u76f4\u63a5\u901a\u8fc7": 340, "\u9700\u8981\u6ee1\u8db3": 340, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 340, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 340, "\u73af\u5883\u4e0b\u8fd0\u884c": 340, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 340, "\u7684\u7528\u6237": 340, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 340, "\u5e76\u5728": 340, "\u4e2d\u5f00\u542f": 340, "\u529f\u80fd": 340, "\u53d1\u884c\u7248\u7528\u6237": 340, "\u6211\u4eec\u63d0\u4f9b\u4e86\u811a\u672c\u6765\u51c6\u5907\u8fd0\u884c\u65f6\u73af\u5883": 340, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 340, "\u4e0a\u5b89\u88c5": 340, "wsl2": 340, "\u4ee5\u4f7f\u7528\u811a\u672c": 340, "install_dep": 340, "\u63a5\u4e0b\u6765": [340, 341, 342], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 340, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 341, "\u7b80\u79f0gie": 341, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 341, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 341, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 341, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 341, "\u8be5\u5f15\u64ce\u652f\u6301": 341, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 341, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 341, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 341, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 341, "\u63a5\u53e3": [341, 342], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 341, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 341, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 341, "\u5982\u4e0b\u6240\u793a": 341, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 341, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 341, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 341, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 341, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 341, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 341, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 341, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 341, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 341, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 341, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 341, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 341, "\u683c\u5f0f": 341, "\u7684\u8f93\u51fa": 341, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 341, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 341, "python\u8bbf\u95ee\u56fe\u6570\u636e": 341, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 341, "\u5b98\u65b9\u6587\u6863": 341, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 341, "\u8be6\u89c1gremlin": 341, "java\u7684": 341, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 341, "\u4e5f\u53eb\u505arepl\u73af\u5883": 341, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 341, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 341, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 341, "\u5b89\u88c5gremlin": 341, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 341, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 341, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 341, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 341, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 341, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 341, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 341, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 341, "\u5176\u4e2d\u7684": 341, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 341, "\u6216ip": 341, "\u548c\u7aef\u53e3": 341, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 341, "\u63d0\u793a\u7b26\u4e0b": 341, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 341, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 341, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 341, "\u8fdc\u7a0b": 341, "graphscope\u6267\u884c": 341, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 341, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 341, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 341, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 341, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 341, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 341, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 341, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 341, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 341, "hoc": 341, "\u904d\u5386\u67e5\u8be2": 341, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 341, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 341, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 341, "\u70b9\u6216\u8fb9": 341, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 341, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 341, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 341, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 341, "\u952e": 341, "\u503c": 341, "\u5bf9": 341, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 341, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 341, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 341, "\u5b83\u5305\u542b": 341, "\u7528\u6237": 341, "\u5546\u54c1": 341, "\u5730\u5740": 341, "\u4e09\u7c7b\u70b9": 341, "\u5b83\u4eec\u901a\u8fc7": 341, "\u8d2d\u4e70": 341, "\u9012\u9001": 341, "belongs_to": 341, "\u5c5e\u4e8e": 341, "home_of": 341, "\u5bb6\u5ead\u5730\u5740": 341, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 341, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 341, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 341, "\u8def\u5f841": 341, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 341, "\u4e70\u5bb6": 341, "tom": 341, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 341, "jack": 341, "\u63d0\u4f9b\u7684\u6807\u4ef7": 341, "\u7684\u5546\u54c1": 341, "gift": 341, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 341, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 341, "\u904d\u5386\u5668": 341, "\u6807\u8bc6": 341, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 341, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 341, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 341, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 341, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 341, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 341, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 341, "\u8fb9\u6216\u5c5e\u6027": 341, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 341, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 341, "\u5d4c\u5957\u904d\u5386": 341, "\u7684\u652f\u6301": 341, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 341, "\u5b50": 341, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 341, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 341, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 341, "\u8fc7\u6ee4": 341, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 341, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 341, "\u800c": 341, "\u6620\u5c04": 341, "\u6392\u5e8f": 341, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 341, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 341, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 341, "\u5728gremlin\u4e2d\u901a\u8fc7": 341, "\u5faa\u73af": 341, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 341, "\u7ec8\u6b62\u6761\u4ef6": 341, "\u8868\u8fbe": 341, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 341, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 341, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 341, "\u6761\u4ef6\u7ec8\u6b62": 341, "\u64cd\u4f5c\u7c7b\u4f3c": 341, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 341, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 341, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 341, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 341, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 341, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 341, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 341, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 341, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 341, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 341, "\u7684\u6709\u5411\u73af\u8def": 341, "\u9996\u5148": [341, 343], "\u8f93\u5165\u56fe\u64cd\u4f5c": 341, "\u5305\u542b\u4e00\u4e2a": 341, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 341, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 341, "\u70b9": 341, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 341, "\u7684\u70b9": 341, "\u7d27\u968f\u5176\u540e\u7684": 341, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 341, "\u4fee\u9970\u7b26": 341, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 341, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 341, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 341, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 341, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 341, "\u67e5\u8be2\u6cbf\u7740": 341, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 341, "\u6b21": 341, "\u8f93\u51fahops\u5728": 341, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 341, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 341, "\u901a\u8fc7\u5728": 341, "\u5185\u914d\u7f6e": 341, "\u9009\u9879\u5b9e\u73b0": 341, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 341, "\u6307\u4ee3": 341, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 341, "\u7684\u73af": 341, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 341, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 341, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 341, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 341, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 341, "\u5982\u679c\u6709\u7684\u8bdd": 341, "gie\u652f\u6301apach": 341, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 341, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 341, "3\u548c3": 341, "4\u7248\u672c\u517c\u5bb9\u7684": 341, "\u670d\u52a1\u63a5\u53e3": 341, "\u9664\u6b64\u4e4b\u5916": 341, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 341, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 341, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 341, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 341, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 341, "\u76ee\u524d\u7684": 341, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 341, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 341, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 341, "\u4e0d\u53ef\u4fee\u6539": 341, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 341, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 341, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 341, "\u7ea6\u675f": 341, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 341, "\u5305\u62ec\u70b9": 341, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 341, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 341, "\u4e3b\u952e\u7ea6\u675f": 341, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 341, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 341, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 341, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 341, "id\u7f16\u7801\u4e86\u7c7b\u578b": 341, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 341, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 341, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 341, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 341, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 341, "\u56fe\u4fee\u6539\u64cd\u4f5c": 341, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 341, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 341, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 341, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 341, "\u4e8b\u52a1": 341, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 341, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 341, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 341, "\u548c\u793a\u4f8b\u7528\u6cd5": 341, "\u8f93\u5165\u56fe": 341, "labelnam": 341, "labelname1": 341, "labelname2": 341, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 341, "\u8bed\u6cd5\u7cd6": 341, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 341, "\u4ee3\u8868": 341, "\u8282\u70b9\u7684age\u5c5e\u6027": 341, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 341, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 341, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 341, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 341, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 341, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 341, "dedup": 341, "substr": 341, "contant": 341, "aaa": 341, "otherv": 341, "flatmap": 341, "\u591a\u91cd\u6620\u5c04": 341, "bothv": 341, "\u627e\u5230\u6240\u6709\u4ece": 341, "\u5f00\u59cb\u901a\u8fc7": 341, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 341, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 341, "\u70b9\u4e0d\u91cd\u590d": 341, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 341, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 341, "\u70b9\u53ef\u91cd\u590d": 341, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 341, "\u805a\u5408": 341, "groupbi": 341, "groupby\u591a\u4e2akei": 341, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 341, "groupby\u591a\u4e2avalu": 341, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 341, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 341, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 341, "\u4f1a\u9010\u6b65\u652f\u6301": 341, "\u53ef\u4ee5\u901a\u8fc7path": 341, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 341, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 341, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 341, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 341, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 341, "\u8ba1\u7b97\u5b50\u56fe": 341, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 341, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 341, "cap": 341, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 341, "\u4f8b\u5982pagerank\u548cshortestpath": 341, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 341, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 342, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 342, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 342, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 342, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 342, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 342, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 342, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 342, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 342, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 342, "\u57fa\u4e8egl": 342, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 342, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 342, "\u4f8b\u5982\u56fe\u91c7\u6837": 342, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 342, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 342, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 342, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 342, "\u539f\u59cb\u7684gcn": 342, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 342, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 342, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 342, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 342, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 342, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 342, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 342, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 342, "graphsaint\u7b49": 342, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 342, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 342, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 342, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 342, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 342, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 342, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 342, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 342, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 342, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 342, "\u5305\u62ectensorflow": 342, "\u548cpytorch": 342, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 342, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 342, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 342, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 342, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 342, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 342, "\u79f0\u4e3a": 342, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 342, "\u611f\u53d7\u91ce": 342, "\u591a\u8df3\u90bb\u5c45": 342, "\u7ec4\u6210": 342, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 342, "\u6211\u4eec\u5b9e\u73b0": 342, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 342, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 342, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 342, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 342, "\u7136\u540e\u7528": 342, "\u7ba1\u7406": 342, "\u5230": 342, "\u7684\u8f6c\u6362": 342, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 342, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 342, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 342, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 342, "\u5411\u91cf": 342, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 342, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 342, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 342, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 342, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 342, "\u56fe\u7f16\u7801\u5668": 342, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 342, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 342, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 342, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 342, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 342, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 342, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 342, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 342, "\u5982tensorflow": 342, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 342, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 342, "\u901a\u5e38\u6765\u8bf4": 342, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 342, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 342, "\u7528\u56fe\u91c7\u6837": 342, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 342, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 342, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 342, "positve_sampl": 342, "\u4ee5\u8fd9\u4e9b": 342, "\u4e3a\u8f93\u5165\u4ea7\u751f": 342, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 342, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 342, "\u4ea7\u751f\u8d1f\u6837\u672c": 342, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 342, "\u6211\u4eec\u62bd\u8c61\u4e86": 342, "\u6765\u91c7\u6837\u90bb\u5c45": 342, "\u6700\u540e\u5c06": 342, "\u4ea7\u751f\u7684": 342, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 342, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 342, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 342, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 342, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 342, "\u624d\u80fd\u4f7f\u7528": 342, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 342, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 342, "\u5b9a\u4e49\u7f16\u7801\u5668": 342, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 342, "\u5f97\u5230": 342, "\u540e": 342, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 342, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 342, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 342, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 342, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 342, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 342, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 342, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 342, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 342, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 342, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 342, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 342, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 342, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 342, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 342, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 342, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 342, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 342, "\u6765": 342, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 342, "\u9700\u8981\u7684\u683c\u5f0f": 342, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 342, "\u5206\u522b\u662f\u70b9\u8868": 342, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 342, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 342, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 342, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 342, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 342, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 342, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 342, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 342, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 342, "\u56de\u4e00\u8df3\u90bb\u5c45": 342, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 342, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 342, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 342, "\u56e0\u6b64\u9009\u62e9": 342, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 342, "\u6210": 342, "\u8fd4\u56de": 342, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 342, "\u6765\u628a": 342, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 342, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 342, "\u4f60\u53ef\u4ee5\u4ece": 342, "\u83b7\u53d6\u548c\u524d\u9762": 342, "\u5bf9\u5e94\u7684": 342, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 342, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 342, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 342, "\u56e0\u4e3a": 342, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 342, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 342, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 342, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 342, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 342, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 342, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 342, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 342, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 342, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 342, "\u7136\u540e\u5728": 342, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 342, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 342, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 342, "\u6765\u8fdb\u884c\u8bad\u7ec3": 342, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 342, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 342, "\u76ee\u5f55": 342, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 342, "gat\u7b49\u6a21\u578b": 342, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 342, "\u5c5e\u6027\u56fe": 343, "\u56fe\u4e0a\u7684\u70b9": 343, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 343, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 343, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 343, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 343, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 343, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 343, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 343, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 343, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 343, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 343, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 343, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 343, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 343, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 343, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 343, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 343, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 343, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 343, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 343, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 343, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 343, "\u7684\u672c\u5730\u8def\u5f84": 343, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 343, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 343, "\u662f\u6211\u4eec\u901a\u8fc7": 343, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 343, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 343, "\u4f60\u53ef\u4ee5\u5728": 343, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 343, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 343, "\u7136\u800c": 343, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 343, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 343, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 343, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 343, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 343, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 343, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 343, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 343, "\u6211\u4eec\u5c06\u4f7f\u7528": 343, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 343, "\u627e\u5230\u6e90\u6570\u636e": 343, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 343, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 343, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 343, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 343, "\u4ee3\u8868\u6570\u636e\u6e90": 343, "\u6307\u793a": 343, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 343, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 343, "\u6570\u7ec4\u7b49": 343, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 343, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 343, "\u8f7d\u5165\u6570\u636e": 343, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 343, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 343, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 343, "\u9ed8\u8ba4\u4e3a": 343, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 343, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 343, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 343, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 343, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 343, "\u4e3e\u4e2a\u4f8b\u5b50": 343, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 343, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 343, "\u53ef\u9009\u9879": 343, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 343, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 343, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 343, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 343, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 343, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 343, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 343, "\u6bd4\u5982\u8bf4": 343, "\u5217\u7684\u5217\u540d": 343, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 343, "\u6216\u76ee\u6807\u70b9": 343, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 343, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 343, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 343, "\u4ee3\u8868\u7b2c\u51e0\u5217": 343, "\u4ece0\u5f00\u59cb": 343, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 343, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 343, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 343, "\u7c7b\u4f3c": 343, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 343, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 343, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 343, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 343, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 343, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 343, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 343, "\u8fb9\u7684\u6807\u7b7e\u540d": 343, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 343, "\u4e00\u5217\u5c5e\u6027": 343, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 343, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 343, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 343, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 343, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 343, "\u4e3e\u4f8b\u6765\u8bf4": 343, "\u8d77\u70b9\u7684": 343, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 343, "\u5217\u540d": 343, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 343, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 343, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 343, "\u4e00\u5217\u4e3a\u8d77\u70b9": 343, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 343, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 343, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 343, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 343, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 343, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 343, "\u5982\u679c\u7528\u6237\u7684": 343, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 343, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 343, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 343, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 343, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 343, "\u6709\u4e00\u4e2a\u540d\u4e3a": 343, "\u7684\u8fb9\u6807\u7b7e": 343, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 343, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 343, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 343, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 343, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 343, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 343, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 343, "\u50cf\u8fd9\u6837": 343, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 343, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 343, "\u5728\u8fd9\u91cc": 343, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 343, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 343, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 343, "\u7b49\u7c7b\u578b": 343, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 343, "\u5206\u522b\u4e3a": 343, "\u53ef\u4ee5\u4e3a": 343, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 343, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 343, "\u5f53id\u4e0d\u80fd\u7528": 343, "\u8868\u793a\u65f6": 343, "\u624d\u5e94\u8be5\u4f7f\u7528": 343, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 343, "\u5efa\u8bae\u4f7f\u7528": 343, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 343, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 343, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 343, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 343, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 343, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 343, "\u5c5e\u6027\u56fe\u7684": 343, "\u4f8b\u5b50": 343, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 343, "\u7684\u7c7b": 343, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 343, "\u652f\u6301\u4ece": 343, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 343, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 343, "\u9664\u4e86": 343, "\u5916": 343, "\u5176\u4ed6\u5c5e\u6027": 343, "id\u5217": 343, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 343, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 343, "\u6211\u4eec\u5c06\u5176\u4ee5": 343, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 343, "\u5f53": 343, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 343, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 343, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 343, "\u6807\u51c6": 343, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 343, "\u5c06\u4f1a\u89e3\u6790": 343, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 343, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 343, "\u672c\u5730": 343, "\u6570\u636e\u7531": 343, "\u8d1f\u8d23\u8f7d\u5165": 343, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 343, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 343, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 343, "\u4e4b\u4e8e": 343, "\u6216\u8005\u662f": 343, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 343, "\u6bd4\u5982\u53c2\u7167": 343, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 343, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 343, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 343, "abstractbufferedfil": 343, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 343, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 343, "write\u529f\u80fd": 343, "\u6700\u540e\u901a\u8fc7": 343, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 343, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 344, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 344, "\u5982\u4f55\u8f7d\u56fe": 344, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 344, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 344, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 344, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 344, "\u6211\u4eec\u7528jupyt": 344, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 344, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 344, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 344, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 344, "lab": 344, "\u73af\u5883": 344, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 344, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 344}, "objects": {"": [[100, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [100, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [100, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [100, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [100, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [100, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [100, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [100, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [100, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [100, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [100, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [100, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [100, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [100, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [100, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [100, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [100, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [100, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [100, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [100, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [100, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [100, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [100, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [100, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [100, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [100, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [100, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [100, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [100, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [100, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [100, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [100, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [100, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [100, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [100, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [100, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [100, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [100, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [100, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [100, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [100, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [100, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [100, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [100, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [100, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [100, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [100, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [100, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [100, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [100, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [100, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [100, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [100, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [100, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [100, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [100, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [100, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [100, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [100, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [100, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [100, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [100, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [100, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [100, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [100, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [100, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [100, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [100, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [100, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [100, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [100, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [100, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [100, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [100, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [100, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [100, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [100, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [100, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [100, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [100, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [100, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [100, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [100, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [100, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [100, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [100, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [100, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [100, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [100, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [100, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [100, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [100, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [100, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [100, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [100, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [100, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [100, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [100, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [100, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [100, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [100, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [100, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [100, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [100, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [100, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [100, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [100, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [100, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [100, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [100, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [100, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [100, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [100, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [100, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [100, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [100, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [100, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [100, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [100, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [100, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [100, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [100, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [100, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [100, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [100, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [100, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [100, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [100, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [100, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [100, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [100, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [100, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [100, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [100, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [100, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [100, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [100, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [100, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [100, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [100, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [100, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [100, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [100, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [100, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [100, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [100, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [100, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [100, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [100, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [100, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [100, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [100, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [100, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [100, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [100, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [100, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [100, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [100, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [100, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [100, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [100, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [100, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [100, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [100, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [100, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [100, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [100, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [100, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [100, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [100, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [100, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [100, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [100, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [100, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [100, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [100, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [100, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [100, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [100, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [100, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [100, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [100, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [100, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [100, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [100, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [100, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [100, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [100, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [100, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [100, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [100, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [100, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [100, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [100, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [100, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [100, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [100, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [100, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [100, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [100, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [100, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [100, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [100, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [100, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [100, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [100, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [100, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [100, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [100, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [100, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [100, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [100, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [100, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [100, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [100, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [100, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [100, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [100, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [100, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [100, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [100, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [100, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [100, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [100, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [100, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [100, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [100, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [100, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [100, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [100, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [100, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [100, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [100, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [100, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [100, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [100, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [100, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [100, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [100, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [100, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [100, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [100, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [100, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [100, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [100, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [100, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [100, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [100, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [100, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [100, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [100, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [100, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [100, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [100, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [100, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [100, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [100, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [100, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [100, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [100, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [100, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [100, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [100, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [100, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [100, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [100, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [100, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [100, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [100, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [100, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [100, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [100, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [100, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [100, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [100, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [100, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [100, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [100, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [100, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [100, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [100, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [100, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [100, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [100, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [100, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [100, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [100, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [100, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [100, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [100, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [100, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [100, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [100, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [100, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [100, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [100, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [100, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [100, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [100, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [100, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [100, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [100, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [100, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [100, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [100, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [100, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [100, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [100, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [100, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [100, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [100, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [100, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [100, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [100, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [100, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [100, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [100, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [100, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [100, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [100, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [100, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [100, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [100, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [100, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [100, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [100, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [100, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [100, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [100, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [100, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [100, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [100, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [100, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [100, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [100, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [100, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [100, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [100, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [100, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [100, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [100, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [100, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [100, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [100, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [100, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [100, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [100, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [100, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [100, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [100, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [100, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [100, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [100, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [100, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [100, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [100, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [100, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [100, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [100, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [100, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [100, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [100, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [100, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [100, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [100, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [100, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [100, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[317, 9, 1, "", "Session"], [107, 12, 1, "", "Vertex"], [101, 8, 1, "", "attribute_assortativity_coefficient"], [101, 8, 1, "", "average_degree_connectivity"], [101, 8, 1, "", "average_shortest_path_length"], [101, 8, 1, "", "avg_clustering"], [101, 8, 1, "", "bfs"], [101, 8, 1, "", "cdlp"], [101, 8, 1, "", "clustering"], [108, 8, 1, "", "declare"], [101, 8, 1, "", "degree_assortativity_coefficient"], [101, 8, 1, "", "degree_centrality"], [101, 8, 1, "", "eigenvector_centrality"], [151, 8, 1, "", "g"], [152, 8, 1, "", "get_default_session"], [153, 8, 1, "", "graphlearn"], [154, 8, 1, "", "gremlin"], [155, 8, 1, "", "has_default_session"], [101, 8, 1, "", "hits"], [101, 8, 1, "", "is_simple_path"], [101, 8, 1, "", "k_core"], [101, 8, 1, "", "k_shell"], [101, 8, 1, "", "katz_centrality"], [101, 8, 1, "", "louvain"], [101, 8, 1, "", "lpa"], [101, 8, 1, "", "lpa_u2i"], [101, 8, 1, "", "numeric_assortativity_coefficient"], [101, 8, 1, "", "pagerank"], [101, 8, 1, "", "pagerank_nx"], [156, 14, 1, "", "session"], [157, 8, 1, "", "set_option"], [101, 8, 1, "", "sssp"], [101, 8, 1, "", "triangles"], [101, 8, 1, "", "voterank"], [101, 8, 1, "", "wcc"]], "graphscope.Session": [[317, 10, 1, "", "__enter__"], [317, 10, 1, "", "__exit__"], [317, 10, 1, "", "__init__"], [317, 10, 1, "", "add_lib"], [317, 10, 1, "", "as_default"], [317, 10, 1, "", "close"], [317, 10, 1, "", "connected"], [317, 11, 1, "", "engine_config"], [317, 10, 1, "", "g"], [317, 10, 1, "", "get_config"], [317, 10, 1, "", "get_vineyard_object_mapping_table"], [317, 10, 1, "", "graphlearn"], [317, 11, 1, "", "info"], [317, 10, 1, "", "interactive"], [317, 10, 1, "", "load_from"], [317, 10, 1, "", "load_from_gar"], [317, 10, 1, "", "restore_from_pvc"], [317, 10, 1, "", "run_fetches"], [317, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[101, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[101, 10, 1, "", "__call__"], [101, 10, 1, "", "__init__"], [101, 10, 1, "", "is_compatible"], [101, 10, 1, "", "signature"]], "graphscope.framework.app": [[101, 9, 1, "", "App"], [101, 9, 1, "", "AppAssets"], [101, 9, 1, "", "AppDAGNode"], [109, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[101, 10, 1, "", "__del__"], [101, 10, 1, "", "__init__"], [101, 11, 1, "", "key"], [101, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[101, 10, 1, "", "__init__"], [101, 11, 1, "", "algo"], [101, 11, 1, "", "context_type"], [101, 11, 1, "", "gar"], [101, 10, 1, "", "is_compatible"], [101, 11, 1, "", "signature"], [101, 11, 1, "", "type"]], "graphscope.framework.context": [[102, 9, 1, "", "BaseContextDAGNode"], [102, 9, 1, "", "Context"], [102, 9, 1, "", "DynamicVertexDataContext"], [102, 9, 1, "", "LabeledVertexDataContextDAGNode"], [102, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [102, 9, 1, "", "ResultDAGNode"], [102, 9, 1, "", "TensorContextDAGNode"], [102, 9, 1, "", "VertexDataContextDAGNode"], [102, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[102, 10, 1, "", "to_dataframe"], [102, 10, 1, "", "to_numpy"], [102, 10, 1, "", "to_vineyard_dataframe"], [102, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[314, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[110, 8, 1, "", "add_column"], [111, 8, 1, "", "add_labels_to_graph"], [112, 8, 1, "", "arrow_to_dynamic"], [113, 8, 1, "", "bind_app"], [114, 8, 1, "", "clear_edges"], [115, 8, 1, "", "clear_graph"], [116, 8, 1, "", "context_to_dataframe"], [117, 8, 1, "", "context_to_numpy"], [118, 8, 1, "", "copy_graph"], [119, 8, 1, "", "create_app"], [120, 8, 1, "", "create_graph"], [121, 8, 1, "", "create_graph_view"], [122, 8, 1, "", "create_loader"], [123, 8, 1, "", "create_subgraph"], [124, 8, 1, "", "create_unload_op"], [125, 8, 1, "", "dynamic_to_arrow"], [126, 8, 1, "", "get_context_data"], [127, 8, 1, "", "graph_to_dataframe"], [128, 8, 1, "", "graph_to_numpy"], [129, 8, 1, "", "gremlin_to_subgraph"], [130, 8, 1, "", "modify_edges"], [131, 8, 1, "", "modify_vertices"], [132, 8, 1, "", "output"], [133, 8, 1, "", "project_arrow_property_graph"], [134, 8, 1, "", "project_to_simple"], [135, 8, 1, "", "report_graph"], [136, 8, 1, "", "run_app"], [137, 8, 1, "", "to_data_sink"], [138, 8, 1, "", "to_directed"], [139, 8, 1, "", "to_undirected"], [140, 8, 1, "", "to_vineyard_dataframe"], [141, 8, 1, "", "to_vineyard_tensor"], [142, 8, 1, "", "unload_app"], [143, 8, 1, "", "unload_context"], [144, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[172, 9, 1, "", "Graph"], [172, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[172, 10, 1, "", "__init__"], [172, 10, 1, "", "add_column"], [172, 10, 1, "", "add_edges"], [172, 10, 1, "", "add_vertices"], [172, 10, 1, "", "archive"], [172, 10, 1, "", "consolidate_columns"], [172, 10, 1, "", "detach"], [172, 11, 1, "", "key"], [172, 10, 1, "", "load_from"], [172, 10, 1, "", "loaded"], [172, 10, 1, "", "project"], [172, 10, 1, "", "save_to"], [172, 11, 1, "", "schema"], [172, 11, 1, "", "schema_path"], [172, 11, 1, "", "session_id"], [172, 10, 1, "", "to_dataframe"], [172, 10, 1, "", "to_directed"], [172, 10, 1, "", "to_numpy"], [172, 10, 1, "", "to_undirected"], [172, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[172, 10, 1, "", "__init__"], [172, 10, 1, "", "add_column"], [172, 10, 1, "", "add_edges"], [172, 10, 1, "", "add_vertices"], [172, 10, 1, "", "consolidate_columns"], [172, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[172, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[172, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[172, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[314, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[145, 10, 1, "", "__init__"], [146, 10, 1, "", "as_op_def"], [147, 10, 1, "", "eval"], [148, 11, 1, "", "evaluated"], [149, 11, 1, "", "key"], [150, 11, 1, "", "signature"]], "graphscope.interactive.query": [[173, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[173, 10, 1, "", "__init__"], [173, 10, 1, "", "close"], [173, 11, 1, "", "cypher_driver"], [173, 11, 1, "", "cypher_url"], [173, 10, 1, "", "execute"], [173, 11, 1, "", "graph_url"], [173, 11, 1, "", "gremlin_client"], [173, 11, 1, "", "gremlin_url"], [173, 11, 1, "", "object_id"], [173, 11, 1, "", "session"], [173, 11, 1, "", "session_id"], [173, 10, 1, "", "subgraph"], [173, 10, 1, "", "submit"], [173, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[174, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[174, 10, 1, "", "E"], [174, 10, 1, "", "V"], [174, 10, 1, "", "__init__"], [174, 10, 1, "", "get_handle"]], "graphscope.nx": [[310, 9, 1, "", "DiGraph"], [310, 9, 1, "", "Graph"], [312, 8, 1, "", "read_adjlist"], [312, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[310, 10, 1, "", "__contains__"], [310, 10, 1, "", "__getitem__"], [310, 10, 1, "", "__init__"], [310, 10, 1, "", "__iter__"], [310, 10, 1, "", "__len__"], [310, 10, 1, "", "add_edge"], [310, 10, 1, "", "add_edges_from"], [310, 10, 1, "", "add_node"], [310, 10, 1, "", "add_nodes_from"], [310, 10, 1, "", "add_weighted_edges_from"], [310, 11, 1, "", "adj"], [310, 10, 1, "", "adjacency"], [310, 14, 1, "", "adjlist_inner_dict_factory"], [310, 14, 1, "", "adjlist_outer_dict_factory"], [310, 10, 1, "", "clear"], [310, 10, 1, "", "clear_edges"], [310, 10, 1, "", "copy"], [310, 11, 1, "", "degree"], [310, 14, 1, "", "edge_attr_dict_factory"], [310, 10, 1, "", "edge_subgraph"], [310, 11, 1, "", "edges"], [310, 10, 1, "", "get_edge_data"], [310, 14, 1, "", "graph_attr_dict_factory"], [310, 14, 1, "", "graph_cache_factory"], [310, 11, 1, "", "graph_type"], [310, 10, 1, "", "has_edge"], [310, 10, 1, "", "has_node"], [310, 10, 1, "", "has_predecessor"], [310, 10, 1, "", "has_successor"], [310, 11, 1, "", "in_degree"], [310, 11, 1, "", "in_edges"], [310, 10, 1, "", "is_directed"], [310, 10, 1, "", "is_multigraph"], [310, 11, 1, "", "key"], [310, 11, 1, "", "name"], [310, 10, 1, "", "nbunch_iter"], [310, 10, 1, "", "neighbors"], [310, 14, 1, "", "node_attr_dict_factory"], [310, 14, 1, "", "node_dict_factory"], [310, 11, 1, "", "nodes"], [310, 10, 1, "", "number_of_edges"], [310, 10, 1, "", "number_of_nodes"], [310, 11, 1, "", "op"], [310, 10, 1, "", "order"], [310, 11, 1, "", "out_degree"], [310, 11, 1, "", "out_edges"], [310, 11, 1, "", "pred"], [310, 10, 1, "", "predecessors"], [310, 10, 1, "", "remove_edge"], [310, 10, 1, "", "remove_edges_from"], [310, 10, 1, "", "remove_node"], [310, 10, 1, "", "remove_nodes_from"], [310, 10, 1, "", "reverse"], [310, 11, 1, "", "schema"], [310, 11, 1, "", "session"], [310, 11, 1, "", "session_id"], [310, 10, 1, "", "set_edge_data"], [310, 10, 1, "", "set_node_data"], [310, 11, 1, "", "signature"], [310, 10, 1, "", "size"], [310, 10, 1, "", "subgraph"], [310, 11, 1, "", "succ"], [310, 10, 1, "", "successors"], [310, 10, 1, "", "to_directed"], [310, 10, 1, "", "to_undirected"], [310, 10, 1, "", "to_undirected_class"], [310, 10, 1, "", "update"]], "graphscope.nx.Graph": [[310, 10, 1, "", "__contains__"], [310, 10, 1, "", "__getitem__"], [313, 8, 1, "", "__init__"], [310, 10, 1, "", "__iter__"], [310, 10, 1, "", "__len__"], [313, 8, 1, "", "_convert_arrow_to_dynamic"], [310, 10, 1, "", "add_edge"], [310, 10, 1, "", "add_edges_from"], [310, 10, 1, "", "add_node"], [310, 10, 1, "", "add_nodes_from"], [310, 10, 1, "", "add_weighted_edges_from"], [310, 11, 1, "", "adj"], [310, 10, 1, "", "adjacency"], [310, 14, 1, "", "adjlist_inner_dict_factory"], [310, 14, 1, "", "adjlist_outer_dict_factory"], [310, 10, 1, "", "clear"], [310, 10, 1, "", "clear_edges"], [310, 10, 1, "", "copy"], [310, 11, 1, "", "degree"], [310, 14, 1, "", "edge_attr_dict_factory"], [310, 10, 1, "", "edge_subgraph"], [310, 11, 1, "", "edges"], [310, 10, 1, "", "get_edge_data"], [310, 14, 1, "", "graph_attr_dict_factory"], [310, 14, 1, "", "graph_cache_factory"], [310, 11, 1, "", "graph_type"], [310, 10, 1, "", "has_edge"], [310, 10, 1, "", "has_node"], [310, 10, 1, "", "is_directed"], [310, 10, 1, "", "is_multigraph"], [310, 11, 1, "", "key"], [310, 11, 1, "", "name"], [310, 10, 1, "", "nbunch_iter"], [310, 10, 1, "", "neighbors"], [310, 14, 1, "", "node_attr_dict_factory"], [310, 14, 1, "", "node_dict_factory"], [310, 11, 1, "", "nodes"], [310, 10, 1, "", "number_of_edges"], [310, 10, 1, "", "number_of_nodes"], [310, 11, 1, "", "op"], [310, 10, 1, "", "order"], [310, 10, 1, "", "remove_edge"], [310, 10, 1, "", "remove_edges_from"], [310, 10, 1, "", "remove_node"], [310, 10, 1, "", "remove_nodes_from"], [310, 11, 1, "", "schema"], [310, 11, 1, "", "session"], [310, 11, 1, "", "session_id"], [310, 10, 1, "", "set_edge_data"], [310, 10, 1, "", "set_node_data"], [310, 11, 1, "", "signature"], [310, 10, 1, "", "size"], [310, 10, 1, "", "subgraph"], [310, 10, 1, "", "to_directed"], [310, 10, 1, "", "to_undirected"], [310, 10, 1, "", "to_undirected_class"], [310, 10, 1, "", "update"]], "graphscope.nx.builtin": [[175, 8, 1, "", "average_clustering"], [175, 8, 1, "", "average_shortest_path_length"], [175, 8, 1, "", "bfs_edges"], [175, 8, 1, "", "clustering"], [175, 8, 1, "", "degree_centrality"], [175, 8, 1, "", "eigenvector_centrality"], [175, 8, 1, "", "has_path"], [175, 8, 1, "", "hits"], [175, 8, 1, "", "in_degree_centrality"], [175, 8, 1, "", "k_core"], [175, 8, 1, "", "katz_centrality"], [175, 8, 1, "", "out_degree_centrality"], [175, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[176, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[177, 8, 1, "", "add_cycle"], [178, 8, 1, "", "add_path"], [179, 8, 1, "", "add_star"], [180, 8, 1, "", "all_neighbors"], [181, 8, 1, "", "common_neighbors"], [182, 8, 1, "", "create_empty_copy"], [183, 8, 1, "", "degree"], [184, 8, 1, "", "degree_histogram"], [185, 8, 1, "", "density"], [186, 8, 1, "", "edge_subgraph"], [187, 8, 1, "", "edges"], [188, 8, 1, "", "freeze"], [189, 8, 1, "", "induced_subgraph"], [190, 8, 1, "", "info"], [191, 8, 1, "", "is_directed"], [192, 8, 1, "", "is_empty"], [193, 8, 1, "", "is_frozen"], [194, 8, 1, "", "is_negatively_weighted"], [195, 8, 1, "", "is_weighted"], [196, 8, 1, "", "neighbors"], [197, 8, 1, "", "nodes"], [198, 8, 1, "", "nodes_with_selfloops"], [199, 8, 1, "", "non_edges"], [200, 8, 1, "", "non_neighbors"], [201, 8, 1, "", "number_of_edges"], [202, 8, 1, "", "number_of_nodes"], [203, 8, 1, "", "number_of_selfloops"], [204, 8, 1, "", "selfloop_edges"], [205, 8, 1, "", "subgraph"], [206, 8, 1, "", "to_directed"], [207, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[309, 13, 0, "-", "atlas"], [309, 13, 0, "-", "classic"], [309, 13, 0, "-", "community"], [309, 13, 0, "-", "degree_seq"], [309, 13, 0, "-", "directed"], [309, 13, 0, "-", "duplication"], [309, 13, 0, "-", "ego"], [309, 13, 0, "-", "expanders"], [309, 13, 0, "-", "geometric"], [309, 13, 0, "-", "harary_graph"], [309, 13, 0, "-", "intersection"], [309, 13, 0, "-", "joint_degree_seq"], [309, 13, 0, "-", "mycielski"], [309, 13, 0, "-", "nonisomorphic_trees"], [309, 13, 0, "-", "small"], [309, 13, 0, "-", "social"], [309, 13, 0, "-", "spectral_graph_forge"], [309, 13, 0, "-", "sudoku"], [309, 13, 0, "-", "trees"], [309, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[208, 8, 1, "", "graph_atlas"], [209, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[210, 8, 1, "", "balanced_tree"], [211, 8, 1, "", "barbell_graph"], [212, 8, 1, "", "binomial_tree"], [213, 8, 1, "", "circulant_graph"], [214, 8, 1, "", "circular_ladder_graph"], [215, 8, 1, "", "complete_graph"], [216, 8, 1, "", "complete_multipartite_graph"], [217, 8, 1, "", "cycle_graph"], [218, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [219, 8, 1, "", "empty_graph"], [220, 8, 1, "", "full_rary_tree"], [221, 8, 1, "", "ladder_graph"], [222, 8, 1, "", "lollipop_graph"], [223, 8, 1, "", "null_graph"], [224, 8, 1, "", "path_graph"], [225, 8, 1, "", "star_graph"], [226, 8, 1, "", "trivial_graph"], [227, 8, 1, "", "turan_graph"], [228, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[229, 8, 1, "", "LFR_benchmark_graph"], [230, 8, 1, "", "caveman_graph"], [231, 8, 1, "", "connected_caveman_graph"], [232, 8, 1, "", "gaussian_random_partition_graph"], [233, 8, 1, "", "planted_partition_graph"], [234, 8, 1, "", "random_partition_graph"], [235, 8, 1, "", "relaxed_caveman_graph"], [236, 8, 1, "", "ring_of_cliques"], [237, 8, 1, "", "stochastic_block_model"], [238, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[239, 8, 1, "", "configuration_model"], [240, 8, 1, "", "degree_sequence_tree"], [241, 8, 1, "", "directed_configuration_model"], [242, 8, 1, "", "directed_havel_hakimi_graph"], [243, 8, 1, "", "expected_degree_graph"], [244, 8, 1, "", "havel_hakimi_graph"], [245, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[246, 8, 1, "", "gn_graph"], [247, 8, 1, "", "gnc_graph"], [248, 8, 1, "", "gnr_graph"], [249, 8, 1, "", "random_k_out_graph"], [250, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[251, 8, 1, "", "duplication_divergence_graph"], [252, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[253, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[254, 8, 1, "", "chordal_cycle_graph"], [255, 8, 1, "", "margulis_gabber_galil_graph"], [256, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[257, 8, 1, "", "geographical_threshold_graph"], [258, 8, 1, "", "random_geometric_graph"], [259, 8, 1, "", "soft_random_geometric_graph"], [260, 8, 1, "", "thresholded_random_geometric_graph"], [261, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[262, 8, 1, "", "hkn_harary_graph"], [263, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[264, 8, 1, "", "general_random_intersection_graph"], [265, 8, 1, "", "k_random_intersection_graph"], [266, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[267, 8, 1, "", "directed_joint_degree_graph"], [268, 8, 1, "", "is_valid_directed_joint_degree"], [269, 8, 1, "", "is_valid_joint_degree"], [270, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[271, 8, 1, "", "mycielski_graph"], [272, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[273, 8, 1, "", "nonisomorphic_trees"], [274, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[275, 8, 1, "", "LCF_graph"], [276, 8, 1, "", "bull_graph"], [277, 8, 1, "", "chvatal_graph"], [278, 8, 1, "", "cubical_graph"], [279, 8, 1, "", "desargues_graph"], [280, 8, 1, "", "diamond_graph"], [281, 8, 1, "", "dodecahedral_graph"], [282, 8, 1, "", "frucht_graph"], [283, 8, 1, "", "heawood_graph"], [284, 8, 1, "", "house_graph"], [285, 8, 1, "", "house_x_graph"], [286, 8, 1, "", "icosahedral_graph"], [287, 8, 1, "", "krackhardt_kite_graph"], [288, 8, 1, "", "make_small_graph"], [289, 8, 1, "", "moebius_kantor_graph"], [290, 8, 1, "", "octahedral_graph"], [291, 8, 1, "", "pappus_graph"], [292, 8, 1, "", "petersen_graph"], [293, 8, 1, "", "sedgewick_maze_graph"], [294, 8, 1, "", "tetrahedral_graph"], [295, 8, 1, "", "truncated_cube_graph"], [296, 8, 1, "", "truncated_tetrahedron_graph"], [297, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[298, 8, 1, "", "davis_southern_women_graph"], [299, 8, 1, "", "florentine_families_graph"], [300, 8, 1, "", "karate_club_graph"], [301, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[302, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[303, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[304, 8, 1, "", "prefix_tree"], [305, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[306, 8, 1, "", "triad_graph"]], "networkx.generators": [[309, 13, 0, "-", "internet_as_graphs"], [309, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[307, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[308, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 80, 89, 170, 323, 325], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 80, 158, 175, 325, 327], "all": [0, 31, 32, 36, 40], "pair": 0, "shortest": 0, "path": [0, 73, 75, 77], "length": 0, "attribut": [0, 20, 159, 176], "assort": 0, "averag": 0, "degre": [0, 183, 309], "connect": [0, 29, 30, 49, 68, 76, 323], "between": [0, 73, 319], "central": 0, "breadth": 0, "first": [0, 64], "search": 0, "cdlp": 0, "close": 0, "cluster": [0, 27, 30, 33, 40, 64, 86], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": 0, "katz": 0, "k": 0, "core": 0, "shell": [0, 55, 68], "label": [0, 75, 77, 89, 159, 322, 343], "propag": 0, "lcc": 0, "pagerank": 0, "sampl": [0, 41, 43, 75, 84, 95, 158, 162, 164, 167, 170], "singl": [0, 61], "sourc": [0, 31, 32, 75, 105, 159, 165, 168, 169], "voterank": 0, "wcc": 0, "custom": [1, 23, 27, 41, 42, 67, 323], "aggreg": [1, 73, 75, 77, 81], "local": [1, 7, 32, 36, 38, 40, 66, 67, 75, 82, 83, 87, 88, 322, 323], "vertex": [1, 10, 24, 43, 77, 89, 107, 316, 322, 343], "map": [1, 43, 57, 319], "support": [1, 11, 23, 70, 75, 80], "deploy": [2, 27, 38, 63, 64], "gae": [2, 34, 92, 327, 331], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 51, 64, 323], "onli": [2, 37], "python": [2, 15, 18, 31, 35, 36, 68, 76, 80, 99, 315, 323, 327, 335], "sdk": [2, 16, 34, 76, 103], "helm": [2, 29], "execut": [2, 34, 69, 90], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 42, 43, 44, 52, 60, 61, 63, 69, 72, 73, 77, 80, 81, 84, 86, 87, 88, 89, 90, 91, 93, 94, 95, 97, 98, 158, 160, 161, 162, 163, 164, 166, 170, 172, 174, 176, 309, 310, 312, 313, 319, 321, 322, 323, 324, 325, 331], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 60, 63, 80, 90, 91, 93, 98, 100, 101, 331], "uninstal": [2, 29, 323], "design": [3, 9, 34, 65, 80, 81, 90, 168, 322], "engin": [3, 4, 7, 9, 10, 12, 24, 31, 36, 41, 63, 67, 80, 82, 83, 87, 88, 90, 98, 100, 322, 331], "dev": [4, 32, 36, 40, 66, 82], "test": [4, 36, 37, 40, 66, 82, 88, 165], "setup": [4, 32], "understand": 4, "codebas": 4, "make": [4, 20], "modif": 4, "build": [4, 32, 36, 40, 66, 82, 105, 158, 165, 323, 343], "faq": [5, 73], "program": [6, 12, 14, 34, 61, 168], "model": [6, 12, 14, 15, 16, 17, 24, 34, 44, 52, 81, 86, 87, 88, 92, 95, 158, 166, 170, 322, 323], "flash": [6, 15, 92], "motiv": [6, 9, 65, 90, 322], "The": [6, 19, 30, 52, 54, 65, 321], "overview": [6, 9, 12, 46, 52, 54, 63, 166, 323], "api": [6, 9, 12, 19, 20, 46, 69, 100, 103, 104, 159, 170, 311, 315, 339], "strong": 6, "express": [6, 75, 77], "implement": [6, 15, 17, 37, 168, 322], "architectur": [6, 12, 65, 319], "optim": [6, 13, 72, 73, 88], "get": [7, 37, 49, 59, 67, 83, 91, 165, 320], "start": [7, 42, 49, 59, 66, 67, 77, 83, 91, 170, 320], "instal": [7, 27, 29, 30, 31, 32, 36, 37, 51, 63, 67, 82, 83, 165, 323, 330], "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 40, 49, 61, 67, 83, 165], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 40, 45, 46, 47, 48, 56, 61, 63, 67, 83, 90, 93, 95, 96, 97, 100, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 319, 321, 331, 335, 339, 340], "what": [7, 14, 67, 73, 83, 93, 95, 96], "": [7, 67, 73, 83, 100], "next": [7, 67, 83, 96], "guid": [8, 35, 36, 45, 74, 85, 323, 327, 328], "exampl": [8, 17, 22, 23, 46, 74, 85, 327, 328], "ingress": [9, 92], "increment": [9, 12], "messag": [9, 81], "driven": 9, "differenti": 9, "flexibl": [9, 34], "memoiz": 9, "distribut": [9, 61, 160, 168], "runtim": [9, 34, 168], "kei": [10, 52, 69, 73, 80, 149], "concept": [10, 322], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 43, 77, 89, 176, 187, 312, 322, 343], "cut": [10, 322], "vertic": [10, 77, 89, 343], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 307, 308, 311], "compat": [11, 73], "convert": 11, "nx": [11, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306], "oper": [11, 20, 28, 70, 77, 145, 146, 147, 148, 149, 150, 168, 314], "storag": [12, 33, 34, 63, 90, 319, 322], "layer": [12, 90], "grape": [12, 17, 92, 105], "ffi": 12, "comput": [12, 61, 63, 90, 322], "applic": [12, 15, 22, 23, 77, 90, 325], "perform": [13, 19, 34, 73, 80, 98], "tune": 13, "memori": [13, 89, 324], "footprint": 13, "properti": [13, 52, 70, 73, 75, 77, 89, 322, 343], "data": [13, 42, 43, 44, 61, 64, 70, 73, 89, 159, 166, 169, 170, 321, 323], "structur": [13, 70, 105, 176], "usag": [13, 54, 55, 73, 89], "estim": [13, 318], "pie": [14, 16, 17, 18, 92, 103, 333], "i": [14, 75, 93, 95, 96], "workflow": [14, 80, 319], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 77, 79, 86, 87, 88, 99], "develop": [15, 16, 17, 18, 22, 23, 36, 45, 63, 158, 170, 323, 327], "your": [15, 16, 17, 18, 22, 37, 41, 64, 87, 88, 89, 158, 168, 327], "c": [15, 16, 35, 47, 327], "defin": [15, 16, 87, 88, 168, 319], "A": [15, 52, 63, 72], "function": [15, 18, 88, 101, 103, 158, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 317], "integr": [15, 37, 61, 169], "client": [15, 27, 30, 36, 160, 330], "step": [16, 42, 75, 77, 95], "1": [16, 42, 57, 69, 159, 160, 162, 170], "context": [16, 100, 102, 316], "class": [16, 168, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207], "2": [16, 42, 57, 69, 159, 160, 170, 323], "3": [16, 42, 57, 69, 159, 160, 170, 323], "packag": [16, 31, 32, 165], "4": [16, 57, 69, 159, 170], "gar": 16, "file": [16, 27, 31, 169, 321], "github": [16, 17, 25, 37], "templat": [16, 17], "java": [17, 35, 76, 79, 106, 323, 327], "jar": 17, "own": [17, 18, 22, 64, 89, 158, 168], "prepar": [17, 27, 30, 40, 49, 170], "jdk": [17, 105], "submit": [17, 22, 23, 37, 39, 49], "javasdk": 17, "write": [18, 323], "pregel": [18, 24, 103, 333], "us": [18, 20, 27, 32, 42, 64, 69, 73, 80, 96, 165, 168, 170, 316, 319, 323, 324], "math": [18, 333], "h": [18, 333], "netowrkx": [19, 20], "how": [19, 37, 39, 40, 62, 73, 82, 158, 168, 170, 331], "doe": 19, "analysi": [19, 90], "from": [19, 20, 31, 32, 33, 63, 69, 77, 89, 105, 165, 319, 323], "displai": 19, "speed": 19, "up": [19, 27, 30, 33], "over": 19, "creat": [20, 33, 37, 42, 47, 86, 88], "an": [20, 69, 168], "empti": 20, "ad": [20, 89], "node": [20, 81, 86, 87, 88, 176, 197, 323], "examin": 20, "element": 20, "remov": [20, 64], "constructor": 20, "access": 20, "neighbor": [20, 88, 196], "deepcopi": 20, "subgraph": [20, 73, 75, 81, 84, 95, 205], "edge_subgraph": [20, 186], "copi": [20, 31], "direct": [20, 246, 247, 248, 249, 250, 309], "analyz": 20, "object": [20, 101, 102, 160, 172, 314, 317], "transform": [20, 313], "builtin": [21, 101, 175, 314], "giraph": 22, "try": [22, 170], "some": [22, 77], "app": [22, 23, 100, 101, 109], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 30, 64, 323], "along": 23, "spark": 23, "includ": 23, "depend": [23, 31, 32, 165], "toward": 23, "centric": [24, 81], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 37], "discuss": [25, 37], "cloud": [26, 80, 159], "k8": [27, 86, 331], "kubernet": [27, 30, 33, 38, 40, 86, 335, 340], "launch": [27, 87, 88], "default": 27, "paramet": [27, 89], "frequent": [27, 58], "imag": [27, 32, 40, 165, 323], "uri": 27, "specifi": [27, 89], "number": 27, "worker": [27, 100], "provid": 27, "kubeconfig": 27, "other": [27, 64, 89, 169], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 30, 33], "coordin": [28, 36], "configur": [28, 29, 41, 43, 64, 67, 171, 323], "releas": [29, 37], "offlin": [29, 31, 323], "exist": 30, "vineyard": [30, 66, 92, 324], "lifecycl": 30, "load": [30, 43, 69, 77, 86, 87, 88, 89, 319, 321, 323, 324], "dataset": [30, 69, 89, 323], "anoth": 30, "session": [30, 86, 156, 317], "environ": [31, 32, 36, 40, 66, 69, 82], "wheel": [31, 165, 335], "download": [31, 55, 69], "destin": 31, "extract": [31, 77], "them": [31, 89], "locat": 31, "basic": [31, 77, 159], "gcc": 31, "g": [31, 151], "third": 31, "parti": 31, "stabl": 32, "version": 32, "preview": 32, "linux": [32, 335], "maco": [32, 335], "persist": [33, 323], "pv": 33, "pvc": 33, "store": [33, 47, 48, 50, 53, 66, 323], "retor": 33, "framework": [34, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150], "multi": [34, 316], "languag": [34, 52, 164], "high": [34, 80, 90], "librari": [34, 80, 165], "code": [35, 37, 46, 168, 329], "style": [35, 37, 311, 322], "rust": 35, "script": [35, 330], "linter": 35, "checker": 35, "contain": [36, 82], "dep": [36, 82], "target": [36, 40, 89], "compon": 36, "individu": 36, "contribut": 37, "conduct": 37, "commun": [37, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 309], "report": [37, 62], "bug": [37, 62], "request": [37, 39, 46], "featur": [37, 52, 80, 321], "improv": 37, "document": [37, 46], "chang": 37, "pre": 37, "commit": [37, 323], "minor": 37, "fix": 37, "fork": 37, "branch": [37, 75], "suit": 37, "format": [37, 159, 321, 323], "right": 37, "keep": 37, "pull": [37, 39], "updat": [37, 330], "merg": 37, "pr": 37, "maintain": 37, "ship": 37, "review": 37, "continu": 37, "debug": 38, "find": [38, 331], "log": [38, 319, 323, 331], "command": [38, 46, 54, 330], "techniqu": [38, 89], "servic": [41, 42, 46, 49, 54, 64, 66, 323], "avail": 41, "new": [42, 168], "import": [42, 43, 323], "modern": 43, "breakdown": 43, "entiti": 44, "primit": 44, "type": [44, 70, 89, 97, 103, 159, 310], "arrai": [44, 322], "interact": [45, 46, 47, 48, 49, 51, 56, 60, 63, 67, 91, 94, 98, 173, 331], "admin": 46, "introduct": [46, 57, 75, 162], "detail": [46, 54, 322], "listgraph": 46, "graphmanag": 46, "categori": 46, "descript": 46, "http": 46, "curl": 46, "expect": 46, "respons": 46, "statu": [46, 49], "creategraph": 46, "deletegraph": 46, "getgraphschema": 46, "importgraph": 46, "createprocedur": 46, "proceduremanag": 46, "listallprocedur": 46, "getprocedur": 46, "updateprocedur": 46, "deleteprocedur": 46, "startservic": 46, "servicemanag": 46, "servicestatu": 46, "systemmetr": 46, "nodemetr": 46, "procedur": [47, 48, 50, 53, 54], "turn": 48, "cypher": [48, 50, 52, 55, 68, 70, 80, 94], "queri": [48, 49, 52, 53, 60, 65, 69, 73, 77, 90, 91, 161, 173, 323], "craft": 48, "compil": [48, 50, 53, 165, 168], "enabl": [48, 53], "invok": 48, "manag": 49, "initi": 49, "stop": [49, 63, 91], "restart": [49, 323], "check": 49, "destori": 49, "glossari": [50, 92], "solid": 52, "foundat": 52, "limit": [52, 55, 75, 77, 96, 323], "disabl": 53, "view": [53, 323], "administr": 54, "tool": 54, "root": 54, "databas": [54, 97], "arrowfrag": 57, "0": [57, 69], "\u672f\u8bed": 57, "\u8f7d\u56fe": [57, 343], "\u521d\u59cb\u5316partiton": 57, "\u6784\u5efa\u539f\u59cbarrow": 57, "tabl": [57, 63, 159], "shuffl": 57, "vtabl": 57, "\u6784\u5efavertex": 57, "basicarrowvertexmapbuild": 57, "5": [57, 69, 159], "\u6784\u5efafragment\u51c6\u5907": 57, "\u5904\u7406edg": 57, "basicevfragmentload": 57, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 57, "basicarrowfragmentbuild": 57, "6": 57, "fragment\u6784\u5efa": 57, "\u8bbf\u95eefragment": 57, "\u8bbf\u95ee\u9876\u70b9": 57, "\u8bbf\u95ee\u5185\u90e8\u70b9": 57, "\u8303\u56f4\u5916\u90e8\u70b9": 57, "\u8bbf\u95ee\u5168\u90e8\u70b9": 57, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 57, "\u8bbf\u95ee\u8fb9": 57, "\u8bbf\u95ee\u51fa\u8fb9": 57, "\u8bbf\u95ee\u5165\u8fb9": 57, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 57, "ask": 58, "question": [58, 69], "gle": [59, 81, 328, 331], "workload": [60, 93, 94, 95, 97, 319], "learn": [60, 63, 81, 82, 83, 87, 88, 90, 91, 95, 97, 158, 166, 174, 331], "scientist": 61, "challeng": [61, 93, 95], "handl": [61, 97], "solut": 61, "machin": [61, 87, 88], "pydata": 61, "ecosystem": [61, 71, 78], "One": [63, 91, 316], "larg": [63, 89, 93, 95], "scale": [63, 326], "system": [63, 97, 169, 171], "alibaba": [63, 159], "flex": [63, 104], "troubleshoot": [63, 323], "util": [63, 330], "refer": [63, 100, 104, 106, 315, 322], "indic": 63, "standalon": 64, "gie": [64, 65, 66, 67, 68, 69, 71, 72, 73, 76, 78, 92, 331], "process": [65, 87, 91, 97, 158, 323], "manual": [66, 89], "instanc": 67, "via": [68, 76], "driver": 68, "llm": 69, "assist": 69, "set": 69, "endpoint": 69, "gener": [69, 72, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], "sentenc": 69, "construct": [70, 170], "claus": 70, "neo4j": [71, 94], "For": [71, 78, 322], "tinkerpop": [71, 73, 78, 94, 341], "rule": 72, "base": [72, 81], "rbo": 72, "filtermatchrul": 72, "degreefusionrul": 72, "notmatchtoantijoinrul": 72, "fieldtrimrul": 72, "cost": 72, "cbo": 72, "gremlin": [73, 75, 76, 77, 80, 94, 154, 341], "constraint": 73, "differ": [73, 316], "inner": 73, "id": [73, 75, 77, 322], "expand": [73, 75, 254, 255, 256, 309], "filter": [73, 75, 77], "like": 73, "sql": 73, "group": [73, 75, 77], "multipl": [73, 77, 89], "valu": [73, 75, 77], "appropri": 73, "index": 73, "standard": [75, 321], "v": 75, "e": 75, "out": [75, 77, 170], "inE": [75, 77], "both": [75, 77], "outv": [75, 77], "inv": [75, 77], "otherv": [75, 77], "bothv": [75, 77], "hasid": [75, 77], "haslabel": 75, "ha": 75, "hasnot": 75, "where": [75, 77], "travers": [75, 77, 80, 84, 94, 163], "predic": 75, "dedup": [75, 77], "project": [75, 77, 105], "constant": [75, 77], "valuemap": [75, 77], "elementmap": 75, "select": [75, 77], "count": 75, "fold": [75, 77], "sum": [75, 77], "min": [75, 77], "max": [75, 77], "mean": [75, 77], "groupcount": [75, 77], "h3": 75, "order": [75, 77, 322], "statist": 75, "coin": 75, "union": 75, "match": [75, 77, 94], "ident": 75, "unfold": 75, "syntact": [75, 77], "sugar": [75, 77], "pathexpand": 75, "endv": 75, "To": 75, "Will": 75, "Not": 75, "repeat": 75, "sideeffect": 75, "consol": [76, 341], "ldbc": 77, "retriev": [77, 322], "appli": [77, 95], "real": 77, "expans": 77, "mani": 77, "point": 77, "after": 77, "pattern": [77, 94], "relat": [77, 89, 319], "syntax": 77, "complex": 77, "bi2": 77, "bi3": 77, "bi4": 77, "left": 77, "part": 77, "bi11": 77, "bi14": 77, "apach": [78, 341], "user": [79, 99, 159, 327, 328], "eas": 80, "interfac": [80, 168, 169, 322], "extens": 80, "gnn": [80, 86, 95, 170, 337], "train": [80, 86, 87, 88, 95, 158], "infer": 80, "nativ": 80, "across": 80, "orchestr": 80, "paradigm": [81, 95], "egograph": 81, "pass": 81, "pipelin": 81, "docker": [82, 165, 335], "neighborhood": 84, "neg": [84, 167], "gsl": [84, 164], "classif": [86, 87, 88], "neural": [86, 95], "network": [86, 95, 309], "egographsag": 87, "pyg": 88, "evalu": [88, 148], "loaderfor": 88, "valid": 88, "graphsag": 88, "advanc": 89, "deduc": 89, "when": 89, "ambigu": 89, "put": [89, 159], "togeth": [89, 159], "panda": [89, 343], "numpi": [89, 343], "loader": [89, 172, 343], "variant": 89, "tip": 89, "reduc": 89, "consumpt": 89, "unifi": [90, 322], "platform": 90, "disaggreg": 90, "divers": 90, "bi": 90, "qp": 90, "task": 91, "quick": [91, 170], "gart": [92, 319], "grin": [92, 322], "graphar": [92, 321], "groot": [92, 323, 331], "gum": 92, "maxgraph": 92, "deprec": 92, "v6d": 92, "gaia": 92, "pegasu": 92, "can": [93, 95], "do": [93, 95], "typic": 95, "introduc": 96, "why": 96, "ar": 96, "case": 96, "posit": 97, "compar": 97, "variou": 97, "benchmark": 98, "result": [98, 316], "gpu": 98, "reproduc": 98, "fragment": 100, "appasset": 101, "javaapp": 101, "cython": 103, "about": 105, "javadoc": 106, "declar": 108, "load_app": 109, "dag_util": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "add_column": 110, "add_labels_to_graph": 111, "arrow_to_dynam": 112, "bind_app": 113, "clear_edg": 114, "clear_graph": 115, "context_to_datafram": 116, "context_to_numpi": 117, "copy_graph": 118, "create_app": 119, "create_graph": 120, "create_graph_view": 121, "create_load": 122, "create_subgraph": 123, "create_unload_op": 124, "dynamic_to_arrow": 125, "get_context_data": 126, "graph_to_datafram": 127, "graph_to_numpi": 128, "gremlin_to_subgraph": 129, "modify_edg": 130, "modify_vertic": 131, "output": 132, "project_arrow_property_graph": 133, "project_to_simpl": 134, "report_graph": 135, "run_app": 136, "to_data_sink": 137, "to_direct": [138, 206], "to_undirect": [139, 207], "to_vineyard_datafram": 140, "to_vineyard_tensor": 141, "unload_app": 142, "unload_context": 143, "unload_graph": 144, "__init__": 145, "as_op_def": 146, "eval": 147, "signatur": 150, "get_default_sess": 152, "graphlearn": 153, "has_default_sess": 155, "set_opt": 157, "encod": [158, 166], "loss": 158, "weight": 159, "maxcomput": 159, "describ": 160, "topologi": 160, "stand": 160, "alon": 160, "mode": [160, 330], "server": [160, 330], "pip": 165, "tensorflow": 165, "git": 165, "clone": 168, "regist": [168, 169], "bytestreamaccessfil": 169, "structuredaccessfil": 169, "writablefil": 169, "scheme": 169, "gl": 170, "self": 176, "loop": 176, "freez": [176, 188], "add_cycl": 177, "add_path": 178, "add_star": 179, "all_neighbor": 180, "common_neighbor": 181, "create_empty_copi": 182, "degree_histogram": 184, "densiti": 185, "induced_subgraph": 189, "info": 190, "is_direct": 191, "is_empti": 192, "is_frozen": 193, "is_negatively_weight": 194, "is_weight": 195, "nodes_with_selfloop": 198, "non_edg": 199, "non_neighbor": 200, "number_of_edg": 201, "number_of_nod": 202, "number_of_selfloop": 203, "selfloop_edg": 204, "atla": [208, 209, 309], "graph_atla": 208, "graph_atlas_g": 209, "classic": [210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 309], "balanced_tre": 210, "barbell_graph": 211, "binomial_tre": 212, "circulant_graph": 213, "circular_ladder_graph": 214, "complete_graph": 215, "complete_multipartite_graph": 216, "cycle_graph": 217, "dorogovtsev_goltsev_mendes_graph": 218, "empty_graph": 219, "full_rary_tre": 220, "ladder_graph": 221, "lollipop_graph": 222, "null_graph": 223, "path_graph": 224, "star_graph": 225, "trivial_graph": 226, "turan_graph": 227, "wheel_graph": 228, "lfr_benchmark_graph": 229, "caveman_graph": 230, "connected_caveman_graph": 231, "gaussian_random_partition_graph": 232, "planted_partition_graph": 233, "random_partition_graph": 234, "relaxed_caveman_graph": 235, "ring_of_cliqu": 236, "stochastic_block_model": 237, "windmill_graph": 238, "degree_seq": [239, 240, 241, 242, 243, 244, 245], "configuration_model": 239, "degree_sequence_tre": 240, "directed_configuration_model": 241, "directed_havel_hakimi_graph": 242, "expected_degree_graph": 243, "havel_hakimi_graph": 244, "random_degree_sequence_graph": 245, "gn_graph": 246, "gnc_graph": 247, "gnr_graph": 248, "random_k_out_graph": 249, "scale_free_graph": 250, "duplic": [251, 252, 309], "duplication_divergence_graph": 251, "partial_duplication_graph": 252, "ego": [253, 309], "ego_graph": 253, "chordal_cycle_graph": 254, "margulis_gabber_galil_graph": 255, "paley_graph": 256, "geometr": [257, 258, 259, 260, 261, 309], "geographical_threshold_graph": 257, "random_geometric_graph": 258, "soft_random_geometric_graph": 259, "thresholded_random_geometric_graph": 260, "waxman_graph": 261, "harary_graph": [262, 263], "hkn_harary_graph": 262, "hnm_harary_graph": 263, "intersect": [264, 265, 266, 309], "general_random_intersection_graph": 264, "k_random_intersection_graph": 265, "uniform_random_intersection_graph": 266, "joint_degree_seq": [267, 268, 269, 270], "directed_joint_degree_graph": 267, "is_valid_directed_joint_degre": 268, "is_valid_joint_degre": 269, "joint_degree_graph": 270, "mycielski": [271, 272, 309], "mycielski_graph": 271, "mycielskian": 272, "nonisomorphic_tre": [273, 274], "number_of_nonisomorphic_tre": 274, "small": [275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 309], "lcf_graph": 275, "bull_graph": 276, "chvatal_graph": 277, "cubical_graph": 278, "desargues_graph": 279, "diamond_graph": 280, "dodecahedral_graph": 281, "frucht_graph": 282, "heawood_graph": 283, "house_graph": 284, "house_x_graph": 285, "icosahedral_graph": 286, "krackhardt_kite_graph": 287, "make_small_graph": 288, "moebius_kantor_graph": 289, "octahedral_graph": 290, "pappus_graph": 291, "petersen_graph": 292, "sedgewick_maze_graph": 293, "tetrahedral_graph": 294, "truncated_cube_graph": 295, "truncated_tetrahedron_graph": 296, "tutte_graph": 297, "social": [298, 299, 300, 301, 309], "davis_southern_women_graph": 298, "florentine_families_graph": 299, "karate_club_graph": 300, "les_miserables_graph": 301, "spectral_graph_forg": 302, "sudoku": [303, 309], "sudoku_graph": 303, "tree": [304, 305, 309], "prefix_tre": 304, "random_tre": 305, "triad": [306, 309], "triad_graph": 306, "internet_as_graph": 307, "random_internet_as_graph": 307, "stochast": [308, 309], "stochastic_graph": 308, "diverg": 309, "sequenc": 309, "AS": 309, "spectral": 309, "non": 309, "isomorph": 309, "joint": 309, "harari": 309, "digraph": 310, "read": 312, "list": [312, 322], "adjac": 312, "selector": 316, "tensorcontext": 316, "vertexdatacontext": 316, "labeledvertexdatacontext": 316, "vertexpropertycontext": 316, "labeledvertexpropertycontext": 316, "method": 316, "dimension": 316, "rang": 316, "resourc": 318, "bridg": 319, "gap": 319, "oltp": 319, "inform": 321, "archiv": 321, "predefin": 322, "macro": 322, "partit": [322, 323, 326], "strategi": 322, "guidelin": 322, "handler": 322, "iter": 322, "master": 322, "mirror": 322, "complet": 322, "natur": 322, "trait": 322, "known": 323, "artifacthub": 323, "directori": 323, "common": 323, "modifi": 323, "j": 323, "realtim": 323, "destroi": 323, "In": 324, "immut": 324, "bind": 325, "repartit": 326, "fennel": 326, "xtrapulp": 326, "hybrid": 326, "error": 329, "line": 330, "gsctl": 330, "monitor": 332, "\u56fe\u5206\u6790\u5f15\u64ce": 333, "\u5185\u7f6e\u7b97\u6cd5": 333, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 333, "\u4f7f\u7528": 333, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 333, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 333, "\u4e2d\u7684\u51fd\u6570": 333, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 333, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 333, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 333, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 333, "\u90e8\u7f72": 334, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 334, "\u5728aw": 334, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 334, "\u672c\u5730\u90e8\u7f72graphscop": 334, "\u5f00\u53d1\u8005\u6307\u5357": 335, "\u57fa\u4e8e": [335, 340], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 335, "\u6784\u5efa": 335, "\u4ee3\u7801\u98ce\u683c": 335, "\u5e38\u89c1\u95ee\u9898": 336, "\u5feb\u901f\u4e0a\u624b": 337, "\u793a\u4f8b": 337, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 337, "\u521b\u5efa\u4f1a\u8bdd": 337, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 337, "\u56fe\u5206\u6790": 337, "\u56fe\u795e\u7ecf\u7f51\u7edc": 337, "\u5173\u95ed\u4f1a\u8bdd": 337, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 338, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 338, "\u6295\u5f71": 338, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 338, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 338, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 339, "\u76ee\u5f55": [339, 344], "\u53c2\u8003": 339, "\u7d22\u5f15": 339, "\u5b89\u88c5": 340, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 340, "\u5ba2\u6237\u7aef": 340, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 341, "\u5229\u7528python": 341, "\u8fde\u63a5graphscop": 341, "\u5229\u7528java": 341, "\u5f00\u53d1\u63a7\u5236\u53f0": 341, "gremlin\u7f16\u7a0b\u5165\u95e8": 341, "101": 341, "\u56fe\u6570\u636e\u6a21\u578b": 341, "\u67e5\u8be2\u8bed\u8a00": 341, "\u4e00\u4e2a\u4f8b\u5b50": 341, "gremlin\u517c\u5bb9\u6027": 341, "\u5bf9\u6bd4tinkerpop": 341, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 341, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 341, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 341, "\u5df2\u77e5\u9650\u5236": 341, "\u56fe\u5b66\u4e60\u5f15\u64ce": 342, "\u56fe\u5b66\u4e60\u6a21\u578b": 342, "\u6570\u636e\u6a21\u578b": 342, "\u7f16\u7801\u5668": 342, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 342, "\u91c7\u6837": 342, "\u56fe\u6570\u636e\u6d41": 342, "\u6a21\u578b": 342, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 342, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 343, "\u624b\u52a8\u914d\u7f6e\u56fe": 343, "vid_field": 343, "src_label": 343, "dst_label": 343, "src_field": 343, "dst_field": 343, "\u9ad8\u7ea7\u7528\u6cd5": 343, "\u6ca1\u6709\u6b67\u4e49\u65f6": 343, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 343, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 343, "\u591a\u79cd\u8fb9\u5173\u7cfb": 343, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 343, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 343, "\u5b8c\u6574\u7684\u793a\u4f8b": 343, "\u4ece": 343, "\u6216": 343, "\u4e2d\u8f7d\u56fe": 343, "\u7684\u53d8\u79cd": 343, "\u5165\u95e8\u6559\u7a0b": 344}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "CDLP": [[0, "cdlp"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LCC": [[0, "lcc"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [51, "prerequisites"], [64, "prerequisites"], [323, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null]], "Dev and Test": [[4, "dev-and-test"], [66, "dev-and-test"], [82, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [90, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [52, "overview"], [54, "overview"], [63, null], [166, "overview"], [323, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [49, "getting-started"], [67, "getting-started"], [83, "getting-started"], [91, "getting-started"], [320, "getting-started"]], "Installation": [[7, "installation"], [29, "installation"], [51, "installation"], [67, "installation"], [83, "installation"], [323, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [67, "whats-the-next"], [83, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [74, "guide-and-examples"], [85, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with Github Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with Github Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetowrkX APIs": [[19, "tutorial-graph-algorithms-with-netowrkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetowrkX APIs": [[20, "tutorial-graph-operations-with-netowrkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"], [89, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [37, "slack"]], "Discussion on Github": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [40, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope Operator": [[28, "deploy-graphscope-operator"]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Deploy GraphScope with helm": [[29, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Configuration": [[29, "configuration"]], "Offline Installation": [[29, "offline-installation"]], "Deploy with Existing Vineyard Cluster": [[30, "deploy-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[30, "cleaning-up"]], "Install GraphScope in offline environment": [[31, "install-graphscope-in-offline-environment"]], "Install from wheels": [[31, "install-from-wheels"]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[32, "install-graphscope-on-local"]], "Install from packages": [[32, "install-from-packages"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[32, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[33, "retore-graphs-from-the-pvc"]], "Clean up": [[33, "clean-up"]], "Design of GAE": [[34, "design-of-gae"]], "Graph Storage": [[34, "graph-storage"]], "Execution Framework": [[34, "execution-framework"]], "Flexible programming models": [[34, "flexible-programming-models"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "High-performance runtime": [[34, "high-performance-runtime"]], "Algorithm Library": [[34, "algorithm-library"]], "Code Style Guide": [[35, "code-style-guide"]], "C++ Style": [[35, "c-style"]], "Python Style": [[35, "python-style"]], "Rust Style": [[35, "rust-style"]], "Java Style": [[35, "java-style"]], "Script Style": [[35, "script-style"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "Development Guide": [[36, "development-guide"]], "Dev Environment": [[36, "dev-environment"], [40, "dev-environment"], [66, "dev-environment"], [82, "dev-environment"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Install deps on local": [[36, "install-deps-on-local"], [82, "install-deps-on-local"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [40, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Python Client": [[36, "build-python-client"]], "How to Contribute": [[37, "how-to-contribute"]], "Code of Conduct": [[37, "code-of-conduct"]], "Community": [[37, "community"], [309, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[37, "github-discussion"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Requesting Features": [[37, "requesting-features"]], "Improving Documentation": [[37, "improving-documentation"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[37, "install-pre-commit"]], "Minor Fixes": [[37, "minor-fixes"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Debugging on local deployment": [[38, "debugging-on-local-deployment"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Debugging Techniques": [[38, "debugging-techniques"]], "How to Submit Pull-requests": [[39, "how-to-submit-pull-requests"]], "How to Test": [[40, "how-to-test"], [82, "how-to-test"]], "Test GraphScope on local": [[40, "test-graphscope-on-local"]], "Run tests": [[40, "run-tests"], [40, "id1"]], "Test GraphScope on Kubernetes cluster": [[40, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[40, "build-images"]], "Engine Configuration": [[41, "engine-configuration"]], "Customizing Your Service Configuration": [[41, "customizing-your-service-configuration"]], "Sample Configuration": [[41, "sample-configuration"]], "Available Configurations": [[41, "available-configurations"]], "Service configurations": [[41, "service-configurations"]], "Using Custom Graph": [[42, "using-custom-graph"]], "Step 1: Create a New Graph": [[42, "step-1-create-a-new-graph"]], "Step 2: Import Graph Data": [[42, "step-2-import-graph-data"]], "Step 3: Start the Service with the New Graph": [[42, "step-3-start-the-service-with-the-new-graph"]], "Data Import Configuration": [[43, "data-import-configuration"]], "Sample Configuration for the \u201cModern\u201d Graph": [[43, "sample-configuration-for-the-modern-graph"]], "Configuration Breakdown": [[43, "configuration-breakdown"]], "Loading Configurations": [[43, "loading-configurations"]], "Vertex Mappings": [[43, "vertex-mappings"]], "Edge Mappings": [[43, "edge-mappings"]], "Data Model": [[44, "data-model"]], "Graph Data": [[44, "graph-data"]], "Entity Data": [[44, "entity-data"]], "Primitive Types": [[44, "primitive-types"]], "Array Types": [[44, "array-types"]], "GraphScope Interactive Development guide": [[45, "graphscope-interactive-development-guide"]], "GraphScope Interactive Admin Service Documentation": [[46, "graphscope-interactive-admin-service-documentation"]], "Introduction": [[46, "introduction"], [75, "introduction"]], "API Overview": [[46, "api-overview"]], "Detailed API Documentation": [[46, "detailed-api-documentation"]], "ListGraphs API (GraphManagement Category)": [[46, "listgraphs-api-graphmanagement-category"]], "Description": [[46, "description"], [46, "id1"], [46, "id6"], [46, "id11"], [46, "id16"], [46, "id21"], [46, "id26"], [46, "id31"], [46, "id36"], [46, "id41"], [46, "id46"], [46, "id51"], [46, "id55"]], "HTTP Request": [[46, "http-request"], [46, "id2"], [46, "id7"], [46, "id12"], [46, "id17"], [46, "id22"], [46, "id27"], [46, "id32"], [46, "id37"], [46, "id42"], [46, "id47"], [46, "id52"], [46, "id56"]], "Curl Command Example": [[46, "curl-command-example"], [46, "id3"], [46, "id8"], [46, "id13"], [46, "id18"], [46, "id23"], [46, "id28"], [46, "id33"], [46, "id38"], [46, "id43"], [46, "id48"], [46, "id57"]], "Expected Response": [[46, "expected-response"], [46, "id4"], [46, "id9"], [46, "id14"], [46, "id19"], [46, "id24"], [46, "id29"], [46, "id34"], [46, "id39"], [46, "id44"], [46, "id49"], [46, "id53"], [46, "id58"]], "Status Codes": [[46, "status-codes"], [46, "id5"], [46, "id10"], [46, "id15"], [46, "id20"], [46, "id25"], [46, "id30"], [46, "id35"], [46, "id40"], [46, "id45"], [46, "id50"], [46, "id54"], [46, "id59"]], "CreateGraph (GraphManagement Category)": [[46, "creategraph-graphmanagement-category"]], "DeleteGraph  (GraphManagement Category)": [[46, "deletegraph-graphmanagement-category"]], "GetGraphSchema  (GraphManagement Category)": [[46, "getgraphschema-graphmanagement-category"]], "ImportGraph  (GraphManagement Category)": [[46, "importgraph-graphmanagement-category"]], "CreateProcedure (ProcedureManagement Category)": [[46, "createprocedure-proceduremanagement-category"]], "ListAllProcedure  (ProcedureManagement Category)": [[46, "listallprocedure-proceduremanagement-category"]], "GetProcedure (ProcedureManagement Category)": [[46, "getprocedure-proceduremanagement-category"]], "UpdateProcedure (ProcedureManagement Category)": [[46, "updateprocedure-proceduremanagement-category"]], "DeleteProcedure (ProcedureManagement Category)": [[46, "deleteprocedure-proceduremanagement-category"]], "StartService (ServiceManagement Category)": [[46, "startservice-servicemanagement-category"]], "ServiceStatus": [[46, "servicestatus"]], "SystemMetrics (NodeMetrics Category)": [[46, "systemmetrics-nodemetrics-category"]], "Create c++ Stored Procedures on GraphScope Interactive": [[47, "create-c-stored-procedures-on-graphscope-interactive"]], "Turning Cypher Queries into Stored Procedures with GraphScope Interactive": [[48, "turning-cypher-queries-into-stored-procedures-with-graphscope-interactive"]], "Crafting a Cypher Stored Procedure": [[48, "crafting-a-cypher-stored-procedure"]], "Compiling and Enabling the Stored Procedure": [[48, "compiling-and-enabling-the-stored-procedure"]], "Invoking the Cypher Stored Procedure": [[48, "invoking-the-cypher-stored-procedure"]], "Preparation": [[49, "preparation"]], "Manage Interactive Service": [[49, "manage-interactive-service"]], "Initialize the Service": [[49, "initialize-the-service"]], "Start the Service": [[49, "start-the-service"]], "Stop the Service": [[49, "stop-the-service"]], "Restart the Service": [[49, "restart-the-service"]], "Check Service Status": [[49, "check-service-status"]], "Destory the Service": [[49, "destory-the-service"]], "Running Queries": [[49, "running-queries"]], "Connect to the Service": [[49, "connect-to-the-service"]], "Submit Queries": [[49, "submit-queries"]], "Glossary": [[50, "glossary"], [92, "glossary"]], "Stored Procedure.": [[50, "stored-procedure"]], "Cypher.": [[50, "cypher"]], "Compile.": [[50, "compile"]], "Install Interactive": [[51, "install-interactive"]], "A Solid Foundation": [[52, "a-solid-foundation"]], "Key Features": [[52, "key-features"], [80, "key-features"]], "Property Graph Model and Graph Queries": [[52, "property-graph-model-and-graph-queries"]], "The Cypher Query Language": [[52, "the-cypher-query-language"]], "Limitations": [[52, "limitations"], [75, "limitations"]], "Stored Procedures": [[53, "stored-procedures"]], "Compiling a Stored Procedure": [[53, "compiling-a-stored-procedure"]], "Enabling Stored Procedures": [[53, "enabling-stored-procedures"]], "Disabling Stored Procedures": [[53, "disabling-stored-procedures"]], "Viewing Enabled Stored Procedures": [[53, "viewing-enabled-stored-procedures"]], "Querying Stored Procedures": [[53, "querying-stored-procedures"]], "The Administrative tool": [[54, "the-administrative-tool"]], "Detailed Usage": [[54, "detailed-usage"]], "Root Commands": [[54, "root-commands"]], "Service Commands": [[54, "service-commands"]], "Database Commands": [[54, "database-commands"]], "Procedure Commands": [[54, "procedure-commands"]], "Cypher Shell": [[55, "cypher-shell"]], "Downloading": [[55, "downloading"]], "Usage": [[55, "usage"]], "Limitation": [[55, "limitation"]], "GraphScope Interactive": [[56, "graphscope-interactive"]], "Introduction to ArrowFragment": [[57, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[57, "id1"]], "1. \u8f7d\u56fe": [[57, "id2"]], "1.1 \u521d\u59cb\u5316partitoner": [[57, "partitoner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[57, "arrow-table"]], "1.3. Shuffle vtable": [[57, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[57, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[57, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[57, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[57, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[57, "id3"]], "2. \u8bbf\u95eeFragment": [[57, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[57, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[57, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[57, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[57, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[57, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[57, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[57, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[57, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[57, "id13"]], "Frequently Asked Questions": [[58, "frequently-asked-questions"]], "Getting Started for GLE": [[59, "getting-started-for-gle"]], "Graph Workloads": [[60, "graph-workloads"]], "Graph Analytics": [[60, "graph-analytics"]], "Graph Interactive Query": [[60, "graph-interactive-query"]], "Graph Learning": [[60, "graph-learning"], [174, "graph-learning"]], "GraphScope for Data Scientists": [[61, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[61, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[61, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[61, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[61, "integration-with-pydata-ecosystem"]], "How to Report Bugs": [[62, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[63, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[63, null]], "GraphScope Flex": [[63, null]], "Graph Analytical Engine": [[63, null], [98, "graph-analytical-engine"]], "Graph Interactive Engine": [[63, null], [98, "graph-interactive-engine"]], "Graph Learning Engine": [[63, null]], "Storage Engine": [[63, null]], "Troubleshooting & Utilities": [[63, null]], "Development": [[63, null]], "Reference": [[63, null], [322, "reference"]], "Indices and tables": [[63, "indices-and-tables"]], "Standalone Deployment for GIE": [[64, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[64, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[64, "remove-the-gie-service"]], "Using Your Own Data": [[64, "using-your-own-data"]], "Deploy on a Cluster": [[64, "deploy-on-a-cluster"]], "Other Useful Configurations": [[64, "other-useful-configurations"]], "Design of GIE": [[65, "design-of-gie"]], "The Motivations": [[65, "the-motivations"]], "The Architecture": [[65, "the-architecture"]], "Query Processing": [[65, "query-processing"]], "Build GIE with Vineyard Store on Local": [[66, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[66, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[66, "manually-start-the-gie-services"]], "Running GraphScope Interactive Engine on Local": [[67, "running-graphscope-interactive-engine-on-local"]], "Customize Configurations for GIE instance": [[67, "customize-configurations-for-gie-instance"]], "GIE for Cypher": [[68, "gie-for-cypher"]], "Connecting via Python Driver": [[68, "connecting-via-python-driver"]], "Connecting via Cypher-Shell": [[68, "connecting-via-cypher-shell"]], "Using LLM as an Assistant in GIE": [[69, "using-llm-as-an-assistant-in-gie"]], "0. Environment": [[69, "environment"]], "1. Download Datasets": [[69, "download-datasets"]], "2. Load the Graph": [[69, "load-the-graph"]], "3. Set Endpoint and API Key": [[69, "set-endpoint-and-api-key"]], "4. Generate Graph Query Sentence from Questions": [[69, "generate-graph-query-sentence-from-questions"]], "5. Execute Generated Query Sentence with GIE": [[69, "execute-generated-query-sentence-with-gie"]], "Cypher Support": [[70, "cypher-support"]], "Data Types": [[70, "data-types"]], "Property Types": [[70, "property-types"]], "Structural types": [[70, "structural-types"]], "Constructed Types": [[70, "constructed-types"]], "Operators": [[70, "operators"]], "Clause": [[70, "clause"]], "Neo4j Ecosystem": [[71, "neo4j-ecosystem"]], "GIE For Tinkerpop Ecosystem": [[71, null], [78, null]], "A Generic Graph Optimizer for GIE": [[72, "a-generic-graph-optimizer-for-gie"]], "Rule-based Optimizer (RBO)": [[72, "rule-based-optimizer-rbo"]], "FilterMatchRule": [[72, "filtermatchrule"]], "DegreeFusionRule": [[72, "degreefusionrule"]], "NotMatchToAntiJoinRule": [[72, "notmatchtoantijoinrule"]], "FieldTrimRule": [[72, "fieldtrimrule"]], "Cost-based Optimizer (CBO)": [[72, "cost-based-optimizer-cbo"]], "FAQs for GIE Gremlin Usage": [[73, "faqs-for-gie-gremlin-usage"]], "Compatibility with TinkerPop": [[73, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[73, "property-graph-constraints"]], "What\u2019s the difference between Inner ID and Property ID ?": [[73, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[73, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[73, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[73, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[73, "group-by-multiple-keys"]], "group by multiple values:": [[73, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[73, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[73, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[73, "how-to-use-subgraph-in-gie-gremlin"]], "Supported Gremlin Steps": [[75, "supported-gremlin-steps"]], "Standard Steps": [[75, "standard-steps"]], "Source": [[75, "source"]], "V()": [[75, "v"]], "E()": [[75, "e"]], "Expand": [[75, "expand"]], "outE()": [[75, "oute"]], "inE()": [[75, "ine"]], "bothE()": [[75, "bothe"]], "out()": [[75, "out"], [75, "id7"]], "in()": [[75, "in"], [75, "id8"]], "both()": [[75, "both"], [75, "id9"]], "outV()": [[75, "outv"]], "inV()": [[75, "inv"]], "otherV()": [[75, "otherv"]], "bothV()": [[75, "bothv"]], "Filter": [[75, "filter"]], "hasId()": [[75, "hasid"], [77, "hasid"]], "hasLabel()": [[75, "haslabel"]], "has()": [[75, "has"]], "hasNot()": [[75, "hasnot"]], "is()": [[75, "is"]], "where(traversal)": [[75, "where-traversal"]], "where(predicate)": [[75, "where-predicate"]], "not(traversal)": [[75, "not-traversal"]], "dedup()": [[75, "dedup"], [77, "dedup"]], "Project": [[75, "project"]], "id()": [[75, "id"]], "label()": [[75, "label"]], "constant()": [[75, "constant"], [77, "constant"]], "valueMap()": [[75, "valuemap"], [77, "valuemap"]], "values()": [[75, "values"]], "elementMap()": [[75, "elementmap"]], "select()": [[75, "select"], [77, "select"]], "Aggregate": [[75, "aggregate"]], "count()": [[75, "count"]], "fold()": [[75, "fold"], [77, "fold"]], "sum()": [[75, "sum"]], "min()": [[75, "min"]], "max()": [[75, "max"]], "mean()": [[75, "mean"]], "group()": [[75, "group"], [77, "group"]], "groupCount()": [[75, "groupcount"], [77, "groupcount"]], "<h3 id=\"gremlin-order\">Order</h3>": [[75, "order"]], "order()": [[75, "id1"]], "Statistics": [[75, "statistics"]], "limit()": [[75, "limit"]], "coin()": [[75, "coin"]], "sample()": [[75, "sample"]], "Union": [[75, "union"]], "union()": [[75, "id2"]], "Match": [[75, "match"]], "match()": [[75, "id3"]], "Subgraph": [[75, "subgraph"]], "subgraph()": [[75, "id4"]], "Identity": [[75, "identity"]], "identity()": [[75, "id5"]], "Unfold": [[75, "unfold"]], "unfold()": [[75, "id6"], [75, "id10"]], "Syntactic Sugars": [[75, "syntactic-sugars"]], "PathExpand": [[75, "pathexpand"]], "endV()": [[75, "endv"]], "Expression": [[75, "expression"]], "Aggregate (Group)": [[75, "aggregate-group"]], "To be Supported": [[75, "to-be-supported"]], "path()": [[75, "path"]], "local()": [[75, "local"]], "Will Not be Supported": [[75, "will-not-be-supported"]], "repeat()": [[75, "repeat"]], "properties()": [[75, "properties"]], "sideEffect": [[75, "sideeffect"]], "branch": [[75, "branch"]], "GIE for Gremlin": [[76, "gie-for-gremlin"]], "Connecting via Python SDK": [[76, "connecting-via-python-sdk"]], "Connecting via Java SDK": [[76, "connecting-via-java-sdk"]], "Connecting via Gremlin-Console": [[76, "connecting-via-gremlin-console"]], "Tutorial: LDBC Gremlin": [[77, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[77, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[77, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[77, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[77, "apply-some-filters"]], "Extract Property Values": [[77, "extract-property-values"]], "Real Applications": [[77, "real-applications"], [77, "id1"]], "Basic Traversal Query": [[77, "basic-traversal-query"]], "Expansion": [[77, "expansion"]], "out(), in() and both()": [[77, "out-in-and-both"]], "outE(), inE() and bothE()": [[77, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[77, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[77, "multiple-expansion-steps"]], "Expansion from many starting points": [[77, "expansion-from-many-starting-points"]], "Filter & Expansion": [[77, "filter-expansion"]], "Apply filters after expansion": [[77, "apply-filters-after-expansion"]], "Expansion as filters": [[77, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[77, "path-expansion-syntactic-sugar"]], "Pattern Match": [[77, "pattern-match"]], "Relational Operations": [[77, "relational-operations"]], "Filter Steps": [[77, "filter-steps"]], "where()": [[77, "where"]], "Project Steps": [[77, "project-steps"]], "id() and label()": [[77, "id-and-label"]], "Aggregate Steps": [[77, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[77, "sum-min-max-and-mean"]], "Order Step": [[77, "order-step"]], "Limit Step": [[77, "limit-step"]], "Expression(Syntax Sugar)": [[77, "expression-syntax-sugar"]], "Complex Queries": [[77, "complex-queries"]], "LDBC BI2": [[77, "ldbc-bi2"]], "LDBC BI3": [[77, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[77, "ldbc-bi4-left-part"]], "LDBC BI11": [[77, "ldbc-bi11"]], "LDBC BI14": [[77, "ldbc-bi14"]], "Apache TinkerPop Ecosystem": [[78, "apache-tinkerpop-ecosystem"]], "Tutorials for Java Users": [[79, "tutorials-for-java-users"]], "Ease-of-use: Python Interface": [[80, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[80, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[80, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[80, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[80, "gnn-training-inference"]], "Cloud Native Design": [[80, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[80, "across-engine-workflow-orchestration"]], "Design of GLE": [[81, "design-of-gle"]], "Model Paradigms": [[81, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[81, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[81, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[81, "pipeline-for-learning"]], "Dev on docker container": [[82, "dev-on-docker-container"]], "Build Learning Engine": [[82, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[83, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[84, "graph-sampling"], [162, "graph-sampling"]], "Graph Traversal": [[84, "graph-traversal"], [94, "graph-traversal"], [163, "graph-traversal"]], "Neighborhood Sampling": [[84, "neighborhood-sampling"]], "Subgraph Sampling": [[84, "subgraph-sampling"], [95, "subgraph-sampling"]], "Negative Sampling": [[84, "negative-sampling"], [167, "negative-sampling"]], "GSL": [[84, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[86, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[86, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[86, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[87, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[87, "load-graph"], [88, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[87, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[87, "launch-the-learning-engine"], [88, "launch-the-learning-engine"]], "Train the Model": [[87, "train-the-model"]], "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine": [[88, "tutorial-training-a-node-classification-model-pyg-on-your-local-machine"]], "Define the evaluation function": [[88, "define-the-evaluation-function"]], "Create neighbor loaderfor training, testing and validation": [[88, "create-neighbor-loaderfor-training-testing-and-validation"]], "Define the PyG GraphSage Model and optimizer": [[88, "define-the-pyg-graphsage-model-and-optimizer"]], "Train and test": [[88, "train-and-test"]], "Loading Graphs": [[89, "loading-graphs"]], "Load Built-in Datasets": [[89, "load-built-in-datasets"]], "Loading Your Own Datasets": [[89, "loading-your-own-datasets"]], "Adding Vertices": [[89, "adding-vertices"]], "Advanced Usages": [[89, "advanced-usages"]], "Deduce vertex labels when not ambiguous": [[89, "deduce-vertex-labels-when-not-ambiguous"]], "Deduce vertex from edges": [[89, "deduce-vertex-from-edges"]], "Multiple relations": [[89, "multiple-relations"]], "Specify data types of properties manually": [[89, "specify-data-types-of-properties-manually"]], "Other parameters of graph": [[89, "other-parameters-of-graph"]], "Putting them Together": [[89, "putting-them-together"]], "Loading From Pandas or Numpy": [[89, "loading-from-pandas-or-numpy"]], "From Pandas": [[89, "from-pandas"]], "From Numpy": [[89, "from-numpy"]], "Loader Variants": [[89, "loader-variants"]], "Techniques targeting at large graph": [[89, "techniques-targeting-at-large-graph"]], "Tips for reduce memory consumption of graphs": [[89, "tips-for-reduce-memory-consumption-of-graphs"]], "Design of GraphScope": [[90, "design-of-graphscope"]], "Unified Graph Computing Platform": [[90, "unified-graph-computing-platform"]], "Application layer": [[90, "application-layer"]], "Execution engine layer": [[90, "execution-engine-layer"]], "Storage layer": [[90, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[90, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[90, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[90, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[90, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[90, "graphscope-for-learning"]], "One-stop Graph Processing": [[91, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[91, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[91, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[91, "graph-learning-quick-start"]], "FLASH": [[92, "flash"]], "GRAPE": [[92, "grape"]], "GAE": [[92, "gae"]], "GART": [[92, "gart"]], "GRIN": [[92, "grin"]], "GraphAr": [[92, "graphar"]], "Groot": [[92, "groot"]], "GUM": [[92, "gum"]], "MaxGraph (deprecated)": [[92, "maxgraph-deprecated"]], "Vineyard, or v6d": [[92, "vineyard-or-v6d"]], "GIE": [[92, "gie"]], "GAIA": [[92, "gaia"]], "Pegasus": [[92, "pegasus"]], "Ingress": [[92, "ingress"]], "PIE-model": [[92, "pie-model"]], "Graph Analytics Workloads": [[93, "graph-analytics-workloads"]], "What is Graph Analytics": [[93, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[93, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[93, "what-can-graphscope-do"], [95, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[94, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[94, "tinkerpop-and-gremlin"]], "Pattern Matching": [[94, "pattern-matching"], [94, "id1"]], "Neo4j and Cypher": [[94, "neo4j-and-cypher"]], "Graph Learning Workloads": [[95, "graph-learning-workloads"]], "What is Graph Neural Network": [[95, "what-is-graph-neural-network"]], "Typical GNN Models": [[95, "typical-gnn-models"]], "Paradigm of Model Training": [[95, "paradigm-of-model-training"]], "Steps of Model Training": [[95, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[95, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[96, "introducing-graphscope"]], "What is GraphScope": [[96, "what-is-graphscope"]], "Why use GraphScope": [[96, "why-use-graphscope"]], "What are the Use Cases": [[96, "what-are-the-use-cases"]], "What are the Limitations": [[96, "what-are-the-limitations"]], "What are the Next": [[96, "what-are-the-next"]], "Positioning of GraphScope": [[97, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[97, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[97, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[97, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[97, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[98, "performance-and-benchmark"]], "Results": [[98, "results"]], "Performance on GPUs": [[98, "performance-on-gpus"]], "Reproducing the results": [[98, "reproducing-the-results"]], "Tutorials for Python Users": [[99, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[100, "analytical-engine-api-reference"]], "Analytical Engine": [[100, "analytical-engine"]], "Fragments in GraphScope": [[100, "fragments-in-graphscope"]], "Analytical Apps": [[100, "analytical-apps"]], "Analytical Workers": [[100, "analytical-workers"]], "App\u2019s Context": [[100, "app-s-context"]], "Analytical App": [[101, "analytical-app"]], "AppAssets": [[101, "appassets"]], "JavaApp": [[101, "javaapp"]], "App object": [[101, "app-object"]], "Functions": [[101, "functions"], [103, "functions"], [176, "functions"]], "BuiltIn apps": [[101, "builtin-apps"]], "Context": [[102, "context"]], "Context object": [[102, "context-object"]], "Cython SDK API": [[103, "cython-sdk-api"]], "Pregel": [[103, "pregel"]], "PIE": [[103, "pie"]], "GraphScope types": [[103, "graphscope-types"]], "Flex API Reference": [[104, "flex-api-reference"]], "About Grape JDK": [[105, "about-grape-jdk"]], "Project Structure": [[105, "project-structure"]], "Building from source": [[105, "building-from-source"]], "Java Reference (javadoc)": [[106, "java-reference-javadoc"]], "graphscope.Vertex": [[107, "graphscope-vertex"]], "graphscope.declare": [[108, "graphscope-declare"]], "graphscope.framework.app.load_app": [[109, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[110, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[111, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[112, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[113, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[114, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[115, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[116, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[117, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[118, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[119, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[120, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[121, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[122, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[123, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[124, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[125, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.get_context_data": [[126, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[127, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[128, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[129, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[130, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[131, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[132, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[133, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[134, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[135, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[136, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[137, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[138, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[139, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[140, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[141, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[142, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[143, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[144, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[145, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[146, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[147, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[148, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[149, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[150, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[151, "graphscope-g"]], "graphscope.get_default_session": [[152, "graphscope-get-default-session"]], "graphscope.graphlearn": [[153, "graphscope-graphlearn"]], "graphscope.gremlin": [[154, "graphscope-gremlin"]], "graphscope.has_default_session": [[155, "graphscope-has-default-session"]], "graphscope.session": [[156, "graphscope-session"]], "graphscope.set_option": [[157, "graphscope-set-option"]], "Developing Your Own Model": [[158, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[158, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[158, "sampling"]], "Encoder": [[158, "encoder"], [166, "encoder"]], "Loss Function and Training Process": [[158, "loss-function-and-training-process"]], "Data Source": [[159, "data-source"]], "1 Data format": [[159, "data-format"]], "1.1 Basic format": [[159, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[159, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[159, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[159, "label-format-labeled"]], "1.5 Putting together": [[159, "putting-together"]], "2 Data source type": [[159, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[159, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[159, "user-api"]], "Graph Object": [[160, "graph-object"]], "2 Describe the Topology": [[160, "describe-the-topology"]], "3.1 Stand-alone Mode": [[160, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[160, "distributed-mode-client-server-mode"]], "Graph Query": [[161, "graph-query"]], "1 Introduction": [[162, "introduction"]], "Graph Sampling Language\uff08GSL)": [[164, "graph-sampling-language-gsl"]], "Install from pip": [[165, "install-from-pip"]], "Get wheel package": [[165, "get-wheel-package"]], "Install using pip": [[165, "install-using-pip"]], "Install TensorFlow": [[165, "install-tensorflow"]], "Build from source": [[165, "build-from-source"]], "Install git": [[165, "install-git"]], "Install dependent libraries": [[165, "install-dependent-libraries"]], "Compile": [[165, "compile"], [168, "compile"]], "Install": [[165, "install"]], "Run test": [[165, "run-test"]], "Docker image": [[165, "docker-image"]], "Graph Learning Model": [[166, "graph-learning-model"]], "Data model": [[166, "data-model"]], "Defining Your Own Operator": [[168, "defining-your-own-operator"]], "Programming Interface": [[168, "programming-interface"]], "Distributed Runtime Design": [[168, "distributed-runtime-design"]], "Implement a New Operator": [[168, "implement-a-new-operator"]], "Clone source code": [[168, "clone-source-code"]], "Implement your operator class": [[168, "implement-your-operator-class"]], "Register Operator": [[168, "register-operator"]], "How to Use an Operator": [[168, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[169, "integrating-other-data-sources"]], "File System Interface": [[169, "file-system-interface"]], "ByteStreamAccessFile": [[169, "bytestreamaccessfile"]], "StructuredAccessFile": [[169, "structuredaccessfile"]], "WritableFile": [[169, "writablefile"]], "Register with Scheme": [[169, "register-with-scheme"]], "Quick Start": [[170, "quick-start"]], "1 Trying out the built-in models": [[170, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[170, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[170, "developing-a-gnn-model"]], "3.1 Data Preparation": [[170, "data-preparation"]], "3.2 Graph Construction": [[170, "graph-construction"]], "3.3 Graph Sampling": [[170, "graph-sampling"]], "3.4 GNN Model": [[170, "gnn-model"]], "System configuration": [[171, "system-configuration"]], "Graph": [[172, "graph"], [176, "graph"], [310, "graph"]], "Graph object": [[172, "graph-object"]], "Loader object": [[172, "loader-object"]], "Graph Functions": [[172, "graph-functions"]], "Interactive Query": [[173, "interactive-query"]], "Builtin algorithms": [[175, "builtin-algorithms"]], "Nodes": [[176, "nodes"]], "Edges": [[176, "edges"]], "Self loops": [[176, "self-loops"]], "Attributes": [[176, "attributes"]], "Freezing graph structure": [[176, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[177, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[178, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[179, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[180, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[181, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[182, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[183, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[184, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[185, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[186, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[187, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[188, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[189, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[190, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[191, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[192, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[193, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[194, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[195, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[196, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[197, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[198, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[199, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[200, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[201, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[202, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[203, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[204, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[205, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[206, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[207, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[208, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[209, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[210, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[211, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[212, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[213, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[214, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[215, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[216, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[217, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[218, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[219, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[220, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[221, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[222, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[223, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[224, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[225, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[226, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[227, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[228, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[229, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[230, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[231, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[232, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[233, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[234, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[235, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[236, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[237, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[238, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[239, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[240, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[241, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[242, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[243, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[244, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[245, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[246, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[247, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[248, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[249, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[250, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[251, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[252, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[253, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[254, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[255, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[256, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[257, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[258, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[259, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[260, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[261, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[262, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[263, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[264, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[265, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[266, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[267, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[268, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[269, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[270, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[271, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[272, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[273, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[274, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[275, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[276, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[277, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[278, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[279, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[280, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[281, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[282, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[283, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[284, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[285, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[286, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[287, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[288, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[289, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[290, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[291, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[292, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[293, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[294, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[295, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[296, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[297, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[298, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[299, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[300, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[301, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[302, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[303, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[304, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[305, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[306, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[307, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[308, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[309, "graph-generators"]], "Atlas": [[309, "module-graphscope.nx.generators.atlas"]], "Classic": [[309, "module-graphscope.nx.generators.classic"]], "Expanders": [[309, "module-graphscope.nx.generators.expanders"]], "Small": [[309, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[309, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[309, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[309, "module-graphscope.nx.generators.directed"]], "Geometric": [[309, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[309, "module-graphscope.nx.generators.ego"]], "Stochastic": [[309, "module-networkx.generators.stochastic"]], "AS graph": [[309, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[309, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[309, "module-graphscope.nx.generators.social"]], "Spectral": [[309, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[309, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[309, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[309, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[309, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[309, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[309, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[309, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[310, "graph-types"]], "DiGraph": [[310, "digraph"]], "NetworkX-style API": [[311, "networkx-style-api"]], "Reading graphs": [[312, "reading-graphs"]], "Edge List": [[312, "edge-list"]], "Adjacency List": [[312, "adjacency-list"]], "Graph Transformation": [[313, "graph-transformation"]], "Operation": [[314, "operation"]], "Operation object": [[314, "operation-object"]], "BuiltIn operations": [[314, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[315, "python-api-reference"]], "Selector": [[316, "selector"]], "Selectors in different context": [[316, "selectors-in-different-context"]], "TensorContext": [[316, "tensorcontext"]], "VertexDataContext": [[316, "vertexdatacontext"]], "LabeledVertexDataContext": [[316, "labeledvertexdatacontext"]], "VertexPropertyContext": [[316, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[316, "labeledvertexpropertycontext"]], "Methods that use selectors": [[316, "methods-that-use-selectors"]], "One-dimensional results": [[316, "one-dimensional-results"]], "Multi-dimensional results": [[316, "multi-dimensional-results"]], "Vertex Range": [[316, "vertex-range"]], "Session": [[317, "session"]], "Session object": [[317, "session-object"]], "Session Functions": [[317, "session-functions"]], "Resources Estimator": [[318, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[319, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[319, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[319, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[319, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[319, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[321, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[321, "the-graphar-file-format"]], "Features": [[321, "features"]], "File Format": [[321, "file-format"]], "Information files": [[321, "information-files"]], "Data files": [[321, "data-files"]], "GraphAr in GraphScope": [[321, "graphar-in-graphscope"]], "Loading GraphAr Data into GraphScope": [[321, "loading-graphar-data-into-graphscope"]], "Archiving the Graph Data in GraphAr": [[321, "archiving-the-graph-data-in-graphar"]], "GRIN: Graph Retrieval INterface": [[322, "grin-graph-retrieval-interface"]], "Motivations": [[322, "motivations"]], "Unified Graph Retrieval": [[322, "unified-graph-retrieval"]], "GRIN Concepts": [[322, "grin-concepts"]], "Predefined Macros": [[322, "predefined-macros"]], "Partition Strategy": [[322, "partition-strategy"]], "Edge-cut Partition Strategy": [[322, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[322, "vertex-cut-partition-strategy"]], "Property Graph Model": [[322, "property-graph-model"]], "Implementation Guideline": [[322, "implementation-guideline"]], "For computing engine": [[322, "for-computing-engine"]], "For storage engine": [[322, "for-storage-engine"]], "Design Details": [[322, "design-details"]], "Handler": [[322, "handler"]], "Edge": [[322, "edge"]], "List": [[322, "list"]], "Array-style Retrieval": [[322, "array-style-retrieval"]], "List Iterator": [[322, "list-iterator"]], "Property": [[322, "property"]], "Label": [[322, "label"], [343, "label"]], "Order": [[322, "order"]], "Master and Mirror": [[322, "master-and-mirror"]], "Local Complete": [[322, "local-complete"]], "Natural ID Trait": [[322, "natural-id-trait"]], "Groot: Persistent Graph Store": [[323, "groot-persistent-graph-store"]], "Known Limitation": [[323, "known-limitation"]], "Deploy Groot": [[323, "deploy-groot"]], "Install from ArtifactHub": [[323, "install-from-artifacthub"]], "Installing from a local directory": [[323, "installing-from-a-local-directory"]], "Common Configurations": [[323, "common-configurations"]], "Connecting to Groot": [[323, "connecting-to-groot"]], "Connection": [[323, "connection"]], "Building and Modifying Graph Models": [[323, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[323, "using-built-in-datasets"]], "Customizing Models and Datasets": [[323, "customizing-models-and-datasets"]], "Querying Data": [[323, "querying-data"]], "Python": [[323, "python"], [323, "id1"]], "Java": [[323, "java"], [323, "id2"]], "Node.js": [[323, "node-js"]], "Data Import": [[323, "data-import"]], "Offline Import": [[323, "offline-import"]], "Prerequisite": [[323, "prerequisite"]], "Data Format": [[323, "data-format"]], "Loading Process": [[323, "loading-process"]], "Build: Building a partitioned graph": [[323, "build-building-a-partitioned-graph"]], "2. Loading graph partitions": [[323, "loading-graph-partitions"]], "3. Commit to store service": [[323, "commit-to-store-service"]], "Realtime Write": [[323, "realtime-write"]], "Uninstalling and Restarting": [[323, "uninstalling-and-restarting"]], "Uninstall Groot": [[323, "uninstall-groot"]], "Restart Groot": [[323, "restart-groot"]], "Destroy Groot": [[323, "destroy-groot"]], "Developing Guide": [[323, "developing-guide"]], "Build image": [[323, "build-image"]], "Persistence": [[323, "persistence"]], "Troubleshooting": [[323, "troubleshooting"]], "Viewing logs": [[323, "viewing-logs"]], "Configuring logs": [[323, "configuring-logs"]], "In-memory immutable graphs on Vineyard": [[324, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[324, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[324, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[324, "using-loaded-graphs"]], "Applications and algorithms": [[325, "applications-and-algorithms"]], "Bind application to graph": [[325, "bind-application-to-graph"]], "Built-in algorithms": [[325, "built-in-algorithms"]], "Scaling and repartitioning": [[326, "scaling-and-repartitioning"]], "Fennel": [[326, "fennel"]], "XtraPuLP": [[326, "xtrapulp"]], "Hybrid partitioning": [[326, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[327, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[327, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[327, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[327, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[328, "user-guide-and-examples-of-gle"]], "Error Codes": [[329, "error-codes"]], "Command-line Utility gsctl": [[330, "command-line-utility-gsctl"]], "Install/Update gsctl": [[330, "install-update-gsctl"]], "Commands": [[330, "commands"]], "Utility Scripts": [[330, "utility-scripts"]], "Client/Server Mode": [[330, "client-server-mode"]], "How to Find logs": [[331, "how-to-find-logs"]], "Find logs in k8s": [[331, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[331, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[331, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[331, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[331, "find-logs-for-groot"]], "Monitoring": [[332, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[333, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[333, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[333, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[333, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[333, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[333, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[333, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[333, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[333, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[333, "id7"]], "\u90e8\u7f72": [[334, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[334, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[334, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[334, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[335, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[335, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[335, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[335, "python-wheels"]], "Linux": [[335, "linux"]], "macOS": [[335, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[335, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[336, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[337, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[337, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[337, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[337, "id6"]], "\u56fe\u5206\u6790": [[337, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[337, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[337, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[338, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[338, "id2"]], "\u6295\u5f71": [[338, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[338, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[338, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[339, "graphscope"]], "\u76ee\u5f55": [[339, null], [344, null]], "API \u53c2\u8003": [[339, null]], "\u7d22\u5f15": [[339, "id1"]], "\u5b89\u88c5": [[340, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[340, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[340, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[341, "id1"]], "Apache TinkerPop": [[341, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[341, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[341, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[341, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[341, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[341, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[341, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[341, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[341, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[341, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[341, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[341, "id13"]], "\u5df2\u77e5\u9650\u5236": [[341, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[342, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[342, "id2"]], "\u6570\u636e\u6a21\u578b": [[342, "id3"]], "\u7f16\u7801\u5668": [[342, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[342, "id5"]], "\u91c7\u6837": [[342, "id6"]], "\u56fe\u6570\u636e\u6d41": [[342, "id7"]], "\u6a21\u578b": [[342, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[342, "id9"]], "\u8f7d\u56fe": [[343, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[343, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[343, "id4"]], "Build Vertex": [[343, "build-vertex"]], "vertices": [[343, "vertices"]], "properties": [[343, "properties"], [343, "id7"]], "vid_field": [[343, "vid-field"]], "Build Edge": [[343, "build-edge"]], "edges": [[343, "edges"]], "label": [[343, "id6"]], "src_label and dst_label": [[343, "src-label-and-dst-label"]], "src_field and dst_field": [[343, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[343, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[343, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[343, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[343, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[343, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[343, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[343, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[343, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[343, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[343, "numpy"]], "Loader \u7684\u53d8\u79cd": [[343, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[344, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "cdlp()": [[0, "id0"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id1"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lcc()": [[0, "id2"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id3"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id4"]], "wcc()": [[0, "id5"]], "gs::appbase (c++ class)": [[100, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[100, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[100, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[100, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[100, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[100, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[100, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[100, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[100, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[100, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[100, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[100, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[100, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[100, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[100, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[100, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[100, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[100, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [100, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[100, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[100, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[100, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[100, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[100, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [100, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [100, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[100, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[100, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[100, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [100, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [100, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[100, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[100, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[100, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [100, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [100, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [100, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[100, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[100, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[100, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[100, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[100, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[100, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[100, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[100, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[100, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[100, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[100, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[100, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[100, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[100, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[100, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[100, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[100, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[100, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[100, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [100, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[100, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[100, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[100, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[100, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[100, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[100, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[100, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[100, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv"]], "gs::ctxwrapperbuilder (c++ struct)": [[100, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[100, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[100, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[100, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[100, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[100, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[100, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[100, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[100, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[100, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[100, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[100, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[100, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[100, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[100, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[100, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[100, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[100, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[100, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[100, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[100, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[100, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[100, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[100, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[100, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[100, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[100, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[100, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[100, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[100, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[100, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[100, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [100, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[100, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[100, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[100, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[100, "_CPPv4N2gs14DispatchResult9graph_defEv"], [100, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[100, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[100, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[100, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [100, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[100, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[100, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[100, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[100, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[100, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[100, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[100, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[100, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[100, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[100, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[100, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[100, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[100, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[100, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[100, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[100, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[100, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[100, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[100, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[100, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[100, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[100, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[100, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[100, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[100, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [100, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[100, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[100, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[100, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[100, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[100, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[100, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[100, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[100, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[100, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [100, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[100, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[100, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[100, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[100, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[100, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[100, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[100, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[100, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[100, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[100, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[100, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[100, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[100, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[100, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[100, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[100, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[100, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[100, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[100, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[100, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[100, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[100, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[100, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[100, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[100, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[100, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[100, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[100, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[100, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[100, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[100, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[100, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[100, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[100, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[100, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[100, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[100, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[100, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[100, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[100, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[100, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[100, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[100, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[100, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[100, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [100, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[100, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[100, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[100, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[100, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[100, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[100, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[100, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[100, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[100, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[100, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[100, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[100, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[100, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[100, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[100, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[100, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[100, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[100, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[100, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[100, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[100, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[100, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[100, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[100, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[100, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[100, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[100, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[100, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[100, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [100, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[100, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [100, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[100, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[100, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[100, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[100, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[100, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[100, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[100, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[100, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[100, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[101, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[101, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[101, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[101, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[101, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[101, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[101, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[101, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[101, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[101, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[101, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[101, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[101, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[101, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[101, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[101, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[101, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[101, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[101, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[101, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[101, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[101, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[101, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[101, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[101, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[101, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[101, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[101, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[101, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[101, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[101, "graphscope.louvain"]], "lpa() (in module graphscope)": [[101, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[101, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[101, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[101, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[101, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[101, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[101, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[101, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[101, "graphscope.sssp"]], "triangles() (in module graphscope)": [[101, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[101, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[101, "graphscope.voterank"]], "wcc() (in module graphscope)": [[101, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[102, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[102, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[102, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[102, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[102, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[102, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[102, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[102, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[102, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[102, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[102, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[102, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[102, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[107, "graphscope.Vertex"]], "declare() (in module graphscope)": [[108, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[109, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[110, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[111, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[112, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[113, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[114, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[115, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[116, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[117, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[118, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[119, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[120, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[121, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[122, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[123, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[124, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[125, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[126, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[127, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[128, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[129, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[130, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[131, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[132, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[133, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[134, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[135, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[136, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[137, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[138, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[139, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[140, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[141, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[142, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[143, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[144, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[145, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[146, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[147, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[148, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[149, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[150, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[151, "graphscope.g"]], "get_default_session() (in module graphscope)": [[152, "graphscope.get_default_session"]], "graphlearn() (in module graphscope)": [[153, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[154, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[155, "graphscope.has_default_session"]], "session (in module graphscope)": [[156, "graphscope.session"]], "set_option() (in module graphscope)": [[157, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[172, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[172, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[172, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[172, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[172, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.add_column"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[172, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.add_edges"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[172, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.add_vertices"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[172, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "archive() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.archive"]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.consolidate_columns"]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[172, "graphscope.framework.graph.GraphDAGNode.consolidate_columns"]], "detach() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[172, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[172, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[172, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.project"]], "project() (graphscope.framework.graph.graphdagnode method)": [[172, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[172, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[172, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[172, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[172, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[172, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[173, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[173, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[173, "graphscope.interactive.query.InteractiveQuery.close"]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[173, "graphscope.interactive.query.InteractiveQuery.cypher_driver"]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[173, "graphscope.interactive.query.InteractiveQuery.cypher_url"]], "execute() (graphscope.interactive.query.interactivequery method)": [[173, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[173, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[173, "graphscope.interactive.query.InteractiveQuery.gremlin_client"]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[173, "graphscope.interactive.query.InteractiveQuery.gremlin_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[173, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[173, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[173, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[173, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[173, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[173, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[174, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[174, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[174, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[174, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[174, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[175, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[176, "module-graphscope.nx.classes.function"]], "module": [[176, "module-graphscope.nx.classes.function"], [309, "module-graphscope.nx.generators.atlas"], [309, "module-graphscope.nx.generators.classic"], [309, "module-graphscope.nx.generators.community"], [309, "module-graphscope.nx.generators.degree_seq"], [309, "module-graphscope.nx.generators.directed"], [309, "module-graphscope.nx.generators.duplication"], [309, "module-graphscope.nx.generators.ego"], [309, "module-graphscope.nx.generators.expanders"], [309, "module-graphscope.nx.generators.geometric"], [309, "module-graphscope.nx.generators.harary_graph"], [309, "module-graphscope.nx.generators.intersection"], [309, "module-graphscope.nx.generators.joint_degree_seq"], [309, "module-graphscope.nx.generators.mycielski"], [309, "module-graphscope.nx.generators.nonisomorphic_trees"], [309, "module-graphscope.nx.generators.small"], [309, "module-graphscope.nx.generators.social"], [309, "module-graphscope.nx.generators.spectral_graph_forge"], [309, "module-graphscope.nx.generators.sudoku"], [309, "module-graphscope.nx.generators.trees"], [309, "module-graphscope.nx.generators.triads"], [309, "module-networkx.generators.internet_as_graphs"], [309, "module-networkx.generators.stochastic"], [314, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[177, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[178, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[179, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[180, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[181, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[182, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[183, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[184, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[185, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[186, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[187, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[188, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[189, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[190, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[191, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[192, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[193, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[194, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[195, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[196, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[197, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[198, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[199, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[200, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[201, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[202, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[203, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[204, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[205, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[206, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[207, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[208, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[209, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[210, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[211, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[212, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[213, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[214, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[215, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[216, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[217, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[218, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[219, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[220, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[221, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[222, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[223, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[224, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[225, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[226, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[227, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[228, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[229, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[230, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[231, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[232, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[233, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[234, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[235, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[236, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[237, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[238, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[239, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[240, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[241, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[242, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[243, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[244, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[245, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[246, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[247, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[248, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[249, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[250, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[251, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[252, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[253, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[254, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[255, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[256, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[257, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[258, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[259, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[260, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[261, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[262, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[263, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[264, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[265, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[266, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[267, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[268, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[269, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[270, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[271, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[272, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[273, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[274, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[275, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[276, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[277, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[278, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[279, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[280, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[281, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[282, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[283, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[284, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[285, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[286, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[287, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[288, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[289, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[290, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[291, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[292, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[293, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[294, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[295, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[296, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[297, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[298, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[299, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[300, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[301, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[302, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[303, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[304, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[305, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[306, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[307, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[308, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[309, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[309, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[309, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[309, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[309, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[309, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[309, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[309, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[309, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[309, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[309, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[309, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[309, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[309, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[309, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[309, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[309, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[309, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[309, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[309, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[309, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[309, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[310, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[310, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[310, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[310, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[310, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[310, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[310, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[310, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[310, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[310, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[310, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[310, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[310, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[310, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[310, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[310, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[310, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[310, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[310, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[310, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[312, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[312, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[313, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[313, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[314, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[314, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[317, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[317, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[317, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[317, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[317, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[317, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[317, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[317, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[317, "graphscope.Session.engine_config"]], "g() (graphscope.session method)": [[317, "graphscope.Session.g"]], "get_config() (graphscope.session method)": [[317, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[317, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[317, "graphscope.Session.graphlearn"]], "info (graphscope.session property)": [[317, "graphscope.Session.info"]], "interactive() (graphscope.session method)": [[317, "graphscope.Session.interactive"]], "load_from() (graphscope.session method)": [[317, "graphscope.Session.load_from"]], "load_from_gar() (graphscope.session method)": [[317, "graphscope.Session.load_from_gar"]], "restore_from_pvc() (graphscope.session method)": [[317, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[317, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[317, "graphscope.Session.store_to_pvc"]]}})