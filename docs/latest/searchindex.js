Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_submit_pr", "development/how_to_test", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "loading_graph", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "loading_graph.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetowrkX APIs", "Tutorial: Graph Operations with NetowrkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of GAE", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to Submit Pull-requests", "How to Test", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GIE for Cypher", "Cypher Support", "Neo4j Ecosystem", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 40, 42, 48, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 92, 110, 111, 112, 115, 123, 125, 126, 133, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 160, 161, 165, 166, 167, 170, 171, 173, 175, 176, 181, 184, 189, 190, 191, 192, 193, 194, 197, 200, 203, 206, 208, 209, 210, 212, 213, 215, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 297, 298, 300, 303, 304, 305, 306, 307, 308, 312, 314], "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 42, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 65, 67, 73, 77, 80, 81, 82, 83, 84, 91, 92, 93, 94, 95, 96, 99, 101, 102, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 120, 125, 132, 134, 140, 146, 149, 150, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 292, 295, 296, 297, 298, 307, 308, 314, 318, 319, 320, 322, 323, 324], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 34, 36, 37, 38, 40, 42, 59, 61, 73, 75, 77, 78, 80, 84, 86, 89, 94, 153, 291, 296, 304, 307, 308, 314], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 34, 38, 40, 42, 45, 48, 49, 50, 55, 56, 59, 63, 67, 68, 70, 72, 73, 74, 75, 76, 78, 82, 86, 94, 110, 134, 139, 147, 153, 154, 155, 291, 297, 298, 300, 304, 305, 306, 307, 317, 318], "gae": [0, 3, 10, 12, 14, 15, 28, 32, 42, 47, 61, 62, 71, 74, 78, 79, 80, 86, 110, 154, 315, 316], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 41, 42, 44, 48, 50, 52, 56, 57, 58, 59, 61, 62, 64, 67, 68, 69, 70, 72, 73, 75, 79, 80, 82, 83, 86, 153, 154, 155, 156, 291, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 311, 314, 315, 317, 318, 319, 322, 324, 325], "offer": [0, 2, 9, 12, 20, 34, 47, 50, 53, 58, 62, 63, 71, 73, 77, 78, 303], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 42, 45, 49, 64, 70, 72, 73, 74, 76, 140, 147, 194, 238, 240, 291, 303, 308], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 40, 42, 45, 48, 49, 50, 51, 52, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 84, 86, 90, 93, 106, 115, 117, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 170, 195, 197, 210, 211, 212, 220, 222, 239, 240, 241, 248, 250, 251, 269, 281, 283, 285, 289, 290, 291, 293, 294, 295, 297, 298, 300, 302, 303, 304, 305, 306, 308, 311], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 42, 58, 59, 63, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 81, 150, 156, 291, 298, 303, 304, 307, 308, 312], "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 40, 42, 47, 49, 55, 57, 59, 62, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 139, 141, 142, 143, 144, 145, 146, 148, 151, 154, 291, 297, 298, 300, 303, 304, 307, 318, 322], "analyz": [0, 7, 13, 19, 27, 58, 71, 72, 74, 75, 77, 145, 303], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 42, 47, 49, 50, 54, 58, 59, 60, 61, 62, 63, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 89, 91, 97, 98, 103, 108, 109, 113, 121, 122, 139, 141, 142, 143, 144, 145, 149, 153, 163, 169, 185, 186, 201, 218, 234, 253, 283, 291, 293, 294, 297, 298, 300, 303, 305, 306, 308, 314, 315, 317, 318, 323], "least": [0, 6, 37, 59, 156, 190, 212], "effort": [0, 34, 79, 303], "cover": [0, 6, 15, 40, 66], "wide": [0, 11, 12, 24, 51, 61, 62, 66, 71, 72, 74, 75, 76, 78, 143, 302, 308], "rang": [0, 13, 18, 55, 57, 59, 62, 65, 66, 68, 69, 71, 72, 75, 78, 81, 83, 84, 97, 98, 108, 109, 113, 121, 122, 139, 144, 148, 196, 198, 200, 203, 206, 218, 224, 238, 239, 240, 241, 269, 291, 296, 303, 314, 317, 318, 322, 323], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 42, 48, 49, 52, 58, 60, 62, 63, 73, 74, 75, 76, 79, 81, 82, 84, 94, 143, 222, 246, 302, 312], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 62, 71, 72, 73, 74, 77, 81, 82, 86, 141, 149, 242, 283, 288, 292, 302], "detect": [0, 6, 8, 9, 62, 71, 72, 74, 75, 77, 78, 82, 210, 214, 215, 216], "etc": [0, 6, 7, 15, 29, 45, 49, 55, 63, 66, 70, 72, 73, 76, 79, 83, 139, 142, 143, 144, 147, 158, 170, 179, 184, 185, 291, 293, 304], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 42, 45, 48, 49, 50, 53, 55, 57, 58, 59, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 86, 89, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 156, 165, 166, 167, 180, 181, 186, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 209, 210, 213, 214, 215, 216, 218, 219, 220, 222, 223, 224, 225, 226, 230, 234, 236, 237, 238, 239, 240, 241, 242, 246, 248, 250, 252, 253, 256, 274, 283, 284, 285, 286, 287, 291, 294, 297, 298, 300, 302, 303, 304, 305, 307, 312, 324], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 45, 49, 52, 53, 54, 55, 57, 60, 62, 63, 66, 70, 71, 75, 78, 81, 82, 86, 139, 141, 143, 144, 145, 147, 150, 151, 153, 154, 156, 232, 233, 237, 238, 240, 242, 243, 244, 285, 286, 294, 314], "pie": [0, 1, 3, 8, 12, 34, 59, 61, 62, 74, 86, 89, 296, 308, 318, 320], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 61, 62, 66, 71, 73, 74, 76, 78, 79, 86, 139, 144, 145, 303, 304, 308], "model": [0, 1, 3, 8, 9, 18, 45, 49, 54, 55, 59, 61, 62, 65, 66, 67, 70, 71, 72, 74, 75, 78, 86, 141, 143, 145, 146, 210, 214, 218, 220, 222, 224, 230, 232, 233, 238, 239, 240, 241, 242, 246, 247, 281, 288, 298, 302, 308, 318], "highli": [0, 4, 12, 34, 54, 59, 62, 73, 74, 302], "optim": [0, 9, 12, 14, 34, 49, 58, 59, 60, 62, 63, 65, 68, 69, 71, 72, 73, 74, 75, 76, 77, 79, 82, 139, 151, 153, 303, 305, 318], "best": [0, 16, 71, 73, 75, 78, 79, 82, 291, 314], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 40, 47, 49, 57, 59, 60, 61, 63, 71, 73, 74, 76, 77, 78, 83, 141, 145, 147, 153, 248, 253, 283, 295, 297, 300, 304, 306, 308], "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 45, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 68, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 86, 90, 92, 116, 117, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 156, 165, 166, 169, 173, 194, 197, 210, 211, 212, 219, 220, 222, 238, 239, 240, 241, 248, 252, 253, 260, 262, 264, 269, 272, 277, 278, 283, 285, 291, 294, 295, 297, 298, 300, 302, 303, 304, 305, 306, 308, 311, 312, 314], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 40, 42, 45, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 91, 92, 116, 117, 126, 131, 139, 140, 141, 142, 143, 145, 147, 150, 152, 153, 154, 155, 156, 175, 176, 185, 197, 200, 204, 210, 211, 212, 218, 220, 224, 225, 227, 229, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 248, 252, 256, 269, 274, 283, 285, 288, 289, 291, 293, 294, 296, 298, 302, 303, 306, 307, 308, 311, 312, 314, 318, 324], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 40, 42, 45, 49, 53, 57, 59, 68, 71, 72, 74, 76, 78, 79, 80, 91, 139, 142, 151, 196, 283, 297, 303, 304, 314], "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 55, 58, 63, 70, 72, 73, 74, 75, 78, 82, 84, 139, 142, 143, 145, 153, 156, 213, 222, 223, 230, 231, 234, 248, 249, 285, 289, 291, 303, 304, 305, 307, 318, 322], "box": [0, 73, 284], "manner": [0, 2, 17, 18, 32, 36, 72, 74, 75], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 40, 42, 48, 49, 50, 53, 55, 57, 58, 59, 62, 64, 65, 68, 69, 70, 76, 79, 82, 140, 141, 145, 148, 150, 151, 153, 156, 210, 222, 237, 238, 240, 249, 269, 291, 294, 302, 303, 304, 318], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 81, 82, 83, 84, 85, 86, 87, 90, 92, 116, 126, 128, 132, 133, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 164, 166, 168, 170, 171, 172, 173, 174, 175, 176, 185, 186, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 311, 312, 314, 317, 318, 322, 323, 324], "full": [0, 4, 12, 16, 17, 18, 22, 34, 55, 62, 63, 66, 71, 76, 78, 82, 139, 142, 143, 145, 201, 304, 308, 314, 323], "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 48, 53, 55, 57, 59, 62, 68, 70, 73, 76, 80, 82, 84, 103, 104, 111, 112, 126, 140, 143, 145, 153, 156, 165, 167, 170, 177, 179, 185, 186, 189, 190, 194, 196, 197, 215, 218, 220, 222, 223, 224, 225, 226, 238, 242, 245, 248, 249, 254, 256, 269, 285, 291, 292, 294, 298, 304, 307, 312, 319, 322], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 42, 45, 48, 49, 51, 54, 55, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 86, 92, 139, 140, 141, 143, 144, 145, 147, 148, 150, 153, 154, 156, 291, 294, 297, 298, 300, 302, 304, 305, 307, 308, 317], "bf": [0, 15, 17, 34, 79, 82, 314], "df": [0, 34], "hit": [0, 34, 36, 82, 83, 156, 292, 297, 314], "lpa": [0, 7, 34, 72, 82, 314], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 41, 72, 79, 82, 83, 90, 297, 298, 306, 307, 314], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 45, 48, 49, 50, 51, 53, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 100, 113, 116, 131, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 153, 156, 173, 187, 188, 189, 190, 191, 192, 197, 200, 202, 203, 210, 211, 212, 214, 215, 218, 219, 220, 222, 224, 230, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 250, 252, 269, 271, 274, 279, 283, 285, 286, 288, 289, 290, 291, 293, 295, 297, 298, 299, 300, 302, 303, 304, 308, 311, 312, 314], "find": [0, 4, 8, 9, 22, 31, 32, 36, 37, 40, 42, 45, 47, 50, 55, 57, 59, 68, 70, 72, 74, 75, 79, 81, 90, 138, 156, 161, 180, 181, 210, 298, 303, 304], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 31, 37, 38, 42, 44, 45, 49, 59, 74, 76], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 42, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 90, 110, 111, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 170, 189, 191, 196, 198, 200, 203, 210, 213, 217, 218, 219, 220, 222, 225, 230, 231, 233, 234, 238, 239, 240, 241, 242, 243, 250, 257, 266, 278, 283, 285, 286, 290, 291, 293, 294, 297, 298, 303, 305, 311, 314, 318, 319, 322, 324], "given": [0, 7, 9, 13, 14, 20, 34, 45, 48, 49, 50, 57, 58, 59, 66, 70, 72, 75, 76, 78, 82, 143, 145, 148, 151, 153, 155, 190, 197, 208, 220, 221, 222, 223, 224, 225, 226, 234, 242, 243, 244, 248, 249, 250, 251, 255, 283, 286, 287, 290, 291, 297, 298, 302, 303, 306, 307], "weight": [0, 7, 19, 20, 33, 41, 57, 59, 66, 72, 74, 79, 82, 111, 139, 141, 142, 143, 144, 145, 148, 151, 153, 156, 158, 159, 160, 164, 175, 176, 218, 230, 234, 238, 241, 281, 289, 290, 291, 293, 298, 323], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 42, 49, 51, 53, 59, 65, 66, 71, 75, 139, 141, 147, 148, 149, 220, 302, 303], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 45, 49, 50, 51, 57, 58, 59, 62, 66, 71, 72, 74, 75, 76, 81, 82, 83, 91, 97, 98, 107, 113, 115, 117, 118, 121, 122, 139, 142, 143, 145, 147, 148, 150, 153, 154, 156, 220, 222, 225, 244, 291, 304, 306, 314, 318], "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 49, 50, 57, 59, 62, 63, 66, 72, 73, 74, 75, 76, 77, 78, 81, 82, 84, 143, 144, 147, 149, 156, 237, 240, 241, 245, 250, 259, 282, 283, 295, 298, 304, 305, 314], "minimum": [0, 6, 42, 50, 53, 57, 59, 82, 210, 298], "distanc": [0, 7, 15, 17, 18, 72, 82, 156, 191, 230, 234, 238, 239, 240, 241, 242, 260, 272, 314], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 48, 49, 51, 55, 57, 58, 59, 70, 71, 72, 74, 75, 78, 80, 81, 83, 92, 99, 143, 153, 154, 155, 156, 167, 171, 186, 210, 215, 217, 220, 222, 238, 240, 242, 291, 294, 297, 303, 311], "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 41, 48, 53, 55, 57, 61, 62, 63, 66, 71, 72, 73, 74, 75, 76, 79, 81, 82, 83, 84, 89, 110, 140, 141, 142, 143, 144, 145, 148, 151, 153, 155, 156, 230, 235, 252, 253, 269, 294, 296, 300, 302, 304, 305, 308, 314, 319], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 42, 45, 49, 55, 57, 59, 62, 63, 66, 68, 71, 73, 74, 75, 76, 77, 78, 82, 84, 139, 141, 143, 145, 149, 152, 153, 154, 156, 160, 191, 193, 197, 200, 210, 219, 225, 231, 240, 241, 283, 291, 293, 294, 297, 298, 302, 303, 304, 307], "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 41, 48, 49, 51, 53, 55, 57, 63, 66, 71, 72, 74, 75, 76, 81, 82, 83, 84, 112, 140, 141, 142, 143, 144, 145, 148, 151, 153, 214, 225, 235, 237, 252, 253, 264, 266, 277, 278, 284, 297, 298, 300, 302, 303, 304, 305, 314, 318, 319], "all_pairs_shortest_path_length": [0, 34], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 30, 33, 34, 37, 40, 42, 48, 50, 51, 53, 55, 57, 59, 63, 64, 66, 74, 75, 76, 78, 82, 101, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 156, 189, 190, 201, 210, 211, 212, 213, 214, 215, 216, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 290, 291, 304, 308, 322], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 37, 48, 49, 55, 58, 59, 63, 66, 70, 71, 74, 78, 82, 139, 140, 141, 142, 145, 148, 153, 283, 291], "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 42, 45, 57, 61, 66, 71, 73, 74, 78, 79, 82, 84, 142, 156, 178, 179, 185, 237, 291, 300, 308], "dissimilar": 0, "measur": [0, 6, 20, 49, 74, 76, 82, 140, 156, 234, 235, 268], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 49, 53, 57, 59, 63, 70, 74, 75, 79, 140, 141, 145, 146, 149, 151, 153, 155, 156, 184, 185, 206, 214, 215, 220, 222, 248, 249, 251, 284, 285, 291, 298, 302, 303, 304, 305, 306], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 41, 50, 60, 72, 74, 75, 76, 81, 82, 83, 84, 101, 115, 129, 130, 131, 142, 145, 153, 154, 238, 253, 283, 288, 291, 294, 297, 298, 300, 302, 304, 305, 312, 318, 319, 322], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 40, 48, 49, 55, 57, 58, 59, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 130, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 153, 156, 165, 167, 185, 186, 191, 195, 197, 202, 208, 210, 212, 213, 214, 216, 217, 219, 220, 222, 223, 225, 230, 233, 235, 238, 239, 240, 241, 242, 245, 246, 248, 250, 251, 256, 259, 271, 276, 281, 285, 287, 288, 289, 291, 297, 298, 300, 302, 303, 304, 305, 308, 312], "attribute_assort": [0, 34], "nearest": [0, 82], "neighbor": [0, 6, 9, 13, 14, 17, 18, 41, 57, 59, 63, 66, 74, 75, 76, 82, 84, 139, 140, 142, 143, 145, 147, 148, 149, 151, 152, 156, 161, 162, 181, 233, 234, 248, 251, 284, 291, 300, 303, 314], "return": [0, 6, 9, 15, 18, 20, 41, 49, 51, 52, 53, 57, 58, 59, 66, 68, 72, 75, 82, 83, 84, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 132, 133, 134, 138, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 297, 298, 300, 303, 314, 323], "success": [0, 13, 22, 86, 141, 225, 256], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 42, 45, 48, 50, 51, 57, 59, 63, 65, 66, 68, 69, 70, 72, 79, 81, 82, 83, 84, 98, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 156, 158, 159, 160, 162, 166, 167, 170, 171, 175, 185, 189, 190, 192, 193, 194, 195, 197, 200, 202, 203, 205, 206, 207, 209, 210, 213, 214, 215, 216, 218, 219, 220, 222, 223, 226, 229, 231, 238, 239, 240, 241, 242, 248, 249, 253, 256, 269, 274, 283, 285, 286, 291, 293, 294, 298, 300, 303, 304, 305, 306, 312, 314, 316, 317, 318, 319, 321, 322, 323, 324], "1": [0, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 45, 48, 49, 50, 51, 55, 57, 59, 63, 65, 66, 68, 69, 70, 72, 75, 76, 79, 82, 83, 139, 142, 144, 145, 146, 148, 153, 154, 155, 156, 158, 159, 160, 162, 166, 167, 170, 175, 176, 179, 184, 185, 189, 191, 192, 193, 194, 195, 197, 201, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 293, 294, 298, 303, 304, 305, 306, 312, 314, 318, 319, 321, 322, 323, 324], "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 48, 49, 50, 51, 57, 59, 63, 65, 66, 68, 69, 70, 72, 75, 76, 79, 82, 83, 139, 142, 143, 144, 145, 146, 148, 156, 158, 159, 160, 162, 170, 171, 175, 176, 179, 184, 185, 192, 193, 194, 197, 202, 203, 208, 210, 212, 214, 216, 217, 218, 220, 221, 222, 224, 225, 226, 230, 231, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 258, 260, 262, 263, 264, 268, 269, 271, 273, 274, 276, 283, 284, 285, 286, 291, 293, 294, 298, 303, 305, 306, 314, 315, 316, 318, 319, 321, 322, 323, 324], "average_degree_connect": [0, 82, 314], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 42, 49, 53, 57, 58, 59, 66, 72, 76, 81, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 104, 106, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 131, 138, 140, 141, 143, 145, 148, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 167, 169, 170, 171, 173, 174, 175, 176, 180, 181, 185, 186, 189, 191, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 298, 303, 304], "str": [0, 20, 68, 69, 70, 82, 83, 84, 90, 91, 97, 98, 99, 101, 108, 109, 110, 113, 115, 116, 117, 118, 121, 122, 151, 153, 154, 169, 171, 285, 291, 293, 297, 298, 304, 319, 324], "target": [0, 6, 17, 22, 24, 50, 63, 64, 71, 72, 76, 78, 82, 84, 145, 147, 153, 156, 227, 229, 248, 251, 283, 304, 314], "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 45, 49, 50, 55, 57, 59, 62, 66, 71, 72, 73, 74, 75, 76, 79, 81, 82, 83, 105, 111, 139, 141, 143, 145, 146, 147, 153, 156, 227, 266, 281, 291, 303, 304, 308, 314, 323], "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 41, 45, 51, 53, 55, 58, 59, 66, 72, 75, 76, 81, 82, 83, 84, 139, 142, 143, 144, 145, 148, 151, 153, 154, 155, 156, 162, 185, 210, 213, 218, 220, 224, 230, 233, 238, 241, 248, 251, 253, 285, 291, 297, 298, 303, 304, 314, 318, 322, 323], "sum": [0, 20, 53, 55, 74, 82, 84, 156, 210, 215, 218, 220, 221, 222, 231, 238, 241, 242, 249, 250, 289, 291, 322], "fraction": [0, 82, 156, 210], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 49, 51, 57, 59, 66, 70, 75, 76, 82, 84, 89, 145, 149, 151, 200, 238, 240, 283, 291, 295, 304, 314, 319, 324], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 47, 48, 49, 51, 52, 54, 57, 58, 59, 60, 63, 66, 70, 72, 74, 75, 76, 78, 83, 86, 140, 141, 143, 144, 145, 150, 151, 153, 156, 186, 200, 217, 256, 291, 303, 304], "betweenness_centr": [0, 34, 156], "normal": [0, 6, 27, 42, 59, 82, 145, 153, 156, 213, 303], "endpoint": [0, 9, 10, 27, 28, 29, 48, 50, 52, 57, 58, 68, 70, 72, 81, 145, 154, 156, 298, 300, 304, 314, 322, 324], "bool": [0, 6, 14, 15, 20, 41, 53, 70, 81, 82, 84, 128, 136, 153, 156, 163, 173, 175, 176, 185, 214, 224, 230, 234, 250, 291, 293, 298, 303, 324], "whether": [0, 37, 48, 49, 57, 59, 70, 71, 75, 81, 82, 140, 141, 145, 153, 213, 215, 218, 238, 249, 250, 291, 303, 304, 305], "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 48, 49, 51, 55, 57, 59, 70, 71, 72, 76, 81, 82, 90, 93, 106, 115, 149, 150, 153, 155, 156, 186, 210, 238, 239, 240, 241, 291, 293, 298, 300, 303, 304, 305, 306], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 45, 47, 49, 50, 53, 54, 57, 59, 62, 63, 64, 65, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 141, 142, 145, 147, 153, 156, 171, 210, 218, 224, 234, 283, 290, 291, 302, 303, 304, 311, 312], "count": [0, 6, 33, 49, 51, 53, 55, 58, 59, 66, 72, 74, 81, 82, 143, 144, 148, 149, 152, 156, 166, 224, 291, 304, 318, 322], "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 40, 42, 45, 48, 49, 50, 51, 53, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 86, 90, 93, 94, 95, 96, 97, 98, 100, 101, 103, 106, 108, 109, 110, 111, 112, 113, 116, 117, 118, 121, 122, 123, 125, 126, 134, 139, 140, 141, 143, 144, 145, 147, 148, 150, 151, 153, 155, 156, 167, 168, 173, 178, 179, 185, 186, 188, 189, 190, 192, 195, 196, 197, 198, 200, 201, 203, 205, 206, 209, 211, 212, 220, 222, 223, 224, 226, 227, 230, 231, 232, 233, 237, 238, 239, 240, 241, 242, 247, 248, 249, 250, 251, 252, 256, 258, 264, 269, 273, 276, 277, 281, 283, 284, 285, 286, 288, 289, 291, 294, 295, 297, 298, 300, 302, 303, 304, 305, 306, 307, 308, 311], "travers": [0, 6, 13, 15, 17, 49, 53, 55, 58, 63, 71, 72, 73, 74, 139, 142, 145, 147, 151, 154, 285, 291, 300, 303, 304, 305, 314, 322], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 37, 40, 42, 45, 48, 49, 51, 53, 55, 57, 58, 59, 62, 63, 69, 70, 72, 73, 74, 75, 76, 77, 78, 81, 82, 86, 132, 139, 140, 141, 145, 147, 149, 153, 154, 156, 160, 215, 219, 243, 244, 248, 251, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 272, 275, 277, 278, 283, 291, 298, 302, 303, 304, 305, 311, 312], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 47, 48, 52, 53, 57, 58, 66, 68, 70, 75, 77, 80, 81, 83, 139, 143, 145, 154, 155, 156, 191, 216, 220, 222, 223, 226, 242, 256, 285, 293, 298, 303, 304, 308], "root": [0, 4, 27, 32, 36, 42, 70, 73, 191, 193, 284, 285, 302], "explor": [0, 17, 45, 50, 57, 59, 71, 72, 75, 303], "present": [0, 2, 20, 27, 59, 66, 67, 68, 69, 71, 72, 74, 86, 156, 167, 210, 291, 302, 303], "prior": [0, 12, 34, 59, 62, 71], "move": [0, 4, 6, 73, 145, 248, 251], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 58, 59, 63, 66, 67, 70, 71, 76, 139, 140, 143, 145, 147, 149, 150, 151, 217, 285, 297, 300, 303, 304, 306], "level": [0, 6, 12, 38, 45, 49, 71, 73, 76, 82, 147, 201, 248, 249, 288, 303, 304], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 41, 55, 68, 70, 81, 82, 83, 84, 116, 140, 141, 142, 143, 144, 145, 148, 151, 152, 153, 155, 156, 184, 189, 191, 193, 196, 198, 200, 201, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 228, 229, 230, 232, 233, 236, 237, 238, 239, 240, 241, 242, 245, 246, 247, 252, 253, 254, 255, 286, 291, 293, 298, 300, 304, 314, 322, 324], "evalu": [0, 6, 14, 15, 16, 18, 37, 62, 72, 73, 76, 79, 81, 82, 83, 94, 117, 126, 128, 132, 134, 153, 298, 308, 322], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 42, 45, 48, 49, 55, 59, 62, 65, 68, 71, 72, 73, 74, 76, 78, 79, 81, 82, 84, 86, 139, 140, 141, 143, 146, 147, 148, 151, 153, 154, 156, 191, 210, 235, 237, 238, 242, 261, 266, 271, 283, 285, 289, 291, 294, 297, 298, 300, 302, 303, 304, 307, 308, 314], "known": [0, 6, 8, 9, 24, 32, 48, 51, 53, 59, 74, 75, 82, 173, 191, 194, 243, 244, 261, 285, 306], "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 42, 48, 51, 55, 58, 59, 62, 70, 77, 82, 83, 86, 132, 134, 140, 141, 143, 148, 151, 153, 189, 199, 204, 210, 213, 214, 215, 216, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 245, 246, 247, 248, 251, 256, 283, 286, 288, 291, 293, 297, 298, 302, 303, 304, 307], "max_round": [0, 82, 314], "10": [0, 13, 15, 16, 17, 20, 27, 31, 42, 44, 45, 49, 51, 52, 55, 57, 59, 65, 66, 68, 69, 72, 79, 82, 140, 141, 142, 144, 145, 151, 153, 156, 158, 159, 160, 194, 200, 210, 213, 215, 224, 225, 226, 227, 229, 233, 238, 242, 246, 262, 268, 273, 286, 291, 298, 304, 312, 314, 317, 318, 322], "maximum": [0, 48, 53, 57, 59, 74, 82, 142, 156, 210, 226, 241, 242, 243, 244, 249, 290], "round": [0, 9, 14, 17, 24, 82, 84, 208, 218], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 40, 42, 45, 48, 50, 51, 55, 57, 59, 65, 68, 70, 79, 81, 82, 83, 84, 101, 110, 132, 133, 136, 140, 141, 145, 152, 153, 155, 156, 158, 159, 160, 163, 185, 187, 188, 191, 193, 194, 196, 198, 200, 201, 203, 205, 206, 209, 210, 213, 214, 215, 216, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 283, 284, 286, 288, 289, 291, 293, 294, 298, 300, 304, 312, 324], "origin": [0, 4, 6, 9, 12, 13, 22, 49, 55, 57, 63, 68, 69, 76, 81, 83, 110, 139, 141, 153, 154, 210, 232, 238, 277, 285, 289, 291, 297, 298, 304, 305], "reciproc": [0, 156], "n": [0, 19, 20, 30, 33, 38, 49, 51, 52, 53, 57, 59, 62, 66, 72, 76, 79, 82, 83, 143, 145, 148, 150, 156, 166, 170, 171, 173, 177, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 210, 212, 213, 214, 219, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 252, 253, 256, 269, 284, 285, 286, 288, 291], "reachabl": [0, 156], "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 42, 45, 53, 54, 65, 66, 67, 71, 72, 74, 76, 78, 80, 82, 83, 84, 104, 107, 112, 115, 116, 134, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 177, 179, 181, 183, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 303, 305, 314, 317, 318, 323], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 34, 62, 71, 73, 74, 76, 78, 143, 149, 300, 303], "improv": [0, 6, 9, 17, 19, 23, 55, 73, 76, 77, 78, 307], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 40, 42, 45, 49, 50, 51, 55, 57, 59, 62, 63, 64, 65, 66, 70, 71, 73, 74, 75, 76, 77, 78, 81, 82, 83, 86, 139, 140, 143, 144, 145, 149, 150, 153, 156, 189, 230, 237, 238, 252, 253, 285, 291, 293, 298, 302, 303, 304, 307, 308, 311], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 42, 48, 49, 53, 57, 59, 61, 66, 70, 71, 74, 75, 77, 78, 82, 141, 143, 145, 152, 156, 166, 200, 208, 210, 212, 217, 219, 230, 232, 241, 298, 303, 304, 307, 308], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 40, 42, 45, 47, 48, 49, 53, 55, 57, 59, 63, 66, 70, 72, 75, 76, 78, 81, 82, 84, 90, 91, 131, 139, 140, 141, 142, 143, 145, 149, 153, 156, 165, 189, 190, 193, 194, 197, 206, 207, 210, 219, 220, 225, 227, 228, 229, 230, 231, 233, 248, 251, 259, 262, 266, 269, 275, 276, 277, 283, 285, 287, 291, 297, 298, 300, 302, 303, 304, 307, 318, 322], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 40, 42, 51, 71, 73, 74, 75, 81, 82, 156, 224, 238, 297, 303, 304], "ratio": [0, 13, 59, 283], "actor": [0, 59, 71, 268], "group": [0, 2, 42, 49, 70, 72, 74, 75, 81, 147, 153, 214, 215, 216, 218, 235, 263, 281, 302, 304, 322, 324], "who": [0, 11, 29, 59, 71, 75, 146, 151, 304], "closeness_centr": [0, 34], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 42, 44, 45, 47, 48, 50, 56, 57, 58, 59, 60, 61, 67, 68, 69, 71, 72, 74, 75, 76, 78, 80, 83, 86, 94, 140, 141, 145, 147, 298, 299, 303, 305, 307, 308, 318], "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 45, 55, 57, 59, 63, 65, 66, 69, 70, 71, 72, 74, 75, 76, 82, 83, 84, 131, 139, 141, 145, 149, 151, 153, 156, 198, 201, 208, 210, 230, 235, 248, 251, 259, 278, 288, 298, 303, 304, 306], "being": [0, 55, 66, 75, 153, 190, 220, 300, 303, 304, 305], "cliqu": [0, 6, 59, 71, 74, 211, 212, 216, 217, 219, 233], "complet": [0, 14, 31, 33, 34, 49, 55, 59, 70, 73, 139, 141, 145, 166, 191, 192, 194, 196, 197, 203, 208, 217, 248, 251, 275, 291, 304], "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 40, 42, 45, 48, 49, 50, 51, 52, 53, 55, 57, 59, 61, 62, 64, 66, 70, 71, 72, 74, 75, 76, 78, 82, 83, 86, 90, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 156, 166, 170, 173, 185, 191, 196, 201, 210, 220, 221, 222, 224, 230, 233, 248, 249, 251, 267, 271, 285, 291, 297, 298, 302, 303, 304, 306, 308, 312, 318], "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 41, 48, 49, 53, 55, 57, 63, 65, 66, 68, 69, 71, 72, 74, 75, 76, 78, 81, 82, 83, 84, 95, 96, 99, 104, 111, 115, 116, 134, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 158, 159, 160, 163, 166, 167, 169, 170, 171, 173, 175, 176, 179, 180, 182, 184, 185, 186, 190, 192, 193, 194, 195, 196, 197, 200, 202, 203, 204, 207, 208, 210, 212, 215, 216, 218, 220, 221, 222, 224, 226, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 281, 285, 288, 289, 290, 291, 292, 294, 297, 298, 300, 302, 304, 305, 306, 314, 318, 319, 323], "u": [0, 6, 14, 16, 18, 20, 37, 41, 42, 55, 59, 70, 72, 82, 145, 149, 151, 153, 156, 162, 185, 197, 210, 224, 230, 233, 238, 241, 253, 291, 303, 314, 324], "equal": [0, 10, 42, 53, 57, 59, 65, 69, 70, 72, 156, 208, 210, 241, 246, 284, 318], "degree_assortativity_coeffici": [0, 82, 314], "hold": [0, 10, 20, 57, 81, 82, 83, 84, 110, 118, 141, 153, 156, 291, 297], "numer": [0, 20, 71, 73, 74, 82, 83, 156, 291, 297, 303], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 41, 42, 48, 49, 51, 53, 63, 68, 70, 74, 76, 81, 82, 83, 84, 117, 126, 138, 139, 141, 142, 143, 144, 145, 148, 150, 151, 152, 153, 155, 156, 165, 185, 200, 210, 238, 239, 240, 241, 248, 250, 251, 283, 284, 285, 291, 293, 294, 297, 298, 300, 303, 304, 305, 314, 322, 323, 324], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 42, 48, 50, 51, 57, 59, 65, 70, 72, 78, 82, 83, 86, 138, 140, 141, 145, 146, 149, 150, 152, 153, 154, 155, 156, 161, 162, 164, 171, 175, 176, 185, 186, 191, 192, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 251, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 283, 286, 287, 289, 291, 293, 294, 297, 298, 300, 303, 304, 305, 311, 312], "fals": [0, 13, 15, 17, 18, 19, 20, 48, 70, 81, 82, 84, 132, 139, 140, 141, 145, 151, 153, 155, 156, 169, 173, 175, 176, 185, 187, 188, 213, 214, 215, 218, 224, 234, 249, 291, 294, 298, 304, 314, 323], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 40, 42, 45, 49, 50, 51, 53, 55, 56, 59, 63, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 86, 131, 139, 140, 141, 142, 143, 145, 148, 149, 150, 151, 153, 154, 156, 173, 175, 176, 179, 184, 185, 191, 206, 208, 210, 221, 225, 230, 238, 239, 240, 241, 242, 248, 251, 257, 258, 262, 263, 267, 273, 275, 278, 281, 283, 285, 289, 291, 295, 297, 298, 306, 308, 318, 319, 322], "adjac": [0, 10, 16, 20, 24, 57, 59, 76, 82, 142, 147, 156, 179, 212, 236, 254, 269, 283, 284, 291, 292, 303], "direct": [0, 9, 10, 15, 48, 59, 63, 66, 69, 70, 72, 73, 76, 81, 82, 102, 132, 139, 141, 145, 148, 151, 153, 156, 161, 166, 172, 187, 198, 211, 212, 213, 214, 215, 218, 222, 223, 225, 234, 235, 236, 237, 248, 249, 258, 285, 289, 291, 292, 294, 298, 302, 303, 305, 319, 323, 324], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 40, 59, 70, 71, 73, 78, 79, 86, 140, 143, 144, 145, 148, 149, 150, 151, 156, 185, 190, 197, 273, 278, 287, 291, 304, 308], "separ": [0, 6, 17, 30, 36, 48, 50, 59, 71, 78, 140, 141, 238, 293, 303, 304], "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 42, 48, 55, 57, 59, 62, 65, 68, 70, 71, 72, 73, 75, 81, 82, 86, 101, 139, 140, 143, 145, 148, 150, 151, 156, 193, 215, 217, 240, 297, 298, 302, 303, 304, 318], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 40, 42, 49, 50, 55, 57, 59, 70, 71, 73, 75, 81, 82, 83, 84, 90, 126, 140, 142, 145, 147, 149, 151, 153, 154, 156, 175, 176, 190, 257, 264, 269, 281, 287, 291, 293, 294, 297, 298, 302, 303, 304, 312, 314, 315, 317, 322, 324], "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 48, 51, 55, 63, 69, 70, 71, 72, 73, 74, 75, 76, 82, 84, 139, 140, 141, 153, 154, 155, 170, 179, 184, 185, 190, 210, 234, 237, 242, 248, 251, 298, 300, 302, 303, 304, 306, 307, 321, 322], "degree_centr": [0, 34, 45, 82, 156, 292, 314], "centrality_typ": [0, 82], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 48, 49, 57, 61, 63, 71, 72, 74, 78, 233, 240, 256, 283, 300, 303, 304, 306, 308], "far": [0, 71, 140], "possibl": [0, 4, 6, 15, 42, 49, 63, 75, 76, 82, 141, 147, 148, 156, 224, 232, 233, 248, 249, 250, 251, 283, 287, 303], "along": [0, 6, 10, 20, 24, 31, 55, 57, 63, 84, 141, 145, 151, 285, 291, 305], "branch": [0, 53, 59, 145, 191, 201, 322], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 59, 66, 68, 81, 82, 86, 139, 145, 152, 191, 193, 194, 196, 198, 201, 203, 205, 206, 209, 220, 222, 223, 225, 227, 228, 229, 235, 236, 237, 243, 244, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 286, 293, 298, 300, 303, 304, 306], "backtrack": 0, "influenc": [0, 27, 156], "relationship": [0, 42, 49, 53, 54, 59, 63, 66, 71, 74, 75, 76, 140, 141, 151, 303, 304], "high": [0, 6, 9, 45, 49, 59, 70, 73, 74, 76, 77, 78, 79, 147, 225, 256, 298, 300, 304], "score": [0, 59, 76], "contribut": [0, 4, 47, 303], "low": [0, 6, 7, 13, 32, 49, 65, 71, 72, 76, 77, 78, 283, 304], "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 45, 50, 52, 53, 58, 59, 63, 65, 70, 71, 73, 74, 75, 76, 79, 81, 82, 83, 84, 91, 92, 94, 95, 96, 99, 102, 104, 111, 112, 116, 117, 126, 143, 144, 145, 148, 150, 153, 154, 155, 156, 158, 159, 160, 162, 163, 165, 167, 169, 170, 171, 173, 174, 175, 176, 179, 184, 185, 186, 189, 190, 191, 193, 194, 196, 200, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 226, 230, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 257, 259, 268, 279, 283, 284, 285, 286, 288, 289, 291, 293, 298, 302, 303, 304, 305, 306], "mean": [0, 2, 20, 29, 30, 36, 37, 48, 49, 55, 68, 81, 83, 89, 128, 141, 144, 145, 155, 156, 196, 213, 220, 230, 239, 240, 241, 291, 294, 297, 298, 300, 303, 304, 306, 311], "themselv": [0, 49, 59, 63, 285], "eigenvector_centr": [0, 34, 82, 156, 292, 314], "toler": [0, 82, 156, 210], "doubl": [0, 9, 14, 16, 17, 18, 33, 41, 53, 55, 70, 79, 84, 140, 150, 261, 285, 306, 314, 322, 324], "error": [0, 2, 32, 36, 37, 38, 42, 47, 49, 51, 81, 82, 145, 149, 153, 156, 190, 291, 304], "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 42, 48, 49, 59, 66, 68, 74, 75, 82, 149, 153, 156, 249, 250, 291, 298, 303, 304, 312, 317, 318], "converg": [0, 6, 9, 14, 17, 24, 76, 79, 82, 156], "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 45, 48, 50, 51, 56, 57, 59, 63, 67, 68, 72, 74, 76, 79, 81, 82, 84, 141, 142, 143, 144, 145, 148, 152, 156, 166, 171, 173, 182, 183, 184, 189, 190, 192, 194, 197, 201, 208, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 264, 269, 274, 281, 283, 284, 286, 288, 289, 290, 291, 298, 300, 303, 304, 305, 312, 318, 322], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 57, 58, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 82, 84, 139, 142, 151, 155, 156, 158, 159, 160, 161, 162, 167, 178, 179, 180, 181, 185, 186, 196, 197, 198, 200, 203, 205, 206, 209, 210, 238, 239, 240, 241, 242, 248, 251, 253, 285, 291, 314, 318, 323], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 45, 47, 49, 51, 52, 58, 59, 61, 63, 65, 66, 68, 69, 70, 72, 74, 76, 82, 83, 132, 134, 139, 140, 141, 143, 146, 148, 150, 151, 152, 153, 156, 210, 238, 239, 240, 241, 291, 298, 302, 306, 308, 312, 314, 315, 316, 318, 319, 322, 323, 324], "rate": [0, 71, 77, 82, 238, 240, 241], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 42, 45, 48, 49, 55, 59, 63, 64, 70, 72, 74, 75, 76, 78, 79, 139, 140, 141, 142, 143, 145, 147, 149, 151, 153, 156, 162, 185, 192, 193, 195, 197, 198, 202, 219, 230, 231, 238, 239, 240, 241, 242, 246, 248, 251, 252, 257, 258, 266, 284, 285, 290, 291, 302, 303, 304, 318], "hub": [0, 29, 82, 83, 156, 209, 297], "author": [0, 27, 69, 72, 82, 156, 210, 298, 318], "estim": [0, 49, 59, 74, 75, 151, 156], "within": [0, 13, 30, 36, 55, 57, 58, 59, 64, 71, 72, 73, 74, 75, 76, 145, 154, 156, 210, 213, 214, 234, 240, 241, 298, 303, 312, 318, 322], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 42, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 83, 86, 90, 92, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 194, 208, 210, 220, 222, 248, 269, 291, 294, 297, 298, 303, 304, 306, 308, 318, 324], "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 40, 42, 45, 48, 49, 59, 62, 63, 64, 65, 68, 70, 71, 72, 73, 75, 76, 78, 81, 82, 86, 139, 140, 141, 143, 145, 148, 149, 150, 152, 153, 225, 238, 243, 249, 269, 285, 291, 294, 300, 303, 304, 306, 307, 308, 314], "rel": [0, 27, 49, 50, 63, 70, 76, 141, 145, 156, 304], "immedi": [0, 6, 49, 77, 82, 84, 145, 156, 294, 298, 304], "under": [0, 9, 10, 14, 17, 24, 38, 59, 65, 70, 71, 82, 86, 145, 147, 148, 156, 303], "consider": [0, 55, 70, 156, 213], "katz_centr": [0, 34, 82, 156, 292, 314], "alpha": [0, 59, 82, 156, 230, 231, 242, 283], "beta": [0, 82, 156, 231, 242], "attenu": [0, 156], "factor": [0, 13, 50, 59, 82, 156, 191, 201, 223, 225, 303], "neighborhood": [0, 6, 71, 73, 76, 82, 145, 149, 156, 234], "maxim": [0, 6, 156, 244, 290], "subgraph": [0, 6, 9, 17, 33, 59, 60, 62, 72, 73, 74, 82, 104, 110, 139, 145, 147, 153, 154, 156, 167, 170, 192, 203, 234, 291, 318, 322], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 42, 45, 48, 49, 53, 56, 57, 59, 63, 66, 67, 70, 71, 72, 74, 76, 78, 79, 81, 84, 86, 139, 140, 143, 145, 148, 149, 150, 151, 153, 156, 158, 159, 160, 167, 170, 171, 186, 196, 197, 198, 200, 203, 218, 243, 244, 248, 249, 291, 294, 295, 298, 303, 304, 312, 316, 322], "found": [0, 4, 9, 16, 17, 18, 36, 42, 48, 58, 59, 63, 64, 73, 79, 132, 152, 210, 252, 253, 289, 291, 298, 302, 303, 304, 308], "recurs": [0, 6, 145, 193], "prune": 0, "less": [0, 2, 6, 13, 17, 27, 48, 53, 70, 82, 145, 152, 156, 208, 219, 230, 232, 304], "kkore": [0, 34], "order": [0, 6, 34, 49, 53, 62, 73, 75, 76, 82, 83, 140, 145, 151, 156, 158, 159, 165, 189, 190, 193, 198, 205, 218, 219, 222, 254, 255, 258, 283, 284, 291, 297, 300, 304, 322], "That": [0, 27, 82, 150, 208, 251, 294, 306], "kshell": [0, 34], "fast": [0, 9, 20, 49, 82, 149], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 40, 42, 53, 55, 62, 63, 70, 71, 72, 75, 76, 78, 82, 126, 140, 141, 143, 145, 149, 156, 166, 173, 191, 220, 224, 226, 235, 238, 239, 240, 241, 269, 291, 298, 302, 303, 304, 311, 318, 322], "assign": [0, 7, 9, 15, 18, 20, 36, 37, 48, 55, 64, 70, 72, 74, 76, 81, 82, 84, 156, 210, 218, 220, 222, 224, 238, 241, 246, 291, 294, 297, 300, 303, 304, 324], "unlabel": 0, "dure": [0, 6, 9, 13, 24, 42, 51, 57, 59, 73, 74, 76, 81, 140, 145, 210, 298, 300, 304, 305, 306, 307], "aim": [0, 22, 59, 69, 73, 74, 75, 76, 78], "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 42, 47, 48, 52, 58, 59, 67, 70, 71, 72, 76, 81, 82, 86, 116, 140, 141, 149, 150, 151, 153, 305, 321, 322], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 42, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 65, 66, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 86, 90, 139, 140, 141, 142, 143, 145, 148, 149, 151, 153, 155, 190, 210, 220, 224, 230, 233, 243, 244, 250, 253, 274, 287, 291, 298, 300, 302, 303, 304, 305, 307, 308, 311, 312], "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 40, 42, 45, 48, 49, 51, 53, 55, 59, 62, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 143, 144, 145, 148, 151, 153, 210, 238, 242, 291, 297, 300, 302, 303], "ldbc": [0, 4, 34, 48, 50, 55, 56, 62, 70, 74, 78, 79, 319, 324], "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 42, 45, 48, 49, 55, 58, 62, 73, 75, 76, 143, 145, 147, 149, 156, 210, 276, 283, 285, 291, 298, 302, 303, 305], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 27, 34, 37, 45, 47, 53, 57, 63, 70, 71, 73, 74, 75, 76, 78, 82, 84, 90, 92, 136, 138, 140, 143, 145, 149, 150, 153, 156, 175, 176, 180, 222, 231, 245, 289, 291, 298, 300, 302], "variant": [0, 31, 76, 79], "networkx": [0, 3, 7, 8, 12, 20, 34, 45, 62, 77, 80, 81, 82, 116, 156, 158, 159, 160, 161, 162, 163, 165, 167, 169, 170, 171, 173, 174, 175, 176, 180, 181, 185, 186, 190, 191, 193, 194, 196, 197, 198, 201, 203, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 231, 234, 235, 236, 237, 242, 243, 244, 253, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 284, 286, 291, 293, 294, 296, 320, 325], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 40, 42, 45, 48, 49, 50, 51, 53, 57, 59, 62, 65, 66, 70, 71, 72, 73, 75, 76, 79, 80, 81, 82, 84, 132, 138, 139, 140, 141, 143, 145, 148, 151, 152, 153, 154, 155, 156, 170, 194, 210, 224, 225, 230, 234, 242, 245, 246, 247, 252, 253, 271, 286, 289, 291, 294, 298, 302, 303, 304, 305, 308, 311, 316, 317, 321], "sampling_path": [0, 34], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 57, 59, 63, 65, 76, 131, 283, 304, 306], "rank": [0, 6, 33, 71, 81, 82, 83, 283, 297], "vote": [0, 84], "scheme": [0, 6, 9, 48, 70], "With": [0, 4, 12, 19, 24, 34, 36, 40, 50, 55, 57, 59, 62, 67, 68, 71, 72, 73, 229, 302, 311], "top": [0, 9, 12, 22, 34, 55, 57, 59, 78, 143, 265, 304, 322], "highest": [0, 59, 225], "elect": 0, "num_of_nod": [0, 82], "select": [0, 9, 15, 36, 49, 55, 63, 66, 70, 71, 74, 76, 83, 91, 97, 98, 108, 109, 113, 121, 122, 139, 145, 153, 210, 219, 242, 254, 288, 291, 297, 298, 302, 303, 322], "influenti": 0, "extract": [0, 52, 57, 70, 71, 72, 73, 82, 90, 154, 298, 300, 304], "weakli": [0, 82, 156, 230], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 42, 45, 47, 48, 49, 50, 51, 53, 55, 57, 58, 59, 61, 62, 63, 66, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 156, 213, 242, 245, 248, 249, 251, 291, 294, 297, 300, 303, 304, 306, 308, 311], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 45, 49, 50, 51, 53, 55, 57, 59, 61, 62, 63, 66, 70, 73, 79, 101, 117, 140, 141, 142, 143, 153, 285, 291, 304, 308], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 40, 42, 50, 51, 59, 71, 72, 76, 77, 79, 80, 139, 153, 227, 228, 229, 300, 308], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 45, 47, 48, 49, 53, 55, 57, 58, 59, 61, 62, 63, 64, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 100, 139, 141, 145, 146, 147, 151, 156, 187, 188, 210, 238, 239, 240, 241, 288, 291, 293, 298, 300, 302, 303, 304, 305, 308, 311, 314], "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 42, 48, 50, 52, 57, 58, 61, 64, 67, 68, 70, 71, 72, 73, 76, 78, 80, 81, 82, 83, 117, 128, 145, 149, 150, 151, 153, 154, 243, 244, 294, 295, 298, 303, 304, 305, 306, 307, 308, 311, 312, 314, 316, 321], "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 40, 42, 50, 51, 52, 58, 63, 64, 65, 67, 68, 72, 78, 80, 82, 86, 141, 146, 150, 151, 200, 220, 291, 298, 300, 303, 311, 314, 322], "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 55, 61, 62, 74, 80, 86, 131, 143, 146, 151, 210, 220, 298, 303, 304, 308], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 45, 47, 51, 55, 59, 65, 66, 67, 68, 73, 75, 76, 77, 78, 81, 139, 141, 147, 156, 291, 304], "extens": [1, 4, 6, 27, 36, 49, 51, 53, 66, 71, 140], "henc": [1, 2, 10, 32, 70, 165, 288, 291, 304], "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 40, 42, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 64, 65, 67, 68, 70, 72, 75, 77, 78, 80, 82, 86, 138, 140, 141, 144, 145, 146, 149, 150, 153, 156, 169, 200, 210, 220, 222, 234, 239, 240, 241, 291, 298, 300, 303, 304, 306, 311, 312, 314, 324], "flash": [1, 3, 8, 12, 71], "java": [1, 4, 8, 12, 14, 34, 47, 50, 60, 62, 73, 74, 78, 82, 86, 90, 303, 314], "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 57, 59, 62, 63, 71, 73, 74, 81, 82, 83, 86, 89, 101, 113, 141, 145, 149, 151, 156, 189, 190, 200, 220, 231, 244, 245, 248, 249, 283, 285, 287, 288, 291, 303, 306, 312, 314, 316, 322], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 42, 45, 47, 48, 51, 54, 59, 60, 63, 65, 68, 70, 71, 72, 74, 75, 77, 78, 81, 82, 89, 139, 142, 146, 149, 151, 154, 155, 291, 293, 294, 302, 303, 311, 312, 314, 315, 317, 318, 320, 321, 322, 324], "These": [1, 4, 9, 15, 20, 24, 48, 53, 63, 70, 71, 72, 74, 75, 76, 77, 145, 151, 303, 311], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 45, 48, 49, 50, 54, 55, 57, 59, 63, 66, 68, 69, 71, 72, 74, 75, 76, 79, 81, 82, 83, 89, 90, 92, 93, 97, 98, 101, 102, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 118, 121, 122, 126, 132, 134, 139, 141, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 156, 161, 162, 165, 167, 170, 171, 173, 175, 176, 179, 180, 181, 184, 185, 186, 189, 190, 191, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 283, 284, 285, 286, 287, 288, 292, 293, 295, 296, 298, 300, 302, 303, 304, 306, 315, 318, 323], "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 42, 45, 48, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 91, 97, 98, 110, 113, 117, 121, 122, 126, 139, 141, 143, 145, 147, 151, 153, 155, 175, 176, 296, 298, 303, 306, 308, 312, 318], "upon": [1, 2, 9, 14, 53, 78, 153, 304, 305], "pregel": [1, 4, 8, 12, 17, 22, 34, 62, 71, 74, 296, 308, 318, 320], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 40, 45, 50, 59, 66, 70, 72, 139, 289, 291, 324], "deploi": [2, 15, 33, 42, 47, 49, 50, 51, 52, 58, 62, 65, 71, 73, 78, 141, 298, 300, 305], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 42, 48, 50, 51, 52, 58, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 82, 139, 151, 298, 303], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 40, 42, 49, 59, 62, 63, 70, 72, 73, 76, 86, 103, 140, 143, 144, 145, 149, 151, 153, 156, 219, 240, 271, 289, 291, 295, 297, 303, 304, 305, 306], "advantag": [2, 49, 62, 70, 77, 78, 307], "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 40, 42, 45, 48, 49, 50, 51, 55, 57, 58, 59, 63, 66, 72, 76, 79, 82, 83, 142, 143, 144, 145, 148, 153, 154, 156, 158, 159, 160, 162, 167, 171, 175, 176, 192, 194, 197, 200, 206, 210, 211, 212, 214, 215, 216, 218, 222, 225, 226, 230, 231, 235, 237, 248, 249, 251, 253, 256, 259, 264, 268, 269, 272, 275, 278, 280, 283, 284, 285, 286, 291, 293, 294, 303, 306, 315, 318, 321, 322], "gie": [2, 32, 33, 47, 53, 59, 62, 70, 71, 75, 78, 79, 80, 110, 298, 315, 316, 325], "gle": [2, 32, 47, 62, 65, 66, 67, 71, 76, 78, 80, 315, 316, 323], "address": [2, 9, 14, 17, 23, 31, 42, 55, 71, 76, 304, 322], "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 40, 45, 49, 57, 59, 60, 62, 63, 66, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 101, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 210, 214, 215, 216, 238, 241, 248, 268, 283, 291, 296, 298, 300, 302, 303, 305, 306, 307, 308], "complex": [2, 4, 6, 12, 22, 34, 37, 45, 49, 50, 55, 56, 57, 62, 63, 70, 71, 73, 74, 75, 76, 77, 78, 82, 142, 156, 220, 224, 239, 240, 241, 303], "relat": [2, 4, 13, 23, 24, 27, 33, 38, 42, 47, 49, 54, 57, 58, 63, 66, 69, 71, 72, 73, 75, 76, 81, 141, 145, 151, 247, 283, 288, 303, 304], "show": [2, 14, 19, 20, 27, 29, 30, 38, 42, 49, 50, 59, 62, 67, 68, 72, 74, 75, 76, 142, 143, 151, 294, 298, 300, 303], "kubernet": [2, 29, 42, 45, 47, 48, 62, 67, 70, 72, 77, 298, 304, 315, 317, 318, 320, 324, 325], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 42, 45, 47, 50, 52, 58, 59, 62, 65, 67, 70, 71, 72, 73, 74, 75, 76, 77, 82, 141, 151, 156, 213, 292, 298, 304, 305, 312, 314, 321], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 42, 45, 48, 49, 51, 53, 55, 59, 63, 70, 71, 76, 78, 140, 141, 142, 147, 156, 220, 291, 303, 304], "scenario": [2, 4, 6, 8, 12, 13, 40, 49, 57, 58, 59, 63, 66, 70, 71, 75, 76, 78, 140, 141, 143], "quit": [2, 30, 210], "common": [2, 6, 12, 15, 30, 49, 59, 63, 66, 70, 71, 73, 74, 75, 76, 78, 139, 140, 147, 148, 162, 283, 285, 291, 303, 312], "intend": [2, 13, 36, 53, 283, 297], "analysi": [2, 7, 8, 11, 13, 49, 58, 59, 62, 70, 76, 77, 79, 80, 82, 244], "offlin": [2, 47, 62, 63, 73, 76, 77, 300], "everi": [2, 6, 23, 57, 59, 66, 76, 81, 145, 156, 158, 159, 160, 175, 176, 194, 208, 271, 278, 291, 297, 303], "dai": [2, 20, 59, 291, 294], "export": [2, 4, 23, 29, 31, 33, 42, 50, 64, 302, 317], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 55, 57, 71, 73, 78, 86, 99, 140, 142, 143, 144, 145, 166, 203, 217, 224, 230, 231, 238, 239, 240, 241, 242, 291, 294, 298, 303, 306, 322], "real": [2, 6, 9, 12, 13, 34, 45, 48, 55, 57, 62, 71, 72, 74, 76, 283, 304], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 42, 49, 53, 55, 57, 59, 62, 66, 70, 72, 75, 76, 79, 82, 140, 141, 145, 156, 189, 190, 226, 227, 228, 229, 239, 240, 241, 243, 244, 253, 256, 291, 303, 304, 306, 318, 322], "sampl": [2, 29, 30, 31, 33, 47, 48, 62, 63, 71, 72, 78, 86, 140, 141, 142, 144, 147, 149, 152, 155, 230, 250, 283, 304, 323], "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 40, 42, 45, 48, 49, 53, 55, 59, 66, 70, 75, 79, 84, 140, 141, 145, 147, 149, 152, 156, 210, 218, 224, 248, 259, 275, 297, 298, 303, 304, 308, 311], "unnecessari": [2, 6, 9, 59, 303], "capabl": [2, 6, 11, 16, 20, 53, 54, 57, 60, 71, 73, 75, 78, 291], "independ": [2, 6, 30, 71, 78, 140, 154, 167, 170, 218, 245, 291], "document": [2, 10, 27, 29, 33, 35, 36, 38, 42, 50, 53, 54, 57, 58, 60, 62, 64, 76, 82, 139, 140, 146, 298, 299, 304], "walk": [2, 4, 32, 48, 59, 71, 72, 75, 145, 192, 203], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 45, 47, 48, 50, 51, 54, 58, 59, 61, 62, 63, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 81, 92, 140, 141, 143, 145, 149, 151, 220, 222, 225, 253, 259, 291, 298, 300, 302, 303, 306, 308], "standalon": [2, 23, 27, 32, 42, 47, 50, 51, 59, 70, 71, 305, 324], "self": [2, 48, 59, 70, 126, 139, 142, 145, 156, 166, 179, 218, 220, 222, 224, 230, 238, 239, 240, 241, 242, 291, 292, 294, 298, 304, 319, 323, 324], "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 42, 45, 48, 54, 59, 62, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 81, 298, 304, 305, 311, 314], "k8": [2, 4, 7, 17, 22, 30, 37, 38, 40, 42, 45, 47, 48, 52, 58, 62, 65, 67, 70, 78, 80, 298, 304, 314, 315, 316, 318, 321, 324], "7": [2, 10, 20, 23, 27, 30, 31, 32, 42, 51, 59, 79, 140, 146, 151, 158, 159, 171, 194, 256, 262, 264, 268, 269, 272, 274, 286, 291, 306, 317, 321, 322], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 42, 45, 48, 49, 59, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 76, 78, 79, 82, 86, 139, 140, 141, 143, 145, 146, 147, 149, 151, 156, 169, 220, 222, 227, 229, 238, 241, 281, 285, 291, 293, 297, 298, 300, 302, 303, 304, 307, 308, 311, 312], "get": [2, 4, 6, 12, 16, 17, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 40, 42, 47, 48, 49, 50, 53, 57, 59, 63, 66, 70, 75, 77, 80, 82, 83, 84, 102, 139, 142, 143, 144, 145, 148, 153, 154, 155, 156, 189, 210, 281, 291, 297, 298, 300, 303, 304, 308, 311, 312, 314, 317, 318], "instal": [2, 4, 15, 16, 19, 23, 33, 35, 40, 42, 48, 50, 52, 58, 72, 82, 86, 149, 291, 294, 298, 315, 316, 317, 318, 321], "client": [2, 17, 22, 23, 29, 33, 38, 40, 41, 49, 58, 60, 62, 68, 81, 82, 151, 298, 300, 302, 303, 304, 305, 311, 314, 316, 321], "prepar": [2, 4, 33, 36, 48, 51, 63, 64, 65, 66, 68, 69, 72, 76, 80, 303, 318, 321], "continu": [2, 6, 15, 16, 20, 27, 48, 49, 58, 59, 62, 63, 71, 72, 76, 79, 139, 210, 248, 251, 303, 304, 305], "incas": [2, 48], "doesn": [2, 13, 29, 32, 37, 38, 40, 48, 59, 86, 145, 153, 220, 222, 224, 291, 297, 306], "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 40, 41, 42, 48, 55, 57, 59, 70, 73, 79, 81, 82, 84, 86, 92, 139, 144, 145, 151, 153, 155, 156, 169, 185, 220, 222, 224, 244, 248, 249, 283, 285, 288, 291, 297, 304, 306, 323], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 40, 48, 50, 51, 57, 62, 64, 70, 80, 82, 134, 141, 143, 144, 153, 219, 302, 303, 304, 305], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 42, 48, 50, 51, 57, 58, 59, 70, 71, 72, 75, 76, 81, 82, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 116, 119, 120, 126, 132, 133, 134, 143, 145, 148, 150, 153, 154, 169, 191, 193, 194, 196, 197, 198, 200, 201, 203, 205, 206, 208, 209, 210, 212, 213, 215, 218, 220, 222, 223, 225, 226, 227, 228, 229, 231, 232, 233, 235, 236, 237, 239, 240, 241, 243, 244, 254, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 285, 286, 291, 293, 294, 295, 298, 304, 305, 306, 307, 312, 314, 317], "distinct": [2, 53, 57, 71, 72, 75, 196, 258, 284, 303], "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 59, 66, 68, 70, 74, 76, 81, 82, 84, 105, 116, 131, 139, 143, 147, 148, 153, 154, 156, 219, 227, 229, 238, 240, 291, 294, 296, 298, 303, 304, 308, 314], "entir": [2, 9, 34, 49, 59, 72, 76, 145, 156, 291], "discret": [2, 63, 76, 139, 210, 223, 225, 231, 235, 246], "util": [2, 4, 6, 9, 15, 32, 36, 40, 53, 54, 59, 62, 64, 69, 70, 71, 73, 74, 77, 81, 82, 84, 155, 256, 302, 303, 304, 307], "either": [2, 13, 30, 34, 42, 55, 58, 59, 66, 82, 141, 145, 153, 154, 194, 197, 210, 237, 248, 281, 291, 305], "aforement": [2, 70, 74, 76, 140, 145, 304], "per": [2, 48, 303], "prefer": [2, 13, 27, 36, 303], "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 42, 45, 51, 56, 58, 59, 62, 65, 67, 70, 72, 80, 82, 83, 101, 132, 133, 134, 136, 138, 153, 154, 291, 295, 296, 304, 306, 311, 312, 314, 315, 316, 318, 319, 322, 324], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 53, 59, 66, 69, 70, 72, 76, 81, 82, 83, 84, 89, 139, 140, 153, 154, 155, 156, 200, 269, 291, 295, 298, 303, 304, 305, 314, 323], "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 40, 48, 50, 52, 53, 55, 57, 58, 59, 62, 64, 70, 73, 75, 78, 82, 83, 86, 89, 110, 116, 117, 118, 128, 138, 140, 143, 145, 153, 154, 156, 158, 159, 160, 175, 176, 185, 191, 193, 194, 196, 198, 200, 201, 203, 205, 206, 209, 213, 214, 215, 218, 220, 222, 223, 225, 226, 227, 228, 229, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 248, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 283, 286, 289, 291, 293, 294, 297, 298, 304, 305], "control": [2, 6, 27, 38, 70, 71, 73, 81, 156, 291, 303], "subset": [2, 6, 20, 55, 57, 69, 72, 197, 208, 297, 298], "launch": [2, 8, 9, 17, 22, 29, 36, 40, 42, 45, 48, 56, 65, 67, 68, 72, 80, 132, 150, 295, 298, 304, 305, 318], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 40, 42, 45, 48, 49, 53, 55, 57, 59, 62, 63, 66, 68, 70, 71, 72, 74, 75, 76, 82, 84, 90, 139, 140, 141, 142, 145, 147, 149, 151, 153, 156, 168, 189, 192, 194, 197, 220, 222, 224, 225, 230, 233, 234, 238, 239, 240, 241, 242, 253, 256, 285, 291, 295, 297, 298, 304, 306, 307, 312], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 40, 45, 47, 48, 51, 53, 55, 57, 58, 59, 60, 62, 63, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 82, 83, 89, 90, 132, 134, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 156, 158, 159, 160, 162, 167, 169, 170, 175, 176, 179, 184, 185, 190, 192, 194, 196, 197, 200, 203, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 224, 226, 227, 229, 231, 234, 238, 239, 240, 241, 242, 248, 251, 256, 281, 283, 284, 285, 286, 289, 291, 293, 294, 295, 297, 298, 302, 303, 304, 305, 306, 312, 314, 318, 323], "set_opt": [2, 7, 15, 17, 19, 29, 38, 42, 51, 65, 68, 69, 72, 312, 317], "show_log": [2, 7, 15, 17, 19, 29, 38, 42, 51, 65, 68, 69, 72, 138, 312, 317], "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 42, 48, 51, 57, 58, 59, 65, 66, 68, 69, 70, 72, 81, 82, 84, 86, 128, 132, 136, 139, 140, 141, 145, 148, 151, 153, 156, 163, 172, 173, 174, 175, 176, 185, 187, 188, 194, 196, 214, 218, 220, 224, 230, 234, 237, 249, 289, 291, 293, 294, 298, 304, 305, 312, 314, 317, 322, 323, 324], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 45, 68, 69, 70, 82, 83, 128, 132, 153, 154, 298, 306, 312, 314, 315, 316, 318, 319, 322, 324], "enabled_engin": [2, 138, 298], "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 36, 37, 40, 45, 50, 51, 55, 57, 58, 59, 61, 62, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 81, 82, 83, 90, 134, 139, 141, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 190, 191, 193, 194, 196, 197, 200, 201, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 229, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 245, 247, 248, 251, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 283, 284, 288, 289, 291, 293, 294, 297, 298, 300, 302, 303, 304, 305, 307, 308, 312, 314, 317, 318, 319, 321, 322, 323, 324], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 49, 62, 66, 70, 71, 74, 76, 77, 139, 140, 143, 145, 147, 148, 149, 238, 240, 241, 288, 308], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 40, 42, 47, 50, 64, 65, 81, 140, 304, 305, 312], "line": [2, 4, 6, 7, 17, 36, 37, 38, 40, 47, 49, 64, 65, 73, 78, 139, 140, 291, 293, 304, 305, 312, 323], "releas": [2, 27, 31, 32, 35, 42, 55, 68, 79, 248, 251, 297, 298, 304, 317, 321], "replac": [2, 17, 19, 22, 23, 29, 30, 49, 50, 57, 73, 79, 142, 143, 144, 153, 291], "my": [2, 18, 29, 291, 294, 298, 304], "illustr": [2, 4, 29, 59, 63, 69, 74, 76, 142, 268], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 45, 48, 49, 52, 58, 59, 66, 68, 70, 71, 72, 139, 145, 285, 300, 306], "connect": [2, 6, 15, 17, 19, 20, 27, 37, 40, 42, 48, 49, 54, 59, 60, 62, 66, 68, 70, 71, 72, 73, 74, 76, 82, 83, 84, 140, 141, 143, 145, 148, 154, 156, 160, 177, 192, 194, 196, 198, 202, 203, 205, 206, 208, 209, 210, 212, 213, 214, 215, 217, 219, 224, 225, 230, 231, 233, 238, 240, 241, 242, 243, 244, 245, 247, 256, 266, 267, 269, 271, 273, 290, 291, 298, 305, 306, 314, 322], "servic": [2, 27, 28, 29, 38, 52, 58, 62, 68, 71, 72, 74, 76, 81, 298, 305], "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 42, 44, 48, 53, 59, 62, 65, 66, 70, 74, 76, 78, 81, 82, 83, 132, 134, 138, 140, 141, 143, 144, 147, 148, 149, 151, 248, 291, 298, 302, 304, 307, 308], "addr": [2, 29, 84, 298], "ip": [2, 29, 48, 50, 58, 298, 304, 322], "port": [2, 23, 29, 38, 42, 48, 50, 58, 70, 81, 298, 304, 322, 324], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 42, 45, 48, 49, 51, 55, 57, 59, 63, 65, 68, 70, 71, 72, 75, 76, 77, 78, 92, 140, 145, 147, 148, 149, 150, 153, 190, 213, 220, 222, 230, 291, 294, 297, 298, 303, 304, 306, 308, 311], "would": [2, 4, 20, 29, 31, 36, 37, 40, 42, 50, 59, 71, 81, 82, 145, 151, 294, 297, 298, 304], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 40, 59, 72, 82, 91, 139, 143, 145, 229, 304], "wcc_result": 2, "wcc": [2, 13, 79, 82, 314, 319], "print": [2, 7, 16, 20, 29, 30, 33, 42, 45, 48, 51, 52, 58, 59, 65, 66, 68, 69, 70, 72, 82, 83, 142, 144, 145, 148, 151, 153, 154, 156, 169, 218, 286, 291, 294, 304, 312, 319, 322, 324], "to_datafram": [2, 7, 15, 45, 72, 83, 153, 297, 314], "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 41, 42, 45, 48, 49, 50, 53, 60, 63, 66, 70, 72, 75, 76, 79, 81, 82, 83, 84, 110, 116, 118, 139, 140, 141, 142, 143, 144, 145, 148, 149, 151, 152, 153, 155, 248, 249, 288, 291, 294, 297, 298, 304, 305, 312, 314, 315, 317, 318, 322, 323, 324], "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 45, 48, 53, 72, 73, 76, 82, 83, 191, 201, 208, 214, 218, 230, 238, 247, 279, 284, 297, 298, 304, 314, 318, 319], "tip": [2, 13, 276], "encount": [2, 32, 37, 42, 74, 92], "fail": [2, 37, 42, 49, 57, 76, 156, 291, 304], "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 49, 52, 53, 72, 73, 75, 81, 82, 83, 115, 146, 153, 298, 304, 314, 318, 319, 322], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 42, 47, 49, 51, 55, 57, 59, 65, 70, 71, 72, 75, 82, 83, 115, 139, 141, 154, 156, 220, 222, 225, 226, 248, 249, 250, 251, 253, 265, 283, 291, 297, 304, 314, 317, 318, 322], "empti": [2, 19, 29, 40, 41, 57, 59, 70, 82, 84, 173, 197, 200, 230, 231, 269, 285, 291, 294, 304], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 42, 45, 48, 49, 50, 51, 52, 58, 65, 72, 73, 74, 76, 79, 80, 81, 82, 90, 92, 94, 123, 139, 141, 150, 151, 153, 298, 303], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 42, 45, 51, 59, 65, 68, 69, 72, 76, 79, 82, 83, 139, 145, 151, 298, 314, 316, 318, 322, 324], "load_modern_graph": [2, 7, 30, 33, 51, 72, 82, 154], "modern": [2, 6, 7, 33, 48, 50, 51, 59, 62, 72, 73, 74, 300, 304, 305], "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 42, 45, 48, 49, 53, 55, 57, 59, 62, 66, 68, 70, 72, 74, 75, 77, 82, 84, 133, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 154, 283, 286, 291, 298, 303, 304, 314, 321], "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 41, 45, 50, 53, 55, 59, 61, 62, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 78, 79, 82, 83, 92, 141, 142, 143, 144, 145, 148, 151, 153, 154, 155, 156, 192, 210, 220, 222, 224, 225, 227, 228, 229, 232, 237, 238, 245, 246, 247, 248, 251, 253, 269, 274, 280, 282, 291, 293, 294, 297, 298, 300, 302, 303, 305, 307, 308, 314, 318, 321, 322, 324], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 48, 49, 50, 53, 60, 62, 63, 66, 70, 72, 74, 75, 78, 82, 90, 140, 141, 143, 145, 150, 151, 153, 156, 159, 192, 198, 202, 203, 205, 222, 285, 291, 293, 295, 297, 298, 302, 304, 306, 314, 315, 318, 319, 322], "store": [2, 10, 12, 13, 16, 17, 30, 34, 42, 47, 48, 53, 54, 55, 57, 59, 62, 70, 71, 73, 74, 75, 77, 78, 83, 84, 97, 98, 113, 121, 122, 141, 147, 153, 154, 210, 215, 238, 239, 240, 241, 242, 291, 293, 298, 300, 302, 303, 305, 312, 314, 317], "pod": [2, 27, 28, 29, 30, 38, 40, 42, 45, 48, 68, 70, 298, 304, 312, 315, 317, 318, 324], "elimin": [2, 6, 14, 141], "extran": 2, "resourc": [2, 27, 29, 33, 38, 42, 45, 58, 68, 71, 78, 82, 90, 210, 243, 298, 304, 307, 311, 317], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 42, 45, 49, 51, 55, 57, 59, 63, 66, 68, 70, 71, 72, 76, 78, 82, 86, 100, 139, 140, 141, 143, 144, 148, 149, 150, 151, 152, 189, 237, 238, 242, 291, 298, 303, 304, 307, 321], "equival": [2, 20, 42, 53, 55, 57, 59, 145, 210, 247, 291], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 42, 53, 55, 57, 58, 59, 63, 70, 71, 73, 76, 78, 81, 145, 149, 156, 189, 190, 197, 200, 220, 222, 227, 238, 239, 240, 241, 242, 250, 286, 289, 290, 291, 292, 293, 296, 302, 303, 308, 311, 314], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 42, 45, 48, 49, 53, 57, 58, 59, 63, 66, 68, 71, 73, 74, 76, 78, 79, 82, 83, 84, 92, 126, 132, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 155, 156, 200, 210, 230, 238, 239, 240, 241, 247, 291, 293, 294, 298, 300, 302, 303, 304, 306, 312], "close": [2, 6, 27, 29, 30, 33, 58, 66, 68, 71, 82, 141, 151, 154, 293, 298, 304, 318], "free": [2, 9, 37, 42, 66, 78, 231, 238, 248, 251, 253, 284, 290, 298], "delet": [2, 9, 27, 29, 30, 33, 42, 111, 150, 298, 300, 304, 317], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 48, 49, 55, 58, 59, 62, 71, 73, 74, 75, 76, 83, 113, 140, 152, 155, 291, 293, 303], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 40, 49, 55, 59, 62, 63, 71, 72, 73, 74, 76, 77, 103, 153, 256, 303, 308], "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 42, 45, 49, 61, 63, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 86, 141, 144, 145, 147, 153, 201, 210, 213, 214, 222, 223, 224, 225, 226, 230, 231, 232, 233, 238, 243, 244, 247, 248, 250, 251, 274, 283, 288, 291, 292, 294, 296, 297, 307], "deriv": [3, 12, 34, 72, 75, 81, 83, 153, 156, 300], "grape": [3, 4, 15, 16, 22, 23, 34, 47, 61, 71, 77, 81, 90, 300, 303, 305, 306, 307, 308, 314, 320], "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 42, 45, 48, 49, 51, 53, 54, 55, 59, 60, 61, 62, 65, 71, 73, 74, 75, 76, 77, 79, 140, 141, 146, 149, 288, 290, 300, 302, 303, 304, 306, 308, 314, 322], "sigmod": [3, 12, 14, 24, 34, 71, 314, 320], "2017": [3, 12, 14, 34, 71, 248, 249, 314], "further": [3, 6, 10, 14, 20, 27, 30, 34, 45, 50, 53, 55, 57, 59, 72, 73, 83, 141, 153, 154, 169, 300, 303], "enhanc": [3, 4, 9, 72], "introduc": [3, 6, 10, 19, 20, 24, 47, 49, 53, 55, 57, 59, 61, 63, 71, 73, 75, 78, 139, 142, 143, 145, 147, 156, 268, 290, 303, 308], "lot": [3, 13, 37, 45, 59, 61, 308], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 49, 51, 59, 64, 71, 72, 73, 81, 84, 91, 92, 133, 150, 153, 154, 156, 163, 169, 210, 222, 231, 233, 253, 282, 289, 291, 298, 300, 302, 303, 304, 306, 318], "featur": [3, 6, 9, 12, 23, 32, 34, 53, 61, 63, 65, 68, 69, 71, 72, 75, 76, 77, 78, 81, 86, 139, 140, 147, 151, 153, 291, 298, 303, 308, 318, 323], "storag": [3, 9, 30, 42, 49, 50, 53, 55, 59, 70, 73, 76, 78, 118, 141, 153, 302, 304, 305], "languag": [3, 12, 16, 35, 45, 49, 51, 54, 55, 57, 58, 59, 60, 62, 63, 66, 71, 72, 73, 74, 75, 78, 86, 154, 303, 304, 308], "pattern": [3, 6, 12, 23, 30, 49, 50, 55, 57, 62, 66, 71, 74, 78, 82, 144, 149, 304], "better": [3, 8, 12, 20, 24, 29, 34, 48, 49, 59, 61, 76, 78, 298, 304, 308], "integr": [3, 4, 9, 12, 13, 23, 34, 49, 51, 60, 61, 71, 73, 75, 77, 78, 284, 303, 304, 306, 308], "big": [3, 6, 12, 37, 61, 73, 308, 321], "overview": [3, 23, 34, 59, 72, 300], "architectur": [3, 9, 71, 76, 82], "kei": [3, 4, 13, 20, 27, 48, 51, 53, 57, 59, 70, 73, 75, 76, 77, 82, 83, 84, 115, 116, 117, 126, 142, 145, 151, 153, 156, 185, 234, 238, 239, 240, 241, 289, 291, 293, 294, 297, 298, 303, 304, 314, 324], "concept": [3, 73, 76, 139, 140], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 34, 61, 62, 71, 73, 74, 308], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 34, 58, 63, 73, 81, 308], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 42, 45, 48, 51, 53, 60, 62, 63, 65, 66, 68, 69, 72, 76, 77, 80, 82, 147, 154, 297, 298, 300, 302, 318], "tune": [3, 45, 70, 71], "guid": [4, 7, 9, 16, 27, 29, 32, 37, 40, 47, 48, 51, 54, 57, 58, 60, 65, 68, 69, 72, 86, 318], "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 47, 49, 50, 53, 59, 64, 71, 72, 73, 78, 79, 81, 82, 84, 89, 139, 140, 141, 142, 145, 146, 151, 210, 252, 295, 303, 304, 306, 311], "organ": [4, 57, 59, 62, 63, 76, 80, 139, 141, 143, 147, 148, 227, 229, 268], "identifi": [4, 9, 13, 24, 55, 57, 59, 71, 72, 74, 82, 131, 218, 285, 288, 291, 298, 304, 324], "simplic": [4, 9], "suggest": [4, 13, 49, 59, 70, 73, 210], "prebuilt": [4, 40, 50], "docker": [4, 27, 32, 33, 36, 38, 40, 42, 50, 62, 304, 311, 315, 318, 320, 321], "imag": [4, 29, 36, 38, 42, 50, 62, 64, 79, 142, 298, 311], "necessari": [4, 6, 23, 27, 37, 40, 50, 51, 58, 70, 93, 101, 106, 140, 141, 143, 145, 153, 303, 304, 312], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 40, 42, 50, 52, 58, 59, 64, 65, 73, 76, 82, 145, 213, 218, 304, 311, 314], "shm": [4, 32, 40, 50, 64, 316], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 40, 41, 42, 50, 58, 63, 64, 66, 70, 76, 79, 84, 140, 142, 143, 145, 150, 152, 196, 197, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 222, 233, 242, 246, 248, 291, 303, 304, 305, 316], "4096m": [4, 32, 40, 50, 64], "registri": [4, 27, 32, 40, 50, 64, 146, 298, 304, 316], "cn": [4, 23, 27, 29, 31, 32, 40, 50, 64, 70, 146, 304, 315, 316, 324], "hongkong": [4, 27, 32, 40, 50, 64, 304, 316], "aliyunc": [4, 23, 27, 29, 31, 32, 40, 50, 64, 70, 146, 304, 315, 316, 324], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 40, 50, 51, 54, 64, 65, 70, 73, 74, 79, 82, 86, 146, 149, 156, 243, 252, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 271, 276, 298, 303, 304, 314, 315, 316, 317, 324], "latest": [4, 14, 32, 37, 38, 40, 50, 64, 65, 303, 304, 316, 321], "altern": [4, 53, 219, 238, 242, 291, 303, 304], "manual": [4, 9, 27, 30, 33, 42, 71, 78, 153, 304], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 42, 48, 49, 51, 53, 55, 57, 58, 59, 64, 66, 68, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 84, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 160, 161, 163, 164, 168, 170, 185, 186, 190, 191, 194, 196, 197, 201, 210, 219, 228, 234, 248, 249, 251, 253, 277, 285, 286, 289, 291, 298, 302, 303, 304, 307, 312], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 40, 42, 50, 55, 66, 68, 70, 72, 139, 140, 141, 143, 144, 145, 146, 149, 151, 302, 304, 308, 311, 318], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 42, 45, 47, 51, 62, 68, 72, 73, 80, 82, 86, 146, 150, 156, 298, 303, 304, 305, 312, 317, 321], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 45, 55, 57, 63, 73, 74, 76, 82, 83, 84, 94, 139, 140, 141, 142, 149, 150, 151, 156, 253, 264, 283, 291, 295, 297, 298, 300, 303, 304, 305, 311, 312, 314], "clone": [4, 22, 29, 30, 31, 32, 36, 37, 50, 86, 146, 304, 316], "repositori": [4, 17, 29, 36, 37, 48, 86, 298, 304], "enter": [4, 49, 58], "analatical_engin": 4, "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 42, 58, 62, 81, 85, 87, 139, 150, 298, 302, 311, 312, 315, 317, 318], "git": [4, 22, 29, 30, 31, 32, 35, 37, 50, 86, 149, 303, 316], "http": [4, 7, 19, 22, 23, 27, 29, 30, 31, 32, 35, 42, 50, 51, 52, 54, 58, 65, 68, 69, 72, 73, 74, 82, 86, 146, 149, 156, 210, 214, 215, 216, 230, 233, 240, 241, 243, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 275, 276, 277, 278, 283, 298, 303, 304, 314, 315, 316, 317, 318, 322, 324], "github": [4, 22, 29, 30, 31, 32, 35, 50, 73, 74, 82, 86, 146, 149, 241, 298, 303, 314, 316, 324], "alibaba": [4, 17, 22, 23, 29, 31, 32, 50, 62, 71, 73, 76, 77, 86, 146, 149, 314, 316, 324], "cd": [4, 22, 29, 31, 32, 35, 50, 52, 58, 86, 146, 149, 151, 304, 311, 312, 314, 316, 322], "sinc": [4, 6, 23, 24, 29, 30, 37, 49, 59, 64, 68, 70, 71, 79, 92, 141, 145, 153, 189, 190, 220, 222, 269, 286, 293, 297, 303, 304, 311], "inherit": [4, 6, 9, 16, 49, 73, 81, 139, 149], "libgrap": [4, 16, 31, 34, 73, 86], "lite": [4, 16, 31, 34, 73, 86], "note": [4, 13, 14, 20, 27, 29, 37, 38, 49, 53, 59, 63, 68, 69, 70, 72, 73, 74, 82, 83, 84, 92, 131, 133, 141, 145, 153, 156, 165, 166, 169, 173, 186, 187, 188, 189, 190, 191, 197, 198, 203, 206, 208, 210, 211, 212, 213, 215, 217, 219, 220, 222, 223, 224, 225, 226, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 251, 252, 253, 268, 283, 284, 285, 286, 288, 291, 293, 294, 297, 298, 302, 304, 311, 318, 324], "core": [4, 6, 12, 34, 37, 42, 49, 51, 71, 72, 73, 82, 86, 151, 156, 298, 318], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 45, 49, 58, 59, 69, 72, 73, 74, 75, 76, 82, 140, 141, 142, 153, 201, 220, 268, 283, 285, 291, 292, 302, 303, 304, 307], "partition": [4, 41, 149], "worker": [4, 9, 13, 14, 23, 28, 34, 50, 66, 68, 141, 144, 151, 153, 298], "between": [4, 6, 9, 10, 12, 13, 18, 19, 42, 47, 49, 59, 60, 63, 74, 76, 81, 82, 140, 141, 143, 145, 151, 156, 213, 214, 215, 218, 224, 230, 231, 233, 237, 238, 239, 240, 242, 245, 247, 248, 249, 251, 256, 286, 288, 291, 303, 304], "heavili": 4, "reus": [4, 30, 63, 66, 73, 82, 151, 153, 298, 300], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 55, 59, 65, 70, 77, 86, 92, 138, 149, 153, 200, 234, 291, 297, 298, 300, 304, 311], "fulli": [4, 63, 66, 75, 82, 92, 233, 303], "analytci": 4, "recomman": 4, "locat": [4, 23, 27, 36, 38, 48, 50, 59, 64, 70, 75, 85, 87, 141, 142, 153, 304, 305, 311], "analytical_engin": [4, 15, 31, 36, 86, 314], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 32, 36, 37, 40, 42, 45, 48, 49, 51, 59, 60, 62, 64, 70, 71, 72, 76, 77, 78, 80, 81, 82, 140, 145, 149, 151, 153, 210, 220, 222, 230, 291, 297, 298, 300, 303, 304, 305, 324], "therebi": [4, 55], "fledg": [4, 12, 71], "coordin": [4, 15, 27, 29, 35, 37, 38, 40, 51, 68, 81, 153, 203, 298, 304, 312, 315, 316, 318], "while": [4, 6, 12, 19, 20, 29, 34, 45, 48, 52, 53, 55, 57, 58, 59, 63, 71, 73, 74, 75, 77, 78, 140, 145, 151, 187, 188, 248, 251, 253, 285, 291, 300, 303, 304, 312], "": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 40, 42, 48, 50, 52, 53, 54, 57, 58, 59, 60, 62, 63, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 82, 92, 108, 109, 126, 139, 141, 143, 145, 148, 150, 152, 153, 156, 192, 203, 210, 213, 215, 218, 222, 225, 227, 228, 229, 245, 253, 254, 255, 278, 281, 283, 291, 297, 298, 300, 302, 303, 304, 305, 322, 323], "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 45, 48, 49, 53, 55, 57, 59, 62, 63, 65, 66, 70, 71, 72, 73, 74, 75, 76, 78, 81, 82, 83, 84, 86, 90, 139, 140, 141, 143, 144, 145, 146, 153, 154, 156, 175, 176, 185, 211, 212, 237, 238, 242, 250, 263, 284, 285, 291, 297, 298, 303, 304, 305, 308], "ship": [4, 311], "6": [4, 10, 17, 18, 22, 31, 45, 51, 57, 58, 59, 72, 79, 82, 140, 145, 151, 156, 175, 194, 223, 224, 225, 242, 256, 258, 264, 265, 268, 271, 275, 276, 284, 286, 291, 304, 306, 314, 317, 318, 322], "graphalyt": [4, 78], "benchmark": [4, 34, 55, 59, 62, 74, 76, 78, 210], "flatten": [4, 13], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 42, 45, 59, 68, 76, 82, 144, 186, 194, 291, 303], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 40, 45, 48, 49, 50, 51, 57, 59, 62, 72, 73, 75, 76, 81, 82, 83, 110, 145, 149, 153, 154, 156, 251, 295, 298, 300, 304, 306, 311, 312, 314, 318, 322], "written": [4, 12, 20, 59, 71, 73, 75, 269, 300, 303, 306, 314], "giraph": [4, 7, 8, 12, 17, 23, 24, 61, 78, 308], "graphx": [4, 7, 8, 12, 17, 24, 61, 78, 308], "app": [4, 15, 16, 17, 18, 33, 83, 84, 86, 91, 94, 117, 123, 126, 140, 153, 296, 297, 303, 314], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 49, 50, 71, 81, 82, 86, 304], "serv": [4, 27, 42, 62, 72, 73, 76, 141, 304], "layer": [4, 6, 49, 63, 66, 73, 76, 78, 139, 140, 143, 147, 151, 323], "cuda": [4, 79], "suit": [4, 36, 45, 50, 63, 76, 311], "gpu": [4, 73, 146], "acceler": [4, 27, 303], "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 41, 49, 74, 76, 84, 116, 153, 154, 300, 305, 308, 314], "extend": [4, 9, 17, 23, 55, 57, 58, 59, 78, 83, 140, 148, 149, 237, 303, 314], "loader": [4, 22, 50, 81, 92, 103, 296, 305, 319, 320], "mutabl": [4, 73], "io": [4, 27, 30, 33, 40, 73, 74, 82, 150, 153, 241, 298, 304, 307], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 45, 62, 71, 73, 75, 81, 84, 141, 220, 222, 259, 291, 294, 304, 314], "sub": [4, 12, 14, 18, 59, 62, 70, 83, 143, 145, 303, 308], "helper": 4, "thread": [4, 6, 31, 48, 50, 63, 79, 152], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 42, 49, 59, 66, 76, 81, 84, 152, 303, 314], "buffer": [4, 150], "sync": [4, 84, 150, 303], "serial": [4, 57, 58, 81, 153, 298, 303, 322], "vertex_map": [4, 13, 132, 153, 298], "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 48, 49, 51, 53, 55, 57, 58, 63, 70, 71, 74, 76, 82, 139, 140, 141, 147, 149, 151, 152, 153, 154, 201, 210, 220, 222, 225, 244, 285, 290, 291, 303, 304, 305, 311], "map": [4, 6, 13, 53, 55, 57, 59, 74, 81, 140, 149, 153, 283, 298, 304, 305, 319, 322], "intern": [4, 13, 55, 74, 153, 191, 314, 316], "frame": [4, 76], "wrap": [4, 70, 73, 81, 86], "becaus": [4, 37, 49, 55, 59, 76, 139, 142, 156, 286, 303, 304], "reli": [4, 9, 19, 54, 146, 303], "templat": [4, 9, 15, 28, 41, 81, 303], "inadequ": 4, "usual": [4, 9, 13, 19, 27, 38, 42, 45, 49, 57, 59, 63, 66, 67, 68, 76, 145, 149, 152, 219, 242, 285, 291, 303, 305, 306], "multipl": [4, 6, 12, 14, 17, 29, 30, 40, 48, 49, 53, 57, 62, 63, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 140, 141, 145, 156, 253, 291, 297, 302, 303, 306, 312], "label": [4, 6, 7, 13, 15, 20, 33, 41, 48, 53, 55, 65, 69, 71, 72, 74, 76, 81, 82, 83, 84, 92, 139, 142, 145, 151, 153, 156, 191, 195, 202, 206, 207, 209, 219, 220, 222, 223, 224, 225, 226, 268, 269, 291, 293, 294, 297, 298, 302, 304, 305, 318, 319, 322, 323], "cannot": [4, 27, 30, 42, 57, 59, 63, 76, 78, 81, 82, 141, 153, 210, 249, 250, 298, 304, 306, 317], "determin": [4, 37, 49, 57, 59, 63, 66, 70, 74, 75, 81, 82, 141, 145, 236, 239, 240, 241, 298], "reason": [4, 42, 55, 57, 63, 140, 141, 271], "jit": 4, "technologi": [4, 47, 49, 77], "compil": [4, 15, 31, 32, 34, 42, 49, 50, 53, 58, 71, 82, 94, 303, 304, 306, 312], "associ": [4, 6, 9, 29, 53, 57, 76, 225, 237, 283, 285, 291, 298, 303, 304], "runtim": [4, 6, 17, 23, 31, 49, 71, 73, 74, 75, 81, 82, 86, 303, 316, 317], "wrapper": [4, 52, 58, 60, 62, 75, 81, 94, 100, 153, 154, 303], "facilit": [4, 20, 50, 62, 63, 66, 76, 140, 303, 304], "task": [4, 6, 7, 14, 34, 37, 40, 49, 51, 59, 62, 63, 65, 67, 68, 69, 71, 73, 74, 76, 140, 151, 303], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 45, 47, 62, 71, 77, 80, 86, 92, 139, 141, 143, 144, 145, 149, 155, 291, 298, 303, 304, 305, 314, 325], "jar": [4, 8, 22, 23, 35, 82, 304, 314], "read": [4, 8, 20, 24, 37, 45, 52, 53, 56, 67, 70, 71, 72, 73, 139, 140, 145, 150, 151, 153, 189, 190, 289, 291, 292, 296, 298, 300, 302, 304, 322], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 48, 50, 51, 59, 64, 65, 71, 76, 77, 81, 82, 145, 149, 150, 297, 298, 302, 307, 314], "cmake": [4, 31, 32, 36, 42, 146], "script": [4, 32, 37, 78, 79, 110, 139, 140, 151, 154, 315, 321], "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 42, 50, 57, 58, 59, 68, 70, 71, 81, 82, 93, 94, 100, 101, 106, 131, 150, 151, 153, 210, 220, 222, 298, 300, 305], "figur": [4, 6, 9, 12, 24, 27, 30, 34, 49, 59, 63, 66, 72, 74, 75, 76, 141, 143, 274, 300], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 45, 48, 51, 55, 59, 61, 65, 70, 74, 75, 139, 140, 141, 145, 149, 194, 210, 230, 253, 287, 297, 304, 306, 308, 312], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 49, 55, 62, 63, 70, 72, 73, 74, 75, 76, 80, 145, 153, 161, 194, 242, 291, 300, 304, 307, 308, 312], "thei": [4, 6, 20, 24, 27, 30, 31, 45, 49, 59, 62, 68, 71, 74, 76, 78, 139, 140, 148, 153, 197, 205, 210, 238, 240, 241, 284, 285, 291, 297, 298, 300, 303, 304], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 40, 45, 48, 49, 51, 57, 62, 66, 70, 71, 72, 73, 74, 75, 76, 81, 83, 143, 145, 153, 290, 291, 297, 306], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 48, 49, 55, 66, 71, 74, 76, 82, 144, 149, 208, 213, 214, 215, 218, 249, 308], "object": [4, 15, 38, 50, 51, 52, 57, 58, 59, 63, 66, 70, 71, 72, 74, 76, 79, 81, 93, 106, 118, 132, 140, 142, 143, 144, 145, 148, 151, 154, 155, 169, 189, 190, 248, 288, 291, 293, 294, 296, 297, 302, 304, 314, 324], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 55, 57, 58, 59, 66, 76, 79, 84, 143, 144, 145, 148, 149, 294, 307, 322], "respons": [4, 9, 12, 16, 27, 34, 36, 37, 42, 49, 71, 81, 149, 152, 298, 300], "state": [4, 6, 9, 10, 12, 24, 27, 34, 49, 62, 74, 75, 77, 79, 150, 153, 210, 213, 214, 215, 216, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 245, 246, 247, 251, 283, 286, 288], "synchron": [4, 6, 10, 12, 14, 15, 71, 303], "explicitli": [4, 13, 81, 141, 210, 298, 304], "implicitli": [4, 92], "main": [4, 6, 30, 34, 37, 49, 55, 58, 59, 78, 139, 148, 151, 156, 298, 304, 323, 324], "logic": [4, 6, 9, 14, 16, 17, 49, 57, 59, 62, 73, 75, 79, 142, 302, 303, 304, 312, 314], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 42, 48, 50, 58, 59, 63, 66, 70, 71, 73, 74, 75, 76, 140, 141, 142, 143, 144, 145, 150, 151, 153, 291, 294, 298, 300, 302, 303, 304, 305, 312, 324], "send": [4, 6, 10, 18, 24, 50, 74, 84, 303, 314], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 70, 71, 74, 76, 84, 145, 149, 300, 314], "messagemanag": [4, 17, 314], "call": [4, 6, 12, 13, 16, 17, 19, 24, 42, 55, 57, 59, 66, 81, 84, 139, 141, 145, 148, 149, 153, 154, 186, 200, 201, 231, 242, 271, 283, 291, 294, 298, 302, 303, 304], "encourag": [4, 6, 15, 24, 37], "fork": 4, "repo": [4, 29, 37, 50, 73, 304, 315, 316], "much": [4, 6, 13, 19, 22, 42, 49, 57, 59, 141, 145, 303], "easier": [4, 32, 36, 37, 57, 73, 74, 75, 145, 298], "begin": [4, 15, 16, 30, 41, 45, 56, 59, 72, 83, 84, 230, 297, 303], "small": [4, 9, 11, 13, 20, 45, 59, 74, 75, 78, 156, 211, 212, 238, 281, 292, 298, 304], "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 59, 71, 75, 76, 78, 79, 82, 99, 131, 140, 153, 156, 169, 291, 298, 304, 311], "revis": [4, 14, 79], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 53, 62, 63, 76, 78, 79, 90, 91, 141, 153, 158, 159, 169, 227, 228, 229, 231, 285, 291, 300, 322, 324], "gradual": 4, "avoid": [4, 13, 55, 58, 303], "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 42, 45, 48, 49, 51, 54, 58, 59, 60, 62, 63, 66, 67, 68, 71, 72, 73, 77, 78, 82, 126, 140, 141, 143, 145, 147, 151, 152, 165, 189, 190, 210, 245, 303, 314], "singl": [4, 6, 7, 11, 14, 15, 20, 24, 27, 36, 37, 40, 42, 48, 53, 55, 57, 59, 64, 65, 67, 68, 71, 72, 74, 75, 82, 83, 139, 153, 164, 171, 193, 197, 202, 212, 217, 234, 240, 285, 287, 291, 298, 302, 306], "commit": [4, 79, 300], "python3": [4, 7, 23, 27, 28, 30, 31, 32, 35, 36, 40, 42, 50, 51, 64, 65, 72, 314, 315, 316, 317], "gsctl": [4, 32, 36, 40, 47, 50, 64, 315, 316], "py": [4, 15, 32, 36, 40, 50, 64, 139, 146, 151, 298, 304, 311, 314, 315, 316, 323], "cmakelist": 4, "txt": [4, 31, 35, 314], "artifact": [4, 17, 23, 29, 36, 50, 64, 311], "grape_engin": [4, 38, 116, 312], "togeth": [4, 9, 10, 20, 40, 49, 59, 68, 71, 79, 145, 149, 192], "share": [4, 6, 30, 31, 37, 59, 64, 71, 73, 74, 303, 305, 316], "bunch": [4, 40, 78, 81], "binari": [4, 15, 27, 31, 76, 311], "choos": [4, 6, 12, 22, 34, 40, 49, 57, 59, 62, 63, 71, 76, 139, 140, 230, 231, 269], "prefix": [4, 31, 36, 37, 42, 50, 64, 153, 285, 303, 322], "usr": [4, 304], "look": [4, 15, 18, 20, 27, 48, 59, 70, 86, 152, 297, 300, 304, 305], "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 42, 47, 48, 50, 70, 81, 82, 90, 113, 139, 140, 146, 151, 153, 189, 190, 241, 291, 293, 298, 300, 304, 305, 312, 314, 324], "investig": [4, 6], "ensur": [4, 6, 9, 32, 35, 36, 37, 49, 53, 55, 72, 78, 298], "correct": [4, 6, 14, 37, 38, 49, 145, 153, 156, 303], "unit": [4, 49, 59, 75, 149, 239, 240, 241, 304], "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 42, 48, 51, 59, 62, 71, 72, 73, 75, 76, 78, 145, 147, 303], "graphscope_hom": [4, 23, 316], "pwd": [4, 30, 151], "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 51, 52, 58, 64, 65, 70, 79, 146, 151, 316], "tmp": [4, 18, 19, 28, 38, 48, 50, 113, 118, 151, 298, 304, 312, 314, 317], "gstest": [4, 19, 22, 23, 30, 314, 316], "against": [4, 14, 37, 50, 82, 273], "compar": [4, 19, 49, 53, 55, 57, 59, 74, 79, 81, 82, 142, 210, 297], "ground": [4, 76], "truth": [4, 76], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 42, 47, 48, 49, 51, 54, 55, 57, 60, 62, 63, 66, 67, 68, 71, 73, 74, 76, 77, 78, 82, 86, 139, 142, 144, 148, 150, 151, 155, 210, 213, 220, 222, 231, 238, 239, 240, 241, 242, 250, 304, 305], "broad": [6, 73], "spectrum": [6, 73, 156, 283], "central": [6, 15, 45, 62, 63, 72, 73, 76, 77, 82, 145, 156, 268], "match": [6, 15, 49, 50, 51, 52, 53, 71, 72, 73, 82, 190, 210, 218, 220, 222, 249, 285, 322], "mine": [6, 15, 71, 73, 74], "philosophi": [6, 24, 73], "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 48, 49, 50, 51, 52, 55, 58, 60, 62, 63, 70, 71, 72, 73, 75, 84, 139, 140, 141, 143, 145, 148, 151, 210, 218, 230, 283, 304, 312, 324], "stronger": [6, 73], "flexibl": [6, 12, 13, 23, 54, 59, 62, 71, 72, 73, 298, 302], "flow": [6, 73, 74, 139, 281], "oper": [6, 9, 12, 15, 30, 31, 36, 42, 45, 47, 49, 51, 54, 55, 57, 62, 63, 66, 70, 71, 73, 74, 75, 76, 77, 82, 84, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 111, 112, 113, 115, 116, 119, 120, 121, 122, 140, 141, 142, 143, 144, 145, 147, 148, 150, 152, 153, 173, 252, 253, 291, 294, 296, 298, 300, 303, 304], "arbitrari": [6, 57, 59, 73, 143, 218, 222, 238, 239, 240, 241, 291, 294, 304, 322], "beyond": [6, 24, 73, 77, 251], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 40, 47, 48, 49, 50, 52, 53, 58, 59, 62, 64, 70, 73, 74, 75, 76, 79, 145, 146, 149, 151, 153, 169, 221, 285, 291, 298, 303, 304, 311, 315, 316], "divers": [6, 10, 12, 34, 47, 49, 73, 74, 140, 300], "easi": [6, 7, 12, 45, 48, 49, 51, 52, 58, 59, 60, 62, 65, 66, 70, 71, 72, 73, 77, 140, 145, 149, 311], "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 42, 45, 53, 55, 59, 62, 70, 71, 72, 73, 74, 75, 80, 84, 86, 139, 145, 153, 154, 293, 294, 300, 303, 308, 314, 318], "few": [6, 29, 42, 48, 73, 303], "satisfactori": [6, 73, 76], "major": [6, 12, 13, 14, 53, 74, 81], "recent": [6, 143, 304], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 42, 49, 60, 63, 66, 70, 71, 73, 74, 75, 76, 77, 78, 82, 83, 132, 143, 145, 147, 149, 153, 154, 295, 298, 300, 302, 314, 319, 324], "focu": [6, 40, 71, 75, 78, 149], "hand": [6, 30, 33, 49, 55, 57, 271], "point": [6, 13, 14, 22, 37, 49, 57, 66, 74, 139, 194, 219, 248, 251, 291, 304, 305, 306, 311], "breadth": [6, 82, 156], "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 42, 45, 49, 50, 51, 52, 53, 57, 58, 59, 63, 67, 68, 70, 72, 73, 75, 76, 82, 83, 139, 140, 145, 147, 149, 153, 156, 160, 190, 206, 209, 218, 231, 234, 245, 246, 247, 248, 249, 252, 285, 290, 291, 294, 297, 298, 300, 303, 304, 305, 306], "search": [6, 37, 47, 63, 71, 74, 76, 78, 82, 156, 320], "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 45, 71, 74, 77, 79, 82, 83, 156, 294, 297, 314], "shortest": [6, 7, 19, 24, 49, 72, 74, 82, 156, 306], "leav": [6, 59, 153, 191, 201], "varieti": [6, 12, 34, 45, 71, 78], "suffer": [6, 45], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 42, 45, 47, 55, 58, 59, 62, 63, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 86, 143, 145, 147, 224, 245, 302, 303, 305, 307], "limit": [6, 9, 13, 22, 42, 52, 53, 55, 60, 63, 74, 75, 76, 78, 79, 298, 317, 322], "phase": [6, 16, 23, 24, 140, 145], "propag": [6, 7, 9, 14, 36, 71, 72, 74, 76, 82, 145, 163, 253], "short": [6, 73, 78, 79, 171, 303, 304], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 30, 57, 59, 76, 150, 210, 233, 304, 322], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 62, 63, 71, 74, 76, 78, 146, 149, 291, 300, 304, 314, 315], "Such": [6, 13, 75, 78, 113, 118, 250, 259], "abstract": [6, 45, 62, 66, 69, 71, 72, 73, 139, 140, 147, 149, 150, 305], "bring": [6, 40], "product": [6, 12, 32, 42, 66, 71, 75, 78, 84, 140, 141, 145, 322], "sacrific": 6, "almost": [6, 22, 59, 226, 303], "infeas": 6, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 42, 59, 70, 72, 73, 78, 81, 83, 143, 145, 149, 150, 288, 297, 302, 304, 306, 307, 315, 317, 321], "At": [6, 12, 14, 15, 20, 34, 37, 49, 58, 59, 140, 150, 304, 306], "advanc": [6, 7, 15, 49, 65, 66, 73, 237], "pose": 6, "challeng": [6, 9, 44, 71, 303], "repres": [6, 9, 12, 15, 45, 49, 55, 59, 63, 65, 66, 69, 70, 71, 72, 73, 74, 76, 79, 81, 82, 83, 90, 117, 140, 141, 142, 143, 145, 149, 151, 153, 197, 230, 238, 239, 240, 241, 242, 250, 257, 260, 264, 272, 281, 283, 285, 286, 291, 295, 298, 303, 304], "non": [6, 9, 27, 57, 78, 81, 84, 142, 180, 181, 201, 220, 222, 225, 249, 253, 260, 278, 291, 292], "ones": [6, 9, 77, 82, 147], "distil": 6, "critic": [6, 13, 63, 82], "context": [6, 15, 17, 18, 20, 27, 31, 55, 73, 75, 82, 84, 89, 90, 91, 97, 98, 113, 118, 121, 122, 124, 133, 136, 149, 153, 156, 281, 296, 298, 303, 314], "fall": 6, "meet": [6, 15, 18, 37, 45, 49, 51, 66, 71, 76, 143, 144, 210, 239, 240, 241, 306, 308], "therefor": [6, 12, 15, 45, 49, 51, 53, 55, 57, 59, 63, 72, 139, 140, 145, 237, 303, 312], "fulfil": [6, 15, 18, 73], "ligra": 6, "By": [6, 13, 17, 20, 30, 36, 42, 45, 55, 57, 59, 60, 65, 70, 74, 76, 77, 140, 141, 156, 291, 300, 303, 312], "must": [6, 13, 24, 27, 30, 37, 42, 48, 57, 59, 71, 81, 83, 92, 140, 141, 143, 144, 145, 153, 155, 156, 169, 208, 210, 218, 221, 231, 233, 235, 238, 240, 242, 250, 253, 289, 291, 293, 297, 303, 304], "race": 6, "schedul": [6, 23, 36, 71, 73, 298], "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 40, 42, 48, 49, 50, 53, 55, 59, 70, 81, 82, 83, 100, 116, 141, 153, 210, 222, 234, 238, 248, 251, 269, 285, 291, 294, 297, 298, 303, 308, 311], "so": [6, 12, 13, 30, 37, 40, 42, 48, 49, 51, 54, 58, 59, 63, 66, 68, 70, 71, 73, 82, 86, 139, 145, 147, 166, 201, 206, 219, 220, 221, 224, 239, 240, 241, 252, 285, 291, 303, 304, 318], "middlewar": 6, "flashwar": 6, "hide": [6, 45], "automat": [6, 9, 12, 14, 34, 48, 49, 52, 55, 58, 62, 70, 71, 74, 75, 76, 78, 83, 151, 153, 291, 304, 306, 307, 324], "adapt": [6, 22, 49, 76, 78, 79, 306, 307], "70": [6, 15, 322], "40": [6, 15, 79, 141, 142, 144, 218, 284], "commonli": [6, 53, 57, 62, 66, 70], "now": [6, 7, 20, 23, 27, 48, 50, 53, 58, 59, 65, 82, 149, 222, 304, 306, 319], "succinct": [6, 55], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 42, 45, 47, 49, 59, 60, 61, 63, 66, 71, 74, 75, 76, 77, 78, 81, 86, 141, 142, 143, 145, 146, 147, 148, 291, 298, 308], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 57, 59, 70, 74, 75, 149, 153, 303, 305, 311, 315], "demonstr": [6, 16, 48, 49, 62, 67, 69, 71, 72, 74, 76, 78, 83, 139, 151, 153, 298, 303], "up": [6, 13, 20, 23, 37, 57, 59, 62, 64, 66, 77, 84, 149, 152, 190, 194, 218, 285, 303, 304, 321], "92": [6, 156], "bulk": [6, 15], "bsp": [6, 15], "paradigm": [6, 15, 62, 66, 71, 139, 145], "primari": [6, 15, 55, 71, 78, 304], "constitut": [6, 69, 70], "superstep": [6, 16, 17, 24, 84], "vertexsubset": [6, 15], "indic": [6, 13, 24, 37, 38, 48, 59, 70, 73, 74, 75, 79, 90, 140, 142, 145, 153, 197, 200, 210, 213, 214, 215, 216, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 238, 239, 240, 241, 242, 245, 246, 247, 251, 281, 283, 286, 288, 293, 303], "maintain": [6, 10, 14, 35, 36, 55, 57, 71, 74, 75, 304], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 49, 50, 63, 82, 84, 141, 142, 145, 151, 153, 154, 156, 186, 291, 298, 304], "describ": [6, 27, 36, 37, 38, 42, 48, 50, 59, 63, 64, 71, 75, 76, 83, 140, 143, 145, 150, 151, 190, 194, 210, 211, 212, 215, 220, 222, 223, 248, 249, 262, 269, 271, 285, 287, 288, 302, 303, 304, 312, 317], "vsize": [6, 15], "size_t": [6, 13, 41, 81, 84, 150, 300, 303], "vertexmap": [6, 13, 15, 41], "condit": [6, 9, 14, 24, 27, 38, 49, 59, 66, 73, 75, 79, 210, 239, 240, 241, 249, 250, 303], "f": [6, 20, 33, 48, 50, 65, 72, 145, 156, 243, 244, 290, 304, 312, 318], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 45, 50, 55, 57, 59, 63, 65, 66, 69, 71, 72, 76, 79, 81, 110, 118, 126, 139, 145, 147, 151, 153, 154, 238, 240, 242, 283, 295, 297, 304, 314, 315, 318, 323], "form": [6, 20, 49, 54, 55, 57, 59, 63, 66, 75, 76, 82, 139, 141, 142, 145, 192, 212, 242, 257, 259, 262, 265, 269, 291, 297], "special": [6, 20, 59, 71, 140, 259, 275, 285, 308], "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 48, 49, 51, 59, 65, 72, 82, 83, 156, 166, 197, 201, 203, 214, 220, 222, 224, 226, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 270, 279, 283, 284, 288, 291, 314], "omit": [6, 70, 83, 164, 305, 324], "filter": [6, 15, 23, 49, 60, 70, 75, 82, 83, 283, 297, 303, 322], "semant": [6, 49, 66, 144, 303], "unchang": 6, "edgemap": [6, 15], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 41, 42, 48, 50, 51, 53, 59, 63, 64, 66, 70, 72, 74, 75, 76, 78, 81, 82, 83, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 136, 138, 141, 142, 143, 144, 145, 151, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 293, 295, 297, 298, 300, 302, 303, 304, 306, 311, 314, 315, 316, 322, 324], "satisfi": [6, 9, 24, 32, 51, 59, 75, 78, 82, 86, 150, 156, 208, 238, 242, 249, 250, 308], "h": [6, 9, 15, 16, 20, 36, 40, 63, 64, 79, 90, 156, 167, 170, 191, 218, 222, 238, 283, 290, 291, 303, 315, 320], "conduct": [6, 15, 59, 79, 145], "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 45, 48, 49, 53, 55, 57, 59, 60, 61, 62, 66, 70, 71, 72, 74, 75, 76, 77, 78, 140, 145, 215, 220, 222, 225, 230, 233, 238, 283, 291, 300, 303, 308], "dynam": [6, 12, 34, 49, 62, 71, 73, 74, 76, 82, 93, 106, 211, 212, 294, 300, 304], "even": [6, 8, 20, 49, 59, 73, 74, 147, 153, 156, 220, 230, 248, 250, 251, 291, 303], "virtual": [6, 9, 23, 51, 72, 81, 149, 150], "gener": [6, 9, 13, 14, 17, 27, 34, 40, 45, 49, 55, 57, 59, 63, 66, 70, 71, 72, 73, 74, 76, 82, 91, 139, 140, 141, 145, 151, 153, 155, 156, 291, 292, 296, 298, 300, 302, 303, 304, 305, 306, 312], "index": [6, 12, 13, 31, 41, 47, 63, 66, 70, 76, 81, 82, 83, 141, 142, 150, 153, 155, 156, 165, 189, 190, 220, 222, 223, 224, 226, 303, 320, 324], "pre": [6, 27, 29, 32, 42, 49, 59, 65, 69, 72, 75, 298, 317], "conveni": [6, 29, 42, 48, 59, 63, 73, 145, 289, 291], "revers": [6, 20, 53, 59, 99, 102, 155, 156, 234, 242, 291], "exchang": [6, 14], "chosen": [6, 220, 227, 228, 229, 230, 231, 242, 246, 286], "temporari": 6, "sequenti": [6, 12, 14, 18, 34, 36, 71, 189, 190, 226, 303, 308, 314], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 42, 48, 74, 146, 149, 298, 304, 316], "mode": [6, 15, 27, 32, 36, 42, 58, 67, 70, 81, 82, 83, 132, 139, 143, 149, 151, 153, 293, 298, 308, 311, 312, 324], "push": [6, 12, 34, 37, 49, 74, 149], "anoth": [6, 9, 10, 20, 36, 49, 57, 59, 70, 71, 72, 76, 84, 220, 253, 291, 303, 306, 307], "final": [6, 9, 13, 14, 17, 19, 24, 49, 59, 63, 68, 71, 75, 81, 139, 145, 147, 233, 253, 291, 305], "reduc": [6, 9, 13, 14, 15, 17, 49, 58, 66, 140, 143, 239, 240, 241, 291, 304], "commut": 6, "alwai": [6, 59, 68, 83, 187, 188, 227, 229, 248, 251, 285, 303, 311], "ctrue": 6, "doe": [6, 11, 12, 13, 20, 34, 37, 57, 66, 70, 73, 75, 78, 142, 145, 150, 156, 175, 176, 218, 220, 222, 237, 248, 291, 293, 298, 303], "sometim": [6, 27, 59, 70, 201, 261], "similarli": [6, 19, 20, 50, 59, 74, 156, 194, 220, 222, 238, 241, 248, 291, 312], "suppli": [6, 42, 55, 240], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 48, 59, 82, 143, 145, 148, 151, 156, 166, 211, 212, 220, 222, 223, 225, 226, 227, 229, 234, 238, 239, 240, 241, 242, 245, 282, 291, 293, 298], "auxiliari": [6, 15, 16, 59], "union": [6, 153, 219, 319], "minu": [6, 194], "intersect": [6, 75, 292], "add": [6, 15, 19, 20, 23, 29, 33, 37, 42, 59, 70, 72, 81, 84, 91, 92, 101, 140, 151, 153, 158, 159, 160, 210, 217, 230, 248, 251, 253, 269, 291, 294, 298, 303, 304, 315, 318, 319, 324], "getv": [6, 49], "besid": [6, 10, 38, 150, 151], "combin": [6, 14, 18, 34, 47, 49, 59, 62, 71, 72, 75, 139, 140, 141, 145, 291, 298, 307, 314], "primit": [6, 73], "natur": [6, 12, 13, 24, 45, 55, 59], "multi": [6, 31, 47, 55, 59, 62, 63, 66, 71, 73, 75, 76, 77, 78, 82, 143, 145, 147, 300, 304], "tradit": [6, 49, 54, 55, 76, 268], "awkward": 6, "supplement": 6, "perspect": [6, 24, 73], "whole": [6, 9, 12, 24, 34, 48, 49, 59, 63, 71, 73, 75, 76, 147, 304, 307], "pick": [6, 59, 79, 233, 248, 251], "transfer": [6, 45, 47, 62, 75, 77, 322], "intuit": [6, 49, 55, 62, 75, 298], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 47, 49, 53, 59, 62, 63, 66, 70, 71, 74, 76, 77, 79, 83, 139, 145, 147, 149, 150, 156, 197, 291, 297, 298, 303, 304], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 49, 51, 59, 65, 66, 74, 76, 79, 140, 141, 142, 145, 151], "input": [6, 9, 12, 13, 15, 17, 22, 24, 45, 63, 65, 66, 69, 70, 71, 72, 75, 76, 82, 101, 105, 126, 139, 140, 141, 142, 143, 145, 148, 151, 154, 156, 224, 238, 240, 242, 248, 249, 283, 291, 294, 295, 298, 303, 304, 318, 323], "second": [6, 13, 27, 45, 53, 59, 63, 70, 75, 78, 79, 83, 147, 236, 237, 245, 246, 247, 248, 252, 290, 291, 298, 304, 305], "fundament": [6, 9, 49, 73], "modul": [6, 8, 9, 15, 19, 20, 23, 47, 49, 57, 62, 71, 72, 73, 75, 76, 152, 290, 320], "produc": [6, 38, 40, 49, 79, 82, 91, 139, 151, 153, 154, 156, 210, 224, 226, 234, 295, 304], "abil": [6, 12, 34, 55, 59, 66, 71], "activ": [6, 9, 23, 24, 30, 51, 68, 72, 76, 151, 298], "dens": [6, 63, 74, 76, 142, 151], "spars": [6, 13, 63, 76, 139, 142, 218, 291, 294], "dispatch": [6, 34, 71, 81], "kernel": [6, 227], "auto": [6, 14, 16, 34, 41, 59, 84, 300, 303, 305], "switch": [6, 12, 23, 34, 58, 74, 248, 251, 303], "prove": [6, 24, 283], "world": [6, 9, 13, 45, 57, 59, 71, 72, 74, 81, 156, 211, 212, 238], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 13, 16, 20, 23, 30, 37, 57, 59, 70, 73, 141, 142, 143, 149, 150, 153, 217, 224, 229, 237, 238, 242, 248, 291, 297, 300, 303], "co": [6, 23, 45, 72, 140, 318], "lead": [6, 17, 24, 42, 59, 76, 220, 222], "master": [6, 19, 22, 23, 24, 31, 314], "broadcast": [6, 81, 303], "mirror": [6, 7, 10, 24, 27, 32, 51, 64, 65], "On": [6, 27, 30, 37, 49, 55, 57, 82, 225, 288, 303], "contrari": 6, "total": [6, 8, 12, 34, 45, 48, 49, 50, 58, 59, 84, 166, 210, 233, 250, 256, 291, 305, 318], "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 42, 49, 50, 52, 54, 55, 57, 58, 59, 72, 79, 90, 139, 141, 142, 144, 145, 146, 156, 162, 167, 169, 170, 175, 176, 194, 196, 197, 206, 214, 217, 219, 226, 235, 237, 242, 251, 258, 261, 262, 268, 269, 275, 277, 284, 285, 286, 291, 293, 294, 298, 303, 304, 305, 306, 307, 314, 317, 318, 322], "redund": 6, "programm": [6, 17, 71, 86], "scope": [6, 23, 37, 73, 153], "disabl": [6, 31, 50, 79, 298], "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 45, 49, 50, 54, 55, 59, 60, 61, 62, 63, 64, 71, 74, 75, 76, 78, 86, 143, 145, 146, 147, 149, 210, 303, 311], "katz": [6, 82, 156], "eigenvector": [6, 82, 156, 283], "harmon": 6, "coeffici": [6, 19, 82, 156], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 42, 51, 55, 58, 65, 71, 73, 78, 79, 82, 146, 153, 211, 212, 227, 229, 242, 248, 269, 291, 300, 302, 303, 304, 311, 314, 317], "color": [6, 19, 20, 59, 291], "biconnect": 6, "bridg": [6, 47, 73], "seven": [6, 151, 190], "strongli": [6, 36, 51, 59, 145, 230], "cut": [6, 12, 24, 276], "k": [6, 20, 37, 41, 50, 59, 63, 71, 72, 73, 75, 82, 83, 143, 156, 193, 201, 211, 212, 213, 214, 216, 218, 219, 220, 227, 230, 239, 240, 241, 243, 246, 247, 248, 249, 250, 251, 256, 291, 297, 303, 318, 322], "decomposit": [6, 72, 156], "degeneraci": 6, "onion": 6, "minim": [6, 11, 74, 151, 242, 243, 264, 290], "domin": [6, 156, 303], "cycl": [6, 73, 75, 78, 81, 158, 194, 195, 198, 209, 231, 235, 256, 258, 274, 278], "triangl": [6, 33, 59, 72, 75, 82, 156, 253, 257, 261, 265, 277, 292, 314, 318], "acycl": [6, 73, 285], "cyclic": [6, 71, 73, 75, 198], "diamond": [6, 261], "rectangl": 6, "tail": [6, 48, 57, 59, 73, 312], "approxim": [6, 210, 283], "densest": 6, "articlerank": 6, "hyperlink": [6, 82, 156], "induc": [6, 55, 57, 82, 104, 167, 170, 186, 234, 291], "topic": [6, 7, 51, 65, 72, 82], "person": [6, 7, 30, 33, 48, 51, 55, 57, 59, 70, 72, 153, 271, 280, 291, 294, 297, 303, 304, 305, 319, 324], "standard": [6, 35, 47, 49, 59, 60, 70, 73, 154, 224, 239, 240, 241, 303], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 59, 206, 209, 234], "four": [6, 9, 12, 20, 69, 72, 73, 81, 139, 142, 151, 238, 242, 303], "random": [6, 28, 31, 66, 68, 71, 79, 143, 144, 145, 148, 151, 192, 203, 210, 213, 214, 215, 216, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240, 241, 242, 245, 246, 247, 248, 251, 283, 286, 288, 290, 298], "give": [7, 12, 13, 31, 34, 51, 59, 65, 70, 79, 145, 153, 218, 238, 258, 290, 291], "quick": [7, 51, 65, 304], "ll": [7, 13, 20, 29, 65], "pip": [7, 27, 30, 31, 32, 42, 48, 51, 65, 72, 149, 304, 311, 317, 321], "upgrad": [7, 23, 32, 51, 65, 321], "occur": [7, 9, 14, 32, 42, 57, 65, 304], "veri": [7, 13, 32, 45, 49, 51, 59, 62, 65, 70, 72, 76, 141, 143, 314], "speed": [7, 32, 59, 64, 65, 73, 152, 218, 291], "try": [7, 17, 23, 32, 36, 40, 42, 45, 51, 58, 64, 65, 68, 69, 72, 80, 82, 169, 210, 294, 298, 318], "site": [7, 32, 51, 65], "aliyun": [7, 27, 32, 51, 64, 65, 79, 298, 315], "pypi": [7, 27, 32, 42, 51, 52, 65, 317], "trust": [7, 27, 32, 51, 65], "host": [7, 15, 17, 22, 23, 27, 28, 32, 45, 50, 51, 58, 65, 70, 79, 81, 82, 83, 294, 298, 314, 322, 324], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 42, 48, 51, 65, 72, 149, 238, 240, 291, 294, 304, 311, 316], "everyth": [7, 65, 72, 303], "job": [7, 13, 23, 45, 49, 65, 71, 72, 73, 77, 81, 116, 140, 298, 304], "modern_graph": [7, 30, 33, 48, 51, 72, 305], "gremlin": [7, 29, 33, 42, 45, 48, 49, 50, 51, 56, 60, 63, 66, 71, 72, 73, 77, 78, 80, 110, 145, 154, 298, 304, 312, 317, 318, 320, 325], "apach": [7, 17, 22, 23, 31, 47, 55, 58, 61, 62, 71, 72, 75, 302, 304, 308, 314, 316, 320], "tinkerpop": [7, 45, 47, 48, 50, 51, 58, 62, 72, 73, 154, 304, 320], "org": [7, 17, 23, 42, 52, 54, 58, 65, 68, 69, 72, 74, 82, 156, 214, 215, 216, 230, 233, 240, 253, 257, 258, 259, 260, 262, 263, 264, 270, 271, 272, 273, 275, 276, 277, 278, 283, 304, 314, 317, 318, 322], "doc": [7, 16, 17, 30, 37, 72, 73, 81, 85, 87, 153, 240], "tutori": [7, 8, 12, 14, 24, 48, 50, 51, 56, 62, 67, 70, 72, 74, 76, 151, 240, 308], "trigger": [7, 14, 15, 18, 37, 66, 72, 92, 306, 311], "ret": [7, 18, 58, 72, 314, 319], "selector": [7, 15, 33, 38, 72, 81, 83, 91, 97, 98, 108, 109, 113, 121, 122, 153, 296, 298, 314, 319], "homogen": [7, 63, 70, 72, 76, 141], "pg": [7, 72, 82, 298, 303], "none": [7, 9, 20, 27, 31, 53, 68, 70, 72, 82, 83, 90, 97, 98, 101, 104, 108, 109, 110, 111, 113, 116, 118, 121, 122, 126, 132, 134, 138, 139, 140, 145, 153, 154, 155, 156, 164, 168, 170, 171, 175, 176, 185, 186, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 283, 285, 286, 288, 291, 293, 294, 295, 298, 303, 304, 319, 323, 324], "know": [7, 8, 30, 33, 38, 48, 56, 57, 59, 67, 70, 72, 75, 140, 141, 149, 153, 304, 305, 319, 322, 324], "src": [7, 13, 15, 16, 17, 18, 30, 34, 41, 45, 55, 58, 65, 66, 69, 70, 72, 82, 83, 90, 139, 141, 153, 297, 300, 303, 304, 306, 314, 318, 323, 324], "our": [7, 12, 13, 17, 32, 34, 36, 37, 40, 45, 49, 53, 55, 64, 72, 74, 75, 76, 78, 79, 80, 146, 147, 156, 304, 306, 314], "learn": [7, 27, 32, 36, 37, 38, 40, 45, 49, 51, 62, 66, 67, 68, 73, 74, 77, 80, 134, 140, 143, 144, 145, 146, 149, 151, 296, 298, 318, 320], "technic": [7, 65, 147, 285, 291], "disaggreg": [7, 36], "deploy": [7, 29, 30, 33, 42, 45, 50, 59, 71, 77, 141, 151, 298, 304], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 45, 48, 50, 54, 58, 59, 60, 62, 63, 71, 72, 73, 74, 76, 77, 78, 141, 143, 145, 147, 152, 220, 231, 238, 290, 303], "usag": [7, 17, 31, 32, 36, 37, 57, 59, 60, 64, 65, 66, 83, 142, 143, 144, 148, 153, 210, 291, 298, 304, 305], "section": [8, 13, 27, 29, 56, 59, 63, 67, 71, 145, 146, 153, 190, 303, 304], "assum": [8, 23, 27, 30, 48, 56, 59, 67, 72, 140, 153, 189, 250, 289, 291, 298, 303, 318], "getting_start": [8, 56, 67], "most": [8, 9, 13, 15, 22, 33, 38, 42, 49, 53, 57, 59, 63, 70, 72, 74, 76, 78, 79, 83, 139, 141, 145, 147, 149, 153, 211, 212, 236, 239, 240, 241, 304], "suffici": [8, 17, 42, 71, 140], "louvain": [8, 74, 82, 314], "social": [8, 45, 50, 59, 71, 74, 76, 79, 218, 268, 283, 292], "scientist": [8, 62, 78], "familiar": [8, 14, 16, 29, 49], "manipul": [8, 11, 19, 20, 57, 59, 62, 75, 78, 80, 81, 291], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 70, 81, 143, 144, 148, 298, 314], "pydata": [8, 77], "eco": 8, "still": [8, 24, 27, 34, 38, 45, 59, 74, 169, 298, 303, 304], "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 45, 55, 59, 61, 63, 66, 70, 76, 81, 140, 143, 145, 146, 147, 148, 283, 291, 294, 298, 304, 308], "migrat": [8, 49, 65, 68, 69, 72, 73, 78, 300, 318], "transpar": [8, 71], "don": [8, 17, 23, 30, 33, 36, 37, 42, 48, 59, 92, 185, 291, 304], "autom": [9, 29, 73], "abl": [9, 24, 27, 48, 73, 144, 248, 303, 304], "batch": [9, 12, 19, 50, 58, 63, 66, 73, 76, 139, 142, 144, 145, 147, 149, 151, 155, 304, 323], "counterpart": [9, 62, 73], "redesign": [9, 73], "underli": [9, 45, 49, 59, 73, 147, 303], "equip": [9, 61, 62, 73, 79, 308], "polici": [9, 42, 73, 81, 298], "memori": [9, 12, 23, 24, 27, 34, 42, 45, 47, 55, 58, 62, 64, 67, 68, 71, 73, 74, 76, 77, 78, 79, 139, 140, 141, 147, 151, 153, 291, 298, 304, 307, 316, 317], "todai": 9, "static": [9, 16, 31, 58, 81, 304, 306], "recomput": 9, "costli": 9, "consum": [9, 42, 76, 147, 150], "especi": [9, 70], "trillion": 9, "commerc": [9, 71, 74], "constantli": 9, "issu": [9, 17, 32, 37, 42, 45, 48, 51, 58, 73, 74, 78, 214, 215, 216, 280, 317], "involv": [9, 13, 37, 40, 45, 49, 59, 63, 66, 71, 74, 75, 76, 77, 78], "adjust": [9, 12, 42], "old": [9, 12, 14, 32, 34, 298], "typic": [9, 24, 45, 55, 57, 59, 71, 74, 75, 78, 140, 145, 220, 291, 297, 303], "often": [9, 37, 45, 48, 58, 71, 74, 75, 76, 78, 141, 142, 145, 291, 304, 312], "overlap": [9, 298], "intervent": 9, "burden": [9, 15, 141], "expert": 9, "light": 9, "overal": [9, 76], "verifi": [9, 27, 38, 45, 48, 50, 53, 79, 145], "characterist": [9, 55, 66, 71, 76, 139, 144], "deduc": [9, 153, 324], "appropri": [9, 27, 40, 49, 63, 71, 76, 139], "record": [9, 13, 48, 51, 52, 59, 72, 150, 300, 304], "part": [9, 13, 37, 45, 49, 57, 63, 66, 73, 145, 146, 149, 151, 274, 291, 303, 304], "intermedi": [9, 12, 17, 49, 59, 62, 71, 73], "deliv": [9, 322], "There": [9, 10, 12, 34, 37, 38, 42, 48, 49, 59, 72, 74, 75, 76, 82, 141, 144, 145, 147, 291, 297, 298, 303, 304], "reshap": [9, 151], "eas": [9, 12, 34, 51, 76, 78, 79], "achiev": [9, 12, 20, 24, 27, 34, 59, 71, 74, 79, 300], "decid": [9, 141, 238], "due": [9, 42, 71, 78, 145], "among": [9, 49, 59, 71, 78, 81, 150, 156, 285, 304], "fetch": [9, 15, 17, 298, 304, 314], "suffic": 9, "replai": [9, 66, 73, 300], "affect": [9, 13, 30, 36, 37, 291], "area": [9, 15, 242, 288], "readili": 9, "obtain": [9, 14, 17, 29, 30, 49, 50, 52, 58, 62, 63, 66, 69, 72, 76, 140, 144, 145, 147, 266, 269, 285, 291, 298, 304], "simpli": [9, 17, 20, 48, 59, 70, 72, 145, 213, 217, 291], "coincid": 9, "idea": [9, 37, 63, 76, 86, 147], "invalid": [9, 153, 298], "miss": [9, 37, 143, 153, 201, 298], "comparison": [9, 19, 53, 57, 59, 62, 78, 79], "those": [9, 29, 48, 50, 53, 55, 59, 70, 80, 143, 153, 156, 167, 196, 198, 200, 291, 293, 297], "although": [9, 12, 14, 22, 34, 45, 72, 86, 190, 303, 304], "solut": [9, 31, 42, 75, 76, 78, 156, 317], "enough": [9, 66, 140, 143, 210, 298, 302], "caus": [9, 14, 22, 32, 37, 42, 58, 65, 76, 141, 147, 153, 190], "overwhelm": 9, "overhead": [9, 13, 78, 140, 141], "mf": 9, "delta": [9, 12, 13, 33, 37, 82, 153], "php": 9, "mp": 9, "cc": [9, 303, 319], "sswp": 9, "mv": 9, "track": 9, "gcn": [9, 62, 66, 76, 80, 139, 143, 147, 151, 318, 320, 323, 325], "commnet": 9, "me": 9, "keep": [9, 59, 66, 84, 145, 153, 248, 251, 304], "graphsag": [9, 62, 66, 72, 76, 80, 139, 143, 145, 147, 151, 320, 323, 325], "gin": [9, 76], "vldb": [9, 314, 320], "paper": [9, 14, 24, 63, 65, 68, 69, 71, 72, 73, 79, 151, 156, 288, 298, 314, 318], "publish": [9, 14, 24, 29, 71, 72], "2021": [9, 73], "denot": [9, 57, 59, 144, 219, 304], "w": [9, 58, 82, 156, 218, 224, 238, 241, 243, 248, 251, 253, 281, 291, 293, 304, 322], "respect": [9, 16, 38, 47, 49, 53, 57, 70, 71, 72, 75, 76, 82, 101, 118, 126, 142, 145, 156, 197, 210, 257, 291, 297, 303, 304], "initi": [9, 16, 18, 19, 50, 59, 74, 76, 81, 140, 141, 151, 153, 155, 156, 230, 232, 233, 291, 294, 304, 308, 314], "init_v": 9, "init_m": 9, "aggreg": [9, 49, 53, 60, 76, 84, 139, 145, 147, 151, 303, 322], "vector": [9, 41, 63, 69, 72, 76, 81, 84, 139, 147, 149, 156, 238, 242], "element": [9, 13, 53, 57, 59, 74, 81, 140, 143, 145, 153, 156, 186, 218, 263, 285, 297, 298, 303], "specifi": [9, 16, 20, 23, 24, 30, 36, 48, 53, 55, 57, 62, 66, 72, 74, 82, 84, 90, 97, 98, 108, 109, 113, 117, 121, 122, 138, 139, 140, 142, 145, 148, 153, 155, 156, 167, 175, 176, 197, 210, 220, 222, 223, 226, 227, 234, 238, 239, 240, 241, 242, 248, 251, 253, 256, 269, 288, 291, 293, 297, 298, 304, 305], "addition": [9, 12, 14, 36, 63, 69, 71, 73, 75, 78, 147, 156, 303, 312], "correspond": [9, 10, 13, 15, 17, 18, 37, 40, 49, 55, 57, 59, 62, 66, 70, 75, 78, 82, 116, 139, 140, 141, 142, 144, 145, 149, 153, 156, 189, 190, 220, 222, 223, 224, 225, 226, 238, 284, 285, 287, 291, 293, 294, 300, 304, 312], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 41, 81, 300, 303, 304, 305, 314], "m1": [9, 42, 51, 192, 317, 321], "m2": [9, 192], "below": [9, 10, 12, 20, 34, 35, 36, 37, 66, 71, 72, 74, 75, 76, 79, 140, 143, 145, 148, 151, 190, 220, 222, 256, 291, 298, 304], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 72, 79, 81, 149, 304, 314, 318], "dbl_max": 9, "backend": [9, 27, 29, 62, 65, 71, 72, 76, 153, 291, 298, 305, 318], "seamless": [9, 45, 77, 304], "block": [9, 42, 49, 142, 218, 304], "spawn": 9, "adopt": [9, 78, 143, 304], "csc": [9, 302], "csr": [9, 13, 41, 153, 302, 305], "sent": [9, 10, 14, 16, 24, 58], "mainten": [9, 303], "preserv": [9, 13, 83, 153, 253, 283], "effect": [9, 36, 37, 45, 57, 58, 66, 71, 76, 143, 222, 291, 304], "readi": [9, 30, 32, 37, 42, 45, 50, 58, 71, 141, 143, 298, 304, 312], "accept": [9, 156, 238, 242, 304, 305], "insert": [9, 14, 49, 111, 304], "newli": [9, 40], "particular": [9, 37, 53, 57, 82, 142, 145, 220], "incid": [9, 20, 55, 57, 59, 167, 168, 210, 232, 281, 291], "encod": [9, 13, 53, 55, 82, 140, 145, 151, 153, 155, 293, 304, 323], "dummi": 9, "furthermor": [9, 58, 59, 62, 71, 78], "proprieti": 9, "deduct": 9, "techniqu": [9, 34, 66, 73, 74, 145], "cancel": 9, "compens": 9, "whose": [9, 24, 59, 143, 145, 156, 161, 181, 263, 267, 283, 285, 286, 302, 303], "proce": [9, 210, 304], "inner": [10, 13, 16, 41, 59, 60, 84, 153, 303], "outer": [10, 14, 41, 53, 84, 206, 303], "cross": [10, 55, 86, 266], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 42, 48, 55, 59, 68, 71, 72, 74, 75, 79, 81, 82, 83, 90, 92, 94, 110, 117, 134, 142, 153, 191, 193, 194, 196, 198, 200, 201, 203, 205, 206, 209, 220, 222, 223, 225, 227, 228, 229, 231, 235, 236, 237, 243, 244, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 286, 293, 298, 303, 304, 312], "5": [10, 13, 19, 20, 31, 42, 50, 57, 59, 65, 66, 68, 69, 72, 75, 79, 139, 142, 144, 145, 146, 148, 151, 156, 162, 167, 169, 175, 194, 197, 210, 214, 215, 216, 218, 219, 227, 229, 236, 237, 238, 239, 241, 242, 256, 257, 259, 260, 261, 262, 264, 265, 268, 270, 272, 274, 275, 281, 286, 291, 297, 298, 304, 306, 312, 317, 318, 322], "9": [10, 31, 48, 51, 59, 72, 140, 156, 194, 196, 242, 260, 268, 281, 286, 321], "12": [10, 20, 32, 42, 51, 59, 79, 82, 140, 141, 142, 144, 146, 158, 159, 160, 196, 258, 259, 263, 267, 271, 277, 315, 317, 322], "split": [10, 57, 59, 68, 69, 140, 141, 298, 304], "roughli": 10, "across": [10, 14, 34, 35, 36, 55, 71, 73, 74, 78, 303, 305], "divid": [10, 53, 59, 63, 71, 82, 140, 143, 147, 148, 156, 302], "place": [10, 18, 19, 36, 48, 59, 149, 150, 153, 218, 238, 239, 240, 241, 242, 271, 289], "itself": [10, 20, 22, 37, 57, 59, 63, 70, 71, 84, 139, 141, 297, 298, 303], "replic": [10, 50, 232], "resid": [10, 14, 38], "j": [10, 31, 41, 82, 151, 156, 189, 190, 211, 212, 220, 222, 223, 225, 231, 242, 245, 246, 247, 269, 303], "outcom": 10, "outgo": [10, 13, 16, 24, 57, 59, 75, 84, 145, 156, 291, 303], "incom": [10, 13, 14, 16, 34, 57, 59, 81, 84, 156], "consid": [10, 15, 18, 27, 37, 59, 66, 74, 82, 83, 140, 141, 156, 220, 283, 300, 303], "vice": [10, 238], "versa": [10, 238], "compani": [10, 303], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 45, 57, 70, 78, 140, 141, 145, 148, 303, 304], "regardless": [10, 73, 140, 236, 303], "friendli": [11, 12, 37, 47, 62, 74, 76, 77, 78], "research": [11, 66, 76, 281, 298], "particularli": [11, 76, 283], "field": [11, 27, 30, 33, 38, 48, 66, 68, 69, 70, 72, 143, 147, 151, 153, 237, 298, 304, 315, 318], "scienc": [11, 245, 268], "solv": [11, 24, 37, 42, 44, 59, 74], "recast": [12, 14, 34], "ga": 12, "plug": [12, 34, 71], "minor": [12, 14, 34, 62, 71, 76, 79, 306], "cope": [12, 34], "life": [12, 32, 34, 48, 71], "extrem": [12, 27, 71, 147, 192, 203, 303], "fashion": [12, 20], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 49, 55, 57, 59, 62, 63, 66, 73, 74, 76, 78, 79, 81, 82, 84, 142, 143, 145, 147, 193, 194, 195, 206, 209, 217, 263, 285, 298, 300, 302, 303, 304, 305], "format": [12, 13, 20, 22, 34, 35, 45, 47, 59, 63, 70, 76, 77, 79, 82, 110, 117, 139, 142, 145, 147, 150, 151, 153, 154, 291, 293, 298, 300, 316], "unifi": [12, 34, 45, 47, 49, 140, 300], "care": [12, 34, 59, 149, 150, 303], "foreign": [12, 303], "ecosystem": [12, 47, 51, 61, 62, 75, 78, 308], "freedom": 12, "accord": [12, 19, 36, 42, 48, 49, 57, 59, 63, 70, 71, 75, 76, 81, 143, 145, 149, 210, 218, 230, 231, 300, 304], "demand": [12, 49, 74, 303, 304, 308], "sdk": [12, 18, 42, 48, 52, 60, 61, 62, 74, 75, 78, 86, 296, 304, 308, 314], "domain": [12, 71, 76, 238, 239, 240, 241, 242], "dedic": 12, "treat": [12, 14, 20, 34, 59, 153, 291, 293, 298], "immut": [12, 34, 47, 55, 73], "persist": [12, 15, 30, 34, 42, 47, 48, 71, 73, 78, 302], "fortun": [12, 20, 45], "grin": [12, 47], "awar": [12, 37, 42, 48, 73], "introduct": [12, 34, 60, 74, 144, 145, 148, 156, 201, 283, 303], "foundat": [12, 71], "visit": [12, 29, 59, 75, 140], "meanwhil": [12, 45, 62, 76, 303], "compress": [12, 13, 72, 82, 140, 256], "pipelin": [12, 34, 62, 71, 74, 78, 307], "balanc": [12, 141, 191], "link": [12, 31, 37, 38, 42, 44, 49, 55, 63, 76, 79, 82, 153, 156, 193, 214, 216, 217, 227, 228, 229, 288, 291, 298], "popular": [12, 22, 29, 45, 70, 72, 75, 76, 139, 151, 304], "freeli": [12, 24], "background": [12, 44], "interoper": [12, 303], "panda": [12, 45, 81, 83, 97, 108, 153, 291, 320], "mar": [12, 27, 45, 57, 73, 298], "fastffi": [12, 86], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 42, 48, 53, 54, 55, 57, 60, 61, 62, 71, 73, 75, 78, 81, 192, 203, 210, 286, 289, 291, 308, 314], "emploi": [12, 24, 34, 69, 73, 74], "captur": [12, 76], "20": [12, 13, 27, 29, 32, 34, 48, 51, 57, 59, 62, 79, 82, 83, 141, 142, 144, 153, 210, 238, 239, 260, 262, 291, 314, 315, 321, 322], "100": [12, 34, 59, 65, 68, 69, 72, 82, 151, 156, 213, 220, 224, 231, 240, 291, 298, 318, 322], "build": [12, 15, 31, 34, 35, 37, 42, 49, 58, 62, 63, 70, 73, 81, 82, 92, 94, 141, 145, 147, 149, 150, 153, 239, 240, 241, 283, 298, 300, 311, 316, 323], "been": [12, 17, 23, 24, 28, 29, 33, 37, 42, 49, 50, 51, 57, 59, 61, 63, 71, 73, 74, 75, 76, 78, 82, 131, 143, 145, 153, 154, 156, 210, 233, 283, 295, 308], "go": [13, 64, 151, 218, 271, 304], "impact": [13, 75], "dive": 13, "arrowfrag": [13, 16, 81, 305], "vineyard": [13, 15, 16, 23, 28, 31, 33, 41, 42, 47, 48, 55, 62, 67, 68, 71, 77, 78, 81, 83, 113, 118, 121, 122, 153, 154, 298, 303, 304, 312, 314, 317, 318, 319, 322, 324], "basic": [13, 16, 20, 57, 75, 139, 142, 147, 149, 150, 151, 210, 220, 225, 297], "member": [13, 16, 59, 81, 281], "string": [13, 17, 23, 33, 48, 53, 55, 70, 81, 82, 84, 89, 126, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 153, 155, 156, 171, 175, 176, 185, 283, 285, 287, 291, 293, 300, 303, 304, 305, 314, 322, 324], "consecut": 13, "hashmap": [13, 41, 153], "arrai": [13, 17, 41, 53, 63, 70, 76, 81, 82, 83, 142, 143, 145, 148, 151, 291, 294, 306, 314], "o2g_": 13, "fragment_id": 13, "_": [13, 30, 37, 52, 70, 82, 153, 156, 291, 294, 314, 317, 319, 324], "vertex_label": [13, 81, 84], "perfect": [13, 153], "int64_t": [13, 41, 48, 70, 81, 82, 153, 306, 324], "std": [13, 14, 15, 41, 81, 300, 305], "string_view": 13, "uint64_t": [13, 16, 153, 300], "oid_arrays_": [13, 41], "topologi": [13, 63, 66, 73, 142, 147, 288, 300, 302, 303], "row": [13, 48, 63, 76, 140, 153, 284, 304], "matrix": [13, 70, 76, 82, 147, 156, 218, 236, 251, 254, 283, 291, 294], "src_type": [13, 142], "edge_typ": [13, 65, 68, 69, 72, 139, 141, 142, 143, 144, 145, 148, 151, 155, 303, 318, 323], "pair": [13, 20, 51, 53, 55, 59, 81, 82, 84, 138, 151, 190, 195, 196, 202, 218, 236, 242, 291, 294, 297, 303, 305], "indptr": 13, "ie_lists_": [13, 41], "edge_label": [13, 81, 84, 298], "neighbor_vertex_id": 13, "edge_table_index": 13, "tabl": [13, 55, 59, 63, 70, 79, 139, 141, 153, 298, 300, 302, 303, 305], "uint32_t": [13, 81, 153], "num_edg": 13, "ie_offsets_lists_": [13, 41], "offset": [13, 41, 81, 142, 150, 194], "slice": [13, 49, 83, 153, 297], "ie_list": 13, "ie_offset": 13, "arai": 13, "num_vertic": 13, "oe_lists_": [13, 41], "oe_offsets_lists_": [13, 41], "oe_list": 13, "oe_offset": 13, "edge_tables_": [13, 41], "vertex_tables_": [13, 41], "oid_t": [13, 15, 16, 41, 81], "vid_t": [13, 15, 16, 41, 81], "sizeof": 13, "uint8_t": 13, "load_factor": 13, "observ": [13, 23, 42], "practic": [13, 16, 28, 49, 55, 63, 66, 71, 76, 140, 141, 143, 304], "load_factori": 13, "15": [13, 42, 59, 68, 69, 79, 141, 142, 144, 145, 251, 273, 284, 291, 298, 317], "extra": [13, 37, 42, 48, 50, 156, 252, 317], "column": [13, 18, 33, 41, 45, 49, 55, 63, 70, 72, 76, 81, 83, 84, 91, 140, 150, 153, 284, 300, 304, 305, 314, 318, 324], "edge_id": 13, "uniqu": [13, 49, 55, 70, 71, 72, 73, 82, 130, 131, 140, 144, 149, 150, 153, 156, 258, 264, 297, 304, 305], "kept": [13, 57, 59, 81], "summari": [13, 78, 171], "argument": [13, 23, 30, 57, 59, 66, 70, 156, 158, 159, 160, 189, 197, 227, 234, 238, 239, 240, 241, 242, 269, 291, 294, 297, 298, 304, 305, 314], "use_perfect_hash": [13, 81, 132, 153, 298], "load_from": [13, 22, 30, 153, 298], "realli": 13, "margin": 13, "former": [13, 74], "globalvertexmap": 13, "later": [13, 18, 20, 32, 33, 51, 59, 75, 153, 298, 303, 304, 321], "localvertexmap": 13, "suitabl": [13, 71, 78, 141, 145, 151, 210, 304, 307], "dozen": 13, "hundr": [13, 220, 231], "repeatedli": [13, 49, 74], "add_vertic": [13, 45, 70, 153, 291, 294, 295, 318, 319, 324], "sure": [13, 23, 27, 30, 40, 50, 59, 145, 149, 151, 298, 304], "fairli": [13, 51], "8": [13, 20, 31, 32, 33, 35, 37, 42, 48, 51, 59, 62, 65, 79, 82, 140, 194, 217, 236, 259, 268, 270, 276, 280, 286, 288, 291, 293, 304, 306, 317, 322], "absolut": 13, "int32_t": [13, 70, 153, 324], "vid_typ": [13, 33, 81, 132, 153, 298], "compact_edg": [13, 81, 132, 153, 298], "compact": [13, 81, 153], "varint": [13, 153], "half": [13, 153], "generated_eid": 13, "save": [13, 18, 28, 29, 48, 141, 156, 304], "interact": [13, 27, 29, 33, 36, 37, 38, 40, 45, 48, 49, 50, 52, 54, 56, 58, 59, 60, 62, 70, 71, 73, 74, 77, 78, 80, 110, 153, 232, 281, 296, 298, 318, 322], "vertex_id": [13, 24, 45, 70, 324], "retain_oid": [13, 48, 70, 81, 132, 153, 298, 305, 324], "gain": [13, 37], "signific": [13, 73, 78], "arrowprojectedfrag": [13, 15, 16, 81, 90], "implicit": [13, 294], "arrowflattenfrag": 13, "thought": [13, 219], "view": [13, 20, 24, 70, 71, 102, 164, 168, 187, 188, 291, 294, 300, 312], "mainli": [13, 49, 53, 59, 78, 147], "purpos": [13, 59, 71, 303], "penalti": 13, "arrowprojectfrag": 13, "r1": [13, 83, 306, 307], "r2": [13, 83, 306, 307], "r3": [13, 83, 306], "projected_g": 13, "_project_to_simpl": [13, 16, 17, 22], "otherwis": [13, 33, 59, 74, 82, 140, 144, 145, 146, 156, 173, 210, 230, 240, 289, 291, 298, 303, 304], "express": [14, 15, 24, 49, 53, 54, 55, 66, 73, 75, 83, 140, 142, 145, 242, 291, 322], "modifi": [14, 20, 24, 28, 48, 53, 58, 95, 96, 111, 112, 146, 169, 222, 289, 302, 303], "adher": [14, 35, 303], "think": [14, 24], "principl": [14, 149], "privileg": 14, "experienc": [14, 75], "inform": [14, 15, 16, 19, 27, 29, 38, 42, 49, 50, 53, 55, 69, 72, 74, 76, 77, 86, 100, 139, 140, 141, 142, 145, 147, 149, 153, 156, 171, 189, 230, 252, 253, 281, 291, 298, 300, 304, 311], "hop": [14, 49, 55, 57, 59, 62, 63, 66, 71, 75, 76, 139, 143, 145, 147, 148, 149, 151], "slow": [14, 51], "consequ": [14, 71, 74], "piec": [14, 47, 150, 298], "destin": [14, 33, 48, 53, 59, 63, 70, 72, 81, 83, 99, 140, 141, 142, 144, 145, 151, 153, 155, 297, 302, 303, 304, 324], "abovement": 14, "peval": [14, 16, 17, 18, 34, 74, 81, 89, 308, 314], "incev": [14, 16, 17, 18, 34, 74, 81, 89, 308, 314], "assembl": [14, 34, 49, 73, 74, 81, 153], "unlik": [14, 17, 54, 63, 66, 71, 291], "modif": [14, 22, 62, 71, 76, 153, 294], "convent": [14, 37, 42, 224, 250, 312], "taught": [14, 59], "colleg": 14, "textbook": 14, "answer": [14, 34, 37, 42, 71, 304], "collect": [14, 34, 53, 57, 58, 59, 75, 76, 77, 151, 291], "partial": [14, 16, 18, 34, 57, 81, 83, 140, 233, 308], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 48, 66, 78, 140, 148, 156, 226, 291], "accur": 14, "long": [14, 17, 30, 33, 38, 55, 59, 73, 78, 82, 145, 303, 304, 314, 322], "const": [14, 15, 16, 41, 81, 84, 149, 150, 303, 304, 305], "fragment_t": [14, 15, 16, 81], "frag": [14, 17, 18, 41, 89, 300, 305, 314], "context_t": [14, 15, 16, 81], "ctx": [14, 17, 22, 81, 314], "message_manager_t": [14, 16, 81], "vertex_t": [14, 16, 41, 81], "native_sourc": [14, 18, 314], "getinnervertex": [14, 81], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 41, 81, 300, 314], "get_neighbor": 14, "min": [14, 18, 24, 51, 53, 84, 314, 322], "static_cast": [14, 16, 41, 300], "get_data": [14, 41], "isoutervertex": [14, 81], "put": [14, 16, 17, 22, 149], "channel": [14, 16, 37], "syncstateonoutervertex": 14, "els": [14, 16, 18, 41, 59, 141, 151, 153, 249, 303, 304, 314], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 41, 81, 300, 314], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 59, 84, 303], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 314], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 41, 81], "dijkstra": [14, 18, 74, 156, 314], "checkout": [14, 37, 146], "seri": [15, 59, 76, 81, 145, 303], "strong": [15, 49, 74], "typenam": [15, 16, 41, 81], "frag_t": [15, 16, 81], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 37, 48, 58, 59, 75, 142, 145, 149, 151, 297, 306], "shared_ptr": [15, 41, 81, 300, 305], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 29, 36, 40, 59, 70, 298, 314, 324], "global": [15, 24, 49, 55, 57, 59, 76, 132, 153, 283, 298, 305, 322], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 40, 48, 49, 59, 70, 76, 253, 297], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "o_sourc": 15, "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 41, 68, 70, 81, 82, 84, 89, 139, 141, 142, 146, 149, 151, 291, 294, 300, 308, 314, 323, 324], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 199], "len": [15, 59, 68, 141, 156, 165, 196, 213, 215, 218, 220, 221, 225, 291], "ed": [15, 23, 224, 238, 245, 268, 274], "ctruee": 15, "rather": [15, 18, 59, 70, 75, 77, 78, 156, 210, 252, 303], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 30, 93, 294], "dynamic_properti": [15, 106, 294], "def": [15, 18, 23, 52, 65, 68, 69, 70, 72, 89, 139, 141, 142, 143, 144, 145, 148, 151, 197, 304, 314, 318, 319, 323, 324], "arg": [15, 68, 81, 82, 83, 84, 117, 135, 142, 143, 144, 145, 148, 151, 155, 298, 304], "appasset": [15, 18, 89, 90, 94, 296, 314], "algo": [15, 16, 17, 22, 23, 82, 90], "flash_bf": 15, "vertex_data": [15, 16, 82, 90], "gscoordin": [15, 28, 36], "builtin": [15, 19, 20, 292, 294, 296], "gs_conf": [15, 16, 90], "yaml": [15, 16, 28, 29, 38, 48, 58, 82, 90, 298, 302, 304, 322], "cpp_flash": 15, "class_nam": [15, 16, 90], "compatible_graph": [15, 16, 90], "immutableedgecutfrag": 15, "log": [15, 17, 42, 47, 68, 69, 71, 73, 303, 305, 317], "p2p": [15, 17, 22, 23], "network": [15, 27, 42, 45, 47, 50, 59, 63, 67, 69, 71, 72, 74, 77, 78, 79, 80, 82, 139, 140, 141, 143, 145, 147, 151, 156, 211, 212, 218, 220, 224, 227, 228, 229, 232, 244, 268, 279, 280, 282, 283, 288, 292, 306, 317], "load_p2p_network": [15, 16, 17, 18, 45, 82, 83, 314], "attribut": [15, 19, 55, 66, 69, 72, 74, 76, 81, 82, 115, 126, 141, 142, 144, 147, 151, 152, 155, 156, 158, 159, 160, 175, 176, 185, 197, 210, 215, 234, 238, 239, 240, 241, 242, 245, 246, 247, 281, 283, 285, 288, 289, 291, 292, 294, 300], "convert": [15, 20, 23, 63, 82, 97, 98, 108, 109, 121, 122, 139, 140, 147, 151, 211, 212, 269, 286, 291, 293, 294, 300], "simple_graph": [15, 16], "dist": [15, 17, 52, 54, 82, 83, 146, 149, 238, 240, 242, 298, 314, 322], "codegen": [15, 49], "bit": [15, 51, 53, 57, 59], "longer": [15, 68, 84, 298], "retriev": [15, 47, 55, 57, 72, 73, 83, 97, 98, 108, 109, 113, 117, 121, 122, 142, 143, 145, 151, 156, 297, 304, 305], "displai": [15, 58, 140], "vertex_rang": [15, 83, 97, 98, 108, 109, 113, 121, 122, 153, 297], "end": [15, 16, 41, 45, 53, 57, 59, 66, 67, 68, 69, 70, 71, 72, 75, 78, 83, 84, 145, 150, 156, 170, 179, 184, 185, 198, 210, 293, 297, 303, 308], "sort_valu": 15, "pip3": [16, 19, 23, 35, 37, 42, 52, 58, 315, 317, 321], "degre": [16, 19, 20, 41, 45, 59, 66, 82, 84, 142, 143, 148, 156, 165, 190, 191, 210, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 236, 248, 249, 250, 251, 285, 291, 292, 304], "vertexdatacontext": [16, 17, 81, 156, 314], "myappcontext": 16, "explicit": [16, 81, 235, 291, 298], "parallelmessagemanag": [16, 17, 314], "param1": 16, "setvalu": [16, 17, 314], "vertex_array_t": [16, 81], "variabl": [16, 29, 33, 40, 42, 50, 57, 89, 210, 298, 304, 305, 317], "And": [16, 18, 23, 29, 31, 36, 38, 45, 49, 51, 57, 59, 70, 79, 82, 83, 144, 149, 294, 297, 298], "zero": [16, 73, 82, 140, 145, 156, 173, 191, 200, 233, 285, 286, 305], "myapp": 16, "parallelappbas": [16, 17, 314], "parallelengin": [16, 17, 314], "install_parallel_work": 16, "constexpr": [16, 81], "messagestrategi": [16, 18, 81, 84, 314], "message_strategi": [16, 81], "ksynconoutervertex": [16, 18, 81, 84, 314], "loadstrategi": [16, 81], "load_strategi": [16, 81], "kbothoutin": [16, 81], "initchannel": 16, "noth": [16, 84, 100, 153, 155, 291], "forc": [16, 37, 70], "forcecontinu": [16, 17, 314], "getincomingadjlist": [16, 41, 81], "counter": [16, 59], "runnabl": [16, 17, 23], "content": [16, 45, 59, 69, 70, 72, 156, 288, 302, 324], "my_app": [16, 18, 314], "cpp_pie": [16, 82, 90], "context_typ": [16, 81, 82, 90], "dynamicprojectedfrag": 16, "codebas": [16, 35], "my_app_context": 16, "zip": [16, 52, 54, 58, 90, 238, 242, 291, 322], "jr": 16, "load_app": [16, 17, 18, 22, 314], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 82, 83, 153, 297, 314], "demo": [17, 22, 23, 51, 86, 298, 302, 304, 312, 314], "turn": [17, 42, 79, 86, 285, 312], "verbos": [17, 23, 38, 42, 312], "lauch": [17, 22, 314], "cluster_typ": [17, 22, 70, 82, 83, 298, 314, 324], "add_lib": [17, 22, 298], "home": [17, 22, 23, 28, 38, 42, 45, 70, 81, 146, 147, 149, 150, 152, 153, 156, 200, 312, 314, 316, 324], "19": [17, 22, 23, 32, 42, 52, 54, 59, 79, 141, 142, 144, 312, 317, 321], "shade": [17, 22, 23, 314], "java_pi": [17, 82], "threadnum": [17, 314], "info": [17, 38, 42, 51, 59, 84, 153, 291, 294, 298, 302, 303, 304, 305, 312], "maven": [17, 23, 86, 304, 314], "groupid": [17, 23, 304, 314], "artifactid": [17, 23, 304, 314], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 304, 314], "spark": [17, 302], "drastic": 17, "great": [17, 23, 37, 304], "suppos": [17, 59, 153, 285, 303], "traversecontext": [17, 314], "overrid": [17, 70, 81, 139, 149, 314], "ifrag": [17, 314], "parallelcontextbas": [17, 314], "adjlist": [17, 81, 84, 302, 314], "nbr": [17, 20, 41, 81, 84, 291, 314], "dst": [17, 18, 30, 45, 55, 66, 70, 83, 139, 142, 153, 155, 297, 300, 303, 314, 323, 324], "largest": [17, 59, 156, 236, 314], "vertexarrai": [17, 81, 84, 314], "math": [17, 65, 69, 72, 156, 240, 241, 318, 320], "max": [17, 53, 84, 152, 156, 314, 322], "pars": [17, 49, 70, 82, 140, 300, 304], "maxiter": [17, 314], "jsonobject": [17, 314], "gsvertexarrai": [17, 314], "createfficontext": [17, 314], "avail": [17, 23, 29, 30, 40, 45, 53, 55, 58, 66, 70, 73, 79, 82, 138, 151, 239, 240, 241, 291, 298, 300, 303, 304, 311, 314], "containskei": [17, 314], "getinteg": [17, 314], "javadoc": [17, 35], "mvn": [17, 22, 86, 304], "proper": [17, 37], "javaapp": [17, 296, 314], "But": [17, 48, 59, 70, 78, 86, 291, 297], "rememb": [17, 22, 23, 30, 33, 311], "singel": 17, "full_jar_path": [17, 82, 314], "pack": [17, 23, 314], "java_app_class": [17, 82, 314], "fullli": [17, 314], "qualifi": [17, 82, 314], "b": [17, 18, 22, 37, 53, 57, 59, 145, 200, 218, 231, 237, 238, 242, 247, 248, 249, 251, 279, 287, 291, 314, 322], "param": [17, 23, 29, 42, 51, 82, 102, 103, 117, 132, 134, 138, 145, 151, 153, 298, 304, 314], "bother": 17, "click": [17, 36, 37, 66, 141, 142, 145, 315], "pure": [18, 81, 308], "just": [18, 19, 23, 27, 42, 45, 48, 57, 59, 78, 86, 149, 153, 291, 294, 298, 306], "udf": [18, 89, 297, 314], "decor": [18, 314], "vd_type": [18, 84, 89, 314], "md_type": [18, 84, 89, 314], "youralgorithm": [18, 314], "staticmethod": [18, 89, 314], "statu": [18, 27, 29, 30, 38, 42, 68, 149, 150, 156, 304, 308, 312], "cython": [18, 34, 42, 117, 296, 314], "sssp_pie": [18, 314], "v_label_num": [18, 305, 314], "vertex_label_num": [18, 84, 300, 305, 314], "v_label_id": [18, 84, 314], "init_valu": [18, 84, 314], "1000000000": [18, 82, 314], "pieaggregatetyp": [18, 84, 314], "kminaggreg": [18, 84, 314], "register_sync_buff": [18, 84, 314], "get_config": [18, 84, 298, 314], "declar": [18, 49, 57, 59, 62, 75, 78, 141, 314], "get_inner_nod": [18, 84, 314], "break": [18, 37, 58, 151, 314], "set_node_valu": [18, 84, 314], "e_label_num": [18, 41, 305, 314], "edge_label_num": [18, 84, 300, 305, 314], "e_label_id": [18, 314], "get_outgoing_edg": [18, 84, 314], "third": [18, 70, 71, 75, 153, 276, 277], "get_int": [18, 84, 314], "get_node_valu": [18, 84, 314], "iv": [18, 314], "inner_nod": [18, 84, 314], "v_dist": [18, 314], "u_dist": [18, 41, 314], "classic": [18, 66, 144, 292], "yourpregelalgorithm": [18, 314], "sssp_pregel": [18, 314], "set_valu": [18, 84, 314], "src_id": [18, 41, 66, 140, 141, 142, 144, 145, 148, 151, 155, 314], "cur_dist": [18, 314], "new_dist": [18, 314], "outgoing_edg": [18, 84, 314], "vote_to_halt": [18, 84, 314], "sin": [18, 314], "m_pi": [18, 314], "translat": [18, 37, 71], "generate_eid": [18, 48, 70, 81, 132, 153, 298, 305, 314, 324], "test": [18, 23, 29, 33, 42, 47, 48, 51, 59, 62, 65, 68, 69, 72, 76, 139, 149, 151, 155, 175, 176, 210, 291, 293, 298, 303, 304, 311, 315, 316, 318, 323], "futur": [18, 53, 57, 59, 70], "to_gar": [18, 314], "my_sssp_pregel": [18, 314], "gar": [18, 82, 90, 153, 298, 302, 314], "construct": [19, 59, 63, 66, 70, 71, 72, 73, 81, 132, 139, 140, 141, 142, 143, 153, 154, 158, 159, 199, 220, 222, 223, 225, 231, 235, 236, 237, 245, 248, 249, 250, 251, 253, 269, 273, 277, 283, 285, 298, 302, 305], "expand": [19, 49, 59, 60, 143, 145, 292], "add_edges_from": [19, 20, 175, 291], "add_nod": [19, 20, 291, 294], "number_of_nod": [19, 20, 156, 200, 284, 291], "number_of_edg": [19, 20, 165, 200, 284, 291], "sort": [19, 20, 41, 49, 59, 156, 162, 190, 194, 197, 200, 225, 226, 284, 285, 291, 303], "connected_compon": [19, 156], "nx": [19, 20, 45, 93, 95, 96, 99, 102, 104, 106, 111, 112, 116, 119, 120, 153, 156, 291, 293, 294], "add_nodes_from": [19, 20, 291], "red": [19, 20, 37, 140, 291], "green": [19, 20, 36, 37], "add_edg": [19, 20, 45, 70, 153, 169, 175, 176, 179, 184, 185, 291, 294, 318, 319, 324], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": 19, "dict": [19, 20, 27, 82, 83, 110, 118, 138, 141, 142, 145, 153, 154, 238, 239, 240, 241, 248, 249, 269, 291, 297, 298, 304], "draw": [19, 59, 238, 241], "matplotlib": [19, 59], "with_label": 19, "font_weight": 19, "bold": [19, 79], "twitter": [19, 79], "wget": [19, 22, 23, 29, 35, 52, 146, 322], "raw": [19, 22, 23, 48, 49, 63, 108, 109, 141, 147, 149, 150, 155], "githubusercont": [19, 22, 23], "p": [19, 20, 31, 36, 57, 59, 72, 73, 82, 141, 151, 156, 214, 215, 216, 218, 227, 228, 229, 232, 233, 235, 237, 239, 240, 241, 242, 245, 247, 322], "netwrokx": 19, "o": [19, 22, 23, 27, 30, 33, 38, 81, 151, 156, 173, 224, 226, 231, 239, 240, 241, 243, 244, 245, 291, 304, 315, 318], "gs_nx": 19, "g1": [19, 153, 295, 306, 307], "read_edgelist": [19, 293], "expandvar": [19, 22], "nodetyp": [19, 293], "create_us": [19, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 220, 221, 222, 223, 225, 227, 228, 229, 231, 235, 236, 237, 243, 244, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 286, 293], "g2": [19, 153, 291, 295, 306, 307], "ret_g": 19, "ret_nx": 19, "lack": [20, 32, 77, 156], "hashabl": [20, 171, 186, 248, 291, 293], "float": [20, 53, 55, 68, 70, 79, 82, 139, 140, 141, 142, 150, 151, 152, 156, 210, 213, 214, 215, 216, 218, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 245, 246, 247, 283, 291, 293, 298, 306, 322, 323, 324], "tupl": [20, 59, 70, 140, 141, 142, 151, 153, 156, 175, 176, 185, 197, 238, 242, 248, 287, 291, 293, 298], "though": [20, 210, 291, 304], "yield": [20, 145, 151, 238, 242, 291], "node_attribute_dict": 20, "discuss": [20, 42, 59, 156, 303, 317], "incorpor": 20, "path_graph": [20, 156, 167, 169, 170, 176, 291, 293], "grown": [20, 200, 233, 291], "unpack": [20, 58, 81, 291], "ebunch": [20, 291], "dictionari": [20, 82, 126, 156, 238, 239, 240, 241, 248, 249, 250, 251, 291, 293], "11": [20, 27, 30, 31, 32, 48, 51, 59, 65, 79, 82, 140, 141, 142, 144, 158, 159, 160, 196, 291, 304, 312, 315, 321], "complaint": 20, "clear": [20, 37, 57, 59, 95, 96, 191, 193, 194, 196, 198, 200, 201, 203, 205, 206, 209, 220, 222, 223, 225, 227, 228, 229, 231, 235, 236, 237, 243, 244, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 286, 291, 293, 304], "quietli": [20, 186, 291], "ignor": [20, 156, 167, 186, 291, 298], "spam": 20, "stage": [20, 42, 47, 63, 77, 78, 145, 303], "seen": [20, 49, 71, 303], "report": [20, 42, 79, 116, 214, 215, 216, 291, 294], "adj": [20, 84, 156, 291], "item": [20, 29, 71, 140, 141, 142, 145, 151, 156, 291, 304], "One": [20, 49, 53, 71, 75, 76, 77, 78, 82, 143, 145, 222, 231, 285, 304], "nbunch": [20, 164, 168, 170, 186, 291], "remove_nod": [20, 291], "remove_nodes_from": [20, 291], "remove_edg": [20, 291], "remove_edges_from": [20, 220, 222, 291], "instanti": [20, 82, 151, 306], "digraph": [20, 153, 158, 168, 170, 175, 176, 179, 184, 185, 196, 213, 214, 215, 218, 222, 223, 225, 227, 228, 229, 230, 234, 285, 286, 287, 289, 292, 293, 294], "edgelist": [20, 269, 293], "subscript": [20, 291], "notat": [20, 256, 258, 260, 262, 264, 270, 272, 291], "yellow": [20, 140], "blue": [20, 140, 291], "undirect": [20, 70, 76, 82, 102, 141, 145, 153, 156, 162, 166, 188, 211, 212, 218, 220, 227, 229, 232, 234, 235, 236, 238, 239, 240, 241, 242, 248, 253, 257, 258, 261, 264, 265, 267, 273, 286, 288, 291, 305], "twice": [20, 269, 291], "fg": [20, 305], "add_weighted_edges_from": [20, 175, 291], "125": [20, 140, 224, 235], "75": [20, 59, 65, 68, 69, 72, 79, 156, 214, 215, 216, 218, 298, 318], "375": 20, "eattr": [20, 291], "wt": 20, "attach": [20, 81, 140, 227, 230], "fridai": [20, 291, 294], "mondai": 20, "5pm": [20, 291], "2pm": [20, 291], "room": [20, 291], "714": [20, 291], "to_direct": [20, 153, 211, 212, 227, 229, 291], "representaion": 20, "dg": [20, 62, 76], "represent": [20, 49, 71, 73, 76, 153, 289, 291, 302], "dgv": 20, "as_view": [20, 187, 188, 291], "shallow": 20, "out_edg": [20, 168, 291], "in_degre": [20, 66, 68, 143, 145, 148, 151, 222, 248, 249, 291], "predecessor": [20, 161, 234, 285, 291], "successor": [20, 128, 161, 228, 229, 234, 291], "out_degre": [20, 222, 248, 249, 291], "feel": [20, 37, 42], "inconsist": [20, 79], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 37, 57, 66, 76, 82, 143, 148, 213, 214, 215, 216, 218, 220, 224, 227, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 245, 247], "to_undirect": [20, 153, 227, 229, 291], "theoret": 20, "load_ldbc": [20, 59, 322], "foo": [20, 291], "famou": [22, 23, 290], "hadoop": [22, 304], "cetric": 22, "stop": [22, 27, 30, 73, 77, 81, 156], "intergr": 22, "open": [22, 36, 37, 50, 58, 60, 66, 75, 78, 151, 293, 303], "actual": [22, 23, 28, 50, 55, 57, 59, 66, 85, 87, 144, 242, 291, 294, 302, 312], "vertexinputformat": 22, "edgeinputformat": 22, "vformat": [22, 153], "p2pvertexinputformat": 22, "eformat": [22, 153], "p2pedgeinputformat": 22, "gs_test_dir": [22, 33], "graphscope_sess": [22, 153], "31": [22, 23, 45, 70, 141, 142, 144, 324], "v_prop": [22, 81, 115], "vdata": 22, "e_prop": [22, 81, 115], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 156], "toward": [22, 304], "offici": [22, 48, 50, 51, 58, 75], "pl": 22, "snapshot": [22, 55, 78, 300, 304], "writabl": 22, "degrad": [22, 78], "procedur": [22, 29, 48, 49, 59, 92, 233], "except": [22, 42, 58, 65, 68, 69, 70, 72, 77, 144, 151, 169, 186, 190, 201, 210, 220, 222, 271, 291, 298, 303, 318], "right": [22, 53, 70, 149, 192, 201, 203, 224, 289], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 32, 37, 45, 49, 62, 74, 76, 78, 79, 213], "proceed": [23, 27, 213, 231], "side": [23, 37, 49, 57, 58, 82, 101, 141, 194, 303], "venv": [23, 51, 72], "virtualenv": 23, "pyspark_venv": 23, "bin": [23, 31, 50, 51, 58, 59, 71, 72, 165, 304, 312, 316, 322], "pyspark_venv_g": 23, "tar": [23, 29, 31, 304], "gz": [23, 31, 293, 304], "upload": [23, 48], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 71, 153, 322], "oss": [23, 29, 31, 70, 81, 146, 153, 304, 314, 315, 324], "beij": [23, 29, 31, 63, 76, 140, 304, 315], "fixm": 23, "yuansi": 23, "env": [23, 42, 51, 72, 146], "var": [23, 33, 38, 42, 70, 151, 304, 312, 324], "gs_jar": 23, "l": [23, 29, 35, 66, 76, 143, 211, 212, 214, 215, 216, 223, 224, 225, 227, 228, 229, 232, 239, 240, 241, 242, 244, 248, 249, 250, 251, 280, 283, 291, 312], "lib": [23, 31, 50, 90, 304], "7077": 23, "master_url": 23, "conf": [23, 50, 58, 81, 304, 322], "executor": [23, 35, 38, 48, 50, 71, 154, 312], "driver": [23, 27, 54, 58, 70, 118, 153, 304, 322], "2g": 23, "10g": [23, 316], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": [23, 53], "url": [23, 50, 153, 154, 304, 322], "rdd": 23, "pom": [23, 304], "xml": [23, 81, 304], "classifi": [23, 63, 65, 69, 72, 76, 151, 314], "conflict": [23, 51, 59, 65, 153, 281], "correctli": [23, 37, 42, 62, 156, 304], "resolv": [23, 28, 42, 70, 153, 305], "goal": [23, 49, 53, 63, 73, 76, 303], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 41, 49, 197, 304], "config": [23, 27, 28, 31, 48, 50, 58, 116, 126, 138, 139, 152, 155, 295, 298, 300, 304, 305, 322, 323], "socket": [23, 28, 30, 50, 81, 305], "bound": [23, 57, 59, 75, 117, 210, 298, 303, 306], "vineyardsock": 23, "filepath": 23, "sock": [23, 28, 50], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "shell": [23, 35, 48, 50, 54, 75, 82], "grow": [24, 45, 62, 71, 210, 220, 227, 228, 229, 290, 303], "capac": [24, 33, 50, 291, 298], "indivis": 24, "succinctli": 24, "oppos": [24, 66], "orient": [24, 66, 78, 148, 304], "googl": [24, 35, 74, 316], "powergraph": [24, 78, 79], "wa": [24, 29, 30, 37, 57, 59, 73, 79, 145, 156, 210, 225, 238, 239, 240, 241, 290, 304], "2010": [24, 79, 82, 156, 216, 283, 288], "sequenc": [24, 53, 57, 59, 82, 153, 190, 210, 220, 221, 222, 223, 224, 225, 226, 242, 248, 249, 252, 285, 286, 291, 292, 305], "conceptu": 24, "behavior": [24, 57, 59, 70, 84, 298], "becom": [24, 45, 59, 66, 291, 303, 304], "inact": 24, "again": [24, 42, 70, 306], "termin": [24, 36, 311], "halt": [24, 75, 84, 230], "individu": [24, 48, 50, 69, 72], "messageiter": [24, 84], "mindist": 24, "issourc": 24, "inf": 24, "done": [24, 63, 66, 140, 151, 156, 253, 305], "getvalu": [24, 41], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 37, 42, 304], "dramat": 24, "face": [24, 31, 49, 59, 74, 276, 277], "power": [24, 54, 59, 62, 75, 82, 156, 210, 220, 268, 291], "law": [24, 210, 220], "gather": [24, 298], "scatter": [24, 141], "accumul": [24, 66, 285], "workload": [27, 36, 45, 47, 49, 50, 56, 59, 62, 71, 73, 79, 304, 306, 307], "grpc": [27, 28, 31, 42, 81, 315, 317], "linux": [27, 30, 31, 36, 48, 65, 79, 86, 321], "maco": [27, 30, 36, 42, 51, 315, 317, 318, 321], "skip": [27, 31, 35, 75, 86, 304], "recommend": [27, 30, 36, 37, 42, 48, 51, 59, 63, 70, 71, 72, 76, 145], "minikub": [27, 30, 304], "instruct": [27, 29, 30, 33, 37, 48, 50, 51, 52, 58, 72, 75, 81, 94, 145], "platform": [27, 32, 37, 47, 48, 49, 65, 77, 78, 79, 86, 140, 282, 298], "desktop": [27, 304, 318], "server": [27, 29, 49, 50, 55, 58, 60, 62, 66, 71, 73, 75, 80, 144, 149, 150, 151, 303, 304, 316, 322], "kubectl": [27, 29, 30, 33, 38, 42, 48, 304, 312, 317], "kube": [27, 298], "apivers": [27, 33], "v1": [27, 33, 35, 42, 57, 59, 65, 68, 69, 72, 75, 139, 256, 269, 294, 317, 318, 323], "certif": 27, "ca": 27, "crt": 27, "last": [27, 30, 59, 145, 150, 153, 213, 285, 312], "16": [27, 31, 50, 59, 79, 139, 141, 142, 144, 146, 247, 270, 284, 323], "2023": [27, 312], "44": [27, 79, 141, 142, 144, 284], "05": [27, 218, 231], "cst": 27, "sig": [27, 314], "28": [27, 59, 63, 76, 79, 141, 142, 144, 288], "cluster_info": 27, "172": [27, 79], "21": [27, 31, 45, 59, 79, 82, 141, 142, 144, 264, 304], "67": [27, 79, 82], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 30, 33, 38, 298], "profil": [27, 322], "encapsul": [27, 62, 63, 139, 145, 298], "entranc": [27, 145], "tag": [27, 40, 57, 59, 79, 218, 298, 304, 316], "intranet": 27, "internet": [27, 29, 31, 59, 74, 288, 290], "might": [27, 42, 156, 248, 291, 307], "k8s_image_registri": [27, 33, 298], "k8s_image_repositori": [27, 298], "k8s_image_tag": [27, 33, 298], "fit": [27, 45, 48, 67, 68, 86], "increas": [27, 38, 42, 45, 141, 189, 190, 198, 220, 222, 230, 248, 251, 253, 303], "cpu": [27, 42, 48, 146, 298, 307, 317], "num_work": [27, 28, 33, 138, 298, 322], "k8s_engine_cpu": [27, 138, 298], "32": [27, 57, 79, 141, 142, 144, 152, 156], "k8s_engine_mem": [27, 42, 138, 298, 317], "256gi": 27, "vineyard_shared_mem": [27, 42, 138, 298, 317], "k8s_client_config": [27, 298], "disk": [27, 42, 48, 71, 304], "test_data": [27, 65, 69, 72, 315, 318], "testingdata": [27, 30, 33, 315, 318], "k8s_volum": [27, 30, 33, 138, 298, 315, 318], "constructor": [27, 70, 191, 193, 194, 196, 198, 200, 201, 203, 205, 206, 209, 220, 222, 223, 225, 227, 228, 229, 231, 235, 236, 237, 243, 244, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 286, 293], "vm": [27, 30, 81], "copi": [27, 29, 30, 48, 71, 73, 78, 99, 156, 163, 167, 169, 170, 228, 234, 289, 291, 294, 302, 303, 304, 305, 306], "hostpath": [27, 30, 33, 48, 298, 315, 318], "expandus": [27, 315, 318], "mountpath": [27, 30, 33, 298, 315, 318], "expect": [27, 34, 37, 42, 70, 86, 220, 222, 224, 294, 298], "monitor": [27, 29, 62], "wait": [27, 42, 298], "finish": [27, 41, 58, 68, 84, 141, 144], "remov": [27, 29, 57, 59, 82, 86, 146, 163, 169, 171, 217, 220, 222, 224, 266, 269, 285, 291, 304], "remain": [27, 53, 57, 70, 74, 140, 145, 225, 252], "statefulset": [27, 304], "svc": [27, 48], "left": [27, 36, 53, 82, 153, 156, 192, 224], "service_port": 28, "63800": 28, "launcher_typ": 28, "operator_launch": 28, "gae_endpoint": 28, "60001": 28, "instance_id": [28, 305], "0000": [28, 45, 59], "rpc_port": 28, "9600": 28, "sai": [28, 40], "configmap": 28, "mount": [28, 30, 33, 42, 49, 70, 150, 298, 315, 317, 318], "ideal": [29, 37, 78], "deploy_graphscope_on_self_managed_k8": 29, "chart": [29, 42, 48, 50, 59, 304, 315, 317], "minut": [29, 42, 49], "succe": 29, "past": [29, 49, 306], "noteport": 29, "node_ip": [29, 304], "ojsonpath": 29, "hostip": 29, "node_port": 29, "spec": [29, 33, 81, 151], "nodeport": [29, 298, 304, 318], "echo": [29, 31], "listen": [29, 50, 81], "statement": [29, 145, 304], "ident": [29, 83, 99, 153, 187, 188, 192, 263, 283, 285, 291], "reconnect": [29, 298], "disconnect": [29, 156, 232, 233, 248, 251, 298], "sess2": 29, "comment": [29, 37, 45, 53, 59, 70, 140, 291, 293, 294, 319, 324], "homepag": 29, "remot": [29, 36, 58, 86, 154, 298, 322], "cater": [29, 71], "tgz": 29, "unzip": [29, 52, 58, 322], "zxvf": 29, "bundl": [30, 298], "aliv": 30, "reserv": 30, "simplifi": [30, 48, 71, 72, 73, 75, 77, 140, 145, 303], "etcd": [30, 42, 48, 298, 300, 315], "replica": [30, 48], "etcd_replica": 30, "greater": [30, 33, 53, 82, 141, 156, 210, 241, 298, 303], "ag": [30, 33, 49, 55, 57, 59, 63, 76, 139, 140, 153, 297, 312, 322, 323], "33": [30, 141, 142, 144, 281, 284], "vineyardd": [30, 33, 50], "vineyardctl": [30, 298], "v6d": [30, 31, 48, 70, 298], "blob": [30, 42, 314], "cmd": [30, 81, 298], "readm": [30, 86], "md": [30, 151], "notic": [30, 33, 48, 55, 59, 71, 145, 153, 284, 291, 298, 306], "charact": [30, 282, 287, 293], "vineyard_deploy": 30, "restart": [30, 312], "etcd0": 30, "73m": 30, "5db59987f": 30, "vr2fg": 30, "beforehand": 30, "onto": 30, "stai": 30, "k8s_namespac": [30, 33, 138, 298], "k8s_vineyard_deploy": [30, 33, 138, 298], "reload": [30, 304], "vineyard_id": [30, 33, 153, 312], "new_sess": 30, "22731319746904674": 30, "objectid": [30, 33, 81, 153, 298, 303, 305], "softwar": [30, 33, 48, 51, 57, 62, 71, 153, 305], "successfulli": [30, 50, 63, 68, 210, 304], "folder": [31, 38, 70, 303], "cento": [31, 32, 42, 51, 79, 317, 321], "82": [31, 79], "boost": [31, 62, 71, 81], "perl": 31, "v3": [31, 75, 79], "24": [31, 48, 59, 79, 141, 142, 144, 258, 276, 284], "openmpi": [31, 79], "gflag": 31, "glog": 31, "arrow": [31, 41, 81, 93, 106, 153, 294], "74": [31, 79, 282], "openssl": [31, 42, 317], "zlib": 31, "protobuf": 31, "49": [31, 59, 79, 141, 142, 144], "13": [31, 35, 59, 79, 140, 141, 142, 144, 196, 237], "libclang": 31, "curl": [31, 58], "lo": [31, 58], "czf": 31, "mkdir": [31, 42, 151, 317], "workdir": 31, "xzf": 31, "yum": 31, "scl": 31, "rh": [31, 41], "y": [31, 32, 59, 82, 237, 238, 242], "devtoolset": 31, "python38": 31, "opt": [31, 36, 49, 50, 64, 151], "bash": [31, 57, 312, 316], "euxo": 31, "pipefail": 31, "dir": [31, 304], "ld_library_path": 31, "lib64": 31, "py2": 31, "py3": [31, 316], "manylinux2010_x86_64": 31, "whl": [31, 146, 149], "x86_64": 31, "sh": [31, 35, 58, 146, 304, 321, 322], "licens": [31, 316], "dbuild_shared_lib": 31, "ON": 31, "dcmake_prefix_path": 31, "dcmake_install_prefix": 31, "boost_1_74_0": 31, "bootstrap": 31, "filesystem": [31, 140], "program_opt": 31, "regex": 31, "chrono": 31, "atom": [31, 304], "date_tim": 31, "b2": 31, "openssl_1_1_1h": 31, "fpic": 31, "cpp": 31, "darrow_comput": 31, "darrow_with_utf8proc": 31, "off": [31, 49, 71, 276, 304], "darrow_csv": 31, "darrow_filesystem": 31, "darrow_ipc": 31, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_util": 31, "darrow_build_test": 31, "darrow_enable_timing_test": 31, "darrow_fuzz": 31, "darrow_jemalloc": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "mpi": [31, 81], "cxx": 31, "dlopen": 31, "nproc": 31, "dgrpc_instal": 31, "dgrpc_build_test": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_protobuf_provid": 31, "dgrpc_zlib_provid": 31, "dgrpc_ssl_provid": 31, "dopenssl_root_dir": 31, "dcmake_cxx_flag": 31, "fpermiss": 31, "dbuild_vineyard_test": 31, "dbuild_vineyard_python_bind": 31, "j4": 31, "dnetworkx": 31, "denable_java_sdk": 31, "dbuild_test": 31, "ubuntu": [32, 42, 48, 51, 146, 315, 317, 321], "04": [32, 42, 48, 51, 59, 79, 146, 315, 317, 321], "intel": [32, 51, 315, 321], "appl": [32, 42, 51, 291, 315, 317, 321], "silicon": [32, 51, 315], "jdk": [32, 48, 51, 61, 308, 314], "wheel": [32, 42, 209, 275, 317, 320], "manylinux2014": [32, 316], "abi": 32, "wish": [32, 37], "nightli": [32, 42, 317], "clean": [32, 45, 51, 72, 86, 149, 303], "tidi": 32, "quickli": [32, 36, 62, 72, 75, 76, 78, 151, 298], "insid": [32, 38, 42, 57, 59, 82, 90, 140, 152, 153, 266, 297, 298, 322], "apt": [32, 146], "ipython": 32, "tensorflow": [32, 62, 63, 65, 68, 69, 71, 72, 76, 77, 139, 140, 141, 144, 145, 147, 151, 318], "tool": [32, 35, 36, 45, 48, 54, 60, 62, 64, 71, 238, 240, 300, 303, 304, 305, 321], "dep": [32, 35, 311, 315, 316], "fly": [32, 72], "clang": [32, 35, 51, 316], "essenti": [32, 53, 57, 62, 75, 77], "arm": 32, "preliminari": 32, "yet": [32, 52, 57, 83, 248, 251, 291, 297, 304], "calcul": [33, 49, 57, 59, 82, 84, 142, 156, 210, 242], "period": [33, 304], "restor": [33, 153, 298], "persistentvolum": [33, 304], "dump": [33, 82, 118, 153], "cat": [33, 304, 312], "eof": 33, "metadata": [33, 42, 81, 153, 291, 300, 304], "1gi": 33, "accessmod": 33, "readwriteonc": 33, "storageclassnam": 33, "importantli": 33, "lost": [33, 298], "persistentvolumeclaim": [33, 298, 304], "matchlabel": 33, "request": [33, 42, 70, 81, 110, 141, 149, 152, 154, 185, 291, 298, 317], "extern": [33, 37, 66, 71, 298, 304], "ccc": 33, "sub_graph": [33, 55, 72, 318, 319], "haslabel": [33, 45, 51, 55, 59, 72, 322], "simple_g": [33, 72, 314, 318], "pr_result": 33, "tc_result": 33, "add_column": [33, 72, 81, 153, 314, 318, 319], "tc": [33, 72, 318], "997255889378630": 33, "997163552113975": 33, "store_graphs_to_pvc": 33, "graphid": [33, 298], "pvc_name": [33, 298], "schema": [33, 49, 50, 54, 55, 59, 68, 69, 70, 82, 140, 141, 150, 153, 291, 300, 302, 303, 304, 305, 319, 322, 324], "oid_typ": [33, 70, 81, 82, 110, 132, 153, 298, 324], "ulong": 33, "lang": [33, 35, 51, 72, 154], "eid": [33, 41, 153, 304], "restore_graphs_from_pvc": 33, "anymor": 33, "nativ": [34, 49, 54, 71, 75, 77, 78], "behind": [34, 68, 303, 306, 312], "scene": [34, 49, 68, 148], "lower": [34, 49, 57, 59, 75, 210, 217, 230], "cost": [34, 49, 59, 71, 75, 156, 304], "ownership": 34, "cach": [34, 63, 74, 78, 291], "layout": [34, 74, 304], "were": [34, 37, 59, 79, 242, 304], "outperform": [34, 62, 74, 76, 77, 78], "art": [34, 62, 74, 77, 79], "voderank": 34, "average_degree_assort": 34, "degree_assort": 34, "guidelin": [35, 37], "promot": 35, "readabl": [35, 291], "qualiti": [35, 37, 76], "black": [35, 316], "enforc": 35, "rule": [35, 49, 59, 66, 74, 143, 149, 153, 190, 300], "cpplint": 35, "flake8": 35, "fmt": 35, "lint": [35, 37], "makefil": 35, "graphscope_clformat": 35, "graphscope_cpplint": 35, "dev": [35, 47, 315, 316], "pushd": 35, "isort": 35, "diff": 35, "popd": 35, "interactive_engin": [35, 36, 50, 58], "check_format": 35, "files_to_format": 35, "aosp": 35, "toolchain": [36, 64], "devcontain": 36, "json": [36, 48, 50, 298, 300, 304, 305], "setup": [36, 37, 42, 153, 298, 316], "visual": [36, 37, 71], "studio": 36, "collabor": [36, 71, 303], "stabl": [36, 82, 153, 300, 304, 321], "haven": [36, 59], "navig": [36, 303, 311], "icon": 36, "bottom": [36, 201], "corner": 36, "window": [36, 59, 321], "reopen": 36, "marketplac": 36, "prompt": [36, 58], "shift": [36, 53, 59, 156, 256], "ctrl": 36, "made": [36, 37, 48, 66, 79, 140, 143, 149, 156, 251, 303], "rebuild": 36, "subcommand": [36, 64], "assembli": [36, 50], "learning_engin": 36, "graphlearn": [36, 38, 63, 65, 68, 69, 72, 139, 140, 141, 145, 146, 151, 152, 155, 298, 312, 318, 323], "compos": [36, 38, 63, 66, 72, 74, 78], "alon": [36, 49, 55], "circul": [36, 194], "edit": [36, 37, 237, 274, 311], "entrypoint": [36, 318], "plai": [36, 49, 61, 80, 150, 155, 308], "thank": [37, 45, 71], "interest": [37, 59, 62, 74, 304], "focus": [37, 59, 71, 77, 79, 145, 283, 304], "eager": [37, 82, 83, 132, 134, 153, 298], "contributor": [37, 284], "welcom": 37, "engag": [37, 71, 72], "good": 37, "particip": 37, "join": [37, 53, 59, 141, 151, 192, 195, 203, 210, 219, 220, 233, 235, 238, 239, 240, 241, 242, 250, 251, 291, 303], "ask": [37, 47], "question": [37, 47, 59, 317], "ve": [37, 48, 52, 58, 71], "hasn": [37, 59], "confirm": 37, "concis": [37, 55, 75, 154], "descript": [37, 49, 53, 66, 70, 140, 143, 148, 149, 248, 256, 304], "relev": [37, 146, 185, 291, 302], "reproduc": [37, 291], "yourself": 37, "why": [37, 42, 59, 82], "saw": 37, "incomplet": 37, "inaccur": 37, "knowledg": [37, 45, 63, 76, 147], "submiss": 37, "fact": [37, 49, 248, 251], "page": [37, 47, 73, 82, 85, 87, 201, 216, 280, 320], "button": 37, "tbf": [37, 46, 79, 299, 310, 313], "isn": [37, 55, 144], "someon": 37, "approach": [37, 55, 62, 63, 71, 73, 75, 76, 144, 220, 233, 288, 303], "spend": 37, "secret": [37, 70, 298, 315, 324], "accident": 37, "hook": 37, "titl": [37, 59, 69, 72], "grammar": 37, "spell": 37, "500": [37, 210], "word": [37, 59, 69, 72, 75, 76, 151, 153, 291], "42": [37, 59, 79, 141, 142, 144, 214, 216, 226, 284], "ticket": 37, "chines": 37, "everyon": 37, "beginn": [37, 75], "patch": 37, "rest": [37, 291, 304], "attain": 37, "brief": [37, 44], "descipt": 37, "valid": [37, 49, 68, 69, 76, 89, 139, 186, 210, 232, 238, 287, 298, 300], "typo": 37, "feat": 37, "inv": [37, 145, 151, 322], "refactor": 37, "gulp": 37, "broccoli": 37, "npm": [37, 304], "ci": 37, "perf": 37, "neither": 37, "nor": 37, "chore": 37, "routin": [37, 156, 291], "insight": [37, 45, 74, 76], "addtion": 37, "depoli": 37, "feedback": [37, 45], "discourag": 37, "rebas": 37, "workflow": [37, 45, 71, 76, 77, 81], "upstream": [37, 145], "leas": 37, "ping": [37, 314], "await": 37, "unfamiliar": 37, "acronym": 37, "glossari": [37, 47, 284], "approv": 37, "date": [37, 53, 59, 303, 304], "todo": [37, 53, 149], "dongz": 37, "potenti": [37, 63, 71, 303], "concern": [37, 71, 78, 303], "reach": [37, 42, 55, 59, 75, 145, 150, 153, 156, 233, 248, 251, 303], "action": 37, "realiti": [37, 145], "uncommon": 37, "infrastructur": 37, "vital": 37, "inspect": [37, 38, 70, 298, 304], "failur": [37, 78], "stream": [38, 42, 57, 58, 59, 63, 145, 150, 153], "stdout": 38, "log_level": [38, 138], "permiss": [38, 42, 90, 317], "consol": [38, 48, 50, 60, 62, 70, 75, 154, 304, 320], "frontend": [38, 48, 50, 51, 52, 58, 304, 312], "event": [38, 210], "involvedobject": 38, "warn": [38, 291], "pinpoint": 38, "exec": [38, 304, 312], "diagnost": 38, "forward": [38, 63, 65, 66, 68, 69, 72, 76, 145, 318], "browser": [38, 59], "explain": [38, 59, 140, 298, 303, 322], "compris": [40, 53, 55, 69, 71, 144], "busi": [40, 49, 59, 63, 70, 71, 72, 78], "e2": [40, 270], "coupl": [40, 73, 78, 271, 300], "\u6807\u7b7e": 41, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 41, "\u5c5e\u6027": [41, 322, 324], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 41, "\u539f\u59cbid": 41, "oid": [41, 81, 83, 84], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 41, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 41, "\u5b50\u56feid": 41, "fid": [41, 81, 84, 116, 300], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 41, "\u5206\u533a\u5668": 41, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 41, "\u7684\u6620\u5c04": 41, "\u5b50\u56fe": 41, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 41, "\u5b58\u50a8\u4e86\u9876\u70b9": 41, "\u8fb9": [41, 314], "\u9876\u70b9\u6570\u636e": 41, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 41, "\u5185\u90e8\u70b9": 41, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 41, "\u5916\u90e8\u70b9": 41, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 41, "\u672c\u5730id": 41, "lid": [41, 81, 116], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 41, "\u5168\u5c40id": 41, "gid": [41, 81, 116], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 41, "\u88abfragment\u5171\u8bc6": 41, "\u7528\u4e8e\u5b58\u50a8gid": 41, "oid\u7684\u6620\u5c04\u5173\u7cfb": 41, "\u7684\u8282\u70b9": 41, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 41, "gid\u7f16\u7801": 41, "\u5176\u4e2d": [41, 314, 319], "\u548c": [41, 145, 314, 316, 317, 318, 319, 321, 322, 323, 324], "\u5171\u540c\u7ec4\u6210": 41, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 41, "\u7684\u9876\u70b9": 41, "\u5e8f\u53f7": 41, "lid\u7f16\u7801": 41, "\u586b\u5145": 41, "\u603b\u662f": 41, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 41, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 41, "\u5206\u4e3ahashpartitioner\u548csegmentedpartiton": 41, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 41, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 41, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 41, "\u8fb9\u6587\u4ef6": 41, "\u5f97\u5230\u591a\u4e2avertex": 41, "\u548cedg": 41, "etabl": 41, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 41, "\u5206\u7ec4": 41, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 41, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 41, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 41, "\u8fb9\u8868": 41, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 41, "partial_v_t": 41, "partial_e_t": 41, "num": [41, 50, 57, 58, 59, 152, 303], "table\u5305\u542boid": 41, "table\u5305\u62ecsrc\u548cdst\u7684oid": 41, "\u8bbf\u95eevtable\u7684oid\u5217": 41, "\u6839\u636eoid\u67e5\u8be2partit": 41, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 41, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 41, "gather\u64cd\u4f5c": 41, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 41, "\u6839\u636efrag\u6570\u91cf": 41, "label\u6570\u91cf\u548c\u5168\u90e8oid": 41, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 41, "fid_t": [41, 81], "fnum_": 41, "label_id_t": [41, 81], "label_num_": 41, "hashmapbuild": 41, "cur_gid": 41, "id_parser_": 41, "generateid": 41, "\u8d77\u59cbgid": 41, "vnum": 41, "length": [41, 45, 53, 57, 59, 70, 75, 82, 143, 156, 195, 197, 202, 224, 245, 249, 255, 277, 286, 291, 324], "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 41, "\u751f\u6210gid": 41, "emplac": 41, "getview": 41, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 41, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 41, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 41, "\u6839\u636epartitioner\u83b7\u53d6fid": 41, "\u6839\u636efid": 41, "id\u548coid\u67e5\u8be2gid": 41, "\u751f\u6210gid\u6570\u7ec4": 41, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 41, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 41, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 41, "\u5bf9etable\u6267\u884cshuffl": 41, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 41, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 41, "\u5904\u7406\u9876\u70b9": 41, "\u521d\u59cb\u5316id": 41, "parser": [41, 49], "\u521d\u59cb\u5316ivnum": 41, "ovnum\u548ctvnum\u6570\u7ec4": 41, "\u6309\u7167vertex": 41, "label\u5206\u7ec4": 41, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 41, "\u5411vertex": 41, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 41, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 41, "\u5c06vertex": 41, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 41, "vid_parser_": 41, "vertex_label_num_": 41, "resiz": 41, "ivnums_": 41, "ovnums_": 41, "tvnums_": 41, "combinechunk": 41, "default_memory_pool": 41, "vm_ptr_": 41, "getinnervertexs": [41, 81], "fid_": 41, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 41, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 41, "\u901a\u8fc7src": 41, "gid\u5217\u548cdst": 41, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 41, "\u5e76\u6309\u7167vertex": 41, "edge_t": [41, 140, 151], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 41, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 41, "collect_outer_vertic": 41, "dynamic_pointer_cast": [41, 305], "converttoarrowtyp": [41, 81], "arraytyp": [41, 81], "chunk": [41, 126], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 41, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 41, "\u5916\u90e8\u70b9\u7684lid\u7531label": 41, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 41, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 41, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 41, "ovg2l_maps_": 41, "ovgid_lists_": 41, "cur_list": 41, "collected_ovgids_": 41, "\u6392\u5e8fgid": 41, "cur_map": 41, "buildertyp": 41, "vec_build": 41, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 41, "\u5176\u4e2dfid\u4e3a0": 41, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 41, "cur_id": 41, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 41, "append": [41, 59, 68, 69, 72, 84, 139, 150, 151, 222, 285, 318, 323], "cur_list_length": 41, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 41, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 41, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 41, "\u5220\u9664edg": 41, "table\u7684src\u5217\u548cdst\u5217": 41, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 41, "generate_local_id_list": 41, "gid_list": 41, "lid_list": 41, "vec": 41, "getfid": 41, "\u751f\u6210\u5185\u90e8\u70b9lid": 41, "getlabelid": 41, "getoffset": 41, "\u67e5\u8be2g2l": 41, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 41, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 41, "edge_src_": 41, "edge_dst_": 41, "table\u7684src\u5217\u548cgid\u5217": 41, "\u53ea\u4fdd\u7559\u5c5e\u6027": 41, "tmp_table0": 41, "removecolumn": 41, "\u6784\u5efacsr": 41, "\u5bf9\u4e8e\u6709\u5411\u56fe": 41, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 41, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 41, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 41, "\u6784\u5efarow": 41, "offset\u6570\u7ec4": 41, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 41, "\u4f7f\u7528row": 41, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 41, "\u586b\u5145dst": 41, "lid\u548ceid\u5230nbr": 41, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 41, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 41, "generate_directed_csr": 41, "vid_array_t": [41, 81], "src_list": 41, "dst_list": 41, "fixedsizebinaryarrai": 41, "int64arrai": 41, "edge_offset": 41, "actual_edge_num": 41, "v_label": [41, 81, 300], "edge_num": [41, 116, 318, 322], "src_list_ptr": 41, "raw_valu": 41, "dst_list_ptr": 41, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 41, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 41, "tvnum": 41, "offset_vec": 41, "degree_vec": 41, "int64build": 41, "podarraybuild": 41, "nbr_unit_t": [41, 81], "edge_build": 41, "v_offset": 41, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 41, "ptr": 41, "mutablepoint": 41, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 41, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 41, "vid": [41, 81, 153], "eid_t": [41, 81], "\u66f4\u65b0offset": 41, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 41, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 41, "offsets_ptr": 41, "lh": 41, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 41, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 41, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 41, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 41, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 41, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 41, "lid\u548ceid": 41, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 41, "\u5c01\u88c5": 41, "seal": [41, 62, 76], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 41, "ovgid\u548cg2l_map\u540e": 41, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 41, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 41, "\u4e5f\u5c31\u662f\u8bf4": [41, 315], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 41, "\u5f53\u524dfragment": 41, "fragment\u603b\u6570": 41, "directed_": 41, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 41, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 41, "edge_label_num_": 41, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 41, "propertygraphschema": 41, "schema_": 41, "shcema": 41, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 41, "\u9876\u70b9\u5c5e\u6027\u8868": 41, "\u4e0d\u5305\u542bid\u5217": 41, "\u5916\u90e8\u70b9gid": 41, "gid\u5230lid\u6620\u5c04": 41, "\u8fb9\u5c5e\u6027": 41, "csr\u7ed3\u6784\u7684column": 41, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 41, "csr\u7ed3\u6784\u7684row": 41, "vertex_map_t": [41, 81], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 41, "edge_tables_columns_": 41, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 41, "flatten_edge_tables_columns_": 41, "\u540c\u4e0a": 41, "vertex_tables_columns_": 41, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 41, "ie_ptr_lists_": 41, "oe_ptr_lists_": 41, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 41, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 41, "\u4e5f\u5c31\u662fcolumn": 41, "index\u7684\u8d77\u59cb\u5730\u5740": 41, "ie_offsets_ptr_lists_": 41, "oe_offsets_ptr_lists_": 41, "\u51fa\u8fb9\u7684row": 41, "offset\u8d77\u59cb\u5730\u5740": 41, "offset\u7684\u8d77\u59cb\u5730\u5740": 41, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 41, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 41, "\u76ee\u7684\u9876\u70b9fid": 41, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 41, "idst_": 41, "odst_": 41, "iodst_": 41, "idoffset_": 41, "odoffset_": 41, "iodoffset_": 41, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 41, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 41, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 41, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 41, "id\u548c\u9876\u70b9\u5e8f\u53f7": 41, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 41, "ivnum": 41, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 41, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 41, "vertex_range_t": [41, 81], "label_id": [41, 83, 84, 116], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 41, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 41, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 41, "\u5c5e\u6027id": 41, "\u5217\u53f7": 41, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 41, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 41, "\u884c\u53f7": 41, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 41, "getdata": [41, 81], "prop_id_t": [41, 81], "prop_id": 41, "property_graph_util": [41, 81], "valuegett": 41, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 41, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 41, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 41, "adj_list_t": [41, 81], "e_label": [41, 81], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 41, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 41, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 41, "offset_arrai": 41, "\u8bbf\u95eerow": 41, "oe": 41, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 41, "\u751f\u6210adjlist\u5bf9\u8c61": 41, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 41, "\u7ed3\u675f\u5730\u5740": 41, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 41, "\u548c\u51fa\u8fb9\u540c\u7406": 41, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 41, "ie": 41, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 41, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 41, "\u5bf9\u5e94\u5230\u884c\u53f7": 41, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 41, "\u4f8b\u5982": [41, 314, 318, 322, 324], "\u83b7\u53d6edg": 41, "struct": [41, 81, 214, 247], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 41, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 41, "edata_arrays_": 41, "nbr_": 41, "post": [42, 59, 70, 145, 210, 324], "what": [42, 48, 59, 60, 75, 150, 237, 291, 297, 303], "mininum": 42, "8g": 42, "18": [42, 51, 59, 79, 141, 142, 144, 156, 214, 263, 268, 272, 274, 277, 283, 314, 317, 321], "depoly": 42, "enssenti": 42, "No": [42, 57, 291], "debug": [42, 140, 145, 298, 304, 312], "silent": [42, 291, 312], "helm": [42, 47, 48, 304, 315, 317], "did": [42, 151], "role": [42, 49, 61, 73, 141, 150, 156, 242, 280, 288, 304, 308, 312, 317], "rolebind": [42, 317], "uninstal": [42, 48, 317], "recycl": 42, "alloc": [42, 64, 68], "databas": [42, 49, 54, 59, 71, 73, 75, 77, 79, 304, 314], "seem": [42, 59], "stuck": 42, "consumpt": 42, "poor": [42, 147], "acquir": [42, 52, 58], "mostli": [42, 50, 117], "visibl": [42, 84], "engnin": 42, "volum": [42, 48, 58, 214, 215, 216, 226, 235, 280, 298, 303], "cloud": [42, 77, 78, 304], "k8s_vineyard_mem": [42, 138, 298, 317], "shape": [42, 65, 66, 69, 72, 81, 83, 142, 143, 144, 145, 148, 151, 155, 213, 318], "forth": 42, "smaller": [42, 59, 79, 154, 156, 212, 213, 217], "Its": [42, 73, 270, 303], "shared_mem": [42, 317], "grpcio": [42, 317], "grpc_python_build_system_openssl": [42, 317], "scipi": [42, 238, 239, 240, 241, 291, 294, 317], "anaconda": [42, 317], "workaround": 42, "openbla": 42, "tri": [42, 45, 68, 75, 220, 226], "pkgconfig": 42, "cmake_prefix_path": 42, "brew": 42, "deni": [42, 90, 317], "pv": [42, 48, 298, 304, 317], "nf": [42, 150, 317], "appear": [42, 49, 59, 82, 196, 198, 200, 203, 205, 232, 233, 291, 317], "kafka": [42, 300, 317], "zookeep": [42, 317], "crashloopbackoff": [42, 317], "bitnami": [42, 317], "755": 42, "1001": [42, 304], "brutal": 42, "chmod": [42, 58, 317], "777": [42, 79, 317], "eleg": [42, 45], "grant": [42, 288], "timeout": [42, 50, 51], "rais": [42, 49, 82, 90, 92, 126, 138, 145, 153, 154, 156, 162, 171, 175, 176, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 225, 226, 230, 232, 235, 236, 237, 248, 251, 283, 286, 287, 291, 294, 298], "timeout_second": [42, 138, 298, 317], "600": [42, 79, 298, 317], "enterpris": 42, "proxi": [42, 317], "properli": [42, 55], "wrong": 42, "resolut": [42, 304], "occup": 42, "hostnam": [42, 317], "no_proxi": [42, 317], "suffix": 42, "flush": 42, "forcibli": 42, "contact": 42, "slack": [42, 317], "dingtalk": [42, 317], "happi": 42, "90": [44, 79], "traffic": 45, "web": [45, 82, 156, 224, 238, 243, 284], "ever": [45, 66], "amount": [45, 58, 64, 76, 143, 145, 147], "hidden": [45, 73, 74, 76, 139, 323], "attract": 45, "attent": [45, 76, 145], "compuatit": 45, "difficult": [45, 140, 150, 304], "obstacl": 45, "attempt": [45, 48, 74, 75, 78, 291], "curv": [45, 74], "hard": [45, 57, 67, 68, 252, 303], "complic": [45, 49, 59, 83], "sql": [45, 49, 59, 60], "deep": [45, 66, 71, 139, 144, 145, 147, 167, 170, 279, 291], "gnn": [45, 47, 63, 65, 66, 69, 71, 72, 77, 78, 139, 143, 144, 145, 147, 148, 298, 320, 323], "train": [45, 63, 65, 66, 67, 71, 72, 77, 78, 80, 141, 144, 145, 147, 148, 151, 155, 298, 318, 323], "seamlessli": [45, 48, 54, 60, 62, 71, 77, 78], "fist": 45, "establish": [45, 304], "interpret": [45, 71, 156], "mount_dataset": [45, 70], "ran": [45, 68], "p2p_network": 45, "embed": [45, 63, 69, 72, 76, 140, 147], "inter": [45, 152, 210, 213], "wherea": [45, 210, 303], "numpi": [45, 59, 63, 81, 83, 98, 109, 118, 142, 143, 145, 146, 147, 148, 151, 153, 155, 156, 283, 291, 294, 320], "datafram": [45, 70, 83, 97, 108, 118, 121, 153, 291, 314, 324], "head": [45, 48, 57, 59], "csv": [45, 48, 70, 153, 291, 294, 302, 304, 305, 318, 319, 324], "creationd": [45, 59, 70, 319, 324], "locationip": [45, 70, 324], "browserus": [45, 59, 70, 324], "618475290625": 45, "2011": [45, 59, 224], "08": [45, 79, 156], "17t14": 45, "26": [45, 59, 79, 141, 142, 144, 240], "59": [45, 79], "961": 45, "210": [45, 79, 287], "17": [45, 59, 79, 141, 142, 144, 314], "48": [45, 79, 141, 142, 144, 243, 244, 290], "chrome": [45, 59], "ye": [45, 291], "618475290626": 45, "17t11": 45, "570": 45, "comment_replyof_com": 45, "274877907301": 45, "274877907299": 45, "274877907302": 45, "pd": [45, 70, 324], "df_v": [45, 70, 314, 324], "read_csv": [45, 70, 324], "sep": [45, 70, 153, 324], "df_e": [45, 70, 324], "graphcomput": [47, 322], "gl": [47, 66, 77, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152], "neural": [47, 63, 71, 72, 77, 78, 80, 139, 140, 143, 145, 147, 151], "posit": [47, 59, 76, 77, 139, 145, 156, 201, 220, 222, 223, 225, 226, 230, 238, 239, 240, 241, 242, 286, 289, 303, 306], "frequent": [47, 71, 74, 304], "neo4j": [47, 48, 50, 51, 52, 53, 73, 78, 79, 154, 302], "groot": [47, 55, 71, 78], "graphar": 47, "gart": 47, "gap": 47, "oltp": [47, 71, 73], "style": [47, 62, 71, 296], "flex": 47, "too": [48, 59, 78, 141, 210, 291], "wonder": 48, "throughout": [48, 49, 57], "smoothli": 48, "easiest": 48, "websit": [48, 74, 210], "untar": 48, "cp": [48, 50, 288, 303], "tree": [48, 73, 191, 193, 201, 221, 227, 229, 239, 240, 241, 254, 255, 292, 298, 324], "claim": [48, 273, 303, 304], "pvc": [48, 298, 304], "your_release_nam": 48, "gremlinport": 48, "grep": 48, "awk": 48, "cypherport": 48, "cypher": [48, 49, 50, 51, 54, 71, 72, 73, 77, 78, 154, 298], "subsequ": [48, 49, 50, 58, 82, 140, 141], "pertain": 48, "littl": [48, 57, 59], "v6d_modern_load": [48, 50], "data_path": [48, 305], "store_data_path": [48, 50], "header_row": [48, 153, 305], "delimit": [48, 153, 293, 305, 319], "src_label": [48, 70, 153, 294, 298, 304, 305, 318, 319], "dst_label": [48, 70, 153, 294, 298, 304, 305, 318, 319], "thing": [48, 145, 311], "key1": 48, "value1": [48, 70, 324], "key2": 48, "value2": 48, "header": [48, 153, 303, 304], "token": [48, 57], "column_typ": 48, "infer": [48, 70, 76, 77], "filed1": 48, "filed2": 48, "unexpect": 48, "troubl": 48, "correspondingli": [48, 66, 248, 251], "v6d_ldbc_loader": 48, "physic": [48, 49, 71, 82, 156, 214, 215, 216, 238, 302], "scalabl": [48, 58, 74, 75, 76, 77, 78, 288], "replicacount": [48, 304], "hdf": [48, 70, 118, 150, 153, 304, 314, 324], "8182": [48, 50, 58, 304], "pegasusworkernum": 48, "obvious": 48, "x": [48, 58, 59, 79, 82, 139, 145, 151, 156, 194, 227, 235, 237, 238, 242, 266, 323], "pegasustimeout": 48, "durat": [48, 57], "000": [48, 59, 79], "inher": 49, "massiv": [49, 75], "manufactur": 49, "upcom": 49, "gql": [49, 71, 78], "entri": [49, 57, 59, 66, 68, 155, 156, 203, 220, 222, 223, 248, 250, 251, 269, 311], "sticki": 49, "peopl": [49, 59, 291, 304], "shelv": 49, "intellig": [49, 59, 71, 78, 248, 251], "throughput": [49, 71, 77, 78, 304], "hybrid": [49, 303, 304], "dedupl": 49, "higher": [49, 77, 156, 166, 230, 304], "latenc": [49, 58, 71, 77, 78], "hope": [49, 59, 304], "trade": [49, 71, 304], "inevit": 49, "realist": [49, 283], "lengthi": 49, "ir": [49, 50, 71, 73], "verif": [49, 71], "account": [49, 75, 289, 322], "80": [49, 79, 270], "decoupl": [49, 71, 78], "upper": [49, 57, 59, 63, 75, 210, 303], "briefli": [49, 76], "submit": [49, 52, 58, 59, 72, 75, 140, 141, 154, 300, 304, 318], "regist": [49, 70, 81, 84, 113, 298], "plan": [49, 53, 71, 73, 74, 75, 86, 304, 312], "algebra": [49, 280], "edgeexpans": 49, "pathexpans": 49, "legal": 49, "predic": [49, 59], "arithmet": [49, 57, 59], "aspect": [49, 59, 78], "firstli": [49, 55, 59, 70, 78], "rbo": 49, "down": [49, 208], "cbo": 49, "statist": [49, 59, 142], "glogu": 49, "shuffl": [49, 57, 145, 151, 155], "align": [49, 66, 75, 139, 142, 143, 242, 303], "transform": [49, 59, 81, 93, 106, 283, 291, 292, 296, 302], "plu": [49, 59, 194, 266], "unaccept": 49, "come": [49, 59, 62, 70, 72, 73, 76, 77, 79, 142, 257, 294], "kubenet": 50, "end2end": 50, "sf": [50, 59], "outlin": [50, 53], "depth": [50, 53, 72, 139, 151, 156, 323], "v6d_object_id": 50, "unsur": 50, "assist": [50, 74], "vineyard_ipc_socket": [50, 305], "meta": [50, 63, 70, 81, 142, 143, 153, 302, 304], "gie_test_hom": 50, "graph_nam": 50, "rpc": [50, 81, 152, 298, 304], "1234": 50, "127": [50, 79, 304], "11234": 50, "pegasu": [50, 71], "gaia_executor": 50, "log4r": [50, 304], "yml": [50, 302, 304], "240000": 50, "1024": 50, "localhost": [50, 52, 58, 70, 298, 324], "bolt": [50, 52, 75], "7687": [50, 52], "authent": [50, 52, 77, 304], "usernam": [50, 304], "password": [50, 304], "auth": [50, 52, 156, 304], "djna": 50, "kill": [50, 298], "pkill": 50, "gcc": [51, 79, 321], "64": [51, 58, 66, 144, 145, 222, 322], "chip": [51, 321], "straightforward": [51, 72], "hereaft": [51, 59, 72], "q1": [51, 59, 72], "q2": [51, 59, 72], "q3": [51, 59, 72], "someth": [51, 291], "453": 51, "xxx": [51, 149, 298, 314], "pppp": 51, "startup": 51, "600000": 51, "entr": 51, "ee": 51, "syntact": [51, 55, 60, 75], "sugar": [51, 55, 60, 75], "protocol": [52, 54, 70, 78, 298], "connector": [52, 57, 59], "graphdatabas": 52, "routingcontrol": [52, 72], "uri": [52, 70, 324], "print_top_10": 52, "execute_queri": 52, "routing_": [52, 72], "simpler": [52, 58, 59, 291], "encompass": [52, 58, 69], "syntax": [53, 57, 66, 75, 83, 145, 291, 297], "compli": [53, 145], "constraint": [53, 59, 60, 75], "sole": 53, "unaddress": 53, "regard": [53, 59, 69, 303], "highlight": [53, 71, 75], "terminologi": 53, "keyword": [53, 158, 159, 160, 227, 234, 238, 239, 240, 241, 242, 291, 294, 297, 298], "insensit": 53, "capit": 53, "lowercas": 53, "letter": [53, 285], "clariti": 53, "categori": [53, 63, 65, 66, 72, 76, 151], "slightli": [53, 146, 210, 297], "elabor": [53, 78], "boolean": [53, 70, 82, 84, 141, 145, 156, 175, 176, 213, 215, 218, 249, 289], "integ": [53, 57, 156, 191, 194, 195, 196, 197, 198, 200, 202, 203, 205, 206, 209, 210, 213, 214, 215, 216, 218, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 256, 269, 283, 284, 285, 286, 288, 291, 304], "byte": [53, 82, 90, 150], "tempor": 53, "int32": [53, 65, 69, 72, 140, 142, 150, 151, 318], "uint32": 53, "int64": [53, 70, 84, 110, 132, 140, 142, 143, 148, 150, 151, 153, 298, 324], "uint64": [53, 132, 153, 298], "byte_arrai": 53, "null": [53, 156, 173, 189, 190, 197, 204, 256, 286, 291], "datetim": 53, "zone": 53, "citizen": 53, "unsupport": [53, 55, 57], "conceiv": [53, 238], "inner_typ": 53, "mathemat": [53, 223, 225, 233, 235, 237, 246], "moment": [53, 86, 304], "averag": [53, 57, 69, 72, 82, 156, 210], "avg": [53, 156], "summar": [53, 59, 63], "subtract": 53, "divis": 53, "modulo": [53, 235], "exponenti": [53, 57, 59, 76, 238, 240, 241], "inequ": 53, "NOT": [53, 303], "WITH": 53, "conjunct": 53, "AND": [53, 72, 84], "disjunct": 53, "OR": [53, 55, 84, 291], "exclus": 53, "xor": 53, "negat": 53, "bitopr": 53, "scalar": [53, 149, 156], "fold": [53, 303, 322], "notabl": 53, "AS": [53, 55, 288, 292], "anti": [53, 71, 75, 78], "BY": [53, 55], "leverag": [54, 55, 61, 62, 73, 75, 86, 283, 300, 308], "interconnect": [54, 74, 141], "tcp": 54, "empow": [54, 60, 75], "claus": 54, "websocket": [55, 322], "worth": [55, 69, 145, 153, 291], "mutat": 55, "lambda": [55, 59, 139, 145, 151, 156, 227, 238, 240, 241, 242, 323], "groovi": 55, "currenttimemilli": [55, 322], "expr": [55, 57, 59, 322], "transact": [55, 71, 77, 78, 79, 300, 304, 314], "secondari": 55, "rocksdb": [55, 304], "isol": [55, 156, 252, 304], "therein": 55, "entiti": [55, 59, 69, 72, 76, 140], "council": [55, 79], "birthdai": [55, 70, 324], "differenti": 55, "123456": [55, 63, 76, 304], "hasid": 55, "expos": [55, 61, 143, 154, 298, 308], "secondli": [55, 78], "triplet": 55, "path_expand": 55, "desir": [55, 153, 210, 232, 252, 254, 255], "concret": [55, 82, 83, 153], "endv": [55, 59, 75, 322], "repeat": [55, 75, 76, 145, 151, 225, 230, 233, 253, 256, 322], "path_opt": [55, 57, 59, 75, 322], "pathexpand": 55, "marko": [55, 57, 59], "27": [55, 57, 59, 79, 141, 142, 144, 272], "hasstep": 55, "shortcom": [55, 59], "groupcount": [55, 322], "age_cnt": 55, "age_sum": 55, "significantli": [55, 74, 77], "scan": [55, 303], "propertyidvalu": 55, "larger": [55, 59, 69, 238], "inE": [55, 145, 322], "conquer": 56, "retain": [57, 232, 305], "situat": [57, 59, 62, 140, 141, 304], "meant": [57, 59], "moreov": [57, 71, 75, 77, 303], "vertexid": 57, "inject": 57, "edgeid": 57, "edgelabel": [57, 103], "histori": [57, 59, 75], "elementid": 57, "propertykei": 57, "accessor": 57, "eq": [57, 59, 75, 82, 322], "neq": [57, 322], "gt": [57, 59, 322], "lt": [57, 59, 322], "gte": [57, 59, 72, 318, 322], "lte": [57, 72, 318, 322], "outsid": [57, 322], "textp": [57, 322], "startingwith": [57, 322], "endingwith": [57, 322], "rko": 57, "ark": 57, "notstartingwith": [57, 322], "notendingwith": [57, 322], "notcontain": [57, 322], "unequ": 57, "nest": 57, "wheretravers": 57, "act": [57, 139, 288, 291, 323], "startkei": 57, "alter": [57, 291], "opposit": [57, 145, 219, 266], "nottravers": 57, "duplic": [57, 59, 218, 220, 222, 291, 292], "deduplabel": 57, "composit": [57, 59], "de": [57, 68], "impli": 57, "flat": 57, "br": 57, "selectkei": 57, "roll": [57, 59, 62], "accompani": 57, "aggregatefunc": 57, "emit": [57, 59, 139, 142, 145, 151, 323], "ascend": [57, 59], "asc": [57, 59], "desc": [57, 59], "bias": 57, "toss": 57, "merg": [57, 145], "uniontravers": 57, "sentenc": [57, 59], "matchsent": 57, "binder": 57, "__": [57, 58, 59, 72, 145, 318, 322], "graphnam": 57, "unrol": 57, "linear": [57, 225, 227, 283, 303], "lengthrang": 57, "keyvaluepair": 57, "result_opt": [57, 59, 322], "end_v": [57, 59, 322], "all_v_": 57, "all_v": [57, 59, 322], "vada": 57, "josh": 57, "isnul": 57, "rippl": 57, "lop": 57, "peter": 57, "alias": 57, "k1": 57, "k2": 57, "v2": [57, 59, 65, 75, 139, 269, 323], "35": [57, 59, 79, 141, 142, 144, 151, 218, 268, 284], "29": [57, 59, 141, 142, 144], "simplepath": [57, 322], "imper": [57, 75], "reflect": [57, 303, 311], "latter": [57, 59, 74], "mix": [57, 82, 303], "sack": [57, 322], "guidanc": 58, "gremlinpython": [58, 304], "sy": [58, 151], "gremlin_python": [58, 304], "graph_travers": 58, "driver_remote_connect": 58, "driverremoteconnect": [58, 304], "gremlin_endpoint": [58, 304], "remoteconn": [58, 304], "withremot": [58, 304], "assert": [58, 82, 303], "oom": 58, "benefit": [58, 70, 74, 303], "vast": 58, "mitig": 58, "risk": [58, 71], "queue": [58, 84], "graph_url": [58, 154, 304, 322], "q": [58, 143, 145, 151, 233, 237], "stopiter": 58, "resultiterationbatchs": 58, "addcontactpoint": [58, 304], "resultset": [58, 304], "hasnext": 58, "dlcdn": 58, "your_endpoint_address": 58, "your_endpoint_port": 58, "classnam": [58, 322], "ser": [58, 322], "gryomessageserializerv1d0": [58, 322], "serializeresulttostr": [58, 322], "exit": [58, 82, 322], "realm": 59, "audit": 59, "toolsuit": 59, "primarili": [59, 75, 303], "snb": [59, 70, 319, 324], "qp": [59, 77], "simul": [59, 116, 151], "conclus": 59, "confid": 59, "profici": 59, "intric": 59, "permit": [59, 291], "3k": 59, "gremlin_queri": 59, "190376": 59, "787074": 59, "sf1": 59, "432345564227583365": 59, "504403158265495622": 59, "576460752303435306": 59, "432345564227579434": 59, "hastyp": 59, "504403158265495612": 59, "144115188075855941": 59, "issubclassof": 59, "504403158265495553": 59, "confus": [59, 239, 240, 241], "mechan": [59, 73, 76, 78, 300, 308], "belong": [59, 76, 82, 83, 84, 153, 281, 284, 291, 297, 304], "distinguish": [59, 71, 139, 140, 141, 303], "worri": 59, "portion": [59, 74, 75, 83, 153], "havelabel": 59, "veritc": 59, "216172782113783808": 59, "216172782113784710": 59, "label1": 59, "label2": 59, "forum": 59, "72057594037936036": 59, "mention": [59, 302, 303, 312], "360287970189718653": 59, "360287970189718655": 59, "joseph": 59, "joeseph": 59, "firstnam": [59, 70, 319, 324], "yacin": 59, "year": [59, 72, 74, 318], "01": [59, 65, 69, 72, 82, 140, 156, 215, 318], "01t00": 59, "00": 59, "curiou": 59, "property_nam": [59, 83, 84, 297], "38416": 59, "mayb": 59, "pyplot": 59, "plt": 59, "comment_cont": 59, "comment_length": 59, "histogram": 59, "hist": [59, 165], "50": [59, 79, 238, 240, 241], "607c8e": 59, "grid": [59, 284], "axi": [59, 81, 82, 83, 98, 122, 151, 297], "xlabel": 59, "ylabel": 59, "gender": [59, 70, 324], "person_gend": 59, "male": 59, "femal": 59, "male_count": 59, "female_count": 59, "216172782113784483": 59, "around": [59, 154], "432345564227569033": 59, "288230376151712472": 59, "144115188075856168": 59, "144115188075860911": 59, "72057594037934114": 59, "hasmoder": 59, "studyat": 59, "workat": 59, "islocatedin": 59, "432345564227582847": 59, "hasinterest": 59, "504403158265496227": 59, "864691128455136658": 59, "1008806316530991636": 59, "360287970189645858": 59, "en": [59, 74, 82, 253, 257, 258, 259, 260, 262, 263, 264, 270, 271, 272, 273, 275, 276, 277, 278], "e1": 59, "citi": [59, 63, 74, 76], "ispartof": 59, "countri": 59, "288230376151711797": 59, "understand": [59, 66, 75, 139, 145, 153, 303], "216172782113784555": 59, "14": [59, 79, 141, 142, 144, 196, 256, 264, 276, 291], "exactli": [59, 63, 75, 82, 156, 201, 210, 224, 269, 297, 304], "432345564227569357": 59, "432345564227570524": 59, "288230376151712984": 59, "144115188075861043": 59, "replyof": [59, 319], "54336": 59, "33411": 59, "360287970189700805": 59, "59465": 59, "33403": 59, "awai": 59, "ineffect": 59, "illeg": 59, "simple_path": 59, "unfold": [59, 82], "hascreat": 59, "nation": 59, "china": 59, "np": [59, 142, 145, 151, 155, 306], "market": 59, "japan": 59, "browsers_us": 59, "browser_list": 59, "firefox": 59, "safari": 59, "browser_count": 59, "autopct": 59, "1f": 59, "univers": [59, 71, 156, 189, 190, 237, 247, 279, 283], "previous": [59, 90, 227, 228, 229, 302, 303], "person1": 59, "person2": 59, "university1": 59, "university2": 59, "studi": [59, 69, 72, 78, 237, 239], "216172782113784481": 59, "216172782113784279": 59, "144115188075858884": 59, "216172782113784361": 59, "216172782113784291": 59, "144115188075858879": 59, "216172782113784642": 59, "216172782113784473": 59, "216172782113784328": 59, "144115188075858700": 59, "216172782113784700": 59, "216172782113784331": 59, "144115188075860619": 59, "216172782113784375": 59, "216172782113784333": 59, "144115188075858813": 59, "216172782113784593": 59, "216172782113784688": 59, "144115188075860870": 59, "216172782113784047": 59, "216172782113784692": 59, "144115188075862429": 59, "isomorph": [59, 76, 141, 145, 270, 292], "22": [59, 79, 141, 142, 144, 284], "23": [59, 141, 142, 144], "216172782113784192": 59, "216172782113784107": 59, "216172782113784171": 59, "regular": [59, 230, 235, 236, 237, 259, 264, 267, 272, 275, 276, 277, 278], "squar": [59, 218, 237, 265, 266, 269, 284], "butterfli": 59, "notion": 59, "matchanalyticsalgorithm": 59, "matchoptimizationalgorithm": 59, "216172782113784587": 59, "216172782113784363": 59, "144115188075860919": 59, "216172782113784532": 59, "216172782113784400": 59, "144115188075861858": 59, "216172782113784491": 59, "216172782113784401": 59, "144115188075858086": 59, "216172782113784598": 59, "216172782113784629": 59, "144115188075858881": 59, "216172782113783931": 59, "216172782113784657": 59, "144115188075858708": 59, "repli": 59, "pa": 59, "pb": 59, "216172782113783809": 59, "216172782113784011": 59, "360287970189640007": 59, "360287970189640008": 59, "360287970189640009": 59, "34": [59, 79, 141, 142, 144, 284], "2012": [59, 250], "216172782113783812": 59, "216172782113783882": 59, "36": [59, 79, 141, 142, 144, 196, 276, 284, 316], "360287970189640010": 59, "37": [59, 79, 141, 142, 144, 156, 284, 316], "216172782113784105": 59, "38": [59, 79, 141, 142, 144, 284, 316], "41": [59, 79, 141, 142, 144, 231, 284], "43": [59, 141, 142, 144, 156, 258, 284, 314], "216172782113783814": 59, "216172782113783962": 59, "360287970189640135": 59, "52": [59, 284], "216172782113784199": 59, "54": [59, 79, 231, 284], "216172782113784038": 59, "56": [59, 79, 190, 284], "216172782113783816": 59, "216172782113784144": 59, "175": 59, "360287970189640462": 59, "72057594037927936": 59, "144115188075855872": 59, "288230376151711744": 59, "432345564227567616": 59, "504403158265495555": 59, "india": 59, "hasmemb": 59, "8248": 59, "8101": 59, "imposs": 59, "back": [59, 62, 68, 149, 303], "2822": 59, "tag1": 59, "tag2": 59, "37164": 59, "432": 59, "vertinc": 59, "property1": 59, "properti2": 59, "lastnam": [59, 70, 319, 324], "donati": 59, "luigi": 59, "hall": 59, "costa": 59, "carlo": 59, "khan": 59, "meera": 59, "mahinda": 59, "eli": 59, "94": 59, "228": [59, 79], "emb": [59, 139, 323], "th": [59, 143, 156, 269], "dom": 59, "pedro": 59, "ii": 59, "condariuc": 59, "bonomi": 59, "anyth": 59, "david": [59, 192, 203, 268], "silva": 59, "guliyev": 59, "tagclass": 59, "504403158265495552": 59, "504403158265495554": 59, "504403158265495556": 59, "504403158265495557": 59, "504403158265495558": 59, "504403158265495559": 59, "504403158265495560": 59, "504403158265495561": 59, "504403158265495562": 59, "504403158265495563": 59, "504403158265495564": 59, "504403158265495565": 59, "504403158265495566": 59, "504403158265495567": 59, "504403158265495568": 59, "504403158265495569": 59, "504403158265495570": 59, "504403158265495571": 59, "504403158265495572": 59, "504403158265495573": 59, "504403158265495574": 59, "504403158265495575": 59, "504403158265495576": 59, "504403158265495577": 59, "504403158265495578": 59, "504403158265495579": 59, "504403158265495580": 59, "504403158265495581": 59, "504403158265495582": 59, "504403158265495583": 59, "504403158265495584": 59, "504403158265495585": 59, "504403158265495586": 59, "504403158265495587": 59, "504403158265495588": 59, "504403158265495589": 59, "504403158265495590": 59, "504403158265495591": 59, "504403158265495592": 59, "504403158265495593": 59, "504403158265495594": 59, "504403158265495595": 59, "504403158265495596": 59, "504403158265495597": 59, "504403158265495598": 59, "504403158265495599": 59, "504403158265495600": 59, "504403158265495601": 59, "504403158265495602": 59, "504403158265495603": 59, "504403158265495604": 59, "504403158265495605": 59, "504403158265495606": 59, "504403158265495607": 59, "504403158265495608": 59, "504403158265495609": 59, "504403158265495610": 59, "504403158265495611": 59, "504403158265495613": 59, "504403158265495614": 59, "504403158265495615": 59, "504403158265495616": 59, "504403158265495617": 59, "504403158265495618": 59, "504403158265495619": 59, "504403158265495620": 59, "504403158265495621": 59, "q4": 59, "690": 59, "134313148716225": 59, "216172782113783811": 59, "216172782113783813": 59, "216172782113784707": 59, "216172782113784708": 59, "216172782113784709": 59, "216172782113783910": 59, "216172782113784104": 59, "216172782113784207": 59, "216172782113784318": 59, "216172782113784305": 59, "216172782113784597": 59, "216172782113784693": 59, "216172782113784018": 59, "216172782113784092": 59, "216172782113784108": 59, "216172782113784161": 59, "216172782113784162": 59, "73": [59, 79, 237], "216172782113783875": 59, "216172782113783932": 59, "216172782113784057": 59, "216172782113784068": 59, "216172782113784065": 59, "216172782113784235": 59, "216172782113784247": 59, "meaning": [59, 70, 83, 153], "449": 59, "454": [59, 79], "216172782113783810": 59, "acsend": 59, "descend": [59, 285], "216172782113784082": 59, "216172782113784169": 59, "216172782113784267": 59, "216172782113784368": 59, "216172782113784376": 59, "216172782113783938": 59, "216172782113784405": 59, "216172782113783980": 59, "216172782113783844": 59, "216172782113783901": 59, "216172782113783935": 59, "216172782113784439": 59, "216172782113784315": 59, "216172782113784374": 59, "216172782113784601": 59, "216172782113784431": 59, "216172782113783815": 59, "216172782113783817": 59, "216172782113783971": 59, "216172782113784154": 59, "216172782113784381": 59, "216172782113783933": 59, "earlier": [59, 242, 304], "216172782113783819": 59, "216172782113783826": 59, "216172782113783836": 59, "bi": [59, 74, 77], "25": [59, 65, 69, 72, 79, 141, 142, 144, 213, 215, 218, 237, 284, 318], "query2": 59, "09": [59, 79], "200": [59, 139, 297, 307, 323], "07": [59, 68, 79, 210, 218], "hastag": 59, "count1": 59, "count2": 59, "jet_li": 59, "zhang_yim": 59, "faye_wong": 59, "tsui_hark": 59, "bruce_le": 59, "johnny_depp": 59, "tom_cruis": 59, "jackie_chan": 59, "query3": 59, "moder": 59, "infinit": [59, 252], "seriou": 59, "song": 59, "containerof": 59, "message_count": 59, "824633725780": 59, "08t02": 59, "334": [59, 79], "album": 59, "hao": 59, "wang": [59, 223, 225], "19791209300479": 59, "755914248304": 59, "02t20": 59, "03": [59, 79, 312], "344": 59, "wall": 59, "lin": 59, "lei": 59, "24189255811275": 59, "824633725045": 59, "02": [59, 218], "03t18": 59, "633": 59, "893353201782": 59, "28t23": 59, "53": [59, 79, 284], "251": 59, "1030792152809": 59, "03t09": 59, "47": [59, 79, 141, 142, 144], "414": 59, "chen": 59, "32985348833887": 59, "07t07": 59, "30": [59, 79, 141, 142, 144, 215, 260, 262, 267, 304, 322], "038": 59, "zhang": [59, 314], "yang": [59, 314], "15393162789707": 59, "query4": 59, "membercount": 59, "country_count": 59, "counri": 59, "personcount": 59, "72057594037932503": 59, "72057594037932473": 59, "72057594037932489": 59, "72057594037932494": 59, "72057594037932501": 59, "72057594037934803": 59, "72057594037934804": 59, "72057594037935005": 59, "72057594037928132": 59, "72057594037935879": 59, "288230376151711799": 59, "country_top100_forums_dict": 59, "personcountforum": 59, "72057594037935702": 59, "72057594037930685": 59, "72057594037932114": 59, "72057594037934231": 59, "72057594037935703": 59, "72057594037935730": 59, "72057594037935734": 59, "72057594037932509": 59, "72057594037935707": 59, "72057594037935708": 59, "72057594037935711": 59, "72057594037935714": 59, "72057594037935719": 59, "72057594037935729": 59, "72057594037935731": 59, "72057594037935724": 59, "72057594037929560": 59, "72057594037931546": 59, "72057594037931545": 59, "72057594037932479": 59, "72057594037932485": 59, "72057594037932505": 59, "72057594037932511": 59, "72057594037935710": 59, "72057594037935722": 59, "72057594037929246": 59, "72057594037928266": 59, "72057594037935713": 59, "72057594037934308": 59, "72057594037934313": 59, "72057594037934302": 59, "72057594037930430": 59, "72057594037934303": 59, "72057594037932482": 59, "72057594037935147": 59, "72057594037935148": 59, "72057594037935157": 59, "72057594037927973": 59, "72057594037929386": 59, "72057594037934315": 59, "72057594037935720": 59, "72057594037935015": 59, "72057594037934300": 59, "72057594037930861": 59, "72057594037934319": 59, "72057594037931542": 59, "72057594037929583": 59, "72057594037933324": 59, "72057594037929182": 59, "72057594037929739": 59, "72057594037934829": 59, "72057594037935658": 59, "72057594037935660": 59, "72057594037935674": 59, "72057594037935682": 59, "72057594037935683": 59, "72057594037935672": 59, "72057594037927978": 59, "72057594037935163": 59, "72057594037935014": 59, "72057594037931544": 59, "72057594037934297": 59, "72057594037927979": 59, "72057594037932474": 59, "72057594037934384": 59, "72057594037932639": 59, "72057594037934380": 59, "72057594037935146": 59, "72057594037935152": 59, "72057594037928134": 59, "72057594037928674": 59, "72057594037929248": 59, "72057594037931240": 59, "72057594037931247": 59, "72057594037931256": 59, "72057594037930958": 59, "72057594037930963": 59, "72057594037931259": 59, "72057594037931260": 59, "72057594037931262": 59, "72057594037929365": 59, "72057594037929419": 59, "72057594037929421": 59, "72057594037929431": 59, "72057594037929434": 59, "72057594037929437": 59, "72057594037929446": 59, "72057594037929447": 59, "72057594037929449": 59, "72057594037929450": 59, "72057594037935166": 59, "72057594037929519": 59, "72057594037929451": 59, "72057594037929452": 59, "72057594037935046": 59, "72057594037932339": 59, "72057594037932481": 59, "72057594037934294": 59, "72057594037932389": 59, "72057594037932976": 59, "72057594037930870": 59, "72057594037931266": 59, "72057594037928092": 59, "72057594037928495": 59, "72057594037929510": 59, "72057594037929517": 59, "72057594037929961": 59, "72057594037929965": 59, "72057594037930242": 59, "72057594037930248": 59, "72057594037930250": 59, "72057594037930313": 59, "72057594037931547": 59, "72057594037935686": 59, "72057594037929052": 59, "72057594037929053": 59, "72057594037929055": 59, "72057594037929057": 59, "72057594037929060": 59, "72057594037934811": 59, "72057594037934813": 59, "72057594037934816": 59, "72057594037934821": 59, "72057594037934822": 59, "72057594037934823": 59, "72057594037934828": 59, "72057594037934835": 59, "72057594037934837": 59, "72057594037934975": 59, "72057594037934976": 59, "72057594037935032": 59, "72057594037935038": 59, "72057594037935045": 59, "72057594037935664": 59, "72057594037935673": 59, "72057594037935678": 59, "72057594037935685": 59, "72057594037931549": 59, "72057594037931550": 59, "72057594037931552": 59, "72057594037931554": 59, "72057594037931557": 59, "72057594037931560": 59, "72057594037931566": 59, "72057594037935671": 59, "72057594037935670": 59, "72057594037934977": 59, "72057594037931543": 59, "72057594037929518": 59, "72057594037935679": 59, "72057594037931575": 59, "72057594037932438": 59, "72057594037932878": 59, "72057594037932886": 59, "72057594037932888": 59, "72057594037927982": 59, "72057594037930526": 59, "72057594037930535": 59, "72057594037930546": 59, "72057594037930976": 59, "72057594037930536": 59, "72057594037931358": 59, "72057594037930366": 59, "72057594037931574": 59, "72057594037932435": 59, "72057594037935020": 59, "72057594037935864": 59, "72057594037933861": 59, "72057594037932440": 59, "72057594037927981": 59, "72057594037931349": 59, "72057594037931366": 59, "72057594037932885": 59, "72057594037927980": 59, "72057594037930529": 59, "72057594037930532": 59, "72057594037931304": 59, "72057594037932433": 59, "72057594037932441": 59, "72057594037934547": 59, "query11": 59, "live": 59, "startdat": 59, "enddat": 59, "216172782113784091": 59, "216172782113784250": 59, "216172782113784403": 59, "216172782113784537": 59, "216172782113784122": 59, "query14": 59, "country1": 59, "country2": 59, "subscor": 59, "award": [59, 314], "chile": 59, "p1": 59, "p2": 59, "case1": 59, "case2": 59, "case3": 59, "case4": 59, "216172782113784153": 59, "216172782113784100": 59, "216172782113783956": 59, "216172782113784673": 59, "216172782113784252": 59, "216172782113784263": 59, "216172782113784193": 59, "216172782113784242": 59, "216172782113784623": 59, "216172782113784498": 59, "216172782113784251": 59, "216172782113784538": 59, "216172782113784167": 59, "216172782113783864": 59, "216172782113784613": 59, "216172782113784116": 59, "faq": 60, "jave": [61, 308], "javasdk": [61, 308], "creation": [62, 141, 215], "transit": [62, 260, 288], "magnitud": [62, 73], "superior": [62, 72, 74, 78], "rich": [62, 71, 74, 76, 141, 143], "neg": [62, 63, 139, 143, 145, 147, 151, 156, 175, 253], "gsl": [62, 63, 71, 141, 142, 143, 144, 148, 155], "gat": [62, 76, 139, 147, 323], "deepwalk": [62, 139, 323], "trans": [62, 139, 323], "pyg": [62, 63, 66, 76, 77, 78], "flexibli": [62, 71, 76, 78], "pytorch": [62, 63, 71, 76, 145, 147], "onlin": [62, 73, 76, 77, 300, 304], "fed": [62, 72, 76], "dockerfil": [62, 146], "ek": 62, "aw": [62, 79, 315], "ack": 62, "failov": [62, 78], "concentr": [62, 78, 195], "secur": [63, 76, 77], "industri": [63, 71, 76, 78, 79], "feasibl": [63, 76], "preprocess": [63, 151], "uniformli": [63, 228, 229, 230, 238, 239, 240, 241, 242, 286], "lookup": [63, 76, 151, 291], "topolog": [63, 141], "nn": [63, 65, 68, 69, 72, 76, 82, 139, 151, 318, 323], "ego": [63, 76, 147, 292, 323], "dimension": [63, 69, 72, 76, 140, 142, 143], "conv": [63, 66, 76], "edge_index": [63, 66], "carri": 63, "predict": [63, 69, 71, 72, 76], "asynchron": 63, "tensor": [63, 66, 81, 82, 83, 122, 139, 143, 147, 149, 295, 297], "plaintext": 63, "clearli": [63, 76], "space": [63, 76, 140, 141, 145, 156, 190, 238, 239, 240, 241, 242], "dimens": [63, 65, 68, 69, 72, 76, 140, 238, 239, 240, 241, 283, 318], "term": 63, "batchgraph": 63, "mini": [63, 76], "loss": [63, 65, 68, 69, 72, 76, 151, 318, 323], "mind": 63, "classif": [63, 67, 72, 76, 80, 139, 140, 151], "trainer": [63, 65, 68, 69, 72, 139, 318, 323], "dependic": 64, "hk": 64, "rm": [64, 151], "4g": 64, "aarch64": 65, "processor": 65, "verion": 65, "egographsag": [65, 68, 72, 318], "349": [65, 69, 72, 318], "venu": [65, 72], "confer": [65, 72, 143, 314], "www": [65, 68, 69, 72, 156, 210, 264, 273, 276, 304, 318], "tf": [65, 66, 68, 69, 72, 139, 140, 145, 146, 151, 318, 323], "disable_v2_behavior": [65, 68, 69, 72, 318], "importerror": [65, 68, 69, 72, 318], "load_ogbn_mag": [65, 68, 69, 70, 72, 318, 324], "egosagesuperviseddataload": [65, 69, 72, 318], "localtrain": [65, 68, 69, 72, 318], "node_typ": [65, 68, 69, 72, 139, 141, 142, 145, 148, 151, 155, 318, 323], "class_num": [65, 69, 72, 139, 318, 323], "features_num": [65, 68, 69, 72, 139, 318, 323], "hops_num": [65, 69, 72, 139, 318, 323], "nbrs_num": [65, 68, 69, 72, 318], "epoch": [65, 66, 68, 69, 72, 139, 144, 318, 323], "hidden_dim": [65, 68, 69, 72, 139, 151, 318, 323], "256": [65, 69, 72, 79, 220, 280, 304, 318], "in_drop_r": [65, 69, 72, 318], "learning_r": [65, 68, 69, 72, 151, 318], "reset_default_tf_graph": [65, 69, 72, 318], "act_func": [65, 69, 72, 318], "relu": [65, 69, 72, 318], "dropout": [65, 68, 69, 72, 151, 318], "train_data": [65, 68, 69, 72, 318], "mask": [65, 69, 72, 155, 318], "train_embed": [65, 69, 72, 318], "src_ego": [65, 68, 69, 72, 318], "train_label": [65, 69, 72, 318], "reduce_mean": [65, 69, 72, 139, 151, 318, 323], "sparse_softmax_cross_entropy_with_logit": [65, 69, 72, 139, 151, 318, 323], "logit": [65, 69, 72, 151, 318], "adamoptim": [65, 68, 69, 72, 151, 318], "test_embed": [65, 69, 72, 318], "test_label": [65, 69, 72, 318], "test_indic": [65, 69, 72, 318], "argmax": [65, 69, 72, 318], "output_typ": [65, 69, 72, 126, 295, 318], "test_acc": [65, 69, 72, 318], "div": [65, 69, 72, 318], "reduce_sum": [65, 69, 72, 318], "cast": [65, 69, 70, 72, 151, 303, 318], "float32": [65, 69, 72, 142, 151, 318], "obgn": [65, 69], "mag": [65, 69, 72, 318], "paper_featur": [65, 72, 318], "feat_": [65, 68, 69, 72, 318], "128": [65, 68, 69, 72, 151, 318], "lg": [65, 68, 69, 72, 134, 298, 312, 318], "cite": [65, 68, 69, 72, 318], "gen_label": [65, 68, 69, 72, 134, 298, 318], "val": [65, 68, 69, 72, 139, 155, 298, 318, 323], "85": [65, 68, 69, 72, 79, 82, 298, 318], "seed": [66, 139, 147, 151, 210, 213, 214, 215, 216, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 245, 246, 247, 248, 251, 283, 286, 288], "sampler": [66, 68, 144, 147, 149], "categor": 66, "perceptu": 66, "theori": [66, 143, 151], "unsupervis": [66, 68, 80, 139, 145, 147, 148, 298], "mainstream": [66, 143, 144], "putback": 66, "outofrangeerror": [66, 144, 145, 151], "evolv": [66, 71, 304], "neighborsampl": [66, 143], "edge_weight": [66, 143, 145], "random_with_replac": 66, "topk": [66, 143, 145], "pad": [66, 143], "expand_factor": [66, 143, 148], "sparsenod": [66, 142, 143, 145], "sparseedg": [66, 142, 143, 145], "layer1": [66, 143], "layer2": [66, 143], "neighbor_sampl": [66, 143], "bui": [66, 71, 142, 143, 144, 145, 148, 151], "i2i": [66, 143, 145], "batch_siz": [66, 68, 139, 143, 144, 145, 148, 151, 307, 323], "layer_nod": [66, 143], "int_attr": [66, 142, 143, 144, 148, 151], "layer_edg": [66, 143], "float_attr": [66, 142, 143, 144, 148, 151], "egograph": [66, 76, 139, 147, 323], "negativesampl": [66, 148], "node_weight": [66, 145, 148], "edge_sampl": [66, 144, 148], "negative_sampl": [66, 139, 148, 323], "neg_nod": [66, 148], "heterogen": [66, 69, 72, 74, 76, 140, 141, 142, 143, 145], "randomli": [66, 145, 210, 216, 220, 222, 231, 233, 238, 241, 246, 288], "outv": [66, 139, 143, 145, 151, 322, 323], "overs": 66, "citat": [67, 69, 72, 80, 151, 318], "revisit": [67, 68, 80], "with_dataset": [68, 138, 298, 324], "k8s_service_typ": [68, 138, 298, 318], "loadbalanc": [68, 298, 318], "k8s_image_pull_polici": [68, 138, 298], "cell": [68, 284], "metainfo": 68, "obgn_mag": 68, "ogbn_mag_smal": [68, 70, 318, 324], "chose": [68, 69], "i_featur": [68, 69], "argpars": 68, "tfg": 68, "egosageunsuperviseddataload": 68, "parse_arg": 68, "argumentpars": 68, "egosag": 68, "add_argu": 68, "output_dim": [68, 139, 323], "neg_num": 68, "0001": 68, "agg_typ": 68, "drop_out": 68, "neg_sampl": 68, "temperatur": 68, "dim": [68, 238, 239, 240, 241], "src_emb": [68, 139, 323], "dst_emb": 68, "dst_ego": 68, "neg_dst_emb": 68, "neg_dst_ego": 68, "unsupervised_softmax_cross_entropy_loss": 68, "ogbn": [69, 72, 318], "academ": [69, 72, 318], "microsoft": [69, 72, 318], "institut": [69, 72, 318], "accomplish": [69, 72, 210], "word2vec": [69, 72, 318], "trivial": [70, 78, 207], "bucket": [70, 298, 314], "avaiabl": [70, 304], "vid_field": [70, 153, 319], "_e": [70, 153, 300, 324], "src_field": [70, 153, 319], "dst_field": [70, 153, 319], "ldbc_sampl": [70, 304, 322, 324], "person_0_0": [70, 304, 319, 324], "didn": [70, 79], "person_knows_person_0_0": [70, 304, 319, 324], "comment_0_0": [70, 319, 324], "person_likes_comment_0_0": [70, 324], "deal": [70, 74, 143], "unseen": [70, 76, 306], "person_likes_post_0_0": [70, 324], "post_0_0": [70, 324], "ndarrai": [70, 83, 98, 109, 142, 143, 145, 148, 153, 155, 291, 324], "apart": [70, 238], "comment_replyof_comment_0_0": [70, 319, 324], "datasourc": [70, 324], "col_0": [70, 324], "col_1": [70, 324], "coo": [70, 302, 324], "array_v": [70, 324], "col": [70, 324], "array_": [70, 324], "s3": [70, 153, 324], "hood": 70, "distributedli": [70, 141, 147, 149, 150, 151], "fsspec": [70, 324], "kwarg": [70, 82, 83, 90, 101, 113, 117, 118, 135, 138, 148, 153, 154, 155, 298], "ds1": [70, 324], "datafil": [70, 324], "ds2": [70, 324], "graphscope_bucket": [70, 324], "hangzhou": [70, 140, 324], "ds3": [70, 324], "9000": [70, 304, 324], "extra_conf": [70, 324], "conf1": [70, 324], "d34": [70, 324], "client_kwarg": [70, 324], "region_nam": [70, 324], "east": [70, 324], "ossf": [70, 324], "subclass": [70, 81, 291], "abstractfilesystem": [70, 324], "abstractbufferfil": 70, "_upload_chunk": [70, 324], "_initiate_upload": [70, 324], "_fetch_rang": [70, 324], "register_implement": [70, 324], "protocol_nam": [70, 324], "protocol_file_system": [70, 324], "direction": 70, "exce": [70, 249, 250], "super": [70, 82, 141, 145], "precis": [70, 76, 283], "modular": [71, 283], "rapidli": [71, 143], "seller": 71, "buyer": [71, 75], "fraudul": 71, "review": [71, 82, 156, 220, 238], "sell": 71, "suspici": 71, "fraud": [71, 78], "feed": [71, 134, 139, 142, 145, 151, 155, 298, 323], "webui": 71, "necessit": 71, "comprehens": [71, 77, 79, 80], "diversifi": 71, "ingest": [71, 304], "rapid": 71, "hous": [71, 265, 266], "parti": [71, 271], "analyst": 71, "concurr": [71, 141], "crucial": 71, "gaia": [71, 322], "resembl": [71, 283, 288, 290], "olap": 71, "gen": [71, 145], "dataflow": [71, 73], "arriv": 71, "hiactor": 71, "financi": 71, "billion": [71, 74, 78], "preval": 71, "definit": [71, 156, 237, 238, 240], "miniconda": 72, "scientif": 72, "field_of_studi": [72, 318], "subject": 72, "examin": 72, "4307": [72, 318], "mandatori": [72, 140], "n1": 72, "n2": 72, "proven": 72, "2014": [72, 156, 318], "2020": [72, 318], "ret1": [72, 318], "k_core": [72, 82, 156, 292, 314, 318], "ret2": [72, 318], "kcore": [72, 318], "downstream": [72, 145], "supervis": [72, 80, 140, 143, 151, 298, 318], "train_sag": 72, "130": [72, 318], "effortlessli": 72, "conduit": 72, "simultan": [72, 78, 300], "icde2023": 73, "indroduc": 73, "sigmod2017": [73, 314, 320], "gra": 73, "ph": 73, "arallel": 73, "ngine": 73, "opensourc": 73, "raph": 73, "nalysi": 73, "elat": 73, "ransact": 73, "loos": [73, 78, 300], "mysql": [73, 300], "nutshel": [73, 300], "exploit": [73, 300], "ahead": [73, 300], "wal": [73, 300], "etriev": 73, "IN": 73, "terfac": 73, "portabl": [73, 303], "rust": [73, 303, 304], "handler": [73, 298], "chive": 73, "movi": [73, 141], "guardian": 73, "galaxi": 73, "steal": 73, "tackl": [73, 74], "imbal": 73, "nvlink": 73, "acut": 73, "asymmetr": 73, "holist": 73, "innov": 73, "speedup": 73, "cncf": 73, "sandbox": 73, "opencyph": 73, "soon": [73, 77, 78, 79, 142], "amplifi": 73, "sophist": 73, "dissoci": 73, "ly": 73, "dag": [73, 82, 83, 101, 153, 291, 295, 298], "laptop": 73, "loop": [73, 156, 166, 179, 218, 220, 222, 224, 230, 238, 239, 240, 241, 242, 248, 251, 291, 292, 322], "correl": [73, 156], "subtask": 73, "earli": 73, "nsdi": [73, 320], "legaci": 73, "interchang": 73, "memoiz": 73, "vldb2021": 73, "artial": 73, "ncrement": 73, "transport": 74, "protein": [74, 232], "uncov": 74, "vari": [74, 140], "unless": [74, 143, 291], "discov": 74, "discoveri": [74, 76, 298], "rough": 74, "accordingli": [74, 131], "snap": 74, "stanford": [74, 282], "cs224w": 74, "constitu": 74, "bellman": [74, 156], "ford": [74, 156], "wikipedia": [74, 82, 253, 257, 258, 259, 260, 262, 263, 264, 270, 271, 272, 273, 275, 276, 277, 278, 284], "wiki": [74, 82, 253, 257, 258, 259, 260, 262, 263, 264, 270, 271, 272, 273, 275, 276, 277, 278], "s_algorithm": 74, "towardsdatasci": 74, "9bd8951e7da": 74, "road": [74, 306], "logist": 74, "deliveri": 74, "media": 74, "ten": [74, 78, 143], "nontrivi": [74, 263], "steep": 74, "sought": 74, "occurr": 75, "monei": [75, 78], "launder": [75, 78], "exact": [75, 220, 222, 318], "exclud": 75, "expans": [75, 76, 148, 322], "heurist": [75, 218], "purchas": 75, "bolder": 75, "border": 75, "sens": [75, 283, 298], "worst": 75, "embrac": 75, "grasp": 75, "drug": 76, "accuraci": 76, "likelihood": 76, "biologi": 76, "valuabl": 76, "bioinformat": 76, "chemic": 76, "promis": 76, "driven": [76, 283, 303], "carefulli": 76, "rewind": 76, "stack": 76, "convolut": [76, 147], "weigh": 76, "choic": [76, 303, 304], "huge": [76, 306], "plain": 76, "text": [76, 84, 192], "backward": [76, 145, 242, 298], "gradient": 76, "metric": [76, 238, 239, 240, 241, 242], "recal": 76, "f1": [76, 153], "assess": [76, 151, 268], "irregular": 76, "unstructur": 76, "pool": 76, "hardwar": [76, 307], "undergo": 76, "perceiv": 76, "maxgraph": [77, 320], "2x": 77, "excel": 77, "elast": [77, 304], "versatil": [77, 303], "acid": 77, "encrypt": 77, "stand": [78, 143, 144, 303], "geminigraph": [78, 79], "plato": [78, 79], "empir": 78, "enjoi": 78, "janusgraph": 78, "nebula": 78, "dbm": 78, "relaunch": [78, 304], "recoveri": 78, "coars": 78, "grain": 78, "emphas": 78, "invest": 78, "trace": [78, 82], "dgl": 78, "accommod": 78, "nebular": 78, "movement": [78, 145], "grade": 79, "r6": 79, "8xlarg": 79, "alibabacloud": 79, "ec": 79, "xl": 79, "a038f97": 79, "170e7d3": 79, "21009d6": 79, "v4": 79, "mpich": 79, "fair": 79, "huge_pag": 79, "jemalloc": 79, "o3": 79, "stub": [79, 85, 87, 220, 248, 251], "determinist": [79, 84, 298, 304], "cdlp": [79, 82, 314], "load_direct": 79, "load_undirected_from_direct": 79, "reformat": 79, "mark": [79, 156], "datagen": 79, "9_0": 79, "fb": 79, "62": 79, "9_1": 79, "78": [79, 210, 284], "9_2": 79, "zf": 79, "88": [79, 223, 225], "60": [79, 156, 284], "61": 79, "176": [79, 247], "87": [79, 282], "graph500": 79, "71": [79, 156, 228, 232, 238], "79": [79, 223, 225], "friendster": 79, "97": 79, "39": [79, 141, 142, 144, 156, 284, 314, 316], "86": 79, "57": 79, "126": [79, 224], "98": 79, "83": 79, "66": 79, "1695": 79, "2742": 79, "3600": 79, "425": 79, "55": [79, 190], "lcc": 79, "521": 79, "51": [79, 284], "296": 79, "1859": 79, "201": [79, 287], "842": 79, "68": 79, "competitor": 79, "pagerank_loc": 79, "65": 79, "72": 79, "84": 79, "63": [79, 227, 229], "gunrock": 79, "0c9a96": 79, "v0": [79, 146, 294], "grout": 79, "5ce160": 79, "v7": 79, "v10": 79, "gn6v": 79, "c8g1": 79, "16xlarg": 79, "8x": 79, "16gb": 79, "nvidia": 79, "v100": 79, "gb": 79, "devic": 79, "millisecond": 79, "soc": [79, 211, 212], "livejournal1": 79, "89": 79, "9345": 79, "215": [79, 280], "560": 79, "3029": 79, "129": [79, 246], "389": 79, "155": 79, "0549": 79, "sinaweibo": 79, "168": 79, "1649": 79, "647": 79, "orkut": 79, "105": [79, 211, 212], "121": 79, "193": 79, "658": 79, "3201": 79, "7677": 79, "137": [79, 218], "2139": 79, "319": 79, "261": 79, "69": [79, 278, 284], "235": 79, "567": 79, "283": 79, "073": 79, "6619": 79, "45": [79, 141, 142, 144, 220], "150": 79, "87299": 79, "162": 79, "60403": 79, "9676": 79, "141": 79, "347": 79, "7772": 79, "0118": 79, "306": 79, "8618": 79, "9134": 79, "467": 79, "60801": 79, "8666": 79, "3501": 79, "870": 79, "6451": 79, "198": 79, "829": 79, "5036": 79, "229": 79, "024": 79, "483": 79, "178": 79, "5593": 79, "807": 79, "367": 79, "6946": 79, "2339": 79, "jupyt": [80, 298], "notebook": [80, 298], "jupyterlab": 80, "playground": [80, 325], "bipartit": [80, 139, 141, 197, 245, 246, 247, 279, 323], "grapeengin": 81, "vineyardserv": 81, "grapeinst": 81, "graphscopeserv": 81, "inlin": 81, "dag_fil": 81, "dagfil": 81, "rundagfil": 81, "subscrib": 81, "charg": 81, "commspec": [81, 300, 303, 305], "comm_spec": [81, 300, 303, 305], "vineyard_socket": 81, "bl": 81, "dispatchresult": 81, "onrec": 81, "commanddetail": 81, "gsobject": 81, "objectmanag": 81, "appentri": 81, "icontextwrapp": 81, "ifragmentwrapp": 81, "projector": 81, "propertygraphutil": 81, "objecttyp": 81, "tostr": [81, 305], "putobject": 81, "obj": 81, "removeobject": 81, "getobject": [81, 304, 305], "hasobject": 81, "analyticalserv": 81, "startserv": 81, "stopserv": 81, "engineconfig": 81, "tojsonstr": 81, "vineyard_rpc_endpoint": 81, "enable_java_sdk": 81, "setcommand": 81, "enum": 81, "aggregatepolici": 81, "enumer": 81, "kpickfirst": 81, "kpickfirstnonempti": 81, "krequireconsist": 81, "kconcat": 81, "kpickfirstnonemptygraphdef": 81, "kmergegraphdef": 81, "worker_id": [81, 153], "error_cod": 81, "ok": 81, "set_error": 81, "has_large_data": 81, "set_graph_def": 81, "graphdefpb": 81, "graph_def": 81, "set_data": 81, "large_data": 81, "inarch": 81, "arc": 81, "aggregate_polici": 81, "fragmentwrapp": 81, "addcolumn": 81, "vdata_t": 81, "edata_t": 81, "arrowvertexmap": 81, "internaltyp": 81, "arrowprojectedfragmentbas": 81, "bareregist": 81, "internal_oid_t": 81, "property_graph_typ": 81, "eid_typ": 81, "vertexrang": [81, 84], "inner_vertices_t": 81, "outer_vertices_t": 81, "vertices_t": 81, "sub_vertices_t": 81, "nbr_t": 81, "arrow_projected_fragment_impl": 81, "compact_nbr_t": 81, "compactnbr": 81, "nbrunit": 81, "compact_adj_list_t": 81, "compactadjlist": 81, "const_adj_list_t": 81, "const_compact_adj_list_t": 81, "property_vertex_map_t": 81, "arrowprojectedvertexmap": 81, "label_id_typ": 81, "prop_id_typ": 81, "property_graph_t": 81, "eid_array_t": 81, "data_t": 81, "inner_vertex_array_t": 81, "outer_vertex_array_t": 81, "objectmeta": 81, "preparetorunapp": 81, "prepareconf": 81, "fnum": [81, 84], "vertex_prop_id": 81, "edge_prop_id": 81, "mirrorvertic": 81, "getvertex": 81, "getid": 81, "getinternalid": 81, "getfragid": 81, "typedarrai": 81, "value_typ": 81, "gid2vertex": 81, "vertex2gid": 81, "getinnerverticesnum": 81, "getouterverticesnum": 81, "getverticesnum": 81, "getedgenum": [81, 305], "getinedgenum": [81, 305], "getoutedgenum": [81, 305], "getoutgoingedgenum": 81, "getincomingedgenum": 81, "gettotalverticesnum": 81, "isinnervertex": 81, "getoutervertex": 81, "getinnervertexid": 81, "getinnervertexinternalid": 81, "getoutervertexid": 81, "getoutervertexinternalid": 81, "gid2oid": 81, "oid2gid": 81, "innervertexgid2vertex": 81, "outervertexgid2vertex": 81, "getoutervertexgid": 81, "getinnervertexgid": 81, "compact_": 81, "enable_if": 81, "getincominginnervertexadjlist": 81, "getoutgoinginnervertexadjlist": 81, "getincomingoutervertexadjlist": 81, "getoutgoingoutervertexadjlist": 81, "src_fid": 81, "dst_fid": 81, "getlocaloutdegre": 81, "getlocalindegre": 81, "destlist": 81, "iedest": 81, "oedest": 81, "ioedest": 81, "getvertexmap": 81, "get_out_edges_ptr": 81, "get_in_edges_ptr": 81, "get_oe_offsets_begin_ptr": 81, "get_oe_offsets_end_ptr": 81, "get_ie_offsets_begin_ptr": 81, "get_ie_offsets_end_ptr": 81, "get_edata_array_accessor": 81, "get_vdata_array_accessor": 81, "get_arrow_frag": 81, "vertex_map_id": 81, "local_vertex_map": [81, 305], "getoid": 81, "getgid": 81, "offset2lid": 81, "getoffsetfromlid": 81, "getlidfromgid": 81, "getfidfromgid": 81, "oid_t_": 81, "vid_t_": 81, "arrowfragmentload": 81, "efil": [81, 305], "vfile": [81, 305], "graph_info": 81, "leaf": [81, 83, 128, 156, 201, 285], "table_vec_t": 81, "loadvertexedget": 81, "loadvertext": 81, "loadedget": 81, "loadfrag": 81, "loadfragmentasfragmentgroup": 81, "addlabelstofrag": 81, "frag_id": [81, 300, 305], "addlabelstofragmentasfragmentgroup": 81, "initpartition": 81, "doxygenclass": 81, "arrowfragmentappend": 81, "doxygen": 81, "runner": [81, 314], "_build": 81, "appbas": 81, "defaultmessagemanag": 81, "need_split_edg": 81, "konlyout": 81, "propertyappbas": 81, "propertymessagemanag": 81, "propertyautoappbas": 81, "propertyautomessagemanag": 81, "app_t": 81, "defaultwork": 81, "parallelenginespec": 81, "pe_spec": 81, "defaultparallelenginespec": 81, "getcontext": 81, "ostream": 81, "parallelpropertywork": 81, "parallelpropertymessagemanag": 81, "propertyautowork": 81, "pointer": 81, "appfram": 81, "creatework": 81, "deletework": 81, "lib_path": 81, "worker_handl": 81, "queryarg": 81, "query_arg": [81, 126, 295], "context_kei": 81, "frag_wrapp": 81, "functiontyp": 81, "argsnum": 81, "argsunpack": 81, "proto": [81, 101, 126], "datatyp": 81, "argtypeat": 81, "defaultpropertywork": 81, "ctx_t": 81, "ctxwrapperbuild": 81, "contextwrapp": 81, "vertexpropertycontext": [81, 314], "contextbas": 81, "labeledvertexdatacontext": 81, "contextdatatyp": 81, "icolumn": 81, "get_column": 81, "get_typed_column": 81, "vertex_properti": [81, 82, 84], "properties_map": 81, "vertexdatacontextwrapp": 81, "ivertexdatacontextwrapp": 81, "fragment_wrapp": 81, "unique_ptr": 81, "tondarrai": 81, "todatafram": 81, "tovineyardtensor": 81, "tovineyarddatafram": 81, "toarrowarrai": 81, "tensorcontext": [81, 83], "set_shap": 81, "tensor_t": 81, "tensorcontextwrapp": 81, "itensorcontextwrapp": 81, "cmake_extra_opt": 82, "asset": 82, "labeled_vertex_data": 82, "dynamic_vertex_data": 82, "labeled_vertex_properti": 82, "cpp_pregel": 82, "cython_pi": 82, "cython_pregel": 82, "appdagnod": [82, 117, 123], "__init__": [82, 139, 146, 153, 154, 155, 291, 292, 294, 298, 304, 323], "bytesio": [82, 90], "is_compat": 82, "graphdagnod": [82, 94, 108, 109, 125, 132, 134, 153, 154, 298], "invalidargumenterror": [82, 298], "scannererror": 82, "incorrect": 82, "signatur": [82, 145, 291], "neccessari": 82, "resouc": 82, "__call__": 82, "app_asset": [82, 94, 100], "bind": [82, 303], "app_nod": 82, "__del__": 82, "unload": [82, 105, 123, 125], "attribute_assortativity_coeffici": [82, 314], "assort": 82, "ref": [82, 303], "joint": [82, 248, 249, 250, 251, 292], "newman": [82, 156, 220, 222, 283], "026126": 82, "2003": [82, 156, 213, 220, 231, 239], "numeric_assortativity_coeffici": [82, 314], "analog": 82, "k_": [82, 192, 256], "rac": 82, "s_i": 82, "sum_": [82, 156, 224], "w_": [82, 156, 224], "ij": [82, 156], "k_j": 82, "valueerror": [82, 138, 153, 156, 230, 287, 298], "barrat": 82, "barth\u00e9lemi": 82, "pastor": 82, "satorra": 82, "vespignani": 82, "pna": 82, "101": [82, 320], "3747": 82, "3752": 82, "2004": [82, 245], "average_shortest_path_length": [82, 156, 292, 314], "frac": [82, 156, 166, 224], "vertexdatacontextdagnod": [82, 83], "avg_clust": [82, 314], "degree_threshold": 82, "threshold": [82, 238, 239, 240, 241], "1e9": 82, "unweight": [82, 156], "foster": 82, "grassberg": 82, "paczuski": 82, "107": [82, 244], "10815": 82, "1e": [82, 151, 156, 210], "06": [82, 156], "html": [82, 156, 240, 243, 252, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 271, 273], "gv": 82, "hits_algorithm": 82, "vertexpropertycontextdagnod": [82, 83], "is_simple_path": [82, 314], "nonempti": 82, "explan": [82, 143], "biject": [82, 286], "smallest": [82, 243, 263, 273], "pairwis": 82, "k_shell": [82, 314], "katz_centrality_numpi": [82, 156], "auttenu": 82, "maximun": 82, "min_progress": 82, "1000": [82, 141, 156, 288, 291, 304], "progress_tri": 82, "progress": [82, 235], "met": 82, "blondel": 82, "et": [82, 288], "al": [82, 288], "stat": [82, 238, 240], "mech": 82, "10008": 82, "2008": [82, 210, 233], "sotera": 82, "lpa_u2i": [82, 314], "labeledvertexpropertycontextdagnod": [82, 83], "pagerank_nx": [82, 314], "max_it": [82, 156, 210], "tol": [82, 156, 210], "solver": 82, "voterank": [82, 314], "unsign": [82, 304], "basecontextdagnod": [83, 153], "bound_app": [83, 100], "contextdagnod": 83, "to_vineyard_tensor": [83, 297, 314], "to_vineyard_datafram": [83, 297, 314], "lazi": [83, 153, 298], "sg": 83, "ramework": 83, "resultdagnod": [83, 118], "r4": [83, 306], "62586": 83, "comparis": 83, "alphabet": [83, 297], "tensorcontextdagnod": 83, "quer": [83, 297], "labeledvertexdatacontextdagnod": 83, "label_nam": [83, 297], "column_nam": [83, 297], "labeld": [83, 140], "context_nod": 83, "result_schema": 83, "referenc": 83, "dynamicvertexdatacontext": 83, "dag_nod": 83, "op": [83, 93, 95, 96, 97, 98, 100, 101, 103, 105, 106, 108, 109, 110, 111, 112, 113, 116, 117, 118, 121, 122, 123, 125, 126, 149, 291, 295, 298], "get_str": 84, "property_id": 84, "get_doubl": 84, "edge_label_id": 84, "edge_label_nam": 84, "incoming_edg": 84, "register_aggreg": 84, "pregelaggregatortyp": 84, "aggr_typ": 84, "get_aggregated_valu": 84, "get_total_vertices_num": 84, "vertex_property_num": 84, "vertex_label_nam": 84, "vertex_label_id": 84, "edge_property_num": 84, "get_vertex_label_by_id": 84, "get_vertex_label_id_by_nam": 84, "get_edge_label_by_id": 84, "get_edge_label_id_by_nam": 84, "edge_properti": 84, "get_vertex_property_id_by_nam": 84, "vertex_property_nam": [84, 303], "get_vertex_property_by_id": 84, "vertex_property_id": 84, "get_edge_property_id_by_nam": 84, "edge_property_nam": 84, "get_edge_property_by_id": 84, "edge_property_id": 84, "kboolandaggreg": 84, "kbooloraggreg": 84, "kbooloverwriteaggreg": 84, "overwritten": 84, "kdoubleminaggreg": 84, "kdoublemaxaggreg": 84, "kdoublesumaggreg": 84, "kdoubleproductaggreg": 84, "kdoubleoverwriteaggreg": 84, "kint64minaggreg": 84, "kint64maxaggreg": 84, "kint64sumaggreg": 84, "kint64productaggreg": 84, "kint64overwriteaggreg": 84, "ktextappendaggreg": 84, "kalongoutgoingedgetooutervertex": 84, "kalongincomingedgetooutervertex": 84, "kalongedgetooutervertex": 84, "nerghbor": 84, "get_total_nodes_num": 84, "get_nodes_num": 84, "get_inner_nodes_num": 84, "get_outer_nodes_num": 84, "outer_nod": 84, "get_node_fid": 84, "is_inner_nod": 84, "is_outer_nod": 84, "get_nod": [84, 142], "get_outer_nod": 84, "get_node_id": 84, "get_incoming_edg": 84, "has_child": 84, "child": [84, 193, 285], "has_par": 84, "parent": [84, 86, 126, 131, 285], "get_indegre": 84, "get_outdegre": 84, "kmaxaggreg": 84, "ksumaggreg": 84, "kproductaggreg": 84, "koverwriteaggreg": 84, "subproject": 86, "scratch": 86, "never": [86, 291], "hopefulli": 86, "inspir": [86, 291], "dskiptest": 86, "dmaven": 86, "antrun": 86, "jni": 86, "mac": [86, 316, 318], "gae_java": 87, "graphscope_typ": 89, "graphscopetyp": 89, "myalgorithm": 89, "filenotfounderror": 90, "permissionerror": 90, "typeerror": [90, 126, 298], "arrowproperti": 91, "subrang": 91, "loader_op": 92, "notimplementederror": 92, "run_app": [97, 98, 113, 121, 122], "copy_typ": 99, "session_id": [101, 105, 126, 153, 154, 291, 295], "graph_typ": [101, 291], "graphtyp": [101, 291, 300, 305], "view_typ": 102, "vertex_or_edge_label_list": 103, "graph_util": 103, "vertexlabel": 103, "op_typ": [105, 126, 295], "uiliti": 105, "interactive_queri": [110, 298], "gremlin_script": [110, 154], "request_opt": [110, 154], "interactivequerydagnod": 110, "modify_typ": [111, 112], "attr": [111, 112, 126, 145, 158, 159, 160, 291, 294], "type_pb2": [111, 112, 116], "nx_add_edg": 111, "nx_del_edg": 111, "nx_update_edg": 111, "nx_add_nod": 112, "nx_del_nod": 112, "nx_update_nod": 112, "fd": [113, 118, 314], "storage_opt": [113, 118], "write_opt": [113, 118], "adaptor": 113, "result_path": [113, 118], "vertex_collect": 114, "edge_collect": 114, "report_typ": 116, "variati": 116, "node_num": [116, 318, 322], "has_nod": [116, 291], "has_edg": [116, 291], "node_data": 116, "edge_data": [116, 306], "neighbors_by_nod": 116, "succs_by_nod": 116, "preds_by_nod": 116, "neighbors_by_loc": 116, "succs_by_loc": 116, "preds_by_loc": 116, "deg_by_nod": 116, "in_deg_by_nod": 116, "out_deg_by_nod": 116, "deg_by_loc": 116, "in_deg_by_loc": 116, "out_deg_by_loc": 116, "nodes_by_loc": 116, "loc": 116, "multigraph": [116, 156, 158, 166, 170, 179, 184, 185, 211, 212, 220, 222, 235, 236, 237, 291, 294], "multidigraph": [116, 158, 170, 179, 184, 185, 222, 230, 231, 289, 291], "large_attr": [126, 295], "types_pb2": [126, 291], "operationtyp": 126, "opdef": [126, 130], "attrvalu": [126, 153, 322], "largeattrvalu": 126, "op_def_pb2": 130, "incoming_data": [132, 153, 298], "as_default": [132, 298], "alia": [137, 139, 145, 291, 298, 323], "k8s_gs_imag": [138, 298, 316], "k8s_etcd_imag": 138, "k8s_image_pull_secret": [138, 298], "k8s_coordinator_cpu": [138, 298], "k8s_coordinator_mem": [138, 298], "k8s_vineyard_cpu": [138, 298], "k8s_mars_worker_cpu": [138, 298], "k8s_mars_worker_mem": [138, 298], "k8s_mars_scheduler_cpu": [138, 298], "k8s_mars_scheduler_mem": [138, 298], "with_mar": [138, 298], "k8s_waiting_for_delet": [138, 298], "dataset_download_retri": 138, "k8s_deploy_mod": [138, 298], "kv": 138, "cooper": [139, 153], "\u02bbegograph": 139, "\u02bbegotensor": 139, "sample_se": [139, 323], "positive_sampl": [139, 323], "receptive_fn": [139, 323], "egotensor": [139, 147, 323], "egoflow": [139, 147, 323], "cora": [139, 151, 323], "convers": [139, 140, 300], "node_t": [139, 140, 151, 323], "edge_table_with_self_loop": [139, 323], "train_tabl": [139, 323], "val_tabl": [139, 323], "test_tabl": [139, 323], "dataset_fold": [139, 323], "decod": [139, 140, 141, 151, 323], "attr_typ": [139, 140, 141, 151, 323], "1433": [139, 151, 323], "attr_delimit": [139, 140, 141, 323], "learningbasedmodel": [139, 323], "categorical_attrs_desc": [139, 323], "_sample_se": [139, 323], "_positive_sampl": [139, 323], "_receptive_fn": [139, 323], "ego_flow": [139, 323], "src_ego_spec": [139, 323], "pos_src_ego_tensor": [139, 323], "identityencod": [139, 323], "widendeepencod": [139, 323], "feature_encod": [139, 323], "gcnconv": [139, 323], "sparseegographencod": [139, 323], "_encod": [139, 323], "conv_lay": [139, 323], "_supervised_loss": [139, 323], "full_graph_mod": [139, 323], "localtftrain": [139, 323], "model_fn": [139, 151, 323], "batch_szi": [139, 323], "load_graph": [139, 323], "server_id": [139, 323], "server_count": [139, 141, 151, 323], "tracker": [139, 151, 323], "conclud": 139, "bought": 140, "saturdai": 140, "morn": 140, "bigint": 140, "dst_id": [140, 141, 142, 144, 145, 151, 155], "shanghai": 140, "localfilesystem": 140, "pai": [140, 145, 146], "tab": 140, "s2": [140, 256], "215340": 140, "933091": 140, "grei": 140, "362519": 140, "097545": 140, "chapter": [140, 141, 143, 237, 274], "comma": 140, "dscript": 140, "dentryfil": 140, "dtabl": 140, "odp": 140, "prj": 140, "flag": [140, 141], "define_str": 140, "node_sourc": 140, "edge_sourc": 140, "hash": [140, 153], "bucket_s": 140, "greatli": [140, 141, 303], "your_attr_typ": 140, "you_delimit": 140, "weightd": 140, "scr_id": 140, "10001": [140, 141, 142, 144], "feature1": 140, "10002": [140, 141, 142, 144], "feature2": 140, "10003": [140, 141, 142, 144], "feature3": 140, "123": 140, "124": 140, "\u02bbitem_node_decod": 140, "\u02bbuser_node_decod": 140, "\u02bbedge_decod": 140, "item_node_decod": 140, "user_node_decod": 140, "edge_decod": [140, 151], "graph_object": 140, "commod": 141, "swing": [141, 142], "30001": [141, 142, 144], "30002": [141, 142, 144], "30003": [141, 142, 144], "table_1": 141, "table_2": 141, "dest": 141, "10004": [141, 142], "20001": [141, 142, 144], "20003": [141, 142, 144], "20004": [141, 142, 144], "46": [141, 142, 144, 156, 278], "ui_decod": 141, "uv_decod": 141, "table_3": 141, "table_4": 141, "click_v": 141, "task_index": [141, 151], "task_count": 141, "atyp": 141, "job_nam": [141, 151], "worker_host": 141, "respond": 141, "necessarili": [141, 253], "serious": 141, "decreas": [141, 220, 222], "speak": 141, "client_count": [141, 151], "wait_for_clos": [141, 151], "matter": [141, 297], "infom": 142, "get_topologi": 142, "dst_type": 142, "figure1": 142, "topo": 142, "print_al": 142, "egde_typ": 142, "ravers": 142, "string_attr": 142, "src_node": 142, "dst_node": 142, "diment": 142, "dense_shap": 142, "arra": 142, "__next__": 142, "dimenti": 142, "table1": 142, "u_nod": 142, "traves": 142, "get_edg": 142, "inferfac": 142, "table2": 142, "table3": 142, "click_edg": 142, "table4": 142, "conduc": 143, "character": 143, "recept": [143, 147], "ai": 143, "meta_path": 143, "layer_id": 143, "famili": [143, 156, 194, 252, 280], "random_without_replac": 143, "ueri": 143, "default_neighbor_id": 143, "set_default_neighbor_id": [143, 152], "xx": 143, "set_padding_mod": 143, "circular": [143, 145, 195], "alogrithm": 144, "throw": 144, "nodesampl": 144, "node_sampl": 144, "by_ord": 144, "node_from": [144, 155], "edge_src": [144, 155], "edge_dst": [144, 155], "edgesampl": 144, "matur": 145, "dl": 145, "sheer": 145, "sink": 145, "generatortyp": [145, 155], "won": [145, 306], "cursor": 145, "ingo": 145, "query\u5bf9\u8c61": 145, "outneg": [145, 148], "inneg": [145, 148, 151], "candid": [145, 148], "u2i": 145, "ouv": 145, "func": 145, "512": 145, "edeg": 145, "src_1hop": 145, "dst_1hop": 145, "neg_i": 145, "neg_i_1hop": 145, "parmas_list": 145, "bodi": [145, 149, 257], "params_list": 145, "arrang": 145, "anonym": [145, 283], "src_attr": 145, "neg_attr": 145, "encode_fn": [145, 151], "src_atr": 145, "outnegv": 145, "gen1": 145, "gen2": 145, "circumst": 145, "sour": 145, "foewa": 145, "from_gener": [145, 151], "make_one_shot_iter": [145, 151], "get_next": [145, 151], "zhangjiak": 146, "cp27": 146, "cp27mu": 146, "linux_x86_64": 146, "sudo": [146, 315, 316], "autoconf": 146, "automak": 146, "libtool": 146, "submodul": [146, 149, 303], "your_wheel_nam": [146, 149], "test_cpp_ut": 146, "test_python_ut": 146, "fastgcn": [147, 323], "graphsaint": 147, "amd": 147, "oprat": 148, "object_typ": 148, "oprequest": 149, "req": 149, "oprespons": 149, "params_": 149, "tensors_": 149, "redirect": [149, 229], "rewrit": 149, "till": [149, 298], "happen": [149, 303, 306], "stitch": 149, "myoper": 149, "register_oper": 149, "opnam": 149, "randomsampl": 149, "writ": 149, "xxxsampler": 149, "kubeflow": 150, "reader": 150, "seek": 150, "litestr": 150, "char": [150, 153, 303], "getfiles": 150, "getrecordcount": 150, "register_file_system": 150, "myfilesystem": 150, "registr": 150, "ppi": 151, "train_supervis": 151, "gen_test_data": 151, "getopt": 151, "argv": 151, "cur_path": 151, "elif": 151, "102": [151, 287], "__name__": 151, "__main__": 151, "dirnam": 151, "rf": 151, "\u4f60\u9700\u8981\u628agen_test_data": 151, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 151, "fi": 151, "sleep": 151, "case_bas": 151, "genetic_algorithm": 151, "neural_network": 151, "probabilistic_method": 151, "reinforcement_learn": 151, "rule_learn": 151, "bag": 151, "1033": 151, "103482": 151, "103515": 151, "31336": 151, "1061127": 151, "05882353": 151, "1106406": 151, "n_featur": 151, "node_decod": 151, "n_class": 151, "140": [151, 214], "n_hop": 151, "n_epoch": 151, "tripl": 151, "graph_object_cn": 151, "sample_gen": 151, "input_fn": 151, "sample_input_fn": 151, "float64": 151, "tensorshap": 151, "layer_featur": 151, "aggregate_fn": 151, "self_vec": 151, "neigh_vec": 151, "raw_feat_layer_index": 151, "layer_index": 151, "variable_scop": 151, "_layer": 151, "auto_reus": 151, "neigh_weight": 151, "get_vari": 151, "self_weight": 151, "output_shap": 151, "get_shap": 151, "neigh_mean": 151, "from_neigh": 151, "matmul": 151, "from_self": 151, "add_n": 151, "leaky_relu": 151, "depth_to_encod": 151, "h_self_vec": 151, "h_neighbor_vec": 151, "features_column": 151, "feature_column": 151, "numeric_column": 151, "loss_fn": 151, "train_op": 151, "global_step": 151, "get_global_step": 151, "estimatorspec": 151, "modekei": 151, "set_xxx": 152, "set_yyi": 152, "other_model": 152, "fill": [152, 192, 203, 213, 247], "nbr_id": 152, "set_default_int_attribut": 152, "set_default_float_attribut": 152, "set_default_string_attribut": 152, "set_inter_threadnum": 152, "intra": [152, 210, 213], "set_intra_threadnum": 152, "16mb": 152, "reset": 152, "enlarg": 152, "set_rpc_message_max_s": 152, "del": [153, 291], "objectnam": 153, "degener": 153, "unspecifi": [153, 168], "consolidate_column": 153, "result_column": 153, "consolid": [153, 305, 312], "weight0": 153, "weight1": 153, "graph_nod": 153, "deseri": [153, 303], "detach": 153, "varaibl": 153, "lexic": 153, "classmethod": 153, "broken": 153, "save_to": 153, "path_": 153, "graphschema": [153, 291], "schema_path": 153, "currrent": 153, "object_id": [153, 154, 155], "filetyp": 153, "ordinari": 153, "f0": 153, "orc": [153, 302], "parquet": [153, 302], "graph_build": 153, "deprec": [153, 171, 269], "admin": [153, 304], "group_id": 153, "member_s": 153, "leader_student_id": 153, "student": 153, "member_student_id": 153, "group_for_teacher_stud": 153, "group_nam": 153, "establish_d": 153, "teacher_in_charge_id": 153, "teacher": 153, "lesson_num": 153, "avg_scor": 153, "student_id": 153, "salari": 153, "teacher_id": 153, "both_in_out": 153, "unambigu": 153, "orign": 153, "interactivequeri": [154, 296, 298, 322], "frontend_gremlin_endpoint": 154, "frontend_cypher_endpoint": 154, "gremlin_url": 154, "lifetim": 154, "traversal_sourc": 154, "graphtraversalsourc": 154, "cypher_driv": 154, "cypher_url": 154, "gremlin_cli": 154, "runtimeerror": [154, 298], "modern_graph_data_dir": 154, "tolist": [154, 304], "dtype": 155, "pywrap": 155, "nodefrom": 155, "get_handl": 155, "worker_count": 155, "base64": 155, "nstart": 156, "poweriterationfailedconverg": 156, "langvil": 156, "meyer": 156, "survei": [156, 244], "cites": 156, "ist": 156, "psu": 156, "edu": 156, "713792": 156, "jon": 156, "kleinberg": 156, "authorit": 156, "journal": [156, 225, 233, 250, 281, 284, 288], "acm": [156, 231, 282, 314], "604": 156, "1999": [156, 211, 212], "doi": [156, 226, 233, 268], "1145": 156, "324133": 156, "324140": 156, "cornel": 156, "kleinber": 156, "pdf": [156, 238, 240, 241], "load_centr": 156, "in_degree_centr": [156, 292], "networkxnotimpl": 156, "out_degree_centr": [156, 292], "equat": 156, "ax": 156, "eigenvalu": [156, 236], "virtu": 156, "perron": 156, "frobeniu": 156, "theorem": [156, 235, 247], "0e": 156, "strength": 156, "2f": 156, "networkxpointlessconcept": [156, 286], "networkxerror": [156, 162, 169, 171, 175, 176, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 226, 232, 235, 236, 237, 248, 251, 283, 291, 294], "eigenvector_centrality_numpi": 156, "discern": 156, "phillip": 156, "bonacich": 156, "american": 156, "sociologi": 156, "1170": 156, "1182": 156, "1986": [156, 280], "leonidzhukov": 156, "net": [156, 210], "hse": 156, "socialnetwork": 156, "oxford": [156, 189, 190, 239, 283], "press": [156, 189, 190, 237, 279, 282, 283], "usa": [156, 243, 244, 290], "pp": [156, 220, 223, 224, 225, 238, 244, 245, 282, 288], "169": 156, "x_i": 156, "a_": 156, "x_j": 156, "lambda_": 156, "distant": 156, "penal": 156, "strictli": [156, 210], "invers": [156, 235], "phi": 156, "sqrt": [156, 236], "adjacency_spectrum": 156, "720": 156, "leo": 156, "sociometr": 156, "psychometrika": 156, "1953": 156, "springer": [156, 245], "1007": [156, 190, 226], "bf02289026": 156, "has_path": [156, 292], "djikstra": 156, "floyd": 156, "warshal": 156, "bfs_edg": [156, 292], "depth_limit": 156, "core_numb": 156, "vladimir": 156, "batagelj": 156, "matjaz": 156, "zaversnik": 156, "arxiv": [156, 199, 214, 215, 216, 230, 283], "ab": [156, 214, 215, 216, 230, 238, 242, 283, 285], "0310049": 156, "c_u": 156, "deg": [156, 210, 224, 291], "geometr": [156, 278, 292], "vw": 156, "hat": 156, "uv": [156, 224], "uw": 156, "tot": 156, "2deg": 156, "leftrightarrow": 156, "complete_graph": [156, 162, 291], "saram\u00e4ki": 156, "kivel\u00e4": 156, "onnela": 156, "kaski": 156, "kert\u00e9sz": 156, "027105": 156, "2007": [156, 238, 284], "jponnela": 156, "web_docu": 156, "a9": 156, "intens": 156, "coher": 156, "motif": 156, "065103": 156, "2005": [156, 232, 238], "sign": 156, "costantini": 156, "perugini": 156, "plo": 156, "e88669": 156, "fagiolo": 156, "76": 156, "026107": 156, "average_clust": [156, 292], "count_zero": 156, "c_v": 156, "nonzero": [156, 220, 237], "marcu": 156, "kaiser": 156, "0802": 156, "2512": 156, "g_to_add_to": [158, 159, 160], "nodes_for_cycl": 158, "add_path": [158, 160, 291], "add_star": [158, 159], "nodes_for_path": 159, "add_cycl": [159, 160], "nodes_for_star": 160, "star": [160, 197, 206], "middl": 160, "cnbor": 162, "with_data": 163, "empty_graph": [163, 204], "frequenc": 165, "width": 165, "2m": [166, 244], "prevent": 169, "err": 169, "frozen": [169, 174], "unfreez": 169, "frozen_graph": 169, "unfrozen_graph": 169, "is_frozen": 169, "neighbour": 171, "freez": [174, 292], "signifi": [175, 176], "nodelist": [179, 218], "selfloop_edg": [179, 184, 220, 222], "number_of_selfloop": [179, 185], "selfloop": [184, 185, 218, 224], "nloop": 184, "nodes_with_selfloop": [184, 185], "datadict": [185, 291], "datavalu": 185, "attrnam": [185, 322], "edgeit": 185, "ekei": 185, "graph_atlas_g": 189, "linearli": [189, 205], "ronald": [189, 190, 280], "robin": [189, 190], "wilson": [189, 190], "1998": [189, 190], "111223": 190, "112222": 190, "automorph": [190, 263], "graph_atla": 190, "expens": 190, "popul": [190, 191, 193, 194, 196, 198, 201, 203, 205, 206, 209, 220, 222, 223, 225, 227, 228, 229, 235, 236, 237, 243, 244, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 286, 293], "book": 190, "violat": 190, "lexicograph": 190, "nondecreas": 190, "001111": 190, "000112": 190, "1008": 190, "3333444": 190, "3333336": 190, "1012": 190, "1213": 190, "1244555": 190, "1244456": 190, "perfectli": 191, "ari": [191, 201], "height": 191, "children": [191, 201, 285], "barbel": [192, 203], "bell": 192, "p_": [192, 224, 238], "mere": [192, 203], "aldou": [192, 203], "jim": [192, 203], "binomi": 193, "leftmost": 193, "ci_n": 194, "x_1": 194, "x_2": 194, "x_m": 194, "mod": [194, 208, 237, 256], "subfamili": 194, "ladder": [195, 202], "cl_n": 195, "k_n": 196, "is_direct": [196, 291], "subset_s": 197, "multipartit": [197, 208], "tripartit": 197, "bc": 197, "complete_bipartite_graph": 197, "c_n": 198, "hierarch": 199, "dorogovtsev": 199, "goltsev": 199, "mend": 199, "mat": 199, "0112143": 199, "kw": [200, 298], "unknown": [200, 303], "abc": 200, "rightmost": 201, "jame": 201, "andrew": 201, "storer": 201, "birkhaus": 201, "boston": 201, "2001": [201, 214, 222, 227, 229, 237, 246, 304], "225": [201, 291], "lollipop": 203, "k_m": 203, "p_n": [203, 205], "etext": 203, "turan": 208, "disjoint": [208, 219, 257], "2r": 208, "tau1": 210, "tau2": 210, "mu": 210, "average_degre": 210, "min_degre": 210, "max_degre": 210, "min_commun": 210, "max_commun": 210, "lfr": 210, "mathrm": 210, "expon": 210, "reassign": [210, 248], "interv": [210, 242, 298], "affili": [210, 318], "random_st": [210, 213, 214, 215, 216, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 238, 239, 240, 241, 242, 245, 246, 247, 251, 283, 286, 288], "exceededmaxiter": 210, "250": 210, "frozenset": [210, 293], "rewir": [210, 212, 216, 248, 251], "wire": 210, "robust": 210, "somewhat": 210, "narrow": 210, "andrea": 210, "lancichinetti": 210, "santo": [210, 214, 215, 216], "fortunato": [210, 214, 215, 216], "filippo": 210, "radicchi": 210, "phy": [210, 222, 227, 228, 229, 232], "rev": [210, 222, 227, 228, 229, 232], "046110": 210, "santofortunato": 210, "caveman": [211, 212, 216], "unclear": [211, 212], "connected_caveman_graph": [211, 217], "watt": [211, 212, 222], "phenomenon": [211, 212], "amer": [211, 212], "493": [211, 212], "527": [211, 212], "caveman_graph": 212, "p_in": [213, 214, 215], "p_out": [213, 214, 215], "gaussian": [213, 239, 240, 241], "drawn": [213, 241], "varianc": 213, "probabilti": [213, 216], "random_partition_graph": [213, 218], "ulrik": 213, "brand": 213, "marco": 213, "gaertler": 213, "dorothea": 213, "wagner": 213, "11th": 213, "europ": 213, "symp": 213, "plant": [214, 215], "random_partition_model": 214, "condon": 214, "karp": 214, "algor": 214, "116": 214, "486": [214, 215, 216], "174": [214, 215, 216], "0906": [214, 215, 216], "0612": [214, 215, 216], "relax": 216, "februari": 216, "num_cliqu": 217, "clique_s": 217, "ring": 217, "stochast": [218, 292], "densiti": [218, 220, 238, 240], "symmetr": [218, 237, 260, 264, 270, 272, 283], "300": [218, 287], "prob": 218, "450": 218, "quotient_graph": 218, "relabel": 218, "245": 218, "348": 218, "405": 218, "051": 218, "022": 218, "planted_partition_graph": 218, "gaussian_random_partition_graph": 218, "gnp_random_graph": [218, 245, 246, 247], "holland": 218, "laskei": 218, "leinhardt": 218, "blockmodel": 218, "109": 218, "1983": 218, "windmil": 219, "contract": 219, "wd": 219, "deg_sequ": [220, 221, 222, 223, 225], "pseudograph": [220, 222], "nonneg": [220, 222], "is_graph": [220, 226], "graphic": [220, 222, 225, 226], "realiz": [220, 222, 225, 248, 249, 250, 251, 278, 303], "tend": 220, "poisson": 220, "constant": [220, 322], "siam": [220, 225, 231], "167": 220, "random_sequ": 220, "random_powerlaw_tree_sequ": 220, "5000": 220, "actual_degre": 220, "in_degree_sequ": 222, "out_degree_sequ": 222, "directed_random": 222, "configuration_model": [222, 223, 226], "finit": [222, 224, 237], "strogatz": 222, "026118": 222, "din": 222, "dout": 222, "in_deg_sequ": 223, "out_deg_sequ": 223, "kleitman": [223, 225], "valenc": [223, 225], "1973": [223, 225], "w_0": 224, "w_1": 224, "ldot": 224, "w_u": [224, 238, 241], "w_v": [224, 238, 241], "sum_k": 224, "w_k": 224, "z": [224, 237, 238, 242], "mathcal": 224, "ne": 224, "uu": 224, "fan": [224, 238, 314], "chung": [224, 238], "lu": [224, 314], "ann": 224, "combinator": [224, 284], "145": 224, "2002": 224, "joel": 224, "miller": 224, "aric": [224, 238], "hagberg": [224, 238], "waw": [224, 238], "alan": 224, "friez": 224, "paul": 224, "horn": 224, "pawe\u0142": 224, "pra\u0142at": 224, "lnc": 224, "6732": 224, "115": 224, "havel": 225, "hakimi": 225, "networkxexcept": 225, "resort": 225, "496": 225, "506": 225, "1962": [225, 243, 244, 290], "d_m": 226, "uniform": [226, 238, 247], "networkxunfeas": 226, "moshen": 226, "bayati": 226, "jeong": 226, "han": 226, "kim": 226, "amin": 226, "saberi": 226, "algorithmica": 226, "58": 226, "860": 226, "910": 226, "s00453": 226, "009": 226, "9340": 226, "gn": [227, 290], "a_k": 227, "krapivski": [227, 228, 229, 232], "redner": [227, 228, 229], "066123": [227, 229], "gnc": 228, "growth": [228, 288], "036118": 228, "2005k": 228, "gnr": 229, "probabilii": 229, "self_loop": 230, "preferenti": 230, "proport": 230, "peterson": [230, 273], "nichola": 230, "bori": 230, "pittel": 230, "preprint": 230, "1311": 230, "5961": 230, "2013": [230, 250], "gamma": 231, "delta_in": 231, "delta_out": 231, "bia": 231, "bollob\u00e1": 231, "borg": 231, "chay": 231, "riordan": 231, "fourteenth": 231, "annual": 231, "symposium": 231, "132": [231, 246], "139": 231, "diverg": [232, 292], "retent": 232, "disallow": 232, "ispolatov": 232, "yuryev": 232, "061911": 232, "inclus": 233, "knudsen": 233, "michael": 233, "carsten": 233, "wiuf": 233, "markov": 233, "chain": 233, "1155": 233, "190836": 233, "radiu": [234, 239, 240, 241], "chordal": 235, "chord": [235, 249], "mildli": 235, "prime": [235, 237], "lubotzki": 235, "invari": 235, "birkh\u00e4us": 235, "verlag": 235, "basel": 235, "1994": 235, "marguli": 236, "gabber": 236, "galil": 236, "palei": 237, "pz": 237, "f_q": 237, "odd": 237, "bolloba": 237, "cambridg": 237, "theta": [238, 241], "po": [238, 239, 240, 241, 242], "p_dist": [238, 240], "geograph": [238, 241], "rectangular": [238, 242], "ge": [238, 242], "prone": 238, "le": [238, 242, 282], "euclidean": [238, 239, 240, 241, 242], "taxicab": [238, 242], "expovari": [238, 241], "masuda": 238, "miwa": 238, "konno": 238, "036108": 238, "milan": 238, "bradonji\u0107": 238, "allon": 238, "percu": 238, "giant": 238, "antoni": 238, "bonato": 238, "209": 238, "216": 238, "cube": [239, 240, 241, 259, 276], "kdtree": [239, 240, 241], "minkowski": [239, 240, 241], "infin": [239, 240, 241], "erd\u0151": [239, 240, 241], "r\u00e9nyi": [239, 240, 241], "twenti": 239, "2d": [239, 240, 241, 291, 294], "deviat": [239, 240, 241], "gauss": [239, 240, 241], "penros": [239, 240], "mathew": [239, 240], "soft": 240, "exp": [240, 242], "annal": 240, "2016": 240, "986": 240, "1028": 240, "summat": 241, "nodethr": 241, "cole": 241, "maclean": 241, "blog": 241, "thesi": [241, 247], "waxman": 242, "x_min": 242, "y_min": 242, "x_max": 242, "y_max": 242, "Their": 242, "incompat": [242, 303], "rout": 242, "multipoint": 242, "ieee": [242, 250, 251, 283, 288], "1988": 242, "1617": 242, "1622": 242, "harari": [243, 244, 292], "h_": [243, 244], "ceil": 243, "kn": 243, "hnm_harary_graph": 243, "weisstein": 243, "eric": 243, "mathworld": [243, 252, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 271], "wolfram": [243, 252, 256, 258, 260, 261, 262, 263, 264, 265, 266, 267, 271], "hararygraph": 243, "proc": [243, 244, 248, 249, 290], "nat": [243, 244, 290], "acad": [243, 244, 290], "sci": [243, 244, 290], "1142": [243, 244, 290], "1146": [243, 244, 290], "floor": 244, "hkn_harary_graph": 244, "boesch": 244, "satyanarayana": 244, "suffel": 244, "reliabl": 244, "synthesi": 244, "99": [244, 322], "2009": [244, 284], "uniform_random_intersection_graph": [245, 246], "nikoletsea": 245, "raptopoulo": 245, "spiraki": 245, "icalp": 245, "\u0131az": 245, "karhum": 245, "aki": 245, "lepist": 245, "sannella": 245, "vol": [245, 288], "3142": 245, "lectur": 245, "1029": 245, "1040": 245, "godehardt": 246, "jaworski": 246, "electron": [246, 284], "singer": 247, "cohen": 247, "1995": 247, "phd": 247, "john": [247, 264], "hopkin": 247, "scheinerman": 247, "evolut": 247, "2000": 247, "156": 247, "nkk": [248, 249], "degree_seq": 248, "n_edges_add": 248, "li": [248, 251], "unsatur": 248, "proof": 248, "tillman": [248, 249, 251], "markopoul": [248, 249, 250, 251, 283], "butt": [248, 249, 283], "gjoka": [248, 249, 250, 251], "2k": [248, 249], "kdd": [248, 249], "seconnd": 249, "joint_degre": [250, 251], "diagon": [250, 266], "joint_degree_graph": 250, "kurant": 250, "5k": 250, "infocom": [250, 251, 283], "stanton": 250, "pinar": 250, "prescrib": 250, "experiment": [250, 298], "n_th": 252, "m_1": 252, "singleton": [252, 291], "m_2": 252, "m_i": 252, "mycielskian": 252, "m_": 252, "mycielskigraph": 252, "p_2": 252, "chromat": [253, 284], "2n": 253, "bigcup": 253, "nonisomporph": 254, "adjanc": 254, "matric": [254, 283], "nonisomorph": 255, "shift_list": 256, "cubic": [256, 259, 260, 263, 264, 270, 272, 273, 278], "lcf": [256, 258, 260, 262, 264, 270, 272], "lederberg": 256, "coxet": 256, "frucht": [256, 263], "hamiltonian": [256, 258, 263, 264, 267, 272, 278], "symmetri": [256, 263], "dodecahedral_graph": 256, "desargues_graph": 256, "heawood_graph": 256, "pappus_graph": 256, "s1": 256, "sk": 256, "v_current": 256, "shiftlist": 256, "heawood": [256, 264], "lcfnotat": 256, "bull": 257, "planar": [257, 260, 261, 263], "pendant": 257, "leg": 257, "chv\u00e1tal": 258, "370": 258, "chv": 258, "c3": [258, 270, 271], "a1tal_graph": 258, "chvatalgraph": 258, "platon": [259, 262, 267, 271, 275, 277], "skeleton": [259, 262, 276, 277], "hypercub": 259, "solid": [259, 276, 277], "aris": 259, "desargu": 260, "desarguesgraph": 260, "kite": [261, 268], "diamondgraph": 261, "dodecahedr": 262, "dodecahedron": 262, "regular_dodecahedron": 262, "dodecahedralgraph": 262, "fruchtgraph": 263, "cage": 264, "perci": 264, "nonplanar": 264, "girth": 264, "heawoodgraph": 264, "win": [264, 273], "tue": [264, 273], "nl": [264, 273], "aeb": [264, 273], "housegraph": [265, 266], "pentatop": 266, "icosahedr": 267, "icosahedron": 267, "icosahedralgraph": 267, "krackhardt": 268, "andr": 268, "beverlei": 268, "carol": 268, "dian": 268, "fernando": 268, "garth": 268, "heather": 268, "ik": 268, "jane": 268, "polit": 268, "landscap": 268, "cognit": 268, "administr": 268, "quarterli": 268, "342": [268, 291], "369": 268, "2307": 268, "2393394": 268, "jstor": 268, "june": 268, "1990": 268, "graph_descript": 269, "ltype": 269, "adjacencylist": 269, "from_dict_of_list": 269, "from_edgelist": 269, "xlist": 269, "c_4": 269, "w2": 269, "vk": 269, "wk": 269, "vj": 269, "wj": 269, "moebiu": 270, "kantor": 270, "m\u00f6biu": 270, "petersen": [270, 273], "b6biu": 270, "93kantor_graph": 270, "octahedr": 271, "octahedron": 271, "shake": 271, "hi": [271, 281, 290], "her": 271, "partner": 271, "handshak": 271, "cocktail": 271, "octahedralgraph": 271, "tur": 271, "a1n_graph": 271, "special_cas": 271, "pappu": 272, "juliu": 273, "counterexampl": [273, 278], "bridgeless": 273, "colour": 273, "drg": 273, "maze": 274, "sedgewick": 274, "3rd": 274, "tetrahedr": 275, "k4": 275, "w4": 275, "grpah": 275, "tetrahedron": [275, 277, 278], "truncat": [276, 277, 278, 283], "archimedean": [276, 277], "octagon": 276, "triangular": 276, "truncated_cub": 276, "coolmath": 276, "polyhedra": 276, "hexagon": 277, "equilater": 277, "truncated_tetrahedron": 277, "tutt": 278, "polyhedr": 278, "tait": 278, "conjectur": 278, "polyhedron": 278, "multipli": 278, "davi": 279, "southern": 279, "women": 279, "gardner": 279, "1941": 279, "south": 279, "chicago": 279, "il": 279, "florentin": 280, "breiger": 280, "philippa": 280, "pattison": 280, "cumul": 280, "dualiti": 280, "septemb": 280, "zachari": 281, "karat": 281, "club": 281, "mr": [281, 284], "offic": 281, "wayn": 281, "fission": 281, "anthropolog": 281, "452": 281, "473": 281, "1977": 281, "coappear": 282, "novel": 282, "miser": 282, "knuth": 282, "1993": 282, "graphbas": 282, "combinatori": 282, "york": 282, "spectral": [283, 292], "forg": 283, "sgf": 283, "eigenstructur": 283, "synthes": 283, "sensit": 283, "percentag": 283, "telecommun": 283, "bernoulli": 283, "baldesi": 283, "1801": 283, "01715": 283, "karate_club_graph": 283, "sud": 284, "81": 284, "810": 284, "herzberg": 284, "murti": 284, "polynomi": 284, "am": 284, "708": 284, "717": 284, "sander": 284, "torsten": 284, "7pp": 284, "2529816": 284, "encyclopedia": 284, "dec": 284, "2019": 284, "nil": 285, "arboresc": 285, "downward": 285, "synthet": 285, "trie": 285, "recov": [285, 298], "pr\u00fcfer": 286, "from_prufer_sequ": 286, "forest_str": 286, "triad_nam": 287, "003": 287, "012": 287, "021d": 287, "021u": 287, "021c": 287, "111d": 287, "111u": 287, "030t": 287, "030c": 287, "120d": 287, "120u": 287, "120c": 287, "triadic_censu": 287, "10000": 288, "autonom": [288, 290], "elmokashfi": 288, "tier": 288, "mid": 288, "adv": 288, "bidirect": 288, "peer": 288, "commerci": 288, "agreement": 288, "kvalbein": 288, "dovroli": 288, "bgp": 288, "1250": 288, "1261": 288, "octob": 288, "reweight": 289, "mathematician": 290, "frank": 290, "incoming_graph_data": [291, 294], "default_label": [291, 294], "to_networkx_graph": 291, "110": 291, "protect": 291, "bracket": 291, "shortcut": 291, "nbrsdict": 291, "persion": 291, "miscellan": 291, "__contains__": 291, "__getitem__": 291, "adj_dict": 291, "atlasview": 291, "__iter__": 291, "niter": 291, "__len__": 291, "nnode": 291, "u_of_edg": 291, "v_of_edg": 291, "ebunch_to_add": 291, "preced": 291, "wn2898": 291, "node_for_ad": 291, "nodes_for_ad": 291, "hello": 291, "k3": 291, "attrdict": 291, "behav": 291, "idiom": 291, "foovalu": 291, "adj_it": 291, "nbrdict": 291, "adjlist_inner_dict_factori": 291, "neighbordict": 291, "adjlist_outer_dict_factori": 291, "adjlistdict": 291, "clear_edg": 291, "deepcopi": 291, "fresh": [291, 300], "__class__": 291, "degreeview": 291, "nd_view": 291, "edge_attr_dict_factori": 291, "neighborattrdict": 291, "edge_subgraph": 291, "edgeview": 291, "edgedataview": 291, "ddict": 291, "get_edge_data": 291, "edge_dict": 291, "safe": 291, "graph_attr_dict_factori": 291, "graph_cache_factori": 291, "keyerror": 291, "edge_ind": 291, "data_dictionari": 291, "is_multigraph": 291, "corespond": 291, "nbunch_it": 291, "membership": 291, "exhaust": 291, "possibli": 291, "node_attr_dict_factori": 291, "nodeattrdict": 291, "node_dict_factori": 291, "nodedict": 291, "nodeview": 291, "nodedataview": 291, "nodedata": 291, "bar": 291, "Not": [291, 304], "nedg": 291, "Will": 291, "nodes_for_remov": 291, "set_edge_data": 291, "set_node_data": 291, "set_item": 291, "adjedgeattr": 291, "dd": 291, "nodeattr": 291, "netowrkx": 291, "to_undirected_class": 291, "taken": 291, "itertool": 291, "mg": 291, "nd_iter": 291, "outedgeview": 291, "in_edg": 291, "outedgedataview": 291, "has_predecessor": 291, "has_successor": 291, "indegreeview": 291, "inedgeview": 291, "outdegreeview": 291, "pred": 291, "succ": 291, "_convert_arrow_to_dynam": [292, 294], "atla": 292, "triad": 292, "mycielski": 292, "sudoku": 292, "edgetyp": 293, "utf": [293, 304], "filenam": [293, 304], "rb": 293, "bz2": 293, "uncompress": 293, "whitespac": 293, "obsolet": 293, "write_edgelist": 293, "fh": 293, "textlin": 293, "parse_edgelist": 293, "read_adjlist": 293, "marker": 293, "v_0": 294, "v_1": 294, "add_label": 295, "eval": 295, "talk": 297, "output_to_cli": [297, 314], "person_id": [297, 304], "400": 297, "api_cli": 298, "apicli": 298, "deregist": 298, "256mi": 298, "4gi": 298, "5gi": 298, "__enter__": 298, "__exit__": 298, "exc_typ": 298, "exc_valu": 298, "exc_tb": 298, "unregist": 298, "overwrit": [298, 304], "preemptiv": 298, "burstabl": 298, "qo": 298, "preempt": 298, "ifnotpres": 298, "k8s_vineyard_imag": 298, "fallback": 298, "512mi": 298, "etcd_addr": 298, "etcd01": 298, "etcd02": 298, "etcd03": 298, "4mi": 298, "k8s_coordinator_pod_node_selector": 298, "tinyurl": 298, "3nx6k7ph": 298, "k8s_engine_pod_node_selector": 298, "path1": 298, "path2": 298, "claimnam": 298, "dangling_timeout_second": 298, "heartbeat": 298, "dangl": 298, "config_fil": 298, "reject": 298, "resource_nam": 298, "sigint": 298, "sigterm": 298, "signal": 298, "engine_config": 298, "get_vineyard_object_mapping_t": 298, "node_label": 298, "with_cyph": 298, "recreat": 298, "load_from_gar": [298, 302], "restore_from_pvc": 298, "kubeconfig": 298, "run_fetch": 298, "lock": 298, "store_to_pvc": 298, "backup": 298, "graph_id": 298, "describl": 299, "maxwel": 300, "binlog": 300, "buildgartfrag": 300, "etcd_endpoint": 300, "gartfrag": 300, "etcd_client": 300, "make_shar": 300, "mpi_comm_world": 300, "schema_kei": 300, "gart_schema_p": 300, "to_str": 300, "edge_config_str": 300, "as_str": 300, "gart_blob_m": 300, "_p": 300, "config_str": 300, "edge_config": 300, "inner_vertices_it": 300, "elabel": [300, 305], "edge_it": 300, "hive": 302, "ordered_by_sourc": 302, "ordered_by_dest": 302, "graph_yaml_path": 302, "broader": 303, "ffi": 303, "agnost": 303, "grin_": 303, "partitioned_graph": 303, "edge_type_nam": 303, "boundari": 303, "sync_properti": 303, "grin_partitioned_graph": 303, "grin_partit": 303, "grin_graph": 303, "grin_get_local_graph_from_partit": 303, "grin_edge_typ": 303, "etyp": 303, "grin_get_edge_type_by_nam": 303, "grin_vertex_type_list": 303, "src_vtype": 303, "grin_get_src_types_from_edge_typ": 303, "dst_vtype": 303, "grin_get_dst_types_from_edge_typ": 303, "src_vtypes_num": 303, "grin_get_vertex_type_list_s": 303, "dst_vtypes_num": 303, "grin_vertex_typ": 303, "grin_get_vertex_type_from_list": 303, "grin_vertex_properti": 303, "dst_vp": 303, "grin_get_vertex_property_by_nam": 303, "grin_null_vertex_properti": 303, "grin_vertex_property_t": 303, "dst_vpt": 303, "grin_get_vertex_property_table_by_typ": 303, "grin_datatyp": 303, "dst_vp_dt": 303, "grin_get_vertex_property_data_typ": 303, "grin_vertex_list": 303, "__src_vl": 303, "grin_get_vertex_list": 303, "_src_vl": 303, "grin_select_type_for_vertex_list": 303, "src_vl": 303, "grin_select_master_for_vertex_list": 303, "src_vl_num": 303, "grin_get_vertex_list_s": 303, "grin_vertex": 303, "grin_get_vertex_from_list": 303, "ifdef": 303, "grin_trait_select_edge_type_for_adjacent_list": 303, "grin_adjacent_list": 303, "_adj_list": 303, "grin_get_adjacent_list": 303, "grin_direct": 303, "adj_list": 303, "grin_select_edge_type_for_adjacent_list": 303, "adj_lsit": 303, "endif": 303, "al_sz": 303, "grin_get_adjacent_list_s": 303, "ifndef": 303, "grin_edg": 303, "grin_get_edge_from_adjacent_list": 303, "grin_get_edge_typ": 303, "grin_equal_edge_typ": 303, "grin_get_neighbor_from_adjacent_list": 303, "grin_get_value_from_vertex_property_t": 303, "grin_vertex_ref": 303, "uref": 303, "grin_get_vertex_ref_for_vertex": 303, "recogin": 303, "u_master_partit": 303, "grin_get_master_partition_from_vertex_ref": 303, "send_valu": 303, "fragment_group_id": [303, 305], "get_partitioned_graph_by_object_id": 303, "local_partit": 303, "grin_get_local_partition_list": 303, "pnum": 303, "grin_get_partition_list_s": 303, "grin_get_partition_from_list": 303, "disclaim": 303, "sacrif": 303, "boilerpl": 303, "ineffici": 303, "enorm": 303, "grin_assume_all_vertex_property_local_complet": 303, "grin_assume_master_vertex_property_local_complet": 303, "grin_assume_by_type_all_vertex_property_local_complet": 303, "grin_assume_by_type_master_vertex_property_local_complet": 303, "assumpt": 303, "wider": 303, "undefin": 303, "tell": 303, "granular": 303, "grin_frag": 303, "storagespecif": 303, "vertexhandl": 303, "goe": 303, "grin_edge_list": 303, "grin_partition_list": 303, "grin_enable_": 303, "_list_arrai": 303, "vertexlist": 303, "grin_enable_vertex_list_arrai": 303, "vl": 303, "idx": 303, "sz": 303, "caller": 303, "_list_iter": 303, "grin_enable_vertex_list_iter": 303, "grin_vertex_list_iter": 303, "grin_get_vertex_list_begin": 303, "grin_get_next_vertex_list_it": 303, "vli": 303, "grin_is_vertex_list_end": 303, "grin_get_vertex_from_it": 303, "grin_get_vertex_type_by_nam": 303, "vtype": 303, "grin_vertex_property_list": 303, "grin_get_vertex_properties_by_nam": 303, "vprop": 303, "vpl": 303, "seperatedli": 303, "with_vertex_label": 303, "with_edge_label": 303, "facili": 303, "recogn": [303, 304], "grin_serialize_vertex_ref": 303, "grin_deserialize_to_vertex_ref": 303, "grin_get_vertex_from_vertex_ref": 303, "vref": 303, "recgon": 303, "reciev": 303, "borrow": 303, "vertexcut": 303, "centur": 303, "edgecut": 303, "repect": 303, "judgement": 303, "columnar": 304, "gear": 304, "compromis": 304, "timestamp": 304, "strict": 304, "foward": 304, "ingestor": [304, 312], "multitud": 304, "exemplifi": 304, "said": 304, "grpc_port": 304, "gremlin_port": 304, "grpc_endpoint": 304, "conn": 304, "add_vertex_label": 304, "v_label_nam": 304, "add_primary_kei": 304, "pk_name": 304, "prop_name_1": 304, "prop_name_2": 304, "add_edge_label": 304, "e_label_nam": 304, "prop_name_3": 304, "add_properti": 304, "xmln": 304, "xsi": 304, "w3": 304, "xmlschema": 304, "schemaloc": 304, "xsd": 304, "modelvers": 304, "gremlinexampl": 304, "codehau": 304, "mojo": 304, "classpath": 304, "mainclass": 304, "compliancelevel": 304, "killaft": 304, "credenti": 304, "valuemap": [304, 322], "println": 304, "javascript": 304, "catch": 304, "data_load": 304, "load_tool": 304, "xzvf": 304, "alic": 304, "bob": 304, "person_knows_person": 304, "person_id_1": 304, "20210611151923": 304, "seper": 304, "mapreduc": 304, "data_output": 304, "55555": 304, "propertiescolmap": 304, "srclabel": 304, "dstlabel": 304, "srcpkcolmap": 304, "dstpkcolmap": 304, "mb": 304, "columnidx": 304, "propertynam": 304, "_success": 304, "xxxxx": 304, "sst": 304, "00000": 304, "00001": 304, "00002": 304, "load_data": 304, "test_store_servic": 304, "insert_vertex": 304, "vertexrecordkei": 304, "insert_vertic": 304, "update_vertex_properti": 304, "delel": 304, "delete_vertex": 304, "vertex_pk": 304, "delete_vertic": 304, "insert_edg": 304, "edgerecordkei": 304, "update_edge_properti": 304, "delete_edg": 304, "edge_pk": 304, "remote_flush": 304, "snapshot_id": 304, "primary_kei": 304, "src_vertex_kei": 304, "dst_vertex_kei": 304, "realtimewrit": 304, "provis": 304, "lapp": 304, "reinstal": 304, "pv_name": 304, "pod_nam": [304, 312, 317], "logback": 304, "arrowfragmentgroup": 305, "spread": 305, "ipc": 305, "docket": 305, "string_oid": 305, "ipcclient": 305, "writeout": 305, "nb": 305, "fragmentloc": 305, "gettotalnodesnum": 305, "labeltyp": 305, "vlabel": 305, "vertex_data_t": 305, "edge_data_t": 305, "willing": 306, "implic": 306, "polymorph": 306, "instant": 306, "aka": 306, "applciat": 306, "pygrap": [306, 307], "frist": 306, "from_numpi": 306, "bind_sssp1": 306, "delai": 306, "screen": 306, "bind_sssp2": 306, "vertex_bal": 307, "vcut": 307, "ecut": 307, "repo_hom": 311, "syoov": 312, "79b44f7b58": 312, "ctmqb": 312, "10m": 312, "9m53": 312, "9m46": 312, "6dd67c65fc": 312, "gn4mb": 312, "15334625083466732": 312, "33d": 312, "kubetl": 312, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 314, "\u8be5\u7cfb\u7edf\u4e8e": 314, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 314, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 314, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 314, "\u5728": [314, 315, 316, 317, 318, 321, 322, 323, 324], "\u4e2d": [314, 316, 317, 318, 324], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 314, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 314, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 314, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 314, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 314, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 314, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 314, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 314, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 314, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 314, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 314, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 314, "\u521b\u5efa\u9ed8\u8ba4": 314, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 314, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 314, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 314, "result_lpa": 314, "result_sssp": 314, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 314, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 314, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 314, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 314, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 314, "\u7c7b": [314, 324], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 314, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 314, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 314, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 314, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 314, "\u6216\u5199\u5165": 314, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 314, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 314, "\u6216\u5199\u5165\u672c\u5730\u7684": 314, "lpa_result": 314, "\u6570\u636e\u7ed3\u6784": 314, "\u6b64\u5916": [314, 318], "\u5982": [314, 317, 320, 322], "\u5feb\u901f\u4e0a\u624b": [314, 320], "\u4e2d\u6240\u793a": 314, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 314, "\u7684\u65b0\u5c5e\u6027": 314, "\u5217": 314, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 314, "\u5217\u540d\u4e3a": 314, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 314, "new_graph": [314, 319], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 314, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 314, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 314, "\u7c7b\u4f3c\u7684": 314, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 314, "\u4f8b\u5982\u9876\u70b9id": 314, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 314, "\u4ee3\u8868\u7ed3\u679c": 314, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 314, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 314, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 314, "\u8f6c\u6362\u4e3a": [314, 323], "\u4f7f\u7528\u9876\u70b9\u7684": 314, "\u4f5c\u4e3a\u540d\u4e3a": 314, "\u7684\u5217": 314, "df_vd": 314, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 314, "df_result": 314, "property0": 314, "label0": 314, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 314, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 314, "\u5c06": [314, 323], "\u9876\u70b9\u7684": 314, "\u4f5c\u4e3a": [314, 315, 324], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 314, "gs_data": 314, "\u53ef\u4ee5\u67e5\u770b": 314, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 314, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 314, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 314, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 314, "\u5728\u7eaf": 314, "\u6a21\u5f0f": [314, 322], "\u4e0b\u4f7f\u7528": 314, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 314, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 314, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 314, "\u5982\u4ee3\u7801\u6240\u793a": 314, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 314, "\u88c5\u9970\u7684\u7c7b": 314, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 314, "\u56fe\u7b97\u6cd5\u51fd\u6570": 314, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 314, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 314, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 314, "\u4e0e": 314, "\u76f8\u5173\u7684\u5b8c\u6574": 314, "\u53ef\u4ee5\u53c2\u8003": 314, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 314, "\u4e3a\u4f8b": [314, 318], "\u7528\u6237\u5728": 314, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 314, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 314, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 314, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 314, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 314, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 314, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 314, "\u589e\u91cf\u8ba1\u7b97": 314, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 314, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 314, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 314, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [314, 324], "\u7ecf\u5178\u7684": 314, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 314, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 314, "\u6a21\u578b\u4e4b\u5916": 314, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 314, "\u7f16\u7a0b\u6a21\u578b": 314, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 314, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 314, "\u6a21\u578b\u4e0d\u540c": 314, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 314, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 314, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 314, "\u800c\u4e0d\u540c\u4e8e": 314, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 314, "\u8fd8\u662f\u4ee5": 314, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 314, "\u88c5\u9970\u5668": 314, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 314, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 314, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 314, "\u4e2d\u7684": [314, 315, 317], "\u51fd\u6570": [314, 322], "\u4e0b\u5217\u4ee3\u7801": 314, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 314, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 314, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 314, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 314, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 314, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 314, "\u8fd9\u91cc": [314, 315, 324], "\u662f\u4e0e": 314, "\u76f8\u5bf9\u5e94\u7684": 314, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 314, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 314, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 314, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 314, "\u5728\u6b64\u4e4b\u540e": 314, "\u60a8\u53ef\u4ee5\u4ece": 314, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 314, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 314, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 314, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 314, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 314, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 314, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 314, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 314, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 314, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 314, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 314, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 314, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 314, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 314, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 314, "dist_0": 314, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 314, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 314, "\u8bf7\u53c2\u8003": [314, 322], "\u6765\u5c06": 314, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 314, "\u5b89\u88c5\u5b8c\u6210\u540e": 314, "\u4f60\u9700\u8981\u5c06": 314, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 314, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 314, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 314, "\u6765\u786e\u4fdd": 314, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 314, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 314, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 314, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 314, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 314, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 314, "pluge": 314, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 314, "\u7528\u6237\u9700\u8981\u6309\u7167": 314, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 314, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 314, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 314, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 314, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 314, "defaultpropertyappbas": 314, "\u6216": [314, 315, 316, 317, 320, 322], "parallelpropertyappbas": 314, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 314, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 314, "defaultappbas": 314, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 314, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 314, "\u5176\u5e94\u8be5\u662f": 314, "defaultpropertycontextbas": 314, "parallelpropertycontextbas": 314, "defaultcontextbas": 314, "\u6216\u8005": [314, 316, 323, 324], "\u7684\u7684\u5b50\u7c7b": 314, "\u901a\u8fc7\u7ee7\u627f": 314, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 314, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 314, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 314, "client\u4e2dquery\u8fd4\u56de\u7684context": 314, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 314, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 314, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 314, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 314, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 314, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 314, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 314, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 314, "\u8fd9\u4e2a\u9700\u6c42": 314, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 314, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 314, "graphscope_repo": 314, "app_class_nam": 314, "java_path": 314, "path_to_your_jar": 314, "param_str": 314, "params_str": 314, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 314, "app\u7684\u7c7b\u7684\u5168\u540d": 314, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 314, "\u53ef\u4ee5\u901a\u8fc7": 314, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 314, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 314, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 314, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 314, "\u53ef\u4ee5": 314, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 314, "jar_path": 314, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 314, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 314, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 314, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 314, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 314, "\u7684app": 314, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 314, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 314, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [314, 315, 317], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 314, "\u76f8\u5173\u8bba\u6587": 314, "wenfei": 314, "jingbo": 314, "xu": 314, "wenyuan": 314, "yu": 314, "jingren": 314, "zhou": 314, "xiaojian": 314, "luo": 314, "qiang": 314, "yin": 314, "cao": 314, "ruiqi": 314, "tod": [314, 320], "yinghui": 314, "wu": 314, "jiaxin": 314, "jiang": 314, "43rd": 314, "zeyu": 314, "zheng": 314, "bohan": 314, "chao": 314, "tian": 314, "\u4ee5": [315, 318, 319, 321, 324], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 315, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [315, 317], "\u5982\u679c\u8fd0\u884c": 315, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 315, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 315, "\u56e0\u6b64": [315, 316, 318], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 315, "\u4f1a\u8bdd": [315, 318], "\u5ba2\u6237\u7aef": [315, 316, 320], "\u5b83\u5c01\u88c5": 315, "\u7ba1\u7406\u7740": 315, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 315, "\u5e76": 315, "\u8fde\u63a5": 315, "\u64cd\u4f5c\u7528\u6237\u5728": 315, "\u96c6\u7fa4\u4e0a\u7684": 315, "\u5f15\u64ce": 315, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 315, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 315, "\u5b9e\u4f8b": 315, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 315, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 315, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 315, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 315, "\u8def\u5f84": [315, 324], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 315, "\u7136\u540e": [315, 323], "\u5c06\u5176\u901a\u8fc7": 315, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 315, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 315, "\u8282\u70b9\u7684\u6982\u5ff5": 315, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 315, "\u521b\u5efa\u7684\u96c6\u7fa4": 315, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 315, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 315, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 315, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 315, "\u4e0a\u7684\u4e00\u4e2a": 315, "\u5b9e\u4f8b\u5305\u542b": 315, "\u4e00\u4e2a\u8fd0\u884c": 315, "\u7684": [315, 316, 317, 320, 325], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 315, "\u8d1f\u8d23\u5bf9": 315, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 315, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 315, "\u5f15\u64ce\u5bb9\u5668\u7684": 315, "replicaset": 315, "\u5bf9\u8c61": 315, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 315, "\u901a\u8fc7": [315, 318], "\u63a5\u6536\u6765\u81ea": 315, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 315, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 315, "\u56fe\u67e5\u8be2\u5f15\u64ce": 315, "\u56fe\u5b66\u4e60\u5f15\u64ce": [315, 320], "\u7684\u751f\u547d\u5468\u671f": 315, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 315, "\u8bf7\u5728": 315, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 315, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 315, "\u5b89\u88c5": [315, 320], "release_nam": 315, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 315, "\u53c2\u8003": 315, "\u8be5\u94fe\u63a5": 315, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 315, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 315, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 315, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 315, "\u96c6\u7fa4": [315, 317, 321], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 315, "\u7528\u6cd5\u5982\u4e0b": 315, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 315, "launch_clust": 315, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 315, "pyyaml": 315, "boto3": 315, "your_access_key_id": 315, "your_access_key_secret": 315, "region": 315, "your_region_nam": 315, "kube_config_path": 315, "alibabacloud_cs20151215": 315, "alibabacloud_ecs20140526": 315, "alibabacloud_vpc20160428": 315, "your_region_id": 315, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 315, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 315, "\u5e73\u53f0\u4e0a": 315, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 315, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 315, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 315, "\u672c\u5730\u90e8\u7f72": 315, "graphscope_env": [315, 316], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 316, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 316, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 316, "\u9075\u5faa": 316, "\u7684\u5f00\u6e90\u534f\u8bae": 316, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 316, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 316, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 316, "\u955c\u50cf": 316, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 316, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 316, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 316, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 316, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 316, "\u6267\u884c": 316, "10240m": 316, "minitest": 316, "unittest": 316, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 316, "\u6bd4\u5982": [316, 324], "\u56fe\u5206\u6790\u5f15\u64ce": [316, 320], "\u6a21\u5757": 316, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 316, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 316, "\u7684\u6784\u5efa\u8fc7\u7a0b": 316, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 316, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 316, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 316, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 316, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 316, "\u4e3a": [316, 317, 318], "shortsha": 316, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 316, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 316, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 316, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 316, "\u90a3\u4e48": 316, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 316, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 316, "\u5ba2\u6237\u7aef\u5373\u53ef": 316, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 316, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 316, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 316, "\u4e0b\u7684": 316, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 316, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 316, "install_prefix": 316, "\u4e0b\u5206\u522b\u6784\u5efa": 316, "\u7531\u4e8e": 316, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 316, "\u975edocker": 316, "\u4e2d\u8fdb\u884c": 316, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 316, "\u7684\u4f9d\u8d56": 316, "\u57fa\u4e8e\u5f53\u524d": 316, "\u73af\u5883\u4e0b\u7684": 316, "\u7248\u672c\u6784\u5efa": 316, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [316, 318], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 316, "\u7248\u672c": [316, 321], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 316, "conda": 316, "pyenv": 316, "\u5b89\u88c5\u591a\u4e2a": 316, "\u7684\u7248\u672c": 316, "\u98ce\u683c": 316, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 316, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 316, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 316, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 317, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 317, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 317, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 317, "\u6216\u8005\u5728": 317, "\u4e0e\u6211\u4eec\u8054\u7cfb": 317, "\u8fd0\u884c": 317, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 317, "\u5728\u901a\u8fc7": 317, "\u5ba2\u6237\u7aef\u4f7f\u7528": 317, "\u8fc7\u7a0b\u4e2d": 317, "\u9700\u8981\u7684\u6700\u4f4e": 317, "\u7248\u672c\u662f3": 317, "\u6700\u4f4epip\u7248\u672c\u662f": 317, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 317, "\u5355\u673a\u60c5\u51b5\u4e0b": 317, "\u8d44\u6e90\u9700\u6c42": 317, "\u6838": 317, "\u5185\u5b58": 317, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 317, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 317, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 317, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 317, "\u662f\u5426\u5f3a\u4f9d\u8d56": 317, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 317, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 317, "\u7684\u5f62\u5f0f\u5206\u53d1": 317, "\u53ef\u4ee5\u7528": 317, "\u5feb\u901f\u5b89\u88c5": 317, "\u5982\u4f55\u5982\u67e5\u770b": 317, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 317, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 317, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 317, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 317, "\u53ef\u4ee5\u4f7f\u7528": [317, 323], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 317, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 317, "\u7684\u78c1\u76d8": 317, "\u4e5f\u53ef\u5728": 317, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 317, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 317, "\u547d\u4ee4\u65f6": 317, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 317, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 317, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 317, "\u8fdb\u884c\u5220\u9664": 317, "\u901a\u5e38\u60c5\u51b5\u4e0b": 317, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 317, "\u90e8\u7f72": [317, 320], "\u65f6": [317, 318], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 317, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 317, "\u7b49\u6743\u9650": 317, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 317, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 317, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 317, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 317, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 317, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 317, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 317, "\u76ee\u524d": [317, 324], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 317, "\u53ef\u901a\u8fc7": 317, "\u8be5\u6587\u6863": 317, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 317, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 317, "\u5982\u679c": 317, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 317, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 317, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 317, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 317, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 317, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 317, "\u8f7d\u56fe\u9636\u6bb5": 317, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 317, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 317, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 317, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 317, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 317, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 317, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 317, "\u53ef\u89c1": 317, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 317, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 317, "\u90e8\u7f72\u7684": 317, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 317, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 317, "\u865a\u62df\u7684": 317, "\u6709\u4ec0\u4e48\u533a\u522b": 317, "\u5982\u4f55\u8bbe\u7f6e": 317, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 317, "\u5b83\u5b58\u50a8\u7531": 317, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 317, "\u7684\u5143\u4fe1\u606f": 317, "\u4f8b\u5982\u5f62\u72b6": 317, "\u540d\u79f0\u7b49": 317, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 317, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 317, "\u5b83\u76f8\u5f53\u4e8e": 317, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 317, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 317, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 317, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 317, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 317, "\u7684\u540c\u6837\u5927\u5c0f": 317, "\u5bfc\u81f4\u5728": 317, "\u73af\u5883\u4e0b\u5b89\u88c5": 317, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 317, "\u7f16\u8bd1": 317, "\u5931\u8d25": 317, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 317, "\u8be6\u60c5\u53ef\u53c2\u8003": 317, "\u4f60\u53ef\u4ee5\u6839\u636e": 317, "\u6b64\u6559\u7a0b": 317, "\u6765\u6e90\u7801\u7f16\u8bd1": 317, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 317, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 317, "\u4e0a\u5206\u914d": 317, "\u65f6\u9047\u5230\u4e86": 317, "\u95ee\u9898": 317, "\u5982\u4f55\u89e3\u51b3": 317, "\u901a\u5e38\u5f53\u4f7f\u7528": 317, "\u7684\u65b9\u5f0f\u5b89\u88c5": 317, "\u4f1a\u62a5": 317, "\u9519\u8bef": [317, 319], "\u6211\u4eec\u901a\u8fc7": 317, "\u6765\u67e5\u770b\u65e5\u5fd7": 317, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 317, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 317, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 317, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 317, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 317, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 317, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 317, "\u7136\u540e\u5c06": 317, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 317, "\u4e3a\u4ec0\u4e48\u5728": 317, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 317, "\u5b9e\u4f8b\u65f6": 317, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 317, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 317, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 317, "\u96c6\u7fa4\u62c9\u8d77": 317, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 317, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 317, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 317, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 317, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 317, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 317, "\u6216\u5bb9\u5668": 317, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 317, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 317, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 317, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 317, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 317, "\u4ee5\u53ca": [317, 324], "\u8bf7\u6ce8\u610f": 317, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 317, "unix": 317, "stackexchang": 317, "23452": 317, "\u5176\u4ed6\u95ee\u9898": 317, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 317, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 317, "\u540c\u65f6": [317, 322], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 317, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 318, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 318, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 318, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 318, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 318, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 318, "\u4f7f\u7528": [318, 320, 323, 324, 325], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 318, "\u6570\u636e\u96c6": 318, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 318, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 318, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 318, "\u5373\u8bba\u6587": 318, "\u4f5c\u8005": 318, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 318, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 318, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 318, "\u7ed9\u51fa\u5f02\u6784\u7684": 318, "\u6570\u636e": 318, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 318, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 318, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 318, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 318, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 318, "\u5728\u8be5\u6570\u636e\u4e2d": 318, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 318, "\u6458\u8981\u62bd\u53d6\u7684": 318, "\u7ef4": 318, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 318, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 318, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 318, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 318, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 318, "\u5ba2\u6237\u7aef\u8c03\u7528": 318, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 318, "\u6b65\u9aa4": 318, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 318, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 318, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 318, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 318, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 318, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 318, "\u7684\u7b2c\u4e00\u6b65": 318, "\u6211\u4eec\u9700\u8981\u5728": 318, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 318, "\u5bf9\u4e8e": [318, 321], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 318, "\u670d\u52a1\u7c7b\u578b": 318, "\u9ed8\u8ba4\u662f": 318, "\u53e6\u5916": [318, 324], "\u6ce8\u610f": [318, 321], "\u662f": 318, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 318, "\u5f53\u5728": 318, "\u4e0a\u4f7f\u7528": 318, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 318, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 318, "\u901a\u5e38\u4e3a": 318, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 318, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 318, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 318, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 318, "\u8be5": 318, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 318, "\u6240\u6709\u8d44\u6e90": 318, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 318, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 318, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 318, "\u90fd\u6709\u4e00\u4e2a": 318, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 318, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 318, "\u8f7d\u56fe": [318, 319, 320], "\u4ee5\u5c5e\u6027\u56fe": 318, "\u5efa\u6a21\u56fe\u6570\u636e": [318, 324], "\u5c5e\u6027\u56fe\u4e2d": 318, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 318, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 318, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 318, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 318, "\u5206\u522b\u6807\u8bb0\u4e3a": 318, "\u8bba\u6587": 318, "\u673a\u6784": 318, "\u7814\u7a76\u9886\u57df": 318, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 318, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 318, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 318, "\u5f15\u7528": 318, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 318, "\u9876\u70b9": 318, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 318, "\u64b0\u5199": 318, "\u7684\u8fb9": [318, 324], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 318, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 318, "\u6240\u6709\u7684\u9876\u70b9": 318, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 318, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 318, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 318, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 318, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 318, "\u6570\u636e\u6587\u4ef6": 318, "\u7ed3\u5408\u4f7f\u7528": 318, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 318, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 318, "author_affiliated_with_institut": 318, "paper_has_topic_field_of_studi": 318, "hastop": 318, "paper_cites_pap": 318, "author_writes_pap": 318, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 318, "\u8fd9\u91cc\u7684": 318, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 318, "\u4e2d\u7684\u56fe": 318, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 318, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 318, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 318, "\u63a2\u7d22\u6027": 318, "\u65b9\u5f0f\u6765\u63a2\u7d22": 318, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 318, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 318, "\u91c7\u7528\u79f0\u4e3a": 318, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 318, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 318, "\u5728\u6b64\u793a\u4f8b\u4e2d": 318, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 318, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 318, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 318, "\u552f\u4e00\u6807\u8bc6": 318, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 318, "\u4e8b\u5b9e\u8bc1\u660e": 318, "\u8bb8\u591a\u7b97\u6cd5": 318, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 318, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 318, "\u96c6\u4e2d\u6027": 318, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 318, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 318, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 318, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 318, "\u80cc\u540e\u57fa\u4e8e": 318, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 318, "\u7136\u540e\u8fd0\u884c": 318, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 318, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 318, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 318, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 318, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 318, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 318, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 318, "\u5f53\u524d": 318, "\u652f\u6301\u7528\u6237\u4ee5": 318, "\u6a21\u578b\u548c": 318, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 318, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 318, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 318, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 318, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 318, "\u6211\u4eec\u8bad\u7ec3\u4e86": 318, "\u6a21\u578b": 318, "\u5c06\u8282\u70b9": 318, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 318, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 318, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 318, "\u4e3a\u6b64": 318, "\u63a5\u7740\u4e0a\u4e00\u6b65": 318, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 318, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 318, "train_gcn": 318, "\u6700\u540e": [318, 319, 322], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 318, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 318, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 318, "\u548c\u5f15\u64ce": 318, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 318, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 319, "\u6295\u5f71\u7684\u65b9\u6cd5": 319, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 319, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 319, "\u5177\u4f53\u800c\u8a00": 319, "\u56fe": 319, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 319, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 319, "\u6211\u4eec\u5df2\u7ecf\u5728": 319, "\u4e00\u8282\u89c1\u5230\u8fc7": 319, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 319, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 319, "\u8fdb\u4e00\u6b65\u7684": 319, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 319, "\u4e2d\u4e4b\u540e": 319, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 319, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 319, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 319, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 319, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 319, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 319, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 319, "pathlib": 319, "\u5230\u8fd9\u91cc": 319, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 319, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 319, "graph1": 319, "graph2": 319, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 319, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 319, "\u5728\u5e95\u5c42": 319, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 319, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 319, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 319, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 319, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 319, "\u6765\u5b8c\u6210": 319, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 319, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 319, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 319, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 319, "\u503c\u53ef\u4ee5\u4e3a": 319, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 319, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 319, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 319, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 319, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 319, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 319, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 319, "sub_graph2": 319, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 319, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 319, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 319, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 319, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 319, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 319, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 319, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 319, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 319, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 319, "\u8fb9\u6807\u7b7e": 319, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 319, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 319, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 319, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 319, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 319, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 319, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 319, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 320, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 320, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 320, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 320, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 320, "\u63d0\u4f9b\u4e86": 320, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 320, "\u5177\u6709\u4e00\u7ad9\u5f0f": 320, "\u5f00\u53d1\u4fbf\u6377": 320, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 320, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 320, "\u5305\u62ec": [320, 323], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 320, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 320, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 320, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 320, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 320, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 320, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 320, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 320, "\u5982\u98ce\u63a7": 320, "\u7535\u5546\u63a8\u8350": 320, "\u5e7f\u544a": 320, "\u7f51\u7edc\u5b89\u5168": [320, 323], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 320, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 320, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 320, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 320, "\u6700\u4f73\u8bba\u6587\u5956": 320, "vldb2017": 320, "\u6700\u4f73\u6f14\u793a\u5956": 320, "vldb2020": 320, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 320, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 320, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 320, "2021\u5f55\u7528": 320, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 320, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 320, "kdd\u7b49": 320, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 320, "\u57fa\u4e8e": [320, 325], "\u793a\u4f8b": 320, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 320, "\u521b\u5efa\u4f1a\u8bdd": 320, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 320, "\u56fe\u5206\u6790": 320, "\u56fe\u795e\u7ecf\u7f51\u7edc": 320, "\u5173\u95ed\u4f1a\u8bdd": 320, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 320, "\u5728aw": 320, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 320, "\u672c\u5730\u90e8\u7f72graphscop": 320, "\u5165\u95e8\u6559\u7a0b": 320, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [320, 325], "\u4f7f\u7528\u517c\u5bb9": [320, 325], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [320, 325], "\u7528": [320, 322, 325], "\u50cf": [320, 325], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [320, 325], "\u8f7d\u5165\u56fe\u6570\u636e": [320, 325], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [320, 325], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [320, 325], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [320, 325], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [320, 325], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [320, 325], "bipartitegraphsag": [320, 325], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [320, 325], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [320, 325], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [320, 325], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 320, "\u624b\u52a8\u914d\u7f6e\u56fe": 320, "\u9ad8\u7ea7\u7528\u6cd5": 320, "\u4ece": [320, 322], "\u4e2d\u8f7d\u56fe": 320, "\u7684\u53d8\u79cd": 320, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 320, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 320, "\u6295\u5f71": 320, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 320, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 320, "\u5185\u7f6e\u7b97\u6cd5": 320, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 320, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 320, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 320, "\u4e2d\u7684\u51fd\u6570": 320, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 320, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 320, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 320, "\u5229\u7528python": 320, "\u8fde\u63a5graphscop": 320, "\u5229\u7528java": 320, "\u5f00\u53d1\u63a7\u5236\u53f0": 320, "gremlin\u7f16\u7a0b\u5165\u95e8": 320, "gremlin\u517c\u5bb9\u6027": 320, "\u5bf9\u6bd4tinkerpop": 320, "\u56fe\u5b66\u4e60\u6a21\u578b": 320, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 320, "\u5e38\u89c1\u95ee\u9898": 320, "\u5f00\u53d1\u8005\u6307\u5357": 320, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 320, "\u6784\u5efa": 320, "\u4ee3\u7801\u98ce\u683c": 320, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 321, "sur": 321, "\u7a0b\u5e8f\u5305": 321, "\u7684\u5f62\u5f0f\u53d1\u5e03": 321, "\u53ef\u76f4\u63a5\u901a\u8fc7": 321, "\u9700\u8981\u6ee1\u8db3": 321, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 321, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 321, "\u73af\u5883\u4e0b\u8fd0\u884c": 321, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 321, "\u7684\u7528\u6237": 321, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 321, "\u5e76\u5728": 321, "\u4e2d\u5f00\u542f": 321, "\u529f\u80fd": 321, "\u53d1\u884c\u7248\u7528\u6237": 321, "\u6211\u4eec\u63d0\u4f9b\u4e86\u811a\u672c\u6765\u51c6\u5907\u8fd0\u884c\u65f6\u73af\u5883": 321, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 321, "\u4e0a\u5b89\u88c5": 321, "wsl2": 321, "\u4ee5\u4f7f\u7528\u811a\u672c": 321, "install_dep": 321, "\u63a5\u4e0b\u6765": [321, 322, 323], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 321, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 322, "\u7b80\u79f0gie": 322, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 322, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 322, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 322, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 322, "\u8be5\u5f15\u64ce\u652f\u6301": 322, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 322, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 322, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 322, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 322, "\u63a5\u53e3": [322, 323], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 322, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 322, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 322, "\u5982\u4e0b\u6240\u793a": 322, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 322, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 322, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 322, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 322, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 322, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 322, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 322, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 322, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 322, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 322, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 322, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 322, "\u683c\u5f0f": 322, "\u7684\u8f93\u51fa": 322, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 322, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 322, "python\u8bbf\u95ee\u56fe\u6570\u636e": 322, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 322, "\u5b98\u65b9\u6587\u6863": 322, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 322, "\u8be6\u89c1gremlin": 322, "java\u7684": 322, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 322, "\u4e5f\u53eb\u505arepl\u73af\u5883": 322, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 322, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 322, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 322, "\u5b89\u88c5gremlin": 322, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 322, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 322, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 322, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 322, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 322, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 322, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 322, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 322, "\u5176\u4e2d\u7684": 322, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 322, "\u6216ip": 322, "\u548c\u7aef\u53e3": 322, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 322, "\u63d0\u793a\u7b26\u4e0b": 322, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 322, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 322, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 322, "\u8fdc\u7a0b": 322, "graphscope\u6267\u884c": 322, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 322, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 322, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 322, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 322, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 322, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 322, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 322, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 322, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 322, "hoc": 322, "\u904d\u5386\u67e5\u8be2": 322, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 322, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 322, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 322, "\u70b9\u6216\u8fb9": 322, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 322, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 322, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 322, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 322, "\u952e": 322, "\u503c": 322, "\u5bf9": 322, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 322, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 322, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 322, "\u5b83\u5305\u542b": 322, "\u7528\u6237": 322, "\u5546\u54c1": 322, "\u5730\u5740": 322, "\u4e09\u7c7b\u70b9": 322, "\u5b83\u4eec\u901a\u8fc7": 322, "\u8d2d\u4e70": 322, "\u9012\u9001": 322, "belongs_to": 322, "\u5c5e\u4e8e": 322, "home_of": 322, "\u5bb6\u5ead\u5730\u5740": 322, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 322, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 322, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 322, "\u8def\u5f841": 322, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 322, "\u4e70\u5bb6": 322, "tom": 322, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 322, "jack": 322, "\u63d0\u4f9b\u7684\u6807\u4ef7": 322, "\u7684\u5546\u54c1": 322, "gift": 322, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 322, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 322, "\u904d\u5386\u5668": 322, "\u6807\u8bc6": 322, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 322, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 322, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 322, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 322, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 322, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 322, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 322, "\u8fb9\u6216\u5c5e\u6027": 322, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 322, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 322, "\u5d4c\u5957\u904d\u5386": 322, "\u7684\u652f\u6301": 322, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 322, "\u5b50": 322, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 322, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 322, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 322, "\u8fc7\u6ee4": 322, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 322, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 322, "\u800c": 322, "\u6620\u5c04": 322, "\u6392\u5e8f": 322, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 322, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 322, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 322, "\u5728gremlin\u4e2d\u901a\u8fc7": 322, "\u5faa\u73af": 322, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 322, "\u7ec8\u6b62\u6761\u4ef6": 322, "\u8868\u8fbe": 322, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 322, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 322, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 322, "\u6761\u4ef6\u7ec8\u6b62": 322, "\u64cd\u4f5c\u7c7b\u4f3c": 322, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 322, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 322, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 322, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 322, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 322, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 322, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 322, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 322, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 322, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 322, "\u7684\u6709\u5411\u73af\u8def": 322, "\u9996\u5148": [322, 324], "\u8f93\u5165\u56fe\u64cd\u4f5c": 322, "\u5305\u542b\u4e00\u4e2a": 322, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 322, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 322, "\u70b9": 322, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 322, "\u7684\u70b9": 322, "\u7d27\u968f\u5176\u540e\u7684": 322, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 322, "\u4fee\u9970\u7b26": 322, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 322, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 322, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 322, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 322, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 322, "\u67e5\u8be2\u6cbf\u7740": 322, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 322, "\u6b21": 322, "\u8f93\u51fahops\u5728": 322, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 322, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 322, "\u901a\u8fc7\u5728": 322, "\u5185\u914d\u7f6e": 322, "\u9009\u9879\u5b9e\u73b0": 322, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 322, "\u6307\u4ee3": 322, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 322, "\u7684\u73af": 322, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 322, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 322, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 322, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 322, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 322, "\u5982\u679c\u6709\u7684\u8bdd": 322, "gie\u652f\u6301apach": 322, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 322, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 322, "3\u548c3": 322, "4\u7248\u672c\u517c\u5bb9\u7684": 322, "\u670d\u52a1\u63a5\u53e3": 322, "\u9664\u6b64\u4e4b\u5916": 322, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 322, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 322, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 322, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 322, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 322, "\u76ee\u524d\u7684": 322, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 322, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 322, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 322, "\u4e0d\u53ef\u4fee\u6539": 322, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 322, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 322, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 322, "\u7ea6\u675f": 322, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 322, "\u5305\u62ec\u70b9": 322, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 322, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 322, "\u4e3b\u952e\u7ea6\u675f": 322, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 322, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 322, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 322, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 322, "id\u7f16\u7801\u4e86\u7c7b\u578b": 322, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 322, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 322, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 322, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 322, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 322, "\u56fe\u4fee\u6539\u64cd\u4f5c": 322, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 322, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 322, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 322, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 322, "\u4e8b\u52a1": 322, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 322, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 322, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 322, "\u548c\u793a\u4f8b\u7528\u6cd5": 322, "\u8f93\u5165\u56fe": 322, "id1": 322, "id2": 322, "labelnam": 322, "labelname1": 322, "labelname2": 322, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 322, "\u8bed\u6cd5\u7cd6": 322, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 322, "\u4ee3\u8868": 322, "\u8282\u70b9\u7684age\u5c5e\u6027": 322, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 322, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 322, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 322, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 322, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 322, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 322, "dedup": 322, "substr": 322, "contant": 322, "aaa": 322, "otherv": 322, "flatmap": 322, "\u591a\u91cd\u6620\u5c04": 322, "bothv": 322, "\u627e\u5230\u6240\u6709\u4ece": 322, "\u5f00\u59cb\u901a\u8fc7": 322, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 322, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 322, "\u70b9\u4e0d\u91cd\u590d": 322, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 322, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 322, "\u70b9\u53ef\u91cd\u590d": 322, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 322, "\u805a\u5408": 322, "groupbi": 322, "groupby\u591a\u4e2akei": 322, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 322, "groupby\u591a\u4e2avalu": 322, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 322, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 322, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 322, "\u4f1a\u9010\u6b65\u652f\u6301": 322, "\u53ef\u4ee5\u901a\u8fc7path": 322, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 322, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 322, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 322, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 322, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 322, "\u8ba1\u7b97\u5b50\u56fe": 322, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 322, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 322, "cap": 322, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 322, "\u4f8b\u5982pagerank\u548cshortestpath": 322, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 322, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 323, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 323, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 323, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 323, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 323, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 323, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 323, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 323, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 323, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 323, "\u57fa\u4e8egl": 323, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 323, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 323, "\u4f8b\u5982\u56fe\u91c7\u6837": 323, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 323, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 323, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 323, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 323, "\u539f\u59cb\u7684gcn": 323, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 323, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 323, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 323, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 323, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 323, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 323, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 323, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 323, "graphsaint\u7b49": 323, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 323, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 323, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 323, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 323, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 323, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 323, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 323, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 323, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 323, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 323, "\u5305\u62ectensorflow": 323, "\u548cpytorch": 323, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 323, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 323, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 323, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 323, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 323, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 323, "\u79f0\u4e3a": 323, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 323, "\u611f\u53d7\u91ce": 323, "\u591a\u8df3\u90bb\u5c45": 323, "\u7ec4\u6210": 323, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 323, "\u6211\u4eec\u5b9e\u73b0": 323, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 323, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 323, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 323, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 323, "\u7136\u540e\u7528": 323, "\u7ba1\u7406": 323, "\u5230": 323, "\u7684\u8f6c\u6362": 323, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 323, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 323, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 323, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 323, "\u5411\u91cf": 323, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 323, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 323, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 323, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 323, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 323, "\u56fe\u7f16\u7801\u5668": 323, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 323, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 323, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 323, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 323, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 323, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 323, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 323, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 323, "\u5982tensorflow": 323, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 323, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 323, "\u901a\u5e38\u6765\u8bf4": 323, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 323, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 323, "\u7528\u56fe\u91c7\u6837": 323, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 323, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 323, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 323, "positve_sampl": 323, "\u4ee5\u8fd9\u4e9b": 323, "\u4e3a\u8f93\u5165\u4ea7\u751f": 323, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 323, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 323, "\u4ea7\u751f\u8d1f\u6837\u672c": 323, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 323, "\u6211\u4eec\u62bd\u8c61\u4e86": 323, "\u6765\u91c7\u6837\u90bb\u5c45": 323, "\u6700\u540e\u5c06": 323, "\u4ea7\u751f\u7684": 323, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 323, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 323, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 323, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 323, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 323, "\u624d\u80fd\u4f7f\u7528": 323, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 323, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 323, "\u5b9a\u4e49\u7f16\u7801\u5668": 323, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 323, "\u5f97\u5230": 323, "\u540e": 323, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 323, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 323, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 323, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 323, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 323, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 323, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 323, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 323, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 323, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 323, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 323, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 323, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 323, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 323, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 323, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 323, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 323, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 323, "\u6765": 323, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 323, "\u9700\u8981\u7684\u683c\u5f0f": 323, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 323, "\u5206\u522b\u662f\u70b9\u8868": 323, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 323, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 323, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 323, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 323, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 323, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 323, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 323, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 323, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 323, "\u56de\u4e00\u8df3\u90bb\u5c45": 323, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 323, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 323, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 323, "\u56e0\u6b64\u9009\u62e9": 323, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 323, "\u6210": 323, "\u8fd4\u56de": 323, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 323, "\u6765\u628a": 323, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 323, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 323, "\u4f60\u53ef\u4ee5\u4ece": 323, "\u83b7\u53d6\u548c\u524d\u9762": 323, "\u5bf9\u5e94\u7684": 323, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 323, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 323, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 323, "\u56e0\u4e3a": 323, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 323, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 323, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 323, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 323, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 323, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 323, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 323, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 323, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 323, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 323, "\u7136\u540e\u5728": 323, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 323, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 323, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 323, "\u6765\u8fdb\u884c\u8bad\u7ec3": 323, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 323, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 323, "\u76ee\u5f55": 323, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 323, "gat\u7b49\u6a21\u578b": 323, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 323, "\u5c5e\u6027\u56fe": 324, "\u56fe\u4e0a\u7684\u70b9": 324, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 324, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 324, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 324, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 324, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 324, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 324, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 324, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 324, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 324, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 324, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 324, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 324, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 324, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 324, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 324, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 324, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 324, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 324, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 324, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 324, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 324, "\u7684\u672c\u5730\u8def\u5f84": 324, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 324, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 324, "\u662f\u6211\u4eec\u901a\u8fc7": 324, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 324, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 324, "\u4f60\u53ef\u4ee5\u5728": 324, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 324, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 324, "\u7136\u800c": 324, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 324, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 324, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 324, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 324, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 324, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 324, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 324, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 324, "\u6211\u4eec\u5c06\u4f7f\u7528": 324, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 324, "\u627e\u5230\u6e90\u6570\u636e": 324, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 324, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 324, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 324, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 324, "\u4ee3\u8868\u6570\u636e\u6e90": 324, "\u6307\u793a": 324, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 324, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 324, "\u6570\u7ec4\u7b49": 324, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 324, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 324, "\u8f7d\u5165\u6570\u636e": 324, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 324, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 324, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 324, "\u9ed8\u8ba4\u4e3a": 324, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 324, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 324, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 324, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 324, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 324, "\u4e3e\u4e2a\u4f8b\u5b50": 324, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 324, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 324, "\u53ef\u9009\u9879": 324, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 324, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 324, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 324, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 324, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 324, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 324, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 324, "\u6bd4\u5982\u8bf4": 324, "\u5217\u7684\u5217\u540d": 324, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 324, "\u6216\u76ee\u6807\u70b9": 324, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 324, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 324, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 324, "\u4ee3\u8868\u7b2c\u51e0\u5217": 324, "\u4ece0\u5f00\u59cb": 324, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 324, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 324, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 324, "\u7c7b\u4f3c": 324, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 324, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 324, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 324, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 324, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 324, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 324, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 324, "\u8fb9\u7684\u6807\u7b7e\u540d": 324, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 324, "\u4e00\u5217\u5c5e\u6027": 324, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 324, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 324, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 324, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 324, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 324, "\u4e3e\u4f8b\u6765\u8bf4": 324, "\u8d77\u70b9\u7684": 324, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 324, "\u5217\u540d": 324, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 324, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 324, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 324, "\u4e00\u5217\u4e3a\u8d77\u70b9": 324, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 324, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 324, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 324, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 324, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 324, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 324, "\u5982\u679c\u7528\u6237\u7684": 324, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 324, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 324, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 324, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 324, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 324, "\u6709\u4e00\u4e2a\u540d\u4e3a": 324, "\u7684\u8fb9\u6807\u7b7e": 324, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 324, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 324, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 324, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 324, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 324, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 324, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 324, "\u50cf\u8fd9\u6837": 324, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 324, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 324, "\u5728\u8fd9\u91cc": 324, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 324, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 324, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 324, "\u7b49\u7c7b\u578b": 324, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 324, "\u5206\u522b\u4e3a": 324, "\u53ef\u4ee5\u4e3a": 324, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 324, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 324, "\u5f53id\u4e0d\u80fd\u7528": 324, "\u8868\u793a\u65f6": 324, "\u624d\u5e94\u8be5\u4f7f\u7528": 324, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 324, "\u5efa\u8bae\u4f7f\u7528": 324, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 324, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 324, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 324, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 324, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 324, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 324, "\u5c5e\u6027\u56fe\u7684": 324, "\u4f8b\u5b50": 324, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 324, "\u7684\u7c7b": 324, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 324, "\u652f\u6301\u4ece": 324, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 324, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 324, "\u9664\u4e86": 324, "\u5916": 324, "\u5176\u4ed6\u5c5e\u6027": 324, "id\u5217": 324, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 324, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 324, "\u6211\u4eec\u5c06\u5176\u4ee5": 324, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 324, "\u5f53": 324, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 324, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 324, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 324, "\u6807\u51c6": 324, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 324, "\u5c06\u4f1a\u89e3\u6790": 324, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 324, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 324, "\u672c\u5730": 324, "\u6570\u636e\u7531": 324, "\u8d1f\u8d23\u8f7d\u5165": 324, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 324, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 324, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 324, "\u4e4b\u4e8e": 324, "\u6216\u8005\u662f": 324, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 324, "\u6bd4\u5982\u53c2\u7167": 324, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 324, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 324, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 324, "abstractbufferedfil": 324, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 324, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 324, "write\u529f\u80fd": 324, "\u6700\u540e\u901a\u8fc7": 324, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 324, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 325, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 325, "\u5982\u4f55\u8f7d\u56fe": 325, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 325, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 325, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 325, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 325, "\u6211\u4eec\u7528jupyt": 325, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 325, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 325, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 325, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 325, "lab": 325, "\u73af\u5883": 325, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 325, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 325}, "objects": {"": [[81, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [81, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [81, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [81, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [81, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [81, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [81, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [81, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [81, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [81, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [81, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [81, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [81, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [81, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [81, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [81, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [81, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [81, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [81, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [81, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [81, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [81, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [81, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [81, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [81, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [81, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [81, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [81, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [81, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [81, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [81, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [81, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [81, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [81, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [81, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [81, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [81, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [81, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [81, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [81, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [81, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [81, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [81, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [81, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [81, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [81, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [81, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [81, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [81, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [81, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [81, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [81, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [81, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [81, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [81, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [81, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [81, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [81, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [81, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [81, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [81, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [81, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [81, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [81, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [81, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [81, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [81, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [81, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [81, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [81, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [81, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [81, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [81, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [81, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [81, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [81, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [81, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [81, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [81, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [81, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [81, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [81, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [81, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [81, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [81, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [81, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [81, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [81, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [81, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [81, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [81, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [81, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [81, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [81, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [81, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [81, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [81, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [81, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [81, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [81, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [81, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [81, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [81, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [81, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [81, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [81, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [81, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [81, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [81, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [81, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [81, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [81, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [81, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [81, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [81, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [81, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [81, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [81, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [81, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [81, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [81, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [81, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [81, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [81, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [81, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [81, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [81, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [81, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [81, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [81, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [81, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [81, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [81, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [81, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [81, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [81, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [81, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [81, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [81, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [81, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [81, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [81, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [81, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [81, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [81, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [81, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [81, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [81, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [81, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [81, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [81, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [81, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [81, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [81, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [81, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [81, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [81, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [81, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [81, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [81, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [81, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [81, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [81, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [81, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [81, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [81, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [81, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [81, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [81, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [81, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [81, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [81, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [81, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [81, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [81, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [81, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [81, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [81, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [81, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [81, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [81, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [81, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [81, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [81, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [81, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [81, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [81, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [81, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [81, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [81, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [81, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [81, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [81, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [81, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [81, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [81, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [81, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [81, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [81, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [81, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [81, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [81, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [81, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [81, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [81, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [81, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [81, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [81, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [81, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [81, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [81, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [81, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [81, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [81, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [81, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [81, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [81, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [81, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [81, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [81, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [81, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [81, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [81, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [81, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [81, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [81, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [81, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [81, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [81, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [81, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [81, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [81, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [81, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [81, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [81, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [81, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [81, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [81, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [81, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [81, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [81, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [81, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [81, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [81, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [81, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [81, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [81, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [81, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [81, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [81, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [81, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [81, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [81, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [81, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [81, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [81, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [81, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [81, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [81, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [81, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [81, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [81, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [81, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [81, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [81, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [81, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [81, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [81, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [81, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [81, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [81, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [81, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [81, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [81, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [81, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [81, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [81, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [81, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [81, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [81, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [81, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [81, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [81, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [81, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [81, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [81, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [81, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [81, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [81, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [81, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [81, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [81, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [81, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [81, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [81, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [81, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [81, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [81, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [81, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [81, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [81, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [81, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [81, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [81, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [81, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [81, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [81, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [81, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [81, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [81, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [81, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [81, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [81, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [81, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [81, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [81, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [81, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [81, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [81, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [81, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [81, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [81, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [81, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [81, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [81, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [81, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [81, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [81, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [81, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [81, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [81, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [81, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [81, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [81, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [81, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [81, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [81, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [81, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [81, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [81, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [81, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [81, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [81, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [81, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [81, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [81, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [81, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [81, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [81, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [81, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [81, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [81, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [81, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [81, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [81, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [81, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [81, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [81, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [81, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [81, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [81, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [81, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [81, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [81, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [81, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [81, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [81, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[298, 9, 1, "", "Session"], [88, 12, 1, "", "Vertex"], [82, 8, 1, "", "attribute_assortativity_coefficient"], [82, 8, 1, "", "average_degree_connectivity"], [82, 8, 1, "", "average_shortest_path_length"], [82, 8, 1, "", "avg_clustering"], [82, 8, 1, "", "bfs"], [82, 8, 1, "", "cdlp"], [82, 8, 1, "", "clustering"], [89, 8, 1, "", "declare"], [82, 8, 1, "", "degree_assortativity_coefficient"], [82, 8, 1, "", "degree_centrality"], [82, 8, 1, "", "eigenvector_centrality"], [132, 8, 1, "", "g"], [133, 8, 1, "", "get_default_session"], [134, 8, 1, "", "graphlearn"], [135, 8, 1, "", "gremlin"], [136, 8, 1, "", "has_default_session"], [82, 8, 1, "", "hits"], [82, 8, 1, "", "is_simple_path"], [82, 8, 1, "", "k_core"], [82, 8, 1, "", "k_shell"], [82, 8, 1, "", "katz_centrality"], [82, 8, 1, "", "louvain"], [82, 8, 1, "", "lpa"], [82, 8, 1, "", "lpa_u2i"], [82, 8, 1, "", "numeric_assortativity_coefficient"], [82, 8, 1, "", "pagerank"], [82, 8, 1, "", "pagerank_nx"], [137, 14, 1, "", "session"], [138, 8, 1, "", "set_option"], [82, 8, 1, "", "sssp"], [82, 8, 1, "", "triangles"], [82, 8, 1, "", "voterank"], [82, 8, 1, "", "wcc"]], "graphscope.Session": [[298, 10, 1, "", "__enter__"], [298, 10, 1, "", "__exit__"], [298, 10, 1, "", "__init__"], [298, 10, 1, "", "add_lib"], [298, 10, 1, "", "as_default"], [298, 10, 1, "", "close"], [298, 10, 1, "", "connected"], [298, 11, 1, "", "engine_config"], [298, 10, 1, "", "g"], [298, 10, 1, "", "get_config"], [298, 10, 1, "", "get_vineyard_object_mapping_table"], [298, 10, 1, "", "graphlearn"], [298, 11, 1, "", "info"], [298, 10, 1, "", "interactive"], [298, 10, 1, "", "load_from"], [298, 10, 1, "", "load_from_gar"], [298, 10, 1, "", "restore_from_pvc"], [298, 10, 1, "", "run_fetches"], [298, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[82, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[82, 10, 1, "", "__call__"], [82, 10, 1, "", "__init__"], [82, 10, 1, "", "is_compatible"], [82, 10, 1, "", "signature"]], "graphscope.framework.app": [[82, 9, 1, "", "App"], [82, 9, 1, "", "AppAssets"], [82, 9, 1, "", "AppDAGNode"], [90, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[82, 10, 1, "", "__del__"], [82, 10, 1, "", "__init__"], [82, 11, 1, "", "key"], [82, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[82, 10, 1, "", "__init__"], [82, 11, 1, "", "algo"], [82, 11, 1, "", "context_type"], [82, 11, 1, "", "gar"], [82, 10, 1, "", "is_compatible"], [82, 11, 1, "", "signature"], [82, 11, 1, "", "type"]], "graphscope.framework.context": [[83, 9, 1, "", "BaseContextDAGNode"], [83, 9, 1, "", "Context"], [83, 9, 1, "", "DynamicVertexDataContext"], [83, 9, 1, "", "LabeledVertexDataContextDAGNode"], [83, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [83, 9, 1, "", "ResultDAGNode"], [83, 9, 1, "", "TensorContextDAGNode"], [83, 9, 1, "", "VertexDataContextDAGNode"], [83, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[83, 10, 1, "", "to_dataframe"], [83, 10, 1, "", "to_numpy"], [83, 10, 1, "", "to_vineyard_dataframe"], [83, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[295, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[91, 8, 1, "", "add_column"], [92, 8, 1, "", "add_labels_to_graph"], [93, 8, 1, "", "arrow_to_dynamic"], [94, 8, 1, "", "bind_app"], [95, 8, 1, "", "clear_edges"], [96, 8, 1, "", "clear_graph"], [97, 8, 1, "", "context_to_dataframe"], [98, 8, 1, "", "context_to_numpy"], [99, 8, 1, "", "copy_graph"], [100, 8, 1, "", "create_app"], [101, 8, 1, "", "create_graph"], [102, 8, 1, "", "create_graph_view"], [103, 8, 1, "", "create_loader"], [104, 8, 1, "", "create_subgraph"], [105, 8, 1, "", "create_unload_op"], [106, 8, 1, "", "dynamic_to_arrow"], [107, 8, 1, "", "get_context_data"], [108, 8, 1, "", "graph_to_dataframe"], [109, 8, 1, "", "graph_to_numpy"], [110, 8, 1, "", "gremlin_to_subgraph"], [111, 8, 1, "", "modify_edges"], [112, 8, 1, "", "modify_vertices"], [113, 8, 1, "", "output"], [114, 8, 1, "", "project_arrow_property_graph"], [115, 8, 1, "", "project_to_simple"], [116, 8, 1, "", "report_graph"], [117, 8, 1, "", "run_app"], [118, 8, 1, "", "to_data_sink"], [119, 8, 1, "", "to_directed"], [120, 8, 1, "", "to_undirected"], [121, 8, 1, "", "to_vineyard_dataframe"], [122, 8, 1, "", "to_vineyard_tensor"], [123, 8, 1, "", "unload_app"], [124, 8, 1, "", "unload_context"], [125, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[153, 9, 1, "", "Graph"], [153, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[153, 10, 1, "", "__init__"], [153, 10, 1, "", "add_column"], [153, 10, 1, "", "add_edges"], [153, 10, 1, "", "add_vertices"], [153, 10, 1, "", "archive"], [153, 10, 1, "", "consolidate_columns"], [153, 10, 1, "", "detach"], [153, 11, 1, "", "key"], [153, 10, 1, "", "load_from"], [153, 10, 1, "", "loaded"], [153, 10, 1, "", "project"], [153, 10, 1, "", "save_to"], [153, 11, 1, "", "schema"], [153, 11, 1, "", "schema_path"], [153, 11, 1, "", "session_id"], [153, 10, 1, "", "to_dataframe"], [153, 10, 1, "", "to_directed"], [153, 10, 1, "", "to_numpy"], [153, 10, 1, "", "to_undirected"], [153, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[153, 10, 1, "", "__init__"], [153, 10, 1, "", "add_column"], [153, 10, 1, "", "add_edges"], [153, 10, 1, "", "add_vertices"], [153, 10, 1, "", "consolidate_columns"], [153, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[153, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[153, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[153, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[295, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[126, 10, 1, "", "__init__"], [127, 10, 1, "", "as_op_def"], [128, 10, 1, "", "eval"], [129, 11, 1, "", "evaluated"], [130, 11, 1, "", "key"], [131, 11, 1, "", "signature"]], "graphscope.interactive.query": [[154, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[154, 10, 1, "", "__init__"], [154, 10, 1, "", "close"], [154, 11, 1, "", "cypher_driver"], [154, 11, 1, "", "cypher_url"], [154, 10, 1, "", "execute"], [154, 11, 1, "", "graph_url"], [154, 11, 1, "", "gremlin_client"], [154, 11, 1, "", "gremlin_url"], [154, 11, 1, "", "object_id"], [154, 11, 1, "", "session"], [154, 11, 1, "", "session_id"], [154, 10, 1, "", "subgraph"], [154, 10, 1, "", "submit"], [154, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[155, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[155, 10, 1, "", "E"], [155, 10, 1, "", "V"], [155, 10, 1, "", "__init__"], [155, 10, 1, "", "get_handle"]], "graphscope.nx": [[291, 9, 1, "", "DiGraph"], [291, 9, 1, "", "Graph"], [293, 8, 1, "", "read_adjlist"], [293, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[291, 10, 1, "", "__contains__"], [291, 10, 1, "", "__getitem__"], [291, 10, 1, "", "__init__"], [291, 10, 1, "", "__iter__"], [291, 10, 1, "", "__len__"], [291, 10, 1, "", "add_edge"], [291, 10, 1, "", "add_edges_from"], [291, 10, 1, "", "add_node"], [291, 10, 1, "", "add_nodes_from"], [291, 10, 1, "", "add_weighted_edges_from"], [291, 11, 1, "", "adj"], [291, 10, 1, "", "adjacency"], [291, 14, 1, "", "adjlist_inner_dict_factory"], [291, 14, 1, "", "adjlist_outer_dict_factory"], [291, 10, 1, "", "clear"], [291, 10, 1, "", "clear_edges"], [291, 10, 1, "", "copy"], [291, 11, 1, "", "degree"], [291, 14, 1, "", "edge_attr_dict_factory"], [291, 10, 1, "", "edge_subgraph"], [291, 11, 1, "", "edges"], [291, 10, 1, "", "get_edge_data"], [291, 14, 1, "", "graph_attr_dict_factory"], [291, 14, 1, "", "graph_cache_factory"], [291, 11, 1, "", "graph_type"], [291, 10, 1, "", "has_edge"], [291, 10, 1, "", "has_node"], [291, 10, 1, "", "has_predecessor"], [291, 10, 1, "", "has_successor"], [291, 11, 1, "", "in_degree"], [291, 11, 1, "", "in_edges"], [291, 10, 1, "", "is_directed"], [291, 10, 1, "", "is_multigraph"], [291, 11, 1, "", "key"], [291, 11, 1, "", "name"], [291, 10, 1, "", "nbunch_iter"], [291, 10, 1, "", "neighbors"], [291, 14, 1, "", "node_attr_dict_factory"], [291, 14, 1, "", "node_dict_factory"], [291, 11, 1, "", "nodes"], [291, 10, 1, "", "number_of_edges"], [291, 10, 1, "", "number_of_nodes"], [291, 11, 1, "", "op"], [291, 10, 1, "", "order"], [291, 11, 1, "", "out_degree"], [291, 11, 1, "", "out_edges"], [291, 11, 1, "", "pred"], [291, 10, 1, "", "predecessors"], [291, 10, 1, "", "remove_edge"], [291, 10, 1, "", "remove_edges_from"], [291, 10, 1, "", "remove_node"], [291, 10, 1, "", "remove_nodes_from"], [291, 10, 1, "", "reverse"], [291, 11, 1, "", "schema"], [291, 11, 1, "", "session"], [291, 11, 1, "", "session_id"], [291, 10, 1, "", "set_edge_data"], [291, 10, 1, "", "set_node_data"], [291, 11, 1, "", "signature"], [291, 10, 1, "", "size"], [291, 10, 1, "", "subgraph"], [291, 11, 1, "", "succ"], [291, 10, 1, "", "successors"], [291, 10, 1, "", "to_directed"], [291, 10, 1, "", "to_undirected"], [291, 10, 1, "", "to_undirected_class"], [291, 10, 1, "", "update"]], "graphscope.nx.Graph": [[291, 10, 1, "", "__contains__"], [291, 10, 1, "", "__getitem__"], [294, 8, 1, "", "__init__"], [291, 10, 1, "", "__iter__"], [291, 10, 1, "", "__len__"], [294, 8, 1, "", "_convert_arrow_to_dynamic"], [291, 10, 1, "", "add_edge"], [291, 10, 1, "", "add_edges_from"], [291, 10, 1, "", "add_node"], [291, 10, 1, "", "add_nodes_from"], [291, 10, 1, "", "add_weighted_edges_from"], [291, 11, 1, "", "adj"], [291, 10, 1, "", "adjacency"], [291, 14, 1, "", "adjlist_inner_dict_factory"], [291, 14, 1, "", "adjlist_outer_dict_factory"], [291, 10, 1, "", "clear"], [291, 10, 1, "", "clear_edges"], [291, 10, 1, "", "copy"], [291, 11, 1, "", "degree"], [291, 14, 1, "", "edge_attr_dict_factory"], [291, 10, 1, "", "edge_subgraph"], [291, 11, 1, "", "edges"], [291, 10, 1, "", "get_edge_data"], [291, 14, 1, "", "graph_attr_dict_factory"], [291, 14, 1, "", "graph_cache_factory"], [291, 11, 1, "", "graph_type"], [291, 10, 1, "", "has_edge"], [291, 10, 1, "", "has_node"], [291, 10, 1, "", "is_directed"], [291, 10, 1, "", "is_multigraph"], [291, 11, 1, "", "key"], [291, 11, 1, "", "name"], [291, 10, 1, "", "nbunch_iter"], [291, 10, 1, "", "neighbors"], [291, 14, 1, "", "node_attr_dict_factory"], [291, 14, 1, "", "node_dict_factory"], [291, 11, 1, "", "nodes"], [291, 10, 1, "", "number_of_edges"], [291, 10, 1, "", "number_of_nodes"], [291, 11, 1, "", "op"], [291, 10, 1, "", "order"], [291, 10, 1, "", "remove_edge"], [291, 10, 1, "", "remove_edges_from"], [291, 10, 1, "", "remove_node"], [291, 10, 1, "", "remove_nodes_from"], [291, 11, 1, "", "schema"], [291, 11, 1, "", "session"], [291, 11, 1, "", "session_id"], [291, 10, 1, "", "set_edge_data"], [291, 10, 1, "", "set_node_data"], [291, 11, 1, "", "signature"], [291, 10, 1, "", "size"], [291, 10, 1, "", "subgraph"], [291, 10, 1, "", "to_directed"], [291, 10, 1, "", "to_undirected"], [291, 10, 1, "", "to_undirected_class"], [291, 10, 1, "", "update"]], "graphscope.nx.builtin": [[156, 8, 1, "", "average_clustering"], [156, 8, 1, "", "average_shortest_path_length"], [156, 8, 1, "", "bfs_edges"], [156, 8, 1, "", "clustering"], [156, 8, 1, "", "degree_centrality"], [156, 8, 1, "", "eigenvector_centrality"], [156, 8, 1, "", "has_path"], [156, 8, 1, "", "hits"], [156, 8, 1, "", "in_degree_centrality"], [156, 8, 1, "", "k_core"], [156, 8, 1, "", "katz_centrality"], [156, 8, 1, "", "out_degree_centrality"], [156, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[157, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[158, 8, 1, "", "add_cycle"], [159, 8, 1, "", "add_path"], [160, 8, 1, "", "add_star"], [161, 8, 1, "", "all_neighbors"], [162, 8, 1, "", "common_neighbors"], [163, 8, 1, "", "create_empty_copy"], [164, 8, 1, "", "degree"], [165, 8, 1, "", "degree_histogram"], [166, 8, 1, "", "density"], [167, 8, 1, "", "edge_subgraph"], [168, 8, 1, "", "edges"], [169, 8, 1, "", "freeze"], [170, 8, 1, "", "induced_subgraph"], [171, 8, 1, "", "info"], [172, 8, 1, "", "is_directed"], [173, 8, 1, "", "is_empty"], [174, 8, 1, "", "is_frozen"], [175, 8, 1, "", "is_negatively_weighted"], [176, 8, 1, "", "is_weighted"], [177, 8, 1, "", "neighbors"], [178, 8, 1, "", "nodes"], [179, 8, 1, "", "nodes_with_selfloops"], [180, 8, 1, "", "non_edges"], [181, 8, 1, "", "non_neighbors"], [182, 8, 1, "", "number_of_edges"], [183, 8, 1, "", "number_of_nodes"], [184, 8, 1, "", "number_of_selfloops"], [185, 8, 1, "", "selfloop_edges"], [186, 8, 1, "", "subgraph"], [187, 8, 1, "", "to_directed"], [188, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[290, 13, 0, "-", "atlas"], [290, 13, 0, "-", "classic"], [290, 13, 0, "-", "community"], [290, 13, 0, "-", "degree_seq"], [290, 13, 0, "-", "directed"], [290, 13, 0, "-", "duplication"], [290, 13, 0, "-", "ego"], [290, 13, 0, "-", "expanders"], [290, 13, 0, "-", "geometric"], [290, 13, 0, "-", "harary_graph"], [290, 13, 0, "-", "intersection"], [290, 13, 0, "-", "joint_degree_seq"], [290, 13, 0, "-", "mycielski"], [290, 13, 0, "-", "nonisomorphic_trees"], [290, 13, 0, "-", "small"], [290, 13, 0, "-", "social"], [290, 13, 0, "-", "spectral_graph_forge"], [290, 13, 0, "-", "sudoku"], [290, 13, 0, "-", "trees"], [290, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[189, 8, 1, "", "graph_atlas"], [190, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[191, 8, 1, "", "balanced_tree"], [192, 8, 1, "", "barbell_graph"], [193, 8, 1, "", "binomial_tree"], [194, 8, 1, "", "circulant_graph"], [195, 8, 1, "", "circular_ladder_graph"], [196, 8, 1, "", "complete_graph"], [197, 8, 1, "", "complete_multipartite_graph"], [198, 8, 1, "", "cycle_graph"], [199, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [200, 8, 1, "", "empty_graph"], [201, 8, 1, "", "full_rary_tree"], [202, 8, 1, "", "ladder_graph"], [203, 8, 1, "", "lollipop_graph"], [204, 8, 1, "", "null_graph"], [205, 8, 1, "", "path_graph"], [206, 8, 1, "", "star_graph"], [207, 8, 1, "", "trivial_graph"], [208, 8, 1, "", "turan_graph"], [209, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[210, 8, 1, "", "LFR_benchmark_graph"], [211, 8, 1, "", "caveman_graph"], [212, 8, 1, "", "connected_caveman_graph"], [213, 8, 1, "", "gaussian_random_partition_graph"], [214, 8, 1, "", "planted_partition_graph"], [215, 8, 1, "", "random_partition_graph"], [216, 8, 1, "", "relaxed_caveman_graph"], [217, 8, 1, "", "ring_of_cliques"], [218, 8, 1, "", "stochastic_block_model"], [219, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[220, 8, 1, "", "configuration_model"], [221, 8, 1, "", "degree_sequence_tree"], [222, 8, 1, "", "directed_configuration_model"], [223, 8, 1, "", "directed_havel_hakimi_graph"], [224, 8, 1, "", "expected_degree_graph"], [225, 8, 1, "", "havel_hakimi_graph"], [226, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[227, 8, 1, "", "gn_graph"], [228, 8, 1, "", "gnc_graph"], [229, 8, 1, "", "gnr_graph"], [230, 8, 1, "", "random_k_out_graph"], [231, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[232, 8, 1, "", "duplication_divergence_graph"], [233, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[234, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[235, 8, 1, "", "chordal_cycle_graph"], [236, 8, 1, "", "margulis_gabber_galil_graph"], [237, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[238, 8, 1, "", "geographical_threshold_graph"], [239, 8, 1, "", "random_geometric_graph"], [240, 8, 1, "", "soft_random_geometric_graph"], [241, 8, 1, "", "thresholded_random_geometric_graph"], [242, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[243, 8, 1, "", "hkn_harary_graph"], [244, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[245, 8, 1, "", "general_random_intersection_graph"], [246, 8, 1, "", "k_random_intersection_graph"], [247, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[248, 8, 1, "", "directed_joint_degree_graph"], [249, 8, 1, "", "is_valid_directed_joint_degree"], [250, 8, 1, "", "is_valid_joint_degree"], [251, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[252, 8, 1, "", "mycielski_graph"], [253, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[254, 8, 1, "", "nonisomorphic_trees"], [255, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[256, 8, 1, "", "LCF_graph"], [257, 8, 1, "", "bull_graph"], [258, 8, 1, "", "chvatal_graph"], [259, 8, 1, "", "cubical_graph"], [260, 8, 1, "", "desargues_graph"], [261, 8, 1, "", "diamond_graph"], [262, 8, 1, "", "dodecahedral_graph"], [263, 8, 1, "", "frucht_graph"], [264, 8, 1, "", "heawood_graph"], [265, 8, 1, "", "house_graph"], [266, 8, 1, "", "house_x_graph"], [267, 8, 1, "", "icosahedral_graph"], [268, 8, 1, "", "krackhardt_kite_graph"], [269, 8, 1, "", "make_small_graph"], [270, 8, 1, "", "moebius_kantor_graph"], [271, 8, 1, "", "octahedral_graph"], [272, 8, 1, "", "pappus_graph"], [273, 8, 1, "", "petersen_graph"], [274, 8, 1, "", "sedgewick_maze_graph"], [275, 8, 1, "", "tetrahedral_graph"], [276, 8, 1, "", "truncated_cube_graph"], [277, 8, 1, "", "truncated_tetrahedron_graph"], [278, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[279, 8, 1, "", "davis_southern_women_graph"], [280, 8, 1, "", "florentine_families_graph"], [281, 8, 1, "", "karate_club_graph"], [282, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[283, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[284, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[285, 8, 1, "", "prefix_tree"], [286, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[287, 8, 1, "", "triad_graph"]], "networkx.generators": [[290, 13, 0, "-", "internet_as_graphs"], [290, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[288, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[289, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 62, 70, 151, 304, 306], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 62, 139, 156, 306, 308], "all": [0, 31, 32, 36, 40], "pair": 0, "shortest": 0, "path": [0, 55, 57, 59], "length": 0, "attribut": [0, 20, 140, 157], "assort": 0, "averag": 0, "degre": [0, 164, 290], "connect": [0, 29, 30, 52, 58, 304], "between": [0, 55, 300], "central": 0, "breadth": 0, "first": [0, 48], "search": 0, "cdlp": 0, "close": 0, "cluster": [0, 27, 30, 33, 40, 48, 68], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": 0, "katz": 0, "k": 0, "core": 0, "shell": [0, 52], "label": [0, 57, 59, 70, 140, 303, 324], "propag": 0, "lcc": 0, "pagerank": 0, "sampl": [0, 57, 66, 76, 139, 143, 145, 148, 151], "singl": [0, 45], "sourc": [0, 31, 32, 57, 86, 140, 146, 149, 150], "voterank": 0, "wcc": 0, "custom": [1, 23, 27, 51, 304], "aggreg": [1, 55, 57, 59, 63], "local": [1, 7, 32, 36, 38, 40, 50, 51, 57, 64, 65, 69, 303, 304], "vertex": [1, 10, 24, 59, 70, 88, 297, 303, 324], "map": [1, 41, 300], "support": [1, 11, 23, 53, 57, 62], "deploy": [2, 27, 38, 47, 48], "gae": [2, 34, 73, 308, 312], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 48, 304], "onli": [2, 37], "python": [2, 15, 18, 31, 35, 36, 52, 58, 62, 80, 296, 304, 308, 316], "sdk": [2, 16, 34, 58, 84], "helm": [2, 29], "execut": [2, 34, 71], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 44, 45, 47, 55, 59, 62, 63, 66, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 139, 141, 142, 143, 144, 145, 147, 151, 153, 155, 157, 290, 291, 293, 294, 300, 302, 303, 304, 305, 306, 312], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 44, 47, 62, 71, 72, 74, 79, 81, 82, 312], "uninstal": [2, 29, 304], "design": [3, 9, 34, 49, 62, 63, 71, 149, 303], "engin": [3, 4, 7, 9, 10, 12, 24, 31, 36, 47, 51, 62, 64, 65, 69, 71, 79, 81, 303, 312], "dev": [4, 32, 36, 40, 50, 64], "test": [4, 36, 37, 40, 50, 64, 146], "setup": [4, 32], "understand": 4, "codebas": 4, "make": [4, 20], "modif": 4, "build": [4, 32, 36, 40, 50, 64, 86, 139, 146, 304, 324], "faq": [5, 55], "program": [6, 12, 14, 34, 45, 149], "model": [6, 12, 14, 15, 16, 17, 24, 34, 63, 68, 69, 73, 76, 139, 147, 151, 303, 304], "flash": [6, 15, 73], "motiv": [6, 9, 49, 71, 303], "The": [6, 19, 30, 49, 302], "overview": [6, 9, 12, 47, 147, 304], "api": [6, 9, 12, 19, 20, 81, 84, 85, 140, 151, 292, 296, 320], "strong": 6, "express": [6, 57, 59], "implement": [6, 15, 17, 37, 149, 303], "architectur": [6, 12, 49, 300], "optim": [6, 13, 55], "get": [7, 37, 43, 51, 65, 72, 146, 301], "start": [7, 43, 50, 51, 59, 65, 72, 151, 301], "instal": [7, 27, 29, 30, 31, 32, 36, 37, 47, 51, 64, 65, 146, 304, 311], "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 40, 45, 51, 65, 146], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 40, 45, 47, 51, 65, 71, 74, 76, 77, 78, 81, 84, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 300, 302, 312, 316, 320, 321], "what": [7, 14, 51, 55, 65, 74, 76, 77], "": [7, 51, 55, 65, 81], "next": [7, 51, 65, 77], "guid": [8, 35, 36, 56, 67, 304, 308, 309], "exampl": [8, 17, 22, 23, 56, 67, 308, 309], "ingress": [9, 73], "increment": [9, 12], "messag": [9, 63], "driven": 9, "differenti": 9, "flexibl": [9, 34], "memoiz": 9, "distribut": [9, 45, 141, 149], "runtim": [9, 34, 149], "kei": [10, 55, 62, 130], "concept": [10, 303], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 59, 70, 157, 168, 293, 303, 324], "cut": [10, 303], "vertic": [10, 59, 70, 324], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 288, 289, 292], "compat": [11, 55], "convert": 11, "nx": [11, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287], "oper": [11, 20, 28, 53, 59, 126, 127, 128, 129, 130, 131, 149, 295], "storag": [12, 33, 34, 47, 71, 300, 303], "layer": [12, 71], "grape": [12, 17, 73, 86], "ffi": 12, "comput": [12, 45, 47, 71, 303], "applic": [12, 15, 22, 23, 59, 71, 306], "perform": [13, 19, 34, 55, 62, 79], "tune": 13, "memori": [13, 70, 305], "footprint": 13, "properti": [13, 53, 55, 57, 59, 70, 303, 324], "data": [13, 45, 48, 53, 55, 70, 140, 147, 150, 151, 302, 304], "structur": [13, 53, 86, 157], "usag": [13, 55, 70], "estim": [13, 299], "pie": [14, 16, 17, 18, 73, 84, 314], "i": [14, 57, 74, 76, 77], "workflow": [14, 62, 300], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 61, 68, 69, 80], "develop": [15, 16, 17, 18, 22, 23, 36, 47, 139, 151, 304, 308], "your": [15, 16, 17, 18, 22, 37, 48, 69, 70, 139, 149, 308], "c": [15, 16, 35, 308], "defin": [15, 16, 69, 149, 300], "A": [15, 47], "function": [15, 18, 82, 84, 139, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 298], "integr": [15, 37, 45, 150], "client": [15, 27, 30, 36, 141], "step": [16, 57, 59, 76], "1": [16, 41, 140, 141, 143, 151], "context": [16, 81, 83, 297], "class": [16, 149, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "2": [16, 41, 140, 141, 151, 304], "3": [16, 41, 140, 141, 151, 304], "packag": [16, 31, 32, 146], "4": [16, 41, 140, 151], "gar": 16, "file": [16, 27, 31, 150, 302], "github": [16, 17, 25, 37], "templat": [16, 17], "java": [17, 35, 58, 61, 87, 304, 308], "jar": 17, "own": [17, 18, 22, 48, 70, 139, 149], "prepar": [17, 27, 30, 40, 151], "jdk": [17, 86], "submit": [17, 22, 23, 37, 39], "javasdk": 17, "write": [18, 304], "pregel": [18, 24, 84, 314], "us": [18, 20, 27, 32, 48, 55, 62, 77, 146, 149, 151, 297, 300, 304, 305], "math": [18, 314], "h": [18, 314], "netowrkx": [19, 20], "how": [19, 37, 39, 40, 46, 55, 64, 139, 149, 151, 312], "doe": 19, "analysi": [19, 71], "from": [19, 20, 31, 32, 33, 47, 59, 70, 86, 146, 300, 304], "displai": 19, "speed": 19, "up": [19, 27, 30, 33], "over": 19, "creat": [20, 33, 37, 68], "an": [20, 149], "empti": 20, "ad": [20, 70], "node": [20, 63, 68, 69, 157, 178, 304], "examin": 20, "element": 20, "remov": [20, 48], "constructor": 20, "access": 20, "neighbor": [20, 177], "deepcopi": 20, "subgraph": [20, 55, 57, 63, 66, 76, 186], "edge_subgraph": [20, 167], "copi": [20, 31], "direct": [20, 227, 228, 229, 230, 231, 290], "analyz": 20, "object": [20, 82, 83, 141, 153, 295, 298], "transform": [20, 294], "builtin": [21, 82, 156, 295], "giraph": 22, "try": [22, 151], "some": [22, 59], "app": [22, 23, 81, 82, 90], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 30, 48, 304], "along": 23, "spark": 23, "includ": 23, "depend": [23, 31, 32, 146], "toward": 23, "centric": [24, 63], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 37], "discuss": [25, 37], "cloud": [26, 62, 140], "k8": [27, 68, 312], "kubernet": [27, 30, 33, 38, 40, 68, 316, 321], "launch": [27, 69], "default": 27, "paramet": [27, 70], "frequent": [27, 42], "imag": [27, 32, 40, 146, 304], "uri": 27, "specifi": [27, 70], "number": 27, "worker": [27, 81], "provid": 27, "kubeconfig": 27, "other": [27, 48, 70, 150], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 30, 33], "coordin": [28, 36], "configur": [28, 29, 48, 51, 152, 304], "releas": [29, 37], "offlin": [29, 31, 304], "exist": 30, "vineyard": [30, 50, 73, 305], "lifecycl": 30, "load": [30, 59, 68, 69, 70, 300, 302, 304, 305], "dataset": [30, 70, 304], "anoth": 30, "session": [30, 68, 137, 298], "environ": [31, 32, 36, 40, 50, 64], "wheel": [31, 146, 316], "download": 31, "destin": 31, "extract": [31, 59], "them": [31, 70], "locat": 31, "basic": [31, 59, 140], "gcc": 31, "g": [31, 132], "third": 31, "parti": 31, "stabl": 32, "version": 32, "preview": 32, "linux": [32, 316], "maco": [32, 316], "persist": [33, 304], "pv": 33, "pvc": 33, "store": [33, 50, 304], "retor": 33, "framework": [34, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131], "multi": [34, 297], "languag": [34, 145], "high": [34, 62, 71], "librari": [34, 62, 146], "code": [35, 37, 149, 310], "style": [35, 37, 292, 303], "rust": 35, "script": 35, "linter": 35, "checker": 35, "contain": [36, 64], "dep": [36, 64], "target": [36, 40, 70], "compon": 36, "individu": 36, "contribut": 37, "conduct": 37, "commun": [37, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 290], "report": [37, 46], "bug": [37, 46], "request": [37, 39], "featur": [37, 62, 302], "improv": 37, "document": 37, "chang": 37, "pre": 37, "commit": [37, 304], "minor": 37, "fix": 37, "fork": 37, "branch": [37, 57], "suit": 37, "format": [37, 140, 302, 304], "right": 37, "keep": 37, "pull": [37, 39], "updat": [37, 311], "merg": 37, "pr": 37, "maintain": 37, "ship": 37, "review": 37, "continu": 37, "debug": 38, "find": [38, 312], "log": [38, 300, 304, 312], "command": [38, 311], "techniqu": [38, 70], "introduct": [41, 57, 143], "arrowfrag": 41, "0": 41, "\u672f\u8bed": 41, "\u8f7d\u56fe": [41, 324], "\u521d\u59cb\u5316partiton": 41, "\u6784\u5efa\u539f\u59cbarrow": 41, "tabl": [41, 47, 140], "shuffl": 41, "vtabl": 41, "\u6784\u5efavertex": 41, "basicarrowvertexmapbuild": 41, "5": [41, 140], "\u6784\u5efafragment\u51c6\u5907": 41, "\u5904\u7406edg": 41, "basicevfragmentload": 41, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 41, "basicarrowfragmentbuild": 41, "6": 41, "fragment\u6784\u5efa": 41, "\u8bbf\u95eefragment": 41, "\u8bbf\u95ee\u9876\u70b9": 41, "\u8bbf\u95ee\u5185\u90e8\u70b9": 41, "\u8303\u56f4\u5916\u90e8\u70b9": 41, "\u8bbf\u95ee\u5168\u90e8\u70b9": 41, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 41, "\u8bbf\u95ee\u8fb9": 41, "\u8bbf\u95ee\u51fa\u8fb9": 41, "\u8bbf\u95ee\u5165\u8fb9": 41, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 41, "ask": 42, "question": 42, "gle": [43, 63, 309, 312], "workload": [44, 74, 75, 76, 78, 300], "interact": [44, 47, 51, 72, 75, 79, 154, 312], "queri": [44, 49, 55, 59, 71, 72, 142, 154, 304], "learn": [44, 47, 63, 64, 65, 69, 71, 72, 76, 78, 139, 147, 155, 312], "scientist": 45, "challeng": [45, 74, 76], "handl": [45, 78], "solut": 45, "machin": [45, 69], "pydata": 45, "ecosystem": [45, 54, 60], "One": [47, 72, 297], "stop": [47, 72], "larg": [47, 70, 74, 76], "scale": [47, 307], "system": [47, 78, 150, 152], "alibaba": [47, 140], "troubleshoot": [47, 304], "util": [47, 311], "refer": [47, 81, 85, 87, 296, 303], "indic": 47, "standalon": 48, "gie": [48, 49, 50, 51, 52, 54, 55, 58, 60, 73, 312], "servic": [48, 50, 304], "process": [49, 69, 72, 78, 139, 304], "manual": [50, 70], "instanc": 51, "cypher": [52, 53, 62, 75], "via": [52, 58], "driver": 52, "type": [53, 70, 78, 84, 140, 291], "construct": [53, 151], "claus": 53, "neo4j": [54, 75], "For": [54, 60, 303], "tinkerpop": [54, 55, 60, 75, 322], "gremlin": [55, 57, 58, 59, 62, 75, 135, 322], "constraint": 55, "differ": [55, 297], "inner": 55, "id": [55, 57, 59, 303], "expand": [55, 57, 235, 236, 237, 290], "filter": [55, 57, 59], "like": 55, "sql": 55, "group": [55, 57, 59], "multipl": [55, 59, 70], "valu": [55, 57, 59], "appropri": 55, "index": 55, "standard": [57, 302], "v": 57, "e": 57, "out": [57, 59, 151], "inE": [57, 59], "both": [57, 59], "outv": [57, 59], "inv": [57, 59], "otherv": [57, 59], "bothv": [57, 59], "hasid": [57, 59], "haslabel": 57, "ha": 57, "hasnot": 57, "where": [57, 59], "travers": [57, 59, 62, 66, 75, 144], "predic": 57, "dedup": [57, 59], "project": [57, 59, 86], "constant": [57, 59], "valuemap": [57, 59], "elementmap": 57, "select": [57, 59], "count": 57, "fold": [57, 59], "sum": [57, 59], "min": [57, 59], "max": [57, 59], "mean": [57, 59], "groupcount": [57, 59], "h3": 57, "order": [57, 59, 303], "statist": 57, "limit": [57, 59, 77, 304], "coin": 57, "union": 57, "match": [57, 59, 75], "ident": 57, "unfold": 57, "syntact": [57, 59], "sugar": [57, 59], "pathexpand": 57, "endv": 57, "To": 57, "Will": 57, "Not": 57, "repeat": 57, "sideeffect": 57, "consol": [58, 322], "ldbc": 59, "retriev": [59, 303], "appli": [59, 76], "real": 59, "expans": 59, "mani": 59, "point": 59, "after": 59, "pattern": [59, 75], "relat": [59, 70, 300], "syntax": 59, "complex": 59, "bi2": 59, "bi3": 59, "bi4": 59, "left": 59, "part": 59, "bi11": 59, "bi14": 59, "apach": [60, 322], "user": [61, 80, 140, 308, 309], "eas": 62, "interfac": [62, 149, 150, 303], "extens": 62, "gnn": [62, 68, 76, 151, 318], "train": [62, 68, 69, 76, 139], "infer": 62, "nativ": 62, "across": 62, "orchestr": 62, "paradigm": [63, 76], "egograph": 63, "base": 63, "pass": 63, "pipelin": 63, "docker": [64, 146, 316], "neighborhood": 66, "neg": [66, 148], "gsl": [66, 145], "classif": [68, 69], "neural": [68, 76], "network": [68, 76, 290], "egographsag": 69, "advanc": 70, "deduc": 70, "when": 70, "ambigu": 70, "put": [70, 140], "togeth": [70, 140], "panda": [70, 324], "numpi": [70, 324], "loader": [70, 153, 324], "variant": 70, "tip": 70, "reduc": 70, "consumpt": 70, "unifi": [71, 303], "platform": 71, "disaggreg": 71, "divers": 71, "bi": 71, "qp": 71, "task": 72, "quick": [72, 151], "glossari": 73, "gart": [73, 300], "grin": [73, 303], "graphar": [73, 302], "groot": [73, 304, 312], "gum": 73, "maxgraph": 73, "deprec": 73, "v6d": 73, "gaia": 73, "pegasu": 73, "can": [74, 76], "do": [74, 76], "typic": 76, "introduc": 77, "why": 77, "ar": 77, "case": 77, "posit": 78, "compar": 78, "databas": 78, "variou": 78, "benchmark": 79, "result": [79, 297], "gpu": 79, "reproduc": 79, "fragment": 81, "appasset": 82, "javaapp": 82, "cython": 84, "flex": 85, "about": 86, "javadoc": 87, "declar": 89, "load_app": 90, "dag_util": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125], "add_column": 91, "add_labels_to_graph": 92, "arrow_to_dynam": 93, "bind_app": 94, "clear_edg": 95, "clear_graph": 96, "context_to_datafram": 97, "context_to_numpi": 98, "copy_graph": 99, "create_app": 100, "create_graph": 101, "create_graph_view": 102, "create_load": 103, "create_subgraph": 104, "create_unload_op": 105, "dynamic_to_arrow": 106, "get_context_data": 107, "graph_to_datafram": 108, "graph_to_numpi": 109, "gremlin_to_subgraph": 110, "modify_edg": 111, "modify_vertic": 112, "output": 113, "project_arrow_property_graph": 114, "project_to_simpl": 115, "report_graph": 116, "run_app": 117, "to_data_sink": 118, "to_direct": [119, 187], "to_undirect": [120, 188], "to_vineyard_datafram": 121, "to_vineyard_tensor": 122, "unload_app": 123, "unload_context": 124, "unload_graph": 125, "__init__": 126, "as_op_def": 127, "eval": 128, "evalu": 129, "signatur": 131, "get_default_sess": 133, "graphlearn": 134, "has_default_sess": 136, "set_opt": 138, "encod": [139, 147], "loss": 139, "weight": 140, "maxcomput": 140, "describ": 141, "topologi": 141, "stand": 141, "alon": 141, "mode": 141, "server": 141, "pip": 146, "tensorflow": 146, "git": 146, "compil": [146, 149], "new": 149, "clone": 149, "regist": [149, 150], "bytestreamaccessfil": 150, "structuredaccessfil": 150, "writablefil": 150, "scheme": 150, "gl": 151, "self": 157, "loop": 157, "freez": [157, 169], "add_cycl": 158, "add_path": 159, "add_star": 160, "all_neighbor": 161, "common_neighbor": 162, "create_empty_copi": 163, "degree_histogram": 165, "densiti": 166, "induced_subgraph": 170, "info": 171, "is_direct": 172, "is_empti": 173, "is_frozen": 174, "is_negatively_weight": 175, "is_weight": 176, "nodes_with_selfloop": 179, "non_edg": 180, "non_neighbor": 181, "number_of_edg": 182, "number_of_nod": 183, "number_of_selfloop": 184, "selfloop_edg": 185, "gener": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "atla": [189, 190, 290], "graph_atla": 189, "graph_atlas_g": 190, "classic": [191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 290], "balanced_tre": 191, "barbell_graph": 192, "binomial_tre": 193, "circulant_graph": 194, "circular_ladder_graph": 195, "complete_graph": 196, "complete_multipartite_graph": 197, "cycle_graph": 198, "dorogovtsev_goltsev_mendes_graph": 199, "empty_graph": 200, "full_rary_tre": 201, "ladder_graph": 202, "lollipop_graph": 203, "null_graph": 204, "path_graph": 205, "star_graph": 206, "trivial_graph": 207, "turan_graph": 208, "wheel_graph": 209, "lfr_benchmark_graph": 210, "caveman_graph": 211, "connected_caveman_graph": 212, "gaussian_random_partition_graph": 213, "planted_partition_graph": 214, "random_partition_graph": 215, "relaxed_caveman_graph": 216, "ring_of_cliqu": 217, "stochastic_block_model": 218, "windmill_graph": 219, "degree_seq": [220, 221, 222, 223, 224, 225, 226], "configuration_model": 220, "degree_sequence_tre": 221, "directed_configuration_model": 222, "directed_havel_hakimi_graph": 223, "expected_degree_graph": 224, "havel_hakimi_graph": 225, "random_degree_sequence_graph": 226, "gn_graph": 227, "gnc_graph": 228, "gnr_graph": 229, "random_k_out_graph": 230, "scale_free_graph": 231, "duplic": [232, 233, 290], "duplication_divergence_graph": 232, "partial_duplication_graph": 233, "ego": [234, 290], "ego_graph": 234, "chordal_cycle_graph": 235, "margulis_gabber_galil_graph": 236, "paley_graph": 237, "geometr": [238, 239, 240, 241, 242, 290], "geographical_threshold_graph": 238, "random_geometric_graph": 239, "soft_random_geometric_graph": 240, "thresholded_random_geometric_graph": 241, "waxman_graph": 242, "harary_graph": [243, 244], "hkn_harary_graph": 243, "hnm_harary_graph": 244, "intersect": [245, 246, 247, 290], "general_random_intersection_graph": 245, "k_random_intersection_graph": 246, "uniform_random_intersection_graph": 247, "joint_degree_seq": [248, 249, 250, 251], "directed_joint_degree_graph": 248, "is_valid_directed_joint_degre": 249, "is_valid_joint_degre": 250, "joint_degree_graph": 251, "mycielski": [252, 253, 290], "mycielski_graph": 252, "mycielskian": 253, "nonisomorphic_tre": [254, 255], "number_of_nonisomorphic_tre": 255, "small": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 290], "lcf_graph": 256, "bull_graph": 257, "chvatal_graph": 258, "cubical_graph": 259, "desargues_graph": 260, "diamond_graph": 261, "dodecahedral_graph": 262, "frucht_graph": 263, "heawood_graph": 264, "house_graph": 265, "house_x_graph": 266, "icosahedral_graph": 267, "krackhardt_kite_graph": 268, "make_small_graph": 269, "moebius_kantor_graph": 270, "octahedral_graph": 271, "pappus_graph": 272, "petersen_graph": 273, "sedgewick_maze_graph": 274, "tetrahedral_graph": 275, "truncated_cube_graph": 276, "truncated_tetrahedron_graph": 277, "tutte_graph": 278, "social": [279, 280, 281, 282, 290], "davis_southern_women_graph": 279, "florentine_families_graph": 280, "karate_club_graph": 281, "les_miserables_graph": 282, "spectral_graph_forg": 283, "sudoku": [284, 290], "sudoku_graph": 284, "tree": [285, 286, 290], "prefix_tre": 285, "random_tre": 286, "triad": [287, 290], "triad_graph": 287, "internet_as_graph": 288, "random_internet_as_graph": 288, "stochast": [289, 290], "stochastic_graph": 289, "diverg": 290, "sequenc": 290, "AS": 290, "spectral": 290, "non": 290, "isomorph": 290, "joint": 290, "harari": 290, "digraph": 291, "read": 293, "list": [293, 303], "adjac": 293, "selector": 297, "tensorcontext": 297, "vertexdatacontext": 297, "labeledvertexdatacontext": 297, "vertexpropertycontext": 297, "labeledvertexpropertycontext": 297, "method": 297, "dimension": 297, "rang": 297, "resourc": 299, "bridg": 300, "gap": 300, "oltp": 300, "inform": 302, "archiv": 302, "predefin": 303, "macro": 303, "partit": [303, 304, 307], "strategi": 303, "guidelin": 303, "detail": 303, "handler": 303, "arrai": 303, "iter": 303, "master": 303, "mirror": 303, "complet": 303, "natur": 303, "trait": 303, "known": 304, "artifacthub": 304, "directori": 304, "common": 304, "modifi": 304, "j": 304, "import": 304, "realtim": 304, "restart": 304, "destroi": 304, "view": 304, "In": 305, "immut": 305, "bind": 306, "repartit": 307, "fennel": 307, "xtrapulp": 307, "hybrid": 307, "error": 310, "line": 311, "gsctl": 311, "monitor": 313, "\u56fe\u5206\u6790\u5f15\u64ce": 314, "\u5185\u7f6e\u7b97\u6cd5": 314, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 314, "\u4f7f\u7528": 314, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 314, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 314, "\u4e2d\u7684\u51fd\u6570": 314, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 314, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 314, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 314, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 314, "\u90e8\u7f72": 315, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 315, "\u5728aw": 315, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 315, "\u672c\u5730\u90e8\u7f72graphscop": 315, "\u5f00\u53d1\u8005\u6307\u5357": 316, "\u57fa\u4e8e": [316, 321], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 316, "\u6784\u5efa": 316, "\u4ee3\u7801\u98ce\u683c": 316, "\u5e38\u89c1\u95ee\u9898": 317, "\u5feb\u901f\u4e0a\u624b": 318, "\u793a\u4f8b": 318, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 318, "\u521b\u5efa\u4f1a\u8bdd": 318, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 318, "\u56fe\u5206\u6790": 318, "\u56fe\u795e\u7ecf\u7f51\u7edc": 318, "\u5173\u95ed\u4f1a\u8bdd": 318, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 319, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 319, "\u6295\u5f71": 319, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 319, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 319, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 320, "\u76ee\u5f55": [320, 325], "\u53c2\u8003": 320, "\u7d22\u5f15": 320, "\u5b89\u88c5": 321, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 321, "\u5ba2\u6237\u7aef": 321, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 322, "\u5229\u7528python": 322, "\u8fde\u63a5graphscop": 322, "\u5229\u7528java": 322, "\u5f00\u53d1\u63a7\u5236\u53f0": 322, "gremlin\u7f16\u7a0b\u5165\u95e8": 322, "101": 322, "\u56fe\u6570\u636e\u6a21\u578b": 322, "\u67e5\u8be2\u8bed\u8a00": 322, "\u4e00\u4e2a\u4f8b\u5b50": 322, "gremlin\u517c\u5bb9\u6027": 322, "\u5bf9\u6bd4tinkerpop": 322, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 322, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 322, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 322, "\u5df2\u77e5\u9650\u5236": 322, "\u56fe\u5b66\u4e60\u5f15\u64ce": 323, "\u56fe\u5b66\u4e60\u6a21\u578b": 323, "\u6570\u636e\u6a21\u578b": 323, "\u7f16\u7801\u5668": 323, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 323, "\u91c7\u6837": 323, "\u56fe\u6570\u636e\u6d41": 323, "\u6a21\u578b": 323, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 323, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 324, "\u624b\u52a8\u914d\u7f6e\u56fe": 324, "vid_field": 324, "src_label": 324, "dst_label": 324, "src_field": 324, "dst_field": 324, "\u9ad8\u7ea7\u7528\u6cd5": 324, "\u6ca1\u6709\u6b67\u4e49\u65f6": 324, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 324, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 324, "\u591a\u79cd\u8fb9\u5173\u7cfb": 324, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 324, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 324, "\u5b8c\u6574\u7684\u793a\u4f8b": 324, "\u4ece": 324, "\u6216": 324, "\u4e2d\u8f7d\u56fe": 324, "\u7684\u53d8\u79cd": 324, "\u5165\u95e8\u6559\u7a0b": 325}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "CDLP": [[0, "cdlp"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LCC": [[0, "lcc"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [48, "prerequisites"], [304, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null]], "Dev and Test": [[4, "dev-and-test"], [50, "dev-and-test"], [64, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [71, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [47, null], [147, "overview"], [304, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [51, "getting-started"], [65, "getting-started"], [72, "getting-started"], [301, "getting-started"]], "Installation": [[7, "installation"], [29, "installation"], [51, "installation"], [65, "installation"], [304, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [51, "whats-the-next"], [65, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [56, "guide-and-examples"], [67, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with Github Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with Github Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetowrkX APIs": [[19, "tutorial-graph-algorithms-with-netowrkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetowrkX APIs": [[20, "tutorial-graph-operations-with-netowrkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"], [70, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [37, "slack"]], "Discussion on Github": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [40, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope Operator": [[28, "deploy-graphscope-operator"]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Deploy GraphScope with helm": [[29, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Configuration": [[29, "configuration"]], "Offline Installation": [[29, "offline-installation"]], "Deploy with Existing Vineyard Cluster": [[30, "deploy-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[30, "cleaning-up"]], "Install GraphScope in offline environment": [[31, "install-graphscope-in-offline-environment"]], "Install from wheels": [[31, "install-from-wheels"]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[32, "install-graphscope-on-local"]], "Install from packages": [[32, "install-from-packages"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[32, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[33, "retore-graphs-from-the-pvc"]], "Clean up": [[33, "clean-up"]], "Design of GAE": [[34, "design-of-gae"]], "Graph Storage": [[34, "graph-storage"]], "Execution Framework": [[34, "execution-framework"]], "Flexible programming models": [[34, "flexible-programming-models"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "High-performance runtime": [[34, "high-performance-runtime"]], "Algorithm Library": [[34, "algorithm-library"]], "Code Style Guide": [[35, "code-style-guide"]], "C++ Style": [[35, "c-style"]], "Python Style": [[35, "python-style"]], "Rust Style": [[35, "rust-style"]], "Java Style": [[35, "java-style"]], "Script Style": [[35, "script-style"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "Development Guide": [[36, "development-guide"]], "Dev Environment": [[36, "dev-environment"], [40, "dev-environment"], [50, "dev-environment"], [64, "dev-environment"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Install deps on local": [[36, "install-deps-on-local"], [64, "install-deps-on-local"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [40, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Python Client": [[36, "build-python-client"]], "How to Contribute": [[37, "how-to-contribute"]], "Code of Conduct": [[37, "code-of-conduct"]], "Community": [[37, "community"], [290, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[37, "github-discussion"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Requesting Features": [[37, "requesting-features"]], "Improving Documentation": [[37, "improving-documentation"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[37, "install-pre-commit"]], "Minor Fixes": [[37, "minor-fixes"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Debugging on local deployment": [[38, "debugging-on-local-deployment"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Debugging Techniques": [[38, "debugging-techniques"]], "How to Submit Pull-requests": [[39, "how-to-submit-pull-requests"]], "How to Test": [[40, "how-to-test"], [64, "how-to-test"]], "Test GraphScope on local": [[40, "test-graphscope-on-local"]], "Run tests": [[40, "run-tests"], [40, "id1"]], "Test GraphScope on Kubernetes cluster": [[40, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[40, "build-images"]], "Introduction to ArrowFragment": [[41, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[41, "id1"]], "1. \u8f7d\u56fe": [[41, "id2"]], "1.1 \u521d\u59cb\u5316partitoner": [[41, "partitoner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[41, "arrow-table"]], "1.3. Shuffle vtable": [[41, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[41, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[41, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[41, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[41, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[41, "id3"]], "2. \u8bbf\u95eeFragment": [[41, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[41, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[41, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[41, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[41, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[41, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[41, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[41, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[41, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[41, "id13"]], "Frequently Asked Questions": [[42, "frequently-asked-questions"]], "Getting Started for GLE": [[43, "getting-started-for-gle"]], "Graph Workloads": [[44, "graph-workloads"]], "Graph Analytics": [[44, "graph-analytics"]], "Graph Interactive Query": [[44, "graph-interactive-query"]], "Graph Learning": [[44, "graph-learning"], [155, "graph-learning"]], "GraphScope for Data Scientists": [[45, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[45, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[45, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[45, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[45, "integration-with-pydata-ecosystem"]], "How to Report Bugs": [[46, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[47, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[47, null]], "Graph Analytical Engine": [[47, null], [79, "graph-analytical-engine"]], "Graph Interactive Engine": [[47, null], [79, "graph-interactive-engine"]], "Graph Learning Engine": [[47, null]], "Storage Engine": [[47, null]], "Troubleshooting & Utilities": [[47, null]], "Development": [[47, null]], "Reference": [[47, null], [303, "reference"]], "Indices and tables": [[47, "indices-and-tables"]], "Standalone Deployment for GIE": [[48, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[48, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[48, "remove-the-gie-service"]], "Using Your Own Data": [[48, "using-your-own-data"]], "Deploy on a Cluster": [[48, "deploy-on-a-cluster"]], "Other Useful Configurations": [[48, "other-useful-configurations"]], "Design of GIE": [[49, "design-of-gie"]], "The Motivations": [[49, "the-motivations"]], "The Architecture": [[49, "the-architecture"]], "Query Processing": [[49, "query-processing"]], "Build GIE with Vineyard Store on Local": [[50, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[50, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[50, "manually-start-the-gie-services"]], "Running GraphScope Interactive Engine on Local": [[51, "running-graphscope-interactive-engine-on-local"]], "Customize Configurations for GIE instance": [[51, "customize-configurations-for-gie-instance"]], "GIE for Cypher": [[52, "gie-for-cypher"]], "Connecting via Python Driver": [[52, "connecting-via-python-driver"]], "Connecting via Cypher-Shell": [[52, "connecting-via-cypher-shell"]], "Cypher Support": [[53, "cypher-support"]], "Data Types": [[53, "data-types"]], "Property Types": [[53, "property-types"]], "Structural types": [[53, "structural-types"]], "Constructed Types": [[53, "constructed-types"]], "Operators": [[53, "operators"]], "Clause": [[53, "clause"]], "Neo4j Ecosystem": [[54, "neo4j-ecosystem"]], "GIE For Tinkerpop Ecosystem": [[54, null], [60, null]], "FAQs for GIE Gremlin Usage": [[55, "faqs-for-gie-gremlin-usage"]], "Compatibility with TinkerPop": [[55, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[55, "property-graph-constraints"]], "What\u2019s the difference between Inner ID and Property ID ?": [[55, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[55, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[55, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[55, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[55, "group-by-multiple-keys"]], "group by multiple values:": [[55, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[55, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[55, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[55, "how-to-use-subgraph-in-gie-gremlin"]], "Supported Gremlin Steps": [[57, "supported-gremlin-steps"]], "Introduction": [[57, "introduction"]], "Standard Steps": [[57, "standard-steps"]], "Source": [[57, "source"]], "V()": [[57, "v"]], "E()": [[57, "e"]], "Expand": [[57, "expand"]], "outE()": [[57, "oute"]], "inE()": [[57, "ine"]], "bothE()": [[57, "bothe"]], "out()": [[57, "out"], [57, "id7"]], "in()": [[57, "in"], [57, "id8"]], "both()": [[57, "both"], [57, "id9"]], "outV()": [[57, "outv"]], "inV()": [[57, "inv"]], "otherV()": [[57, "otherv"]], "bothV()": [[57, "bothv"]], "Filter": [[57, "filter"]], "hasId()": [[57, "hasid"], [59, "hasid"]], "hasLabel()": [[57, "haslabel"]], "has()": [[57, "has"]], "hasNot()": [[57, "hasnot"]], "is()": [[57, "is"]], "where(traversal)": [[57, "where-traversal"]], "where(predicate)": [[57, "where-predicate"]], "not(traversal)": [[57, "not-traversal"]], "dedup()": [[57, "dedup"], [59, "dedup"]], "Project": [[57, "project"]], "id()": [[57, "id"]], "label()": [[57, "label"]], "constant()": [[57, "constant"], [59, "constant"]], "valueMap()": [[57, "valuemap"], [59, "valuemap"]], "values()": [[57, "values"]], "elementMap()": [[57, "elementmap"]], "select()": [[57, "select"], [59, "select"]], "Aggregate": [[57, "aggregate"]], "count()": [[57, "count"]], "fold()": [[57, "fold"], [59, "fold"]], "sum()": [[57, "sum"]], "min()": [[57, "min"]], "max()": [[57, "max"]], "mean()": [[57, "mean"]], "group()": [[57, "group"], [59, "group"]], "groupCount()": [[57, "groupcount"], [59, "groupcount"]], "<h3 id=\"gremlin-order\">Order</h3>": [[57, "order"]], "order()": [[57, "id1"]], "Statistics": [[57, "statistics"]], "limit()": [[57, "limit"]], "coin()": [[57, "coin"]], "sample()": [[57, "sample"]], "Union": [[57, "union"]], "union()": [[57, "id2"]], "Match": [[57, "match"]], "match()": [[57, "id3"]], "Subgraph": [[57, "subgraph"]], "subgraph()": [[57, "id4"]], "Identity": [[57, "identity"]], "identity()": [[57, "id5"]], "Unfold": [[57, "unfold"]], "unfold()": [[57, "id6"], [57, "id10"]], "Syntactic Sugars": [[57, "syntactic-sugars"]], "PathExpand": [[57, "pathexpand"]], "endV()": [[57, "endv"]], "Expression": [[57, "expression"]], "Aggregate (Group)": [[57, "aggregate-group"]], "Limitations": [[57, "limitations"]], "To be Supported": [[57, "to-be-supported"]], "path()": [[57, "path"]], "local()": [[57, "local"]], "Will Not be Supported": [[57, "will-not-be-supported"]], "repeat()": [[57, "repeat"]], "properties()": [[57, "properties"]], "sideEffect": [[57, "sideeffect"]], "branch": [[57, "branch"]], "GIE for Gremlin": [[58, "gie-for-gremlin"]], "Connecting via Python SDK": [[58, "connecting-via-python-sdk"]], "Connecting via Java SDK": [[58, "connecting-via-java-sdk"]], "Connecting via Gremlin-Console": [[58, "connecting-via-gremlin-console"]], "Tutorial: LDBC Gremlin": [[59, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[59, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[59, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[59, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[59, "apply-some-filters"]], "Extract Property Values": [[59, "extract-property-values"]], "Real Applications": [[59, "real-applications"], [59, "id1"]], "Basic Traversal Query": [[59, "basic-traversal-query"]], "Expansion": [[59, "expansion"]], "out(), in() and both()": [[59, "out-in-and-both"]], "outE(), inE() and bothE()": [[59, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[59, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[59, "multiple-expansion-steps"]], "Expansion from many starting points": [[59, "expansion-from-many-starting-points"]], "Filter & Expansion": [[59, "filter-expansion"]], "Apply filters after expansion": [[59, "apply-filters-after-expansion"]], "Expansion as filters": [[59, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[59, "path-expansion-syntactic-sugar"]], "Pattern Match": [[59, "pattern-match"]], "Relational Operations": [[59, "relational-operations"]], "Filter Steps": [[59, "filter-steps"]], "where()": [[59, "where"]], "Project Steps": [[59, "project-steps"]], "id() and label()": [[59, "id-and-label"]], "Aggregate Steps": [[59, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[59, "sum-min-max-and-mean"]], "Order Step": [[59, "order-step"]], "Limit Step": [[59, "limit-step"]], "Expression(Syntax Sugar)": [[59, "expression-syntax-sugar"]], "Complex Queries": [[59, "complex-queries"]], "LDBC BI2": [[59, "ldbc-bi2"]], "LDBC BI3": [[59, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[59, "ldbc-bi4-left-part"]], "LDBC BI11": [[59, "ldbc-bi11"]], "LDBC BI14": [[59, "ldbc-bi14"]], "Apache TinkerPop Ecosystem": [[60, "apache-tinkerpop-ecosystem"]], "Tutorials for Java Users": [[61, "tutorials-for-java-users"]], "Key Features": [[62, "key-features"]], "Ease-of-use: Python Interface": [[62, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[62, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[62, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[62, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[62, "gnn-training-inference"]], "Cloud Native Design": [[62, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[62, "across-engine-workflow-orchestration"]], "Design of GLE": [[63, "design-of-gle"]], "Model Paradigms": [[63, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[63, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[63, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[63, "pipeline-for-learning"]], "Dev on docker container": [[64, "dev-on-docker-container"]], "Build Learning Engine": [[64, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[65, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[66, "graph-sampling"], [143, "graph-sampling"]], "Graph Traversal": [[66, "graph-traversal"], [75, "graph-traversal"], [144, "graph-traversal"]], "Neighborhood Sampling": [[66, "neighborhood-sampling"]], "Subgraph Sampling": [[66, "subgraph-sampling"], [76, "subgraph-sampling"]], "Negative Sampling": [[66, "negative-sampling"], [148, "negative-sampling"]], "GSL": [[66, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[68, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[68, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[68, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[69, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[69, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[69, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[69, "launch-the-learning-engine"]], "Train the Model": [[69, "train-the-model"]], "Loading Graphs": [[70, "loading-graphs"]], "Load Built-in Datasets": [[70, "load-built-in-datasets"]], "Loading Your Own Datasets": [[70, "loading-your-own-datasets"]], "Adding Vertices": [[70, "adding-vertices"]], "Advanced Usages": [[70, "advanced-usages"]], "Deduce vertex labels when not ambiguous": [[70, "deduce-vertex-labels-when-not-ambiguous"]], "Deduce vertex from edges": [[70, "deduce-vertex-from-edges"]], "Multiple relations": [[70, "multiple-relations"]], "Specify data types of properties manually": [[70, "specify-data-types-of-properties-manually"]], "Other parameters of graph": [[70, "other-parameters-of-graph"]], "Putting them Together": [[70, "putting-them-together"]], "Loading From Pandas or Numpy": [[70, "loading-from-pandas-or-numpy"]], "From Pandas": [[70, "from-pandas"]], "From Numpy": [[70, "from-numpy"]], "Loader Variants": [[70, "loader-variants"]], "Techniques targeting at large graph": [[70, "techniques-targeting-at-large-graph"]], "Tips for reduce memory consumption of graphs": [[70, "tips-for-reduce-memory-consumption-of-graphs"]], "Design of GraphScope": [[71, "design-of-graphscope"]], "Unified Graph Computing Platform": [[71, "unified-graph-computing-platform"]], "Application layer": [[71, "application-layer"]], "Execution engine layer": [[71, "execution-engine-layer"]], "Storage layer": [[71, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[71, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[71, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[71, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[71, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[71, "graphscope-for-learning"]], "One-stop Graph Processing": [[72, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[72, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[72, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[72, "graph-learning-quick-start"]], "Glossary": [[73, "glossary"]], "FLASH": [[73, "flash"]], "GRAPE": [[73, "grape"]], "GAE": [[73, "gae"]], "GART": [[73, "gart"]], "GRIN": [[73, "grin"]], "GraphAr": [[73, "graphar"]], "Groot": [[73, "groot"]], "GUM": [[73, "gum"]], "MaxGraph (deprecated)": [[73, "maxgraph-deprecated"]], "Vineyard, or v6d": [[73, "vineyard-or-v6d"]], "GIE": [[73, "gie"]], "GAIA": [[73, "gaia"]], "Pegasus": [[73, "pegasus"]], "Ingress": [[73, "ingress"]], "PIE-model": [[73, "pie-model"]], "Graph Analytics Workloads": [[74, "graph-analytics-workloads"]], "What is Graph Analytics": [[74, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[74, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[74, "what-can-graphscope-do"], [76, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[75, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[75, "tinkerpop-and-gremlin"]], "Pattern Matching": [[75, "pattern-matching"], [75, "id1"]], "Neo4j and Cypher": [[75, "neo4j-and-cypher"]], "Graph Learning Workloads": [[76, "graph-learning-workloads"]], "What is Graph Neural Network": [[76, "what-is-graph-neural-network"]], "Typical GNN Models": [[76, "typical-gnn-models"]], "Paradigm of Model Training": [[76, "paradigm-of-model-training"]], "Steps of Model Training": [[76, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[76, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[77, "introducing-graphscope"]], "What is GraphScope": [[77, "what-is-graphscope"]], "Why use GraphScope": [[77, "why-use-graphscope"]], "What are the Use Cases": [[77, "what-are-the-use-cases"]], "What are the Limitations": [[77, "what-are-the-limitations"]], "What are the Next": [[77, "what-are-the-next"]], "Positioning of GraphScope": [[78, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[78, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[78, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[78, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[78, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[79, "performance-and-benchmark"]], "Results": [[79, "results"]], "Performance on GPUs": [[79, "performance-on-gpus"]], "Reproducing the results": [[79, "reproducing-the-results"]], "Tutorials for Python Users": [[80, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[81, "analytical-engine-api-reference"]], "Analytical Engine": [[81, "analytical-engine"]], "Fragments in GraphScope": [[81, "fragments-in-graphscope"]], "Analytical Apps": [[81, "analytical-apps"]], "Analytical Workers": [[81, "analytical-workers"]], "App\u2019s Context": [[81, "app-s-context"]], "Analytical App": [[82, "analytical-app"]], "AppAssets": [[82, "appassets"]], "JavaApp": [[82, "javaapp"]], "App object": [[82, "app-object"]], "Functions": [[82, "functions"], [84, "functions"], [157, "functions"]], "BuiltIn apps": [[82, "builtin-apps"]], "Context": [[83, "context"]], "Context object": [[83, "context-object"]], "Cython SDK API": [[84, "cython-sdk-api"]], "Pregel": [[84, "pregel"]], "PIE": [[84, "pie"]], "GraphScope types": [[84, "graphscope-types"]], "Flex API Reference": [[85, "flex-api-reference"]], "About Grape JDK": [[86, "about-grape-jdk"]], "Project Structure": [[86, "project-structure"]], "Building from source": [[86, "building-from-source"]], "Java Reference (javadoc)": [[87, "java-reference-javadoc"]], "graphscope.Vertex": [[88, "graphscope-vertex"]], "graphscope.declare": [[89, "graphscope-declare"]], "graphscope.framework.app.load_app": [[90, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[91, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[92, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[93, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[94, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[95, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[96, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[97, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[98, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[99, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[100, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[101, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[102, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[103, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[104, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[105, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[106, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.get_context_data": [[107, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[108, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[109, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[110, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[111, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[112, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[113, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[114, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[115, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[116, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[117, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[118, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[119, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[120, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[121, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[122, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[123, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[124, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[125, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[126, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[127, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[128, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[129, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[130, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[131, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[132, "graphscope-g"]], "graphscope.get_default_session": [[133, "graphscope-get-default-session"]], "graphscope.graphlearn": [[134, "graphscope-graphlearn"]], "graphscope.gremlin": [[135, "graphscope-gremlin"]], "graphscope.has_default_session": [[136, "graphscope-has-default-session"]], "graphscope.session": [[137, "graphscope-session"]], "graphscope.set_option": [[138, "graphscope-set-option"]], "Developing Your Own Model": [[139, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[139, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[139, "sampling"]], "Encoder": [[139, "encoder"], [147, "encoder"]], "Loss Function and Training Process": [[139, "loss-function-and-training-process"]], "Data Source": [[140, "data-source"]], "1 Data format": [[140, "data-format"]], "1.1 Basic format": [[140, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[140, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[140, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[140, "label-format-labeled"]], "1.5 Putting together": [[140, "putting-together"]], "2 Data source type": [[140, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[140, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[140, "user-api"]], "Graph Object": [[141, "graph-object"]], "2 Describe the Topology": [[141, "describe-the-topology"]], "3.1 Stand-alone Mode": [[141, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[141, "distributed-mode-client-server-mode"]], "Graph Query": [[142, "graph-query"]], "1 Introduction": [[143, "introduction"]], "Graph Sampling Language\uff08GSL)": [[145, "graph-sampling-language-gsl"]], "Install from pip": [[146, "install-from-pip"]], "Get wheel package": [[146, "get-wheel-package"]], "Install using pip": [[146, "install-using-pip"]], "Install TensorFlow": [[146, "install-tensorflow"]], "Build from source": [[146, "build-from-source"]], "Install git": [[146, "install-git"]], "Install dependent libraries": [[146, "install-dependent-libraries"]], "Compile": [[146, "compile"], [149, "compile"]], "Install": [[146, "install"]], "Run test": [[146, "run-test"]], "Docker image": [[146, "docker-image"]], "Graph Learning Model": [[147, "graph-learning-model"]], "Data model": [[147, "data-model"]], "Defining Your Own Operator": [[149, "defining-your-own-operator"]], "Programming Interface": [[149, "programming-interface"]], "Distributed Runtime Design": [[149, "distributed-runtime-design"]], "Implement a New Operator": [[149, "implement-a-new-operator"]], "Clone source code": [[149, "clone-source-code"]], "Implement your operator class": [[149, "implement-your-operator-class"]], "Register Operator": [[149, "register-operator"]], "How to Use an Operator": [[149, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[150, "integrating-other-data-sources"]], "File System Interface": [[150, "file-system-interface"]], "ByteStreamAccessFile": [[150, "bytestreamaccessfile"]], "StructuredAccessFile": [[150, "structuredaccessfile"]], "WritableFile": [[150, "writablefile"]], "Register with Scheme": [[150, "register-with-scheme"]], "Quick Start": [[151, "quick-start"]], "1 Trying out the built-in models": [[151, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[151, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[151, "developing-a-gnn-model"]], "3.1 Data Preparation": [[151, "data-preparation"]], "3.2 Graph Construction": [[151, "graph-construction"]], "3.3 Graph Sampling": [[151, "graph-sampling"]], "3.4 GNN Model": [[151, "gnn-model"]], "System configuration": [[152, "system-configuration"]], "Graph": [[153, "graph"], [157, "graph"], [291, "graph"]], "Graph object": [[153, "graph-object"]], "Loader object": [[153, "loader-object"]], "Graph Functions": [[153, "graph-functions"]], "Interactive Query": [[154, "interactive-query"]], "Builtin algorithms": [[156, "builtin-algorithms"]], "Nodes": [[157, "nodes"]], "Edges": [[157, "edges"]], "Self loops": [[157, "self-loops"]], "Attributes": [[157, "attributes"]], "Freezing graph structure": [[157, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[158, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[159, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[160, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[161, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[162, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[163, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[164, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[165, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[166, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[167, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[168, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[169, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[170, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[171, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[172, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[173, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[174, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[175, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[176, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[177, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[178, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[179, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[180, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[181, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[182, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[183, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[184, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[185, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[186, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[187, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[188, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[189, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[190, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[191, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[192, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[193, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[194, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[195, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[196, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[197, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[198, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[199, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[200, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[201, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[202, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[203, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[204, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[205, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[206, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[207, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[208, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[209, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[210, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[211, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[212, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[213, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[214, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[215, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[216, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[217, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[218, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[219, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[220, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[221, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[222, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[223, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[224, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[225, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[226, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[227, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[228, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[229, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[230, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[231, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[232, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[233, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[234, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[235, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[236, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[237, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[238, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[239, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[240, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[241, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[242, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[243, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[244, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[245, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[246, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[247, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[248, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[249, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[250, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[251, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[252, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[253, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[254, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[255, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[256, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[257, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[258, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[259, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[260, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[261, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[262, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[263, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[264, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[265, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[266, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[267, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[268, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[269, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[270, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[271, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[272, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[273, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[274, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[275, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[276, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[277, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[278, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[279, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[280, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[281, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[282, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[283, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[284, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[285, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[286, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[287, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[288, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[289, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[290, "graph-generators"]], "Atlas": [[290, "module-graphscope.nx.generators.atlas"]], "Classic": [[290, "module-graphscope.nx.generators.classic"]], "Expanders": [[290, "module-graphscope.nx.generators.expanders"]], "Small": [[290, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[290, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[290, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[290, "module-graphscope.nx.generators.directed"]], "Geometric": [[290, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[290, "module-graphscope.nx.generators.ego"]], "Stochastic": [[290, "module-networkx.generators.stochastic"]], "AS graph": [[290, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[290, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[290, "module-graphscope.nx.generators.social"]], "Spectral": [[290, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[290, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[290, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[290, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[290, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[290, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[290, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[290, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[291, "graph-types"]], "DiGraph": [[291, "digraph"]], "NetworkX-style API": [[292, "networkx-style-api"]], "Reading graphs": [[293, "reading-graphs"]], "Edge List": [[293, "edge-list"]], "Adjacency List": [[293, "adjacency-list"]], "Graph Transformation": [[294, "graph-transformation"]], "Operation": [[295, "operation"]], "Operation object": [[295, "operation-object"]], "BuiltIn operations": [[295, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[296, "python-api-reference"]], "Selector": [[297, "selector"]], "Selectors in different context": [[297, "selectors-in-different-context"]], "TensorContext": [[297, "tensorcontext"]], "VertexDataContext": [[297, "vertexdatacontext"]], "LabeledVertexDataContext": [[297, "labeledvertexdatacontext"]], "VertexPropertyContext": [[297, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[297, "labeledvertexpropertycontext"]], "Methods that use selectors": [[297, "methods-that-use-selectors"]], "One-dimensional results": [[297, "one-dimensional-results"]], "Multi-dimensional results": [[297, "multi-dimensional-results"]], "Vertex Range": [[297, "vertex-range"]], "Session": [[298, "session"]], "Session object": [[298, "session-object"]], "Session Functions": [[298, "session-functions"]], "Resources Estimator": [[299, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[300, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[300, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[300, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[300, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[300, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[302, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[302, "the-graphar-file-format"]], "Features": [[302, "features"]], "File Format": [[302, "file-format"]], "Information files": [[302, "information-files"]], "Data files": [[302, "data-files"]], "GraphAr in GraphScope": [[302, "graphar-in-graphscope"]], "Loading GraphAr Data into GraphScope": [[302, "loading-graphar-data-into-graphscope"]], "Archiving the Graph Data in GraphAr": [[302, "archiving-the-graph-data-in-graphar"]], "GRIN: Graph Retrieval INterface": [[303, "grin-graph-retrieval-interface"]], "Motivations": [[303, "motivations"]], "Unified Graph Retrieval": [[303, "unified-graph-retrieval"]], "GRIN Concepts": [[303, "grin-concepts"]], "Predefined Macros": [[303, "predefined-macros"]], "Partition Strategy": [[303, "partition-strategy"]], "Edge-cut Partition Strategy": [[303, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[303, "vertex-cut-partition-strategy"]], "Property Graph Model": [[303, "property-graph-model"]], "Implementation Guideline": [[303, "implementation-guideline"]], "For computing engine": [[303, "for-computing-engine"]], "For storage engine": [[303, "for-storage-engine"]], "Design Details": [[303, "design-details"]], "Handler": [[303, "handler"]], "Edge": [[303, "edge"]], "List": [[303, "list"]], "Array-style Retrieval": [[303, "array-style-retrieval"]], "List Iterator": [[303, "list-iterator"]], "Property": [[303, "property"]], "Label": [[303, "label"], [324, "label"]], "Order": [[303, "order"]], "Master and Mirror": [[303, "master-and-mirror"]], "Local Complete": [[303, "local-complete"]], "Natural ID Trait": [[303, "natural-id-trait"]], "Groot: Persistent Graph Store": [[304, "groot-persistent-graph-store"]], "Known Limitation": [[304, "known-limitation"]], "Deploy Groot": [[304, "deploy-groot"]], "Install from ArtifactHub": [[304, "install-from-artifacthub"]], "Installing from a local directory": [[304, "installing-from-a-local-directory"]], "Common Configurations": [[304, "common-configurations"]], "Connecting to Groot": [[304, "connecting-to-groot"]], "Connection": [[304, "connection"]], "Building and Modifying Graph Models": [[304, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[304, "using-built-in-datasets"]], "Customizing Models and Datasets": [[304, "customizing-models-and-datasets"]], "Querying Data": [[304, "querying-data"]], "Python": [[304, "python"], [304, "id1"]], "Java": [[304, "java"], [304, "id2"]], "Node.js": [[304, "node-js"]], "Data Import": [[304, "data-import"]], "Offline Import": [[304, "offline-import"]], "Prerequisite": [[304, "prerequisite"]], "Data Format": [[304, "data-format"]], "Loading Process": [[304, "loading-process"]], "Build: Building a partitioned graph": [[304, "build-building-a-partitioned-graph"]], "2. Loading graph partitions": [[304, "loading-graph-partitions"]], "3. Commit to store service": [[304, "commit-to-store-service"]], "Realtime Write": [[304, "realtime-write"]], "Uninstalling and Restarting": [[304, "uninstalling-and-restarting"]], "Uninstall Groot": [[304, "uninstall-groot"]], "Restart Groot": [[304, "restart-groot"]], "Destroy Groot": [[304, "destroy-groot"]], "Developing Guide": [[304, "developing-guide"]], "Build image": [[304, "build-image"]], "Persistence": [[304, "persistence"]], "Troubleshooting": [[304, "troubleshooting"]], "Viewing logs": [[304, "viewing-logs"]], "Configuring logs": [[304, "configuring-logs"]], "In-memory immutable graphs on Vineyard": [[305, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[305, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[305, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[305, "using-loaded-graphs"]], "Applications and algorithms": [[306, "applications-and-algorithms"]], "Bind application to graph": [[306, "bind-application-to-graph"]], "Built-in algorithms": [[306, "built-in-algorithms"]], "Scaling and repartitioning": [[307, "scaling-and-repartitioning"]], "Fennel": [[307, "fennel"]], "XtraPuLP": [[307, "xtrapulp"]], "Hybrid partitioning": [[307, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[308, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[308, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[308, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[308, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[309, "user-guide-and-examples-of-gle"]], "Error Codes": [[310, "error-codes"]], "Command-line Utility gsctl": [[311, "command-line-utility-gsctl"]], "Install/Update gsctl": [[311, "install-update-gsctl"]], "Commands": [[311, "commands"]], "How to Find logs": [[312, "how-to-find-logs"]], "Find logs in k8s": [[312, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[312, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[312, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[312, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[312, "find-logs-for-groot"]], "Monitoring": [[313, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[314, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[314, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[314, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[314, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[314, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[314, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[314, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[314, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[314, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[314, "id7"]], "\u90e8\u7f72": [[315, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[315, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[315, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[315, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[316, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[316, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[316, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[316, "python-wheels"]], "Linux": [[316, "linux"]], "macOS": [[316, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[316, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[317, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[318, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[318, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[318, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[318, "id6"]], "\u56fe\u5206\u6790": [[318, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[318, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[318, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[319, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[319, "id2"]], "\u6295\u5f71": [[319, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[319, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[319, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[320, "graphscope"]], "\u76ee\u5f55": [[320, null], [325, null]], "API \u53c2\u8003": [[320, null]], "\u7d22\u5f15": [[320, "id1"]], "\u5b89\u88c5": [[321, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[321, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[321, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[322, "id1"]], "Apache TinkerPop": [[322, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[322, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[322, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[322, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[322, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[322, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[322, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[322, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[322, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[322, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[322, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[322, "id13"]], "\u5df2\u77e5\u9650\u5236": [[322, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[323, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[323, "id2"]], "\u6570\u636e\u6a21\u578b": [[323, "id3"]], "\u7f16\u7801\u5668": [[323, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[323, "id5"]], "\u91c7\u6837": [[323, "id6"]], "\u56fe\u6570\u636e\u6d41": [[323, "id7"]], "\u6a21\u578b": [[323, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[323, "id9"]], "\u8f7d\u56fe": [[324, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[324, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[324, "id4"]], "Build Vertex": [[324, "build-vertex"]], "vertices": [[324, "vertices"]], "properties": [[324, "properties"], [324, "id7"]], "vid_field": [[324, "vid-field"]], "Build Edge": [[324, "build-edge"]], "edges": [[324, "edges"]], "label": [[324, "id6"]], "src_label and dst_label": [[324, "src-label-and-dst-label"]], "src_field and dst_field": [[324, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[324, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[324, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[324, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[324, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[324, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[324, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[324, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[324, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[324, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[324, "numpy"]], "Loader \u7684\u53d8\u79cd": [[324, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[325, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "cdlp()": [[0, "id0"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id1"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lcc()": [[0, "id2"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id3"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id4"]], "wcc()": [[0, "id5"]], "gs::appbase (c++ class)": [[81, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[81, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[81, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[81, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[81, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[81, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[81, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[81, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[81, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[81, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[81, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[81, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[81, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[81, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[81, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[81, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[81, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[81, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [81, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[81, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[81, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[81, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[81, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[81, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [81, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [81, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[81, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[81, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[81, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [81, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [81, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[81, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[81, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[81, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [81, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [81, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [81, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[81, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[81, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[81, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[81, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[81, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[81, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[81, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[81, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[81, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[81, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[81, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[81, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[81, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[81, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[81, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[81, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[81, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[81, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[81, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [81, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[81, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[81, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[81, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[81, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[81, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[81, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[81, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[81, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv"]], "gs::ctxwrapperbuilder (c++ struct)": [[81, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[81, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[81, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[81, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[81, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[81, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[81, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[81, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[81, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[81, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[81, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[81, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[81, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[81, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[81, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[81, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[81, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[81, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[81, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[81, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[81, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[81, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[81, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[81, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[81, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[81, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[81, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[81, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[81, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[81, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[81, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[81, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [81, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[81, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[81, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[81, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[81, "_CPPv4N2gs14DispatchResult9graph_defEv"], [81, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[81, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[81, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[81, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [81, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[81, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[81, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[81, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[81, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[81, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[81, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[81, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[81, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[81, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[81, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[81, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[81, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[81, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[81, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[81, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[81, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[81, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[81, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[81, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[81, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[81, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[81, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[81, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[81, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[81, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [81, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[81, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[81, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[81, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[81, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[81, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[81, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[81, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[81, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[81, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [81, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[81, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[81, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[81, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[81, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[81, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[81, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[81, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[81, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[81, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[81, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[81, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[81, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[81, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[81, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[81, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[81, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[81, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[81, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[81, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[81, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[81, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[81, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[81, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[81, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[81, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[81, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[81, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[81, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[81, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[81, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[81, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[81, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[81, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[81, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[81, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[81, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[81, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[81, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[81, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[81, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[81, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[81, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[81, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[81, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[81, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [81, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[81, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[81, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[81, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[81, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[81, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[81, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[81, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[81, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[81, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[81, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[81, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[81, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[81, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[81, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[81, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[81, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[81, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[81, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[81, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[81, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[81, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[81, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[81, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[81, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[81, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[81, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[81, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[81, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[81, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [81, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[81, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [81, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[81, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[81, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[81, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[81, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[81, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[81, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[81, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[81, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[81, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[82, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[82, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[82, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[82, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[82, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[82, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[82, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[82, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[82, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[82, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[82, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[82, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[82, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[82, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[82, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[82, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[82, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[82, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[82, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[82, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[82, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[82, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[82, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[82, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[82, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[82, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[82, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[82, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[82, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[82, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[82, "graphscope.louvain"]], "lpa() (in module graphscope)": [[82, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[82, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[82, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[82, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[82, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[82, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[82, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[82, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[82, "graphscope.sssp"]], "triangles() (in module graphscope)": [[82, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[82, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[82, "graphscope.voterank"]], "wcc() (in module graphscope)": [[82, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[83, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[83, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[83, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[83, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[83, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[83, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[83, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[83, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[83, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[83, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[83, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[83, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[83, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[88, "graphscope.Vertex"]], "declare() (in module graphscope)": [[89, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[90, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[91, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[92, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[93, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[94, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[95, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[96, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[97, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[98, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[99, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[100, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[101, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[102, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[103, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[104, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[105, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[106, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[107, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[108, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[109, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[110, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[111, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[112, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[113, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[114, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[115, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[116, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[117, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[118, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[119, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[120, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[121, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[122, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[123, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[124, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[125, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[126, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[127, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[128, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[129, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[130, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[131, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[132, "graphscope.g"]], "get_default_session() (in module graphscope)": [[133, "graphscope.get_default_session"]], "graphlearn() (in module graphscope)": [[134, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[135, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[136, "graphscope.has_default_session"]], "session (in module graphscope)": [[137, "graphscope.session"]], "set_option() (in module graphscope)": [[138, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[153, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[153, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[153, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[153, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[153, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.add_column"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[153, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.add_edges"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[153, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.add_vertices"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[153, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "archive() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.archive"]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.consolidate_columns"]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[153, "graphscope.framework.graph.GraphDAGNode.consolidate_columns"]], "detach() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[153, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[153, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[153, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.project"]], "project() (graphscope.framework.graph.graphdagnode method)": [[153, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[153, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[153, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[153, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[153, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[153, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[154, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[154, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[154, "graphscope.interactive.query.InteractiveQuery.close"]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[154, "graphscope.interactive.query.InteractiveQuery.cypher_driver"]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[154, "graphscope.interactive.query.InteractiveQuery.cypher_url"]], "execute() (graphscope.interactive.query.interactivequery method)": [[154, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[154, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[154, "graphscope.interactive.query.InteractiveQuery.gremlin_client"]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[154, "graphscope.interactive.query.InteractiveQuery.gremlin_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[154, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[154, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[154, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[154, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[154, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[154, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[155, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[155, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[155, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[155, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[155, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[156, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[157, "module-graphscope.nx.classes.function"]], "module": [[157, "module-graphscope.nx.classes.function"], [290, "module-graphscope.nx.generators.atlas"], [290, "module-graphscope.nx.generators.classic"], [290, "module-graphscope.nx.generators.community"], [290, "module-graphscope.nx.generators.degree_seq"], [290, "module-graphscope.nx.generators.directed"], [290, "module-graphscope.nx.generators.duplication"], [290, "module-graphscope.nx.generators.ego"], [290, "module-graphscope.nx.generators.expanders"], [290, "module-graphscope.nx.generators.geometric"], [290, "module-graphscope.nx.generators.harary_graph"], [290, "module-graphscope.nx.generators.intersection"], [290, "module-graphscope.nx.generators.joint_degree_seq"], [290, "module-graphscope.nx.generators.mycielski"], [290, "module-graphscope.nx.generators.nonisomorphic_trees"], [290, "module-graphscope.nx.generators.small"], [290, "module-graphscope.nx.generators.social"], [290, "module-graphscope.nx.generators.spectral_graph_forge"], [290, "module-graphscope.nx.generators.sudoku"], [290, "module-graphscope.nx.generators.trees"], [290, "module-graphscope.nx.generators.triads"], [290, "module-networkx.generators.internet_as_graphs"], [290, "module-networkx.generators.stochastic"], [295, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[158, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[159, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[160, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[161, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[162, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[163, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[164, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[165, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[166, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[167, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[168, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[169, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[170, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[171, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[172, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[173, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[174, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[175, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[176, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[177, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[178, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[179, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[180, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[181, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[182, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[183, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[184, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[185, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[186, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[187, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[188, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[189, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[190, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[191, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[192, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[193, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[194, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[195, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[196, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[197, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[198, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[199, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[200, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[201, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[202, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[203, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[204, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[205, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[206, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[207, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[208, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[209, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[210, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[211, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[212, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[213, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[214, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[215, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[216, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[217, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[218, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[219, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[220, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[221, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[222, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[223, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[224, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[225, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[226, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[227, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[228, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[229, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[230, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[231, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[232, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[233, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[234, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[235, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[236, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[237, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[238, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[239, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[240, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[241, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[242, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[243, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[244, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[245, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[246, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[247, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[248, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[249, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[250, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[251, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[252, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[253, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[254, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[255, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[256, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[257, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[258, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[259, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[260, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[261, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[262, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[263, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[264, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[265, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[266, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[267, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[268, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[269, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[270, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[271, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[272, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[273, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[274, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[275, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[276, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[277, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[278, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[279, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[280, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[281, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[282, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[283, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[284, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[285, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[286, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[287, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[288, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[289, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[290, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[290, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[290, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[290, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[290, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[290, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[290, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[290, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[290, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[290, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[290, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[290, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[290, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[290, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[290, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[290, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[290, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[290, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[290, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[290, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[290, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[290, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[291, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[291, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[291, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[291, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[291, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[291, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[291, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[291, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[291, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[291, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[291, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[291, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[291, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[291, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[291, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[291, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[291, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[291, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[291, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[291, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[293, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[293, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[294, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[294, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[295, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[295, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[298, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[298, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[298, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[298, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[298, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[298, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[298, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[298, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[298, "graphscope.Session.engine_config"]], "g() (graphscope.session method)": [[298, "graphscope.Session.g"]], "get_config() (graphscope.session method)": [[298, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[298, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[298, "graphscope.Session.graphlearn"]], "info (graphscope.session property)": [[298, "graphscope.Session.info"]], "interactive() (graphscope.session method)": [[298, "graphscope.Session.interactive"]], "load_from() (graphscope.session method)": [[298, "graphscope.Session.load_from"]], "load_from_gar() (graphscope.session method)": [[298, "graphscope.Session.load_from_gar"]], "restore_from_pvc() (graphscope.session method)": [[298, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[298, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[298, "graphscope.Session.store_to_pvc"]]}})