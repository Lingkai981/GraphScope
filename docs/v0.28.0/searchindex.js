Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_instrument", "development/how_to_submit_pr", "development/how_to_test", "flex/coordinator", "flex/coordinator/restful_api", "flex/interactive/configuration", "flex/interactive/custom_graph_data", "flex/interactive/data_import", "flex/interactive/data_model", "flex/interactive/deployment", "flex/interactive/dev_guide", "flex/interactive/development/cpp_procedure", "flex/interactive/development/cypher_procedure", "flex/interactive/development/java/AdminServiceGraphManagementApi", "flex/interactive/development/java/AdminServiceJobManagementApi", "flex/interactive/development/java/AdminServiceProcedureManagementApi", "flex/interactive/development/java/AdminServiceServiceManagementApi", "flex/interactive/development/java/BaseEdgeType", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/java/BasePropertyMeta", "flex/interactive/development/java/BaseVertexType", "flex/interactive/development/java/BaseVertexTypeXCsrParams", "flex/interactive/development/java/ColumnMapping", "flex/interactive/development/java/CreateEdgeType", "flex/interactive/development/java/CreateGraphRequest", "flex/interactive/development/java/CreateGraphResponse", "flex/interactive/development/java/CreateGraphSchemaRequest", "flex/interactive/development/java/CreateProcedureRequest", "flex/interactive/development/java/CreateProcedureResponse", "flex/interactive/development/java/CreatePropertyMeta", "flex/interactive/development/java/CreateVertexType", "flex/interactive/development/java/DateType", "flex/interactive/development/java/EdgeData", "flex/interactive/development/java/EdgeMapping", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/java/EdgeMappingTypeTriplet", "flex/interactive/development/java/EdgeRequest", "flex/interactive/development/java/EdgeStatistics", "flex/interactive/development/java/FixedChar", "flex/interactive/development/java/FixedCharChar", "flex/interactive/development/java/GSDataType", "flex/interactive/development/java/GetEdgeType", "flex/interactive/development/java/GetGraphResponse", "flex/interactive/development/java/GetGraphSchemaResponse", "flex/interactive/development/java/GetGraphStatisticsResponse", "flex/interactive/development/java/GetProcedureResponse", "flex/interactive/development/java/GetPropertyMeta", "flex/interactive/development/java/GetVertexType", "flex/interactive/development/java/GraphServiceEdgeManagementApi", "flex/interactive/development/java/GraphServiceVertexManagementApi", "flex/interactive/development/java/JobResponse", "flex/interactive/development/java/JobStatus", "flex/interactive/development/java/LongText", "flex/interactive/development/java/Parameter", "flex/interactive/development/java/PrimitiveType", "flex/interactive/development/java/Property", "flex/interactive/development/java/PropertyArray", "flex/interactive/development/java/QueryRequest", "flex/interactive/development/java/QueryServiceApi", "flex/interactive/development/java/SchemaMapping", "flex/interactive/development/java/SchemaMappingLoadingConfig", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/java/ServiceStatus", "flex/interactive/development/java/StartServiceRequest", "flex/interactive/development/java/StoredProcedureMeta", "flex/interactive/development/java/StringType", "flex/interactive/development/java/StringTypeString", "flex/interactive/development/java/TemporalType", "flex/interactive/development/java/TemporalTypeTemporal", "flex/interactive/development/java/TimeStampType", "flex/interactive/development/java/TypedValue", "flex/interactive/development/java/UpdateProcedureRequest", "flex/interactive/development/java/UploadFileResponse", "flex/interactive/development/java/UtilsApi", "flex/interactive/development/java/VarChar", "flex/interactive/development/java/VarCharVarChar", "flex/interactive/development/java/VertexData", "flex/interactive/development/java/VertexMapping", "flex/interactive/development/java/VertexRequest", "flex/interactive/development/java/VertexStatistics", "flex/interactive/development/java/VertexTypePairStatistics", "flex/interactive/development/java/java_sdk", "flex/interactive/development/python/AdminServiceGraphManagementApi", "flex/interactive/development/python/AdminServiceJobManagementApi", "flex/interactive/development/python/AdminServiceProcedureManagementApi", "flex/interactive/development/python/AdminServiceServiceManagementApi", "flex/interactive/development/python/BaseEdgeType", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "flex/interactive/development/python/BasePropertyMeta", "flex/interactive/development/python/BaseVertexType", "flex/interactive/development/python/BaseVertexTypeXCsrParams", "flex/interactive/development/python/ColumnMapping", "flex/interactive/development/python/CreateEdgeType", "flex/interactive/development/python/CreateGraphRequest", "flex/interactive/development/python/CreateGraphResponse", "flex/interactive/development/python/CreateGraphSchemaRequest", "flex/interactive/development/python/CreateProcedureRequest", "flex/interactive/development/python/CreateProcedureResponse", "flex/interactive/development/python/CreatePropertyMeta", "flex/interactive/development/python/CreateVertexType", "flex/interactive/development/python/DateType", "flex/interactive/development/python/EdgeData", "flex/interactive/development/python/EdgeMapping", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn", "flex/interactive/development/python/EdgeMappingTypeTriplet", "flex/interactive/development/python/EdgeRequest", "flex/interactive/development/python/EdgeStatistics", "flex/interactive/development/python/FixedChar", "flex/interactive/development/python/FixedCharChar", "flex/interactive/development/python/GSDataType", "flex/interactive/development/python/GetEdgeType", "flex/interactive/development/python/GetGraphResponse", "flex/interactive/development/python/GetGraphSchemaResponse", "flex/interactive/development/python/GetGraphStatisticsResponse", "flex/interactive/development/python/GetProcedureResponse", "flex/interactive/development/python/GetPropertyMeta", "flex/interactive/development/python/GetVertexType", "flex/interactive/development/python/GraphServiceEdgeManagementApi", "flex/interactive/development/python/GraphServiceVertexManagementApi", "flex/interactive/development/python/JobResponse", "flex/interactive/development/python/JobStatus", "flex/interactive/development/python/LongText", "flex/interactive/development/python/ModelProperty", "flex/interactive/development/python/Parameter", "flex/interactive/development/python/PrimitiveType", "flex/interactive/development/python/PropertyArray", "flex/interactive/development/python/QueryRequest", "flex/interactive/development/python/QueryServiceApi", "flex/interactive/development/python/SchemaMapping", "flex/interactive/development/python/SchemaMappingLoadingConfig", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams", "flex/interactive/development/python/ServiceStatus", "flex/interactive/development/python/StartServiceRequest", "flex/interactive/development/python/StoredProcedureMeta", "flex/interactive/development/python/StringType", "flex/interactive/development/python/StringTypeString", "flex/interactive/development/python/TemporalType", "flex/interactive/development/python/TemporalTypeTemporal", "flex/interactive/development/python/TimeStampType", "flex/interactive/development/python/TypedValue", "flex/interactive/development/python/UpdateProcedureRequest", "flex/interactive/development/python/UploadFileResponse", "flex/interactive/development/python/UtilsApi", "flex/interactive/development/python/VarChar", "flex/interactive/development/python/VarCharVarChar", "flex/interactive/development/python/VertexData", "flex/interactive/development/python/VertexMapping", "flex/interactive/development/python/VertexRequest", "flex/interactive/development/python/VertexStatistics", "flex/interactive/development/python/VertexTypePairStatistics", "flex/interactive/development/python/python_sdk", "flex/interactive/development/restful_api", "flex/interactive/getting_started", "flex/interactive/glossary", "flex/interactive/installation", "flex/interactive/overview", "flex/interactive/sdk", "flex/interactive/stored_procedures", "flex/interactive/tools", "flex/interactive/tools/admin_tool", "flex/interactive_intro", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/llm_assistant", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/optimizer", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "learning_engine/tutorial_node_classification_pyg_k8s", "learning_engine/tutorial_node_classification_pyg_local", "loading_graphs", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_instrument.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "flex/coordinator.md", "flex/coordinator/restful_api.rst", "flex/interactive/configuration.md", "flex/interactive/custom_graph_data.md", "flex/interactive/data_import.md", "flex/interactive/data_model.md", "flex/interactive/deployment.md", "flex/interactive/dev_guide.md", "flex/interactive/development/cpp_procedure.md", "flex/interactive/development/cypher_procedure.md", "flex/interactive/development/java/AdminServiceGraphManagementApi.md", "flex/interactive/development/java/AdminServiceJobManagementApi.md", "flex/interactive/development/java/AdminServiceProcedureManagementApi.md", "flex/interactive/development/java/AdminServiceServiceManagementApi.md", "flex/interactive/development/java/BaseEdgeType.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/java/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/java/BasePropertyMeta.md", "flex/interactive/development/java/BaseVertexType.md", "flex/interactive/development/java/BaseVertexTypeXCsrParams.md", "flex/interactive/development/java/ColumnMapping.md", "flex/interactive/development/java/CreateEdgeType.md", "flex/interactive/development/java/CreateGraphRequest.md", "flex/interactive/development/java/CreateGraphResponse.md", "flex/interactive/development/java/CreateGraphSchemaRequest.md", "flex/interactive/development/java/CreateProcedureRequest.md", "flex/interactive/development/java/CreateProcedureResponse.md", "flex/interactive/development/java/CreatePropertyMeta.md", "flex/interactive/development/java/CreateVertexType.md", "flex/interactive/development/java/DateType.md", "flex/interactive/development/java/EdgeData.md", "flex/interactive/development/java/EdgeMapping.md", "flex/interactive/development/java/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/java/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/java/EdgeMappingTypeTriplet.md", "flex/interactive/development/java/EdgeRequest.md", "flex/interactive/development/java/EdgeStatistics.md", "flex/interactive/development/java/FixedChar.md", "flex/interactive/development/java/FixedCharChar.md", "flex/interactive/development/java/GSDataType.md", "flex/interactive/development/java/GetEdgeType.md", "flex/interactive/development/java/GetGraphResponse.md", "flex/interactive/development/java/GetGraphSchemaResponse.md", "flex/interactive/development/java/GetGraphStatisticsResponse.md", "flex/interactive/development/java/GetProcedureResponse.md", "flex/interactive/development/java/GetPropertyMeta.md", "flex/interactive/development/java/GetVertexType.md", "flex/interactive/development/java/GraphServiceEdgeManagementApi.md", "flex/interactive/development/java/GraphServiceVertexManagementApi.md", "flex/interactive/development/java/JobResponse.md", "flex/interactive/development/java/JobStatus.md", "flex/interactive/development/java/LongText.md", "flex/interactive/development/java/Parameter.md", "flex/interactive/development/java/PrimitiveType.md", "flex/interactive/development/java/Property.md", "flex/interactive/development/java/PropertyArray.md", "flex/interactive/development/java/QueryRequest.md", "flex/interactive/development/java/QueryServiceApi.md", "flex/interactive/development/java/SchemaMapping.md", "flex/interactive/development/java/SchemaMappingLoadingConfig.md", "flex/interactive/development/java/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/java/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/java/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/java/ServiceStatus.md", "flex/interactive/development/java/StartServiceRequest.md", "flex/interactive/development/java/StoredProcedureMeta.md", "flex/interactive/development/java/StringType.md", "flex/interactive/development/java/StringTypeString.md", "flex/interactive/development/java/TemporalType.md", "flex/interactive/development/java/TemporalTypeTemporal.md", "flex/interactive/development/java/TimeStampType.md", "flex/interactive/development/java/TypedValue.md", "flex/interactive/development/java/UpdateProcedureRequest.md", "flex/interactive/development/java/UploadFileResponse.md", "flex/interactive/development/java/UtilsApi.md", "flex/interactive/development/java/VarChar.md", "flex/interactive/development/java/VarCharVarChar.md", "flex/interactive/development/java/VertexData.md", "flex/interactive/development/java/VertexMapping.md", "flex/interactive/development/java/VertexRequest.md", "flex/interactive/development/java/VertexStatistics.md", "flex/interactive/development/java/VertexTypePairStatistics.md", "flex/interactive/development/java/java_sdk.md", "flex/interactive/development/python/AdminServiceGraphManagementApi.md", "flex/interactive/development/python/AdminServiceJobManagementApi.md", "flex/interactive/development/python/AdminServiceProcedureManagementApi.md", "flex/interactive/development/python/AdminServiceServiceManagementApi.md", "flex/interactive/development/python/BaseEdgeType.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInner.md", "flex/interactive/development/python/BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams.md", "flex/interactive/development/python/BasePropertyMeta.md", "flex/interactive/development/python/BaseVertexType.md", "flex/interactive/development/python/BaseVertexTypeXCsrParams.md", "flex/interactive/development/python/ColumnMapping.md", "flex/interactive/development/python/CreateEdgeType.md", "flex/interactive/development/python/CreateGraphRequest.md", "flex/interactive/development/python/CreateGraphResponse.md", "flex/interactive/development/python/CreateGraphSchemaRequest.md", "flex/interactive/development/python/CreateProcedureRequest.md", "flex/interactive/development/python/CreateProcedureResponse.md", "flex/interactive/development/python/CreatePropertyMeta.md", "flex/interactive/development/python/CreateVertexType.md", "flex/interactive/development/python/DateType.md", "flex/interactive/development/python/EdgeData.md", "flex/interactive/development/python/EdgeMapping.md", "flex/interactive/development/python/EdgeMappingDestinationVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInner.md", "flex/interactive/development/python/EdgeMappingSourceVertexMappingsInnerColumn.md", "flex/interactive/development/python/EdgeMappingTypeTriplet.md", "flex/interactive/development/python/EdgeRequest.md", "flex/interactive/development/python/EdgeStatistics.md", "flex/interactive/development/python/FixedChar.md", "flex/interactive/development/python/FixedCharChar.md", "flex/interactive/development/python/GSDataType.md", "flex/interactive/development/python/GetEdgeType.md", "flex/interactive/development/python/GetGraphResponse.md", "flex/interactive/development/python/GetGraphSchemaResponse.md", "flex/interactive/development/python/GetGraphStatisticsResponse.md", "flex/interactive/development/python/GetProcedureResponse.md", "flex/interactive/development/python/GetPropertyMeta.md", "flex/interactive/development/python/GetVertexType.md", "flex/interactive/development/python/GraphServiceEdgeManagementApi.md", "flex/interactive/development/python/GraphServiceVertexManagementApi.md", "flex/interactive/development/python/JobResponse.md", "flex/interactive/development/python/JobStatus.md", "flex/interactive/development/python/LongText.md", "flex/interactive/development/python/ModelProperty.md", "flex/interactive/development/python/Parameter.md", "flex/interactive/development/python/PrimitiveType.md", "flex/interactive/development/python/PropertyArray.md", "flex/interactive/development/python/QueryRequest.md", "flex/interactive/development/python/QueryServiceApi.md", "flex/interactive/development/python/SchemaMapping.md", "flex/interactive/development/python/SchemaMappingLoadingConfig.md", "flex/interactive/development/python/SchemaMappingLoadingConfigDataSource.md", "flex/interactive/development/python/SchemaMappingLoadingConfigFormat.md", "flex/interactive/development/python/SchemaMappingLoadingConfigXCsrParams.md", "flex/interactive/development/python/ServiceStatus.md", "flex/interactive/development/python/StartServiceRequest.md", "flex/interactive/development/python/StoredProcedureMeta.md", "flex/interactive/development/python/StringType.md", "flex/interactive/development/python/StringTypeString.md", "flex/interactive/development/python/TemporalType.md", "flex/interactive/development/python/TemporalTypeTemporal.md", "flex/interactive/development/python/TimeStampType.md", "flex/interactive/development/python/TypedValue.md", "flex/interactive/development/python/UpdateProcedureRequest.md", "flex/interactive/development/python/UploadFileResponse.md", "flex/interactive/development/python/UtilsApi.md", "flex/interactive/development/python/VarChar.md", "flex/interactive/development/python/VarCharVarChar.md", "flex/interactive/development/python/VertexData.md", "flex/interactive/development/python/VertexMapping.md", "flex/interactive/development/python/VertexRequest.md", "flex/interactive/development/python/VertexStatistics.md", "flex/interactive/development/python/VertexTypePairStatistics.md", "flex/interactive/development/python/python_sdk.md", "flex/interactive/development/restful_api.md", "flex/interactive/getting_started.md", "flex/interactive/glossary.md", "flex/interactive/installation.md", "flex/interactive/overview.md", "flex/interactive/sdk.md", "flex/interactive/stored_procedures.md", "flex/interactive/tools.md", "flex/interactive/tools/admin_tool.md", "flex/interactive_intro.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/llm_assistant.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/optimizer.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "learning_engine/tutorial_node_classification_pyg_k8s.md", "learning_engine/tutorial_node_classification_pyg_local.md", "loading_graphs.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetworkX APIs", "Tutorial: Graph Operations with NetworkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of GAE", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to instrument", "How to Submit Pull-requests", "How to Test", "Coordinator", "Coordinator RESTFul API", "Engine Configuration", "Using Custom Graph", "Data Import Configuration", "Data Model", "Deployment", "GraphScope Interactive Development guide", "Create c++ Stored Procedures on GraphScope Interactive", "Turning Cypher Queries into Stored Procedures with GraphScope Interactive", "AdminServiceGraphManagementApi", "AdminServiceJobManagementApi", "AdminServiceProcedureManagementApi", "AdminServiceServiceManagementApi", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "GraphServiceEdgeManagementApi", "GraphServiceVertexManagementApi", "JobResponse", "JobStatus", "LongText", "Parameter", "PrimitiveType", "Property", "PropertyArray", "QueryRequest", "QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "UtilsApi", "VarChar", "VarCharVarChar", "VertexData", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Java SDK Reference", "gs_interactive.AdminServiceGraphManagementApi", "gs_interactive.AdminServiceJobManagementApi", "gs_interactive.AdminServiceProcedureManagementApi", "gs_interactive.AdminServiceServiceManagementApi", "BaseEdgeType", "BaseEdgeTypeVertexTypePairRelationsInner", "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams", "BasePropertyMeta", "BaseVertexType", "BaseVertexTypeXCsrParams", "ColumnMapping", "CreateEdgeType", "CreateGraphRequest", "CreateGraphResponse", "CreateGraphSchemaRequest", "CreateProcedureRequest", "CreateProcedureResponse", "CreatePropertyMeta", "CreateVertexType", "DateType", "EdgeData", "EdgeMapping", "EdgeMappingDestinationVertexMappingsInner", "EdgeMappingSourceVertexMappingsInner", "EdgeMappingSourceVertexMappingsInnerColumn", "EdgeMappingTypeTriplet", "EdgeRequest", "EdgeStatistics", "FixedChar", "FixedCharChar", "GSDataType", "GetEdgeType", "GetGraphResponse", "GetGraphSchemaResponse", "GetGraphStatisticsResponse", "GetProcedureResponse", "GetPropertyMeta", "GetVertexType", "gs_interactive.GraphServiceEdgeManagementApi", "gs_interactive.GraphServiceVertexManagementApi", "JobResponse", "JobStatus", "LongText", "ModelProperty", "Parameter", "PrimitiveType", "PropertyArray", "QueryRequest", "gs_interactive.QueryServiceApi", "SchemaMapping", "SchemaMappingLoadingConfig", "SchemaMappingLoadingConfigDataSource", "SchemaMappingLoadingConfigFormat", "SchemaMappingLoadingConfigXCsrParams", "ServiceStatus", "StartServiceRequest", "StoredProcedureMeta", "StringType", "StringTypeString", "TemporalType", "TemporalTypeTemporal", "TimeStampType", "TypedValue", "UpdateProcedureRequest", "UploadFileResponse", "gs_interactive.UtilsApi", "VarChar", "VarCharVarChar", "VertexData", "VertexMapping", "VertexRequest", "VertexStatistics", "VertexTypePairStatistics", "Python SDK Reference", "RESTful API Documentation", "Getting Started", "Glossary", "Installation", "Overview", "GraphScope Interactive SDK", "Stored Procedures", "Tools", "The Administrative tool", "GraphScope Interactive", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GIE for Cypher", "Using LLM as an Assistant in GIE", "Cypher Support", "Neo4j Ecosystem", "A Generic Graph Optimizer for GIE", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster", "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 41, 42, 44, 45, 46, 47, 52, 53, 90, 91, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200, 201, 206, 207, 209, 211, 217, 219, 220, 222, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 236, 237, 239, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 265, 283, 284, 285, 288, 296, 298, 299, 306, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 333, 334, 338, 339, 340, 343, 344, 346, 348, 349, 354, 357, 362, 363, 364, 365, 366, 367, 370, 373, 376, 379, 381, 382, 383, 385, 386, 388, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 449, 450, 451, 453, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 467, 470, 471, 473, 476, 477, 478, 479, 480, 481, 484, 485, 487], "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 44, 49, 51, 52, 53, 54, 55, 90, 91, 100, 106, 125, 126, 127, 128, 129, 164, 165, 174, 180, 199, 200, 201, 202, 205, 206, 208, 209, 211, 217, 218, 219, 220, 221, 223, 224, 228, 229, 231, 232, 236, 238, 246, 250, 253, 254, 255, 256, 257, 264, 265, 266, 267, 268, 269, 272, 274, 275, 277, 279, 281, 282, 283, 284, 285, 287, 288, 289, 290, 292, 293, 298, 305, 307, 313, 319, 322, 323, 327, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 465, 468, 469, 470, 471, 480, 481, 484, 487, 491, 492, 493, 495, 496, 497], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 34, 36, 37, 38, 41, 51, 211, 230, 232, 246, 248, 250, 251, 253, 257, 259, 262, 267, 326, 464, 469, 477, 480, 481, 487], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 34, 38, 41, 42, 48, 200, 202, 204, 206, 209, 211, 214, 217, 218, 219, 222, 225, 226, 227, 230, 234, 238, 239, 243, 245, 246, 247, 248, 249, 251, 255, 259, 267, 283, 307, 312, 320, 326, 327, 328, 464, 470, 471, 473, 477, 478, 479, 480, 490, 491], "gae": [0, 3, 10, 12, 14, 15, 28, 32, 211, 216, 232, 233, 244, 247, 251, 252, 253, 259, 283, 327, 488, 489], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 39, 42, 44, 45, 46, 47, 48, 52, 53, 54, 55, 90, 91, 100, 117, 125, 199, 200, 201, 202, 203, 204, 206, 208, 210, 211, 213, 217, 219, 221, 222, 225, 227, 228, 229, 230, 232, 233, 235, 238, 239, 240, 241, 242, 243, 245, 246, 248, 252, 253, 255, 256, 259, 326, 327, 328, 329, 464, 466, 467, 468, 469, 470, 471, 472, 476, 477, 478, 479, 480, 481, 484, 487, 488, 490, 491, 492, 495, 497, 498], "offer": [0, 2, 9, 12, 20, 34, 42, 45, 46, 47, 48, 51, 200, 201, 204, 206, 216, 219, 223, 225, 229, 233, 234, 244, 246, 250, 251, 476], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 47, 204, 209, 211, 214, 218, 235, 243, 245, 246, 247, 249, 313, 320, 367, 411, 413, 464, 476, 481], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 41, 44, 46, 47, 204, 206, 211, 214, 217, 218, 219, 220, 221, 222, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 257, 259, 263, 266, 279, 288, 290, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 326, 327, 328, 329, 343, 368, 370, 383, 384, 385, 393, 395, 412, 413, 414, 421, 423, 424, 442, 454, 456, 458, 462, 463, 464, 466, 467, 468, 470, 471, 473, 475, 476, 477, 478, 479, 481, 484], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 44, 48, 49, 87, 108, 161, 182, 201, 202, 204, 208, 209, 211, 229, 230, 234, 239, 240, 244, 245, 246, 248, 249, 250, 251, 252, 254, 323, 329, 464, 471, 476, 477, 480, 481, 485], "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 41, 42, 44, 46, 47, 49, 51, 100, 174, 199, 201, 202, 204, 205, 207, 211, 216, 218, 222, 225, 226, 228, 230, 233, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 312, 314, 315, 316, 317, 318, 319, 321, 324, 327, 464, 470, 471, 473, 476, 477, 480, 491, 494, 495], "analyz": [0, 7, 13, 19, 27, 229, 244, 245, 247, 248, 250, 318, 476], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 49, 117, 191, 200, 201, 202, 203, 204, 206, 208, 209, 211, 216, 218, 219, 222, 224, 225, 229, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 262, 264, 270, 271, 276, 281, 282, 286, 294, 295, 312, 314, 315, 316, 317, 318, 322, 326, 336, 342, 358, 359, 374, 391, 407, 426, 456, 464, 466, 467, 470, 471, 473, 476, 478, 479, 481, 487, 488, 490, 491, 496], "least": [0, 6, 37, 230, 329, 363, 385], "effort": [0, 34, 204, 228, 252, 476], "cover": [0, 6, 15, 41, 237], "wide": [0, 11, 12, 24, 204, 220, 232, 233, 237, 244, 245, 247, 248, 249, 251, 316, 475, 481], "rang": [0, 13, 18, 46, 47, 225, 226, 228, 230, 233, 236, 237, 239, 240, 241, 242, 244, 245, 248, 251, 254, 256, 257, 270, 271, 281, 282, 286, 294, 295, 312, 317, 321, 369, 371, 373, 376, 379, 391, 397, 411, 412, 413, 414, 442, 464, 469, 476, 487, 490, 491, 495, 496], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 39, 52, 53, 54, 55, 90, 91, 117, 125, 126, 127, 128, 129, 164, 165, 191, 199, 200, 202, 203, 204, 211, 217, 218, 221, 229, 231, 233, 234, 246, 247, 248, 249, 252, 254, 255, 257, 267, 316, 395, 419, 475, 485], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 233, 244, 245, 246, 247, 250, 254, 255, 259, 314, 322, 415, 456, 461, 465, 475, 484], "detect": [0, 6, 8, 9, 233, 244, 245, 247, 248, 250, 251, 255, 383, 387, 388, 389], "etc": [0, 6, 7, 15, 29, 214, 218, 225, 226, 234, 237, 243, 245, 246, 249, 252, 256, 312, 315, 316, 317, 320, 331, 343, 352, 357, 358, 464, 466, 477], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 44, 45, 46, 47, 48, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 201, 202, 203, 204, 206, 211, 214, 217, 218, 219, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 259, 262, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 329, 338, 339, 340, 353, 354, 359, 363, 364, 365, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 379, 382, 383, 386, 387, 388, 389, 391, 392, 393, 395, 396, 397, 398, 399, 403, 407, 409, 410, 411, 412, 413, 414, 415, 419, 421, 423, 425, 426, 429, 447, 456, 457, 458, 459, 460, 464, 467, 470, 471, 473, 475, 476, 477, 478, 480, 484, 485, 497], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 47, 125, 199, 201, 214, 218, 221, 223, 224, 226, 228, 231, 233, 234, 237, 241, 242, 243, 244, 248, 251, 254, 255, 259, 312, 314, 316, 317, 318, 320, 323, 324, 326, 327, 329, 405, 406, 410, 411, 413, 415, 416, 417, 458, 459, 467, 487], "pie": [0, 1, 3, 8, 12, 34, 230, 232, 233, 247, 259, 262, 469, 481, 491, 493], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 51, 204, 206, 232, 233, 237, 244, 246, 247, 249, 251, 252, 259, 312, 317, 318, 476, 477, 481], "model": [0, 1, 3, 8, 9, 18, 45, 48, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 209, 214, 218, 224, 225, 226, 230, 232, 233, 236, 237, 238, 243, 244, 245, 247, 248, 251, 259, 314, 316, 318, 319, 383, 387, 391, 393, 395, 397, 403, 405, 406, 411, 412, 413, 414, 415, 419, 420, 454, 461, 471, 475, 481, 491], "highli": [0, 4, 12, 34, 224, 230, 233, 246, 247, 475], "optim": [0, 9, 12, 14, 34, 44, 46, 47, 51, 58, 61, 132, 135, 204, 206, 216, 218, 229, 230, 231, 233, 234, 236, 239, 240, 241, 244, 245, 246, 247, 248, 249, 250, 252, 255, 312, 324, 326, 476, 478, 491], "best": [0, 16, 244, 246, 248, 251, 252, 255, 464, 487], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 41, 44, 46, 48, 204, 216, 218, 223, 225, 228, 230, 231, 232, 234, 244, 246, 247, 249, 250, 251, 256, 314, 318, 320, 326, 421, 426, 456, 468, 470, 473, 477, 479, 481], "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 44, 45, 46, 47, 48, 49, 51, 100, 174, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 214, 217, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 230, 232, 233, 234, 235, 237, 239, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 256, 259, 263, 265, 289, 290, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 329, 338, 339, 342, 346, 367, 370, 383, 384, 385, 392, 393, 395, 411, 412, 413, 414, 421, 425, 426, 433, 435, 437, 442, 445, 450, 451, 456, 458, 464, 467, 468, 470, 471, 473, 475, 476, 477, 478, 479, 481, 484, 485, 487], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 41, 44, 46, 47, 48, 58, 61, 100, 132, 135, 174, 200, 201, 202, 204, 205, 206, 207, 208, 209, 211, 214, 218, 219, 220, 221, 223, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 264, 265, 289, 290, 299, 304, 312, 313, 314, 315, 316, 318, 320, 323, 325, 326, 327, 328, 329, 348, 349, 358, 370, 373, 377, 383, 384, 385, 391, 393, 397, 398, 400, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 421, 425, 429, 442, 447, 456, 458, 461, 462, 464, 466, 467, 469, 471, 475, 476, 479, 480, 481, 484, 485, 487, 491, 497], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 41, 45, 206, 211, 214, 218, 223, 228, 230, 239, 244, 245, 247, 249, 251, 252, 253, 264, 312, 315, 324, 369, 456, 470, 476, 477, 487], "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 52, 53, 54, 55, 90, 91, 100, 117, 125, 226, 229, 234, 241, 242, 243, 245, 246, 247, 248, 251, 255, 257, 312, 315, 316, 318, 329, 386, 395, 396, 403, 404, 407, 421, 422, 458, 462, 464, 476, 477, 478, 480, 491, 495], "box": [0, 246, 457], "manner": [0, 2, 17, 18, 32, 36, 204, 245, 247, 248], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 41, 44, 45, 47, 200, 203, 206, 211, 217, 218, 219, 222, 223, 225, 226, 228, 229, 230, 233, 235, 236, 239, 240, 243, 249, 252, 255, 313, 314, 318, 321, 323, 324, 326, 329, 383, 395, 410, 411, 413, 422, 442, 464, 467, 475, 476, 477, 491], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 51, 100, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200, 201, 202, 204, 206, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 251, 252, 254, 255, 256, 257, 258, 259, 260, 263, 265, 289, 299, 301, 305, 306, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 337, 339, 341, 343, 344, 345, 346, 347, 348, 349, 358, 359, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 464, 466, 467, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 484, 485, 487, 490, 491, 495, 496, 497], "full": [0, 4, 12, 16, 17, 18, 22, 34, 46, 100, 174, 226, 233, 234, 237, 244, 249, 251, 255, 312, 315, 316, 318, 374, 477, 481, 487, 496], "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 45, 46, 47, 52, 53, 54, 56, 60, 63, 64, 66, 70, 72, 73, 78, 79, 83, 84, 85, 86, 87, 89, 98, 99, 101, 108, 120, 121, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 206, 217, 223, 226, 228, 230, 233, 239, 241, 243, 246, 249, 253, 255, 257, 276, 277, 284, 285, 299, 313, 316, 318, 326, 329, 338, 340, 343, 350, 352, 358, 359, 362, 363, 367, 369, 370, 388, 391, 393, 395, 396, 397, 398, 399, 411, 415, 418, 421, 422, 427, 429, 442, 458, 464, 465, 467, 471, 475, 477, 480, 485, 492, 495], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 42, 44, 45, 47, 48, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 201, 204, 209, 211, 214, 217, 218, 220, 224, 226, 230, 231, 232, 236, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 259, 265, 312, 313, 314, 316, 317, 318, 320, 321, 323, 326, 327, 329, 464, 467, 470, 471, 473, 475, 477, 478, 480, 481, 484, 490], "bf": [0, 15, 17, 34, 252, 255, 487], "df": [0, 34, 475], "hit": [0, 34, 36, 255, 256, 329, 465, 470, 487], "lpa": [0, 7, 34, 245, 255, 487], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 210, 245, 252, 255, 256, 263, 470, 471, 479, 480, 487], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 51, 52, 53, 55, 100, 125, 126, 127, 129, 174, 199, 200, 201, 204, 206, 208, 211, 214, 217, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 256, 257, 273, 286, 289, 304, 312, 313, 314, 316, 317, 318, 319, 320, 322, 324, 326, 329, 346, 360, 361, 362, 363, 364, 365, 370, 373, 375, 376, 383, 384, 385, 387, 388, 391, 392, 393, 395, 397, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 423, 425, 442, 444, 447, 452, 456, 458, 459, 461, 462, 463, 464, 466, 468, 470, 471, 472, 473, 475, 476, 477, 481, 484, 485, 487], "find": [0, 4, 8, 9, 17, 22, 31, 32, 36, 37, 41, 45, 203, 211, 214, 216, 219, 226, 228, 230, 239, 243, 245, 247, 248, 252, 254, 263, 311, 329, 334, 353, 354, 383, 471, 476, 477, 484], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 31, 37, 38, 211, 213, 214, 218, 230, 247, 249], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 42, 44, 51, 53, 90, 91, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 204, 206, 209, 211, 214, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 263, 283, 284, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 343, 362, 364, 369, 371, 373, 376, 383, 386, 390, 391, 392, 393, 395, 398, 403, 404, 406, 407, 411, 412, 413, 414, 415, 416, 423, 430, 439, 451, 456, 458, 459, 463, 464, 466, 467, 470, 471, 475, 476, 478, 484, 487, 491, 492, 495, 497], "given": [0, 7, 9, 13, 14, 20, 34, 46, 204, 206, 208, 209, 214, 217, 218, 219, 225, 228, 229, 230, 237, 243, 245, 248, 249, 251, 255, 316, 318, 321, 324, 326, 328, 363, 370, 381, 393, 394, 395, 396, 397, 398, 399, 407, 415, 416, 417, 421, 422, 423, 424, 428, 456, 459, 460, 463, 464, 470, 471, 475, 476, 479, 480], "weight": [0, 7, 19, 20, 33, 46, 164, 200, 210, 225, 228, 230, 237, 245, 247, 252, 255, 284, 312, 314, 315, 316, 317, 318, 321, 324, 326, 329, 331, 332, 333, 337, 348, 349, 391, 403, 407, 411, 414, 454, 462, 463, 464, 466, 471, 496], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 204, 211, 218, 220, 223, 230, 236, 237, 244, 248, 312, 314, 320, 321, 322, 393, 475, 476], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 52, 53, 54, 55, 90, 91, 100, 117, 125, 204, 206, 214, 218, 219, 220, 222, 225, 228, 229, 230, 233, 237, 244, 245, 247, 248, 249, 254, 255, 256, 264, 270, 271, 280, 286, 288, 290, 291, 294, 295, 312, 315, 316, 318, 320, 321, 323, 326, 327, 329, 393, 395, 398, 417, 464, 475, 477, 479, 487, 491], "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 202, 204, 218, 219, 228, 230, 233, 234, 237, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 316, 317, 320, 322, 329, 410, 413, 414, 418, 423, 432, 455, 456, 468, 471, 477, 478, 487], "minimum": [0, 6, 211, 219, 223, 228, 230, 255, 383, 471], "distanc": [0, 7, 15, 17, 18, 245, 255, 329, 364, 403, 407, 411, 412, 413, 414, 415, 433, 445, 487], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 44, 45, 52, 53, 55, 126, 127, 129, 206, 208, 217, 218, 220, 226, 228, 229, 230, 243, 244, 245, 247, 248, 251, 253, 254, 256, 265, 272, 316, 327, 328, 329, 340, 344, 359, 383, 388, 390, 393, 395, 411, 413, 415, 464, 467, 470, 476, 484], "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 45, 47, 74, 75, 90, 91, 125, 148, 149, 164, 165, 199, 210, 217, 223, 225, 226, 228, 232, 233, 234, 237, 244, 245, 246, 247, 248, 249, 252, 254, 255, 256, 257, 262, 283, 313, 314, 315, 316, 317, 318, 321, 324, 326, 328, 329, 403, 408, 425, 426, 442, 467, 469, 473, 475, 477, 478, 481, 487, 492], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 46, 47, 49, 203, 204, 206, 209, 211, 214, 218, 226, 228, 230, 233, 234, 237, 239, 244, 246, 247, 248, 249, 250, 251, 255, 257, 312, 314, 316, 318, 322, 325, 326, 327, 329, 333, 364, 366, 370, 373, 383, 392, 398, 404, 413, 414, 456, 464, 466, 467, 470, 471, 475, 476, 480], "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 46, 47, 52, 126, 200, 204, 210, 217, 218, 220, 223, 225, 226, 228, 234, 237, 244, 245, 247, 248, 249, 254, 255, 256, 257, 285, 313, 314, 315, 316, 317, 318, 321, 324, 326, 387, 398, 408, 410, 425, 426, 437, 439, 450, 451, 457, 470, 471, 473, 475, 476, 477, 478, 487, 491, 492], "all_pairs_shortest_path_length": [0, 34], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 30, 33, 34, 37, 41, 45, 47, 49, 201, 202, 204, 206, 209, 211, 217, 219, 220, 223, 226, 228, 230, 234, 235, 237, 247, 248, 249, 251, 255, 274, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 329, 362, 363, 374, 383, 384, 385, 386, 387, 388, 389, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 461, 463, 464, 477, 481, 495], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 37, 45, 217, 218, 226, 229, 230, 234, 237, 243, 244, 247, 251, 255, 312, 313, 314, 315, 318, 321, 326, 456, 464], "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 211, 214, 228, 232, 237, 244, 246, 247, 251, 252, 255, 257, 315, 329, 351, 352, 358, 410, 464, 473, 481], "dissimilar": 0, "measur": [0, 6, 20, 218, 247, 249, 255, 313, 329, 407, 408, 441], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 47, 48, 201, 218, 223, 226, 228, 230, 234, 243, 247, 248, 252, 313, 314, 318, 319, 322, 324, 326, 328, 329, 357, 358, 379, 387, 388, 393, 395, 421, 422, 424, 457, 458, 464, 471, 475, 476, 477, 478, 479], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 45, 46, 47, 90, 91, 125, 164, 165, 199, 200, 201, 202, 209, 210, 219, 222, 225, 231, 245, 247, 248, 249, 254, 255, 256, 257, 274, 288, 302, 303, 304, 315, 318, 326, 327, 411, 426, 456, 461, 464, 467, 470, 471, 473, 477, 478, 485, 491, 492, 495], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 41, 45, 46, 47, 51, 52, 126, 200, 217, 218, 225, 226, 228, 229, 230, 234, 236, 237, 239, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 303, 312, 313, 314, 315, 316, 317, 318, 322, 323, 324, 326, 329, 338, 340, 358, 359, 364, 368, 370, 375, 381, 383, 385, 386, 387, 389, 390, 392, 393, 395, 396, 398, 403, 406, 408, 411, 412, 413, 414, 415, 418, 419, 421, 423, 424, 429, 432, 444, 449, 454, 458, 460, 461, 462, 464, 470, 471, 473, 475, 476, 477, 478, 481, 485], "attribute_assort": [0, 34], "nearest": [0, 255], "neighbor": [0, 6, 9, 13, 14, 17, 18, 210, 225, 228, 230, 234, 237, 241, 247, 248, 249, 255, 257, 312, 313, 315, 316, 318, 320, 321, 322, 324, 325, 329, 334, 335, 354, 406, 407, 421, 424, 457, 464, 473, 476, 487], "return": [0, 6, 9, 15, 18, 20, 51, 87, 108, 125, 161, 182, 199, 200, 210, 218, 220, 221, 222, 223, 225, 228, 229, 230, 237, 239, 241, 242, 245, 248, 255, 256, 257, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 305, 306, 307, 311, 312, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 327, 328, 329, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 466, 470, 471, 473, 476, 487, 496], "success": [0, 13, 22, 52, 53, 54, 55, 93, 117, 126, 127, 128, 129, 191, 200, 259, 314, 398, 429], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 44, 46, 48, 125, 164, 199, 200, 211, 214, 217, 219, 220, 224, 228, 230, 234, 236, 237, 239, 240, 241, 242, 243, 245, 252, 254, 255, 256, 257, 271, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 329, 331, 332, 333, 335, 339, 340, 343, 344, 348, 358, 362, 363, 365, 366, 367, 368, 370, 373, 375, 376, 378, 379, 380, 382, 383, 386, 387, 388, 389, 391, 392, 393, 395, 396, 399, 402, 404, 411, 412, 413, 414, 415, 421, 422, 426, 429, 442, 447, 456, 458, 459, 464, 466, 467, 471, 473, 476, 477, 478, 479, 485, 487, 489, 490, 491, 492, 494, 495, 496, 497], "1": [0, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 44, 46, 47, 48, 90, 91, 125, 164, 165, 199, 200, 209, 214, 217, 218, 219, 220, 224, 225, 226, 228, 230, 234, 236, 237, 239, 240, 241, 242, 243, 245, 248, 249, 252, 255, 256, 312, 315, 317, 318, 319, 321, 326, 327, 328, 329, 331, 332, 333, 335, 339, 340, 343, 348, 349, 352, 357, 358, 362, 364, 365, 366, 367, 368, 370, 374, 375, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 464, 466, 467, 471, 476, 477, 478, 479, 485, 487, 491, 492, 494, 495, 496, 497], "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 44, 46, 47, 48, 125, 164, 165, 200, 209, 217, 218, 219, 220, 224, 225, 228, 230, 234, 236, 237, 239, 240, 241, 242, 243, 245, 248, 249, 252, 255, 256, 312, 315, 316, 317, 318, 319, 321, 326, 329, 331, 332, 333, 335, 343, 344, 348, 349, 352, 357, 358, 365, 366, 367, 370, 375, 376, 381, 383, 385, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 403, 404, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 431, 433, 435, 436, 437, 441, 442, 444, 446, 447, 449, 456, 457, 458, 459, 464, 466, 467, 471, 475, 476, 478, 479, 487, 488, 489, 491, 492, 495, 496, 497], "average_degree_connect": [0, 255, 487], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 44, 48, 51, 87, 105, 108, 125, 161, 179, 182, 199, 202, 204, 206, 211, 218, 223, 228, 229, 230, 237, 242, 245, 249, 254, 255, 256, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 277, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 301, 304, 311, 313, 314, 316, 318, 321, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 340, 342, 343, 344, 346, 347, 348, 349, 353, 354, 358, 359, 362, 364, 366, 367, 369, 370, 371, 373, 374, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 460, 461, 462, 464, 466, 467, 471, 475, 476, 477, 484], "str": [0, 20, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 176, 177, 178, 180, 181, 182, 184, 186, 187, 189, 190, 194, 195, 196, 197, 198, 239, 240, 241, 243, 255, 256, 257, 263, 264, 270, 271, 272, 274, 281, 282, 283, 286, 288, 289, 290, 291, 294, 295, 324, 326, 327, 342, 344, 458, 464, 466, 470, 471, 477, 492, 497], "target": [0, 6, 17, 22, 24, 125, 200, 219, 228, 234, 235, 244, 245, 249, 251, 255, 257, 318, 320, 326, 329, 400, 402, 421, 424, 456, 477, 487], "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 44, 46, 47, 49, 204, 214, 217, 218, 219, 222, 226, 228, 230, 233, 237, 244, 245, 246, 247, 248, 249, 252, 254, 255, 256, 278, 284, 312, 314, 316, 318, 319, 320, 329, 400, 439, 454, 464, 476, 477, 481, 487, 496], "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 210, 214, 220, 223, 226, 229, 230, 237, 245, 248, 249, 254, 255, 256, 257, 312, 315, 316, 317, 318, 321, 324, 326, 327, 328, 329, 335, 358, 383, 386, 391, 393, 397, 403, 406, 411, 414, 421, 424, 426, 458, 464, 470, 471, 475, 476, 477, 487, 491, 495, 496], "sum": [0, 20, 223, 226, 241, 247, 255, 257, 329, 383, 388, 391, 393, 394, 395, 404, 411, 414, 415, 422, 423, 462, 464, 495], "fraction": [0, 255, 329, 383], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 44, 100, 174, 204, 206, 218, 220, 222, 228, 230, 237, 243, 248, 249, 255, 257, 262, 318, 322, 324, 373, 411, 413, 456, 464, 468, 477, 487, 492, 497], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 42, 45, 201, 216, 217, 218, 220, 221, 222, 224, 225, 228, 229, 230, 231, 234, 237, 243, 245, 247, 248, 249, 251, 256, 259, 313, 314, 316, 317, 318, 323, 324, 326, 329, 359, 373, 390, 429, 464, 475, 476, 477], "betweenness_centr": [0, 34, 329], "normal": [0, 6, 27, 211, 230, 255, 318, 326, 329, 386, 476], "endpoint": [0, 9, 10, 27, 28, 29, 44, 48, 52, 53, 55, 91, 125, 126, 127, 129, 165, 199, 200, 201, 204, 217, 219, 221, 224, 228, 229, 239, 243, 245, 254, 318, 327, 329, 471, 473, 477, 484, 487, 495, 497], "bool": [0, 6, 14, 15, 20, 82, 96, 132, 161, 179, 182, 210, 223, 243, 254, 255, 257, 301, 309, 326, 329, 336, 346, 348, 349, 358, 387, 397, 403, 407, 423, 464, 466, 471, 476, 497], "whether": [0, 37, 44, 46, 206, 217, 218, 225, 228, 230, 243, 244, 248, 254, 255, 313, 314, 318, 326, 386, 388, 391, 411, 422, 423, 464, 475, 476, 477, 478], "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 46, 51, 201, 217, 218, 220, 222, 226, 228, 230, 243, 244, 245, 249, 254, 255, 263, 266, 279, 288, 322, 323, 326, 328, 329, 359, 383, 411, 412, 413, 414, 464, 466, 471, 473, 476, 477, 478, 479], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 42, 45, 46, 47, 52, 126, 200, 204, 206, 208, 214, 216, 218, 219, 223, 224, 225, 230, 233, 234, 235, 236, 240, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 314, 315, 318, 320, 326, 329, 344, 383, 391, 397, 407, 456, 463, 464, 475, 476, 477, 484, 485], "count": [0, 6, 33, 51, 123, 124, 125, 197, 198, 199, 200, 218, 220, 223, 225, 226, 229, 230, 237, 245, 247, 254, 255, 316, 317, 321, 322, 325, 329, 339, 397, 464, 477, 491, 495], "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 41, 44, 45, 46, 47, 49, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 206, 208, 209, 211, 214, 217, 218, 219, 220, 223, 224, 226, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 259, 263, 266, 267, 268, 269, 270, 271, 273, 274, 276, 279, 281, 282, 283, 284, 285, 286, 289, 290, 291, 294, 295, 296, 298, 299, 307, 312, 313, 314, 316, 317, 318, 320, 321, 323, 324, 326, 328, 329, 340, 341, 346, 351, 352, 358, 359, 361, 362, 363, 365, 368, 369, 370, 371, 373, 374, 376, 378, 379, 382, 384, 385, 393, 395, 396, 397, 399, 400, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 420, 421, 422, 423, 424, 425, 429, 431, 437, 442, 446, 449, 450, 454, 456, 457, 458, 459, 461, 462, 464, 467, 468, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 484], "travers": [0, 6, 13, 15, 17, 201, 202, 204, 217, 218, 223, 226, 229, 234, 244, 245, 246, 247, 312, 315, 318, 320, 324, 327, 458, 464, 473, 476, 477, 478, 487, 495], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 37, 41, 42, 45, 46, 47, 51, 204, 211, 214, 217, 218, 220, 222, 223, 226, 228, 229, 230, 233, 234, 240, 243, 245, 246, 247, 248, 249, 250, 251, 254, 255, 259, 305, 312, 313, 314, 318, 320, 322, 326, 327, 329, 333, 388, 392, 416, 417, 421, 424, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 445, 448, 450, 451, 456, 464, 471, 475, 476, 477, 478, 484, 485], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 39, 44, 47, 49, 55, 129, 204, 206, 208, 209, 216, 217, 221, 222, 223, 228, 229, 237, 239, 241, 242, 243, 248, 250, 253, 254, 256, 312, 316, 318, 327, 328, 329, 364, 389, 393, 395, 396, 399, 415, 429, 458, 466, 471, 476, 477, 481, 494], "root": [0, 4, 27, 32, 36, 44, 207, 211, 243, 246, 364, 366, 457, 458, 475], "explor": [0, 17, 45, 46, 203, 209, 214, 219, 228, 230, 244, 245, 248, 476], "present": [0, 2, 20, 27, 46, 208, 225, 228, 230, 237, 238, 239, 240, 241, 242, 244, 245, 247, 259, 329, 340, 383, 464, 475, 476], "prior": [0, 12, 34, 45, 228, 230, 233, 244], "move": [0, 4, 6, 45, 204, 222, 246, 318, 421, 424], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 203, 229, 230, 234, 237, 238, 243, 244, 249, 312, 313, 316, 318, 320, 322, 323, 324, 390, 458, 470, 473, 476, 477, 479], "level": [0, 6, 12, 38, 44, 204, 214, 218, 244, 246, 249, 255, 320, 374, 421, 422, 461, 476, 477], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 135, 150, 153, 155, 157, 158, 160, 161, 162, 163, 167, 179, 180, 193, 197, 198, 210, 225, 226, 239, 241, 243, 254, 255, 256, 257, 289, 313, 314, 315, 316, 317, 318, 321, 324, 325, 326, 328, 329, 357, 362, 364, 366, 369, 371, 373, 374, 376, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 399, 400, 401, 402, 403, 405, 406, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 425, 426, 427, 428, 459, 464, 466, 471, 473, 477, 487, 495, 497], "evalu": [0, 6, 14, 15, 16, 18, 37, 233, 245, 246, 249, 252, 254, 255, 256, 267, 290, 299, 301, 305, 307, 326, 471, 481, 495], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 45, 47, 48, 49, 200, 202, 204, 208, 211, 214, 217, 218, 222, 226, 228, 230, 233, 236, 238, 239, 244, 245, 246, 247, 249, 251, 252, 254, 255, 257, 259, 312, 313, 314, 316, 319, 320, 321, 324, 326, 327, 329, 364, 383, 408, 410, 411, 415, 434, 439, 444, 456, 458, 462, 464, 467, 470, 471, 473, 475, 476, 477, 480, 481, 487], "known": [0, 6, 8, 9, 24, 32, 217, 220, 222, 223, 230, 247, 248, 255, 346, 364, 367, 416, 417, 434, 458, 479], "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 46, 126, 127, 128, 129, 164, 165, 174, 191, 200, 201, 204, 211, 217, 220, 222, 226, 229, 230, 233, 243, 250, 255, 256, 259, 305, 307, 313, 314, 316, 321, 324, 326, 362, 372, 377, 383, 386, 387, 388, 389, 391, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 411, 412, 413, 414, 415, 418, 419, 420, 421, 424, 429, 456, 459, 461, 464, 466, 470, 471, 475, 476, 477, 480], "max_round": [0, 255, 475, 487], "10": [0, 13, 15, 16, 17, 20, 27, 31, 47, 211, 213, 214, 218, 221, 226, 228, 230, 236, 237, 239, 240, 241, 242, 245, 252, 255, 313, 314, 315, 317, 318, 324, 326, 329, 331, 332, 333, 367, 373, 383, 386, 388, 397, 398, 399, 400, 402, 406, 411, 415, 419, 435, 441, 446, 459, 464, 471, 475, 477, 485, 487, 491, 495], "maximum": [0, 47, 217, 223, 228, 230, 247, 255, 315, 329, 383, 399, 414, 415, 416, 417, 422, 463, 477], "round": [0, 9, 14, 17, 24, 255, 257, 381, 391], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 41, 44, 46, 47, 48, 51, 126, 127, 128, 129, 164, 165, 174, 191, 200, 201, 204, 206, 208, 211, 214, 217, 219, 220, 226, 228, 230, 236, 239, 241, 243, 252, 254, 255, 256, 257, 274, 283, 305, 306, 309, 313, 314, 318, 325, 326, 328, 329, 331, 332, 333, 336, 358, 360, 361, 364, 366, 367, 369, 371, 373, 374, 376, 378, 379, 382, 383, 386, 387, 388, 389, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 456, 457, 459, 461, 462, 464, 466, 467, 471, 473, 475, 477, 484, 485, 497], "origin": [0, 4, 6, 9, 12, 13, 22, 45, 218, 225, 226, 228, 234, 239, 240, 249, 254, 256, 283, 312, 314, 326, 327, 383, 405, 411, 450, 458, 462, 464, 470, 471, 477, 478], "reciproc": [0, 329], "n": [0, 19, 20, 30, 33, 38, 44, 46, 51, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200, 206, 208, 218, 220, 221, 223, 228, 230, 233, 237, 245, 249, 252, 255, 256, 316, 318, 321, 323, 329, 339, 343, 344, 346, 350, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 381, 382, 383, 385, 386, 387, 392, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 425, 426, 429, 442, 457, 458, 459, 461, 464], "reachabl": [0, 329], "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 47, 51, 200, 211, 214, 223, 224, 236, 237, 238, 244, 245, 247, 249, 251, 253, 255, 256, 257, 277, 280, 285, 288, 289, 307, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 346, 350, 352, 354, 356, 357, 358, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 388, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 476, 478, 487, 490, 491, 496], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 34, 233, 244, 246, 247, 249, 251, 316, 322, 473, 476], "improv": [0, 6, 9, 17, 19, 23, 204, 226, 246, 249, 250, 251, 480], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 41, 47, 51, 125, 199, 200, 201, 204, 206, 211, 214, 218, 219, 220, 222, 225, 226, 228, 230, 233, 234, 235, 236, 237, 243, 244, 246, 247, 248, 249, 250, 251, 254, 255, 256, 259, 312, 313, 316, 317, 318, 322, 323, 326, 329, 362, 403, 410, 411, 425, 426, 458, 464, 466, 471, 475, 476, 477, 480, 481, 484], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 46, 204, 211, 217, 218, 223, 228, 230, 232, 237, 243, 244, 247, 248, 250, 251, 255, 314, 316, 318, 325, 329, 339, 373, 381, 383, 385, 390, 392, 403, 405, 414, 471, 476, 477, 480, 481], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 41, 47, 51, 200, 204, 211, 214, 216, 217, 218, 223, 226, 228, 230, 234, 237, 243, 245, 248, 249, 251, 254, 255, 257, 263, 264, 304, 312, 313, 314, 315, 316, 318, 322, 326, 329, 338, 362, 363, 366, 367, 370, 379, 380, 383, 392, 393, 398, 400, 401, 402, 403, 404, 406, 421, 424, 432, 435, 439, 442, 448, 449, 450, 456, 458, 460, 464, 470, 471, 473, 475, 476, 477, 480, 491, 495], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 41, 47, 211, 220, 225, 244, 246, 247, 248, 254, 255, 329, 397, 411, 470, 476, 477], "ratio": [0, 13, 230, 456], "actor": [0, 200, 206, 230, 244, 441], "group": [0, 2, 204, 211, 218, 241, 243, 245, 247, 248, 254, 320, 326, 387, 388, 389, 391, 408, 436, 454, 475, 477, 495, 497], "who": [0, 11, 29, 204, 230, 244, 248, 319, 324, 477], "closeness_centr": [0, 34], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 46, 47, 201, 204, 206, 208, 211, 213, 214, 216, 217, 219, 222, 225, 227, 228, 229, 230, 231, 232, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 251, 253, 256, 259, 267, 313, 314, 318, 320, 471, 472, 475, 476, 477, 478, 480, 481, 491], "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 44, 45, 46, 125, 199, 204, 206, 208, 214, 222, 225, 226, 228, 230, 234, 236, 237, 240, 243, 244, 245, 247, 248, 249, 255, 256, 257, 304, 312, 314, 318, 322, 324, 326, 329, 371, 374, 381, 383, 403, 408, 421, 424, 432, 451, 461, 471, 476, 477, 479], "being": [0, 47, 226, 237, 248, 326, 363, 393, 473, 476, 477, 478], "cliqu": [0, 6, 230, 244, 247, 384, 385, 389, 390, 392, 406], "complet": [0, 14, 31, 33, 34, 200, 218, 222, 226, 230, 243, 246, 312, 314, 318, 339, 364, 365, 367, 369, 370, 376, 381, 390, 421, 424, 448, 464, 477], "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 44, 45, 47, 203, 211, 214, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 230, 232, 233, 235, 237, 243, 244, 245, 247, 248, 249, 251, 255, 256, 259, 263, 312, 313, 314, 315, 316, 318, 319, 321, 322, 324, 326, 329, 339, 343, 346, 358, 364, 369, 374, 383, 393, 394, 395, 397, 403, 406, 421, 422, 424, 440, 444, 458, 464, 470, 471, 475, 476, 477, 479, 481, 484, 485, 491], "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 45, 47, 52, 77, 90, 125, 126, 151, 164, 199, 200, 204, 210, 217, 218, 222, 223, 225, 226, 228, 234, 236, 237, 239, 240, 241, 242, 244, 245, 247, 248, 249, 251, 254, 255, 256, 257, 268, 269, 272, 277, 284, 288, 289, 307, 312, 313, 314, 315, 316, 317, 318, 320, 321, 324, 325, 326, 327, 328, 329, 331, 332, 333, 336, 339, 340, 342, 343, 344, 346, 348, 349, 352, 353, 355, 357, 358, 359, 363, 365, 366, 367, 368, 369, 370, 373, 375, 376, 377, 380, 381, 383, 385, 388, 389, 391, 393, 394, 395, 397, 399, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 448, 449, 450, 451, 454, 458, 461, 462, 463, 464, 465, 467, 470, 471, 473, 475, 477, 478, 479, 487, 491, 492, 496], "u": [0, 6, 14, 16, 18, 20, 37, 210, 211, 226, 230, 243, 245, 255, 318, 322, 324, 326, 329, 335, 358, 370, 383, 397, 403, 406, 411, 414, 426, 464, 476, 487, 497], "equal": [0, 10, 211, 223, 228, 230, 236, 240, 243, 245, 329, 381, 383, 414, 419, 457, 491], "degree_assortativity_coeffici": [0, 255, 487], "hold": [0, 10, 20, 48, 228, 254, 255, 256, 257, 283, 291, 314, 326, 329, 464, 470], "numer": [0, 20, 223, 228, 244, 246, 247, 255, 256, 329, 464, 470, 476], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 44, 46, 47, 51, 57, 58, 67, 82, 84, 87, 90, 91, 93, 96, 97, 102, 103, 108, 114, 120, 164, 165, 169, 188, 194, 210, 211, 217, 218, 220, 223, 234, 239, 241, 243, 247, 249, 254, 255, 256, 257, 290, 299, 311, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 338, 358, 373, 383, 411, 412, 413, 414, 421, 423, 424, 456, 457, 458, 464, 466, 467, 470, 471, 473, 475, 476, 477, 478, 487, 495, 496, 497], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 44, 45, 46, 47, 48, 200, 201, 203, 206, 208, 211, 217, 219, 220, 222, 228, 230, 236, 243, 245, 251, 255, 256, 259, 311, 313, 314, 318, 319, 322, 323, 325, 326, 327, 328, 329, 334, 335, 337, 344, 348, 349, 358, 359, 364, 365, 366, 367, 369, 370, 371, 373, 374, 376, 378, 379, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 424, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 456, 459, 460, 462, 464, 466, 467, 470, 471, 473, 476, 477, 478, 484, 485], "fals": [0, 13, 15, 17, 18, 19, 20, 44, 46, 48, 204, 217, 222, 228, 241, 242, 243, 254, 255, 257, 305, 312, 313, 314, 318, 324, 326, 328, 329, 342, 346, 348, 349, 358, 360, 361, 386, 387, 388, 391, 397, 407, 422, 464, 467, 471, 475, 477, 487, 496], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 41, 44, 45, 47, 200, 204, 211, 214, 218, 219, 220, 222, 223, 225, 226, 227, 230, 234, 237, 238, 239, 243, 244, 245, 246, 248, 249, 250, 251, 254, 255, 256, 257, 259, 304, 312, 313, 314, 315, 316, 318, 321, 322, 323, 324, 326, 327, 329, 346, 348, 349, 352, 357, 358, 364, 379, 381, 383, 394, 398, 403, 411, 412, 413, 414, 415, 421, 424, 430, 431, 435, 436, 440, 446, 448, 451, 454, 456, 458, 462, 464, 468, 470, 471, 477, 479, 481, 491, 492, 495], "adjac": [0, 10, 16, 20, 24, 228, 230, 249, 255, 315, 320, 329, 352, 385, 409, 427, 442, 456, 457, 464, 465, 476], "direct": [0, 9, 10, 15, 45, 47, 217, 230, 234, 237, 240, 243, 245, 246, 249, 254, 255, 275, 305, 312, 314, 318, 321, 324, 326, 329, 334, 339, 345, 360, 371, 384, 385, 386, 387, 388, 391, 395, 396, 398, 407, 408, 409, 410, 421, 422, 431, 458, 462, 464, 465, 467, 471, 475, 476, 478, 492, 496, 497], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 41, 45, 47, 230, 243, 244, 246, 251, 252, 259, 313, 316, 317, 318, 321, 322, 323, 324, 329, 358, 363, 370, 446, 451, 460, 464, 477, 481], "separ": [0, 6, 17, 30, 36, 206, 217, 219, 230, 244, 251, 313, 314, 411, 466, 476, 477], "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 45, 46, 47, 52, 53, 54, 55, 90, 91, 126, 127, 128, 129, 164, 165, 174, 191, 201, 204, 206, 211, 217, 222, 225, 226, 228, 230, 233, 236, 239, 243, 244, 245, 246, 248, 254, 255, 259, 274, 312, 313, 316, 318, 321, 323, 324, 329, 366, 388, 390, 413, 470, 471, 475, 476, 477, 491], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 41, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 206, 208, 211, 217, 218, 219, 222, 223, 225, 226, 228, 230, 241, 242, 243, 244, 246, 248, 254, 255, 256, 257, 263, 299, 313, 315, 318, 320, 322, 324, 326, 327, 329, 348, 349, 363, 430, 437, 442, 454, 460, 464, 466, 467, 470, 471, 475, 476, 477, 485, 487, 488, 490, 495, 497], "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 46, 47, 201, 206, 217, 220, 225, 226, 234, 240, 243, 244, 245, 246, 247, 248, 249, 255, 257, 312, 313, 314, 326, 327, 328, 343, 352, 357, 358, 363, 383, 407, 410, 415, 421, 424, 471, 473, 475, 476, 477, 479, 480, 494, 495], "degree_centr": [0, 34, 214, 255, 329, 465, 487], "centrality_typ": [0, 255], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 44, 48, 201, 217, 218, 225, 228, 232, 234, 244, 245, 247, 251, 406, 413, 429, 456, 473, 476, 477, 479, 481], "far": [0, 244, 313], "possibl": [0, 4, 6, 15, 46, 204, 209, 211, 218, 234, 248, 249, 255, 314, 320, 321, 329, 397, 405, 406, 421, 422, 423, 424, 456, 460, 476], "along": [0, 6, 10, 20, 24, 31, 208, 226, 228, 234, 257, 314, 318, 324, 458, 464, 477, 478], "branch": [0, 223, 230, 318, 364, 374, 495], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 44, 45, 47, 201, 208, 222, 228, 230, 237, 239, 254, 255, 259, 312, 318, 325, 364, 366, 367, 369, 371, 374, 376, 378, 379, 382, 393, 395, 396, 398, 400, 401, 402, 408, 409, 410, 416, 417, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 459, 466, 471, 473, 476, 477, 479], "backtrack": 0, "influenc": [0, 27, 329], "relationship": [0, 47, 204, 211, 218, 223, 224, 225, 230, 234, 237, 244, 247, 248, 249, 313, 314, 324, 476, 477], "high": [0, 6, 9, 204, 209, 214, 218, 225, 230, 243, 246, 247, 249, 250, 251, 252, 320, 398, 429, 471, 473], "score": [0, 230, 249], "contribut": [0, 4, 216, 476], "low": [0, 6, 7, 13, 32, 218, 236, 244, 245, 249, 250, 251, 456, 477], "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 44, 46, 47, 200, 202, 209, 214, 219, 221, 223, 229, 230, 234, 236, 243, 244, 246, 247, 248, 249, 252, 254, 255, 256, 257, 264, 265, 267, 268, 269, 272, 275, 277, 284, 285, 289, 290, 299, 316, 317, 318, 321, 323, 326, 327, 328, 329, 331, 332, 333, 335, 336, 338, 340, 342, 343, 344, 346, 347, 348, 349, 352, 357, 358, 359, 362, 363, 364, 366, 367, 369, 373, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 399, 403, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 426, 430, 432, 441, 452, 456, 457, 458, 459, 461, 462, 464, 466, 471, 475, 476, 477, 478, 479], "mean": [0, 2, 20, 29, 30, 36, 37, 44, 47, 204, 217, 218, 226, 239, 254, 256, 262, 301, 314, 317, 318, 328, 329, 369, 386, 393, 403, 412, 413, 414, 464, 467, 470, 471, 473, 475, 476, 477, 479, 484], "themselv": [0, 218, 230, 234, 458], "eigenvector_centr": [0, 34, 255, 329, 465, 487], "toler": [0, 255, 329, 383], "doubl": [0, 9, 14, 16, 18, 33, 46, 82, 96, 210, 223, 225, 226, 228, 243, 252, 257, 313, 323, 434, 458, 475, 479, 487, 495, 497], "error": [0, 2, 32, 36, 37, 38, 44, 49, 52, 54, 55, 90, 91, 100, 117, 126, 128, 129, 164, 165, 174, 191, 211, 216, 218, 220, 225, 254, 255, 318, 322, 329, 363, 464, 477], "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 46, 48, 204, 208, 211, 217, 218, 222, 225, 228, 230, 237, 239, 247, 248, 255, 322, 326, 329, 422, 423, 464, 471, 476, 477, 485, 490, 491], "converg": [0, 6, 9, 14, 17, 24, 249, 252, 255, 329], "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 44, 46, 47, 52, 126, 214, 217, 219, 220, 227, 228, 230, 234, 238, 239, 241, 245, 247, 249, 252, 254, 255, 257, 314, 315, 316, 317, 318, 321, 325, 329, 339, 344, 346, 355, 356, 357, 362, 363, 365, 367, 370, 374, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 428, 429, 437, 442, 447, 454, 456, 457, 459, 461, 462, 463, 464, 471, 473, 476, 477, 478, 485, 491, 495], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 228, 229, 234, 236, 237, 239, 240, 243, 244, 245, 246, 247, 249, 250, 255, 257, 312, 315, 324, 328, 329, 331, 332, 333, 334, 335, 340, 351, 352, 353, 354, 358, 359, 369, 370, 371, 373, 376, 378, 379, 382, 383, 411, 412, 413, 414, 415, 421, 424, 426, 458, 464, 487, 491, 496], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 208, 209, 214, 216, 218, 220, 221, 222, 228, 229, 230, 232, 234, 236, 237, 239, 240, 242, 243, 245, 247, 249, 255, 256, 305, 307, 312, 313, 314, 316, 319, 321, 323, 324, 325, 326, 329, 383, 411, 412, 413, 414, 464, 471, 475, 479, 481, 485, 487, 488, 489, 491, 492, 495, 496, 497], "rate": [0, 45, 204, 209, 244, 250, 255, 411, 413, 414], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 47, 204, 205, 211, 214, 217, 218, 222, 223, 225, 226, 228, 230, 234, 235, 243, 245, 247, 248, 249, 251, 252, 312, 313, 314, 315, 316, 318, 320, 322, 324, 326, 329, 335, 358, 365, 366, 368, 370, 371, 375, 392, 403, 404, 411, 412, 413, 414, 415, 419, 421, 424, 425, 430, 431, 439, 457, 458, 463, 464, 475, 476, 477, 484, 491], "hub": [0, 29, 255, 256, 329, 382, 470], "author": [0, 27, 49, 240, 245, 255, 329, 383, 471, 491], "estim": [0, 218, 225, 230, 247, 248, 324, 329], "within": [0, 13, 30, 36, 44, 46, 47, 51, 204, 206, 208, 209, 222, 223, 225, 226, 228, 229, 230, 235, 244, 245, 246, 247, 248, 249, 318, 327, 329, 383, 386, 387, 407, 413, 414, 471, 476, 485, 491, 495], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 41, 44, 45, 46, 47, 48, 51, 125, 199, 200, 201, 203, 204, 206, 211, 214, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 230, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 256, 259, 263, 265, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 367, 381, 383, 393, 395, 421, 442, 464, 467, 470, 471, 475, 476, 477, 479, 481, 491, 497], "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 41, 44, 45, 46, 47, 48, 51, 52, 53, 55, 126, 127, 129, 204, 211, 214, 217, 218, 222, 230, 233, 234, 235, 236, 239, 243, 244, 245, 246, 248, 249, 251, 254, 255, 259, 312, 313, 314, 316, 318, 321, 322, 323, 325, 326, 398, 411, 416, 422, 442, 458, 464, 467, 473, 476, 477, 479, 480, 481, 487], "rel": [0, 27, 44, 46, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 218, 219, 234, 243, 249, 314, 318, 329, 477], "immedi": [0, 6, 204, 218, 250, 255, 257, 318, 329, 467, 471, 477], "under": [0, 9, 10, 14, 17, 24, 38, 47, 204, 206, 225, 230, 236, 243, 244, 255, 259, 318, 320, 321, 329, 476], "consider": [0, 225, 226, 243, 329, 386], "katz_centr": [0, 34, 255, 329, 465, 487], "alpha": [0, 230, 255, 329, 403, 404, 415, 456], "beta": [0, 255, 329, 404, 415], "attenu": [0, 329], "factor": [0, 13, 219, 230, 255, 329, 364, 374, 396, 398, 476], "neighborhood": [0, 6, 244, 246, 249, 255, 318, 322, 329, 407], "maxim": [0, 6, 329, 417, 463], "subgraph": [0, 6, 9, 17, 33, 230, 231, 233, 245, 246, 247, 255, 277, 283, 312, 318, 320, 326, 327, 329, 340, 343, 365, 376, 407, 464, 475, 491, 495], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 45, 46, 201, 203, 206, 211, 214, 217, 218, 223, 225, 227, 228, 230, 234, 237, 238, 241, 243, 244, 245, 247, 249, 251, 252, 254, 257, 259, 312, 313, 316, 318, 321, 322, 323, 324, 326, 329, 331, 332, 333, 340, 343, 344, 359, 369, 370, 371, 373, 376, 391, 416, 417, 421, 422, 464, 467, 468, 471, 475, 476, 477, 485, 489, 495], "found": [0, 4, 9, 16, 17, 18, 36, 52, 54, 90, 91, 126, 128, 164, 165, 200, 211, 217, 229, 230, 234, 235, 246, 252, 305, 325, 383, 425, 426, 462, 464, 471, 475, 476, 477, 481], "recurs": [0, 6, 318, 366], "prune": 0, "less": [0, 2, 6, 13, 17, 27, 217, 222, 223, 228, 243, 255, 318, 325, 329, 381, 392, 403, 405, 477], "kkore": [0, 34], "order": [0, 6, 34, 46, 204, 218, 223, 225, 233, 246, 248, 249, 255, 256, 313, 318, 324, 329, 331, 332, 338, 362, 363, 366, 371, 378, 391, 392, 395, 427, 428, 431, 456, 457, 464, 470, 473, 477, 495], "That": [0, 27, 255, 323, 381, 424, 467, 479], "kshell": [0, 34], "fast": [0, 9, 20, 218, 255, 322], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 41, 44, 47, 48, 200, 211, 222, 223, 225, 226, 233, 234, 243, 244, 245, 248, 249, 251, 255, 299, 313, 314, 316, 318, 322, 329, 339, 346, 364, 393, 397, 399, 408, 411, 412, 413, 414, 442, 464, 471, 476, 477, 484, 491, 495], "assign": [0, 7, 9, 15, 18, 20, 36, 37, 217, 226, 235, 243, 245, 247, 249, 254, 255, 257, 329, 383, 391, 393, 395, 397, 411, 414, 419, 464, 467, 470, 473, 476, 477, 497], "unlabel": 0, "dure": [0, 6, 9, 13, 24, 200, 206, 211, 220, 228, 230, 246, 247, 249, 254, 313, 318, 383, 471, 473, 477, 478, 479, 480], "aim": [0, 22, 51, 204, 230, 240, 246, 247, 248, 249, 251], "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 46, 125, 207, 211, 216, 217, 221, 229, 230, 238, 243, 244, 245, 249, 254, 255, 259, 289, 313, 314, 322, 323, 324, 326, 475, 478, 484, 494, 495], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 44, 45, 46, 47, 48, 51, 125, 199, 200, 201, 203, 206, 208, 209, 211, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 236, 237, 238, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 259, 263, 312, 313, 314, 315, 316, 318, 321, 322, 324, 326, 328, 363, 383, 393, 397, 403, 406, 416, 417, 423, 426, 447, 460, 464, 471, 473, 475, 476, 477, 478, 480, 481, 484, 485], "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 41, 42, 44, 51, 105, 179, 201, 208, 211, 214, 217, 218, 220, 223, 225, 226, 228, 230, 233, 240, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 316, 317, 318, 321, 324, 326, 383, 411, 415, 464, 470, 473, 475, 476, 477, 484], "ldbc": [0, 4, 34, 204, 217, 219, 226, 227, 233, 243, 247, 251, 252, 475, 492, 497], "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 45, 47, 51, 204, 206, 211, 214, 217, 218, 225, 226, 229, 233, 246, 248, 249, 316, 318, 320, 322, 329, 383, 449, 456, 458, 464, 471, 475, 476, 478], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 34, 37, 44, 48, 51, 90, 91, 164, 165, 208, 214, 216, 223, 225, 228, 234, 243, 244, 246, 247, 248, 249, 251, 255, 257, 263, 265, 309, 311, 313, 316, 318, 322, 323, 326, 329, 348, 349, 353, 395, 404, 418, 462, 464, 471, 473, 475], "variant": [0, 31, 249, 252], "networkx": [0, 3, 7, 8, 12, 34, 214, 233, 250, 253, 254, 255, 289, 329, 331, 332, 333, 334, 335, 336, 338, 340, 342, 343, 344, 346, 347, 348, 349, 353, 354, 358, 359, 363, 364, 366, 367, 369, 370, 371, 374, 376, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 400, 401, 402, 404, 407, 408, 409, 410, 415, 416, 417, 426, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 457, 459, 464, 466, 467, 469, 493, 498], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 39, 41, 42, 44, 45, 46, 47, 48, 125, 201, 204, 211, 214, 217, 218, 219, 220, 223, 224, 225, 228, 230, 233, 236, 237, 243, 244, 245, 246, 248, 249, 252, 253, 254, 255, 257, 305, 311, 312, 313, 314, 316, 318, 321, 324, 325, 326, 327, 328, 329, 343, 367, 383, 397, 398, 403, 407, 415, 418, 419, 420, 425, 426, 444, 459, 462, 464, 467, 471, 475, 476, 477, 478, 481, 484, 489, 490, 494], "sampling_path": [0, 34], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 47, 228, 230, 234, 236, 249, 304, 456, 477, 479], "rank": [0, 6, 33, 241, 244, 254, 255, 256, 456, 470], "vote": [0, 257], "scheme": [0, 6, 9, 45, 46, 103, 177, 200, 217, 243], "With": [0, 4, 12, 19, 24, 34, 36, 41, 206, 207, 219, 225, 226, 228, 230, 233, 238, 239, 244, 245, 246, 402, 475, 484], "top": [0, 9, 12, 22, 34, 126, 127, 128, 129, 164, 165, 174, 191, 226, 228, 230, 251, 316, 438, 477, 495], "highest": [0, 230, 398], "elect": 0, "num_of_nod": [0, 255], "select": [0, 9, 15, 36, 47, 218, 222, 226, 234, 237, 243, 244, 247, 249, 256, 264, 270, 271, 281, 282, 286, 294, 295, 312, 318, 326, 383, 392, 415, 427, 461, 464, 470, 471, 475, 476, 495], "influenti": 0, "extract": [0, 203, 221, 223, 228, 243, 244, 245, 246, 255, 263, 327, 471, 473, 477], "weakli": [0, 255, 329, 403], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 44, 45, 46, 47, 48, 51, 202, 203, 204, 206, 211, 214, 216, 217, 218, 219, 220, 222, 223, 226, 228, 229, 230, 232, 233, 234, 237, 239, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 256, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 329, 386, 415, 418, 421, 422, 424, 464, 467, 470, 473, 476, 477, 479, 481, 484], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 37, 45, 214, 218, 219, 220, 223, 225, 226, 228, 230, 232, 233, 234, 237, 243, 246, 252, 274, 290, 313, 314, 315, 316, 326, 458, 464, 477, 481], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 41, 204, 206, 211, 219, 220, 222, 225, 230, 244, 245, 249, 250, 252, 253, 312, 326, 400, 401, 402, 473, 475, 481], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 42, 44, 45, 46, 47, 48, 49, 91, 165, 200, 201, 204, 205, 206, 208, 211, 214, 216, 217, 218, 222, 223, 225, 226, 228, 229, 230, 232, 233, 234, 235, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 273, 312, 314, 318, 319, 320, 324, 329, 360, 361, 383, 411, 412, 413, 414, 461, 464, 466, 471, 473, 475, 476, 477, 478, 481, 484, 487], "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 44, 45, 48, 49, 90, 93, 100, 125, 164, 174, 199, 200, 204, 206, 208, 209, 211, 217, 219, 221, 222, 229, 232, 235, 238, 239, 243, 244, 245, 246, 249, 251, 253, 254, 255, 256, 290, 301, 318, 322, 323, 324, 326, 327, 416, 417, 467, 468, 471, 476, 477, 478, 479, 480, 481, 484, 485, 487, 489], "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 41, 45, 48, 125, 201, 203, 204, 206, 209, 211, 219, 220, 221, 222, 229, 234, 235, 236, 238, 239, 245, 251, 253, 255, 259, 314, 319, 323, 324, 373, 393, 464, 471, 473, 476, 487, 495], "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 201, 222, 226, 232, 233, 247, 253, 259, 304, 316, 319, 324, 383, 393, 471, 476, 477, 481], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 44, 46, 47, 199, 204, 206, 208, 209, 214, 216, 220, 225, 226, 230, 236, 237, 238, 239, 246, 248, 249, 250, 251, 254, 312, 314, 320, 329, 464, 477], "extens": [1, 4, 6, 27, 36, 46, 218, 220, 223, 237, 244, 313], "henc": [1, 2, 10, 32, 243, 338, 461, 464, 477], "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 41, 44, 45, 46, 48, 51, 125, 199, 200, 201, 203, 204, 206, 211, 217, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 231, 235, 236, 238, 239, 243, 245, 248, 250, 251, 253, 255, 259, 311, 313, 314, 317, 318, 319, 322, 323, 326, 329, 342, 373, 383, 393, 395, 407, 412, 413, 414, 464, 471, 473, 475, 476, 477, 479, 484, 485, 487, 497], "flash": [1, 3, 8, 12, 244], "java": [1, 4, 8, 12, 14, 34, 49, 205, 209, 216, 219, 225, 231, 233, 246, 247, 251, 255, 259, 263, 476, 487], "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 44, 45, 49, 51, 200, 201, 202, 204, 206, 208, 209, 225, 228, 230, 233, 234, 241, 244, 246, 247, 254, 255, 256, 259, 262, 274, 286, 314, 318, 322, 324, 329, 362, 363, 373, 393, 404, 417, 418, 421, 422, 456, 458, 460, 461, 464, 476, 479, 485, 487, 489, 495], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 42, 49, 201, 205, 209, 211, 214, 216, 217, 220, 222, 224, 230, 231, 234, 236, 239, 243, 244, 245, 247, 248, 250, 251, 254, 255, 262, 312, 315, 319, 322, 324, 327, 328, 464, 466, 467, 475, 476, 484, 485, 487, 488, 490, 491, 493, 494, 495, 497], "These": [1, 4, 9, 15, 20, 24, 46, 47, 204, 217, 223, 234, 243, 244, 245, 247, 248, 249, 250, 318, 324, 476, 484], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 45, 46, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 206, 214, 217, 218, 219, 222, 224, 226, 228, 230, 234, 237, 239, 240, 241, 242, 244, 245, 247, 248, 249, 252, 254, 255, 256, 262, 263, 265, 266, 270, 271, 274, 275, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 291, 294, 295, 299, 305, 307, 312, 314, 315, 316, 317, 318, 321, 322, 323, 324, 326, 327, 328, 329, 334, 335, 338, 340, 343, 344, 346, 348, 349, 352, 353, 354, 357, 358, 359, 362, 363, 364, 366, 367, 369, 370, 371, 373, 374, 376, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 456, 457, 458, 459, 460, 461, 465, 466, 468, 469, 471, 473, 476, 477, 479, 488, 491, 496], "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 44, 45, 48, 49, 67, 87, 90, 91, 100, 108, 125, 141, 161, 164, 165, 174, 182, 199, 200, 202, 205, 207, 209, 211, 214, 217, 219, 220, 221, 223, 224, 225, 227, 228, 229, 231, 232, 233, 234, 246, 248, 250, 251, 252, 253, 254, 255, 256, 257, 264, 270, 271, 283, 286, 290, 294, 295, 299, 312, 314, 316, 318, 320, 324, 326, 328, 348, 349, 469, 470, 471, 476, 479, 481, 485, 491], "upon": [1, 2, 9, 14, 204, 223, 225, 251, 326, 477, 478], "pregel": [1, 4, 8, 12, 17, 22, 34, 233, 244, 247, 469, 481, 491, 493], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 41, 44, 90, 91, 164, 165, 214, 219, 225, 230, 237, 243, 245, 312, 462, 464, 497], "deploi": [2, 15, 33, 37, 125, 209, 211, 216, 218, 219, 220, 221, 229, 233, 236, 244, 246, 251, 314, 471, 473, 478], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 46, 203, 204, 211, 217, 219, 220, 221, 229, 235, 236, 238, 239, 244, 245, 246, 247, 248, 249, 255, 312, 324, 471, 476], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 41, 44, 47, 201, 206, 211, 218, 222, 225, 230, 233, 234, 243, 245, 246, 249, 259, 276, 313, 316, 317, 318, 322, 324, 326, 329, 392, 413, 444, 462, 464, 468, 470, 476, 477, 478, 479], "advantag": [2, 218, 233, 243, 250, 251, 480], "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 41, 44, 47, 90, 125, 164, 199, 200, 209, 211, 214, 217, 218, 219, 220, 224, 226, 228, 229, 230, 234, 237, 241, 242, 245, 249, 252, 255, 256, 315, 316, 317, 318, 321, 326, 327, 329, 331, 332, 333, 335, 340, 344, 348, 349, 365, 367, 370, 373, 379, 383, 384, 385, 387, 388, 389, 391, 395, 398, 399, 403, 404, 408, 410, 421, 422, 424, 426, 429, 432, 437, 441, 442, 445, 448, 451, 453, 456, 457, 458, 459, 464, 466, 467, 476, 479, 488, 491, 494, 495], "gie": [2, 32, 33, 216, 223, 230, 233, 243, 244, 248, 251, 252, 253, 283, 471, 488, 489, 498], "gle": [2, 32, 216, 233, 236, 237, 238, 244, 249, 251, 253, 488, 489, 496], "address": [2, 9, 14, 17, 23, 31, 44, 211, 225, 226, 241, 244, 249, 477, 495], "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 41, 46, 201, 204, 214, 217, 218, 222, 225, 228, 230, 231, 233, 234, 237, 243, 244, 245, 246, 247, 248, 249, 251, 252, 255, 274, 312, 313, 314, 315, 316, 317, 318, 320, 321, 323, 383, 387, 388, 389, 411, 414, 421, 441, 456, 464, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 484], "complex": [2, 4, 6, 12, 22, 34, 37, 42, 202, 204, 206, 214, 218, 219, 225, 226, 227, 228, 233, 234, 243, 244, 246, 247, 248, 249, 250, 251, 255, 315, 329, 393, 397, 412, 413, 414, 476], "relat": [2, 4, 13, 23, 24, 27, 33, 38, 45, 47, 57, 125, 131, 199, 200, 201, 202, 204, 208, 211, 216, 218, 222, 224, 225, 229, 234, 237, 240, 244, 245, 246, 248, 249, 254, 314, 318, 324, 420, 456, 461, 475, 476, 477], "show": [2, 14, 19, 20, 27, 29, 30, 38, 206, 208, 211, 218, 219, 230, 233, 238, 239, 245, 247, 248, 249, 315, 316, 324, 467, 471, 473, 476], "kubernet": [2, 29, 211, 214, 216, 217, 219, 233, 238, 241, 243, 245, 250, 471, 477, 488, 490, 491, 493, 497, 498], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 211, 214, 216, 219, 221, 229, 230, 233, 236, 238, 243, 244, 245, 246, 247, 248, 249, 250, 255, 314, 324, 329, 386, 465, 471, 477, 478, 485, 487, 494], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 44, 47, 48, 201, 204, 211, 214, 217, 218, 220, 222, 223, 225, 226, 230, 234, 243, 244, 249, 251, 313, 314, 315, 320, 329, 393, 464, 476, 477], "scenario": [2, 4, 6, 8, 12, 13, 41, 47, 204, 206, 218, 228, 229, 230, 234, 237, 243, 244, 248, 249, 251, 313, 314, 316], "quit": [2, 30, 222, 383], "common": [2, 6, 12, 15, 30, 48, 218, 222, 230, 234, 237, 243, 244, 246, 247, 248, 249, 251, 312, 313, 320, 321, 335, 456, 458, 464, 475, 476, 485], "intend": [2, 13, 36, 223, 456, 470], "analysi": [2, 7, 8, 11, 13, 218, 229, 230, 233, 243, 249, 250, 252, 253, 255, 417], "offlin": [2, 216, 233, 234, 246, 249, 250, 473], "everi": [2, 6, 23, 44, 47, 202, 228, 230, 237, 249, 254, 318, 329, 331, 332, 333, 348, 349, 367, 381, 444, 451, 464, 470, 476], "dai": [2, 20, 47, 230, 464, 467, 475], "export": [2, 4, 23, 29, 31, 33, 39, 203, 211, 219, 235, 475, 477, 490], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 44, 206, 208, 217, 226, 228, 244, 246, 251, 259, 272, 313, 315, 316, 317, 318, 339, 376, 390, 397, 403, 404, 411, 412, 413, 414, 415, 464, 467, 471, 476, 477, 479, 495], "real": [2, 6, 9, 12, 13, 34, 200, 214, 217, 226, 228, 233, 244, 245, 247, 249, 456, 475, 477], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 47, 200, 201, 211, 218, 219, 220, 223, 226, 228, 230, 233, 237, 241, 242, 243, 245, 248, 249, 252, 255, 313, 314, 318, 329, 362, 363, 399, 400, 401, 402, 412, 413, 414, 416, 417, 426, 429, 464, 476, 477, 479, 491, 495], "sampl": [2, 29, 30, 31, 33, 45, 51, 209, 216, 217, 233, 234, 241, 244, 245, 251, 259, 313, 314, 315, 317, 320, 322, 325, 328, 403, 423, 456, 477, 496], "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 41, 48, 211, 214, 217, 218, 223, 226, 228, 230, 237, 243, 248, 252, 257, 313, 314, 318, 320, 322, 325, 329, 383, 391, 397, 421, 432, 448, 470, 471, 475, 476, 477, 481, 484], "unnecessari": [2, 6, 9, 225, 230, 476], "capabl": [2, 6, 11, 16, 20, 204, 223, 224, 225, 228, 231, 244, 246, 248, 251, 464], "independ": [2, 6, 30, 244, 251, 313, 327, 340, 343, 391, 418, 464], "document": [2, 10, 27, 29, 33, 35, 36, 38, 49, 206, 208, 209, 211, 219, 222, 223, 224, 228, 229, 231, 233, 235, 249, 255, 312, 313, 319, 471, 472, 477], "walk": [2, 4, 32, 45, 201, 217, 230, 244, 245, 248, 318, 365, 376], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 44, 45, 200, 201, 202, 204, 206, 209, 214, 216, 217, 219, 220, 224, 225, 229, 230, 232, 233, 234, 236, 237, 238, 239, 244, 246, 247, 248, 249, 250, 254, 265, 313, 314, 316, 318, 322, 324, 393, 395, 398, 426, 432, 464, 471, 473, 475, 476, 479, 481], "standalon": [2, 23, 27, 32, 211, 216, 219, 220, 230, 243, 244, 478, 484, 497], "self": [2, 217, 230, 243, 299, 312, 315, 318, 329, 339, 352, 391, 393, 395, 397, 403, 411, 412, 413, 414, 415, 464, 465, 467, 471, 477, 492, 496, 497], "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 49, 125, 199, 200, 202, 205, 206, 208, 209, 211, 214, 217, 224, 230, 233, 237, 238, 239, 244, 246, 247, 248, 249, 250, 251, 252, 254, 471, 477, 478, 484, 487], "k8": [2, 4, 7, 17, 22, 30, 37, 38, 41, 48, 211, 214, 216, 217, 221, 229, 233, 236, 238, 243, 251, 253, 471, 477, 487, 488, 489, 491, 494, 497], "7": [2, 10, 20, 23, 27, 30, 31, 32, 125, 199, 211, 220, 228, 230, 252, 313, 319, 324, 331, 332, 344, 367, 429, 435, 437, 441, 442, 445, 447, 459, 464, 479, 490, 494, 495], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 44, 45, 46, 48, 51, 125, 200, 201, 203, 204, 206, 211, 214, 217, 218, 230, 232, 233, 234, 235, 237, 239, 240, 243, 244, 245, 249, 251, 252, 255, 259, 312, 313, 314, 316, 318, 319, 320, 322, 324, 329, 342, 393, 395, 400, 402, 411, 414, 454, 458, 464, 466, 470, 471, 473, 476, 477, 480, 481, 484, 485], "get": [2, 4, 6, 12, 16, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 41, 49, 52, 53, 54, 55, 90, 91, 126, 127, 128, 129, 164, 165, 200, 204, 209, 211, 216, 217, 218, 219, 223, 230, 234, 237, 243, 248, 250, 253, 255, 256, 257, 275, 312, 315, 316, 317, 318, 321, 326, 327, 328, 329, 362, 383, 454, 464, 470, 471, 473, 476, 477, 481, 484, 485, 487, 490, 491], "instal": [2, 4, 15, 16, 17, 19, 23, 33, 35, 41, 48, 49, 201, 209, 211, 217, 219, 221, 229, 245, 255, 259, 322, 464, 467, 471, 488, 489, 490, 491, 494], "client": [2, 17, 22, 23, 29, 33, 38, 41, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200, 201, 210, 218, 229, 231, 233, 239, 242, 254, 255, 324, 471, 473, 475, 476, 477, 478, 487, 489, 494], "prepar": [2, 4, 33, 36, 45, 209, 217, 220, 222, 234, 235, 236, 237, 239, 240, 245, 249, 253, 476, 491], "continu": [2, 6, 15, 16, 20, 27, 217, 218, 229, 230, 233, 234, 244, 245, 249, 252, 312, 383, 421, 424, 476, 477, 478], "incas": [2, 217], "doesn": [2, 13, 29, 32, 37, 38, 41, 204, 217, 230, 259, 318, 393, 395, 397, 464, 470, 479], "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 41, 203, 204, 208, 210, 211, 217, 226, 228, 230, 241, 242, 243, 246, 252, 254, 255, 257, 259, 265, 312, 317, 318, 324, 328, 329, 342, 358, 393, 395, 397, 417, 421, 422, 456, 458, 461, 464, 470, 477, 479, 496], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 41, 47, 200, 203, 217, 219, 220, 228, 233, 235, 243, 253, 255, 307, 314, 316, 317, 326, 392, 475, 476, 477, 478], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 46, 48, 49, 52, 54, 90, 91, 100, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 208, 209, 211, 217, 219, 220, 222, 225, 228, 229, 230, 241, 243, 244, 245, 248, 249, 254, 255, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 289, 292, 293, 299, 305, 306, 307, 316, 318, 321, 323, 326, 327, 342, 364, 366, 367, 369, 370, 371, 373, 374, 376, 378, 379, 381, 382, 383, 385, 386, 388, 391, 393, 395, 396, 398, 399, 400, 401, 402, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 427, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 458, 459, 464, 466, 467, 468, 471, 477, 478, 479, 480, 485, 487, 490], "distinct": [2, 51, 223, 228, 244, 245, 248, 369, 431, 457, 476], "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200, 225, 230, 237, 239, 243, 247, 249, 254, 255, 257, 278, 289, 304, 312, 316, 320, 321, 327, 329, 392, 400, 402, 411, 413, 464, 467, 469, 471, 476, 477, 481, 487], "entir": [2, 9, 34, 204, 206, 218, 230, 245, 249, 318, 329, 464], "discret": [2, 234, 249, 312, 383, 396, 398, 404, 408, 419], "util": [2, 4, 6, 9, 15, 32, 36, 41, 42, 45, 47, 51, 204, 208, 223, 224, 225, 230, 233, 235, 240, 243, 244, 246, 247, 250, 254, 255, 257, 328, 429, 475, 476, 477, 480], "either": [2, 13, 30, 34, 46, 201, 206, 211, 217, 225, 226, 229, 230, 237, 255, 314, 318, 326, 327, 367, 370, 383, 410, 421, 454, 464, 478], "aforement": [2, 51, 243, 247, 249, 313, 318, 477], "per": [2, 46, 204, 217, 225, 476, 477], "prefer": [2, 13, 27, 36, 44, 204, 205, 476], "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 125, 199, 211, 214, 220, 222, 227, 229, 230, 233, 236, 238, 241, 243, 245, 253, 255, 256, 274, 305, 306, 307, 309, 311, 326, 327, 464, 468, 469, 475, 477, 479, 484, 485, 487, 488, 489, 491, 492, 495, 497], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 223, 230, 237, 240, 243, 245, 249, 254, 255, 256, 257, 262, 312, 313, 326, 327, 328, 329, 373, 442, 464, 468, 471, 476, 477, 478, 487, 496], "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 41, 44, 46, 47, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 115, 116, 117, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 189, 190, 191, 194, 195, 196, 197, 206, 208, 217, 219, 221, 222, 223, 226, 228, 229, 230, 233, 235, 241, 243, 246, 248, 251, 255, 256, 259, 262, 283, 289, 290, 291, 301, 311, 313, 316, 318, 326, 327, 329, 331, 332, 333, 348, 349, 358, 364, 366, 367, 369, 371, 373, 374, 376, 378, 379, 382, 386, 387, 388, 391, 393, 395, 396, 398, 399, 400, 401, 402, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 456, 459, 462, 464, 466, 467, 470, 471, 477, 478], "control": [2, 6, 27, 38, 243, 244, 246, 254, 329, 464, 476, 477], "subset": [2, 6, 20, 204, 226, 228, 240, 245, 370, 381, 470, 471], "launch": [2, 8, 9, 17, 22, 29, 36, 41, 48, 200, 211, 214, 217, 227, 236, 238, 239, 245, 253, 305, 323, 468, 471, 477, 478, 484, 487, 491], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 41, 44, 45, 47, 48, 49, 51, 125, 200, 201, 204, 206, 211, 214, 217, 218, 223, 225, 226, 228, 230, 233, 234, 237, 239, 243, 244, 245, 247, 248, 249, 255, 257, 263, 312, 313, 314, 315, 318, 320, 322, 324, 326, 329, 341, 362, 365, 367, 370, 393, 395, 397, 398, 403, 406, 407, 411, 412, 413, 414, 415, 426, 429, 458, 464, 468, 470, 471, 477, 479, 480, 485], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 41, 45, 46, 47, 49, 51, 125, 199, 203, 206, 214, 216, 217, 220, 222, 223, 225, 226, 229, 230, 231, 233, 234, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 255, 256, 262, 263, 305, 307, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 327, 329, 331, 332, 333, 335, 340, 342, 343, 348, 349, 352, 357, 358, 363, 365, 367, 369, 370, 373, 376, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 397, 399, 400, 402, 404, 407, 411, 412, 413, 414, 415, 421, 424, 429, 454, 456, 457, 458, 459, 462, 464, 466, 467, 468, 470, 471, 475, 476, 477, 478, 479, 484, 485, 487, 491, 496], "set_opt": [2, 7, 15, 17, 19, 29, 38, 211, 220, 222, 236, 239, 240, 241, 242, 245, 485, 490], "show_log": [2, 7, 15, 17, 19, 29, 38, 211, 220, 236, 239, 240, 241, 242, 245, 311, 485, 490], "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 44, 46, 48, 200, 211, 217, 220, 225, 228, 229, 230, 236, 237, 239, 240, 241, 242, 243, 245, 254, 255, 257, 259, 301, 305, 309, 312, 313, 314, 318, 321, 324, 326, 329, 336, 345, 346, 347, 348, 349, 358, 360, 361, 367, 369, 387, 391, 393, 397, 403, 407, 410, 422, 462, 464, 466, 467, 471, 477, 478, 485, 487, 490, 495, 496, 497], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 214, 222, 239, 240, 241, 243, 255, 256, 301, 305, 326, 327, 471, 475, 479, 485, 487, 488, 489, 491, 492, 495, 497], "enabled_engin": [2, 311, 471], "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 36, 37, 41, 45, 47, 51, 200, 201, 204, 206, 208, 214, 219, 220, 222, 226, 228, 229, 230, 232, 233, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 263, 307, 312, 314, 315, 316, 317, 318, 319, 321, 322, 324, 326, 327, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 355, 356, 357, 358, 359, 363, 364, 366, 367, 369, 370, 373, 374, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 402, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 420, 421, 424, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 461, 462, 464, 466, 467, 470, 471, 473, 475, 476, 477, 478, 480, 481, 484, 485, 487, 490, 491, 492, 494, 495, 496, 497], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 46, 47, 200, 201, 204, 209, 218, 233, 237, 243, 244, 247, 249, 250, 312, 313, 316, 318, 320, 321, 322, 411, 413, 414, 461, 481], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 41, 44, 45, 48, 49, 51, 125, 201, 206, 207, 211, 216, 219, 235, 236, 241, 254, 313, 477, 478, 485], "line": [2, 4, 6, 7, 17, 36, 37, 38, 41, 51, 125, 200, 208, 216, 218, 235, 236, 246, 251, 312, 313, 464, 466, 477, 478, 485, 496], "releas": [2, 27, 31, 32, 35, 45, 48, 201, 211, 226, 239, 252, 421, 424, 470, 471, 477, 490, 494], "replac": [2, 17, 19, 22, 23, 29, 30, 45, 199, 218, 219, 222, 228, 246, 252, 315, 316, 317, 326, 464], "my": [2, 18, 29, 464, 467, 471, 477], "illustr": [2, 4, 29, 45, 46, 47, 225, 230, 234, 240, 241, 242, 247, 249, 315, 441], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 48, 125, 199, 214, 217, 218, 221, 229, 230, 237, 239, 243, 244, 245, 312, 318, 458, 473, 479], "connect": [2, 6, 15, 17, 19, 20, 27, 37, 41, 47, 125, 199, 201, 204, 205, 211, 217, 218, 224, 228, 230, 231, 233, 237, 239, 243, 244, 245, 246, 247, 249, 255, 256, 257, 313, 314, 316, 318, 321, 327, 329, 333, 350, 365, 367, 369, 371, 375, 376, 378, 379, 381, 382, 383, 385, 386, 387, 388, 390, 392, 397, 398, 403, 404, 406, 411, 413, 414, 415, 416, 417, 418, 420, 429, 439, 440, 442, 444, 446, 463, 464, 471, 478, 479, 487, 495], "servic": [2, 27, 28, 29, 38, 39, 46, 48, 49, 51, 52, 55, 126, 129, 205, 206, 207, 209, 221, 229, 233, 239, 244, 245, 247, 249, 254, 471, 478], "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 39, 44, 45, 46, 47, 48, 49, 93, 125, 167, 199, 201, 204, 207, 211, 213, 217, 223, 225, 228, 230, 233, 236, 237, 243, 247, 249, 251, 254, 255, 256, 305, 307, 311, 313, 314, 316, 317, 320, 321, 322, 324, 421, 464, 471, 475, 477, 480, 481], "addr": [2, 29, 257, 471], "ip": [2, 29, 217, 219, 229, 471, 477, 495], "port": [2, 23, 29, 38, 44, 48, 201, 204, 208, 211, 217, 219, 222, 229, 241, 243, 254, 471, 477, 495, 497], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 204, 211, 214, 217, 218, 220, 222, 226, 228, 230, 234, 236, 239, 243, 244, 245, 248, 249, 250, 251, 265, 313, 318, 320, 321, 322, 323, 326, 363, 386, 393, 395, 403, 464, 467, 470, 471, 476, 477, 479, 481, 484], "would": [2, 4, 20, 29, 31, 36, 37, 41, 47, 211, 219, 222, 230, 244, 254, 255, 318, 324, 467, 470, 471, 477], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 41, 200, 230, 245, 255, 264, 312, 316, 318, 402, 477], "wcc_result": 2, "wcc": [2, 13, 252, 255, 487, 492], "print": [2, 7, 16, 20, 29, 30, 33, 48, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 211, 214, 217, 220, 221, 222, 229, 230, 236, 237, 239, 240, 241, 242, 243, 245, 255, 256, 315, 317, 318, 321, 324, 326, 327, 329, 342, 391, 459, 464, 467, 475, 477, 485, 492, 495, 497], "to_datafram": [2, 7, 15, 214, 245, 256, 326, 470, 475, 487], "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 45, 46, 47, 51, 52, 53, 84, 87, 93, 108, 126, 127, 158, 161, 164, 167, 182, 200, 210, 211, 214, 217, 218, 219, 222, 223, 225, 231, 234, 237, 243, 245, 248, 249, 252, 254, 255, 256, 257, 283, 289, 291, 312, 313, 314, 315, 316, 317, 318, 321, 322, 324, 325, 326, 328, 421, 422, 461, 464, 467, 470, 471, 475, 477, 478, 485, 487, 488, 490, 491, 495, 496, 497], "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 214, 217, 223, 245, 246, 249, 255, 256, 364, 374, 381, 387, 391, 403, 411, 420, 452, 457, 470, 471, 475, 477, 487, 491, 492], "tip": [2, 13, 449], "encount": [2, 32, 37, 204, 211, 247, 265], "fail": [2, 37, 93, 100, 174, 200, 211, 218, 225, 228, 249, 329, 464, 477], "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 125, 201, 204, 218, 221, 223, 245, 246, 248, 254, 255, 256, 288, 319, 326, 471, 475, 477, 487, 491, 492, 495], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 44, 46, 125, 199, 201, 206, 211, 216, 218, 220, 226, 228, 230, 236, 243, 244, 245, 248, 255, 256, 288, 312, 314, 327, 329, 393, 395, 398, 399, 421, 422, 423, 424, 426, 438, 456, 464, 470, 477, 487, 490, 491, 495], "empti": [2, 19, 29, 41, 100, 174, 200, 208, 210, 228, 230, 243, 255, 257, 346, 370, 373, 403, 404, 442, 458, 464, 467, 477], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 45, 52, 126, 200, 201, 202, 208, 209, 211, 214, 216, 217, 218, 219, 220, 221, 224, 229, 236, 245, 246, 247, 249, 252, 253, 254, 255, 263, 265, 267, 296, 312, 314, 323, 324, 326, 471, 476], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 211, 214, 220, 224, 230, 236, 239, 240, 241, 242, 245, 249, 252, 255, 256, 312, 318, 324, 471, 475, 487, 489, 491, 495, 497], "load_modern_graph": [2, 7, 30, 33, 220, 245, 255, 327], "modern": [2, 6, 7, 33, 44, 45, 48, 51, 199, 200, 201, 206, 208, 209, 217, 219, 220, 225, 230, 233, 245, 246, 247, 473, 477, 478], "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 44, 45, 46, 47, 48, 55, 90, 100, 129, 164, 174, 200, 201, 204, 206, 208, 211, 214, 217, 218, 223, 226, 228, 230, 233, 237, 239, 241, 243, 245, 247, 248, 250, 255, 257, 306, 309, 313, 314, 315, 316, 317, 318, 319, 320, 321, 323, 326, 327, 456, 459, 464, 471, 476, 477, 484, 487, 494], "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 47, 48, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 200, 204, 210, 214, 219, 223, 225, 226, 230, 232, 233, 236, 237, 239, 243, 244, 245, 246, 247, 248, 249, 251, 252, 255, 256, 265, 314, 315, 316, 317, 318, 321, 324, 326, 327, 328, 329, 365, 383, 393, 395, 397, 398, 400, 401, 402, 405, 410, 411, 418, 419, 420, 421, 424, 426, 442, 447, 453, 455, 464, 466, 467, 470, 471, 473, 475, 476, 478, 480, 481, 487, 491, 494, 495, 497], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 39, 44, 45, 46, 48, 117, 200, 217, 218, 219, 222, 223, 225, 231, 233, 234, 237, 241, 243, 245, 247, 248, 251, 255, 263, 313, 314, 316, 318, 323, 324, 326, 329, 332, 365, 371, 375, 376, 378, 395, 458, 464, 466, 468, 470, 471, 475, 477, 479, 487, 488, 491, 492, 495], "store": [2, 10, 12, 13, 16, 17, 30, 34, 44, 45, 47, 48, 49, 125, 199, 200, 201, 204, 205, 208, 209, 211, 216, 217, 223, 224, 226, 228, 230, 233, 243, 244, 246, 247, 248, 250, 251, 256, 257, 270, 271, 286, 294, 295, 314, 320, 326, 327, 383, 388, 411, 412, 413, 414, 415, 464, 466, 471, 473, 475, 476, 478, 485, 487, 490], "pod": [2, 27, 28, 29, 30, 38, 41, 48, 200, 211, 214, 217, 239, 243, 471, 477, 485, 488, 490, 491, 497], "elimin": [2, 6, 14, 51, 314], "extran": 2, "resourc": [2, 27, 29, 33, 38, 203, 204, 211, 214, 229, 239, 244, 251, 255, 263, 383, 416, 471, 477, 480, 484, 490], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 44, 46, 47, 49, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 201, 203, 206, 211, 214, 218, 220, 222, 225, 226, 228, 230, 234, 237, 239, 243, 244, 245, 249, 251, 255, 259, 273, 312, 313, 314, 316, 317, 321, 322, 323, 324, 325, 362, 410, 411, 415, 464, 471, 476, 477, 480, 494], "equival": [2, 20, 211, 223, 225, 226, 228, 230, 318, 383, 420, 464], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 42, 45, 47, 202, 204, 206, 208, 211, 222, 223, 225, 226, 228, 229, 230, 234, 243, 244, 246, 249, 251, 254, 318, 322, 329, 362, 363, 370, 373, 393, 395, 400, 411, 412, 413, 414, 415, 423, 459, 462, 463, 464, 465, 466, 469, 475, 476, 481, 484, 487], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 46, 47, 48, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 200, 204, 206, 211, 214, 217, 218, 222, 223, 228, 229, 230, 234, 237, 239, 244, 246, 247, 249, 251, 252, 255, 256, 257, 265, 299, 305, 313, 314, 315, 316, 317, 318, 321, 322, 323, 325, 326, 328, 329, 373, 383, 403, 411, 412, 413, 414, 420, 464, 466, 467, 471, 473, 475, 476, 477, 479, 484, 485], "close": [2, 6, 27, 29, 30, 33, 200, 229, 237, 239, 244, 255, 314, 324, 327, 466, 471, 477, 491], "free": [2, 9, 37, 211, 237, 251, 404, 411, 421, 424, 426, 457, 463, 471], "delet": [2, 9, 27, 29, 30, 33, 48, 52, 53, 54, 90, 91, 125, 126, 127, 128, 164, 165, 199, 200, 211, 284, 323, 471, 473, 477, 490], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 47, 204, 208, 209, 217, 218, 226, 229, 230, 233, 244, 246, 247, 248, 249, 256, 286, 313, 325, 328, 464, 466, 476, 477], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 41, 44, 204, 208, 218, 226, 230, 233, 234, 244, 245, 246, 247, 249, 250, 276, 326, 429, 476, 481], "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 211, 214, 218, 232, 234, 237, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 259, 314, 317, 318, 320, 326, 374, 383, 386, 387, 395, 396, 397, 398, 399, 403, 404, 405, 406, 411, 416, 417, 420, 421, 423, 424, 447, 456, 461, 464, 465, 467, 469, 470, 480], "deriv": [3, 12, 34, 245, 248, 254, 256, 326, 329, 473], "grape": [3, 4, 15, 16, 22, 23, 34, 216, 232, 244, 250, 254, 263, 473, 476, 478, 479, 480, 481, 487, 493], "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 42, 51, 52, 53, 54, 55, 90, 91, 100, 117, 125, 200, 201, 202, 203, 204, 211, 214, 217, 218, 220, 223, 224, 225, 226, 230, 231, 232, 233, 236, 244, 246, 247, 248, 249, 250, 252, 313, 314, 319, 322, 461, 463, 473, 475, 476, 477, 479, 481, 487, 495], "sigmod": [3, 12, 14, 24, 34, 244, 487, 493], "2017": [3, 12, 14, 34, 244, 421, 422, 487], "further": [3, 6, 10, 14, 20, 27, 30, 34, 204, 214, 219, 223, 226, 228, 230, 245, 246, 256, 314, 326, 327, 342, 473, 476], "enhanc": [3, 4, 9, 200, 204, 225, 228, 245], "introduc": [3, 6, 10, 19, 20, 24, 46, 125, 199, 216, 218, 223, 225, 226, 228, 230, 232, 234, 244, 246, 248, 251, 312, 315, 316, 318, 320, 329, 441, 463, 476, 481], "lot": [3, 13, 37, 214, 230, 232, 481], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 44, 52, 53, 54, 55, 90, 91, 100, 117, 126, 128, 200, 204, 209, 218, 220, 225, 230, 235, 244, 245, 246, 254, 257, 264, 265, 306, 323, 326, 327, 329, 336, 342, 383, 395, 404, 406, 426, 455, 462, 464, 471, 473, 475, 476, 477, 479, 491], "featur": [3, 6, 9, 12, 23, 32, 34, 45, 125, 199, 209, 223, 225, 232, 234, 236, 239, 240, 244, 245, 248, 249, 250, 251, 254, 259, 312, 313, 320, 324, 326, 464, 471, 476, 481, 491, 496], "storag": [3, 9, 30, 42, 48, 58, 61, 132, 135, 204, 211, 218, 219, 223, 225, 226, 230, 243, 246, 249, 251, 291, 314, 475, 477, 478], "languag": [3, 12, 16, 35, 42, 201, 202, 205, 207, 209, 214, 218, 220, 225, 226, 228, 229, 230, 231, 233, 234, 237, 244, 245, 246, 247, 248, 251, 259, 327, 476, 477, 481], "pattern": [3, 6, 12, 23, 30, 44, 204, 218, 219, 222, 225, 226, 228, 233, 237, 244, 247, 251, 255, 317, 322, 477], "better": [3, 8, 12, 20, 24, 29, 34, 217, 218, 230, 232, 249, 251, 471, 477, 481], "integr": [3, 4, 9, 12, 13, 22, 23, 34, 46, 125, 199, 201, 218, 220, 222, 225, 231, 232, 244, 246, 248, 250, 251, 457, 476, 477, 479, 481], "big": [3, 6, 12, 37, 232, 246, 481], "overview": [3, 23, 34, 49, 201, 207, 209, 225, 230, 245, 473], "architectur": [3, 9, 203, 204, 244, 249, 255], "kei": [3, 4, 13, 20, 27, 45, 46, 47, 74, 75, 90, 91, 125, 148, 149, 164, 165, 199, 200, 209, 217, 220, 223, 224, 225, 228, 230, 243, 246, 248, 249, 250, 255, 256, 257, 288, 289, 290, 299, 315, 318, 324, 326, 329, 358, 407, 411, 412, 413, 414, 462, 464, 466, 467, 470, 471, 476, 477, 487, 497], "concept": [3, 246, 249, 312, 313], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 22, 34, 232, 233, 244, 246, 247, 481], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 34, 229, 234, 246, 254, 481], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 201, 211, 214, 217, 220, 223, 231, 233, 234, 236, 237, 238, 239, 240, 245, 249, 250, 253, 255, 320, 327, 470, 471, 473, 475, 491], "tune": [3, 214, 243, 244], "guid": [4, 7, 9, 16, 27, 29, 32, 37, 41, 44, 45, 46, 125, 199, 200, 201, 203, 204, 206, 208, 209, 216, 217, 220, 222, 224, 228, 229, 231, 236, 239, 240, 245, 259, 491], "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 49, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 202, 204, 206, 216, 218, 219, 222, 223, 230, 235, 244, 245, 246, 251, 252, 254, 255, 257, 262, 312, 313, 314, 315, 318, 319, 324, 383, 425, 468, 476, 477, 479, 484], "organ": [4, 51, 208, 222, 228, 230, 233, 234, 249, 253, 312, 314, 316, 320, 321, 400, 402, 441], "identifi": [4, 9, 13, 24, 47, 223, 226, 228, 230, 244, 245, 247, 255, 304, 391, 458, 461, 464, 471, 477, 484, 497], "simplic": [4, 9], "suggest": [4, 13, 218, 222, 230, 243, 246, 383], "prebuilt": [4, 41, 219], "docker": [4, 27, 32, 33, 36, 38, 41, 45, 201, 203, 208, 209, 211, 219, 233, 477, 484, 488, 491, 493, 494], "imag": [4, 29, 36, 38, 48, 201, 208, 211, 219, 233, 235, 241, 252, 315, 471, 484], "necessari": [4, 6, 23, 27, 37, 41, 45, 203, 206, 219, 220, 225, 229, 243, 266, 274, 279, 313, 314, 316, 318, 326, 476, 477, 485], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 41, 125, 203, 211, 219, 221, 222, 229, 230, 235, 236, 246, 249, 255, 318, 386, 391, 477, 484, 487], "shm": [4, 32, 41, 219, 235, 241, 489], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 41, 46, 210, 211, 217, 219, 229, 234, 235, 237, 241, 243, 249, 252, 257, 313, 315, 316, 318, 323, 325, 326, 369, 370, 381, 383, 384, 385, 386, 388, 389, 390, 391, 392, 395, 406, 415, 419, 421, 464, 475, 476, 477, 478, 489], "4096m": [4, 32, 41, 219, 235], "registri": [4, 27, 32, 41, 48, 219, 235, 241, 319, 471, 477, 489], "cn": [4, 23, 27, 29, 31, 32, 41, 48, 219, 235, 241, 243, 319, 477, 488, 489, 497], "hongkong": [4, 27, 32, 41, 48, 219, 235, 241, 477, 489], "aliyunc": [4, 23, 27, 29, 31, 32, 41, 48, 219, 235, 241, 243, 319, 477, 488, 489, 497], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 41, 48, 52, 53, 54, 55, 90, 91, 100, 117, 125, 165, 199, 219, 220, 222, 235, 236, 241, 243, 246, 247, 252, 255, 259, 319, 322, 329, 416, 425, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 444, 449, 471, 476, 477, 487, 488, 489, 490, 497], "latest": [4, 14, 17, 32, 37, 38, 39, 41, 48, 201, 203, 219, 222, 235, 236, 476, 477, 489, 494], "altern": [4, 45, 47, 223, 392, 411, 415, 464, 476, 477], "manual": [4, 9, 27, 30, 33, 125, 211, 244, 251, 326, 477], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 47, 48, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200, 201, 203, 204, 206, 208, 211, 217, 218, 220, 223, 225, 226, 228, 229, 230, 235, 237, 239, 241, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 257, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 329, 333, 334, 336, 337, 341, 343, 358, 359, 363, 364, 367, 369, 370, 374, 383, 392, 401, 407, 421, 422, 424, 426, 450, 458, 459, 462, 464, 471, 475, 476, 477, 480, 485], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 41, 44, 45, 48, 125, 199, 201, 203, 204, 211, 219, 222, 226, 237, 239, 243, 245, 312, 313, 314, 316, 317, 318, 319, 322, 324, 475, 477, 481, 484, 491], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 39, 45, 201, 211, 214, 216, 220, 224, 233, 239, 245, 246, 253, 255, 259, 319, 323, 329, 471, 476, 477, 478, 485, 490], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 44, 100, 174, 200, 206, 214, 222, 226, 228, 234, 246, 247, 249, 255, 256, 257, 267, 312, 313, 314, 315, 322, 323, 324, 329, 426, 437, 456, 464, 468, 470, 471, 473, 476, 477, 478, 485, 487], "clone": [4, 17, 22, 29, 30, 31, 32, 36, 37, 48, 125, 219, 222, 259, 319, 477, 489], "repositori": [4, 29, 36, 37, 48, 125, 217, 222, 259, 471, 477], "enter": [4, 126, 127, 128, 129, 164, 165, 174, 191, 218, 229], "analytical_engin": [4, 15, 17, 31, 36, 259, 487], "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 44, 45, 48, 200, 206, 211, 222, 229, 233, 254, 258, 260, 312, 323, 326, 471, 475, 484, 485, 488, 490, 491], "git": [4, 17, 22, 29, 30, 31, 32, 35, 37, 48, 125, 219, 222, 259, 322, 476, 489], "http": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 44, 48, 49, 125, 199, 211, 219, 220, 221, 222, 224, 229, 236, 239, 240, 245, 246, 247, 255, 259, 319, 322, 329, 383, 387, 388, 389, 403, 406, 413, 414, 416, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 443, 444, 445, 446, 448, 449, 450, 451, 456, 471, 476, 477, 487, 488, 489, 490, 491, 494, 495, 497], "github": [4, 22, 29, 30, 31, 32, 35, 48, 125, 219, 222, 246, 247, 255, 259, 319, 322, 414, 471, 476, 487, 489, 497], "alibaba": [4, 17, 22, 23, 29, 31, 32, 48, 52, 53, 54, 55, 90, 91, 100, 117, 125, 219, 233, 244, 246, 249, 250, 259, 319, 322, 487, 489, 497], "cd": [4, 17, 22, 29, 31, 32, 35, 48, 125, 203, 219, 221, 229, 259, 319, 322, 324, 477, 484, 485, 487, 489, 495], "sinc": [4, 6, 23, 24, 29, 30, 37, 44, 46, 47, 201, 204, 218, 222, 228, 230, 235, 239, 243, 244, 252, 265, 314, 318, 326, 362, 363, 393, 395, 442, 459, 466, 470, 475, 476, 477], "inherit": [4, 6, 9, 16, 218, 246, 254, 312, 322], "libgrap": [4, 16, 31, 34, 246, 259], "lite": [4, 16, 31, 34, 246, 259], "note": [4, 13, 14, 20, 27, 29, 37, 38, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 204, 206, 218, 222, 223, 225, 228, 230, 234, 239, 240, 243, 245, 246, 247, 255, 256, 257, 265, 304, 306, 314, 318, 326, 329, 338, 339, 342, 346, 359, 360, 361, 362, 363, 364, 370, 371, 376, 379, 381, 383, 384, 385, 386, 388, 390, 392, 393, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 424, 425, 426, 441, 456, 457, 458, 459, 461, 464, 466, 467, 470, 471, 475, 477, 484, 491, 497], "core": [4, 6, 12, 34, 37, 211, 218, 220, 244, 245, 246, 255, 259, 324, 329, 471, 491], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 44, 46, 47, 49, 204, 214, 218, 225, 229, 230, 240, 245, 246, 247, 248, 249, 255, 313, 314, 315, 326, 374, 393, 441, 456, 458, 464, 465, 475, 476, 477, 480], "partition": [4, 210, 322], "worker": [4, 9, 13, 14, 23, 28, 34, 44, 219, 237, 239, 241, 314, 317, 324, 471, 475], "between": [4, 6, 9, 10, 12, 13, 18, 19, 47, 200, 211, 216, 218, 225, 230, 231, 234, 247, 249, 254, 255, 313, 314, 316, 318, 324, 329, 386, 387, 388, 391, 397, 403, 404, 406, 410, 411, 412, 413, 415, 418, 420, 421, 422, 424, 429, 459, 461, 464, 476, 477, 484], "heavili": 4, "reus": [4, 30, 206, 225, 234, 237, 246, 255, 324, 326, 471, 473], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 48, 206, 226, 230, 236, 243, 250, 259, 265, 311, 322, 326, 373, 407, 464, 470, 471, 473, 475, 477, 484], "fulli": [4, 46, 204, 234, 237, 248, 255, 265, 406, 476, 487], "recommend": [4, 27, 30, 36, 37, 211, 217, 220, 222, 230, 234, 243, 244, 245, 249, 318], "locat": [4, 23, 27, 36, 38, 45, 46, 47, 103, 177, 200, 201, 203, 217, 219, 223, 230, 235, 243, 248, 258, 260, 314, 315, 326, 477, 478, 484], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 32, 36, 37, 41, 44, 45, 47, 48, 200, 211, 214, 217, 218, 220, 222, 225, 230, 231, 233, 235, 243, 244, 245, 249, 250, 251, 253, 254, 255, 313, 318, 322, 324, 326, 383, 393, 395, 403, 464, 470, 471, 473, 475, 476, 477, 478, 497], "therebi": [4, 204, 226], "fledg": [4, 12, 244], "coordin": [4, 15, 27, 29, 35, 37, 38, 41, 216, 220, 239, 254, 326, 376, 471, 477, 484, 485, 488, 489, 491], "while": [4, 6, 12, 19, 20, 29, 34, 46, 47, 201, 204, 206, 214, 217, 221, 223, 225, 226, 228, 229, 230, 234, 244, 246, 247, 248, 250, 251, 313, 318, 324, 360, 361, 421, 424, 426, 458, 464, 473, 476, 477, 485], "": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 41, 44, 45, 46, 47, 48, 51, 90, 91, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200, 201, 202, 204, 206, 208, 211, 217, 219, 221, 222, 223, 224, 225, 228, 229, 230, 231, 233, 234, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 252, 255, 265, 281, 282, 299, 312, 314, 316, 318, 321, 323, 325, 326, 329, 365, 376, 383, 386, 388, 391, 395, 398, 400, 401, 402, 418, 426, 427, 428, 451, 454, 456, 464, 470, 471, 473, 475, 476, 477, 478, 495, 496], "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 44, 45, 46, 47, 48, 204, 214, 217, 218, 223, 225, 226, 228, 230, 233, 234, 236, 237, 243, 244, 245, 246, 247, 248, 249, 251, 254, 255, 256, 257, 259, 263, 312, 313, 314, 316, 317, 318, 319, 326, 327, 329, 348, 349, 358, 384, 385, 410, 411, 415, 423, 436, 457, 458, 464, 470, 471, 475, 476, 477, 478, 481], "ship": 4, "6": [4, 10, 17, 18, 22, 31, 199, 200, 214, 220, 228, 229, 230, 245, 252, 255, 313, 318, 324, 329, 348, 367, 396, 397, 398, 415, 429, 431, 437, 438, 441, 444, 448, 449, 457, 459, 464, 477, 479, 487, 490, 491, 495], "graphalyt": [4, 251], "benchmark": [4, 34, 204, 226, 230, 233, 247, 249, 251, 383], "flatten": [4, 13, 241], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 211, 214, 230, 239, 249, 255, 317, 359, 367, 464, 476], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 41, 44, 45, 47, 125, 199, 201, 202, 204, 206, 214, 217, 218, 219, 220, 224, 225, 228, 230, 233, 245, 246, 248, 249, 254, 255, 256, 283, 318, 322, 326, 327, 329, 424, 468, 471, 473, 477, 479, 484, 485, 487, 491, 495], "written": [4, 12, 20, 47, 230, 244, 246, 248, 442, 473, 476, 479, 487], "giraph": [4, 7, 8, 12, 17, 23, 24, 232, 251, 481], "graphx": [4, 7, 8, 12, 17, 24, 232, 251, 481], "app": [4, 15, 16, 17, 18, 33, 256, 257, 259, 264, 267, 290, 296, 299, 313, 326, 469, 470, 476, 487], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 87, 108, 125, 161, 182, 201, 204, 218, 219, 244, 254, 255, 259, 477], "serv": [4, 27, 42, 200, 211, 222, 225, 233, 245, 246, 249, 314, 477, 484], "layer": [4, 6, 217, 218, 234, 237, 246, 249, 251, 312, 313, 316, 320, 324, 496], "cuda": [4, 252], "suit": [4, 36, 214, 219, 234, 249, 484], "gpu": [4, 246, 319], "acceler": [4, 27, 476], "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 210, 218, 247, 249, 257, 289, 326, 327, 473, 478, 481, 487], "extend": [4, 9, 17, 23, 204, 225, 226, 228, 229, 230, 251, 256, 313, 321, 322, 410, 476, 487], "loader": [4, 22, 219, 242, 254, 265, 276, 469, 478, 492, 493], "mutabl": [4, 246], "io": [4, 27, 30, 33, 41, 246, 247, 255, 323, 326, 414, 471, 477, 480, 494], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 46, 105, 179, 214, 233, 241, 244, 246, 248, 254, 257, 314, 393, 395, 432, 464, 467, 477, 487], "sub": [4, 12, 14, 18, 230, 233, 243, 256, 316, 318, 476, 481], "helper": [4, 484], "thread": [4, 6, 31, 44, 46, 217, 219, 234, 252, 325], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 200, 201, 208, 211, 218, 230, 237, 249, 254, 257, 325, 476, 487], "buffer": [4, 323], "sync": [4, 257, 323, 476], "serial": [4, 228, 229, 254, 326, 471, 476, 495], "vertex_map": [4, 13, 45, 46, 175, 195, 200, 305, 326, 471], "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 45, 200, 201, 217, 218, 220, 223, 226, 228, 229, 234, 243, 244, 247, 249, 255, 312, 313, 314, 320, 322, 324, 325, 326, 327, 374, 383, 393, 395, 398, 417, 458, 463, 464, 475, 476, 477, 478, 484], "map": [4, 6, 13, 45, 74, 75, 93, 104, 116, 148, 149, 200, 201, 208, 209, 223, 226, 228, 230, 247, 254, 313, 322, 326, 456, 471, 477, 478, 492, 495], "intern": [4, 13, 45, 52, 54, 55, 90, 91, 100, 117, 126, 128, 129, 164, 165, 174, 191, 200, 201, 226, 247, 326, 364, 487, 489], "frame": [4, 249], "wrap": [4, 243, 246, 254, 259], "becaus": [4, 37, 218, 222, 226, 230, 249, 312, 315, 329, 459, 476, 477], "reli": [4, 9, 19, 203, 222, 224, 319, 476], "templat": [4, 9, 15, 28, 48, 210, 241, 254, 476], "inadequ": 4, "usual": [4, 9, 13, 19, 27, 38, 39, 211, 214, 218, 222, 228, 230, 234, 237, 238, 239, 249, 318, 322, 325, 392, 415, 458, 464, 476, 478, 479], "multipl": [4, 6, 12, 14, 17, 29, 30, 41, 42, 46, 47, 204, 206, 217, 218, 223, 225, 228, 233, 234, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 313, 314, 318, 329, 426, 464, 470, 475, 476, 479, 485], "label": [4, 6, 7, 13, 15, 20, 33, 51, 52, 77, 90, 91, 120, 122, 126, 151, 164, 165, 194, 196, 200, 210, 217, 222, 223, 225, 226, 236, 240, 241, 242, 244, 245, 247, 249, 254, 255, 256, 257, 265, 312, 315, 318, 324, 326, 329, 364, 368, 375, 379, 380, 382, 392, 393, 395, 396, 397, 398, 399, 441, 442, 464, 466, 467, 470, 471, 475, 477, 478, 491, 492, 495, 496], "cannot": [4, 27, 30, 200, 211, 225, 228, 230, 234, 249, 251, 254, 255, 259, 314, 326, 383, 422, 423, 470, 471, 477, 479, 490], "determin": [4, 37, 44, 218, 228, 230, 234, 237, 243, 247, 248, 254, 255, 314, 318, 409, 412, 413, 414, 471], "reason": [4, 52, 53, 54, 55, 90, 91, 100, 117, 211, 226, 228, 234, 313, 314, 444], "jit": 4, "technologi": [4, 216, 218, 250], "compil": [4, 15, 31, 32, 34, 44, 49, 125, 201, 204, 208, 209, 211, 217, 218, 219, 223, 229, 244, 255, 267, 476, 477, 479, 485], "associ": [4, 6, 9, 29, 44, 45, 47, 206, 223, 228, 249, 398, 410, 456, 458, 464, 471, 476, 477], "runtim": [4, 6, 17, 23, 31, 49, 51, 200, 201, 218, 244, 246, 247, 248, 254, 255, 259, 476, 489, 490], "wrapper": [4, 221, 229, 231, 233, 248, 254, 267, 273, 326, 327, 476], "facilit": [4, 20, 219, 228, 233, 234, 237, 249, 313, 476, 477], "task": [4, 6, 7, 14, 34, 37, 41, 218, 220, 230, 233, 234, 236, 238, 239, 240, 241, 242, 244, 246, 247, 249, 313, 324, 476], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 42, 49, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 209, 214, 216, 224, 233, 244, 250, 253, 259, 265, 312, 314, 316, 317, 318, 322, 328, 464, 471, 475, 476, 477, 478, 487, 498], "jar": [4, 8, 22, 23, 35, 39, 125, 255, 477, 487], "read": [4, 8, 20, 24, 37, 46, 204, 214, 221, 223, 227, 238, 243, 244, 245, 246, 312, 313, 318, 323, 324, 326, 362, 363, 462, 464, 465, 469, 471, 473, 477, 495], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 48, 204, 217, 219, 220, 230, 235, 236, 244, 249, 250, 254, 255, 318, 322, 323, 470, 471, 475, 480, 487], "cmake": [4, 31, 32, 36, 211, 319], "script": [4, 32, 37, 251, 252, 283, 312, 313, 324, 327, 488], "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 39, 45, 47, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 200, 201, 203, 204, 206, 208, 209, 211, 219, 228, 229, 230, 239, 243, 244, 254, 255, 266, 267, 273, 274, 279, 304, 323, 324, 326, 383, 393, 395, 471, 473, 478, 484], "figur": [4, 6, 9, 12, 24, 27, 30, 34, 218, 222, 230, 234, 237, 245, 247, 248, 249, 314, 316, 447, 473], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 45, 206, 214, 217, 220, 226, 228, 230, 232, 236, 243, 247, 248, 312, 313, 314, 318, 322, 367, 383, 403, 426, 460, 470, 477, 479, 481, 485], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 47, 203, 218, 222, 225, 226, 233, 234, 243, 245, 246, 247, 248, 249, 253, 318, 326, 334, 367, 415, 464, 473, 477, 480, 481, 485], "thei": [4, 6, 20, 24, 27, 30, 31, 46, 214, 218, 222, 225, 230, 233, 239, 244, 247, 249, 251, 312, 313, 321, 326, 370, 378, 383, 411, 413, 414, 457, 458, 464, 470, 471, 473, 476, 477], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 41, 47, 200, 214, 217, 218, 220, 225, 228, 233, 237, 243, 244, 245, 246, 247, 248, 249, 254, 256, 316, 318, 326, 463, 464, 470, 479], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 217, 218, 226, 237, 244, 247, 249, 255, 317, 322, 381, 386, 387, 388, 391, 422, 481], "object": [4, 15, 38, 72, 78, 90, 91, 93, 97, 104, 114, 116, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 219, 220, 221, 223, 228, 229, 230, 234, 237, 243, 244, 245, 247, 249, 252, 254, 266, 279, 291, 305, 313, 315, 316, 317, 318, 321, 324, 327, 328, 342, 362, 363, 421, 461, 464, 466, 467, 469, 470, 477, 487, 497], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 47, 226, 228, 229, 230, 237, 249, 252, 257, 316, 317, 318, 321, 322, 467, 480, 495], "respons": [4, 9, 12, 16, 27, 34, 36, 37, 49, 211, 218, 222, 244, 254, 322, 325, 471, 473], "state": [4, 6, 9, 10, 12, 24, 27, 34, 218, 233, 247, 248, 250, 252, 323, 326, 383, 386, 387, 388, 389, 391, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 411, 412, 413, 414, 415, 418, 419, 420, 424, 456, 459, 461], "synchron": [4, 6, 10, 12, 14, 15, 244, 476], "explicitli": [4, 13, 254, 314, 383, 471, 477], "implicitli": [4, 265], "main": [4, 6, 30, 34, 37, 42, 45, 52, 53, 54, 55, 90, 91, 100, 117, 125, 204, 218, 225, 226, 229, 230, 251, 312, 321, 324, 329, 471, 477, 496, 497], "logic": [4, 6, 9, 14, 16, 17, 218, 228, 230, 233, 246, 248, 252, 315, 475, 476, 477, 485, 487], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 48, 51, 202, 204, 211, 217, 219, 222, 228, 229, 230, 234, 237, 243, 244, 246, 247, 248, 249, 313, 314, 315, 316, 317, 318, 323, 324, 326, 464, 467, 471, 473, 475, 476, 477, 478, 485, 497], "send": [4, 6, 10, 18, 24, 200, 219, 247, 257, 476, 487], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 200, 243, 244, 247, 249, 257, 318, 322, 473, 476, 487], "messagemanag": [4, 17, 487], "call": [4, 6, 12, 13, 16, 17, 19, 24, 51, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 204, 206, 211, 226, 228, 230, 237, 254, 257, 312, 314, 318, 321, 322, 327, 359, 373, 374, 404, 415, 444, 456, 464, 467, 471, 476, 477], "encourag": [4, 6, 15, 24, 37], "fork": 4, "repo": [4, 29, 37, 219, 246, 477, 488, 489], "much": [4, 6, 13, 19, 22, 201, 211, 218, 228, 230, 314, 318, 476], "easier": [4, 32, 36, 37, 42, 228, 246, 247, 248, 318, 471], "begin": [4, 15, 16, 30, 45, 210, 214, 222, 223, 227, 230, 245, 256, 257, 403, 470, 476], "small": [4, 9, 11, 13, 20, 204, 214, 230, 247, 248, 251, 329, 384, 385, 411, 454, 465, 471, 477], "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 44, 201, 230, 244, 248, 249, 251, 252, 255, 272, 304, 313, 326, 329, 342, 464, 471, 477], "revis": [4, 14, 17, 252], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 223, 233, 234, 249, 251, 252, 263, 264, 314, 326, 331, 332, 342, 400, 401, 402, 404, 458, 464, 473, 495, 497], "gradual": 4, "avoid": [4, 13, 226, 229, 476, 477], "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 47, 204, 211, 214, 217, 218, 220, 224, 229, 230, 231, 233, 234, 237, 238, 239, 244, 245, 246, 250, 251, 255, 299, 313, 314, 316, 318, 320, 324, 325, 338, 362, 363, 383, 418, 476, 487], "singl": [4, 6, 7, 11, 14, 15, 17, 20, 24, 27, 36, 37, 41, 47, 200, 203, 206, 211, 217, 223, 226, 228, 230, 235, 236, 238, 239, 244, 245, 247, 248, 255, 256, 312, 326, 337, 344, 366, 370, 375, 385, 390, 407, 413, 458, 460, 464, 471, 475, 479], "commit": [4, 252, 473], "python3": [4, 7, 23, 27, 28, 30, 31, 32, 35, 36, 41, 211, 219, 220, 235, 236, 241, 245, 487, 488, 489, 490], "gsctl": [4, 32, 36, 41, 216, 219, 235, 488, 489], "py": [4, 15, 32, 36, 41, 126, 127, 128, 129, 164, 165, 174, 191, 199, 219, 235, 241, 312, 319, 324, 471, 477, 484, 487, 488, 489, 496], "cmakelist": 4, "txt": [4, 31, 35, 487], "artifact": [4, 17, 23, 29, 36, 48, 219, 235, 484], "grape_engin": [4, 38, 289, 485], "togeth": [4, 9, 10, 20, 41, 218, 230, 239, 244, 252, 318, 322, 365], "share": [4, 6, 30, 31, 37, 44, 47, 48, 230, 235, 244, 246, 247, 476, 478, 489], "bunch": [4, 41, 251, 254], "binari": [4, 15, 27, 31, 249, 484], "choos": [4, 6, 12, 22, 34, 41, 47, 217, 218, 228, 230, 233, 234, 244, 249, 312, 313, 403, 404, 442], "prefix": [4, 31, 36, 37, 202, 211, 219, 228, 235, 241, 326, 458, 476, 495], "usr": [4, 477], "look": [4, 15, 18, 20, 27, 44, 45, 125, 200, 217, 230, 243, 259, 325, 470, 473, 477, 478], "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 39, 44, 45, 47, 48, 51, 103, 117, 191, 200, 201, 203, 204, 206, 208, 209, 211, 216, 217, 219, 222, 243, 254, 255, 263, 286, 312, 313, 319, 324, 326, 362, 363, 414, 464, 466, 471, 473, 477, 478, 484, 485, 487, 497], "investig": [4, 6], "ensur": [4, 6, 9, 32, 35, 36, 37, 44, 45, 46, 48, 200, 201, 203, 204, 206, 218, 223, 226, 245, 251, 471], "correct": [4, 6, 14, 37, 38, 218, 222, 318, 326, 329, 476], "unit": [4, 218, 230, 248, 322, 412, 413, 414, 477], "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 206, 211, 217, 220, 230, 233, 244, 245, 246, 248, 249, 251, 318, 320, 476], "graphscope_hom": [4, 23, 489], "pwd": [4, 30, 203, 324], "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 39, 48, 203, 208, 220, 221, 224, 229, 235, 236, 243, 252, 319, 324, 489], "tmp": [4, 18, 19, 28, 38, 48, 217, 219, 286, 291, 324, 326, 471, 475, 477, 485, 487, 490], "gstest": [4, 19, 22, 23, 30, 487, 489], "against": [4, 14, 37, 219, 255, 446], "compar": [4, 19, 218, 223, 225, 226, 228, 230, 247, 252, 254, 255, 315, 383, 470], "ground": [4, 225, 249], "truth": [4, 249], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 204, 211, 216, 217, 218, 220, 224, 226, 228, 231, 233, 234, 237, 238, 239, 241, 242, 244, 246, 247, 249, 250, 251, 255, 259, 312, 315, 317, 321, 323, 324, 328, 383, 386, 393, 395, 404, 411, 412, 413, 414, 415, 423, 477, 478], "broad": [6, 246], "spectrum": [6, 246, 329, 456], "central": [6, 15, 42, 214, 233, 234, 245, 246, 249, 250, 255, 318, 329, 441, 476], "match": [6, 15, 44, 46, 51, 125, 199, 200, 204, 218, 219, 220, 221, 222, 223, 225, 244, 245, 246, 255, 363, 383, 391, 393, 395, 422, 458, 495], "mine": [6, 15, 244, 246, 247], "philosophi": [6, 24, 246], "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 201, 202, 204, 209, 217, 218, 219, 220, 221, 226, 229, 231, 233, 234, 241, 242, 243, 244, 245, 246, 248, 257, 312, 313, 314, 316, 318, 321, 324, 383, 391, 403, 456, 477, 485, 497], "stronger": [6, 246], "flexibl": [6, 12, 13, 23, 44, 47, 224, 225, 230, 233, 244, 245, 246, 471, 475], "flow": [6, 202, 246, 247, 312, 454], "oper": [6, 9, 12, 15, 30, 31, 36, 44, 52, 53, 54, 55, 117, 126, 127, 128, 129, 191, 203, 204, 206, 208, 211, 214, 216, 217, 218, 220, 224, 225, 226, 228, 233, 234, 237, 243, 244, 246, 247, 248, 249, 250, 255, 257, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 284, 285, 286, 288, 289, 292, 293, 294, 295, 313, 314, 315, 316, 317, 318, 320, 321, 323, 325, 326, 346, 425, 426, 464, 467, 469, 471, 473, 476, 477, 484], "arbitrari": [6, 228, 230, 246, 316, 391, 395, 411, 412, 413, 414, 464, 467, 477, 495], "beyond": [6, 24, 225, 246, 250, 424], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 41, 42, 45, 51, 100, 174, 201, 204, 206, 216, 217, 218, 219, 221, 222, 223, 225, 228, 229, 230, 233, 235, 243, 246, 247, 248, 249, 252, 318, 319, 322, 324, 326, 342, 394, 458, 464, 471, 475, 476, 477, 484, 488, 489], "divers": [6, 10, 12, 34, 47, 216, 218, 246, 247, 313, 473], "easi": [6, 7, 12, 204, 206, 214, 217, 218, 220, 221, 229, 230, 231, 233, 236, 237, 243, 244, 245, 246, 250, 313, 318, 322, 484], "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 204, 211, 214, 223, 226, 228, 230, 233, 243, 244, 245, 246, 247, 248, 253, 257, 259, 312, 318, 322, 326, 327, 466, 467, 473, 476, 481, 487, 491], "few": [6, 29, 204, 211, 217, 246, 476], "satisfactori": [6, 246, 249], "major": [6, 12, 13, 14, 223, 247, 254], "recent": [6, 316, 477], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 211, 218, 225, 231, 234, 237, 243, 244, 246, 247, 248, 249, 250, 251, 255, 256, 305, 316, 318, 320, 322, 326, 327, 468, 471, 473, 475, 487, 492, 497], "focu": [6, 41, 244, 248, 251, 322], "hand": [6, 30, 33, 218, 226, 228, 444], "point": [6, 13, 14, 22, 37, 42, 200, 218, 228, 237, 247, 312, 367, 392, 421, 424, 464, 475, 477, 478, 479, 484], "breadth": [6, 255, 329], "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 45, 46, 48, 125, 199, 201, 211, 214, 218, 219, 220, 221, 223, 228, 229, 230, 234, 238, 239, 243, 245, 246, 248, 249, 255, 256, 312, 313, 318, 320, 322, 326, 329, 333, 363, 379, 382, 391, 404, 407, 418, 419, 420, 421, 422, 425, 458, 463, 464, 467, 470, 471, 473, 476, 477, 478, 479], "search": [6, 37, 216, 222, 234, 244, 247, 249, 251, 255, 329, 493], "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 214, 244, 247, 250, 252, 255, 256, 329, 467, 470, 475, 487], "shortest": [6, 7, 19, 24, 218, 245, 247, 255, 329, 479], "leav": [6, 230, 326, 364, 374], "varieti": [6, 12, 34, 214, 244, 251], "suffer": [6, 214], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 47, 51, 200, 204, 206, 211, 214, 216, 222, 225, 226, 229, 230, 233, 234, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 259, 316, 318, 320, 397, 418, 475, 476, 478, 480], "limit": [6, 9, 13, 22, 47, 209, 211, 217, 221, 222, 223, 226, 231, 234, 247, 248, 249, 251, 252, 471, 490, 495], "phase": [6, 16, 23, 24, 313, 318], "propag": [6, 7, 9, 14, 36, 244, 245, 247, 249, 255, 318, 336, 426], "short": [6, 246, 251, 252, 344, 476, 477], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 30, 228, 230, 249, 323, 383, 406, 477, 495], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 44, 54, 90, 91, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 228, 233, 234, 244, 247, 249, 251, 319, 322, 464, 473, 477, 487, 488], "Such": [6, 13, 202, 248, 251, 286, 291, 423, 432], "abstract": [6, 42, 214, 233, 237, 240, 244, 245, 246, 312, 313, 320, 322, 323, 478], "bring": [6, 41], "product": [6, 12, 32, 211, 237, 244, 248, 251, 257, 313, 314, 318, 484, 495], "sacrific": 6, "almost": [6, 22, 230, 399, 476], "infeas": 6, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 47, 48, 211, 230, 241, 243, 245, 246, 251, 254, 256, 316, 318, 322, 323, 461, 470, 475, 477, 479, 480, 488, 490, 494], "At": [6, 12, 14, 15, 20, 34, 37, 125, 218, 229, 230, 313, 323, 477, 479], "advanc": [6, 7, 15, 218, 236, 237, 246, 410], "pose": 6, "challeng": [6, 9, 213, 244, 476], "repres": [6, 9, 12, 15, 44, 46, 47, 214, 218, 222, 226, 230, 234, 236, 237, 240, 243, 244, 245, 246, 247, 249, 252, 254, 255, 256, 263, 290, 313, 314, 315, 316, 318, 322, 324, 326, 370, 403, 411, 412, 413, 414, 415, 423, 430, 433, 437, 445, 454, 456, 458, 459, 464, 468, 471, 476, 477], "non": [6, 9, 27, 200, 228, 251, 254, 257, 315, 353, 354, 374, 393, 395, 398, 422, 426, 433, 451, 464, 465], "ones": [6, 9, 250, 255, 320], "distil": 6, "critic": [6, 13, 234, 255], "context": [6, 15, 17, 18, 20, 27, 31, 47, 126, 127, 128, 129, 164, 165, 174, 191, 226, 246, 248, 255, 257, 262, 263, 264, 270, 271, 286, 291, 294, 295, 297, 306, 309, 322, 326, 329, 454, 469, 471, 476, 484, 487], "fall": 6, "meet": [6, 15, 18, 37, 214, 218, 220, 237, 244, 249, 316, 317, 383, 412, 413, 414, 479, 481], "therefor": [6, 12, 15, 214, 218, 220, 222, 223, 226, 228, 230, 234, 245, 312, 313, 318, 410, 476, 485], "fulfil": [6, 15, 18, 204, 246], "ligra": 6, "By": [6, 13, 17, 20, 30, 36, 44, 45, 46, 48, 201, 211, 214, 226, 228, 230, 231, 236, 243, 247, 249, 250, 313, 314, 329, 464, 473, 476, 484, 485], "must": [6, 13, 24, 27, 30, 37, 45, 46, 47, 51, 62, 136, 206, 208, 211, 217, 228, 230, 244, 254, 256, 265, 313, 314, 316, 317, 318, 326, 328, 329, 342, 381, 383, 391, 394, 404, 406, 408, 411, 413, 415, 423, 426, 462, 464, 466, 470, 476, 477], "race": 6, "schedul": [6, 23, 36, 244, 246, 471], "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 41, 44, 45, 52, 126, 211, 217, 218, 219, 222, 223, 226, 230, 243, 254, 255, 256, 273, 289, 314, 326, 383, 395, 407, 411, 421, 424, 442, 458, 464, 467, 470, 471, 475, 476, 477, 481, 484], "so": [6, 12, 13, 30, 37, 41, 47, 203, 211, 217, 218, 220, 224, 229, 230, 234, 237, 239, 243, 244, 246, 255, 259, 312, 318, 320, 339, 374, 379, 392, 393, 394, 397, 412, 413, 414, 425, 458, 464, 476, 477, 491], "middlewar": 6, "flashwar": 6, "hide": [6, 214], "automat": [6, 9, 12, 14, 34, 44, 46, 204, 206, 217, 218, 221, 226, 229, 233, 243, 244, 247, 248, 249, 251, 256, 324, 326, 464, 477, 479, 480, 497], "adapt": [6, 22, 44, 204, 218, 249, 251, 252, 479, 480], "70": [6, 15, 495], "40": [6, 15, 252, 314, 315, 317, 391, 457], "commonli": [6, 223, 228, 233, 237, 243], "now": [6, 7, 20, 23, 27, 45, 48, 200, 204, 217, 219, 222, 223, 225, 229, 230, 236, 255, 322, 395, 477, 479, 492], "succinct": [6, 226], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 42, 200, 211, 214, 216, 218, 230, 231, 232, 234, 237, 244, 247, 248, 249, 250, 251, 254, 259, 314, 315, 316, 318, 319, 320, 321, 464, 471, 481], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 201, 208, 222, 228, 230, 241, 243, 247, 248, 322, 326, 476, 478, 484, 488], "demonstr": [6, 16, 44, 217, 218, 225, 233, 238, 240, 244, 245, 247, 249, 251, 256, 312, 324, 326, 471, 476], "up": [6, 13, 20, 23, 37, 201, 222, 228, 230, 233, 235, 237, 250, 257, 322, 325, 363, 367, 391, 458, 476, 477, 494], "92": [6, 329], "bulk": [6, 15, 46, 52, 126, 200], "bsp": [6, 15], "paradigm": [6, 15, 233, 237, 244, 312, 318], "primari": [6, 15, 45, 46, 47, 74, 75, 90, 91, 125, 148, 149, 164, 165, 199, 204, 209, 226, 244, 251, 477], "constitut": [6, 240, 243], "superstep": [6, 16, 17, 24, 257], "vertexsubset": [6, 15], "indic": [6, 13, 24, 37, 38, 46, 47, 51, 200, 204, 206, 217, 230, 243, 246, 247, 248, 252, 263, 313, 315, 318, 326, 370, 373, 383, 386, 387, 388, 389, 391, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 408, 411, 412, 413, 414, 415, 418, 419, 420, 424, 454, 456, 459, 461, 466, 476], "maintain": [6, 10, 14, 35, 36, 46, 225, 226, 228, 244, 247, 248, 477], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 47, 51, 206, 218, 219, 234, 255, 257, 314, 315, 318, 324, 326, 327, 329, 359, 464, 471, 477, 484], "describ": [6, 27, 36, 37, 38, 47, 48, 206, 211, 217, 219, 230, 234, 235, 244, 248, 249, 256, 313, 316, 318, 323, 324, 363, 367, 383, 384, 385, 388, 393, 395, 396, 421, 422, 435, 442, 444, 458, 460, 461, 472, 475, 476, 477, 485, 490], "vsize": [6, 15], "size_t": [6, 13, 210, 254, 257, 323, 473, 476], "vertexmap": [6, 13, 15, 101, 125, 175, 199, 210], "condit": [6, 9, 14, 24, 27, 38, 44, 218, 225, 230, 237, 246, 248, 252, 383, 412, 413, 414, 422, 423, 476], "f": [6, 20, 33, 48, 217, 219, 236, 241, 242, 245, 318, 329, 416, 417, 463, 477, 485, 491], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 214, 217, 219, 222, 225, 226, 228, 230, 234, 236, 237, 240, 244, 245, 249, 252, 254, 283, 291, 299, 312, 318, 320, 324, 326, 327, 411, 413, 415, 456, 468, 470, 477, 487, 488, 491, 496], "form": [6, 20, 117, 191, 218, 224, 226, 228, 230, 234, 237, 248, 249, 255, 312, 314, 315, 318, 365, 385, 415, 430, 432, 435, 438, 442, 464, 470], "special": [6, 20, 204, 209, 225, 230, 244, 313, 432, 448, 458, 481], "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 217, 218, 219, 220, 230, 236, 245, 255, 256, 329, 339, 370, 374, 376, 387, 393, 395, 397, 399, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 443, 452, 456, 457, 461, 464, 477, 487], "omit": [6, 206, 243, 256, 337, 478, 497], "filter": [6, 15, 23, 44, 218, 225, 231, 243, 248, 255, 256, 456, 470, 476, 495], "semant": [6, 218, 237, 317, 476], "unchang": 6, "edgemap": [6, 15, 101, 125, 175, 199], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 45, 47, 75, 77, 149, 151, 204, 209, 210, 211, 217, 219, 220, 222, 223, 230, 234, 235, 237, 243, 245, 247, 248, 249, 251, 254, 255, 256, 258, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 305, 306, 307, 309, 311, 314, 315, 316, 317, 318, 324, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 466, 468, 470, 471, 473, 475, 476, 477, 479, 484, 487, 488, 489, 495, 497], "satisfi": [6, 9, 24, 32, 204, 220, 230, 248, 251, 255, 259, 323, 329, 381, 411, 415, 422, 423, 481], "h": [6, 9, 15, 16, 20, 36, 41, 200, 208, 234, 235, 252, 263, 329, 340, 343, 364, 391, 395, 411, 456, 463, 464, 476, 488, 493], "conduct": [6, 15, 230, 252, 318], "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 42, 44, 45, 47, 125, 199, 201, 204, 214, 217, 218, 222, 223, 225, 226, 228, 230, 231, 232, 233, 237, 243, 244, 245, 247, 248, 249, 250, 251, 313, 318, 388, 393, 395, 398, 403, 406, 411, 456, 464, 473, 476, 481, 484], "dynam": [6, 12, 34, 201, 202, 204, 218, 233, 244, 246, 247, 249, 255, 266, 279, 384, 385, 467, 473, 477], "even": [6, 8, 20, 218, 222, 230, 246, 247, 320, 326, 329, 393, 403, 421, 423, 424, 464, 476], "virtual": [6, 9, 23, 47, 220, 222, 245, 254, 322, 323], "gener": [6, 9, 13, 14, 17, 27, 34, 41, 47, 125, 201, 206, 214, 216, 218, 224, 226, 228, 230, 234, 237, 243, 244, 245, 246, 247, 249, 255, 264, 312, 313, 314, 318, 324, 326, 328, 329, 464, 465, 469, 471, 473, 475, 476, 477, 478, 479, 485], "index": [6, 12, 13, 31, 45, 46, 76, 150, 200, 210, 216, 234, 237, 243, 249, 254, 255, 256, 314, 315, 323, 326, 328, 329, 338, 362, 363, 393, 395, 396, 397, 399, 476, 493, 497], "pre": [6, 29, 32, 51, 211, 218, 225, 230, 236, 240, 245, 248, 471, 490], "conveni": [6, 29, 211, 217, 222, 230, 234, 246, 318, 462, 464], "revers": [6, 20, 223, 230, 272, 275, 328, 329, 407, 415, 464], "exchang": [6, 14], "chosen": [6, 393, 400, 401, 402, 403, 404, 415, 419, 459], "temporari": 6, "sequenti": [6, 12, 14, 18, 34, 36, 244, 362, 363, 399, 476, 481, 487], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 201, 211, 217, 247, 319, 322, 471, 477, 489], "mode": [6, 15, 27, 32, 36, 48, 211, 229, 238, 241, 243, 254, 255, 256, 305, 312, 316, 322, 324, 326, 466, 471, 477, 481, 485, 497], "push": [6, 12, 34, 37, 44, 218, 225, 247, 322], "anoth": [6, 9, 10, 20, 36, 47, 218, 228, 230, 243, 244, 245, 249, 257, 393, 426, 464, 476, 479, 480], "final": [6, 9, 13, 14, 17, 19, 24, 218, 222, 230, 234, 239, 244, 248, 254, 312, 318, 320, 406, 426, 464, 478], "reduc": [6, 9, 13, 14, 15, 17, 204, 218, 222, 225, 229, 237, 313, 316, 412, 413, 414, 464, 477], "commut": 6, "alwai": [6, 203, 230, 239, 256, 360, 361, 400, 402, 421, 424, 458, 476, 484], "ctrue": 6, "doe": [6, 11, 12, 13, 20, 34, 37, 52, 53, 55, 126, 127, 129, 203, 204, 225, 228, 237, 243, 246, 248, 251, 315, 318, 323, 329, 348, 349, 391, 393, 395, 410, 421, 464, 466, 471, 476], "sometim": [6, 27, 230, 243, 374, 434], "similarli": [6, 19, 20, 47, 219, 230, 247, 329, 367, 393, 395, 411, 414, 421, 464, 485], "suppli": [6, 211, 226, 413], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 48, 51, 200, 206, 208, 217, 225, 230, 255, 316, 318, 321, 324, 329, 339, 384, 385, 393, 395, 396, 398, 399, 400, 402, 407, 411, 412, 413, 414, 415, 418, 455, 464, 466, 471], "auxiliari": [6, 15, 16, 230], "union": [6, 326, 392, 492], "minu": [6, 228, 367], "intersect": [6, 248, 465], "add": [6, 15, 19, 20, 23, 29, 33, 37, 90, 91, 125, 164, 165, 199, 211, 223, 225, 228, 230, 243, 245, 254, 257, 264, 265, 274, 313, 324, 326, 331, 332, 333, 383, 390, 403, 421, 424, 426, 442, 464, 467, 471, 476, 477, 488, 491, 492, 497], "getv": [6, 218], "besid": [6, 10, 38, 323, 324], "combin": [6, 14, 18, 34, 47, 216, 218, 230, 233, 244, 245, 248, 312, 313, 314, 318, 464, 471, 480, 487], "primit": [6, 45, 246], "natur": [6, 12, 13, 24, 47, 214, 226, 230], "multi": [6, 31, 216, 226, 230, 233, 234, 237, 244, 246, 248, 249, 250, 251, 255, 316, 318, 320, 473, 477], "tradit": [6, 218, 222, 224, 225, 226, 249, 441], "awkward": 6, "supplement": 6, "perspect": [6, 24, 246], "whole": [6, 9, 12, 24, 34, 204, 217, 218, 230, 234, 244, 246, 248, 249, 320, 475, 477, 480], "pick": [6, 230, 252, 406, 421, 424], "transfer": [6, 214, 216, 233, 248, 250, 495], "intuit": [6, 204, 218, 226, 233, 248, 471], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 204, 216, 218, 223, 230, 233, 234, 237, 243, 244, 247, 249, 250, 252, 256, 312, 318, 320, 322, 323, 329, 370, 464, 470, 471, 476, 477], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 46, 51, 200, 218, 220, 230, 236, 237, 247, 249, 252, 313, 314, 315, 318, 324], "input": [6, 9, 12, 13, 15, 17, 22, 24, 45, 46, 73, 90, 91, 121, 147, 164, 165, 195, 200, 206, 208, 214, 234, 236, 237, 240, 243, 244, 245, 248, 249, 255, 274, 278, 299, 312, 313, 314, 315, 316, 318, 321, 324, 327, 329, 397, 411, 413, 415, 421, 422, 456, 464, 467, 468, 471, 476, 477, 491, 496], "second": [6, 13, 27, 46, 48, 204, 214, 223, 230, 234, 243, 248, 251, 252, 256, 320, 409, 410, 418, 419, 420, 421, 425, 463, 464, 471, 477, 478], "fundament": [6, 9, 47, 218, 246], "modul": [6, 8, 9, 15, 19, 20, 23, 216, 218, 222, 228, 233, 241, 244, 245, 246, 248, 249, 325, 463, 493], "produc": [6, 38, 41, 45, 218, 252, 255, 264, 312, 324, 326, 327, 329, 383, 397, 399, 407, 468, 477], "abil": [6, 12, 34, 51, 222, 226, 230, 237, 244, 477], "activ": [6, 9, 23, 24, 30, 51, 200, 206, 220, 239, 245, 249, 324, 471], "dens": [6, 234, 247, 249, 315, 324], "spars": [6, 13, 234, 249, 312, 315, 391, 464, 467], "dispatch": [6, 34, 244, 254], "kernel": [6, 400], "auto": [6, 14, 16, 34, 210, 230, 257, 473, 476, 478], "switch": [6, 12, 23, 34, 200, 229, 247, 421, 424, 476, 484], "prove": [6, 24, 456], "world": [6, 9, 13, 214, 228, 230, 244, 245, 247, 254, 329, 384, 385, 411], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 13, 16, 20, 23, 30, 37, 47, 125, 222, 225, 228, 230, 243, 246, 314, 315, 316, 322, 323, 326, 390, 397, 402, 410, 411, 415, 421, 464, 470, 473, 476], "co": [6, 23, 214, 245, 313, 491], "lead": [6, 17, 24, 211, 230, 249, 393, 395], "master": [6, 19, 22, 23, 24, 31, 204, 241, 487], "broadcast": [6, 254, 476], "mirror": [6, 7, 10, 24, 27, 32, 220, 235, 236], "On": [6, 27, 30, 37, 204, 218, 226, 228, 255, 398, 461, 476], "contrari": 6, "total": [6, 8, 12, 34, 214, 218, 219, 220, 229, 230, 241, 257, 339, 383, 406, 423, 429, 464, 477, 478, 491], "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 48, 200, 211, 218, 219, 221, 224, 225, 226, 228, 229, 230, 241, 242, 245, 252, 263, 312, 314, 315, 317, 318, 319, 329, 335, 340, 342, 343, 348, 349, 367, 369, 370, 379, 387, 390, 392, 399, 408, 410, 415, 424, 431, 434, 435, 441, 442, 448, 450, 457, 458, 459, 464, 466, 467, 471, 476, 477, 478, 479, 480, 487, 490, 491, 495], "redund": [6, 206, 225], "programm": [6, 17, 244, 259], "scope": [6, 23, 37, 125, 200, 246, 326], "disabl": [6, 31, 44, 200, 201, 204, 208, 209, 219, 222, 252, 471], "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 125, 199, 204, 209, 214, 218, 219, 224, 225, 226, 230, 231, 232, 233, 234, 235, 244, 247, 248, 249, 251, 259, 316, 318, 319, 320, 322, 383, 476, 484], "katz": [6, 255, 329], "eigenvector": [6, 255, 329, 456], "harmon": 6, "coeffici": [6, 19, 255, 329], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 44, 45, 47, 125, 201, 211, 220, 222, 226, 228, 229, 236, 244, 246, 251, 252, 255, 319, 326, 384, 385, 400, 402, 415, 421, 442, 464, 473, 475, 476, 477, 484, 487, 490], "color": [6, 19, 20, 230, 464], "biconnect": 6, "bridg": [6, 216, 246], "seven": [6, 324, 363], "strongli": [6, 36, 220, 222, 230, 318, 403], "cut": [6, 12, 24, 449], "k": [6, 20, 37, 210, 219, 230, 234, 244, 245, 246, 248, 255, 256, 316, 329, 366, 374, 384, 385, 386, 387, 389, 391, 392, 393, 400, 403, 412, 413, 414, 416, 419, 420, 421, 422, 423, 424, 429, 464, 470, 476, 491, 495], "decomposit": [6, 245, 329], "degeneraci": 6, "onion": 6, "minim": [6, 11, 247, 324, 415, 416, 437, 463], "domin": [6, 329, 476], "cycl": [6, 246, 248, 251, 254, 331, 367, 368, 371, 382, 404, 408, 429, 431, 447, 451], "triangl": [6, 33, 230, 245, 248, 255, 329, 426, 430, 434, 438, 450, 465, 487, 491], "acycl": [6, 246, 458], "cyclic": [6, 244, 246, 248, 371], "diamond": [6, 434], "rectangl": 6, "tail": [6, 217, 222, 228, 230, 246, 485], "approxim": [6, 383, 456], "densest": 6, "articlerank": 6, "hyperlink": [6, 255, 329], "induc": [6, 226, 228, 255, 277, 340, 343, 359, 407, 464], "topic": [6, 7, 220, 236, 245, 255, 477], "person": [6, 7, 30, 33, 45, 46, 47, 51, 90, 164, 165, 200, 217, 220, 222, 225, 226, 228, 230, 243, 245, 326, 444, 453, 464, 467, 470, 475, 476, 477, 478, 492, 497], "standard": [6, 35, 42, 201, 216, 218, 225, 230, 231, 243, 246, 327, 397, 412, 413, 414, 476], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 230, 379, 382, 407], "four": [6, 9, 12, 20, 240, 245, 246, 254, 312, 315, 324, 411, 415, 476], "random": [6, 28, 31, 237, 239, 244, 252, 316, 317, 318, 321, 324, 365, 376, 383, 386, 387, 388, 389, 391, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 424, 456, 459, 461, 463, 471], "give": [7, 12, 13, 31, 34, 46, 200, 220, 230, 236, 243, 252, 318, 326, 391, 411, 431, 463, 464], "quick": [7, 220, 236, 477, 494], "ll": [7, 13, 20, 29, 45, 46, 236], "pip": [7, 27, 30, 31, 32, 49, 211, 217, 220, 236, 245, 322, 477, 490, 494], "upgrad": [7, 23, 32, 220, 236, 494], "occur": [7, 9, 14, 32, 211, 228, 236, 477], "veri": [7, 13, 32, 214, 218, 220, 230, 233, 236, 243, 245, 249, 314, 316, 487], "speed": [7, 32, 204, 209, 230, 235, 236, 246, 325, 391, 464], "try": [7, 17, 23, 32, 36, 41, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 209, 211, 214, 220, 229, 235, 236, 239, 240, 245, 253, 255, 342, 383, 467, 471, 491], "site": [7, 32, 220, 236], "aliyun": [7, 27, 32, 220, 235, 236, 252, 471, 488], "pypi": [7, 27, 32, 211, 220, 221, 236, 490], "trust": [7, 27, 32, 220, 236], "host": [7, 15, 17, 22, 23, 27, 28, 32, 46, 91, 126, 127, 128, 129, 164, 165, 174, 191, 200, 201, 214, 219, 220, 222, 229, 236, 243, 252, 254, 255, 256, 467, 471, 475, 487, 495, 497], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 125, 199, 203, 211, 217, 220, 236, 245, 322, 411, 413, 464, 467, 477, 489], "everyth": [7, 236, 245, 476], "job": [7, 13, 23, 52, 53, 125, 126, 127, 199, 200, 214, 218, 236, 244, 245, 246, 250, 254, 289, 313, 471, 477], "modern_graph": [7, 30, 33, 46, 48, 200, 217, 220, 245, 478, 484], "gremlin": [7, 29, 33, 44, 48, 209, 211, 214, 217, 218, 219, 220, 225, 227, 231, 234, 237, 244, 245, 246, 250, 251, 253, 283, 318, 327, 471, 477, 485, 490, 491, 493, 498], "apach": [7, 17, 22, 23, 31, 201, 202, 204, 216, 225, 226, 229, 232, 233, 244, 245, 248, 475, 477, 481, 487, 489, 493], "tinkerpop": [7, 201, 202, 204, 214, 216, 217, 219, 220, 229, 233, 245, 246, 327, 477, 493], "org": [7, 17, 23, 125, 211, 221, 229, 236, 239, 240, 241, 245, 247, 255, 329, 387, 388, 389, 403, 406, 413, 426, 430, 431, 432, 433, 435, 436, 437, 443, 444, 445, 446, 448, 449, 450, 451, 456, 477, 487, 490, 491, 495], "doc": [7, 16, 17, 30, 37, 245, 246, 254, 258, 260, 326, 413, 494], "tutori": [7, 8, 12, 14, 24, 217, 219, 220, 227, 233, 238, 243, 245, 247, 249, 324, 413, 481], "trigger": [7, 14, 15, 18, 37, 237, 245, 265, 479, 484], "ret": [7, 18, 229, 245, 487, 492], "selector": [7, 15, 33, 38, 245, 254, 256, 264, 270, 271, 281, 282, 286, 294, 295, 326, 469, 471, 475, 487, 492], "homogen": [7, 234, 243, 245, 249, 314], "pg": [7, 245, 255, 471, 475, 476], "none": [7, 9, 20, 27, 31, 165, 174, 191, 223, 239, 241, 242, 243, 245, 255, 256, 263, 270, 271, 274, 277, 281, 282, 283, 284, 286, 289, 291, 294, 295, 299, 305, 307, 311, 312, 313, 318, 326, 327, 328, 329, 337, 341, 343, 344, 348, 349, 358, 359, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 386, 387, 388, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 456, 458, 459, 461, 464, 466, 467, 468, 471, 475, 476, 477, 492, 496, 497], "know": [7, 8, 30, 33, 38, 46, 47, 200, 217, 225, 227, 228, 230, 238, 243, 245, 248, 313, 314, 322, 326, 475, 477, 478, 492, 495, 497], "src": [7, 13, 15, 16, 17, 18, 30, 34, 90, 125, 164, 199, 210, 214, 226, 229, 236, 237, 240, 243, 245, 255, 256, 263, 312, 314, 326, 470, 473, 476, 477, 479, 487, 491, 496, 497], "our": [7, 12, 13, 17, 32, 34, 36, 37, 41, 44, 46, 47, 201, 214, 218, 223, 225, 226, 235, 245, 247, 248, 249, 251, 252, 253, 319, 320, 329, 477, 479, 487], "learn": [7, 27, 32, 36, 37, 38, 41, 204, 214, 218, 220, 233, 237, 238, 239, 241, 246, 247, 250, 253, 307, 313, 316, 317, 318, 319, 322, 324, 469, 471, 491, 493], "technic": [7, 236, 320, 458, 464], "disaggreg": [7, 36], "deploy": [7, 29, 30, 33, 209, 211, 214, 219, 230, 244, 250, 314, 324, 471, 477], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 204, 214, 217, 219, 224, 229, 230, 231, 233, 234, 244, 245, 246, 247, 249, 250, 251, 314, 316, 318, 320, 325, 393, 404, 411, 463, 476], "usag": [7, 17, 31, 32, 36, 37, 49, 125, 200, 203, 207, 228, 230, 231, 235, 236, 237, 256, 315, 316, 317, 321, 326, 383, 464, 471, 477, 478], "section": [8, 13, 27, 29, 44, 46, 47, 206, 208, 227, 230, 234, 238, 244, 318, 319, 326, 363, 476, 477], "assum": [8, 23, 27, 30, 203, 217, 227, 230, 238, 245, 313, 326, 362, 423, 462, 464, 471, 475, 476, 491], "getting_start": [8, 44, 203, 227, 238], "most": [8, 9, 13, 15, 22, 33, 38, 47, 204, 211, 218, 222, 223, 225, 228, 230, 234, 243, 245, 247, 249, 251, 252, 256, 312, 314, 318, 320, 322, 326, 384, 385, 409, 412, 413, 414, 475, 477], "suffici": [8, 17, 211, 244, 313], "louvain": [8, 247, 255, 487], "social": [8, 47, 214, 219, 230, 244, 247, 249, 252, 391, 441, 456, 465], "scientist": [8, 233, 251], "familiar": [8, 14, 16, 29, 218], "manipul": [8, 11, 19, 20, 204, 230, 233, 248, 251, 253, 254, 464], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 49, 204, 206, 243, 254, 316, 317, 321, 471, 487], "pydata": [8, 250], "eco": 8, "still": [8, 24, 27, 34, 38, 200, 214, 230, 247, 342, 471, 476, 477], "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 200, 204, 214, 222, 225, 226, 228, 230, 232, 234, 237, 243, 249, 254, 313, 316, 318, 319, 320, 321, 456, 464, 467, 471, 477, 481], "migrat": [8, 218, 236, 239, 240, 245, 246, 251, 473, 491], "transpar": [8, 244], "don": [8, 17, 23, 30, 33, 36, 37, 211, 217, 230, 265, 358, 464, 477], "autom": [9, 29, 246], "abl": [9, 24, 27, 201, 217, 246, 317, 421, 476, 477], "batch": [9, 12, 19, 46, 219, 229, 234, 237, 241, 242, 246, 249, 312, 315, 317, 318, 320, 322, 324, 328, 477, 496], "counterpart": [9, 225, 233, 246], "redesign": [9, 246], "underli": [9, 42, 214, 218, 230, 246, 320, 476], "equip": [9, 232, 233, 246, 252, 481], "polici": [9, 211, 246, 254, 471], "memori": [9, 12, 23, 24, 27, 34, 46, 47, 200, 204, 211, 214, 216, 226, 229, 233, 235, 238, 239, 241, 244, 246, 247, 249, 250, 251, 252, 312, 313, 314, 320, 324, 326, 464, 471, 477, 480, 489, 490], "todai": 9, "static": [9, 16, 31, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 229, 254, 477, 479], "recomput": 9, "costli": 9, "consum": [9, 211, 249, 320, 323], "especi": [9, 243], "trillion": 9, "commerc": [9, 244, 247], "constantli": 9, "issu": [9, 17, 32, 37, 211, 214, 217, 220, 229, 246, 247, 251, 387, 388, 389, 453, 490], "involv": [9, 13, 37, 41, 44, 204, 214, 218, 230, 234, 237, 244, 247, 248, 249, 250, 251], "adjust": [9, 12, 44, 45, 211], "old": [9, 12, 14, 32, 34, 222, 471], "typic": [9, 24, 44, 201, 204, 214, 226, 228, 230, 244, 247, 248, 251, 313, 318, 393, 464, 470, 476], "often": [9, 37, 47, 204, 214, 217, 229, 244, 247, 248, 249, 251, 314, 315, 318, 464, 477, 485], "overlap": [9, 471], "intervent": 9, "burden": [9, 15, 314], "expert": 9, "light": 9, "overal": [9, 249], "verifi": [9, 27, 38, 214, 217, 219, 223, 252, 318], "characterist": [9, 226, 237, 244, 249, 312, 317], "deduc": [9, 326, 497], "appropri": [9, 27, 41, 46, 47, 218, 234, 244, 249, 312], "record": [9, 13, 125, 199, 200, 204, 217, 220, 221, 222, 230, 245, 323, 473, 477], "part": [9, 13, 37, 214, 218, 228, 234, 237, 246, 318, 319, 322, 324, 447, 464, 475, 476, 477], "intermedi": [9, 12, 17, 204, 218, 225, 230, 233, 244, 246], "deliv": [9, 495], "There": [9, 10, 12, 34, 37, 38, 45, 211, 217, 218, 225, 230, 245, 247, 248, 249, 255, 314, 317, 318, 320, 464, 470, 471, 476, 477], "reshap": [9, 324], "eas": [9, 12, 34, 220, 249, 251, 252], "achiev": [9, 12, 20, 24, 27, 34, 204, 230, 244, 247, 252, 473], "decid": [9, 314, 411], "due": [9, 211, 244, 251, 318], "among": [9, 47, 218, 230, 244, 251, 254, 323, 329, 458, 477], "fetch": [9, 15, 17, 471, 477, 487], "suffic": 9, "replai": [9, 237, 246, 473, 477], "affect": [9, 13, 30, 36, 37, 225, 464], "area": [9, 15, 204, 222, 415, 461], "readili": 9, "obtain": [9, 14, 17, 29, 30, 218, 219, 221, 225, 229, 233, 234, 237, 240, 245, 249, 313, 317, 318, 320, 439, 442, 458, 464, 471, 477], "simpli": [9, 17, 20, 44, 125, 206, 217, 222, 230, 243, 245, 318, 386, 390, 464], "coincid": 9, "idea": [9, 37, 234, 249, 259, 320], "invalid": [9, 90, 91, 164, 165, 225, 326, 471], "miss": [9, 37, 316, 326, 374, 471], "comparison": [9, 19, 223, 228, 230, 233, 251, 252], "those": [9, 29, 47, 200, 204, 217, 219, 222, 223, 226, 230, 243, 253, 316, 326, 329, 340, 369, 371, 373, 464, 466, 470], "although": [9, 12, 14, 22, 34, 51, 204, 214, 245, 259, 363, 476, 477], "solut": [9, 31, 48, 204, 211, 248, 249, 251, 329, 490], "enough": [9, 237, 313, 316, 383, 471, 475], "caus": [9, 14, 22, 32, 37, 211, 229, 236, 249, 314, 320, 326, 363], "overwhelm": 9, "overhead": [9, 13, 251, 313, 314], "mf": 9, "delta": [9, 12, 13, 33, 37, 255, 326], "php": 9, "mp": 9, "cc": [9, 476, 492], "sswp": 9, "mv": [9, 222], "track": 9, "gcn": [9, 233, 237, 249, 253, 312, 316, 320, 324, 491, 493, 496, 498], "commnet": 9, "me": 9, "keep": [9, 230, 237, 257, 318, 326, 421, 424, 477], "graphsag": [9, 233, 237, 241, 245, 249, 253, 312, 316, 318, 320, 324, 493, 496, 498], "gin": [9, 249], "vldb": [9, 487, 493], "paper": [9, 14, 24, 234, 236, 239, 240, 241, 242, 244, 245, 246, 252, 324, 329, 461, 471, 487, 491], "publish": [9, 14, 24, 29, 225, 244, 245], "2021": [9, 246], "denot": [9, 47, 51, 202, 204, 228, 230, 317, 392, 477], "w": [9, 200, 229, 255, 329, 391, 397, 411, 414, 416, 421, 424, 426, 454, 464, 466, 477, 495], "respect": [9, 16, 38, 206, 216, 218, 223, 228, 243, 244, 245, 248, 249, 255, 274, 291, 299, 315, 318, 329, 370, 383, 430, 464, 470, 476, 477], "initi": [9, 16, 18, 19, 44, 45, 46, 199, 208, 219, 230, 241, 242, 247, 249, 254, 313, 314, 324, 326, 328, 329, 403, 405, 406, 464, 467, 475, 477, 481, 487], "init_v": 9, "init_m": 9, "aggreg": [9, 218, 223, 231, 249, 257, 312, 318, 320, 324, 476, 495], "vector": [9, 210, 234, 240, 245, 249, 254, 257, 312, 320, 322, 329, 411, 415], "element": [9, 13, 47, 125, 199, 223, 228, 230, 247, 254, 313, 316, 318, 326, 329, 359, 391, 436, 458, 470, 471, 476], "specifi": [9, 16, 17, 20, 23, 24, 30, 36, 44, 45, 46, 47, 51, 55, 90, 91, 129, 164, 165, 200, 201, 204, 206, 208, 217, 223, 226, 228, 233, 237, 241, 245, 247, 255, 257, 263, 270, 271, 281, 282, 286, 290, 294, 295, 311, 312, 313, 315, 318, 321, 326, 328, 329, 340, 348, 349, 370, 383, 393, 395, 396, 399, 400, 407, 411, 412, 413, 414, 415, 421, 424, 426, 429, 442, 461, 464, 466, 470, 471, 475, 477, 478, 484], "addition": [9, 12, 14, 36, 47, 222, 234, 240, 244, 246, 248, 251, 320, 329, 476, 485], "correspond": [9, 10, 13, 15, 17, 18, 37, 41, 200, 218, 222, 226, 228, 230, 233, 237, 243, 248, 251, 255, 289, 312, 313, 314, 315, 317, 318, 322, 326, 329, 362, 363, 393, 395, 396, 397, 398, 399, 411, 457, 458, 460, 464, 466, 467, 473, 477, 485], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 52, 53, 54, 55, 90, 91, 100, 117, 125, 210, 254, 473, 476, 477, 478, 487], "m1": [9, 211, 220, 365, 490, 494], "m2": [9, 365], "below": [9, 10, 12, 20, 34, 35, 36, 37, 46, 51, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 201, 228, 237, 244, 245, 247, 248, 249, 252, 313, 316, 318, 321, 324, 363, 393, 395, 429, 464, 471, 477], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 52, 53, 54, 55, 90, 91, 100, 117, 125, 245, 252, 254, 322, 477, 487, 491], "dbl_max": 9, "backend": [9, 27, 29, 233, 236, 241, 244, 245, 249, 326, 464, 471, 478, 491], "seamless": [9, 51, 214, 250, 477], "block": [9, 200, 211, 218, 315, 391, 477], "spawn": 9, "adopt": [9, 44, 204, 206, 251, 316, 477], "csc": [9, 475], "csr": [9, 13, 46, 210, 326, 475, 478], "sent": [9, 10, 14, 16, 24, 200, 229], "mainten": [9, 476], "preserv": [9, 13, 206, 225, 256, 326, 426, 456], "effect": [9, 36, 37, 44, 204, 206, 214, 225, 228, 229, 237, 244, 249, 316, 395, 464, 477], "readi": [9, 30, 32, 37, 200, 204, 211, 214, 219, 229, 244, 314, 316, 471, 477, 485], "accept": [9, 44, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 201, 329, 411, 415, 477, 478], "insert": [9, 14, 47, 90, 164, 218, 284, 477], "newli": [9, 41, 44], "particular": [9, 37, 223, 228, 255, 315, 318, 393], "incid": [9, 20, 226, 228, 230, 340, 341, 383, 405, 454, 464], "encod": [9, 13, 100, 223, 226, 255, 313, 318, 324, 326, 328, 466, 477, 496], "dummi": 9, "furthermor": [9, 229, 230, 233, 244, 251], "proprieti": 9, "deduct": 9, "techniqu": [9, 34, 237, 246, 247, 318], "cancel": [9, 93, 200], "compens": 9, "whose": [9, 24, 222, 230, 316, 318, 329, 334, 354, 436, 440, 456, 458, 459, 475, 476], "proce": [9, 201, 383, 477], "inner": [10, 13, 16, 210, 230, 231, 257, 326, 476], "outer": [10, 14, 210, 223, 257, 379, 476], "cross": [10, 226, 259, 439], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 47, 48, 51, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 204, 206, 211, 217, 226, 228, 230, 239, 244, 245, 247, 248, 252, 254, 255, 256, 263, 265, 267, 283, 290, 307, 315, 326, 364, 366, 367, 369, 371, 373, 374, 376, 378, 379, 382, 393, 395, 396, 398, 400, 401, 402, 404, 408, 409, 410, 416, 417, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 459, 466, 471, 476, 485], "5": [10, 13, 19, 20, 31, 200, 211, 219, 224, 228, 230, 236, 237, 239, 240, 241, 242, 245, 248, 252, 312, 315, 317, 318, 319, 321, 324, 329, 335, 340, 342, 348, 367, 370, 383, 387, 388, 389, 391, 392, 400, 402, 409, 410, 411, 412, 414, 415, 429, 430, 432, 433, 434, 435, 437, 438, 441, 443, 445, 447, 448, 454, 459, 464, 470, 471, 477, 479, 485, 490, 491, 495], "9": [10, 31, 217, 220, 228, 230, 245, 313, 329, 367, 369, 415, 433, 441, 454, 459, 494], "12": [10, 20, 32, 211, 220, 230, 252, 255, 313, 314, 315, 317, 319, 331, 332, 333, 369, 431, 432, 436, 440, 444, 450, 488, 490, 494, 495], "split": [10, 46, 225, 228, 230, 239, 240, 241, 242, 313, 314, 471, 477], "roughli": 10, "across": [10, 14, 34, 35, 36, 48, 201, 204, 225, 226, 241, 244, 246, 247, 251, 476, 478], "divid": [10, 223, 228, 230, 234, 244, 255, 313, 316, 320, 321, 329, 475], "place": [10, 18, 19, 36, 45, 46, 217, 230, 322, 323, 326, 391, 411, 412, 413, 414, 415, 444, 462], "itself": [10, 20, 22, 37, 228, 230, 234, 243, 244, 257, 312, 314, 470, 471, 476], "replic": [10, 219, 405], "resid": [10, 14, 38], "j": [10, 31, 210, 255, 324, 329, 362, 363, 384, 385, 393, 395, 396, 398, 404, 415, 418, 419, 420, 442, 476], "outcom": 10, "outgo": [10, 13, 16, 24, 47, 225, 228, 230, 248, 257, 318, 329, 464, 476], "incom": [10, 13, 14, 16, 34, 47, 228, 230, 254, 257, 329], "consid": [10, 15, 18, 27, 37, 225, 230, 237, 247, 255, 256, 313, 314, 329, 393, 456, 473, 476], "vice": [10, 411], "versa": [10, 411], "compani": [10, 476], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 214, 228, 243, 251, 313, 314, 318, 321, 326, 476, 477], "regardless": [10, 206, 223, 246, 313, 409, 476], "friendli": [11, 12, 37, 216, 233, 247, 249, 250, 251], "research": [11, 225, 237, 249, 454, 471], "particularli": [11, 249, 456], "field": [11, 27, 30, 33, 38, 45, 47, 217, 237, 239, 240, 243, 245, 316, 320, 324, 326, 410, 471, 477, 488, 491], "scienc": [11, 418, 441], "solv": [11, 24, 37, 211, 213, 230, 247], "recast": [12, 14, 34], "ga": 12, "plug": [12, 34, 244], "minor": [12, 14, 34, 233, 244, 249, 252, 479], "cope": [12, 34], "life": [12, 32, 34, 217, 244], "extrem": [12, 27, 244, 320, 365, 376, 476], "fashion": [12, 20], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 42, 44, 47, 218, 225, 226, 228, 230, 233, 234, 237, 246, 247, 249, 251, 252, 254, 255, 257, 315, 316, 318, 320, 366, 367, 368, 379, 382, 390, 436, 458, 471, 473, 475, 476, 477, 478], "format": [12, 13, 20, 22, 34, 35, 45, 46, 47, 102, 176, 200, 214, 216, 230, 234, 241, 243, 249, 250, 252, 255, 283, 290, 312, 315, 318, 320, 323, 324, 326, 327, 464, 466, 471, 473, 489], "unifi": [12, 34, 42, 204, 214, 216, 218, 313, 473], "care": [12, 34, 230, 322, 323, 476], "foreign": [12, 476], "ecosystem": [12, 201, 216, 220, 232, 233, 248, 251, 481], "freedom": 12, "accord": [12, 19, 36, 44, 200, 211, 217, 218, 222, 228, 230, 234, 243, 244, 248, 249, 254, 316, 318, 322, 383, 391, 403, 404, 473, 477], "demand": [12, 204, 218, 247, 476, 477, 481], "sdk": [12, 18, 42, 49, 209, 211, 217, 221, 231, 232, 233, 247, 248, 251, 259, 469, 477, 481, 487], "domain": [12, 222, 244, 249, 411, 412, 413, 414, 415], "dedic": 12, "treat": [12, 14, 20, 34, 230, 326, 464, 466, 471, 484], "immut": [12, 34, 216, 226, 246], "persist": [12, 15, 30, 34, 48, 211, 216, 217, 244, 246, 251, 475], "fortun": [12, 20, 45, 214], "grin": [12, 216], "awar": [12, 37, 44, 201, 211, 217, 246], "introduct": [12, 34, 49, 225, 231, 247, 317, 318, 321, 329, 374, 456, 476], "foundat": [12, 209, 225, 244], "visit": [12, 29, 201, 222, 230, 248, 313], "meanwhil": [12, 214, 233, 249, 476], "compress": [12, 13, 203, 245, 255, 313, 429], "pipelin": [12, 34, 233, 244, 247, 251, 480], "balanc": [12, 314, 364], "link": [12, 31, 37, 38, 47, 51, 201, 211, 213, 218, 226, 234, 249, 252, 255, 326, 329, 366, 387, 389, 390, 400, 401, 402, 461, 464, 471], "popular": [12, 22, 29, 202, 214, 243, 245, 248, 249, 312, 324, 477], "freeli": [12, 24], "background": [12, 213], "interoper": [12, 476], "panda": [12, 214, 222, 254, 256, 270, 281, 326, 464, 493], "mar": [12, 27, 214, 228, 246, 471], "fastffi": [12, 259], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 45, 48, 125, 199, 204, 206, 211, 217, 223, 224, 226, 228, 231, 232, 233, 244, 246, 248, 251, 254, 365, 376, 383, 459, 462, 464, 481, 487], "emploi": [12, 24, 34, 51, 240, 246, 247], "captur": [12, 249], "20": [12, 13, 27, 29, 32, 34, 217, 220, 228, 230, 233, 252, 255, 256, 314, 315, 317, 326, 383, 411, 412, 433, 435, 464, 487, 488, 494, 495], "100": [12, 34, 222, 230, 236, 239, 240, 245, 255, 324, 329, 386, 393, 397, 404, 413, 464, 471, 477, 491, 495], "build": [12, 15, 31, 34, 35, 37, 46, 125, 211, 218, 222, 229, 233, 234, 243, 246, 254, 255, 265, 267, 314, 318, 320, 322, 323, 326, 412, 413, 414, 456, 471, 473, 484, 489, 496], "been": [12, 17, 23, 24, 28, 29, 33, 37, 44, 200, 211, 218, 219, 220, 222, 225, 228, 230, 232, 234, 244, 246, 247, 248, 249, 251, 255, 304, 316, 318, 326, 327, 329, 383, 406, 456, 468, 481], "go": [13, 235, 324, 391, 444, 477], "impact": [13, 248], "dive": 13, "arrowfrag": [13, 16, 254, 478], "vineyard": [13, 15, 16, 23, 28, 31, 33, 210, 211, 216, 217, 226, 233, 238, 239, 244, 250, 251, 254, 256, 286, 291, 294, 295, 326, 327, 471, 476, 477, 485, 487, 490, 491, 492, 495, 497], "basic": [13, 16, 20, 45, 46, 225, 248, 312, 315, 320, 322, 323, 324, 383, 393, 398, 470], "member": [13, 16, 228, 230, 254, 454], "string": [13, 17, 23, 33, 45, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 104, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 200, 217, 222, 223, 225, 226, 228, 243, 254, 255, 257, 262, 299, 313, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 344, 348, 349, 358, 456, 458, 460, 464, 466, 473, 475, 476, 477, 478, 487, 495, 497], "consecut": 13, "hashmap": [13, 210, 326], "arrai": [13, 17, 210, 223, 234, 243, 249, 254, 255, 256, 315, 316, 318, 321, 324, 464, 467, 479, 487], "o2g_": 13, "fragment_id": 13, "_": [13, 30, 37, 200, 221, 228, 243, 255, 326, 329, 464, 467, 487, 490, 492, 497], "vertex_label": [13, 254, 257], "perfect": [13, 326], "int64_t": [13, 210, 217, 243, 254, 255, 326, 479, 497], "std": [13, 14, 15, 210, 254, 473, 478], "string_view": 13, "uint64_t": [13, 16, 326, 473], "oid_arrays_": [13, 210], "topologi": [13, 234, 237, 246, 315, 320, 461, 473, 475, 476], "row": [13, 46, 217, 225, 234, 249, 313, 326, 457, 477], "matrix": [13, 243, 249, 255, 320, 329, 391, 409, 424, 427, 456, 464, 467], "src_type": [13, 315], "edge_typ": [13, 45, 47, 140, 159, 200, 236, 239, 240, 245, 312, 314, 315, 316, 317, 318, 321, 324, 328, 476, 491, 496], "pair": [13, 20, 220, 223, 226, 230, 254, 255, 257, 311, 324, 363, 368, 369, 375, 391, 409, 415, 464, 467, 470, 476, 478], "indptr": 13, "ie_lists_": [13, 210], "edge_label": [13, 146, 152, 164, 222, 254, 257, 471], "neighbor_vertex_id": 13, "edge_table_index": 13, "tabl": [13, 44, 200, 209, 225, 226, 230, 234, 243, 252, 312, 314, 326, 471, 473, 475, 476, 478], "uint32_t": [13, 254, 326], "num_edg": 13, "ie_offsets_lists_": [13, 210], "offset": [13, 210, 254, 315, 323, 367, 477], "slice": [13, 218, 256, 326, 470], "ie_list": 13, "ie_offset": 13, "num_vertic": 13, "oe_lists_": [13, 210], "oe_offsets_lists_": [13, 210], "oe_list": 13, "oe_offset": 13, "edge_tables_": [13, 210], "vertex_tables_": [13, 210], "oid_t": [13, 15, 16, 210, 254], "vid_t": [13, 15, 16, 210, 254], "sizeof": 13, "uint8_t": 13, "load_factor": 13, "observ": [13, 23, 211], "practic": [13, 16, 28, 203, 218, 226, 234, 237, 244, 249, 313, 314, 316, 477], "load_factori": 13, "15": [13, 211, 230, 239, 240, 242, 252, 314, 315, 317, 318, 424, 446, 457, 464, 471], "extra": [13, 37, 211, 217, 219, 329, 425, 490], "column": [13, 18, 33, 45, 47, 62, 74, 75, 125, 136, 148, 149, 199, 200, 209, 210, 214, 218, 226, 234, 243, 245, 249, 254, 256, 257, 264, 313, 323, 326, 457, 473, 477, 478, 487, 491, 497], "edge_id": 13, "uniqu": [13, 45, 46, 47, 200, 208, 218, 222, 223, 226, 228, 243, 244, 245, 246, 255, 303, 304, 313, 317, 322, 323, 326, 329, 431, 437, 470, 477, 478], "kept": [13, 228, 230, 254], "summari": [13, 251, 344], "argument": [13, 23, 30, 99, 173, 200, 228, 230, 237, 241, 243, 329, 331, 332, 333, 362, 370, 400, 407, 411, 412, 413, 414, 415, 442, 464, 467, 470, 471, 477, 478, 487], "use_perfect_hash": [13, 254, 305, 326, 471], "load_from": [13, 22, 30, 326, 471, 475], "realli": 13, "margin": 13, "former": [13, 247], "globalvertexmap": 13, "later": [13, 18, 20, 32, 33, 220, 222, 230, 248, 326, 471, 476, 477, 494], "localvertexmap": 13, "suitabl": [13, 47, 203, 244, 251, 314, 318, 324, 383, 477, 480], "dozen": 13, "hundr": [13, 393, 404], "repeatedli": [13, 218, 247], "add_vertic": [13, 214, 222, 243, 326, 464, 467, 468, 491, 492, 497], "sure": [13, 23, 27, 30, 41, 45, 100, 174, 201, 219, 222, 230, 318, 322, 324, 471, 477], "fairli": [13, 220], "8": [13, 20, 31, 32, 33, 35, 37, 125, 211, 217, 220, 222, 228, 230, 233, 236, 252, 255, 313, 367, 390, 409, 432, 441, 443, 449, 453, 459, 461, 464, 466, 477, 479, 490, 495], "absolut": 13, "int32_t": [13, 243, 326, 497], "vid_typ": [13, 33, 254, 305, 326, 471], "compact_edg": [13, 254, 305, 326, 471], "compact": [13, 254, 326], "varint": [13, 326], "half": [13, 326], "generated_eid": 13, "save": [13, 18, 28, 29, 51, 217, 314, 326, 329, 477], "interact": [13, 27, 29, 33, 36, 37, 38, 41, 42, 44, 45, 47, 48, 52, 53, 54, 55, 90, 91, 100, 117, 125, 199, 200, 202, 204, 206, 207, 208, 214, 217, 218, 219, 221, 222, 224, 225, 227, 229, 230, 231, 233, 243, 244, 246, 247, 250, 251, 253, 283, 326, 405, 454, 469, 471, 484, 491, 495], "vertex_id": [13, 24, 206, 214, 243, 497], "retain_oid": [13, 217, 243, 254, 305, 326, 471, 478, 497], "gain": [13, 37], "signific": [13, 246, 251], "arrowprojectedfrag": [13, 15, 16, 254, 263], "implicit": [13, 467], "arrowflattenfrag": 13, "thought": [13, 392], "view": [13, 20, 24, 209, 243, 244, 275, 337, 341, 360, 361, 464, 467, 473, 485], "mainli": [13, 46, 218, 223, 230, 251, 320], "purpos": [13, 42, 225, 230, 244, 476], "penalti": 13, "arrowprojectfrag": 13, "r1": [13, 256, 479, 480], "r2": [13, 256, 479, 480], "r3": [13, 256, 479], "projected_g": 13, "_project_to_simpl": [13, 16, 17, 22], "otherwis": [13, 33, 230, 247, 255, 313, 317, 318, 319, 329, 346, 383, 403, 413, 462, 464, 471, 476, 477], "express": [14, 15, 24, 202, 218, 223, 224, 226, 237, 246, 248, 256, 313, 315, 318, 415, 464, 495], "modifi": [14, 20, 24, 28, 200, 204, 217, 223, 229, 268, 269, 284, 285, 319, 342, 395, 462, 475, 476], "adher": [14, 35, 47, 225, 476], "think": [14, 24], "principl": [14, 322], "privileg": 14, "experienc": [14, 248], "inform": [14, 15, 16, 19, 27, 29, 38, 125, 200, 201, 211, 218, 219, 222, 223, 226, 240, 245, 247, 249, 250, 259, 273, 312, 313, 314, 315, 318, 320, 322, 326, 329, 344, 362, 403, 425, 426, 454, 464, 471, 473, 477, 484], "hop": [14, 218, 226, 228, 230, 233, 234, 237, 244, 248, 249, 312, 316, 318, 320, 321, 322, 324], "slow": [14, 220], "consequ": [14, 244, 247], "piec": [14, 202, 216, 323, 471], "destin": [14, 33, 45, 46, 47, 74, 77, 148, 151, 217, 222, 223, 230, 234, 243, 245, 254, 256, 272, 313, 314, 315, 317, 318, 324, 326, 328, 470, 475, 476, 477, 497], "abovement": 14, "peval": [14, 16, 17, 18, 34, 247, 254, 262, 481, 487], "incev": [14, 16, 17, 18, 34, 247, 254, 262, 481, 487], "assembl": [14, 34, 218, 246, 247, 254, 326], "unlik": [14, 17, 224, 234, 237, 244, 464], "modif": [14, 22, 233, 244, 249, 326, 467], "convent": [14, 37, 211, 225, 397, 423, 485], "taught": [14, 230], "colleg": 14, "textbook": 14, "answer": [14, 34, 37, 211, 222, 244, 477], "collect": [14, 34, 125, 199, 223, 228, 229, 230, 248, 249, 250, 324, 464], "partial": [14, 16, 18, 34, 228, 254, 256, 313, 406, 481], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 46, 217, 237, 251, 313, 321, 329, 399, 464], "accur": [14, 222, 225], "long": [14, 17, 30, 33, 38, 206, 222, 226, 228, 230, 246, 251, 255, 318, 476, 477, 487, 495], "const": [14, 15, 16, 210, 254, 257, 322, 323, 476, 477, 478], "fragment_t": [14, 15, 16, 254], "frag": [14, 17, 18, 210, 262, 473, 478, 487], "context_t": [14, 15, 16, 254], "ctx": [14, 17, 22, 254, 475, 487], "message_manager_t": [14, 16, 254], "vertex_t": [14, 16, 210, 254], "native_sourc": [14, 18, 487], "getinnervertex": [14, 254], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 210, 254, 473, 487], "get_neighbor": 14, "min": [14, 18, 24, 223, 257, 487, 495], "static_cast": [14, 16, 210, 473], "get_data": [14, 210], "isoutervertex": [14, 254], "put": [14, 16, 17, 22, 47, 48, 54, 90, 91, 125, 128, 164, 165, 199, 200, 322], "channel": [14, 16, 37], "syncstateonoutervertex": 14, "els": [14, 16, 18, 210, 230, 314, 324, 326, 422, 476, 477, 487], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 210, 254, 473, 487], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 230, 257, 476], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 487], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 210, 254], "dijkstra": [14, 18, 247, 329, 487], "checkout": [14, 37, 319], "seri": [15, 230, 249, 254, 318, 476], "strong": [15, 203, 218, 247], "typenam": [15, 16, 56, 60, 63, 70, 79, 83, 89, 121, 123, 210, 254], "frag_t": [15, 16, 254], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 37, 44, 45, 217, 229, 230, 248, 315, 318, 322, 324, 470, 479], "shared_ptr": [15, 210, 254, 473, 478], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 29, 36, 41, 206, 222, 230, 243, 471, 487, 497], "global": [15, 24, 218, 226, 228, 230, 249, 305, 326, 456, 471, 478, 484, 495], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 41, 46, 217, 218, 230, 243, 249, 426, 470], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "o_sourc": 15, "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 45, 46, 102, 200, 201, 208, 210, 239, 243, 254, 255, 257, 262, 312, 314, 315, 319, 322, 324, 464, 467, 473, 481, 487, 496, 497], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 372], "len": [15, 228, 230, 239, 241, 314, 329, 338, 369, 386, 388, 391, 393, 394, 398, 464], "ed": [15, 23, 397, 411, 418, 441, 447], "ctruee": 15, "rather": [15, 18, 46, 204, 230, 243, 248, 250, 251, 329, 383, 425, 476], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 30, 266, 467], "dynamic_properti": [15, 279, 467], "def": [15, 18, 23, 221, 236, 239, 240, 241, 242, 243, 245, 262, 312, 314, 315, 316, 317, 318, 321, 324, 370, 477, 487, 491, 492, 496, 497], "arg": [15, 52, 53, 54, 55, 90, 91, 100, 117, 125, 239, 241, 254, 255, 256, 257, 290, 308, 315, 316, 317, 318, 321, 324, 328, 471, 477], "appasset": [15, 18, 262, 263, 267, 469, 487], "algo": [15, 16, 17, 22, 23, 255, 263], "flash_bf": 15, "vertex_data": [15, 16, 165, 194, 255, 263], "gscoordin": [15, 28, 36], "builtin": [15, 19, 20, 48, 199, 206, 465, 467, 469], "gs_conf": [15, 16, 263], "yaml": [15, 16, 28, 29, 38, 44, 45, 46, 47, 201, 206, 208, 217, 229, 241, 255, 263, 471, 475, 477, 495], "cpp_flash": 15, "class_nam": [15, 16, 263], "compatible_graph": [15, 16, 263], "immutableedgecutfrag": 15, "log": [15, 17, 44, 93, 167, 200, 211, 216, 239, 240, 244, 246, 476, 478, 490], "p2p": [15, 17, 22, 23], "network": [15, 27, 47, 211, 214, 216, 219, 230, 234, 238, 240, 244, 245, 247, 250, 251, 252, 253, 255, 312, 313, 314, 316, 318, 320, 324, 329, 384, 385, 391, 393, 397, 400, 401, 402, 405, 417, 441, 452, 453, 455, 456, 461, 465, 479, 490], "load_p2p_network": [15, 16, 17, 18, 214, 255, 256, 487], "attribut": [15, 19, 47, 226, 237, 240, 245, 247, 249, 254, 255, 288, 299, 314, 315, 317, 320, 324, 325, 328, 329, 331, 332, 333, 348, 349, 358, 370, 383, 388, 407, 411, 412, 413, 414, 415, 418, 419, 420, 454, 456, 458, 461, 462, 464, 465, 467, 473], "convert": [15, 20, 23, 51, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 225, 234, 255, 270, 271, 281, 282, 294, 295, 312, 313, 320, 324, 384, 385, 442, 459, 464, 466, 467, 473], "simple_graph": [15, 16], "dist": [15, 17, 221, 255, 256, 319, 322, 411, 413, 415, 471, 487, 495], "codegen": [15, 218], "bit": [15, 220, 223, 228, 230, 475], "longer": [15, 239, 257, 471], "retriev": [15, 49, 51, 200, 216, 222, 226, 228, 245, 246, 256, 270, 271, 281, 282, 286, 290, 294, 295, 315, 316, 318, 324, 329, 470, 477, 478], "displai": [15, 208, 229, 313], "vertex_rang": [15, 256, 270, 271, 281, 282, 286, 294, 295, 326, 470], "end": [15, 16, 210, 214, 223, 228, 230, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 251, 256, 257, 318, 323, 329, 343, 352, 357, 358, 371, 383, 466, 470, 476, 481], "sort_valu": 15, "pip3": [16, 19, 23, 35, 37, 199, 211, 221, 229, 484, 488, 490, 494], "degre": [16, 19, 20, 210, 214, 225, 230, 237, 255, 257, 315, 316, 321, 329, 338, 363, 364, 383, 393, 394, 395, 396, 397, 398, 399, 400, 403, 404, 409, 421, 422, 423, 424, 458, 464, 465, 477], "vertexdatacontext": [16, 17, 254, 329, 487], "myappcontext": 16, "explicit": [16, 254, 408, 464, 471], "parallelmessagemanag": [16, 17, 487], "param1": [16, 91, 165], "setvalu": [16, 17, 487], "vertex_array_t": [16, 254], "variabl": [16, 29, 33, 39, 41, 47, 211, 219, 228, 262, 383, 471, 477, 478, 490], "And": [16, 18, 23, 29, 31, 36, 38, 214, 218, 220, 230, 243, 252, 255, 256, 317, 322, 467, 470, 471, 477], "zero": [16, 47, 246, 255, 313, 318, 329, 346, 364, 373, 406, 458, 459, 478], "myapp": 16, "parallelappbas": [16, 17, 487], "parallelengin": [16, 17, 487], "install_parallel_work": 16, "constexpr": [16, 254], "messagestrategi": [16, 18, 254, 257, 487], "message_strategi": [16, 254], "ksynconoutervertex": [16, 18, 254, 257, 487], "loadstrategi": [16, 254], "load_strategi": [16, 254], "kbothoutin": [16, 254], "initchannel": 16, "noth": [16, 257, 273, 326, 328, 464], "forc": [16, 37, 243], "forcecontinu": [16, 17, 487], "getincomingadjlist": [16, 210, 254], "counter": [16, 230], "runnabl": [16, 17, 23, 87, 161], "content": [16, 47, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 200, 203, 214, 230, 240, 243, 245, 329, 461, 475, 497], "my_app": [16, 18, 487], "cpp_pie": [16, 255, 263], "context_typ": [16, 254, 255, 263], "dynamicprojectedfrag": 16, "codebas": [16, 35], "my_app_context": 16, "zip": [16, 203, 221, 222, 229, 263, 411, 415, 464, 495], "jr": 16, "load_app": [16, 17, 18, 22, 487], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 255, 256, 326, 470, 487], "demo": [17, 22, 23, 220, 259, 471, 477, 485, 487], "turn": [17, 49, 204, 209, 211, 222, 252, 259, 458, 485], "verbos": [17, 23, 38, 211, 485], "cluster_typ": [17, 22, 222, 243, 255, 256, 471, 475, 487, 497], "add_lib": [17, 22, 471], "home": [17, 22, 23, 28, 38, 45, 46, 211, 214, 243, 254, 319, 320, 322, 323, 325, 326, 329, 373, 484, 485, 487, 489, 497], "19": [17, 22, 23, 32, 211, 221, 230, 252, 314, 315, 317, 485, 490, 494], "shade": [17, 22, 23, 487], "java_pi": [17, 255], "threadnum": [17, 487], "info": [17, 38, 44, 52, 126, 201, 211, 220, 230, 241, 257, 326, 464, 467, 471, 476, 477, 478, 485], "avail": [17, 23, 29, 30, 41, 46, 200, 202, 209, 214, 222, 223, 226, 229, 237, 243, 246, 252, 255, 311, 324, 412, 413, 414, 464, 471, 473, 476, 487], "mvn": [17, 22, 125, 259, 477], "clean": [17, 32, 125, 214, 220, 222, 245, 259, 322, 476], "dskiptest": [17, 259], "pom": [17, 23, 125, 477], "xml": [17, 23, 254, 477], "groupid": [17, 23, 125, 477, 487], "artifactid": [17, 23, 125, 477, 487], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 477, 487], "spark": [17, 475], "drastic": 17, "great": [17, 23, 37, 477], "suppos": [17, 230, 458, 476], "traversecontext": [17, 487], "overrid": [17, 243, 254, 312, 322, 484, 487], "ifrag": [17, 487], "parallelcontextbas": [17, 487], "adjlist": [17, 254, 257, 475, 487], "nbr": [17, 20, 210, 254, 257, 464, 487], "dst": [17, 18, 30, 90, 125, 164, 199, 214, 226, 237, 243, 256, 312, 315, 326, 328, 470, 473, 476, 487, 496, 497], "largest": [17, 230, 329, 409, 487], "vertexarrai": [17, 254, 257, 487], "math": [17, 236, 240, 245, 329, 413, 414, 491, 493], "max": [17, 223, 257, 325, 329, 487, 495], "pars": [17, 218, 243, 255, 313, 473, 477], "maxiter": [17, 487], "jsonobject": [17, 487], "gsvertexarrai": [17, 487], "createfficontext": [17, 487], "containskei": [17, 487], "getinteg": [17, 487], "javadoc": [17, 35], "proper": [17, 37], "javaapp": [17, 469, 487], "But": [17, 217, 230, 243, 251, 259, 464, 470], "rememb": [17, 22, 23, 30, 33, 44, 206, 477, 484], "pack": [17, 23, 487], "param": [17, 23, 29, 87, 108, 161, 182, 200, 211, 220, 222, 241, 255, 275, 276, 290, 305, 307, 311, 318, 324, 471, 477, 487], "b": [17, 18, 22, 37, 223, 225, 228, 230, 318, 373, 391, 404, 410, 411, 415, 420, 421, 422, 424, 452, 460, 464, 487, 495], "bother": 17, "click": [17, 36, 37, 237, 314, 315, 318, 488], "pure": [18, 254, 481], "just": [18, 19, 23, 27, 45, 46, 48, 199, 201, 203, 206, 211, 214, 217, 228, 230, 251, 259, 322, 326, 464, 467, 471, 477, 479], "udf": [18, 262, 470, 487], "decor": [18, 487], "vd_type": [18, 257, 262, 487], "md_type": [18, 257, 262, 487], "youralgorithm": [18, 487], "staticmethod": [18, 262, 487], "statu": [18, 27, 29, 30, 38, 49, 52, 53, 54, 55, 90, 91, 93, 100, 106, 117, 125, 126, 127, 128, 129, 164, 165, 167, 174, 180, 191, 199, 206, 208, 211, 239, 322, 323, 329, 477, 481, 485], "cython": [18, 34, 211, 290, 469, 487], "sssp_pie": [18, 487], "v_label_num": [18, 478, 487], "vertex_label_num": [18, 257, 473, 478, 487], "v_label_id": [18, 257, 487], "init_valu": [18, 257, 487], "1000000000": [18, 255, 487], "pieaggregatetyp": [18, 257, 487], "kminaggreg": [18, 257, 487], "register_sync_buff": [18, 257, 487], "get_config": [18, 257, 471, 487], "declar": [18, 218, 228, 230, 233, 248, 251, 314, 487], "get_inner_nod": [18, 257, 487], "break": [18, 37, 51, 204, 229, 324, 487], "set_node_valu": [18, 257, 487], "e_label_num": [18, 210, 478, 487], "edge_label_num": [18, 257, 473, 478, 487], "e_label_id": [18, 487], "get_outgoing_edg": [18, 257, 487], "third": [18, 243, 244, 248, 326, 449, 450], "get_int": [18, 257, 487], "get_node_valu": [18, 257, 487], "iv": [18, 487], "inner_nod": [18, 257, 487], "v_dist": [18, 487], "u_dist": [18, 210, 487], "classic": [18, 237, 317, 465], "yourpregelalgorithm": [18, 487], "sssp_pregel": [18, 487], "set_valu": [18, 257, 487], "src_id": [18, 46, 210, 237, 313, 314, 315, 317, 318, 321, 324, 328, 487], "cur_dist": [18, 487], "new_dist": [18, 487], "outgoing_edg": [18, 257, 487], "vote_to_halt": [18, 257, 487], "sin": [18, 487], "m_pi": [18, 487], "translat": [18, 37, 222, 244], "generate_eid": [18, 217, 243, 254, 305, 326, 471, 478, 487, 497], "test": [18, 23, 29, 33, 49, 51, 200, 203, 211, 216, 217, 220, 230, 233, 236, 239, 240, 245, 249, 312, 322, 324, 328, 348, 349, 383, 464, 466, 471, 476, 477, 484, 488, 489, 491, 496], "futur": [18, 47, 125, 199, 204, 223, 228, 230, 243], "to_gar": [18, 487], "my_sssp_pregel": [18, 487], "gar": [18, 255, 263, 487], "construct": [19, 204, 209, 230, 234, 237, 243, 244, 245, 246, 254, 305, 312, 313, 314, 315, 316, 326, 327, 331, 332, 372, 393, 395, 396, 398, 404, 408, 409, 410, 418, 421, 422, 423, 424, 426, 442, 446, 450, 456, 458, 471, 475, 478], "expand": [19, 204, 218, 230, 231, 316, 318, 465], "add_edges_from": [19, 20, 348, 464], "add_nod": [19, 20, 464, 467], "number_of_nod": [19, 20, 329, 373, 457, 464], "number_of_edg": [19, 20, 338, 373, 457, 464], "sort": [19, 20, 210, 218, 230, 329, 335, 363, 367, 370, 373, 398, 399, 457, 458, 464, 476], "connected_compon": [19, 329], "nx": [19, 20, 214, 266, 268, 269, 272, 275, 277, 279, 284, 285, 289, 292, 293, 326, 329, 464, 466, 467], "add_nodes_from": [19, 20, 464], "red": [19, 20, 37, 222, 313, 464], "green": [19, 20, 36, 37], "add_edg": [19, 20, 199, 214, 222, 243, 326, 342, 348, 349, 352, 357, 358, 464, 467, 491, 492, 497], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": [19, 202], "dict": [19, 20, 27, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 255, 256, 283, 291, 311, 314, 315, 318, 326, 327, 411, 412, 413, 414, 421, 422, 442, 464, 470, 471, 477], "draw": [19, 51, 204, 230, 411, 414], "matplotlib": [19, 230], "with_label": 19, "font_weight": 19, "bold": [19, 252], "twitter": [19, 252], "wget": [19, 22, 23, 29, 35, 221, 319, 495], "raw": [19, 22, 23, 45, 46, 48, 201, 208, 217, 218, 234, 281, 282, 314, 320, 322, 323, 328], "githubusercont": [19, 22, 23], "p": [19, 20, 31, 36, 48, 51, 222, 228, 230, 245, 246, 255, 314, 324, 329, 387, 388, 389, 391, 400, 401, 402, 405, 406, 408, 410, 412, 413, 414, 415, 418, 420, 495], "o": [19, 22, 23, 27, 30, 33, 38, 254, 324, 329, 346, 397, 399, 404, 412, 413, 414, 416, 417, 418, 464, 477, 488, 491], "gs_nx": 19, "g1": [19, 326, 468, 479, 480], "read_edgelist": [19, 466], "expandvar": [19, 22], "nodetyp": [19, 466], "create_us": [19, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 393, 394, 395, 396, 398, 400, 401, 402, 404, 408, 409, 410, 416, 417, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 459, 466], "g2": [19, 326, 464, 468, 479, 480], "ret_g": 19, "ret_nx": 19, "lack": [20, 32, 222, 250, 329], "hashabl": [20, 344, 359, 421, 464, 466], "float": [20, 82, 96, 223, 226, 228, 239, 243, 252, 255, 312, 313, 314, 315, 323, 324, 325, 329, 383, 386, 387, 388, 389, 391, 402, 403, 404, 405, 406, 411, 412, 413, 414, 415, 418, 419, 420, 456, 464, 466, 471, 475, 479, 495, 496, 497], "tupl": [20, 230, 243, 313, 314, 315, 324, 326, 329, 348, 349, 358, 370, 411, 415, 421, 460, 464, 466, 471], "though": [20, 383, 464, 477], "yield": [20, 51, 206, 318, 324, 411, 415, 464], "node_attribute_dict": 20, "discuss": [20, 211, 230, 329, 476, 490], "incorpor": [20, 51, 225], "path_graph": [20, 329, 340, 342, 343, 349, 464, 466], "grown": [20, 373, 406, 464], "unpack": [20, 229, 254, 464], "ebunch": [20, 464], "dictionari": [20, 202, 255, 299, 329, 411, 412, 413, 414, 421, 422, 423, 424, 464, 466, 475], "11": [20, 27, 30, 31, 32, 217, 220, 230, 236, 252, 255, 313, 314, 315, 317, 331, 332, 333, 369, 464, 477, 485], "complaint": 20, "clear": [20, 37, 228, 230, 268, 269, 364, 366, 367, 369, 371, 373, 374, 376, 378, 379, 382, 393, 395, 396, 398, 400, 401, 402, 404, 408, 409, 410, 416, 417, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 459, 464, 466, 477], "quietli": [20, 359, 464], "ignor": [20, 48, 329, 340, 359, 464, 471], "spam": 20, "stage": [20, 211, 216, 234, 250, 251, 318, 476], "seen": [20, 218, 244, 476], "report": [20, 211, 225, 252, 289, 387, 388, 389, 464, 467], "adj": [20, 257, 329, 464], "item": [20, 29, 46, 201, 241, 244, 313, 314, 315, 318, 324, 329, 464, 477], "One": [20, 218, 223, 244, 248, 249, 250, 251, 255, 316, 318, 395, 404, 458, 477], "nbunch": [20, 337, 341, 343, 359, 464], "remove_nod": [20, 464], "remove_nodes_from": [20, 464], "remove_edg": [20, 464], "remove_edges_from": [20, 393, 395, 464], "instanti": [20, 255, 324, 479], "digraph": [20, 326, 331, 341, 343, 348, 349, 352, 357, 358, 369, 386, 387, 388, 391, 395, 396, 398, 400, 401, 402, 403, 407, 458, 459, 460, 462, 465, 466, 467], "edgelist": [20, 442, 466], "subscript": [20, 464], "notat": [20, 44, 46, 429, 431, 433, 435, 437, 443, 445, 464], "yellow": [20, 313], "blue": [20, 313, 464], "undirect": [20, 47, 243, 249, 255, 275, 314, 318, 326, 329, 335, 339, 361, 384, 385, 391, 393, 400, 402, 405, 407, 408, 409, 411, 412, 413, 414, 415, 421, 426, 430, 431, 434, 437, 438, 440, 446, 459, 461, 464, 478], "twice": [20, 442, 464], "fg": [20, 478], "add_weighted_edges_from": [20, 348, 464], "125": [20, 313, 397, 408], "75": [20, 230, 236, 239, 240, 245, 252, 329, 387, 388, 389, 391, 471, 491], "375": 20, "eattr": [20, 464], "wt": 20, "attach": [20, 254, 313, 400, 403], "fridai": [20, 464, 467], "mondai": 20, "5pm": [20, 464], "2pm": [20, 464], "room": [20, 464], "714": [20, 464], "to_direct": [20, 326, 384, 385, 400, 402, 464], "represent": [20, 47, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 204, 218, 244, 246, 249, 326, 462, 464, 475], "dg": [20, 233, 249], "dgv": 20, "as_view": [20, 360, 361, 464], "shallow": 20, "out_edg": [20, 341, 464], "in_degre": [20, 237, 239, 316, 318, 321, 324, 395, 421, 422, 464], "predecessor": [20, 334, 407, 458, 464], "successor": [20, 301, 334, 401, 402, 407, 464], "out_degre": [20, 395, 421, 422, 464], "feel": [20, 37, 211], "inconsist": [20, 252], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 37, 228, 237, 249, 255, 316, 321, 386, 387, 388, 389, 391, 393, 397, 400, 402, 403, 404, 405, 406, 411, 412, 413, 414, 415, 418, 420], "to_undirect": [20, 326, 400, 402, 464], "theoret": 20, "load_ldbc": [20, 230, 475, 495], "foo": [20, 464], "famou": [22, 23, 463], "hadoop": [22, 477], "stop": [22, 27, 30, 45, 55, 125, 129, 199, 200, 208, 246, 250, 254, 329], "open": [22, 36, 37, 200, 219, 229, 231, 237, 248, 251, 324, 466, 476, 477], "actual": [22, 23, 28, 45, 47, 199, 219, 226, 228, 230, 237, 258, 260, 317, 415, 464, 467, 475, 485], "vertexinputformat": 22, "edgeinputformat": 22, "vformat": [22, 326], "p2pvertexinputformat": 22, "eformat": [22, 326], "p2pedgeinputformat": 22, "gs_test_dir": [22, 33], "graphscope_sess": [22, 326], "31": [22, 23, 214, 243, 314, 315, 317, 497], "v_prop": [22, 254, 288], "vdata": 22, "e_prop": [22, 254, 288], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 201, 329], "toward": [22, 477], "offici": [22, 217, 219, 220, 229, 248], "pl": 22, "snapshot": [22, 226, 251, 473, 477], "writabl": 22, "degrad": [22, 251], "procedur": [22, 29, 44, 45, 49, 54, 100, 125, 128, 174, 199, 200, 201, 204, 205, 207, 209, 217, 218, 230, 265, 406], "except": [22, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 204, 211, 229, 236, 239, 240, 243, 245, 250, 317, 324, 342, 359, 363, 374, 383, 393, 395, 444, 464, 471, 476, 491], "right": [22, 223, 225, 228, 243, 322, 365, 374, 376, 397, 462], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 32, 37, 51, 200, 214, 218, 233, 247, 249, 251, 252, 386], "proceed": [23, 27, 201, 386, 404], "side": [23, 37, 218, 228, 229, 255, 274, 314, 367, 476], "venv": [23, 220, 245], "virtualenv": 23, "pyspark_venv": 23, "bin": [23, 31, 44, 45, 51, 200, 201, 206, 219, 220, 229, 230, 244, 245, 338, 477, 485, 489, 495], "pyspark_venv_g": 23, "tar": [23, 29, 31, 477], "gz": [23, 31, 466, 477], "upload": [23, 117, 191, 217], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 244, 475, 495], "oss": [23, 29, 31, 243, 254, 319, 326, 477, 487, 488, 497], "beij": [23, 29, 31, 234, 249, 313, 477, 488], "fixm": 23, "yuansi": 23, "env": [23, 211, 220, 241, 245, 319], "var": [23, 33, 38, 211, 243, 324, 477, 485, 497], "gs_jar": 23, "l": [23, 29, 35, 206, 237, 249, 316, 384, 385, 387, 388, 389, 396, 397, 398, 400, 401, 402, 405, 412, 413, 414, 415, 417, 421, 422, 423, 424, 453, 456, 464, 484, 485], "lib": [23, 31, 125, 202, 219, 263, 477], "7077": 23, "master_url": 23, "conf": [23, 44, 45, 201, 219, 229, 254, 477, 495], "executor": [23, 35, 38, 48, 217, 219, 244, 327, 485], "driver": [23, 27, 125, 199, 204, 224, 229, 243, 291, 326, 477, 495], "2g": 23, "10g": [23, 489], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": [23, 223], "url": [23, 93, 167, 200, 219, 326, 327, 477, 495], "rdd": 23, "classifi": [23, 234, 236, 240, 245, 249, 324, 487], "maven": [23, 49, 259, 477, 487], "conflict": [23, 220, 230, 236, 326, 454, 477], "correctli": [23, 37, 211, 233, 329, 477], "resolv": [23, 28, 211, 243, 326, 478], "goal": [23, 204, 209, 218, 223, 234, 246, 249, 476], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 210, 218, 370, 477], "config": [23, 27, 28, 31, 48, 208, 217, 219, 229, 241, 289, 299, 311, 312, 325, 328, 468, 471, 473, 477, 478, 484, 495, 496], "socket": [23, 28, 30, 219, 254, 478], "bound": [23, 47, 200, 228, 230, 248, 290, 383, 471, 476, 479], "vineyardsock": 23, "filepath": [23, 116], "sock": [23, 28, 219], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "shell": [23, 35, 51, 201, 206, 207, 217, 219, 224, 248, 255], "grow": [24, 204, 214, 233, 244, 383, 393, 400, 401, 402, 463, 476], "capac": [24, 33, 219, 464, 471], "indivis": 24, "succinctli": [24, 202], "oppos": [24, 237], "orient": [24, 237, 251, 321, 477], "googl": [24, 35, 247, 489], "powergraph": [24, 251, 252], "wa": [24, 29, 30, 37, 206, 225, 228, 230, 246, 252, 318, 329, 383, 398, 411, 412, 413, 414, 463, 477], "2010": [24, 252, 255, 329, 389, 456, 461], "sequenc": [24, 202, 223, 228, 230, 255, 326, 363, 383, 393, 394, 395, 396, 397, 398, 399, 415, 421, 422, 425, 458, 459, 464, 465, 478], "conceptu": [24, 225], "behavior": [24, 44, 200, 228, 230, 243, 257, 471], "becom": [24, 206, 214, 225, 230, 237, 464, 476, 477], "inact": 24, "again": [24, 211, 243, 479, 484], "termin": [24, 36, 201, 222], "halt": [24, 248, 257, 403], "individu": [24, 217, 219, 225, 240, 245], "messageiter": [24, 257], "mindist": 24, "issourc": 24, "inf": 24, "done": [24, 46, 234, 237, 313, 324, 329, 426, 478], "getvalu": [24, 210], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 37, 211, 477], "dramat": 24, "face": [24, 31, 218, 230, 247, 449, 450], "power": [24, 125, 199, 206, 223, 224, 228, 230, 233, 248, 255, 329, 383, 393, 441, 464], "law": [24, 383, 393], "gather": [24, 471], "scatter": [24, 314], "accumul": [24, 237, 458], "workload": [27, 36, 204, 214, 216, 218, 219, 227, 230, 233, 244, 246, 252, 477, 479, 480], "grpc": [27, 28, 31, 211, 254, 488, 490], "linux": [27, 30, 31, 36, 203, 217, 236, 252, 259, 494], "maco": [27, 30, 36, 203, 211, 220, 488, 490, 491, 494], "skip": [27, 31, 35, 248, 259, 477], "minikub": [27, 30, 477], "instruct": [27, 29, 30, 33, 37, 201, 204, 206, 217, 219, 220, 221, 222, 229, 245, 248, 254, 267, 318], "platform": [27, 32, 37, 42, 216, 217, 218, 236, 250, 251, 252, 259, 313, 455, 471], "desktop": [27, 477, 491], "server": [27, 29, 48, 52, 90, 91, 100, 117, 126, 164, 165, 174, 191, 199, 200, 218, 219, 222, 226, 229, 231, 233, 237, 242, 244, 246, 248, 253, 317, 322, 323, 324, 477, 489, 495], "kubectl": [27, 29, 30, 33, 38, 48, 211, 217, 477, 485, 490], "kube": [27, 471], "apivers": [27, 33, 241], "v1": [27, 33, 35, 52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200, 211, 228, 230, 236, 239, 240, 241, 245, 248, 312, 429, 442, 467, 490, 491, 496], "certif": 27, "ca": 27, "crt": 27, "last": [27, 30, 230, 318, 323, 326, 386, 458, 485], "16": [27, 31, 217, 219, 230, 252, 312, 314, 315, 317, 319, 420, 443, 457, 496], "2023": [27, 225, 485], "44": [27, 48, 252, 314, 315, 317, 457], "05": [27, 391, 404], "cst": 27, "sig": [27, 487, 494], "28": [27, 228, 230, 234, 249, 252, 314, 315, 317, 461], "cluster_info": 27, "172": [27, 252], "21": [27, 31, 214, 230, 252, 255, 314, 315, 317, 437, 477], "67": [27, 252, 255], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 30, 33, 38, 241, 471], "profil": [27, 495], "encapsul": [27, 51, 201, 206, 233, 234, 312, 318, 471], "entranc": [27, 318], "tag": [27, 41, 48, 228, 230, 252, 391, 471, 477, 489], "intranet": 27, "internet": [27, 29, 31, 222, 230, 247, 461, 463], "might": [27, 44, 47, 201, 211, 329, 421, 464, 480], "k8s_image_registri": [27, 33, 471], "k8s_image_repositori": [27, 471], "k8s_image_tag": [27, 33, 241, 471], "fit": [27, 204, 214, 217, 238, 239, 259], "increas": [27, 38, 44, 211, 214, 314, 362, 363, 371, 393, 395, 403, 421, 424, 426, 476], "cpu": [27, 200, 211, 217, 241, 242, 319, 471, 480, 490], "num_work": [27, 28, 33, 241, 242, 311, 471, 495], "k8s_engine_cpu": [27, 311, 471], "32": [27, 228, 252, 314, 315, 317, 325, 329, 475], "k8s_engine_mem": [27, 211, 241, 311, 471, 490], "256gi": 27, "vineyard_shared_mem": [27, 211, 241, 311, 471, 490], "preexist": [27, 225], "k8s_client_config": [27, 471], "disk": [27, 204, 211, 217, 244, 477], "test_data": [27, 236, 240, 245, 488, 491], "testingdata": [27, 30, 33, 488, 491], "k8s_volum": [27, 30, 33, 311, 471, 488, 491], "constructor": [27, 243, 364, 366, 367, 369, 371, 373, 374, 376, 378, 379, 382, 393, 395, 396, 398, 400, 401, 402, 404, 408, 409, 410, 416, 417, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 459, 466], "vm": [27, 30, 254], "copi": [27, 29, 30, 217, 244, 246, 251, 272, 329, 336, 340, 342, 343, 401, 407, 462, 464, 467, 475, 476, 477, 478, 479], "hostpath": [27, 30, 33, 48, 217, 471, 488, 491], "expandus": [27, 488, 491], "mountpath": [27, 30, 33, 241, 471, 488, 491], "expect": [27, 34, 37, 49, 211, 243, 259, 393, 395, 397, 467, 471], "monitor": [27, 29, 233], "wait": [27, 93, 211, 471], "finish": [27, 210, 229, 239, 257, 314, 317, 477], "remov": [27, 29, 90, 91, 125, 164, 165, 199, 208, 225, 228, 230, 255, 259, 319, 336, 342, 344, 390, 393, 395, 397, 439, 442, 458, 464, 477], "remain": [27, 204, 206, 223, 228, 243, 247, 313, 318, 398, 425], "statefulset": [27, 477], "svc": [27, 48, 217], "left": [27, 36, 44, 223, 225, 228, 255, 326, 329, 365, 397], "service_port": 28, "63800": 28, "launcher_typ": 28, "operator_launch": 28, "gae_endpoint": 28, "60001": 28, "instance_id": [28, 478], "0000": [28, 214, 230], "rpc_port": 28, "9600": 28, "sai": [28, 41], "configmap": [28, 241], "mount": [28, 30, 33, 45, 211, 218, 243, 323, 471, 488, 490, 491], "ideal": [29, 37, 47, 204, 251], "deploy_graphscope_on_self_managed_k8": 29, "chart": [29, 48, 211, 217, 219, 230, 477, 488, 490], "minut": [29, 211, 218], "succe": 29, "past": [29, 47, 218, 479], "noteport": 29, "node_ip": [29, 477], "ojsonpath": 29, "hostip": 29, "node_port": 29, "spec": [29, 33, 241, 254, 324], "nodeport": [29, 241, 471, 477, 491], "echo": [29, 31], "listen": [29, 44, 48, 125, 199, 204, 219, 254], "statement": [29, 318, 477], "ident": [29, 256, 272, 360, 361, 365, 436, 456, 458, 464], "reconnect": [29, 471], "disconnect": [29, 329, 405, 406, 421, 424, 471, 484], "sess2": 29, "comment": [29, 37, 214, 222, 223, 230, 243, 313, 464, 466, 467, 475, 492, 497], "homepag": 29, "remot": [29, 36, 125, 229, 241, 242, 259, 327, 471, 495], "cater": [29, 244], "tgz": 29, "unzip": [29, 203, 221, 222, 229, 495], "zxvf": 29, "bundl": [30, 471], "aliv": 30, "reserv": 30, "simplifi": [30, 42, 51, 217, 244, 245, 246, 248, 250, 313, 318, 476], "etcd": [30, 211, 217, 471, 473, 488], "replica": [30, 217, 241], "etcd_replica": 30, "greater": [30, 33, 223, 228, 255, 314, 329, 383, 414, 471, 476], "ag": [30, 33, 46, 47, 165, 200, 218, 225, 226, 228, 230, 234, 249, 312, 313, 326, 470, 485, 495, 496], "33": [30, 204, 228, 314, 315, 317, 454, 457], "vineyardd": [30, 33, 219], "vineyardctl": [30, 471], "v6d": [30, 31, 217, 243, 471], "blob": [30, 211, 487], "cmd": [30, 254, 471], "readm": [30, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 259], "md": [30, 324], "notic": [30, 33, 217, 226, 230, 244, 318, 326, 457, 464, 471, 479], "charact": [30, 46, 455, 460, 466], "vineyard_deploy": 30, "restart": [30, 44, 51, 55, 125, 129, 199, 200, 206, 208, 485], "etcd0": 30, "73m": 30, "5db59987f": 30, "vr2fg": 30, "beforehand": 30, "onto": 30, "stai": 30, "k8s_namespac": [30, 33, 311, 471], "k8s_vineyard_deploy": [30, 33, 311, 471], "reload": [30, 477], "vineyard_id": [30, 33, 326, 485], "new_sess": 30, "22731319746904674": 30, "objectid": [30, 33, 254, 326, 471, 476, 478], "softwar": [30, 33, 46, 90, 164, 200, 217, 220, 225, 228, 233, 244, 326, 478], "successfulli": [30, 90, 91, 100, 164, 165, 174, 200, 203, 219, 222, 234, 239, 383, 477], "folder": [31, 38, 45, 203, 208, 241, 243, 476], "cento": [31, 32, 211, 220, 252, 490, 494], "82": [31, 252], "boost": [31, 233, 244, 254], "perl": 31, "v3": [31, 248, 252], "24": [31, 165, 217, 230, 252, 314, 315, 317, 431, 449, 457], "openmpi": [31, 252], "gflag": 31, "glog": [31, 225], "arrow": [31, 46, 210, 254, 266, 279, 326, 467], "74": [31, 252, 455], "openssl": [31, 211, 490], "zlib": 31, "protobuf": 31, "49": [31, 230, 252, 314, 315, 317], "13": [31, 35, 230, 252, 313, 314, 315, 317, 369, 410], "libclang": 31, "curl": [31, 49, 229], "lo": [31, 229], "czf": 31, "mkdir": [31, 211, 324, 490], "workdir": 31, "xzf": 31, "yum": 31, "scl": 31, "rh": [31, 210], "y": [31, 32, 230, 241, 242, 255, 410, 411, 415], "devtoolset": 31, "python38": 31, "opt": [31, 36, 44, 206, 218, 219, 235, 324], "bash": [31, 228, 241, 485, 489], "euxo": 31, "pipefail": 31, "dir": [31, 477], "ld_library_path": 31, "lib64": 31, "py2": 31, "py3": [31, 489], "manylinux2010_x86_64": 31, "whl": [31, 319, 322], "x86_64": [31, 203, 241], "sh": [31, 35, 229, 319, 477, 495], "licens": [31, 489], "dbuild_shared_lib": 31, "ON": 31, "dcmake_prefix_path": 31, "dcmake_install_prefix": 31, "boost_1_74_0": 31, "bootstrap": 31, "filesystem": [31, 313], "program_opt": 31, "regex": [31, 228], "chrono": 31, "atom": [31, 477], "date_tim": [31, 47], "b2": 31, "openssl_1_1_1h": 31, "fpic": 31, "cpp": [31, 67, 87, 108, 200], "darrow_comput": 31, "darrow_with_utf8proc": 31, "off": [31, 218, 244, 449, 477], "darrow_csv": 31, "darrow_filesystem": 31, "darrow_ipc": 31, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_util": 31, "darrow_build_test": 31, "darrow_enable_timing_test": 31, "darrow_fuzz": 31, "darrow_jemalloc": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "mpi": [31, 254], "cxx": 31, "dlopen": 31, "nproc": 31, "dgrpc_instal": 31, "dgrpc_build_test": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_protobuf_provid": 31, "dgrpc_zlib_provid": 31, "dgrpc_ssl_provid": 31, "dopenssl_root_dir": 31, "dcmake_cxx_flag": 31, "fpermiss": 31, "dbuild_vineyard_test": 31, "dbuild_vineyard_python_bind": 31, "j4": 31, "dnetworkx": 31, "denable_java_sdk": 31, "dbuild_test": 31, "ubuntu": [32, 203, 211, 217, 220, 319, 488, 490, 494], "04": [32, 211, 217, 220, 230, 252, 319, 488, 490, 494], "intel": [32, 220, 488, 490, 494], "appl": [32, 211, 220, 464, 488, 490, 494], "silicon": [32, 220, 488, 490], "jdk": [32, 217, 220, 232, 481, 487], "wheel": [32, 211, 382, 448, 490, 493], "manylinux2014": [32, 489], "abi": 32, "wish": [32, 37, 44, 201, 206], "nightli": [32, 211, 490], "tidi": 32, "quickli": [32, 36, 204, 233, 245, 248, 249, 251, 324, 471], "insid": [32, 38, 46, 211, 228, 230, 255, 263, 313, 325, 326, 439, 470, 471, 495], "apt": [32, 319], "ipython": 32, "tensorflow": [32, 233, 234, 236, 239, 240, 244, 245, 249, 250, 312, 313, 314, 317, 318, 320, 324, 491], "tool": [32, 35, 36, 45, 201, 204, 209, 214, 217, 224, 231, 233, 235, 244, 411, 413, 473, 476, 477, 478, 494], "dep": [32, 35, 484, 488, 489], "fly": [32, 204, 245], "clang": [32, 35, 220, 489], "essenti": [32, 46, 47, 211, 223, 228, 233, 248, 250], "arm": 32, "preliminari": 32, "yet": [32, 125, 199, 203, 221, 228, 256, 421, 424, 464, 470, 477], "calcul": [33, 218, 225, 228, 230, 255, 257, 315, 329, 383, 415], "period": [33, 477], "restor": [33, 471, 477], "persistentvolum": [33, 477], "dump": [33, 255, 291], "cat": [33, 241, 242, 477, 485], "eof": 33, "metadata": [33, 45, 46, 104, 116, 178, 190, 200, 206, 208, 211, 241, 254, 326, 464, 473, 477], "1gi": 33, "accessmod": 33, "readwriteonc": 33, "storageclassnam": 33, "importantli": 33, "lost": [33, 471], "persistentvolumeclaim": [33, 471, 477], "matchlabel": 33, "request": [33, 49, 125, 199, 211, 243, 254, 283, 314, 322, 325, 327, 358, 464, 471, 477, 490], "extern": [33, 37, 45, 237, 244, 471, 477], "ccc": 33, "sub_graph": [33, 226, 245, 491, 492], "haslabel": [33, 214, 220, 226, 230, 245, 495], "simple_g": [33, 245, 487, 491], "pr_result": 33, "tc_result": 33, "add_column": [33, 245, 254, 326, 487, 491, 492], "tc": [33, 245, 491], "997255889378630": 33, "997163552113975": 33, "store_graphs_to_pvc": 33, "graphid": [33, 52, 54, 65, 90, 91, 100, 107, 471], "pvc_name": [33, 471], "schema": [33, 45, 46, 52, 62, 64, 84, 125, 126, 136, 199, 200, 204, 208, 210, 218, 219, 222, 224, 225, 226, 230, 239, 240, 243, 255, 313, 314, 323, 326, 464, 473, 475, 476, 477, 478, 492, 495, 497], "oid_typ": [33, 243, 254, 255, 283, 305, 326, 471, 497], "ulong": 33, "lang": [33, 35, 46, 200, 220, 222, 225, 245, 327], "eid": [33, 210, 222, 326, 477], "restore_graphs_from_pvc": 33, "anymor": 33, "nativ": [34, 44, 218, 224, 244, 248, 250, 251], "behind": [34, 239, 476, 479, 484, 485], "scene": [34, 218, 239, 321], "lower": [34, 218, 228, 230, 248, 383, 390, 403], "cost": [34, 218, 230, 244, 248, 329, 477], "ownership": 34, "cach": [34, 201, 234, 241, 247, 251, 464], "layout": [34, 247, 477], "were": [34, 37, 230, 252, 415, 477], "outperform": [34, 233, 247, 249, 250, 251], "art": [34, 233, 247, 250, 252], "voderank": 34, "average_degree_assort": 34, "degree_assort": 34, "guidelin": [35, 37, 204, 206], "promot": 35, "readabl": [35, 51, 228, 464], "qualiti": [35, 37, 249], "black": [35, 489], "enforc": 35, "rule": [35, 44, 206, 218, 230, 237, 247, 316, 322, 326, 363, 473], "cpplint": 35, "flake8": 35, "fmt": 35, "lint": [35, 37], "makefil": 35, "graphscope_clformat": 35, "graphscope_cpplint": 35, "dev": [35, 216, 241, 488, 489], "pushd": 35, "isort": 35, "diff": 35, "popd": 35, "interactive_engin": [35, 36, 219, 229], "check_format": 35, "files_to_format": 35, "aosp": 35, "toolchain": [36, 235], "devcontain": 36, "json": [36, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 217, 219, 471, 473, 477, 478], "setup": [36, 37, 199, 211, 326, 471, 489], "visual": [36, 37, 204, 244], "studio": 36, "collabor": [36, 244, 476], "stabl": [36, 255, 326, 473, 477, 494], "haven": [36, 203, 230], "navig": [36, 476, 484], "icon": 36, "bottom": [36, 374], "corner": 36, "window": [36, 230, 494], "reopen": 36, "marketplac": 36, "prompt": [36, 51, 222, 229], "shift": [36, 223, 228, 230, 329, 429], "ctrl": 36, "made": [36, 37, 44, 201, 217, 237, 252, 313, 316, 322, 329, 424, 476], "rebuild": 36, "subcommand": [36, 235], "assembli": [36, 219], "learning_engin": 36, "graphlearn": [36, 38, 234, 236, 239, 240, 241, 245, 312, 313, 314, 318, 319, 324, 325, 328, 471, 485, 491, 496], "compos": [36, 38, 202, 225, 234, 237, 245, 247, 251], "alon": [36, 218, 226, 484], "circul": [36, 367], "edit": [36, 37, 222, 410, 447, 484], "entrypoint": [36, 484, 491], "plai": [36, 218, 232, 253, 323, 328, 481], "thank": [37, 204, 214, 222, 244], "interest": [37, 230, 233, 247, 477], "focus": [37, 225, 230, 244, 250, 252, 318, 456, 477], "eager": [37, 255, 256, 305, 307, 326, 471], "contributor": [37, 457], "welcom": [37, 200, 201], "engag": [37, 244, 245], "good": [37, 204], "particip": [37, 44], "join": [37, 44, 223, 225, 230, 241, 314, 324, 365, 368, 376, 383, 392, 393, 406, 408, 411, 412, 413, 414, 415, 423, 424, 464, 476], "ask": [37, 216], "question": [37, 216, 224, 230, 490], "ve": [37, 45, 201, 206, 217, 221, 229, 244], "hasn": [37, 230], "confirm": 37, "concis": [37, 225, 226, 248, 327], "descript": [37, 46, 47, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 206, 208, 217, 218, 223, 225, 228, 237, 241, 243, 313, 316, 321, 322, 326, 421, 429, 477], "relev": [37, 44, 45, 319, 358, 464, 475], "reproduc": [37, 464], "yourself": 37, "why": [37, 211, 230, 255], "saw": 37, "incomplet": 37, "inaccur": 37, "knowledg": [37, 214, 222, 234, 249, 320], "submiss": 37, "fact": [37, 218, 222, 225, 421, 424], "page": [37, 45, 201, 216, 246, 255, 258, 260, 374, 389, 453, 493], "button": [37, 222], "tbf": [37, 215, 252, 472, 483, 486], "isn": [37, 208, 226, 317], "someon": 37, "approach": [37, 204, 222, 226, 233, 234, 244, 246, 248, 249, 317, 393, 406, 461, 476], "spend": 37, "secret": [37, 243, 471, 488, 497], "accident": 37, "hook": 37, "titl": [37, 45, 230, 240, 245], "grammar": 37, "spell": 37, "500": [37, 52, 54, 55, 90, 91, 100, 117, 126, 128, 129, 164, 165, 174, 191, 200, 383], "word": [37, 206, 230, 240, 245, 248, 249, 324, 326, 464], "42": [37, 230, 252, 314, 315, 317, 387, 389, 399, 457], "ticket": 37, "chines": 37, "everyon": 37, "beginn": [37, 248], "patch": 37, "rest": [37, 42, 48, 49, 126, 127, 128, 129, 164, 165, 174, 191, 209, 464, 477], "attain": 37, "brief": [37, 213], "valid": [37, 218, 239, 240, 249, 262, 312, 359, 383, 405, 411, 460, 471, 473], "typo": 37, "feat": 37, "inv": [37, 318, 324, 495], "refactor": 37, "gulp": 37, "broccoli": 37, "npm": [37, 477], "ci": 37, "perf": 37, "neither": 37, "nor": 37, "chore": 37, "routin": [37, 329, 464], "insight": [37, 214, 247, 249, 484], "feedback": [37, 214], "discourag": 37, "rebas": 37, "workflow": [37, 214, 244, 249, 250, 254], "upstream": [37, 318], "leas": 37, "ping": [37, 487], "await": 37, "unfamiliar": 37, "acronym": 37, "glossari": [37, 209, 216, 457], "approv": 37, "date": [37, 47, 223, 230, 475, 476, 477], "todo": [37, 48, 100, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 223, 225, 241, 242, 322], "dongz": 37, "potenti": [37, 202, 204, 234, 244, 476], "concern": [37, 244, 251, 476], "reach": [37, 211, 226, 230, 248, 318, 323, 326, 329, 406, 421, 424, 476], "action": [37, 201, 208], "realiti": [37, 318], "uncommon": 37, "infrastructur": 37, "vital": 37, "inspect": [37, 38, 243, 471, 477], "failur": [37, 251], "stream": [38, 211, 217, 228, 229, 230, 234, 318, 323, 326], "stdout": 38, "log_level": [38, 44, 241, 311], "permiss": [38, 47, 211, 263, 490], "consol": [38, 204, 217, 219, 222, 231, 233, 243, 248, 327, 477, 493], "frontend": [38, 39, 48, 217, 219, 220, 221, 229, 477, 485], "event": [38, 383], "involvedobject": 38, "warn": [38, 464], "pinpoint": 38, "exec": [38, 477, 485], "diagnost": 38, "forward": [38, 204, 234, 236, 237, 239, 240, 245, 249, 318, 477, 491], "browser": [38, 230], "explain": [38, 230, 313, 471, 476, 495], "leverag": [39, 125, 224, 226, 232, 233, 246, 248, 259, 456, 473, 477, 481], "opentelemetri": 39, "javaag": 39, "agent": 39, "protocol": [39, 221, 224, 243, 251, 471], "java_tool_opt": 39, "TO": 39, "otel_service_nam": 39, "compris": [41, 45, 223, 226, 240, 244, 317], "busi": [41, 218, 230, 234, 243, 244, 245, 251], "e2": [41, 443], "coupl": [41, 246, 251, 444, 473], "entri": [42, 208, 218, 228, 230, 237, 239, 328, 329, 376, 393, 395, 396, 421, 423, 424, 442, 484], "swagger": 42, "shield": 42, "understand": [42, 45, 46, 230, 237, 248, 312, 318, 326, 476], "straightforward": [44, 220, 245], "gs_interact": [44, 45, 51, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 201, 206, 208], "tailor": [44, 200], "align": [44, 45, 46, 47, 62, 136, 201, 206, 218, 228, 237, 248, 312, 315, 316, 415, 476], "engine_config": [44, 200, 471], "unconfigur": 44, "glimps": 44, "what": [44, 201, 206, 211, 217, 230, 231, 248, 323, 410, 464, 470, 476], "compute_engin": 44, "thread_num_per_work": 44, "planner": [44, 206], "is_on": 44, "rbo": [44, 218], "filtermatchrul": 44, "filterintojoinrul": 44, "notexisttoantijoinrul": 44, "query_timeout": 44, "20000": 44, "timeout": [44, 211, 219, 220, 477], "millisecond": [44, 47, 223, 228, 252, 475], "default_listen_address": 44, "localhost": [44, 219, 221, 229, 241, 243, 471, 497], "bolt_connector": [44, 204], "cypher": [44, 45, 48, 49, 67, 87, 100, 108, 125, 174, 199, 200, 206, 207, 209, 217, 218, 219, 220, 222, 224, 225, 244, 245, 246, 250, 251, 327, 471], "7687": [44, 48, 201, 204, 217, 219, 221, 222], "gremlin_connector": [44, 204], "8182": [44, 48, 217, 219, 229, 477], "http_servic": 44, "admin_port": 44, "7777": [44, 48], "query_port": [44, 200], "10000": [44, 48, 461], "hierarchi": [44, 46], "propertynam": [44, 59, 69, 88, 477], "databas": [44, 45, 202, 204, 207, 211, 218, 223, 224, 225, 228, 230, 244, 246, 248, 250, 252, 477, 487], "debug": [44, 211, 241, 313, 318, 471, 477, 485], "default_graph": 44, "benefit": [44, 225, 229, 243, 247, 476], "throughput": [44, 48, 204, 209, 218, 244, 250, 251, 477], "claus": [44, 204, 224, 225], "calcit": [44, 217, 225], "notmatchtoantijoinrul": 44, "transform": [44, 51, 218, 225, 230, 254, 266, 279, 456, 464, 465, 469, 475], "anti": [44, 223, 225, 244, 248, 251], "bind": [44, 255, 476], "admin": [44, 48, 49, 200, 204, 207, 326, 477], "submit": [44, 100, 174, 200, 201, 204, 205, 218, 221, 222, 228, 229, 230, 245, 248, 313, 314, 327, 473, 477, 491], "movi": [45, 206, 246, 314], "interactive_hom": [45, 203], "destroi": [45, 208], "csv": [45, 48, 209, 214, 217, 222, 243, 326, 464, 467, 475, 477, 478, 491, 492, 497], "volum": [45, 48, 201, 208, 211, 217, 225, 229, 241, 387, 388, 389, 399, 408, 453, 471, 476], "crucial": [45, 47, 51, 200, 244], "conclud": [45, 312], "reflect": [45, 228, 476, 484], "v0": [45, 48, 252, 319, 467], "vertex_typ": [45, 47, 140, 159, 200], "type_nam": [45, 46, 47, 130, 134, 137, 144, 153, 157, 163, 195, 197, 200], "property_nam": [45, 46, 47, 133, 143, 162, 200, 230, 256, 257, 470], "property_typ": [45, 47, 133, 143, 162, 200], "primitive_typ": [45, 47, 156, 171, 200], "dt_signed_int64": [45, 47, 82, 96, 200], "dt_signed_int32": [45, 47, 82, 96], "taglin": 45, "long_text": [45, 47, 168, 184, 200], "primary_kei": [45, 47, 134, 144, 163, 200, 477], "born": 45, "acted_in": 45, "vertex_type_pair_rel": [45, 47, 130, 137, 157, 200], "source_vertex": [45, 46, 47, 131, 151, 198, 200], "destination_vertex": [45, 46, 47, 131, 151, 198, 200], "many_to_mani": [45, 47, 57, 200], "review": [45, 244, 255, 329, 393, 411], "wrote": 45, "dt_unsigned_int32": [45, 47, 82, 96], "dt_unsigned_int64": [45, 47, 82, 96], "dt_bool": [45, 47, 82, 96], "dt_float": [45, 47, 82, 96], "dt_doubl": [45, 47, 82, 96, 200], "comprehens": [45, 125, 199, 200, 204, 206, 208, 244, 250, 252, 253], "administr": [45, 200, 201, 207, 209, 441], "loading_config": [45, 46, 175, 200], "data_sourc": [45, 46, 176, 200], "odp": [45, 103, 209, 313], "import_opt": [45, 46, 176, 200], "append": [45, 210, 230, 239, 240, 241, 242, 245, 257, 312, 323, 324, 395, 458, 491, 496], "overwrit": [45, 46, 102, 208, 471, 477], "delimit": [45, 46, 217, 326, 466, 478, 492], "edge_map": [45, 46, 147, 175, 200], "type_triplet": [45, 46, 147, 200], "column_map": [45, 46, 136, 147, 195, 200], "consult": [45, 204], "graph_algo": 45, "flex": [45, 125, 204, 209, 484], "delv": [46, 200], "deeper": 46, "thorough": 46, "col_nam": 46, "disregard": 46, "examin": [46, 225, 245], "modern_import_ful": 46, "showcas": 46, "dissect": 46, "x_csr_param": [46, 47, 131, 134, 144, 163, 176], "build_csr_in_mem": [46, 179], "use_mmap_vector": [46, 179], "header_row": [46, 217, 326, 478], "quot": 46, "quote_char": 46, "double_quot": 46, "escape_char": 46, "block_siz": 46, "4mb": 46, "person_knows_person": [46, 477], "source_vertex_map": [46, 147, 200], "destination_vertex_map": [46, 147, 200], "dst_id": [46, 313, 314, 315, 317, 318, 324, 328], "person_created_softwar": 46, "dd_graph": 46, "your_proj_nam": 46, "table_nam": 46, "partition_col_nam": 46, "partition_nam": 46, "src_user_id": 46, "dst_user_id": 46, "mandatori": [46, 47, 245, 313], "ye": [46, 214, 464], "No": [46, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 200, 211, 228, 464], "header": [46, 217, 326, 476, 477], "escap": 46, "batch_siz": [46, 237, 239, 241, 242, 312, 316, 317, 318, 321, 324, 480, 496], "mmap_vector": 46, "mmap_arrai": 46, "triplet": [46, 47, 226], "outlin": [46, 219, 223], "seamlessli": [46, 125, 199, 201, 214, 217, 224, 231, 233, 244, 250, 251], "encompass": [47, 221, 225, 229, 240], "friendship": 47, "peopl": [47, 218, 222, 230, 464, 477], "since_d": 47, "explan": [47, 200, 204, 255, 316], "terminologi": [47, 223], "delin": 47, "plan": [47, 100, 174, 204, 218, 223, 244, 246, 247, 248, 259, 477, 485], "var_char": [47, 184, 192], "fixed_char": [47, 154, 155], "character": [47, 316], "exclus": [47, 51, 223], "symbol": 47, "skill": 47, "profici": [47, 230], "one_to_on": [47, 57], "one_to_mani": [47, 57, 200], "many_to_on": [47, 57], "max_vertex_num": [47, 135], "mmap": 47, "48": [47, 214, 252, 314, 315, 317, 416, 417, 463], "edge_storage_strategi": [47, 132], "only_in": [47, 58], "only_out": [47, 58], "both_out_in": [47, 58], "pertain": [47, 217], "categor": [47, 204, 237], "subtyp": 47, "length": [47, 125, 210, 214, 223, 228, 230, 243, 248, 255, 316, 329, 368, 370, 375, 397, 418, 422, 428, 450, 459, 464, 497], "unlimit": 47, "text": [47, 100, 174, 249, 257, 365], "char": [47, 154, 184, 323, 326, 476], "fixed_length": 47, "desir": [47, 226, 326, 383, 405, 425, 427, 428], "restrict": 47, "max_length": [47, 193], "uint32": [47, 223], "situat": [47, 228, 230, 233, 313, 314, 477], "df_yyyy_mm_dd": 47, "iso": 47, "fomat": 47, "2019": [47, 457], "01": [47, 230, 236, 240, 242, 245, 255, 313, 329, 388, 491], "date_format": 47, "tf_hh_mm_ss_sss": 47, "00": [47, 230], "000": [47, 217, 230, 252], "time_format": 47, "tzf_utc": 47, "tzf_offset": 47, "time_zone_format": 47, "dtf_yyyy_mm_dd_hh_mm_ss_sss": 47, "date_time_format": 47, "date32": [47, 71, 112, 145, 186], "int32": [47, 223, 236, 240, 245, 313, 315, 323, 324, 475, 491], "1970": 47, "time32": 47, "midnight": 47, "timestamp": [47, 112, 113, 186, 187, 475, 477], "int64": [47, 223, 243, 257, 283, 305, 313, 315, 316, 321, 323, 324, 326, 471, 475, 497], "000000": 47, "zone": [47, 223], "signifi": [47, 348, 349], "integ": [47, 61, 76, 79, 81, 83, 84, 86, 87, 88, 89, 93, 105, 106, 119, 123, 124, 223, 228, 329, 364, 367, 368, 369, 370, 371, 373, 375, 376, 378, 379, 382, 383, 386, 387, 388, 389, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 429, 442, 456, 457, 458, 459, 461, 464, 475, 477], "januari": 47, "timezon": 47, "albeit": 47, "previous": [47, 206, 230, 263, 400, 401, 402, 475, 476], "mention": [47, 228, 230, 475, 476, 485], "component_typ": 47, "overflow": 47, "truncat": [47, 449, 450, 451, 456], "bolt": [48, 201, 204, 219, 221, 222, 248], "grep": [48, 217], "awk": [48, 217], "192": 48, "168": [48, 252], "pvc": [48, 217, 471, 477], "higher": [48, 218, 250, 329, 339, 403, 477], "nf": [48, 211, 323, 490], "dataload": [48, 52, 53, 125, 126, 127, 199, 200, 241, 242], "pv": [48, 211, 217, 471, 477, 490], "vim": 48, "someth": [48, 220, 464], "claim": [48, 217, 446, 476, 477], "emptydir": [48, 241], "existingclaim": 48, "replicacount": [48, 217, 477], "num": [48, 210, 219, 229, 230, 325, 476], "gremlinport": [48, 106, 217], "hiactor": [48, 244], "hiactorworkernum": 48, "hiactortimeout": 48, "240000": 48, "craft": [49, 204, 206], "listgraph": [49, 125], "graphmanag": 49, "categori": [49, 223, 228, 234, 236, 237, 245, 249, 324], "getgraphstatist": 49, "creategraph": [49, 125], "deletegraph": [49, 125], "getgraphschema": 49, "getgraphmeta": 49, "importgraph": 49, "createprocedur": [49, 125], "proceduremanag": 49, "listallprocedur": 49, "getprocedur": [49, 125], "updateprocedur": [49, 125], "deleteprocedur": [49, 125], "startservic": [49, 125], "servicemanag": 49, "restartservic": [49, 125], "stopservic": [49, 125], "servicestatu": [49, 55, 125, 129, 199], "systemmetr": 49, "nodemetr": 49, "getjobbyid": [49, 125], "jobmanag": 49, "getalljob": 49, "canceljobbyid": 49, "adminservic": 49, "setuptool": 49, "intric": [51, 200, 230], "inspir": [51, 259, 464], "neo4j": [51, 125, 201, 202, 204, 206, 216, 217, 219, 220, 221, 222, 223, 246, 251, 252, 327, 475], "empow": [51, 224, 231, 248], "skeleton": [51, 432, 435, 449, 450], "param_nam": [51, 204], "clariti": [51, 223], "mandat": 51, "hous": [51, 244, 438, 439], "personid": 51, "draft": 51, "query1": 51, "firstnam": [51, 230, 243, 475, 492, 497], "lastnam": [51, 230, 243, 475, 492, 497], "intrins": 51, "absenc": 51, "imper": [51, 228, 248], "subsequ": [51, 201, 206, 217, 218, 219, 225, 229, 255, 313, 314], "1l": [51, 206, 228], "conclus": [51, 230], "effortlessli": [51, 245], "streamlin": [51, 225, 228], "uri": [52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 221, 243, 326, 475, 497], "interactive_endpoint": [52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200], "post": [52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199, 200, 211, 230, 243, 318, 383, 497], "graph_id": [52, 53, 54, 90, 91, 100, 125, 126, 127, 128, 139, 164, 165, 174, 181, 199, 200, 471], "statist": [52, 126, 200, 218, 225, 230, 315], "jobrespons": [52, 125, 126, 199], "schemamap": [52, 84, 125, 126, 158, 199], "apicli": [52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 471], "apiexcept": [52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191], "defaultcli": [52, 53, 54, 55, 90, 91, 100, 117], "getdefaultapicli": [52, 53, 54, 55, 90, 91, 100, 117], "setbasepath": [52, 53, 54, 55, 90, 91, 100, 117], "apiinst": [52, 53, 54, 55, 90, 91, 100, 117], "graphid_exampl": [52, 54, 90, 91, 100], "println": [52, 53, 54, 55, 90, 91, 100, 117, 125, 477], "catch": [52, 53, 54, 55, 90, 91, 100, 117, 477], "err": [52, 53, 54, 55, 90, 91, 100, 117, 342], "getcod": [52, 53, 54, 55, 90, 91, 100, 117], "getresponsebodi": [52, 53, 54, 55, 90, 91, 100, 117], "getresponsehead": [52, 53, 54, 55, 90, 91, 100, 117], "printstacktrac": [52, 53, 54, 55, 90, 91, 100, 117], "200": [52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 200, 230, 312, 470, 480, 496], "creategraphrespons": [52, 125, 126, 199], "creategraphrequest": [52, 125, 126, 199], "400": [52, 54, 90, 91, 126, 128, 164, 165, 200, 470], "badrequest": [52, 126], "Not": [52, 53, 54, 55, 90, 91, 126, 127, 128, 129, 164, 165, 200, 204, 225, 464, 477], "404": [52, 54, 90, 91, 126, 128, 164, 165, 200], "getgraphrespons": [52, 106, 125, 126, 180, 199], "getgraphstatisticsrespons": [52, 126], "503": [52, 126], "unavail": [52, 126], "getgraphschemarespons": [52, 84, 125, 126, 158, 199], "job_id": [53, 125, 127, 166, 199, 200], "jobid": [53, 92], "jobid_exampl": 53, "jobstatu": [53, 125, 127, 199], "procedure_id": [54, 125, 128, 142, 199, 200], "createprocedurerespons": [54, 125, 128, 199], "createprocedurerequest": [54, 64, 125, 128, 138, 199], "bad": [54, 90, 91, 128, 164, 165], "procedureid": [54, 68], "procedureid_exampl": 54, "getprocedurerespons": [54, 84, 125, 128, 158, 199], "updateprocedurerequest": [54, 125, 128, 199], "startservicerequest": [55, 125, 129, 199], "vertextypepairrel": [56, 63, 83], "baseedgetypevertextypepairrelationsinn": [56, 63, 83, 125, 130, 137, 157, 199], "sourcevertex": [57, 77, 124], "destinationvertex": [57, 77, 124], "xcsrparam": [57, 60, 70, 89, 102], "baseedgetypevertextypepairrelationsinnerxcsrparam": [57, 125, 131, 199], "edgestoragestrategi": 58, "sortoncompact": 58, "boolean": [58, 87, 105, 108, 223, 225, 228, 243, 255, 257, 314, 318, 329, 348, 349, 386, 388, 391, 422, 462, 475], "oemut": 58, "iemut": 58, "propertytyp": [59, 69, 88], "gsdatatyp": [59, 69, 88, 95, 114, 125, 133, 143, 162, 170, 188, 199], "primarykei": [60, 70, 89], "basevertextypexcsrparam": [60, 70, 89, 125, 134, 144, 163, 199], "maxvertexnum": 61, "edgemappingsourcevertexmappingsinnercolumn": [62, 74, 75, 125, 136, 148, 149, 199], "createpropertymeta": [63, 70, 125, 137, 144, 199], "storedprocedur": [64, 84], "creategraphschemarequest": [64, 125, 138, 199], "vertextyp": [66, 85], "createvertextyp": [66, 125, 140, 199], "edgetyp": [66, 85, 466], "createedgetyp": [66, 125, 140, 199], "srclabel": [72, 78, 90, 477], "dstlabel": [72, 78, 90, 477], "edgelabel": [72, 78, 90, 228, 276], "srcprimarykeyvalu": [72, 78, 90], "dstprimarykeyvalu": [72, 78, 90], "typetriplet": 73, "edgemappingtypetriplet": [73, 125, 147, 199], "sourcevertexmap": 73, "edgemappingsourcevertexmappingsinn": [73, 125, 147, 199], "destinationvertexmap": 73, "edgemappingdestinationvertexmappingsinn": [73, 125, 147, 199], "columnmap": [73, 121, 125, 147, 195, 199], "typeid": [79, 83, 89, 123], "vertextypepairstatist": [79, 153], "_char": [80, 110], "fixedcharchar": [80, 110, 125, 154, 184, 199], "fixedchar": [81, 125, 199], "primitivetyp": [82, 125, 199], "stringtypestr": [82, 109, 125, 156, 183, 199], "tempor": [82, 111, 156, 185, 223, 228], "temporaltypetempor": [82, 111, 156, 185], "signed_int32": [82, 96], "unsigned_int32": [82, 96], "signed_int64": [82, 96], "unsigned_int64": [82, 96], "dt_string": [82, 96], "getpropertymeta": [83, 89, 125, 157, 163, 199], "storetyp": 84, "creationtim": [84, 87], "dataupdatetim": 84, "dataimportconfig": 84, "mutable_csr": [84, 105, 179, 200], "getvertextyp": [85, 125, 159, 199], "getedgetyp": [85, 125, 159, 199], "totalvertexcount": 86, "totaledgecount": 86, "vertextypestatist": 86, "vertexstatist": [86, 160], "edgetypestatist": 86, "edgestatist": [86, 160], "boundgraph": 87, "updatetim": 87, "propertyid": 88, "edgerequest": [90, 125, 164, 199], "409": [90, 91, 164, 165, 200], "exit": [90, 91, 164, 165, 229, 241, 255, 495], "edgedata": [90, 125, 164, 199], "paramt": [90, 91, 164, 165], "vertexrequest": [91, 125, 165, 199], "primarykeyvalu": [91, 122], "label_exampl": [91, 165], "null": [91, 100, 223, 228, 329, 346, 362, 363, 370, 377, 429, 459, 464], "vertexdata": [91, 125, 165, 199], "value1": [91, 165, 217, 243, 497], "param2": [91, 165], "value2": [91, 165, 217], "starttim": [93, 106], "endtim": 93, "querynam": 99, "typedvalu": [99, 125, 173, 199], "byte": [100, 223, 255, 263, 323], "xinteractiverequestformat": 100, "bodi": [100, 174, 200, 318, 322, 430], "typeinfo": [100, 174], "proto": [100, 254, 274, 299], "enum": [100, 254], "plain": [100, 174, 249], "loadingconfig": 101, "schemamappingloadingconfig": [101, 125, 175, 199], "schemamappingloadingconfigxcsrparam": [102, 176], "datasourc": [102, 243, 497], "schemamappingloadingconfigdatasourc": [102, 176], "importopt": 102, "schemamappingloadingconfigformat": [102, 125, 176, 199], "buildcsrinmem": 105, "usemmapvector": 105, "boltport": 106, "hqpsport": 106, "longtext": [110, 125, 199], "varchar": [110, 125, 199], "varcharvarchar": [110, 118, 125, 184, 192, 199], "uploadfilerespons": [117, 191], "filestorag": [117, 191], "multipart": [117, 191], "maxlength": 119, "propertyarrai": [122, 125, 196, 199], "gradl": 125, "ossrh": 125, "gettingstart": [125, 204], "neo4jsess": 125, "getneo4jsess": [125, 199], "tostr": [125, 254, 478], "adminservicegraphmanagementapi": [125, 199], "createdataloadingjob": 125, "getgraph": 125, "getschema": 125, "adminservicejobmanagementapi": [125, 199], "deletejobbyid": 125, "listjob": 125, "adminserviceproceduremanagementapi": [125, 199], "listprocedur": 125, "adminserviceservicemanagementapi": [125, 199], "getservicestatu": 125, "graphserviceedgemanagementapi": [125, 199], "addedg": 125, "deleteedg": 125, "getedg": 125, "updateedg": 125, "graphservicevertexmanagementapi": [125, 199], "addvertex": 125, "deletevertex": 125, "getvertex": [125, 254], "updatevertex": 125, "queryserviceapi": [125, 199], "proccal": 125, "baseedgetyp": [125, 199], "basepropertymeta": [125, 199], "basevertextyp": [125, 199], "collectiveresult": [125, 199], "keyvalu": [125, 199], "queryrequest": [125, 199], "storedproceduremeta": [125, 199], "stringtyp": [125, 199], "temporaltyp": [125, 199], "timestamptyp": [125, 199], "authent": [125, 199, 219, 221, 250, 477], "schema_map": [126, 175], "job_respons": [126, 166], "pprint": [126, 127, 128, 129, 164, 165, 174, 191], "api_cli": [126, 127, 128, 129, 164, 165, 174, 191, 471], "api_inst": [126, 127, 128, 129, 164, 165, 174, 191], "graph_id_exampl": [126, 128, 164, 165, 174], "api_respons": [126, 127, 128, 129, 164, 165, 174, 191], "back": [126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 230, 233, 239, 322, 476, 484], "create_graph_request": [126, 138], "create_graph_respons": [126, 139], "get_graph_respons": [126, 158], "get_graph_statistics_respons": [126, 160], "get_graph_schema_respons": [126, 159], "job_id_exampl": 127, "job_statu": [127, 167], "create_procedure_request": [128, 141], "create_procedure_respons": [128, 142], "procedure_id_exampl": 128, "get_procedure_respons": [128, 161], "update_procedure_request": [128, 189], "service_statu": [129, 180], "start_service_request": [129, 181], "base_edge_typ": 130, "base_edge_type_inst": 130, "from_json": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198], "to_json": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198], "base_edge_type_dict": 130, "to_dict": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198], "base_edge_type_from_dict": 130, "from_dict": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198], "base_edge_type_vertex_type_pair_relations_inn": 131, "base_edge_type_vertex_type_pair_relations_inner_inst": 131, "base_edge_type_vertex_type_pair_relations_inner_dict": 131, "base_edge_type_vertex_type_pair_relations_inner_from_dict": 131, "sort_on_compact": 132, "oe_mut": 132, "ie_mut": 132, "base_edge_type_vertex_type_pair_relations_inner_x_csr_param": 132, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_inst": 132, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_dict": 132, "base_edge_type_vertex_type_pair_relations_inner_x_csr_params_from_dict": 132, "base_property_meta": 133, "base_property_meta_inst": 133, "base_property_meta_dict": 133, "base_property_meta_from_dict": 133, "base_vertex_typ": 134, "base_vertex_type_inst": 134, "base_vertex_type_dict": 134, "base_vertex_type_from_dict": 134, "base_vertex_type_x_csr_param": 135, "base_vertex_type_x_csr_params_inst": 135, "base_vertex_type_x_csr_params_dict": 135, "base_vertex_type_x_csr_params_from_dict": 135, "var_properti": [136, 148, 149], "column_mapping_inst": 136, "column_mapping_dict": 136, "column_mapping_from_dict": 136, "create_edge_typ": 137, "create_edge_type_inst": 137, "create_edge_type_dict": 137, "create_edge_type_from_dict": 137, "stored_procedur": [138, 158, 200, 206, 208], "var_schema": [138, 158], "create_graph_request_inst": 138, "create_graph_request_dict": 138, "create_graph_request_from_dict": 138, "create_graph_response_inst": 139, "create_graph_response_dict": 139, "create_graph_response_from_dict": 139, "create_graph_schema_request": 140, "create_graph_schema_request_inst": 140, "create_graph_schema_request_dict": 140, "create_graph_schema_request_from_dict": 140, "create_procedure_request_inst": 141, "create_procedure_request_dict": 141, "create_procedure_request_from_dict": 141, "create_procedure_response_inst": 142, "create_procedure_response_dict": 142, "create_procedure_response_from_dict": 142, "create_property_meta": 143, "create_property_meta_inst": 143, "create_property_meta_dict": 143, "create_property_meta_from_dict": 143, "create_vertex_typ": 144, "create_vertex_type_inst": 144, "create_vertex_type_dict": 144, "create_vertex_type_from_dict": 144, "date_typ": 145, "date_type_inst": 145, "date_type_dict": 145, "date_type_from_dict": 145, "src_label": [146, 152, 164, 217, 243, 326, 467, 471, 477, 478, 491, 492], "dst_label": [146, 152, 164, 217, 243, 326, 467, 471, 477, 478, 491, 492], "src_primary_key_valu": [146, 152, 164], "dst_primary_key_valu": [146, 152, 164], "modelproperti": [146, 152, 172, 194, 199], "edge_data": [146, 164, 289, 479], "edge_data_inst": 146, "edge_data_dict": 146, "edge_data_from_dict": 146, "edge_mapping_inst": 147, "edge_mapping_dict": 147, "edge_mapping_from_dict": 147, "edge_mapping_destination_vertex_mappings_inn": 148, "edge_mapping_destination_vertex_mappings_inner_inst": 148, "edge_mapping_destination_vertex_mappings_inner_dict": 148, "edge_mapping_destination_vertex_mappings_inner_from_dict": 148, "edge_mapping_source_vertex_mappings_inn": 149, "edge_mapping_source_vertex_mappings_inner_inst": 149, "edge_mapping_source_vertex_mappings_inner_dict": 149, "edge_mapping_source_vertex_mappings_inner_from_dict": 149, "edge_mapping_source_vertex_mappings_inner_column": 150, "edge_mapping_source_vertex_mappings_inner_column_inst": 150, "edge_mapping_source_vertex_mappings_inner_column_dict": 150, "edge_mapping_source_vertex_mappings_inner_column_from_dict": 150, "edge_mapping_type_triplet": 151, "edge_mapping_type_triplet_inst": 151, "edge_mapping_type_triplet_dict": 151, "edge_mapping_type_triplet_from_dict": 151, "edge_request": [152, 164], "edge_request_inst": 152, "edge_request_dict": 152, "edge_request_from_dict": 152, "type_id": [153, 157, 163, 197, 200], "vertex_type_pair_statist": [153, 198, 200], "edge_statist": 153, "edge_statistics_inst": 153, "edge_statistics_dict": 153, "edge_statistics_from_dict": 153, "fixed_char_inst": 154, "fixed_char_dict": 154, "fixed_char_from_dict": 154, "fixed_char_char": 155, "fixed_char_char_inst": 155, "fixed_char_char_dict": 155, "fixed_char_char_from_dict": 155, "gs_data_typ": 156, "gs_data_type_inst": 156, "gs_data_type_dict": 156, "gs_data_type_from_dict": 156, "get_edge_typ": 157, "get_edge_type_inst": 157, "get_edge_type_dict": 157, "get_edge_type_from_dict": 157, "store_typ": [158, 200], "creation_tim": [158, 161, 200], "data_update_tim": [158, 200], "data_import_config": [158, 200], "get_graph_response_inst": 158, "get_graph_response_dict": 158, "get_graph_response_from_dict": 158, "get_graph_schema_response_inst": 159, "get_graph_schema_response_dict": 159, "get_graph_schema_response_from_dict": 159, "total_vertex_count": [160, 200], "total_edge_count": [160, 200], "vertex_type_statist": [160, 200], "edge_type_statist": [160, 200], "get_graph_statistics_response_inst": 160, "get_graph_statistics_response_dict": 160, "get_graph_statistics_response_from_dict": 160, "bound_graph": [161, 200], "update_tim": 161, "get_procedure_response_inst": 161, "get_procedure_response_dict": 161, "get_procedure_response_from_dict": 161, "property_id": [162, 200, 257], "get_property_meta": 162, "get_property_meta_inst": 162, "get_property_meta_dict": 162, "get_property_meta_from_dict": 162, "get_vertex_typ": 163, "get_vertex_type_inst": 163, "get_vertex_type_dict": 163, "get_vertex_type_from_dict": 163, "src_pk_name": 164, "src_pk_valu": 164, "dst_pk_name": 164, "dst_pk_valu": 164, "vertex_request": [165, 196], "primimary_key_valu": 165, "bob": [165, 477], "primary_key_valu": [165, 196], "cindi": 165, "job_response_inst": 166, "job_response_dict": 166, "job_response_from_dict": 166, "start_tim": [167, 180, 200], "end_tim": 167, "job_status_inst": 167, "job_status_dict": 167, "job_status_from_dict": 167, "long_text_inst": 168, "long_text_dict": 168, "long_text_from_dict": 168, "model_properti": 169, "model_property_inst": 169, "model_property_dict": 169, "model_property_from_dict": 169, "parameter_inst": 170, "parameter_dict": 170, "parameter_from_dict": 170, "primitive_type_inst": 171, "primitive_type_dict": 171, "primitive_type_from_dict": 171, "property_arrai": 172, "property_array_inst": 172, "property_array_dict": 172, "property_array_from_dict": 172, "query_nam": 173, "query_request": 173, "query_request_inst": 173, "query_request_dict": 173, "query_request_from_dict": 173, "bytearrai": [174, 191], "x_interactive_request_format": 174, "x_interactive_request_format_exampl": 174, "schema_mapping_inst": 175, "schema_mapping_dict": 175, "schema_mapping_from_dict": 175, "schema_mapping_loading_config": 176, "schema_mapping_loading_config_inst": 176, "schema_mapping_loading_config_dict": 176, "schema_mapping_loading_config_from_dict": 176, "schema_mapping_loading_config_data_sourc": 177, "schema_mapping_loading_config_data_source_inst": 177, "schema_mapping_loading_config_data_source_dict": 177, "schema_mapping_loading_config_data_source_from_dict": 177, "schema_mapping_loading_config_format": 178, "schema_mapping_loading_config_format_inst": 178, "schema_mapping_loading_config_format_dict": 178, "schema_mapping_loading_config_format_from_dict": 178, "schema_mapping_loading_config_x_csr_param": 179, "schema_mapping_loading_config_x_csr_params_inst": 179, "schema_mapping_loading_config_x_csr_params_dict": 179, "schema_mapping_loading_config_x_csr_params_from_dict": 179, "bolt_port": 180, "hqps_port": 180, "gremlin_port": [180, 477], "service_status_inst": 180, "service_status_dict": 180, "service_status_from_dict": 180, "start_service_request_inst": 181, "start_service_request_dict": 181, "start_service_request_from_dict": 181, "stored_procedure_meta": 182, "stored_procedure_meta_inst": 182, "stored_procedure_meta_dict": 182, "stored_procedure_meta_from_dict": 182, "string_typ": 183, "string_type_inst": 183, "string_type_dict": 183, "string_type_from_dict": 183, "string_type_str": 184, "string_type_string_inst": 184, "string_type_string_dict": 184, "string_type_string_from_dict": 184, "temporal_typ": 185, "temporal_type_inst": 185, "temporal_type_dict": 185, "temporal_type_from_dict": 185, "temporal_type_tempor": 186, "temporal_type_temporal_inst": 186, "temporal_type_temporal_dict": 186, "temporal_type_temporal_from_dict": 186, "time_stamp_typ": 187, "time_stamp_type_inst": 187, "time_stamp_type_dict": 187, "time_stamp_type_from_dict": 187, "typed_valu": 188, "typed_value_inst": 188, "typed_value_dict": 188, "typed_value_from_dict": 188, "update_procedure_request_inst": 189, "update_procedure_request_dict": 189, "update_procedure_request_from_dict": 189, "file_path": 190, "upload_file_respons": [190, 191], "upload_file_response_inst": 190, "upload_file_response_dict": 190, "upload_file_response_from_dict": 190, "var_char_inst": 192, "var_char_dict": 192, "var_char_from_dict": 192, "var_char_var_char": 193, "var_char_var_char_inst": 193, "var_char_var_char_dict": 193, "var_char_var_char_from_dict": 193, "vertex_data_inst": 194, "vertex_data_dict": 194, "vertex_data_from_dict": 194, "vertex_mapping_inst": 195, "vertex_mapping_dict": 195, "vertex_mapping_from_dict": 195, "vertex_request_inst": 196, "vertex_request_dict": 196, "vertex_request_from_dict": 196, "vertex_statist": 197, "vertex_statistics_inst": 197, "vertex_statistics_dict": 197, "vertex_statistics_from_dict": 197, "vertex_type_pair_statistics_inst": 198, "vertex_type_pair_statistics_dict": 198, "vertex_type_pair_statistics_from_dict": 198, "assist": [199, 219, 224, 247], "har": 199, "interactive_sdk": 199, "sudo": [199, 319, 488, 489], "pytest": 199, "mock": 199, "virtserv": 199, "swaggerhub": 199, "resp": 199, "f0": [199, 326], "create_dataloading_job": 199, "create_graph": 199, "delete_graph": 199, "get_graph": 199, "get_schema": 199, "list_graph": 199, "delete_job_by_id": 199, "get_job_by_id": 199, "list_job": 199, "create_procedur": 199, "delete_procedur": 199, "get_procedur": 199, "list_procedur": 199, "update_procedur": 199, "get_service_statu": 199, "restart_servic": 199, "start_servic": 199, "stop_servic": 199, "delete_edg": [199, 477], "get_edg": [199, 315], "update_edg": 199, "add_vertex": 199, "delete_vertex": [199, 477], "get_vertex": 199, "update_vertex": 199, "proc_cal": 199, "seek": [200, 323], "toolkit": 200, "showprocedur": 200, "proc_nam": [200, 208], "metric": [200, 249, 411, 412, 413, 414, 415], "canceljob": 200, "x": [200, 229, 230, 241, 242, 252, 255, 312, 318, 324, 329, 367, 400, 408, 410, 411, 415, 439, 496], "ok": [200, 254], "enumer": [200, 241, 242, 254], "respond": [200, 314], "NOT": [200, 223, 228, 476], "yourfil": 200, "123": [200, 313], "example_graph": 200, "11223444": 200, "11123445": 200, "rune": 200, "path_to_fil": 200, "query_servic": 200, "reject": [200, 471], "unabl": 200, "emptybodi": 200, "cpu_usag": 200, "memory_usag": 200, "job_": 200, "create_timestamp": 200, "process_id": 200, "line1": 200, "nlin2": 200, "1706786404768": 200, "bulk_load": 200, "workspac": [200, 241], "maintan": 200, "interactive_serv": 200, "subprocess": 200, "statuscod": 200, "invalidargu": 200, "unsupportedoper": 200, "alreadyexist": 200, "notexist": 200, "codegenerror": 200, "uninitializedstatu": 200, "invalidschema": 200, "permissionerror": [200, 263], "403": 200, "illegaloper": 200, "internalerror": 200, "invalidimportfil": 200, "ioerror": 200, "notfound": 200, "queryfail": 200, "depth": [201, 219, 223, 245, 312, 324, 329, 496], "graph_data": 201, "gs_interactive_conf": 201, "breakdown": [201, 209], "regist": [201, 202, 204, 218, 225, 243, 254, 257, 286, 471], "meta": [201, 219, 234, 243, 254, 315, 316, 475, 477], "tell": [201, 476], "eras": [201, 208], "irrevers": [201, 208], "caution": 201, "establish": [201, 214, 477], "connector": [201, 204, 221, 230], "opencyph": [201, 246], "supported_cyph": [201, 204], "term": [202, 234], "proc": [202, 416, 417, 421, 422, 463], "storp": 202, "sproc": 202, "stopro": 202, "storedproc": 202, "storeproc": 202, "subroutin": 202, "rdbm": [202, 222], "wikipedia": [202, 247, 255, 426, 430, 431, 432, 433, 435, 436, 437, 443, 444, 445, 446, 448, 449, 450, 451, 457], "nest": [202, 228], "sole": [203, 222, 223], "theori": [203, 237, 316, 324], "arm64": 203, "mac": [203, 259, 489, 491], "gs_interactive_hom": 203, "concurr": [204, 209, 244, 314], "impress": [204, 209], "Its": [204, 209, 211, 246, 443, 476], "timefram": [204, 209], "emphas": [204, 209, 251], "stand": [204, 251, 316, 317, 476], "shoulder": 204, "pivot": 204, "pillar": 204, "qp": [204, 217, 230, 250, 477], "snb": [204, 230, 243, 492, 497], "180": 204, "87": [204, 252, 455], "op": [204, 256, 266, 268, 269, 270, 271, 273, 274, 276, 278, 279, 281, 282, 283, 284, 285, 286, 289, 290, 291, 294, 295, 296, 298, 299, 322, 464, 468, 471], "boast": 204, "highlight": [204, 223, 244, 248], "laid": 204, "triumph": 204, "ten": [204, 247, 251, 316], "thousand": 204, "swiftli": 204, "versatil": [204, 225, 250, 476], "expans": [204, 248, 249, 321, 495], "prowess": 204, "prime": [204, 408, 410], "gql": [204, 218, 244, 251], "scalabl": [204, 217, 229, 247, 248, 249, 250, 251, 461], "possess": 204, "larger": [204, 226, 230, 240, 411], "massiv": [204, 218, 248], "too": [204, 217, 230, 251, 314, 383, 464], "offload": [204, 477], "excess": 204, "slave": 204, "constraint": [204, 223, 230, 231, 248], "portion": [204, 230, 247, 248, 256, 326], "occurr": [204, 222, 248], "syntax": [204, 223, 228, 237, 248, 256, 318, 464, 470], "definit": [204, 228, 244, 329, 410, 411, 413], "ir": [204, 217, 218, 219, 244, 246], "unif": 204, "physic": [204, 217, 218, 244, 255, 329, 387, 388, 389, 411, 475], "ddl": 204, "supported_gremlin_step": 204, "acid": [204, 250], "graph_nam": [206, 208, 219], "stored_procedure_1": 206, "flag": [206, 313, 314], "taken": [206, 464], "account": [206, 218, 248, 462, 495], "compile_onli": [206, 208], "procedure_nam": 206, "comma": [206, 313], "proc1": 206, "proc2": 206, "appear": [206, 211, 218, 230, 255, 369, 371, 373, 376, 378, 405, 406, 464, 490], "capit": [206, 223, 225], "aspect": [208, 218, 225, 230, 251], "desc": [208, 228, 230], "input_fil": 208, "solid": [209, 432, 449, 450], "prerequisit": 209, "helm": [209, 211, 216, 217, 477, 488, 490], "entiti": [209, 225, 226, 230, 240, 245, 249, 313], "\u6807\u7b7e": 210, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 210, "\u5c5e\u6027": [210, 495, 497], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 210, "\u539f\u59cbid": 210, "oid": [210, 254, 256, 257], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 210, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 210, "\u5b50\u56feid": 210, "fid": [210, 254, 257, 289, 473], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 210, "\u5206\u533a\u5668": 210, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 210, "\u7684\u6620\u5c04": 210, "\u5b50\u56fe": 210, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 210, "\u5b58\u50a8\u4e86\u9876\u70b9": 210, "\u8fb9": [210, 487], "\u9876\u70b9\u6570\u636e": 210, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 210, "\u5185\u90e8\u70b9": 210, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 210, "\u5916\u90e8\u70b9": 210, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 210, "\u672c\u5730id": 210, "lid": [210, 254, 289], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 210, "\u5168\u5c40id": 210, "gid": [210, 254, 289], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 210, "\u88abfragment\u5171\u8bc6": 210, "\u7528\u4e8e\u5b58\u50a8gid": 210, "oid\u7684\u6620\u5c04\u5173\u7cfb": 210, "\u7684\u8282\u70b9": 210, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 210, "gid\u7f16\u7801": 210, "\u5176\u4e2d": [210, 487, 492], "\u548c": [210, 318, 487, 489, 490, 491, 492, 494, 495, 496, 497], "\u5171\u540c\u7ec4\u6210": 210, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 210, "\u7684\u9876\u70b9": 210, "\u5e8f\u53f7": 210, "lid\u7f16\u7801": 210, "\u586b\u5145": 210, "\u603b\u662f": 210, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 210, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 210, "\u5206\u4e3ahashpartitioner\u548csegmentedpartition": 210, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 210, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 210, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 210, "\u8fb9\u6587\u4ef6": 210, "\u5f97\u5230\u591a\u4e2avertex": 210, "\u548cedg": 210, "etabl": 210, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 210, "\u5206\u7ec4": 210, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 210, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 210, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 210, "\u8fb9\u8868": 210, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 210, "partial_v_t": 210, "partial_e_t": 210, "table\u5305\u542boid": 210, "table\u5305\u62ecsrc\u548cdst\u7684oid": 210, "\u8bbf\u95eevtable\u7684oid\u5217": 210, "\u6839\u636eoid\u67e5\u8be2partit": 210, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 210, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 210, "gather\u64cd\u4f5c": 210, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 210, "\u6839\u636efrag\u6570\u91cf": 210, "label\u6570\u91cf\u548c\u5168\u90e8oid": 210, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 210, "fid_t": [210, 254], "fnum_": 210, "label_id_t": [210, 254], "label_num_": 210, "hashmapbuild": 210, "cur_gid": 210, "id_parser_": 210, "generateid": 210, "\u8d77\u59cbgid": 210, "vnum": 210, "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 210, "\u751f\u6210gid": 210, "emplac": 210, "getview": 210, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 210, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 210, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 210, "\u6839\u636epartitioner\u83b7\u53d6fid": 210, "\u6839\u636efid": 210, "id\u548coid\u67e5\u8be2gid": 210, "\u751f\u6210gid\u6570\u7ec4": 210, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 210, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 210, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 210, "\u5bf9etable\u6267\u884cshuffl": 210, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 210, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 210, "\u5904\u7406\u9876\u70b9": 210, "\u521d\u59cb\u5316id": 210, "parser": [210, 218, 241], "\u521d\u59cb\u5316ivnum": 210, "ovnum\u548ctvnum\u6570\u7ec4": 210, "\u6309\u7167vertex": 210, "label\u5206\u7ec4": 210, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 210, "\u5411vertex": 210, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 210, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 210, "\u5c06vertex": 210, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 210, "vid_parser_": 210, "vertex_label_num_": 210, "resiz": 210, "ivnums_": 210, "ovnums_": 210, "tvnums_": 210, "combinechunk": 210, "default_memory_pool": 210, "vm_ptr_": 210, "getinnervertexs": [210, 254], "fid_": 210, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 210, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 210, "\u901a\u8fc7src": 210, "gid\u5217\u548cdst": 210, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 210, "\u5e76\u6309\u7167vertex": 210, "edge_t": [210, 313, 324], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 210, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 210, "collect_outer_vertic": 210, "dynamic_pointer_cast": [210, 478], "converttoarrowtyp": [210, 254], "arraytyp": [210, 254], "chunk": [210, 299, 326, 475], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 210, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 210, "\u5916\u90e8\u70b9\u7684lid\u7531label": 210, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 210, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 210, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 210, "ovg2l_maps_": 210, "ovgid_lists_": 210, "cur_list": 210, "collected_ovgids_": 210, "\u6392\u5e8fgid": 210, "cur_map": 210, "buildertyp": 210, "vec_build": 210, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 210, "\u5176\u4e2dfid\u4e3a0": 210, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 210, "cur_id": 210, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 210, "cur_list_length": 210, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 210, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 210, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 210, "\u5220\u9664edg": 210, "table\u7684src\u5217\u548cdst\u5217": 210, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 210, "generate_local_id_list": 210, "gid_list": 210, "lid_list": 210, "vec": 210, "getfid": 210, "\u751f\u6210\u5185\u90e8\u70b9lid": 210, "getlabelid": 210, "getoffset": 210, "\u67e5\u8be2g2l": 210, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 210, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 210, "edge_src_": 210, "edge_dst_": 210, "table\u7684src\u5217\u548cgid\u5217": 210, "\u53ea\u4fdd\u7559\u5c5e\u6027": 210, "tmp_table0": 210, "removecolumn": 210, "\u6784\u5efacsr": 210, "\u5bf9\u4e8e\u6709\u5411\u56fe": 210, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 210, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 210, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 210, "\u6784\u5efarow": 210, "offset\u6570\u7ec4": 210, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 210, "\u4f7f\u7528row": 210, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 210, "\u586b\u5145dst": 210, "lid\u548ceid\u5230nbr": 210, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 210, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 210, "generate_directed_csr": 210, "vid_array_t": [210, 254], "src_list": 210, "dst_list": 210, "fixedsizebinaryarrai": 210, "int64arrai": 210, "edge_offset": 210, "actual_edge_num": 210, "v_label": [210, 254, 473], "edge_num": [210, 289, 491, 495], "src_list_ptr": 210, "raw_valu": 210, "dst_list_ptr": 210, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 210, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 210, "tvnum": 210, "offset_vec": 210, "degree_vec": 210, "int64build": 210, "podarraybuild": 210, "nbr_unit_t": [210, 254], "edge_build": 210, "v_offset": 210, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 210, "ptr": 210, "mutablepoint": 210, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 210, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 210, "vid": [210, 254, 326], "eid_t": [210, 254], "\u66f4\u65b0offset": 210, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 210, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 210, "offsets_ptr": 210, "lh": 210, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 210, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 210, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 210, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 210, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 210, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 210, "lid\u548ceid": 210, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 210, "\u5c01\u88c5": 210, "seal": [210, 233, 249], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 210, "ovgid\u548cg2l_map\u540e": 210, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 210, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 210, "\u4e5f\u5c31\u662f\u8bf4": [210, 488], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 210, "\u5f53\u524dfragment": 210, "fragment\u603b\u6570": 210, "directed_": 210, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 210, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 210, "edge_label_num_": 210, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 210, "propertygraphschema": 210, "schema_": 210, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 210, "\u9876\u70b9\u5c5e\u6027\u8868": 210, "\u4e0d\u5305\u542bid\u5217": 210, "\u5916\u90e8\u70b9gid": 210, "gid\u5230lid\u6620\u5c04": 210, "\u8fb9\u5c5e\u6027": 210, "csr\u7ed3\u6784\u7684column": 210, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 210, "csr\u7ed3\u6784\u7684row": 210, "vertex_map_t": [210, 254], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 210, "edge_tables_columns_": 210, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 210, "flatten_edge_tables_columns_": 210, "\u540c\u4e0a": 210, "vertex_tables_columns_": 210, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 210, "ie_ptr_lists_": 210, "oe_ptr_lists_": 210, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 210, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 210, "\u4e5f\u5c31\u662fcolumn": 210, "index\u7684\u8d77\u59cb\u5730\u5740": 210, "ie_offsets_ptr_lists_": 210, "oe_offsets_ptr_lists_": 210, "\u51fa\u8fb9\u7684row": 210, "offset\u8d77\u59cb\u5730\u5740": 210, "offset\u7684\u8d77\u59cb\u5730\u5740": 210, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 210, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 210, "\u76ee\u7684\u9876\u70b9fid": 210, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 210, "idst_": 210, "odst_": 210, "iodst_": 210, "idoffset_": 210, "odoffset_": 210, "iodoffset_": 210, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 210, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 210, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 210, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 210, "id\u548c\u9876\u70b9\u5e8f\u53f7": 210, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 210, "ivnum": 210, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 210, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 210, "vertex_range_t": [210, 254], "label_id": [210, 254, 256, 257, 289], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 210, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 210, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 210, "\u5c5e\u6027id": 210, "\u5217\u53f7": 210, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 210, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 210, "\u884c\u53f7": 210, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 210, "getdata": [210, 254], "prop_id_t": [210, 254], "prop_id": 210, "property_graph_util": [210, 254], "valuegett": 210, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 210, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 210, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 210, "adj_list_t": [210, 254], "e_label": [210, 254], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 210, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 210, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 210, "offset_arrai": 210, "\u8bbf\u95eerow": 210, "oe": 210, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 210, "\u751f\u6210adjlist\u5bf9\u8c61": 210, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 210, "\u7ed3\u675f\u5730\u5740": 210, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 210, "\u548c\u51fa\u8fb9\u540c\u7406": 210, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 210, "ie": 210, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 210, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 210, "\u5bf9\u5e94\u5230\u884c\u53f7": 210, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 210, "\u4f8b\u5982": [210, 487, 491, 495, 497], "\u83b7\u53d6edg": 210, "struct": [210, 254, 387, 420], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 210, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 210, "edata_arrays_": 210, "nbr_": 210, "8g": [211, 241], "18": [211, 220, 230, 252, 314, 315, 317, 326, 329, 387, 436, 441, 445, 447, 450, 456, 475, 487, 490, 494], "silent": [211, 464, 485], "did": [211, 324], "role": [211, 218, 232, 241, 246, 314, 323, 329, 415, 453, 461, 477, 481, 485, 490], "rolebind": [211, 490], "uninstal": [211, 217, 490], "recycl": 211, "alloc": [211, 235, 239], "seem": [211, 230], "stuck": 211, "consumpt": 211, "poor": [211, 320], "acquir": [211, 221, 229], "mostli": [211, 219, 290], "visibl": [211, 257], "cloud": [211, 250, 251, 477], "k8s_vineyard_mem": [211, 241, 311, 471, 490], "shape": [211, 236, 237, 240, 245, 254, 256, 315, 316, 317, 318, 321, 324, 328, 386, 491], "forth": 211, "smaller": [211, 230, 252, 327, 329, 385, 386, 390], "shared_mem": [211, 490], "grpcio": [211, 490], "grpc_python_build_system_openssl": [211, 490], "scipi": [211, 411, 412, 413, 414, 464, 467, 490], "anaconda": [211, 490], "workaround": 211, "openbla": 211, "tri": [211, 214, 239, 248, 393, 399], "pkgconfig": 211, "cmake_prefix_path": 211, "brew": 211, "deni": [211, 263, 490], "kafka": [211, 473, 477, 490], "zookeep": [211, 490], "crashloopbackoff": [211, 490], "bitnami": [211, 490], "755": 211, "1001": [211, 477], "brutal": 211, "chmod": [211, 229, 490], "777": [211, 252, 490], "eleg": [211, 214], "grant": [211, 461], "rais": [211, 218, 255, 263, 265, 299, 311, 318, 326, 327, 329, 335, 344, 348, 349, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 398, 399, 403, 405, 408, 409, 410, 421, 424, 456, 459, 460, 464, 467, 471], "timeout_second": [211, 311, 471, 490], "600": [211, 252, 471, 490], "enterpris": 211, "proxi": [211, 490], "properli": [211, 226], "wrong": 211, "resolut": [211, 477], "occup": 211, "hostnam": [211, 490], "no_proxi": [211, 490], "suffix": [211, 228], "flush": 211, "forcibli": 211, "contact": 211, "slack": [211, 490], "dingtalk": [211, 490], "happi": 211, "90": [213, 252], "traffic": 214, "web": [214, 255, 329, 397, 411, 416, 457], "ever": [214, 237], "amount": [214, 229, 235, 249, 316, 318, 320], "hidden": [214, 246, 247, 249, 312, 496], "attract": 214, "attent": [214, 249, 318], "difficult": [214, 313, 323, 477], "obstacl": 214, "attempt": [214, 217, 247, 248, 251, 464], "curv": [214, 247], "hard": [214, 228, 238, 239, 425, 476], "complic": [214, 218, 230, 256], "sql": [214, 218, 225, 228, 230, 231], "deep": [214, 237, 244, 312, 317, 318, 320, 340, 343, 452, 464], "gnn": [214, 216, 234, 236, 237, 240, 244, 245, 250, 251, 312, 316, 317, 318, 320, 321, 471, 493, 496], "train": [214, 222, 234, 236, 237, 238, 244, 245, 250, 251, 253, 314, 317, 318, 320, 321, 324, 328, 471, 491, 496], "fist": 214, "interpret": [214, 244, 329], "mount_dataset": [214, 243], "ran": [214, 239], "p2p_network": 214, "embed": [214, 234, 240, 245, 249, 313, 320], "inter": [214, 325, 383, 386], "wherea": [214, 383, 476], "numpi": [214, 230, 234, 254, 256, 271, 282, 291, 315, 316, 318, 319, 320, 321, 324, 326, 328, 329, 456, 464, 467, 493], "datafram": [214, 243, 256, 270, 281, 291, 294, 326, 464, 487, 497], "head": [214, 217, 222, 228, 230], "creationd": [214, 228, 230, 243, 475, 492, 497], "locationip": [214, 243, 497], "browserus": [214, 230, 243, 497], "618475290625": 214, "2011": [214, 230, 397], "08": [214, 252, 329], "17t14": 214, "26": [214, 228, 230, 241, 252, 314, 315, 317, 413], "59": [214, 252], "961": 214, "210": [214, 252, 460], "17": [214, 230, 252, 314, 315, 317, 487], "chrome": [214, 230], "618475290626": 214, "17t11": 214, "570": 214, "comment_replyof_com": 214, "274877907301": 214, "274877907299": 214, "274877907302": 214, "pd": [214, 222, 243, 497], "df_v": [214, 243, 487, 497], "read_csv": [214, 222, 243, 497], "sep": [214, 222, 243, 326, 497], "df_e": [214, 243, 497], "graphcomput": [216, 495], "gl": [216, 237, 250, 312, 313, 314, 315, 316, 317, 319, 320, 321, 322, 323, 325], "neural": [216, 234, 244, 245, 250, 251, 253, 312, 313, 316, 318, 320, 324], "posit": [216, 230, 249, 250, 312, 318, 329, 374, 393, 395, 396, 398, 399, 403, 411, 412, 413, 414, 415, 459, 462, 476, 479], "frequent": [216, 244, 247, 477], "groot": [216, 226, 244, 251], "graphar": [216, 326], "gart": 216, "gap": 216, "oltp": [216, 244, 246], "style": [216, 233, 244, 469], "wonder": 217, "throughout": [217, 218, 228], "smoothli": 217, "easiest": 217, "websit": [217, 247, 383], "untar": 217, "cp": [217, 219, 461, 476], "tree": [217, 246, 364, 366, 374, 394, 400, 402, 412, 413, 414, 427, 428, 465, 471, 497], "your_release_nam": 217, "cypherport": 217, "littl": [217, 228, 230], "v6d_modern_load": [217, 219], "data_path": [217, 478], "store_data_path": [217, 219], "thing": [217, 318, 484], "key1": 217, "key2": 217, "token": [217, 228], "column_typ": 217, "infer": [217, 243, 249, 250], "filed1": 217, "filed2": 217, "unexpect": 217, "troubl": 217, "correspondingli": [217, 237, 421, 424], "v6d_ldbc_loader": 217, "hdf": [217, 243, 291, 323, 326, 477, 487, 497], "pegasusworkernum": 217, "pegasustimeout": 217, "durat": [217, 223, 228], "pegasusbatchs": 217, "1024": [217, 219, 228, 475], "pegasusoutputcapac": 217, "frontendquerypersecondlimit": 217, "2147483647": [217, 477], "gremlinscriptlanguagenam": 217, "antlr_gremlin_travers": 217, "antlr_gremlin_calcit": 217, "inher": 218, "manufactur": 218, "upcom": 218, "sticki": 218, "shelv": 218, "intellig": [218, 230, 244, 251, 421, 424], "hybrid": [218, 476, 477], "dedupl": 218, "latenc": [218, 229, 244, 250, 251], "hope": [218, 230, 477], "trade": [218, 244, 477], "inevit": 218, "realist": [218, 456], "lengthi": 218, "verif": [218, 244], "80": [218, 252, 443], "decoupl": [218, 244, 251], "upper": [218, 228, 230, 234, 248, 383, 476], "briefli": [218, 249], "algebra": [218, 453], "edgeexpans": 218, "pathexpans": 218, "legal": 218, "predic": [218, 230], "arithmet": [218, 228, 230], "firstli": [218, 226, 230, 243, 251], "down": [218, 225, 242, 381], "cbo": 218, "glogu": 218, "shuffl": [218, 228, 241, 242, 318, 324, 328], "plu": [218, 228, 230, 367, 439], "unaccept": 218, "come": [218, 222, 230, 233, 243, 245, 246, 249, 250, 252, 315, 430, 467], "end2end": 219, "sf": [219, 230], "v6d_object_id": 219, "unsur": [219, 222], "vineyard_ipc_socket": [219, 478], "gie_test_hom": 219, "rpc": [219, 241, 254, 325, 471, 477], "1234": 219, "127": [219, 252, 477], "11234": 219, "pegasu": [219, 244], "gaia_executor": 219, "log4r": [219, 477], "yml": [219, 475, 477], "usernam": [219, 477], "password": [219, 477], "auth": [219, 221, 329, 477], "3000000": [219, 220, 477], "djna": 219, "kill": [219, 471], "pkill": 219, "gcc": [220, 252, 494], "64": [220, 229, 237, 317, 318, 395, 475, 495], "chip": [220, 494], "hereaft": [220, 230, 245], "q1": [220, 222, 230, 245], "q2": [220, 230, 245], "q3": [220, 230, 245], "453": 220, "xxx": [220, 222, 322, 326, 471, 487], "pppp": 220, "startup": 220, "3000": 220, "entr": 220, "ee": 220, "syntact": [220, 226, 231, 248], "sugar": [220, 226, 231, 248], "graphdatabas": 221, "routingcontrol": [221, 245], "print_top_10": 221, "execute_queri": 221, "routing_": [221, 245], "simpler": [221, 229, 230, 464], "nowadai": 222, "shortcom": [222, 226, 230], "gpt": 222, "materi": 222, "year": [222, 228, 230, 245, 247, 491], "mislead": 222, "hot": 222, "cold": 222, "workabl": 222, "significantli": [222, 225, 226, 247, 250], "openai": 222, "novic": 222, "dream": 222, "chamber": 222, "25": [222, 230, 236, 240, 245, 252, 314, 315, 317, 386, 388, 391, 410, 457, 491], "langchain": 222, "316": 222, "suchun": 222, "sv": 222, "nodes_set": 222, "stone_story_nodes_rel": 222, "vid_field": [222, 243, 326, 492], "edges_set": 222, "stone_story_edg": 222, "edges_sets_": 222, "src_field": [222, 243, 326, 492], "dst_field": [222, 243, 326, 492], "daughter_in_law_of_grandson_of": 222, "wife_of": 222, "api_kei": 222, "query_to_cyph": 222, "langchain_prompt": 222, "son": 222, "baoyu": 222, "jia": 222, "\u8d3e\u5b9d\u7389\u662f\u8c01\u7684\u513f\u5b50": 222, "cypher_sent": 222, "son_of": 222, "q": [222, 229, 316, 318, 324, 406, 410], "\u8d3e\u5b9d\u7389": 222, "lastli": 222, "\u8d3e\u653f": 222, "stori": 222, "compli": [223, 318], "unaddress": 223, "regard": [223, 230, 240, 476], "keyword": [223, 331, 332, 333, 400, 407, 411, 412, 413, 414, 415, 464, 467, 470, 471], "insensit": [223, 228], "lowercas": 223, "letter": [223, 458], "slightli": [223, 319, 383, 470], "elabor": [223, 251], "uint64": [223, 305, 326, 471], "byte_arrai": 223, "datetim": 223, "citizen": 223, "unsupport": [223, 226, 228], "conceiv": [223, 411], "inner_typ": 223, "mathemat": [223, 396, 398, 406, 408, 410, 419], "moment": [223, 259, 477], "averag": [223, 228, 240, 245, 255, 329, 383], "avg": [223, 228, 329], "summar": [223, 230, 234], "subtract": [223, 228], "divis": [223, 228], "modulo": [223, 228, 408], "exponenti": [223, 228, 230, 249, 411, 413, 414], "multipli": [223, 228, 451], "inequ": 223, "sensit": [223, 456], "WITH": [223, 228], "conjunct": 223, "AND": [223, 228, 245, 257], "disjunct": 223, "OR": [223, 226, 228, 257, 464], "xor": [223, 228], "negat": [223, 228], "bitopr": 223, "scalar": [223, 322, 329], "listliter": 223, "fold": [223, 476, 495], "mapliter": 223, "elementid": [223, 228], "interv": [223, 383, 415, 471], "notabl": 223, "AS": [223, 226, 461, 465], "BY": [223, 226], "interconnect": [224, 247, 314], "tcp": [224, 241], "llm": 224, "sentenc": [224, 225, 228, 230], "tradition": 225, "accommod": [225, 251], "heurist": [225, 248, 391], "coexist": 225, "sophist": [225, 246], "cardin": 225, "primarili": [225, 230, 248, 476], "stem": 225, "atc": 225, "instrument": 225, "efficaci": 225, "alias": [225, 228], "p1": [225, 230], "p2": [225, 230], "id1": [225, 495], "id2": [225, 495], "expedit": 225, "intent": 225, "k1": [225, 228], "k2": [225, 228], "p3": 225, "retain": [225, 228, 405, 478], "constrain": 225, "simultan": [225, 245, 251, 473], "necessit": [225, 244], "lai": 225, "groundwork": 225, "conform": 225, "nonexist": 225, "kno": 225, "mismatch": 225, "websocket": [226, 495], "worth": [226, 240, 318, 326, 464], "mutat": 226, "lambda": [226, 230, 312, 318, 324, 329, 400, 411, 413, 414, 415, 496], "groovi": 226, "currenttimemilli": [226, 477, 495], "expr": [226, 228, 230, 495], "transact": [226, 244, 250, 251, 252, 473, 477, 487], "secondari": 226, "rocksdb": [226, 477], "isol": [226, 329, 425, 477], "therein": 226, "council": [226, 252], "birthdai": [226, 243, 497], "differenti": 226, "123456": [226, 234, 249, 477], "hasid": 226, "expos": [226, 232, 316, 327, 471, 481], "secondli": [226, 251], "path_expand": 226, "concret": [226, 255, 256, 326], "endv": [226, 230, 248, 495], "repeat": [226, 248, 249, 318, 324, 398, 403, 406, 426, 429, 495], "path_opt": [226, 228, 230, 248, 495], "pathexpand": 226, "marko": [226, 228, 230], "27": [226, 228, 230, 252, 314, 315, 317, 445], "hasstep": 226, "groupcount": [226, 495], "age_cnt": 226, "age_sum": 226, "scan": [226, 476], "propertyidvalu": 226, "moreov": [226, 228, 244, 248, 250, 476], "propertyidvalue1": 226, "propertyidvalue2": 226, "inE": [226, 318, 495], "conquer": 227, "meant": [228, 230], "vertexid": 228, "inject": 228, "edgeid": 228, "histori": [228, 230, 248], "propertykei": 228, "accessor": 228, "eq": [228, 230, 248, 255, 495], "neq": [228, 495], "gt": [228, 230, 495], "lt": [228, 230, 495], "gte": [228, 230, 245, 491, 495], "lte": [228, 245, 491, 495], "outsid": [228, 495], "textp": [228, 495], "startingwith": [228, 495], "endingwith": [228, 495], "rko": 228, "ark": 228, "notstartingwith": [228, 495], "notendingwith": [228, 495], "notcontain": [228, 495], "unequ": 228, "wheretravers": 228, "act": [228, 312, 461, 464, 484, 496], "startkei": 228, "alter": [228, 464], "opposit": [228, 318, 392, 439], "nottravers": 228, "duplic": [228, 230, 391, 393, 395, 464, 465], "deduplabel": 228, "composit": [228, 230], "de": [228, 239], "impli": 228, "flat": 228, "br": 228, "selectkei": 228, "roll": [228, 230, 233], "accompani": 228, "aggregatefunc": 228, "emit": [228, 230, 312, 315, 318, 324, 496], "ascend": [228, 230], "asc": [228, 230], "bias": 228, "toss": 228, "merg": [228, 318], "uniontravers": 228, "matchsent": 228, "binder": 228, "__": [228, 229, 230, 245, 318, 491, 495], "graphnam": 228, "unrol": 228, "linear": [228, 398, 400, 456, 476], "result_opt": [228, 230, 495], "all_v": [228, 230, 495], "lengthrang": 228, "keyvaluepair": 228, "end_v": [228, 230, 495], "all_v_": 228, "vada": 228, "josh": 228, "29": [228, 230, 314, 315, 317], "ongo": 228, "liter": 228, "0f": 228, "0d": 228, "2l": 228, "IN": [228, 246], "isnul": 228, "month": 228, "1000": [228, 255, 314, 329, 461, 464, 477], "bitwis": 228, "startswith": 228, "ma": 228, "endswith": 228, "ko": 228, "substr": [228, 495], "preced": [228, 464, 477], "parenthes": 228, "unari": 228, "modulu": 228, "membership": [228, 464], "lop": 228, "rippl": 228, "peter": 228, "34": [228, 230, 252, 314, 315, 317, 457], "729": 228, "1225": 228, "841": 228, "v2": [228, 230, 236, 248, 312, 442, 496], "35": [228, 230, 252, 314, 315, 317, 324, 391, 441, 457], "simplepath": [228, 495], "latter": [228, 230, 247], "mix": [228, 255, 476], "sack": [228, 495], "guidanc": 229, "gremlinpython": [229, 477], "sy": [229, 324], "gremlin_python": [229, 477], "graph_travers": 229, "driver_remote_connect": 229, "driverremoteconnect": [229, 477], "gremlin_endpoint": [229, 477], "remoteconn": [229, 477], "withremot": [229, 477], "assert": [229, 255, 476], "oom": 229, "vast": 229, "mitig": 229, "risk": [229, 244], "queue": [229, 257], "graph_url": [229, 327, 477, 495], "stopiter": 229, "resultiterationbatchs": 229, "addcontactpoint": [229, 477], "resultset": [229, 477], "hasnext": 229, "dlcdn": 229, "your_endpoint_address": 229, "your_endpoint_port": 229, "classnam": [229, 495], "ser": [229, 495], "gryomessageserializerv1d0": [229, 495], "serializeresulttostr": [229, 495], "realm": 230, "audit": 230, "toolsuit": 230, "simul": [230, 289, 324], "confid": 230, "permit": [230, 464], "3k": 230, "gremlin_queri": 230, "190376": 230, "787074": 230, "sf1": 230, "432345564227583365": 230, "504403158265495622": 230, "576460752303435306": 230, "432345564227579434": 230, "hastyp": 230, "504403158265495612": 230, "144115188075855941": 230, "issubclassof": 230, "504403158265495553": 230, "confus": [230, 412, 413, 414], "mechan": [230, 246, 249, 251, 473, 481], "belong": [230, 249, 255, 256, 257, 326, 454, 457, 464, 470, 477], "distinguish": [230, 244, 312, 313, 314, 476], "worri": 230, "havelabel": 230, "216172782113783808": 230, "216172782113784710": 230, "label1": 230, "label2": 230, "forum": 230, "72057594037936036": 230, "360287970189718653": 230, "360287970189718655": 230, "joseph": 230, "yacin": 230, "01t00": 230, "curiou": 230, "38416": 230, "mayb": 230, "pyplot": 230, "plt": 230, "comment_cont": 230, "comment_length": 230, "histogram": 230, "hist": [230, 338], "50": [230, 252, 411, 413, 414], "607c8e": 230, "grid": [230, 457], "axi": [230, 254, 255, 256, 271, 295, 324, 470], "xlabel": 230, "ylabel": 230, "gender": [230, 243, 497], "person_gend": 230, "male": 230, "femal": 230, "male_count": 230, "female_count": 230, "216172782113784483": 230, "around": [230, 327], "432345564227569033": 230, "288230376151712472": 230, "144115188075856168": 230, "144115188075860911": 230, "72057594037934114": 230, "hasmoder": 230, "studyat": 230, "workat": 230, "islocatedin": 230, "432345564227582847": 230, "hasinterest": 230, "504403158265496227": 230, "864691128455136658": 230, "1008806316530991636": 230, "360287970189645858": 230, "en": [230, 247, 255, 426, 430, 431, 432, 433, 435, 436, 437, 443, 444, 445, 446, 448, 449, 450, 451], "e1": 230, "citi": [230, 234, 247, 249], "ispartof": 230, "countri": 230, "288230376151711797": 230, "216172782113784555": 230, "14": [230, 252, 314, 315, 317, 369, 429, 437, 449, 464], "exactli": [230, 234, 248, 255, 329, 374, 383, 397, 442, 470, 477], "432345564227569357": 230, "432345564227570524": 230, "288230376151712984": 230, "144115188075861043": 230, "replyof": [230, 475, 492], "54336": 230, "33411": 230, "360287970189700805": 230, "59465": 230, "33403": 230, "awai": 230, "ineffect": 230, "illeg": 230, "simple_path": 230, "unfold": [230, 255], "hascreat": 230, "nation": 230, "china": 230, "np": [230, 315, 318, 324, 328, 479], "market": 230, "japan": 230, "browsers_us": 230, "browser_list": 230, "firefox": 230, "safari": 230, "browser_count": 230, "autopct": 230, "1f": 230, "univers": [230, 244, 329, 362, 363, 410, 420, 452, 456], "person1": 230, "person2": 230, "university1": 230, "university2": 230, "studi": [230, 240, 245, 251, 410, 412], "216172782113784481": 230, "216172782113784279": 230, "144115188075858884": 230, "216172782113784361": 230, "216172782113784291": 230, "144115188075858879": 230, "216172782113784642": 230, "216172782113784473": 230, "216172782113784328": 230, "144115188075858700": 230, "216172782113784700": 230, "216172782113784331": 230, "144115188075860619": 230, "216172782113784375": 230, "216172782113784333": 230, "144115188075858813": 230, "216172782113784593": 230, "216172782113784688": 230, "144115188075860870": 230, "216172782113784047": 230, "216172782113784692": 230, "144115188075862429": 230, "isomorph": [230, 249, 314, 318, 443, 465], "22": [230, 252, 314, 315, 317, 326, 457, 475], "23": [230, 314, 315, 317], "216172782113784192": 230, "216172782113784107": 230, "216172782113784171": 230, "regular": [230, 403, 408, 409, 410, 432, 437, 440, 445, 448, 449, 450, 451], "squar": [230, 391, 410, 438, 439, 442, 457], "butterfli": 230, "notion": 230, "matchanalyticsalgorithm": 230, "matchoptimizationalgorithm": 230, "216172782113784587": 230, "216172782113784363": 230, "144115188075860919": 230, "216172782113784532": 230, "216172782113784400": 230, "144115188075861858": 230, "216172782113784491": 230, "216172782113784401": 230, "144115188075858086": 230, "216172782113784598": 230, "216172782113784629": 230, "144115188075858881": 230, "216172782113783931": 230, "216172782113784657": 230, "144115188075858708": 230, "repli": 230, "pa": 230, "pb": 230, "216172782113783809": 230, "216172782113784011": 230, "360287970189640007": 230, "360287970189640008": 230, "360287970189640009": 230, "2012": [230, 423], "216172782113783812": 230, "216172782113783882": 230, "36": [230, 252, 314, 315, 317, 369, 449, 457, 489], "360287970189640010": 230, "37": [230, 252, 314, 315, 317, 329, 457, 489], "216172782113784105": 230, "38": [230, 252, 314, 315, 317, 457, 489], "41": [230, 252, 314, 315, 317, 404, 457], "43": [230, 314, 315, 317, 329, 431, 457, 487], "216172782113783814": 230, "216172782113783962": 230, "360287970189640135": 230, "52": [230, 457], "216172782113784199": 230, "54": [230, 252, 404, 457], "216172782113784038": 230, "56": [230, 252, 363, 457], "216172782113783816": 230, "216172782113784144": 230, "175": 230, "360287970189640462": 230, "72057594037927936": 230, "144115188075855872": 230, "288230376151711744": 230, "432345564227567616": 230, "504403158265495555": 230, "india": 230, "hasmemb": 230, "8248": 230, "8101": 230, "imposs": 230, "2822": 230, "tag1": 230, "tag2": 230, "37164": 230, "432": 230, "property1": 230, "property2": 230, "donati": 230, "luigi": 230, "hall": 230, "costa": 230, "carlo": 230, "khan": 230, "meera": 230, "mahinda": 230, "eli": 230, "94": 230, "228": [230, 252], "emb": [230, 312, 496], "th": [230, 316, 329, 442], "dom": 230, "pedro": 230, "ii": 230, "condariuc": 230, "bonomi": 230, "anyth": 230, "david": [230, 365, 376, 441], "silva": 230, "guliyev": 230, "tagclass": 230, "504403158265495552": 230, "504403158265495554": 230, "504403158265495556": 230, "504403158265495557": 230, "504403158265495558": 230, "504403158265495559": 230, "504403158265495560": 230, "504403158265495561": 230, "504403158265495562": 230, "504403158265495563": 230, "504403158265495564": 230, "504403158265495565": 230, "504403158265495566": 230, "504403158265495567": 230, "504403158265495568": 230, "504403158265495569": 230, "504403158265495570": 230, "504403158265495571": 230, "504403158265495572": 230, "504403158265495573": 230, "504403158265495574": 230, "504403158265495575": 230, "504403158265495576": 230, "504403158265495577": 230, "504403158265495578": 230, "504403158265495579": 230, "504403158265495580": 230, "504403158265495581": 230, "504403158265495582": 230, "504403158265495583": 230, "504403158265495584": 230, "504403158265495585": 230, "504403158265495586": 230, "504403158265495587": 230, "504403158265495588": 230, "504403158265495589": 230, "504403158265495590": 230, "504403158265495591": 230, "504403158265495592": 230, "504403158265495593": 230, "504403158265495594": 230, "504403158265495595": 230, "504403158265495596": 230, "504403158265495597": 230, "504403158265495598": 230, "504403158265495599": 230, "504403158265495600": 230, "504403158265495601": 230, "504403158265495602": 230, "504403158265495603": 230, "504403158265495604": 230, "504403158265495605": 230, "504403158265495606": 230, "504403158265495607": 230, "504403158265495608": 230, "504403158265495609": 230, "504403158265495610": 230, "504403158265495611": 230, "504403158265495613": 230, "504403158265495614": 230, "504403158265495615": 230, "504403158265495616": 230, "504403158265495617": 230, "504403158265495618": 230, "504403158265495619": 230, "504403158265495620": 230, "504403158265495621": 230, "q4": 230, "690": 230, "134313148716225": 230, "216172782113783811": 230, "216172782113783813": 230, "216172782113784707": 230, "216172782113784708": 230, "216172782113784709": 230, "216172782113783910": 230, "216172782113784104": 230, "216172782113784207": 230, "216172782113784318": 230, "216172782113784305": 230, "216172782113784597": 230, "216172782113784693": 230, "216172782113784018": 230, "216172782113784092": 230, "216172782113784108": 230, "216172782113784161": 230, "216172782113784162": 230, "73": [230, 252, 410], "216172782113783875": 230, "216172782113783932": 230, "216172782113784057": 230, "216172782113784068": 230, "216172782113784065": 230, "216172782113784235": 230, "216172782113784247": 230, "meaning": [230, 243, 256, 326], "449": 230, "454": [230, 252], "216172782113783810": 230, "descend": [230, 458], "216172782113784082": 230, "216172782113784169": 230, "216172782113784267": 230, "216172782113784368": 230, "216172782113784376": 230, "216172782113783938": 230, "216172782113784405": 230, "216172782113783980": 230, "216172782113783844": 230, "216172782113783901": 230, "216172782113783935": 230, "216172782113784439": 230, "216172782113784315": 230, "216172782113784374": 230, "216172782113784601": 230, "216172782113784431": 230, "216172782113783815": 230, "216172782113783817": 230, "216172782113783971": 230, "216172782113784154": 230, "216172782113784381": 230, "216172782113783933": 230, "earlier": [230, 415, 477], "216172782113783819": 230, "216172782113783826": 230, "216172782113783836": 230, "bi": [230, 247, 250], "query2": 230, "09": [230, 252], "07": [230, 239, 252, 383, 391], "hastag": 230, "count1": 230, "count2": 230, "jet_li": 230, "zhang_yim": 230, "faye_wong": 230, "tsui_hark": 230, "bruce_le": 230, "johnny_depp": 230, "tom_cruis": 230, "jackie_chan": 230, "query3": 230, "moder": 230, "infinit": [230, 425], "seriou": 230, "song": 230, "containerof": 230, "message_count": 230, "824633725780": 230, "08t02": 230, "334": [230, 252], "album": 230, "hao": 230, "wang": [230, 396, 398], "19791209300479": 230, "755914248304": 230, "02t20": 230, "03": [230, 252, 485], "344": 230, "wall": 230, "lin": 230, "lei": 230, "24189255811275": 230, "824633725045": 230, "02": [230, 391], "03t18": 230, "633": 230, "893353201782": 230, "28t23": 230, "53": [230, 252, 457], "251": 230, "1030792152809": 230, "03t09": 230, "47": [230, 241, 242, 252, 314, 315, 317], "414": 230, "chen": 230, "32985348833887": 230, "07t07": 230, "30": [230, 252, 314, 315, 317, 388, 433, 435, 440, 477, 495], "038": 230, "zhang": [230, 487], "yang": [230, 487], "15393162789707": 230, "query4": 230, "membercount": 230, "country_count": 230, "personcount": 230, "72057594037932503": 230, "72057594037932473": 230, "72057594037932489": 230, "72057594037932494": 230, "72057594037932501": 230, "72057594037934803": 230, "72057594037934804": 230, "72057594037935005": 230, "72057594037928132": 230, "72057594037935879": 230, "288230376151711799": 230, "country_top100_forums_dict": 230, "personcountforum": 230, "72057594037935702": 230, "72057594037930685": 230, "72057594037932114": 230, "72057594037934231": 230, "72057594037935703": 230, "72057594037935730": 230, "72057594037935734": 230, "72057594037932509": 230, "72057594037935707": 230, "72057594037935708": 230, "72057594037935711": 230, "72057594037935714": 230, "72057594037935719": 230, "72057594037935729": 230, "72057594037935731": 230, "72057594037935724": 230, "72057594037929560": 230, "72057594037931546": 230, "72057594037931545": 230, "72057594037932479": 230, "72057594037932485": 230, "72057594037932505": 230, "72057594037932511": 230, "72057594037935710": 230, "72057594037935722": 230, "72057594037929246": 230, "72057594037928266": 230, "72057594037935713": 230, "72057594037934308": 230, "72057594037934313": 230, "72057594037934302": 230, "72057594037930430": 230, "72057594037934303": 230, "72057594037932482": 230, "72057594037935147": 230, "72057594037935148": 230, "72057594037935157": 230, "72057594037927973": 230, "72057594037929386": 230, "72057594037934315": 230, "72057594037935720": 230, "72057594037935015": 230, "72057594037934300": 230, "72057594037930861": 230, "72057594037934319": 230, "72057594037931542": 230, "72057594037929583": 230, "72057594037933324": 230, "72057594037929182": 230, "72057594037929739": 230, "72057594037934829": 230, "72057594037935658": 230, "72057594037935660": 230, "72057594037935674": 230, "72057594037935682": 230, "72057594037935683": 230, "72057594037935672": 230, "72057594037927978": 230, "72057594037935163": 230, "72057594037935014": 230, "72057594037931544": 230, "72057594037934297": 230, "72057594037927979": 230, "72057594037932474": 230, "72057594037934384": 230, "72057594037932639": 230, "72057594037934380": 230, "72057594037935146": 230, "72057594037935152": 230, "72057594037928134": 230, "72057594037928674": 230, "72057594037929248": 230, "72057594037931240": 230, "72057594037931247": 230, "72057594037931256": 230, "72057594037930958": 230, "72057594037930963": 230, "72057594037931259": 230, "72057594037931260": 230, "72057594037931262": 230, "72057594037929365": 230, "72057594037929419": 230, "72057594037929421": 230, "72057594037929431": 230, "72057594037929434": 230, "72057594037929437": 230, "72057594037929446": 230, "72057594037929447": 230, "72057594037929449": 230, "72057594037929450": 230, "72057594037935166": 230, "72057594037929519": 230, "72057594037929451": 230, "72057594037929452": 230, "72057594037935046": 230, "72057594037932339": 230, "72057594037932481": 230, "72057594037934294": 230, "72057594037932389": 230, "72057594037932976": 230, "72057594037930870": 230, "72057594037931266": 230, "72057594037928092": 230, "72057594037928495": 230, "72057594037929510": 230, "72057594037929517": 230, "72057594037929961": 230, "72057594037929965": 230, "72057594037930242": 230, "72057594037930248": 230, "72057594037930250": 230, "72057594037930313": 230, "72057594037931547": 230, "72057594037935686": 230, "72057594037929052": 230, "72057594037929053": 230, "72057594037929055": 230, "72057594037929057": 230, "72057594037929060": 230, "72057594037934811": 230, "72057594037934813": 230, "72057594037934816": 230, "72057594037934821": 230, "72057594037934822": 230, "72057594037934823": 230, "72057594037934828": 230, "72057594037934835": 230, "72057594037934837": 230, "72057594037934975": 230, "72057594037934976": 230, "72057594037935032": 230, "72057594037935038": 230, "72057594037935045": 230, "72057594037935664": 230, "72057594037935673": 230, "72057594037935678": 230, "72057594037935685": 230, "72057594037931549": 230, "72057594037931550": 230, "72057594037931552": 230, "72057594037931554": 230, "72057594037931557": 230, "72057594037931560": 230, "72057594037931566": 230, "72057594037935671": 230, "72057594037935670": 230, "72057594037934977": 230, "72057594037931543": 230, "72057594037929518": 230, "72057594037935679": 230, "72057594037931575": 230, "72057594037932438": 230, "72057594037932878": 230, "72057594037932886": 230, "72057594037932888": 230, "72057594037927982": 230, "72057594037930526": 230, "72057594037930535": 230, "72057594037930546": 230, "72057594037930976": 230, "72057594037930536": 230, "72057594037931358": 230, "72057594037930366": 230, "72057594037931574": 230, "72057594037932435": 230, "72057594037935020": 230, "72057594037935864": 230, "72057594037933861": 230, "72057594037932440": 230, "72057594037927981": 230, "72057594037931349": 230, "72057594037931366": 230, "72057594037932885": 230, "72057594037927980": 230, "72057594037930529": 230, "72057594037930532": 230, "72057594037931304": 230, "72057594037932433": 230, "72057594037932441": 230, "72057594037934547": 230, "query11": 230, "live": 230, "startdat": 230, "enddat": 230, "216172782113784091": 230, "216172782113784250": 230, "216172782113784403": 230, "216172782113784537": 230, "216172782113784122": 230, "query14": 230, "country1": 230, "country2": 230, "subscor": 230, "award": [230, 487], "chile": 230, "case1": 230, "case2": 230, "case3": 230, "case4": 230, "216172782113784153": 230, "216172782113784100": 230, "216172782113783956": 230, "216172782113784673": 230, "216172782113784252": 230, "216172782113784263": 230, "216172782113784193": 230, "216172782113784242": 230, "216172782113784623": 230, "216172782113784498": 230, "216172782113784251": 230, "216172782113784538": 230, "216172782113784167": 230, "216172782113783864": 230, "216172782113784613": 230, "216172782113784116": 230, "faq": 231, "javasdk": [232, 481], "creation": [233, 314, 388], "transit": [233, 433, 461], "magnitud": [233, 246], "superior": [233, 245, 247, 251], "rich": [233, 244, 247, 249, 314, 316], "neg": [233, 234, 312, 316, 318, 320, 324, 329, 348, 426], "gsl": [233, 234, 244, 314, 315, 316, 317, 321, 328], "gat": [233, 249, 312, 320, 496], "deepwalk": [233, 312, 496], "trans": [233, 312, 496], "pyg": [233, 234, 237, 238, 249, 250, 251], "flexibli": [233, 244, 249, 251], "pytorch": [233, 234, 241, 244, 249, 318, 320], "onlin": [233, 246, 249, 250, 473, 477], "fed": [233, 245, 249], "dockerfil": [233, 319], "ek": 233, "aw": [233, 252, 488], "ack": 233, "failov": [233, 251], "concentr": [233, 251, 368], "secur": [234, 249, 250], "industri": [234, 244, 249, 251, 252], "feasibl": [234, 249], "preprocess": [234, 324], "uniformli": [234, 401, 402, 403, 411, 412, 413, 414, 415, 459], "lookup": [234, 249, 324, 464], "topolog": [234, 314], "nn": [234, 236, 239, 240, 241, 242, 245, 249, 255, 312, 324, 491, 496], "ego": [234, 249, 320, 465, 496], "dimension": [234, 240, 245, 249, 313, 315, 316], "conv": [234, 237, 249], "edge_index": [234, 237, 241, 242], "carri": 234, "predict": [234, 240, 244, 245, 249], "asynchron": 234, "tensor": [234, 237, 254, 255, 256, 295, 312, 316, 320, 322, 468, 470], "plaintext": 234, "clearli": [234, 249], "space": [234, 249, 313, 314, 318, 329, 363, 411, 412, 413, 414, 415], "dimens": [234, 236, 239, 240, 245, 249, 313, 411, 412, 413, 414, 456, 491], "batchgraph": 234, "mini": [234, 249], "loss": [234, 236, 239, 240, 241, 242, 245, 249, 324, 491, 496], "mind": 234, "classif": [234, 238, 245, 249, 253, 312, 313, 324], "trainer": [234, 236, 239, 240, 245, 312, 491, 496], "hk": 235, "rm": [235, 324], "4g": 235, "aarch64": 236, "processor": 236, "egographsag": [236, 239, 245, 491], "349": [236, 240, 245, 491], "venu": [236, 245], "confer": [236, 245, 316, 487], "www": [236, 239, 240, 245, 329, 383, 437, 446, 449, 477, 491], "tf": [236, 237, 239, 240, 245, 312, 313, 318, 319, 324, 491, 496], "disable_v2_behavior": [236, 239, 240, 245, 491], "importerror": [236, 239, 240, 245, 491], "load_ogbn_mag": [236, 239, 240, 243, 245, 491, 497], "egosagesuperviseddataload": [236, 240, 245, 491], "localtrain": [236, 239, 240, 245, 491], "node_typ": [236, 239, 240, 245, 312, 314, 315, 318, 321, 324, 328, 491, 496], "class_num": [236, 240, 245, 312, 491, 496], "features_num": [236, 239, 240, 245, 312, 491, 496], "hops_num": [236, 240, 245, 312, 491, 496], "nbrs_num": [236, 239, 240, 245, 491], "epoch": [236, 237, 239, 240, 241, 242, 245, 312, 317, 475, 491, 496], "hidden_dim": [236, 239, 240, 245, 312, 324, 491, 496], "256": [236, 240, 241, 242, 245, 252, 393, 453, 477, 491], "in_drop_r": [236, 240, 245, 491], "learning_r": [236, 239, 240, 245, 324, 491], "reset_default_tf_graph": [236, 240, 245, 491], "act_func": [236, 240, 245, 491], "relu": [236, 240, 245, 491], "dropout": [236, 239, 240, 245, 324, 491], "train_data": [236, 239, 240, 245, 491], "mask": [236, 240, 245, 328, 491], "train_embed": [236, 240, 245, 491], "src_ego": [236, 239, 240, 245, 491], "train_label": [236, 240, 245, 491], "reduce_mean": [236, 240, 245, 312, 324, 491, 496], "sparse_softmax_cross_entropy_with_logit": [236, 240, 245, 312, 324, 491, 496], "logit": [236, 240, 245, 324, 491], "adamoptim": [236, 239, 240, 245, 324, 491], "test_embed": [236, 240, 245, 491], "test_label": [236, 240, 245, 491], "test_indic": [236, 240, 245, 491], "argmax": [236, 240, 241, 242, 245, 491], "output_typ": [236, 240, 245, 299, 468, 491], "test_acc": [236, 240, 241, 242, 245, 491], "div": [236, 240, 245, 491], "reduce_sum": [236, 240, 245, 491], "cast": [236, 240, 243, 245, 324, 476, 491], "float32": [236, 240, 241, 242, 245, 315, 324, 491], "obgn": [236, 240], "mag": [236, 240, 245, 491], "paper_featur": [236, 245, 491], "feat_": [236, 239, 240, 241, 242, 245, 491], "128": [236, 239, 240, 241, 242, 245, 324, 491], "lg": [236, 239, 240, 245, 307, 471, 485, 491], "cite": [236, 239, 240, 245, 491], "gen_label": [236, 239, 240, 245, 307, 471, 491], "val": [236, 239, 240, 245, 312, 328, 471, 491, 496], "85": [236, 239, 240, 245, 252, 255, 471, 491], "seed": [237, 312, 320, 324, 383, 386, 387, 388, 389, 391, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 411, 412, 413, 414, 415, 418, 419, 420, 421, 424, 456, 459, 461], "sampler": [237, 239, 317, 320, 322], "perceptu": 237, "unsupervis": [237, 239, 253, 312, 318, 320, 321, 471], "mainstream": [237, 316, 317], "putback": 237, "outofrangeerror": [237, 317, 318, 324], "evolv": [237, 244, 477], "neighborsampl": [237, 316], "edge_weight": [237, 316, 318], "random_with_replac": 237, "topk": [237, 316, 318], "pad": [237, 316], "expand_factor": [237, 316, 321], "sparsenod": [237, 315, 316, 318], "sparseedg": [237, 315, 316, 318], "layer1": [237, 316], "layer2": [237, 316], "neighbor_sampl": [237, 316], "bui": [237, 244, 315, 316, 317, 318, 321, 324], "i2i": [237, 316, 318], "layer_nod": [237, 316], "int_attr": [237, 315, 316, 317, 321, 324], "layer_edg": [237, 316], "float_attr": [237, 315, 316, 317, 321, 324], "egograph": [237, 249, 312, 320, 496], "negativesampl": [237, 321], "node_weight": [237, 318, 321], "edge_sampl": [237, 317, 321], "negative_sampl": [237, 312, 321, 496], "neg_nod": [237, 321], "heterogen": [237, 240, 245, 247, 249, 313, 314, 315, 316, 318], "randomli": [237, 318, 383, 389, 393, 395, 404, 406, 411, 414, 419, 461], "outv": [237, 312, 316, 318, 324, 495, 496], "overs": 237, "citat": [238, 240, 241, 242, 245, 253, 324, 491], "revisit": [238, 239, 253], "ho2": 238, "with_dataset": [239, 241, 311, 471, 497], "k8s_service_typ": [239, 241, 311, 471, 491], "loadbalanc": [239, 471, 491], "k8s_image_pull_polici": [239, 241, 311, 471], "cell": [239, 457], "metainfo": 239, "obgn_mag": 239, "ogbn_mag_smal": [239, 243, 491, 497], "chose": [239, 240], "i_featur": [239, 240], "argpars": [239, 241], "tfg": 239, "egosageunsuperviseddataload": 239, "parse_arg": [239, 241], "argumentpars": [239, 241], "egosag": 239, "add_argu": [239, 241], "output_dim": [239, 312, 496], "neg_num": 239, "0001": 239, "agg_typ": 239, "drop_out": 239, "neg_sampl": 239, "temperatur": 239, "dim": [239, 241, 242, 411, 412, 413, 414], "src_emb": [239, 312, 496], "dst_emb": 239, "dst_ego": 239, "neg_dst_emb": 239, "neg_dst_ego": 239, "unsupervised_softmax_cross_entropy_loss": 239, "ogbn": [240, 241, 242, 245, 491], "academ": [240, 245, 491], "microsoft": [240, 245, 491], "institut": [240, 245, 491], "accomplish": [240, 245, 383], "word2vec": [240, 245, 491], "load_ogbn_arxiv": [241, 242], "num_server_nod": 241, "num_client_nod": 241, "ogbn_arxiv": [241, 242], "8gi": 241, "ifnotpres": [241, 471], "0a20240115": 241, "glt_graph": [241, 242], "graphlearn_torch": [241, 242], "node_featur": [241, 242], "node_label": [241, 242, 471], "edge_dir": [241, 242], "random_node_split": [241, 242], "num_val": [241, 242], "num_test": [241, 242], "num_client": [241, 242], "manifest_path": 241, "client_folder_path": 241, "kubeflow": [241, 323], "pytorchjob": 241, "torch": [241, 242], "pytorchreplicaspec": 241, "restartpolici": 241, "onfailur": 241, "imagepullpolici": 241, "node_rank": 241, "master_addr": [241, 242], "volumemount": 241, "medium": 241, "sizelimit": 241, "num_worker_replica": 241, "my_pod_nam": 241, "group_mast": 241, "valuefrom": 241, "fieldref": 241, "fieldpath": 241, "distributeddataparallel": 241, "torch_geometr": [241, 242], "glt": [241, 242], "gl_torch_graph": 241, "gltorchgraph": 241, "no_grad": [241, 242], "test_load": [241, 242], "dataset_nam": [241, 242], "eval": [241, 242, 468], "y_true": [241, 242], "devic": [241, 242, 252], "del": [241, 242, 326, 464], "y_pred": [241, 242], "keepdim": [241, 242], "run_client_proc": 241, "num_serv": [241, 242], "client_rank": [241, 242], "server_rank_list": 241, "training_pg_master_port": 241, "init_cli": [241, 242], "master_port": [241, 242], "server_client_master_port": [241, 242], "num_rpc_thread": [241, 242], "client_group_nam": 241, "k8s_glt_client": 241, "is_dynam": [241, 242], "current_ctx": 241, "get_context": 241, "init_process_group": 241, "gloo": 241, "world_siz": 241, "init_method": 241, "train_load": [241, 242], "distneighborload": [241, 242], "num_neighbor": [241, 242], "input_nod": [241, 242], "collect_featur": [241, 242], "to_devic": [241, 242], "worker_opt": [241, 242], "remotedistsamplingworkeropt": [241, 242], "server_rank": 241, "worker_devic": [241, 242], "worker_concurr": [241, 242], "buffer_s": [241, 242], "256mb": 241, "prefetch_s": [241, 242], "workload_typ": [241, 242], "in_channel": [241, 242], "hidden_channel": [241, 242], "num_lay": [241, 242], "out_channel": [241, 242], "device_id": 241, "adam": [241, 242], "lr": [241, 242], "001": 241, "arxiv": [241, 242, 329, 372, 387, 388, 389, 403, 456], "zero_grad": [241, 242], "log_softmax": [241, 242], "nll_loss": [241, 242], "backward": [241, 242, 249, 318, 415, 471], "03d": [241, 242], "04f": 241, "barrier": 241, "accuraci": [241, 242, 249], "4f": [241, 242], "shutdown": 241, "shutdown_cli": [241, 242], "__name__": [241, 324], "__main__": [241, 324], "supervis": [241, 245, 253, 313, 316, 324, 471, 491], "sage": 241, "9997": 241, "train_loader_master_port": 241, "9998": 241, "test_loader_master_port": 241, "9999": 241, "9001": 241, "9002": 241, "9003": 241, "9004": 241, "k8s_launch": 241, "ogb": 242, "nodeproppr": 242, "unsqueez": 242, "acc": 242, "512": [242, 318], "1gb": 242, "shut": 242, "trivial": [243, 251, 380], "bucket": [243, 471, 487], "_e": [243, 326, 473, 497], "ldbc_sampl": [243, 477, 495, 497], "person_0_0": [243, 477, 492, 497], "didn": [243, 252], "person_knows_person_0_0": [243, 477, 492, 497], "comment_0_0": [243, 492, 497], "person_likes_comment_0_0": [243, 497], "deal": [243, 247, 316], "unseen": [243, 249, 479], "person_likes_post_0_0": [243, 497], "post_0_0": [243, 497], "ndarrai": [243, 256, 271, 282, 315, 316, 318, 321, 326, 328, 464, 497], "apart": [243, 411], "comment_replyof_comment_0_0": [243, 492, 497], "col_0": [243, 497], "col_1": [243, 497], "coo": [243, 475, 497], "array_v": [243, 497], "col": [243, 497], "array_": [243, 497], "s3": [243, 326, 497], "hood": 243, "distributedli": [243, 314, 320, 322, 323, 324], "fsspec": [243, 497], "kwarg": [243, 255, 256, 263, 274, 286, 290, 291, 308, 311, 321, 326, 327, 328, 471], "ds1": [243, 497], "datafil": [243, 497], "ds2": [243, 497], "graphscope_bucket": [243, 497], "hangzhou": [243, 313, 497], "ds3": [243, 497], "9000": [243, 477, 497], "extra_conf": [243, 497], "conf1": [243, 497], "d34": [243, 497], "client_kwarg": [243, 497], "region_nam": [243, 497], "east": [243, 497], "ossf": [243, 497], "subclass": [243, 254, 464], "abstractfilesystem": [243, 497], "abstractbufferfil": 243, "_upload_chunk": [243, 497], "_initiate_upload": [243, 497], "_fetch_rang": [243, 497], "register_implement": [243, 497], "protocol_nam": [243, 497], "protocol_file_system": [243, 497], "direction": 243, "exce": [243, 422, 423], "super": [243, 255, 314, 318], "precis": [243, 249, 456], "modular": [244, 456], "rapidli": [244, 316], "seller": 244, "buyer": [244, 248], "fraudul": 244, "sell": 244, "suspici": 244, "fraud": [244, 251], "feed": [244, 307, 312, 315, 318, 324, 328, 471, 496], "webui": 244, "diversifi": 244, "ingest": [244, 477], "rapid": 244, "parti": [244, 444], "analyst": 244, "gaia": [244, 495], "resembl": [244, 456, 461, 463], "olap": 244, "gen": [244, 318], "dataflow": [244, 246], "arriv": 244, "financi": 244, "billion": [244, 247, 251], "preval": 244, "miniconda": 245, "scientif": 245, "field_of_studi": [245, 491], "subject": 245, "4307": [245, 491], "n1": 245, "n2": 245, "proven": 245, "2014": [245, 329, 491], "2020": [245, 491], "ret1": [245, 491], "k_core": [245, 255, 329, 465, 487, 491], "ret2": [245, 491], "kcore": [245, 491], "downstream": [245, 318], "train_sag": 245, "130": [245, 491], "conduit": 245, "icde2023": 246, "sigmod2017": [246, 487, 493], "gra": 246, "ph": 246, "arallel": 246, "ngine": 246, "opensourc": 246, "raph": 246, "nalysi": 246, "elat": 246, "ransact": 246, "loos": [246, 251, 473], "mysql": [246, 473], "nutshel": [246, 473], "exploit": [246, 473], "ahead": [246, 473], "wal": [246, 473], "etriev": 246, "terfac": 246, "portabl": [246, 476], "rust": [246, 476, 477], "handler": [246, 471], "chive": 246, "guardian": 246, "galaxi": 246, "steal": 246, "tackl": [246, 247], "imbal": 246, "nvlink": 246, "acut": 246, "asymmetr": 246, "holist": 246, "innov": 246, "speedup": 246, "cncf": 246, "sandbox": 246, "soon": [246, 250, 251, 252, 315], "amplifi": 246, "dissoci": 246, "ly": 246, "dag": [246, 255, 256, 274, 326, 464, 468, 471], "laptop": 246, "loop": [246, 329, 339, 352, 391, 393, 395, 397, 403, 411, 412, 413, 414, 415, 421, 424, 464, 465, 495], "correl": [246, 329], "subtask": 246, "earli": 246, "nsdi": [246, 493], "legaci": 246, "interchang": 246, "memoiz": 246, "vldb2021": 246, "artial": 246, "ncrement": 246, "transport": 247, "protein": [247, 405], "uncov": 247, "vari": [247, 313], "unless": [247, 316, 464], "discov": 247, "discoveri": [247, 249, 471, 477], "rough": 247, "accordingli": [247, 304], "snap": 247, "stanford": [247, 455], "cs224w": 247, "constitu": 247, "bellman": [247, 329], "ford": [247, 329], "wiki": [247, 255, 426, 430, 431, 432, 433, 435, 436, 437, 443, 444, 445, 446, 448, 449, 450, 451], "s_algorithm": 247, "towardsdatasci": 247, "9bd8951e7da": 247, "road": [247, 479], "logist": 247, "deliveri": 247, "media": 247, "nontrivi": [247, 436], "steep": 247, "sought": 247, "monei": [248, 251], "launder": [248, 251], "exact": [248, 393, 395, 491], "exclud": 248, "purchas": 248, "bolder": 248, "border": 248, "sens": [248, 456, 471], "worst": 248, "embrac": 248, "grasp": 248, "drug": 249, "likelihood": 249, "biologi": 249, "valuabl": 249, "bioinformat": 249, "chemic": 249, "promis": 249, "driven": [249, 456, 476], "carefulli": 249, "rewind": 249, "stack": 249, "convolut": [249, 320], "weigh": 249, "choic": [249, 476, 477], "huge": [249, 479], "gradient": 249, "recal": 249, "f1": [249, 326], "assess": [249, 324, 441], "irregular": 249, "unstructur": 249, "pool": 249, "hardwar": [249, 480], "undergo": 249, "perceiv": 249, "maxgraph": [250, 493], "2x": 250, "excel": 250, "elast": [250, 477], "encrypt": 250, "geminigraph": [251, 252], "plato": [251, 252], "empir": 251, "enjoi": 251, "janusgraph": 251, "nebula": 251, "dbm": 251, "relaunch": [251, 477], "recoveri": 251, "coars": 251, "grain": 251, "invest": 251, "trace": [251, 255], "dgl": 251, "nebular": 251, "movement": [251, 318], "grade": 252, "r6": 252, "8xlarg": 252, "alibabacloud": 252, "ec": 252, "xl": 252, "a038f97": 252, "170e7d3": 252, "21009d6": 252, "v4": 252, "mpich": 252, "fair": 252, "huge_pag": 252, "jemalloc": 252, "o3": 252, "stub": [252, 258, 260, 393, 421, 424], "determinist": [252, 257, 471, 477], "cdlp": [252, 255, 487], "load_direct": 252, "load_undirected_from_direct": 252, "reformat": 252, "mark": [252, 329], "datagen": 252, "9_0": 252, "fb": 252, "62": 252, "9_1": 252, "78": [252, 383, 457], "9_2": 252, "zf": 252, "88": [252, 396, 398], "60": [252, 329, 457, 477], "61": 252, "176": [252, 420], "graph500": 252, "71": [252, 329, 401, 405, 411], "79": [252, 396, 398], "friendster": 252, "97": 252, "39": [252, 314, 315, 317, 329, 457, 487, 489], "86": 252, "57": 252, "126": [252, 397], "98": 252, "83": 252, "66": 252, "1695": 252, "2742": 252, "3600": 252, "425": 252, "55": [252, 363], "lcc": 252, "521": 252, "51": [252, 457], "296": 252, "1859": 252, "201": [252, 460], "842": 252, "68": 252, "competitor": 252, "pagerank_loc": 252, "65": 252, "72": 252, "84": 252, "63": [252, 400, 402], "gunrock": 252, "0c9a96": 252, "grout": 252, "5ce160": 252, "v7": 252, "v10": 252, "gn6v": 252, "c8g1": 252, "16xlarg": 252, "8x": 252, "16gb": 252, "nvidia": 252, "v100": 252, "gb": 252, "soc": [252, 384, 385], "livejournal1": 252, "89": 252, "9345": 252, "215": [252, 453], "560": 252, "3029": 252, "129": [252, 419], "389": 252, "155": 252, "0549": 252, "sinaweibo": 252, "1649": 252, "647": 252, "orkut": 252, "105": [252, 384, 385], "121": 252, "193": 252, "658": 252, "3201": 252, "7677": 252, "137": [252, 391], "2139": 252, "319": 252, "261": 252, "69": [252, 451, 457], "235": 252, "567": 252, "283": 252, "073": 252, "6619": 252, "45": [252, 314, 315, 317, 393], "150": 252, "87299": 252, "162": 252, "60403": 252, "9676": 252, "141": 252, "347": 252, "7772": 252, "0118": 252, "306": 252, "8618": 252, "9134": 252, "467": 252, "60801": 252, "8666": 252, "3501": 252, "870": 252, "6451": 252, "198": 252, "829": 252, "5036": 252, "229": 252, "024": 252, "483": 252, "178": 252, "5593": 252, "807": 252, "367": 252, "6946": 252, "2339": 252, "jupyt": [253, 471], "notebook": [253, 471], "jupyterlab": 253, "playground": [253, 498], "bipartit": [253, 312, 314, 370, 418, 419, 420, 452, 496], "grapeengin": 254, "vineyardserv": 254, "grapeinst": 254, "graphscopeserv": 254, "inlin": 254, "dag_fil": 254, "dagfil": 254, "rundagfil": 254, "subscrib": 254, "charg": 254, "commspec": [254, 473, 476, 478], "comm_spec": [254, 473, 476, 478], "vineyard_socket": 254, "bl": 254, "dispatchresult": 254, "onrec": 254, "commanddetail": 254, "gsobject": 254, "objectmanag": 254, "appentri": 254, "icontextwrapp": 254, "ifragmentwrapp": 254, "projector": 254, "propertygraphutil": 254, "objecttyp": 254, "putobject": 254, "obj": 254, "removeobject": 254, "getobject": [254, 477, 478], "hasobject": 254, "analyticalserv": 254, "startserv": 254, "stopserv": 254, "engineconfig": 254, "tojsonstr": 254, "vineyard_rpc_endpoint": 254, "enable_java_sdk": 254, "setcommand": 254, "aggregatepolici": 254, "kpickfirst": 254, "kpickfirstnonempti": 254, "krequireconsist": 254, "kconcat": 254, "kpickfirstnonemptygraphdef": 254, "kmergegraphdef": 254, "worker_id": 254, "error_cod": 254, "set_error": 254, "has_large_data": 254, "set_graph_def": 254, "graphdefpb": 254, "graph_def": 254, "set_data": 254, "large_data": 254, "inarch": 254, "arc": 254, "aggregate_polici": 254, "fragmentwrapp": 254, "addcolumn": 254, "vdata_t": 254, "edata_t": 254, "arrowvertexmap": 254, "internaltyp": 254, "arrowprojectedfragmentbas": 254, "bareregist": 254, "internal_oid_t": 254, "property_graph_typ": 254, "eid_typ": 254, "vertexrang": [254, 257], "inner_vertices_t": 254, "outer_vertices_t": 254, "vertices_t": 254, "sub_vertices_t": 254, "nbr_t": 254, "arrow_projected_fragment_impl": 254, "compact_nbr_t": 254, "compactnbr": 254, "nbrunit": 254, "compact_adj_list_t": 254, "compactadjlist": 254, "const_adj_list_t": 254, "const_compact_adj_list_t": 254, "property_vertex_map_t": 254, "arrowprojectedvertexmap": 254, "label_id_typ": 254, "prop_id_typ": 254, "property_graph_t": 254, "eid_array_t": 254, "data_t": 254, "inner_vertex_array_t": 254, "outer_vertex_array_t": 254, "objectmeta": 254, "preparetorunapp": 254, "prepareconf": 254, "fnum": [254, 257], "vertex_prop_id": 254, "edge_prop_id": 254, "mirrorvertic": 254, "getid": 254, "getinternalid": 254, "getfragid": 254, "typedarrai": 254, "value_typ": 254, "gid2vertex": 254, "vertex2gid": 254, "getinnerverticesnum": 254, "getouterverticesnum": 254, "getverticesnum": 254, "getedgenum": [254, 478], "getinedgenum": [254, 478], "getoutedgenum": [254, 478], "getoutgoingedgenum": 254, "getincomingedgenum": 254, "gettotalverticesnum": 254, "isinnervertex": 254, "getoutervertex": 254, "getinnervertexid": 254, "getinnervertexinternalid": 254, "getoutervertexid": 254, "getoutervertexinternalid": 254, "gid2oid": 254, "oid2gid": 254, "innervertexgid2vertex": 254, "outervertexgid2vertex": 254, "getoutervertexgid": 254, "getinnervertexgid": 254, "compact_": 254, "enable_if": 254, "getincominginnervertexadjlist": 254, "getoutgoinginnervertexadjlist": 254, "getincomingoutervertexadjlist": 254, "getoutgoingoutervertexadjlist": 254, "src_fid": 254, "dst_fid": 254, "getlocaloutdegre": 254, "getlocalindegre": 254, "destlist": 254, "iedest": 254, "oedest": 254, "ioedest": 254, "getvertexmap": 254, "get_out_edges_ptr": 254, "get_in_edges_ptr": 254, "get_oe_offsets_begin_ptr": 254, "get_oe_offsets_end_ptr": 254, "get_ie_offsets_begin_ptr": 254, "get_ie_offsets_end_ptr": 254, "get_edata_array_accessor": 254, "get_vdata_array_accessor": 254, "get_arrow_frag": 254, "vertex_map_id": 254, "local_vertex_map": [254, 478], "getoid": 254, "getgid": 254, "offset2lid": 254, "getoffsetfromlid": 254, "getlidfromgid": 254, "getfidfromgid": 254, "oid_t_": 254, "vid_t_": 254, "arrowfragmentload": 254, "efil": [254, 478], "vfile": [254, 478], "graph_info": 254, "leaf": [254, 256, 301, 329, 374, 458], "table_vec_t": 254, "loadvertexedget": 254, "loadvertext": 254, "loadedget": 254, "loadfrag": 254, "loadfragmentasfragmentgroup": 254, "addlabelstofrag": 254, "frag_id": [254, 473, 478], "adddatatoexistedvlabel": 254, "adddatatoexistedelabel": 254, "addlabelstofragmentasfragmentgroup": 254, "extendlabeldata": 254, "extend_typ": 254, "initpartition": 254, "doxygenclass": 254, "arrowfragmentappend": 254, "doxygen": 254, "runner": [254, 487], "_build": 254, "appbas": 254, "defaultmessagemanag": 254, "need_split_edg": 254, "konlyout": 254, "propertyappbas": 254, "propertymessagemanag": 254, "propertyautoappbas": 254, "propertyautomessagemanag": 254, "app_t": 254, "defaultwork": 254, "parallelenginespec": 254, "pe_spec": 254, "defaultparallelenginespec": 254, "getcontext": 254, "ostream": 254, "parallelpropertywork": 254, "parallelpropertymessagemanag": 254, "propertyautowork": 254, "pointer": 254, "appfram": 254, "creatework": 254, "deletework": 254, "lib_path": 254, "worker_handl": 254, "queryarg": 254, "query_arg": [254, 299, 468], "context_kei": 254, "frag_wrapp": 254, "functiontyp": 254, "argsnum": 254, "argsunpack": 254, "datatyp": 254, "argtypeat": 254, "defaultpropertywork": 254, "ctx_t": 254, "ctxwrapperbuild": 254, "contextwrapp": 254, "vertexpropertycontext": [254, 487], "contextbas": 254, "labeledvertexdatacontext": 254, "contextdatatyp": 254, "icolumn": 254, "get_column": 254, "get_typed_column": 254, "vertex_properti": [254, 255, 257], "properties_map": 254, "vertexdatacontextwrapp": 254, "ivertexdatacontextwrapp": 254, "fragment_wrapp": 254, "unique_ptr": 254, "tondarrai": 254, "todatafram": 254, "tovineyardtensor": 254, "tovineyarddatafram": 254, "toarrowarrai": 254, "tensorcontext": [254, 256], "set_shap": 254, "tensor_t": 254, "tensorcontextwrapp": 254, "itensorcontextwrapp": 254, "cmake_extra_opt": 255, "asset": 255, "labeled_vertex_data": 255, "dynamic_vertex_data": 255, "labeled_vertex_properti": 255, "cpp_pregel": 255, "cython_pi": 255, "cython_pregel": 255, "appdagnod": [255, 290, 296], "__init__": [255, 312, 319, 326, 327, 328, 464, 465, 467, 471, 477, 496], "bytesio": [255, 263], "is_compat": 255, "graphdagnod": [255, 267, 281, 282, 298, 305, 307, 326, 327, 471], "invalidargumenterror": [255, 471], "scannererror": 255, "incorrect": 255, "signatur": [255, 318, 464], "full_jar_path": [255, 487], "java_app_class": [255, 487], "neccessari": 255, "resouc": 255, "__call__": 255, "qualifi": [255, 487], "app_asset": [255, 267, 273], "app_nod": 255, "__del__": 255, "unload": [255, 278, 296, 298], "attribute_assortativity_coeffici": [255, 487], "assort": 255, "ref": [255, 476], "joint": [255, 421, 422, 423, 424, 465], "newman": [255, 329, 393, 395, 456], "026126": 255, "2003": [255, 329, 386, 393, 404, 412], "numeric_assortativity_coeffici": [255, 487], "analog": 255, "k_": [255, 365, 429], "rac": 255, "s_i": 255, "sum_": [255, 329, 397], "w_": [255, 329, 397], "ij": [255, 329], "k_j": 255, "valueerror": [255, 311, 326, 329, 403, 460, 471], "barrat": 255, "barth\u00e9lemi": 255, "pastor": 255, "satorra": 255, "vespignani": 255, "pna": 255, "101": [255, 493], "3747": 255, "3752": 255, "2004": [255, 418], "average_shortest_path_length": [255, 329, 465, 487], "frac": [255, 329, 339, 397], "vertexdatacontextdagnod": [255, 256], "avg_clust": [255, 487], "degree_threshold": 255, "threshold": [255, 411, 412, 413, 414], "1e9": 255, "unweight": [255, 329], "foster": 255, "grassberg": 255, "paczuski": 255, "107": [255, 417], "10815": 255, "1e": [255, 324, 329, 383], "06": [255, 329], "html": [255, 329, 413, 416, 425, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 444, 446], "gv": 255, "hits_algorithm": 255, "vertexpropertycontextdagnod": [255, 256], "is_simple_path": [255, 487], "nonempti": 255, "biject": [255, 459], "smallest": [255, 416, 436, 446], "pairwis": 255, "k_shell": [255, 487], "katz_centrality_numpi": [255, 329], "auttenu": 255, "maximun": 255, "min_progress": 255, "progress_tri": 255, "progress": [255, 408], "met": 255, "blondel": 255, "et": [255, 461], "al": [255, 461], "stat": [255, 411, 413], "mech": 255, "10008": 255, "2008": [255, 383, 406], "sotera": 255, "lpa_u2i": [255, 487], "labeledvertexpropertycontextdagnod": [255, 256], "pagerank_nx": [255, 487], "max_it": [255, 329, 383], "tol": [255, 329, 383], "solver": 255, "voterank": [255, 487], "unsign": [255, 477], "basecontextdagnod": [256, 326], "bound_app": [256, 273], "contextdagnod": 256, "to_vineyard_tensor": [256, 470, 487], "to_vineyard_datafram": [256, 470, 487], "lazi": [256, 326, 471], "sg": 256, "resultdagnod": [256, 291], "r4": [256, 479], "62586": 256, "comparis": 256, "alphabet": [256, 470], "tensorcontextdagnod": 256, "quer": 256, "labeledvertexdatacontextdagnod": 256, "label_nam": [256, 470], "column_nam": [256, 470], "labeld": 256, "context_nod": 256, "result_schema": 256, "referenc": 256, "dynamicvertexdatacontext": 256, "dag_nod": 256, "get_str": 257, "get_doubl": 257, "edge_label_id": 257, "edge_label_nam": 257, "incoming_edg": 257, "register_aggreg": 257, "pregelaggregatortyp": 257, "aggr_typ": 257, "get_aggregated_valu": 257, "get_total_vertices_num": 257, "vertex_property_num": 257, "vertex_label_nam": 257, "vertex_label_id": 257, "edge_property_num": 257, "get_vertex_label_by_id": 257, "get_vertex_label_id_by_nam": 257, "get_edge_label_by_id": 257, "get_edge_label_id_by_nam": 257, "edge_properti": 257, "get_vertex_property_id_by_nam": 257, "vertex_property_nam": [257, 476], "get_vertex_property_by_id": 257, "vertex_property_id": 257, "get_edge_property_id_by_nam": 257, "edge_property_nam": 257, "get_edge_property_by_id": 257, "edge_property_id": 257, "kboolandaggreg": 257, "kbooloraggreg": 257, "kbooloverwriteaggreg": 257, "overwritten": 257, "kdoubleminaggreg": 257, "kdoublemaxaggreg": 257, "kdoublesumaggreg": 257, "kdoubleproductaggreg": 257, "kdoubleoverwriteaggreg": 257, "kint64minaggreg": 257, "kint64maxaggreg": 257, "kint64sumaggreg": 257, "kint64productaggreg": 257, "kint64overwriteaggreg": 257, "ktextappendaggreg": 257, "kalongoutgoingedgetooutervertex": 257, "kalongincomingedgetooutervertex": 257, "kalongedgetooutervertex": 257, "get_total_nodes_num": 257, "get_nodes_num": 257, "get_inner_nodes_num": 257, "get_outer_nodes_num": 257, "outer_nod": 257, "get_node_fid": 257, "is_inner_nod": 257, "is_outer_nod": 257, "get_nod": [257, 315], "get_outer_nod": 257, "get_node_id": 257, "get_incoming_edg": 257, "has_child": 257, "child": [257, 366, 458], "has_par": 257, "parent": [257, 259, 299, 304, 458], "get_indegre": 257, "get_outdegre": 257, "kmaxaggreg": 257, "ksumaggreg": 257, "kproductaggreg": 257, "koverwriteaggreg": 257, "subproject": 259, "scratch": 259, "never": [259, 464], "hopefulli": 259, "dmaven": 259, "antrun": 259, "jni": 259, "gae_java": 260, "graphscope_typ": 262, "graphscopetyp": 262, "myalgorithm": 262, "filenotfounderror": 263, "typeerror": [263, 299, 471], "arrowproperti": [264, 326], "subrang": 264, "loader_op": 265, "notimplementederror": 265, "run_app": [270, 271, 286, 294, 295], "copy_typ": 272, "session_id": [274, 278, 299, 326, 327, 464, 468], "graph_typ": [274, 464], "graphtyp": [274, 464, 473, 478], "view_typ": 275, "vertex_or_edge_label_list": 276, "graph_util": 276, "vertexlabel": 276, "op_typ": [278, 299, 468], "uiliti": 278, "interactive_queri": [283, 471], "gremlin_script": [283, 327], "request_opt": [283, 327], "interactivequerydagnod": 283, "modify_typ": [284, 285], "attr": [284, 285, 299, 318, 331, 332, 333, 464, 467], "type_pb2": [284, 285, 289], "nx_add_edg": 284, "nx_del_edg": 284, "nx_update_edg": 284, "nx_add_nod": 285, "nx_del_nod": 285, "nx_update_nod": 285, "fd": [286, 291, 487], "storage_opt": [286, 291], "write_opt": [286, 291], "adaptor": 286, "result_path": [286, 291], "vertex_collect": 287, "edge_collect": 287, "report_typ": 289, "variati": 289, "node_num": [289, 491, 495], "has_nod": [289, 464], "has_edg": [289, 464], "node_data": 289, "neighbors_by_nod": 289, "succs_by_nod": 289, "preds_by_nod": 289, "neighbors_by_loc": 289, "succs_by_loc": 289, "preds_by_loc": 289, "deg_by_nod": 289, "in_deg_by_nod": 289, "out_deg_by_nod": 289, "deg_by_loc": 289, "in_deg_by_loc": 289, "out_deg_by_loc": 289, "nodes_by_loc": 289, "loc": 289, "multigraph": [289, 329, 331, 339, 343, 352, 357, 358, 384, 385, 393, 395, 408, 409, 410, 464, 467], "multidigraph": [289, 331, 343, 352, 357, 358, 395, 403, 404, 462, 464], "large_attr": [299, 468], "types_pb2": [299, 464], "operationtyp": 299, "opdef": [299, 303], "attrvalu": [299, 326, 495], "largeattrvalu": 299, "op_def_pb2": 303, "incoming_data": [305, 326, 471], "as_default": [305, 471], "alia": [310, 312, 318, 464, 471, 496], "k8s_gs_imag": [311, 471, 489], "k8s_etcd_imag": 311, "k8s_image_pull_secret": [311, 471], "k8s_coordinator_cpu": [311, 471], "k8s_coordinator_mem": [311, 471], "k8s_vineyard_cpu": [311, 471], "k8s_mars_worker_cpu": [311, 471], "k8s_mars_worker_mem": [311, 471], "k8s_mars_scheduler_cpu": [311, 471], "k8s_mars_scheduler_mem": [311, 471], "with_mar": [311, 471], "k8s_waiting_for_delet": [311, 471], "dataset_download_retri": 311, "k8s_deploy_mod": [311, 471], "kv": 311, "cooper": [312, 326], "\u02bbegograph": 312, "\u02bbegotensor": 312, "sample_se": [312, 496], "positive_sampl": [312, 496], "receptive_fn": [312, 496], "egotensor": [312, 320, 496], "egoflow": [312, 320, 496], "cora": [312, 324, 496], "convers": [312, 313, 473], "node_t": [312, 313, 324, 496], "edge_table_with_self_loop": [312, 496], "train_tabl": [312, 496], "val_tabl": [312, 496], "test_tabl": [312, 496], "dataset_fold": [312, 496], "decod": [312, 313, 314, 324, 496], "attr_typ": [312, 313, 314, 324, 496], "1433": [312, 324, 496], "attr_delimit": [312, 313, 314, 496], "learningbasedmodel": [312, 496], "categorical_attrs_desc": [312, 496], "_sample_se": [312, 496], "_positive_sampl": [312, 496], "_receptive_fn": [312, 496], "ego_flow": [312, 496], "src_ego_spec": [312, 496], "pos_src_ego_tensor": [312, 496], "identityencod": [312, 496], "widendeepencod": [312, 496], "feature_encod": [312, 496], "gcnconv": [312, 496], "sparseegographencod": [312, 496], "_encod": [312, 496], "conv_lay": [312, 496], "_supervised_loss": [312, 496], "full_graph_mod": [312, 496], "localtftrain": [312, 496], "model_fn": [312, 324, 496], "load_graph": [312, 496], "server_id": [312, 496], "server_count": [312, 314, 324, 496], "tracker": [312, 324, 496], "bought": 313, "saturdai": 313, "morn": 313, "bigint": 313, "shanghai": 313, "localfilesystem": 313, "pai": [313, 318, 319], "tab": 313, "s2": [313, 429], "215340": 313, "933091": 313, "grei": 313, "362519": 313, "097545": 313, "chapter": [313, 314, 316, 410, 447], "dscript": 313, "dentryfil": 313, "dtabl": 313, "prj": 313, "define_str": 313, "node_sourc": 313, "edge_sourc": 313, "hash": [313, 326], "bucket_s": 313, "greatli": [313, 314, 476], "your_attr_typ": 313, "you_delimit": 313, "scr_id": 313, "10001": [313, 314, 315, 317], "feature1": 313, "10002": [313, 314, 315, 317], "feature2": 313, "10003": [313, 314, 315, 317], "feature3": 313, "124": 313, "\u02bbitem_node_decod": 313, "\u02bbuser_node_decod": 313, "\u02bbedge_decod": 313, "item_node_decod": 313, "user_node_decod": 313, "edge_decod": [313, 324], "graph_object": 313, "commod": 314, "swing": [314, 315], "30001": [314, 315, 317], "30002": [314, 315, 317], "30003": [314, 315, 317], "table_1": 314, "table_2": 314, "dest": 314, "10004": [314, 315], "20001": [314, 315, 317], "20003": [314, 315, 317], "20004": [314, 315, 317], "46": [314, 315, 317, 329, 451], "ui_decod": 314, "uv_decod": 314, "table_3": 314, "table_4": 314, "click_v": 314, "task_index": [314, 324], "task_count": 314, "atyp": 314, "job_nam": [314, 324], "worker_host": 314, "necessarili": [314, 426], "serious": 314, "decreas": [314, 393, 395], "speak": 314, "client_count": [314, 324], "wait_for_clos": [314, 324], "matter": [314, 470], "get_topologi": 315, "dst_type": 315, "figure1": 315, "topo": 315, "print_al": 315, "string_attr": 315, "src_node": 315, "dst_node": 315, "dense_shap": 315, "__next__": 315, "table1": 315, "u_nod": 315, "table2": 315, "table3": 315, "click_edg": 315, "table4": 315, "conduc": 316, "recept": [316, 320], "ai": 316, "meta_path": 316, "layer_id": 316, "famili": [316, 329, 367, 425, 453], "random_without_replac": 316, "ueri": 316, "default_neighbor_id": 316, "set_default_neighbor_id": [316, 325], "xx": 316, "set_padding_mod": 316, "circular": [316, 318, 368], "throw": 317, "nodesampl": 317, "node_sampl": 317, "by_ord": 317, "node_from": [317, 328], "edge_src": [317, 328], "edge_dst": [317, 328], "edgesampl": 317, "matur": 318, "dl": 318, "sheer": 318, "sink": 318, "generatortyp": [318, 328], "won": [318, 479], "cursor": 318, "ingo": 318, "query\u5bf9\u8c61": 318, "outneg": [318, 321], "inneg": [318, 321, 324], "candid": [318, 321], "u2i": 318, "ouv": 318, "func": 318, "edeg": 318, "src_1hop": 318, "dst_1hop": 318, "neg_i": 318, "neg_i_1hop": 318, "params_list": 318, "arrang": 318, "anonym": [318, 456], "src_attr": 318, "neg_attr": 318, "encode_fn": [318, 324], "src_atr": 318, "outnegv": 318, "gen1": 318, "gen2": 318, "circumst": 318, "foewa": 318, "from_gener": [318, 324], "make_one_shot_iter": [318, 324], "get_next": [318, 324], "zhangjiak": 319, "cp27": 319, "cp27mu": 319, "linux_x86_64": 319, "autoconf": 319, "automak": 319, "libtool": 319, "submodul": [319, 322, 476], "your_wheel_nam": [319, 322], "test_cpp_ut": 319, "test_python_ut": 319, "fastgcn": [320, 496], "graphsaint": 320, "amd": 320, "object_typ": 321, "oprequest": 322, "req": 322, "oprespons": 322, "params_": 322, "tensors_": 322, "redirect": [322, 402], "rewrit": 322, "till": [322, 471], "happen": [322, 476, 479], "stitch": 322, "myoper": 322, "register_oper": 322, "opnam": 322, "randomsampl": 322, "xxxsampler": 322, "reader": 323, "litestr": 323, "getfiles": 323, "getrecordcount": 323, "register_file_system": 323, "myfilesystem": 323, "registr": 323, "ppi": 324, "train_supervis": 324, "gen_test_data": 324, "getopt": 324, "argv": 324, "cur_path": 324, "elif": 324, "102": [324, 460], "dirnam": 324, "rf": 324, "\u4f60\u9700\u8981\u628agen_test_data": 324, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 324, "fi": 324, "sleep": 324, "case_bas": 324, "genetic_algorithm": 324, "neural_network": 324, "probabilistic_method": 324, "reinforcement_learn": 324, "rule_learn": 324, "bag": 324, "1033": 324, "103482": 324, "103515": 324, "31336": 324, "1061127": 324, "05882353": 324, "1106406": 324, "n_featur": 324, "node_decod": 324, "n_class": 324, "140": [324, 387], "n_hop": 324, "n_epoch": 324, "tripl": 324, "graph_object_cn": 324, "sample_gen": 324, "input_fn": 324, "sample_input_fn": 324, "float64": 324, "tensorshap": 324, "layer_featur": 324, "aggregate_fn": 324, "self_vec": 324, "neigh_vec": 324, "raw_feat_layer_index": 324, "layer_index": 324, "variable_scop": 324, "_layer": 324, "auto_reus": 324, "neigh_weight": 324, "get_vari": 324, "self_weight": 324, "output_shap": 324, "get_shap": 324, "neigh_mean": 324, "from_neigh": 324, "matmul": 324, "from_self": 324, "add_n": 324, "leaky_relu": 324, "depth_to_encod": 324, "h_self_vec": 324, "h_neighbor_vec": 324, "features_column": 324, "feature_column": 324, "numeric_column": 324, "loss_fn": 324, "train_op": 324, "global_step": 324, "get_global_step": 324, "estimatorspec": 324, "modekei": 324, "set_xxx": 325, "set_yyi": 325, "other_model": 325, "fill": [325, 365, 376, 386, 420], "nbr_id": 325, "set_default_int_attribut": 325, "set_default_float_attribut": 325, "set_default_string_attribut": 325, "set_inter_threadnum": 325, "intra": [325, 383, 386], "set_intra_threadnum": 325, "16mb": 325, "reset": 325, "enlarg": 325, "set_rpc_message_max_s": 325, "objectnam": 326, "degener": 326, "unspecifi": [326, 341], "consolidate_column": 326, "result_column": 326, "consolid": [326, 478, 485], "weight0": 326, "weight1": 326, "graph_nod": 326, "detach": 326, "varaibl": 326, "lexic": 326, "classmethod": 326, "graphar_store_in_loc": [326, 475], "save_to": [326, 475], "graphar_graph_nam": [326, 475], "graphar_file_typ": [326, 475], "parquet": [326, 475], "orc": [326, 475], "graphar_vertex_chunk_s": [326, 475], "graphar_edge_chunk_s": [326, 475], "graphschema": [326, 464], "schema_path": 326, "currrent": 326, "object_id": [326, 327, 328], "filetyp": 326, "ordinari": 326, "graph_build": 326, "deprec": [326, 344, 442], "group_id": 326, "member_s": 326, "leader_student_id": 326, "student": 326, "member_student_id": 326, "group_for_teacher_stud": 326, "group_nam": 326, "establish_d": 326, "teacher_in_charge_id": 326, "teacher": 326, "lesson_num": 326, "avg_scor": 326, "student_id": 326, "salari": 326, "teacher_id": 326, "both_in_out": 326, "unambigu": 326, "orign": 326, "interactivequeri": [327, 469, 471, 495], "frontend_gremlin_endpoint": 327, "frontend_cypher_endpoint": 327, "gremlin_url": 327, "lifetim": 327, "traversal_sourc": 327, "graphtraversalsourc": 327, "cypher_driv": 327, "cypher_url": 327, "gremlin_cli": 327, "runtimeerror": [327, 471], "modern_graph_data_dir": 327, "tolist": [327, 477], "dtype": 328, "pywrap": 328, "nodefrom": 328, "get_handl": 328, "worker_count": 328, "base64": 328, "nstart": 329, "poweriterationfailedconverg": 329, "langvil": 329, "meyer": 329, "survei": [329, 417], "cites": 329, "ist": 329, "psu": 329, "edu": 329, "713792": 329, "jon": 329, "kleinberg": 329, "authorit": 329, "journal": [329, 398, 406, 423, 454, 457, 461], "acm": [329, 404, 455, 487], "604": 329, "1999": [329, 384, 385], "doi": [329, 399, 406, 441], "1145": 329, "324133": 329, "324140": 329, "cornel": 329, "kleinber": 329, "pdf": [329, 411, 413, 414], "load_centr": 329, "in_degree_centr": [329, 465], "networkxnotimpl": 329, "out_degree_centr": [329, 465], "equat": 329, "ax": 329, "eigenvalu": [329, 409], "virtu": 329, "perron": 329, "frobeniu": 329, "theorem": [329, 408, 420], "0e": 329, "strength": 329, "2f": 329, "networkxpointlessconcept": [329, 459], "networkxerror": [329, 335, 342, 344, 348, 349, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 399, 405, 408, 409, 410, 421, 424, 456, 464, 467], "eigenvector_centrality_numpi": 329, "discern": 329, "phillip": 329, "bonacich": 329, "american": 329, "sociologi": 329, "1170": 329, "1182": 329, "1986": [329, 453], "leonidzhukov": 329, "net": [329, 383], "hse": 329, "socialnetwork": 329, "oxford": [329, 362, 363, 412, 456], "press": [329, 362, 363, 410, 452, 455, 456], "usa": [329, 416, 417, 463], "pp": [329, 393, 396, 397, 398, 411, 417, 418, 455, 461], "169": 329, "x_i": 329, "a_": 329, "x_j": 329, "lambda_": 329, "distant": 329, "penal": 329, "strictli": [329, 383], "invers": [329, 408], "phi": 329, "sqrt": [329, 409], "adjacency_spectrum": 329, "720": 329, "leo": 329, "sociometr": 329, "psychometrika": 329, "1953": 329, "springer": [329, 418], "1007": [329, 363, 399], "bf02289026": 329, "has_path": [329, 465], "djikstra": 329, "floyd": 329, "warshal": 329, "bfs_edg": [329, 465], "depth_limit": 329, "core_numb": 329, "vladimir": 329, "batagelj": 329, "matjaz": 329, "zaversnik": 329, "ab": [329, 387, 388, 389, 403, 411, 415, 456, 458], "0310049": 329, "c_u": 329, "deg": [329, 383, 397, 464], "geometr": [329, 451, 465], "vw": 329, "hat": 329, "uv": [329, 397], "uw": 329, "tot": 329, "2deg": 329, "leftrightarrow": 329, "complete_graph": [329, 335, 464], "saram\u00e4ki": 329, "kivel\u00e4": 329, "onnela": 329, "kaski": 329, "kert\u00e9sz": 329, "027105": 329, "2007": [329, 411, 457], "jponnela": 329, "web_docu": 329, "a9": 329, "intens": 329, "coher": 329, "motif": 329, "065103": 329, "2005": [329, 405, 411], "sign": 329, "costantini": 329, "perugini": 329, "plo": 329, "e88669": 329, "fagiolo": 329, "76": 329, "026107": 329, "average_clust": [329, 465], "count_zero": 329, "c_v": 329, "nonzero": [329, 393, 410], "marcu": 329, "kaiser": 329, "0802": 329, "2512": 329, "g_to_add_to": [331, 332, 333], "nodes_for_cycl": 331, "add_path": [331, 333, 464], "add_star": [331, 332], "nodes_for_path": 332, "add_cycl": [332, 333], "nodes_for_star": 333, "star": [333, 370, 379], "middl": 333, "cnbor": 335, "with_data": 336, "empty_graph": [336, 377], "frequenc": 338, "width": 338, "2m": [339, 417], "prevent": 342, "frozen": [342, 347], "unfreez": 342, "frozen_graph": 342, "unfrozen_graph": 342, "is_frozen": 342, "neighbour": 344, "freez": [347, 465], "nodelist": [352, 391], "selfloop_edg": [352, 357, 393, 395], "number_of_selfloop": [352, 358], "selfloop": [357, 358, 391, 397], "nloop": 357, "nodes_with_selfloop": [357, 358], "datadict": [358, 464], "datavalu": 358, "attrnam": [358, 495], "edgeit": 358, "ekei": 358, "graph_atlas_g": 362, "linearli": [362, 378], "ronald": [362, 363, 453], "robin": [362, 363], "wilson": [362, 363], "1998": [362, 363], "111223": 363, "112222": 363, "automorph": [363, 436], "graph_atla": 363, "expens": 363, "popul": [363, 364, 366, 367, 369, 371, 374, 376, 378, 379, 382, 393, 395, 396, 398, 400, 401, 402, 408, 409, 410, 416, 417, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 459, 466], "book": 363, "violat": 363, "lexicograph": 363, "nondecreas": 363, "001111": 363, "000112": 363, "1008": 363, "3333444": 363, "3333336": 363, "1012": 363, "1213": 363, "1244555": 363, "1244456": 363, "perfectli": 364, "ari": [364, 374], "height": 364, "children": [364, 374, 458], "barbel": [365, 376], "bell": 365, "p_": [365, 397, 411], "mere": [365, 376], "aldou": [365, 376], "jim": [365, 376], "binomi": 366, "leftmost": 366, "ci_n": 367, "x_1": 367, "x_2": 367, "x_m": 367, "mod": [367, 381, 410, 429], "subfamili": 367, "ladder": [368, 375], "cl_n": 368, "k_n": 369, "is_direct": [369, 464], "subset_s": 370, "multipartit": [370, 381], "tripartit": 370, "bc": 370, "complete_bipartite_graph": 370, "c_n": 371, "hierarch": 372, "dorogovtsev": 372, "goltsev": 372, "mend": 372, "mat": 372, "0112143": 372, "kw": [373, 471], "unknown": [373, 476], "abc": 373, "rightmost": 374, "jame": 374, "andrew": 374, "storer": 374, "birkhaus": 374, "boston": 374, "2001": [374, 387, 395, 400, 402, 410, 419, 477], "225": [374, 464], "lollipop": 376, "k_m": 376, "p_n": [376, 378], "etext": 376, "turan": 381, "disjoint": [381, 392, 430], "2r": 381, "tau1": 383, "tau2": 383, "mu": 383, "average_degre": 383, "min_degre": 383, "max_degre": 383, "min_commun": 383, "max_commun": 383, "lfr": 383, "mathrm": 383, "expon": 383, "reassign": [383, 421], "affili": [383, 491], "random_st": [383, 386, 387, 388, 389, 391, 393, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 411, 412, 413, 414, 415, 418, 419, 420, 424, 456, 459, 461], "exceededmaxiter": 383, "250": 383, "frozenset": [383, 466], "rewir": [383, 385, 389, 421, 424], "wire": 383, "robust": 383, "somewhat": 383, "narrow": 383, "andrea": 383, "lancichinetti": 383, "santo": [383, 387, 388, 389], "fortunato": [383, 387, 388, 389], "filippo": 383, "radicchi": 383, "phy": [383, 395, 400, 401, 402, 405], "rev": [383, 395, 400, 401, 402, 405], "046110": 383, "santofortunato": 383, "caveman": [384, 385, 389], "unclear": [384, 385], "connected_caveman_graph": [384, 390], "watt": [384, 385, 395], "phenomenon": [384, 385], "amer": [384, 385], "493": [384, 385], "527": [384, 385], "caveman_graph": 385, "p_in": [386, 387, 388], "p_out": [386, 387, 388], "gaussian": [386, 412, 413, 414], "drawn": [386, 414], "varianc": 386, "probabilti": [386, 389], "random_partition_graph": [386, 391], "ulrik": 386, "brand": 386, "marco": 386, "gaertler": 386, "dorothea": 386, "wagner": 386, "11th": 386, "europ": 386, "symp": 386, "plant": [387, 388], "random_partition_model": 387, "condon": 387, "karp": 387, "algor": 387, "116": 387, "486": [387, 388, 389], "174": [387, 388, 389], "0906": [387, 388, 389], "0612": [387, 388, 389], "relax": 389, "februari": 389, "num_cliqu": 390, "clique_s": 390, "ring": 390, "stochast": [391, 465], "densiti": [391, 393, 411, 413], "symmetr": [391, 410, 433, 437, 443, 445, 456], "300": [391, 460], "prob": 391, "450": 391, "quotient_graph": 391, "relabel": 391, "245": 391, "348": 391, "405": 391, "051": 391, "022": 391, "planted_partition_graph": 391, "gaussian_random_partition_graph": 391, "gnp_random_graph": [391, 418, 419, 420], "holland": 391, "laskei": 391, "leinhardt": 391, "blockmodel": 391, "109": 391, "1983": 391, "windmil": 392, "contract": 392, "wd": 392, "deg_sequ": [393, 394, 395, 396, 398], "pseudograph": [393, 395], "nonneg": [393, 395], "is_graph": [393, 399], "graphic": [393, 395, 398, 399], "realiz": [393, 395, 398, 421, 422, 423, 424, 451, 476], "tend": 393, "poisson": 393, "constant": [393, 495], "siam": [393, 398, 404], "167": 393, "random_sequ": 393, "random_powerlaw_tree_sequ": 393, "5000": [393, 477], "actual_degre": 393, "in_degree_sequ": 395, "out_degree_sequ": 395, "directed_random": 395, "configuration_model": [395, 396, 399], "finit": [395, 397, 410], "strogatz": 395, "026118": 395, "din": 395, "dout": 395, "in_deg_sequ": 396, "out_deg_sequ": 396, "kleitman": [396, 398], "valenc": [396, 398], "1973": [396, 398], "w_0": 397, "w_1": 397, "ldot": 397, "w_u": [397, 411, 414], "w_v": [397, 411, 414], "sum_k": 397, "w_k": 397, "z": [397, 410, 411, 415], "mathcal": 397, "ne": 397, "uu": 397, "fan": [397, 411, 487], "chung": [397, 411], "lu": [397, 487], "ann": 397, "combinator": [397, 457], "145": 397, "2002": 397, "joel": 397, "miller": 397, "aric": [397, 411], "hagberg": [397, 411], "waw": [397, 411], "alan": 397, "friez": 397, "paul": 397, "horn": 397, "pawe\u0142": 397, "pra\u0142at": 397, "lnc": 397, "6732": 397, "115": 397, "havel": 398, "hakimi": 398, "networkxexcept": 398, "resort": 398, "496": 398, "506": 398, "1962": [398, 416, 417, 463], "d_m": 399, "uniform": [399, 411, 420], "networkxunfeas": 399, "moshen": 399, "bayati": 399, "jeong": 399, "han": 399, "kim": 399, "amin": 399, "saberi": 399, "algorithmica": 399, "58": 399, "860": 399, "910": 399, "s00453": 399, "009": 399, "9340": 399, "gn": [400, 463], "a_k": 400, "krapivski": [400, 401, 402, 405], "redner": [400, 401, 402], "066123": [400, 402], "gnc": 401, "growth": [401, 461], "036118": 401, "2005k": 401, "gnr": 402, "probabilii": 402, "self_loop": 403, "preferenti": 403, "proport": 403, "peterson": [403, 446], "nichola": 403, "bori": 403, "pittel": 403, "preprint": 403, "1311": 403, "5961": 403, "2013": [403, 423], "gamma": 404, "delta_in": 404, "delta_out": 404, "bia": 404, "bollob\u00e1": 404, "borg": 404, "chay": 404, "riordan": 404, "fourteenth": 404, "annual": 404, "symposium": 404, "132": [404, 419], "139": 404, "diverg": [405, 465], "retent": 405, "disallow": 405, "ispolatov": 405, "yuryev": 405, "061911": 405, "inclus": 406, "knudsen": 406, "michael": 406, "carsten": 406, "wiuf": 406, "markov": 406, "chain": 406, "1155": 406, "190836": 406, "radiu": [407, 412, 413, 414], "chordal": 408, "chord": [408, 422], "mildli": 408, "lubotzki": 408, "invari": 408, "birkh\u00e4us": 408, "verlag": 408, "basel": 408, "1994": 408, "marguli": 409, "gabber": 409, "galil": 409, "palei": 410, "pz": 410, "f_q": 410, "odd": 410, "bolloba": 410, "cambridg": 410, "theta": [411, 414], "po": [411, 412, 413, 414, 415], "p_dist": [411, 413], "geograph": [411, 414], "rectangular": [411, 415], "ge": [411, 415], "prone": 411, "le": [411, 415, 455], "euclidean": [411, 412, 413, 414, 415], "taxicab": [411, 415], "expovari": [411, 414], "masuda": 411, "miwa": 411, "konno": 411, "036108": 411, "milan": 411, "bradonji\u0107": 411, "allon": 411, "percu": 411, "giant": 411, "antoni": 411, "bonato": 411, "209": 411, "216": 411, "cube": [412, 413, 414, 432, 449], "kdtree": [412, 413, 414], "minkowski": [412, 413, 414], "infin": [412, 413, 414], "erd\u0151": [412, 413, 414], "r\u00e9nyi": [412, 413, 414], "twenti": 412, "2d": [412, 413, 414, 464, 467], "deviat": [412, 413, 414], "gauss": [412, 413, 414], "penros": [412, 413], "mathew": [412, 413], "soft": 413, "exp": [413, 415], "annal": 413, "2016": 413, "986": 413, "1028": 413, "summat": 414, "nodethr": 414, "cole": 414, "maclean": 414, "blog": 414, "thesi": [414, 420], "waxman": 415, "x_min": 415, "y_min": 415, "x_max": 415, "y_max": 415, "Their": 415, "incompat": [415, 476], "rout": 415, "multipoint": 415, "ieee": [415, 423, 424, 456, 461], "1988": 415, "1617": 415, "1622": 415, "harari": [416, 417, 465], "h_": [416, 417], "ceil": 416, "kn": 416, "hnm_harary_graph": 416, "weisstein": 416, "eric": 416, "mathworld": [416, 425, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 444], "wolfram": [416, 425, 429, 431, 433, 434, 435, 436, 437, 438, 439, 440, 444], "hararygraph": 416, "nat": [416, 417, 463], "acad": [416, 417, 463], "sci": [416, 417, 463], "1142": [416, 417, 463], "1146": [416, 417, 463], "floor": 417, "hkn_harary_graph": 417, "boesch": 417, "satyanarayana": 417, "suffel": 417, "reliabl": 417, "synthesi": 417, "99": [417, 495], "2009": [417, 457], "uniform_random_intersection_graph": [418, 419], "nikoletsea": 418, "raptopoulo": 418, "spiraki": 418, "icalp": 418, "\u0131az": 418, "karhum": 418, "aki": 418, "lepist": 418, "sannella": 418, "vol": [418, 461], "3142": 418, "lectur": 418, "1029": 418, "1040": 418, "godehardt": 419, "jaworski": 419, "electron": [419, 457], "singer": 420, "cohen": 420, "1995": 420, "phd": 420, "john": [420, 437], "hopkin": 420, "scheinerman": 420, "evolut": 420, "2000": 420, "156": 420, "nkk": [421, 422], "degree_seq": 421, "n_edges_add": 421, "li": [421, 424], "unsatur": 421, "proof": 421, "tillman": [421, 422, 424], "markopoul": [421, 422, 423, 424, 456], "butt": [421, 422, 456], "gjoka": [421, 422, 423, 424], "2k": [421, 422], "kdd": [421, 422], "seconnd": 422, "joint_degre": [423, 424], "diagon": [423, 439], "joint_degree_graph": 423, "kurant": 423, "5k": 423, "infocom": [423, 424, 456], "stanton": 423, "pinar": 423, "prescrib": 423, "experiment": [423, 471], "n_th": 425, "m_1": 425, "singleton": [425, 464], "m_2": 425, "m_i": 425, "mycielskian": 425, "m_": 425, "mycielskigraph": 425, "p_2": 425, "chromat": [426, 457], "2n": 426, "bigcup": 426, "nonisomporph": 427, "adjanc": 427, "matric": [427, 456], "nonisomorph": 428, "shift_list": 429, "cubic": [429, 432, 433, 436, 437, 443, 445, 446, 451], "lcf": [429, 431, 433, 435, 437, 443, 445], "lederberg": 429, "coxet": 429, "frucht": [429, 436], "hamiltonian": [429, 431, 436, 437, 440, 445, 451], "symmetri": [429, 436], "dodecahedral_graph": 429, "desargues_graph": 429, "heawood_graph": 429, "pappus_graph": 429, "s1": 429, "sk": 429, "v_current": 429, "shiftlist": 429, "heawood": [429, 437], "lcfnotat": 429, "bull": 430, "planar": [430, 433, 434, 436], "pendant": 430, "leg": 430, "chv\u00e1tal": 431, "370": 431, "chv": 431, "c3": [431, 443, 444], "a1tal_graph": 431, "chvatalgraph": 431, "platon": [432, 435, 440, 444, 448, 450], "hypercub": 432, "aris": 432, "desargu": 433, "desarguesgraph": 433, "kite": [434, 441], "diamondgraph": 434, "dodecahedr": 435, "dodecahedron": 435, "regular_dodecahedron": 435, "dodecahedralgraph": 435, "fruchtgraph": 436, "cage": 437, "perci": 437, "nonplanar": 437, "girth": 437, "heawoodgraph": 437, "win": [437, 446], "tue": [437, 446], "nl": [437, 446], "aeb": [437, 446], "housegraph": [438, 439], "pentatop": 439, "icosahedr": 440, "icosahedron": 440, "icosahedralgraph": 440, "krackhardt": 441, "andr": 441, "beverlei": 441, "carol": 441, "dian": 441, "fernando": 441, "garth": 441, "heather": 441, "ik": 441, "jane": 441, "polit": 441, "landscap": 441, "cognit": 441, "quarterli": 441, "342": [441, 464], "369": 441, "2307": 441, "2393394": 441, "jstor": 441, "june": 441, "1990": 441, "graph_descript": 442, "ltype": 442, "adjacencylist": 442, "from_dict_of_list": 442, "from_edgelist": 442, "xlist": 442, "c_4": 442, "w2": 442, "vk": 442, "wk": 442, "vj": 442, "wj": 442, "moebiu": 443, "kantor": 443, "m\u00f6biu": 443, "petersen": [443, 446], "b6biu": 443, "93kantor_graph": 443, "octahedr": 444, "octahedron": 444, "shake": 444, "hi": [444, 454, 463], "her": 444, "partner": 444, "handshak": 444, "cocktail": 444, "octahedralgraph": 444, "tur": 444, "a1n_graph": 444, "special_cas": 444, "pappu": 445, "juliu": 446, "counterexampl": [446, 451], "bridgeless": 446, "colour": 446, "drg": 446, "maze": 447, "sedgewick": 447, "3rd": 447, "tetrahedr": 448, "k4": 448, "w4": 448, "grpah": 448, "tetrahedron": [448, 450, 451], "archimedean": [449, 450], "octagon": 449, "triangular": 449, "truncated_cub": 449, "coolmath": 449, "polyhedra": 449, "hexagon": 450, "equilater": 450, "truncated_tetrahedron": 450, "tutt": 451, "polyhedr": 451, "tait": 451, "conjectur": 451, "polyhedron": 451, "davi": 452, "southern": 452, "women": 452, "gardner": 452, "1941": 452, "south": 452, "chicago": 452, "il": 452, "florentin": 453, "breiger": 453, "philippa": 453, "pattison": 453, "cumul": 453, "dualiti": 453, "septemb": 453, "zachari": 454, "karat": 454, "club": 454, "mr": [454, 457], "offic": 454, "wayn": 454, "fission": 454, "anthropolog": 454, "452": 454, "473": 454, "1977": 454, "coappear": 455, "novel": 455, "miser": 455, "knuth": 455, "1993": 455, "graphbas": 455, "combinatori": 455, "york": 455, "spectral": [456, 465], "forg": 456, "sgf": 456, "eigenstructur": 456, "synthes": 456, "percentag": 456, "telecommun": 456, "bernoulli": 456, "baldesi": 456, "1801": 456, "01715": 456, "karate_club_graph": 456, "sud": 457, "81": 457, "810": 457, "herzberg": 457, "murti": 457, "polynomi": 457, "am": 457, "708": 457, "717": 457, "sander": 457, "torsten": 457, "7pp": 457, "2529816": 457, "encyclopedia": 457, "dec": 457, "nil": 458, "arboresc": 458, "downward": 458, "synthet": 458, "trie": 458, "recov": [458, 471], "pr\u00fcfer": 459, "from_prufer_sequ": 459, "forest_str": 459, "triad_nam": 460, "003": 460, "012": 460, "021d": 460, "021u": 460, "021c": 460, "111d": 460, "111u": 460, "030t": 460, "030c": 460, "120d": 460, "120u": 460, "120c": 460, "triadic_censu": 460, "autonom": [461, 463], "elmokashfi": 461, "tier": 461, "mid": 461, "adv": 461, "bidirect": 461, "peer": 461, "commerci": 461, "agreement": 461, "kvalbein": 461, "dovroli": 461, "bgp": 461, "1250": 461, "1261": 461, "octob": 461, "reweight": 462, "mathematician": 463, "frank": 463, "incoming_graph_data": [464, 467], "default_label": [464, 467], "to_networkx_graph": 464, "110": 464, "protect": 464, "bracket": 464, "shortcut": 464, "nbrsdict": 464, "miscellan": 464, "__contains__": 464, "__getitem__": 464, "adj_dict": 464, "atlasview": 464, "__iter__": 464, "niter": 464, "__len__": 464, "nnode": 464, "u_of_edg": 464, "v_of_edg": 464, "ebunch_to_add": 464, "wn2898": 464, "node_for_ad": 464, "nodes_for_ad": 464, "hello": 464, "k3": 464, "attrdict": 464, "behav": 464, "idiom": 464, "foovalu": 464, "adj_it": 464, "nbrdict": 464, "adjlist_inner_dict_factori": 464, "neighbordict": 464, "adjlist_outer_dict_factori": 464, "adjlistdict": 464, "clear_edg": 464, "deepcopi": 464, "fresh": [464, 473], "__class__": 464, "degreeview": 464, "nd_view": 464, "edge_attr_dict_factori": 464, "neighborattrdict": 464, "edge_subgraph": 464, "edgeview": 464, "edgedataview": 464, "ddict": 464, "get_edge_data": 464, "edge_dict": 464, "safe": 464, "graph_attr_dict_factori": 464, "graph_cache_factori": 464, "keyerror": 464, "edge_ind": 464, "data_dictionari": 464, "is_multigraph": 464, "corespond": 464, "nbunch_it": 464, "exhaust": 464, "possibli": 464, "node_attr_dict_factori": 464, "nodeattrdict": 464, "node_dict_factori": 464, "nodedict": 464, "nodeview": 464, "nodedataview": 464, "nodedata": 464, "bar": 464, "nedg": 464, "Will": 464, "nodes_for_remov": 464, "set_edge_data": 464, "set_node_data": 464, "set_item": 464, "adjedgeattr": 464, "dd": 464, "nodeattr": 464, "netowrkx": 464, "to_undirected_class": 464, "itertool": 464, "mg": 464, "nd_iter": 464, "outedgeview": 464, "in_edg": 464, "outedgedataview": 464, "has_predecessor": 464, "has_successor": 464, "indegreeview": 464, "inedgeview": 464, "outdegreeview": 464, "pred": 464, "succ": 464, "_convert_arrow_to_dynam": [465, 467], "atla": 465, "triad": 465, "mycielski": 465, "sudoku": 465, "utf": [466, 477], "filenam": [466, 477], "rb": 466, "bz2": 466, "uncompress": 466, "whitespac": 466, "obsolet": 466, "write_edgelist": 466, "fh": 466, "textlin": 466, "parse_edgelist": 466, "read_adjlist": 466, "marker": 466, "v_0": 467, "v_1": 467, "add_label": 468, "talk": 470, "output_to_cli": [470, 487], "person_id": [470, 477], "deregist": 471, "256mi": 471, "4gi": 471, "5gi": 471, "__enter__": 471, "__exit__": 471, "exc_typ": 471, "exc_valu": 471, "exc_tb": 471, "unregist": 471, "preemptiv": 471, "burstabl": 471, "qo": 471, "preempt": 471, "k8s_vineyard_imag": 471, "fallback": 471, "512mi": 471, "etcd_addr": 471, "etcd01": 471, "etcd02": 471, "etcd03": 471, "4mi": 471, "k8s_coordinator_pod_node_selector": 471, "tinyurl": 471, "3nx6k7ph": 471, "k8s_engine_pod_node_selector": 471, "path1": 471, "path2": 471, "claimnam": 471, "dangling_timeout_second": 471, "heartbeat": 471, "dangl": 471, "config_fil": 471, "resource_nam": 471, "sigint": 471, "sigterm": 471, "signal": 471, "get_vineyard_object_mapping_t": 471, "with_cyph": 471, "recreat": 471, "restore_from_pvc": 471, "kubeconfig": 471, "run_fetch": 471, "lock": 471, "store_to_pvc": 471, "backup": [471, 477], "maxwel": 473, "binlog": 473, "buildgartfrag": 473, "etcd_endpoint": 473, "gartfrag": 473, "etcd_client": 473, "make_shar": 473, "mpi_comm_world": 473, "schema_kei": 473, "gart_schema_p": 473, "to_str": 473, "edge_config_str": 473, "as_str": 473, "gart_blob_m": 473, "_p": 473, "config_str": 473, "edge_config": 473, "inner_vertices_it": 473, "elabel": [473, 478], "edge_it": 473, "hive": 475, "ordered_by_sourc": 475, "ordered_by_dest": 475, "textual": 475, "unix": [475, 490], "ldbc_graphar": 475, "4096": 475, "ldbc_subgraph_graphar": 475, "ldbc_subgraph": 475, "ldbc__graphar": 475, "test_graphar": 475, "broader": 476, "ffi": 476, "agnost": 476, "grin_": 476, "partitioned_graph": 476, "edge_type_nam": 476, "boundari": 476, "sync_properti": 476, "grin_partitioned_graph": 476, "grin_partit": 476, "grin_graph": 476, "grin_get_local_graph_from_partit": 476, "grin_edge_typ": 476, "etyp": 476, "grin_get_edge_type_by_nam": 476, "grin_vertex_type_list": 476, "src_vtype": 476, "grin_get_src_types_from_edge_typ": 476, "dst_vtype": 476, "grin_get_dst_types_from_edge_typ": 476, "src_vtypes_num": 476, "grin_get_vertex_type_list_s": 476, "dst_vtypes_num": 476, "grin_vertex_typ": 476, "grin_get_vertex_type_from_list": 476, "grin_vertex_properti": 476, "dst_vp": 476, "grin_get_vertex_property_by_nam": 476, "grin_null_vertex_properti": 476, "grin_vertex_property_t": 476, "dst_vpt": 476, "grin_get_vertex_property_table_by_typ": 476, "grin_datatyp": 476, "dst_vp_dt": 476, "grin_get_vertex_property_data_typ": 476, "grin_vertex_list": 476, "__src_vl": 476, "grin_get_vertex_list": 476, "_src_vl": 476, "grin_select_type_for_vertex_list": 476, "src_vl": 476, "grin_select_master_for_vertex_list": 476, "src_vl_num": 476, "grin_get_vertex_list_s": 476, "grin_vertex": 476, "grin_get_vertex_from_list": 476, "ifdef": 476, "grin_trait_select_edge_type_for_adjacent_list": 476, "grin_adjacent_list": 476, "_adj_list": 476, "grin_get_adjacent_list": 476, "grin_direct": 476, "adj_list": 476, "grin_select_edge_type_for_adjacent_list": 476, "adj_lsit": 476, "endif": 476, "al_sz": 476, "grin_get_adjacent_list_s": 476, "ifndef": 476, "grin_edg": 476, "grin_get_edge_from_adjacent_list": 476, "grin_get_edge_typ": 476, "grin_equal_edge_typ": 476, "grin_get_neighbor_from_adjacent_list": 476, "grin_get_value_from_vertex_property_t": 476, "grin_vertex_ref": 476, "uref": 476, "grin_get_vertex_ref_for_vertex": 476, "recogn": [476, 477], "u_master_partit": 476, "grin_get_master_partition_from_vertex_ref": 476, "send_valu": 476, "fragment_group_id": [476, 478], "get_partitioned_graph_by_object_id": 476, "local_partit": 476, "grin_get_local_partition_list": 476, "pnum": 476, "grin_get_partition_list_s": 476, "grin_get_partition_from_list": 476, "disclaim": 476, "sacrif": 476, "boilerpl": 476, "ineffici": 476, "enorm": 476, "grin_assume_all_vertex_property_local_complet": 476, "grin_assume_master_vertex_property_local_complet": 476, "grin_assume_by_type_all_vertex_property_local_complet": 476, "grin_assume_by_type_master_vertex_property_local_complet": 476, "assumpt": 476, "wider": 476, "undefin": 476, "granular": 476, "grin_frag": 476, "storagespecif": 476, "vertexhandl": 476, "goe": 476, "grin_edge_list": 476, "grin_partition_list": 476, "grin_enable_": 476, "_list_arrai": 476, "vertexlist": 476, "grin_enable_vertex_list_arrai": 476, "vl": 476, "idx": 476, "sz": 476, "caller": 476, "_list_iter": 476, "grin_enable_vertex_list_iter": 476, "grin_vertex_list_iter": 476, "grin_get_vertex_list_begin": 476, "grin_get_next_vertex_list_it": 476, "vli": 476, "grin_is_vertex_list_end": 476, "grin_get_vertex_from_it": 476, "grin_get_vertex_type_by_nam": 476, "vtype": 476, "grin_vertex_property_list": 476, "grin_get_vertex_properties_by_nam": 476, "vprop": 476, "vpl": 476, "separatedli": 476, "with_vertex_label": 476, "with_edge_label": 476, "grin_serialize_vertex_ref": 476, "grin_deserialize_to_vertex_ref": 476, "grin_get_vertex_from_vertex_ref": 476, "vref": 476, "deseri": 476, "borrow": 476, "vertexcut": 476, "edgecut": 476, "judgement": 476, "columnar": 477, "gear": 477, "compromis": 477, "strict": 477, "multitud": 477, "exemplifi": 477, "said": 477, "grpc_port": 477, "grpc_endpoint": 477, "conn": 477, "add_vertex_label": 477, "v_label_nam": 477, "add_primary_kei": 477, "pk_name": 477, "prop_name_1": 477, "prop_name_2": 477, "add_edge_label": 477, "e_label_nam": 477, "prop_name_3": 477, "add_properti": 477, "xmln": 477, "xsi": 477, "w3": 477, "xmlschema": 477, "schemaloc": 477, "xsd": 477, "modelvers": 477, "gremlinexampl": 477, "codehau": 477, "mojo": 477, "classpath": 477, "mainclass": 477, "compliancelevel": 477, "killaft": 477, "credenti": 477, "valuemap": [477, 495], "javascript": 477, "data_load": 477, "load_tool": 477, "xzvf": 477, "alic": 477, "person_id_1": 477, "20210611151923": 477, "mapreduc": 477, "data_output": 477, "55555": 477, "propertiescolmap": 477, "srcpkcolmap": 477, "dstpkcolmap": 477, "mb": 477, "columnidx": 477, "_success": 477, "xxxxx": 477, "sst": 477, "00000": 477, "00001": 477, "00002": 477, "load_data": 477, "test_store_servic": 477, "insert_vertex": 477, "vertexrecordkei": 477, "insert_vertic": 477, "update_vertex_properti": 477, "vertex_pk": 477, "delete_vertic": 477, "insert_edg": 477, "edgerecordkei": 477, "update_edge_properti": 477, "edge_pk": 477, "remote_flush": 477, "snapshot_id": 477, "src_vertex_kei": 477, "dst_vertex_kei": 477, "realtimewrit": 477, "unus": 477, "current_timestamp": 477, "replay_record": 477, "grootclient": 477, "grootclientbuild": 477, "replayrecord": 477, "provis": 477, "lapp": 477, "reinstal": 477, "pv_name": 477, "pod_nam": [477, 485, 490], "logback": 477, "zk": 477, "storegcintervalm": 477, "try_catch_up_with_primari": 477, "otel": 477, "arrowfragmentgroup": 478, "spread": 478, "ipc": 478, "docket": 478, "string_oid": 478, "ipcclient": 478, "writeout": 478, "nb": 478, "fragmentloc": 478, "gettotalnodesnum": 478, "labeltyp": 478, "vlabel": 478, "vertex_data_t": 478, "edge_data_t": 478, "willing": 479, "implic": 479, "polymorph": 479, "instant": 479, "aka": 479, "pygrap": [479, 480], "frist": 479, "from_numpi": 479, "bind_sssp1": 479, "delai": 479, "screen": 479, "bind_sssp2": 479, "vertex_bal": 480, "vcut": 480, "ecut": 480, "repo_hom": 484, "flexbuild": 484, "graph_identifi": 484, "syoov": 485, "79b44f7b58": 485, "ctmqb": 485, "10m": 485, "9m53": 485, "9m46": 485, "6dd67c65fc": 485, "gn4mb": 485, "15334625083466732": 485, "33d": 485, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 487, "\u8be5\u7cfb\u7edf\u4e8e": 487, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 487, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 487, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 487, "\u5728": [487, 488, 489, 490, 491, 494, 495, 496, 497], "\u4e2d": [487, 489, 490, 491, 497], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 487, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 487, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 487, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 487, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 487, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 487, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 487, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 487, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 487, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 487, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 487, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 487, "\u521b\u5efa\u9ed8\u8ba4": 487, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 487, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 487, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 487, "result_lpa": 487, "result_sssp": 487, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 487, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 487, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 487, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 487, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 487, "\u7c7b": [487, 497], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 487, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 487, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 487, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 487, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 487, "\u6216\u5199\u5165": 487, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 487, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 487, "\u6216\u5199\u5165\u672c\u5730\u7684": 487, "lpa_result": 487, "\u6570\u636e\u7ed3\u6784": 487, "\u6b64\u5916": [487, 491], "\u5982": [487, 490, 493, 495], "\u5feb\u901f\u4e0a\u624b": [487, 493], "\u4e2d\u6240\u793a": 487, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 487, "\u7684\u65b0\u5c5e\u6027": 487, "\u5217": 487, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 487, "\u5217\u540d\u4e3a": 487, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 487, "new_graph": [487, 492], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 487, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 487, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 487, "\u7c7b\u4f3c\u7684": 487, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 487, "\u4f8b\u5982\u9876\u70b9id": 487, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 487, "\u4ee3\u8868\u7ed3\u679c": 487, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 487, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 487, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 487, "\u8f6c\u6362\u4e3a": [487, 496], "\u4f7f\u7528\u9876\u70b9\u7684": 487, "\u4f5c\u4e3a\u540d\u4e3a": 487, "\u7684\u5217": 487, "df_vd": 487, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 487, "df_result": 487, "property0": 487, "label0": 487, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 487, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 487, "\u5c06": [487, 496], "\u9876\u70b9\u7684": 487, "\u4f5c\u4e3a": [487, 488, 497], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 487, "gs_data": 487, "\u53ef\u4ee5\u67e5\u770b": 487, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 487, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 487, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 487, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 487, "\u5728\u7eaf": 487, "\u6a21\u5f0f": [487, 495], "\u4e0b\u4f7f\u7528": 487, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 487, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 487, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 487, "\u5982\u4ee3\u7801\u6240\u793a": 487, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 487, "\u88c5\u9970\u7684\u7c7b": 487, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 487, "\u56fe\u7b97\u6cd5\u51fd\u6570": 487, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 487, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 487, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 487, "\u4e0e": 487, "\u76f8\u5173\u7684\u5b8c\u6574": 487, "\u53ef\u4ee5\u53c2\u8003": 487, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 487, "\u4e3a\u4f8b": [487, 491], "\u7528\u6237\u5728": 487, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 487, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 487, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 487, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 487, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 487, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 487, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 487, "\u589e\u91cf\u8ba1\u7b97": 487, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 487, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 487, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 487, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [487, 497], "\u7ecf\u5178\u7684": 487, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 487, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 487, "\u6a21\u578b\u4e4b\u5916": 487, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 487, "\u7f16\u7a0b\u6a21\u578b": 487, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 487, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 487, "\u6a21\u578b\u4e0d\u540c": 487, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 487, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 487, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 487, "\u800c\u4e0d\u540c\u4e8e": 487, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 487, "\u8fd8\u662f\u4ee5": 487, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 487, "\u88c5\u9970\u5668": 487, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 487, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 487, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 487, "\u4e2d\u7684": [487, 488, 490], "\u51fd\u6570": [487, 495], "\u4e0b\u5217\u4ee3\u7801": 487, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 487, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 487, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 487, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 487, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 487, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 487, "\u8fd9\u91cc": [487, 488, 497], "\u662f\u4e0e": 487, "\u76f8\u5bf9\u5e94\u7684": 487, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 487, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 487, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 487, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 487, "\u5728\u6b64\u4e4b\u540e": 487, "\u60a8\u53ef\u4ee5\u4ece": 487, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 487, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 487, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 487, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 487, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 487, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 487, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 487, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 487, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 487, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 487, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 487, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 487, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 487, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 487, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 487, "dist_0": 487, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 487, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 487, "\u8bf7\u53c2\u8003": [487, 495], "\u6765\u5c06": 487, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 487, "\u5b89\u88c5\u5b8c\u6210\u540e": 487, "\u4f60\u9700\u8981\u5c06": 487, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 487, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 487, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 487, "\u6765\u786e\u4fdd": 487, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 487, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 487, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 487, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 487, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 487, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 487, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 487, "\u7528\u6237\u9700\u8981\u6309\u7167": 487, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 487, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 487, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 487, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 487, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 487, "defaultpropertyappbas": 487, "\u6216": [487, 488, 489, 490, 493, 495], "parallelpropertyappbas": 487, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 487, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 487, "defaultappbas": 487, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 487, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 487, "\u5176\u5e94\u8be5\u662f": 487, "defaultpropertycontextbas": 487, "parallelpropertycontextbas": 487, "defaultcontextbas": 487, "\u6216\u8005": [487, 489, 496, 497], "\u7684\u7684\u5b50\u7c7b": 487, "\u901a\u8fc7\u7ee7\u627f": 487, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 487, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 487, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 487, "client\u4e2dquery\u8fd4\u56de\u7684context": 487, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 487, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 487, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 487, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 487, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 487, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 487, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 487, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 487, "\u8fd9\u4e2a\u9700\u6c42": 487, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 487, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 487, "graphscope_repo": 487, "app_class_nam": 487, "java_path": 487, "path_to_your_jar": 487, "param_str": 487, "params_str": 487, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 487, "app\u7684\u7c7b\u7684\u5168\u540d": 487, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 487, "\u53ef\u4ee5\u901a\u8fc7": 487, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 487, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 487, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 487, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 487, "\u53ef\u4ee5": 487, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 487, "jar_path": 487, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 487, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 487, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 487, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 487, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 487, "\u7684app": 487, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 487, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 487, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [487, 488, 490], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 487, "\u76f8\u5173\u8bba\u6587": 487, "wenfei": 487, "jingbo": 487, "xu": 487, "wenyuan": 487, "yu": 487, "jingren": 487, "zhou": 487, "xiaojian": 487, "luo": 487, "qiang": 487, "yin": 487, "cao": 487, "ruiqi": 487, "tod": [487, 493], "yinghui": 487, "wu": 487, "jiaxin": 487, "jiang": 487, "43rd": 487, "zeyu": 487, "zheng": 487, "bohan": 487, "chao": 487, "tian": 487, "\u4ee5": [488, 491, 492, 494, 497], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 488, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [488, 490], "\u5982\u679c\u8fd0\u884c": 488, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 488, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 488, "\u56e0\u6b64": [488, 489, 491], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 488, "\u4f1a\u8bdd": [488, 491], "\u5ba2\u6237\u7aef": [488, 489, 493], "\u5b83\u5c01\u88c5": 488, "\u7ba1\u7406\u7740": 488, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 488, "\u5e76": 488, "\u8fde\u63a5": 488, "\u64cd\u4f5c\u7528\u6237\u5728": 488, "\u96c6\u7fa4\u4e0a\u7684": 488, "\u5f15\u64ce": 488, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 488, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 488, "\u5b9e\u4f8b": 488, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 488, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 488, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 488, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 488, "\u8def\u5f84": [488, 497], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 488, "\u7136\u540e": [488, 496], "\u5c06\u5176\u901a\u8fc7": 488, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 488, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 488, "\u8282\u70b9\u7684\u6982\u5ff5": 488, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 488, "\u521b\u5efa\u7684\u96c6\u7fa4": 488, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 488, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 488, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 488, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 488, "\u4e0a\u7684\u4e00\u4e2a": 488, "\u5b9e\u4f8b\u5305\u542b": 488, "\u4e00\u4e2a\u8fd0\u884c": 488, "\u7684": [488, 489, 490, 493, 498], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 488, "\u8d1f\u8d23\u5bf9": 488, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 488, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 488, "\u5f15\u64ce\u5bb9\u5668\u7684": 488, "replicaset": 488, "\u5bf9\u8c61": 488, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 488, "\u901a\u8fc7": [488, 491], "\u63a5\u6536\u6765\u81ea": 488, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 488, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 488, "\u56fe\u67e5\u8be2\u5f15\u64ce": 488, "\u56fe\u5b66\u4e60\u5f15\u64ce": [488, 493], "\u7684\u751f\u547d\u5468\u671f": 488, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 488, "\u8bf7\u5728": 488, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 488, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 488, "\u5b89\u88c5": [488, 493], "release_nam": 488, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 488, "\u53c2\u8003": 488, "\u8be5\u94fe\u63a5": 488, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 488, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 488, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 488, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 488, "\u96c6\u7fa4": [488, 490, 494], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 488, "\u7528\u6cd5\u5982\u4e0b": 488, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 488, "launch_clust": 488, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 488, "pyyaml": 488, "boto3": 488, "your_access_key_id": 488, "your_access_key_secret": 488, "region": 488, "your_region_nam": 488, "kube_config_path": 488, "alibabacloud_cs20151215": 488, "alibabacloud_ecs20140526": 488, "alibabacloud_vpc20160428": 488, "your_region_id": 488, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 488, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 488, "\u5e73\u53f0\u4e0a": 488, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 488, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 488, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 488, "\u672c\u5730\u90e8\u7f72": 488, "graphscope_env": [488, 489], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 489, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 489, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 489, "\u9075\u5faa": 489, "\u7684\u5f00\u6e90\u534f\u8bae": 489, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 489, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 489, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 489, "\u955c\u50cf": 489, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 489, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 489, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 489, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 489, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 489, "\u6267\u884c": 489, "10240m": 489, "minitest": 489, "unittest": 489, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 489, "\u6bd4\u5982": [489, 497], "\u56fe\u5206\u6790\u5f15\u64ce": [489, 493], "\u6a21\u5757": 489, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 489, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 489, "\u7684\u6784\u5efa\u8fc7\u7a0b": 489, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 489, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 489, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 489, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 489, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 489, "\u4e3a": [489, 490, 491], "shortsha": 489, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 489, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 489, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 489, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 489, "\u90a3\u4e48": 489, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 489, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 489, "\u5ba2\u6237\u7aef\u5373\u53ef": 489, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 489, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 489, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 489, "\u4e0b\u7684": 489, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 489, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 489, "install_prefix": 489, "\u4e0b\u5206\u522b\u6784\u5efa": 489, "\u7531\u4e8e": 489, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 489, "\u975edocker": 489, "\u4e2d\u8fdb\u884c": 489, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 489, "\u7684\u4f9d\u8d56": 489, "\u57fa\u4e8e\u5f53\u524d": 489, "\u73af\u5883\u4e0b\u7684": 489, "\u7248\u672c\u6784\u5efa": 489, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [489, 491], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 489, "\u7248\u672c": [489, 494], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 489, "conda": 489, "pyenv": 489, "\u5b89\u88c5\u591a\u4e2a": 489, "\u7684\u7248\u672c": 489, "\u98ce\u683c": 489, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 489, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 489, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 489, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 490, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 490, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 490, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 490, "\u6216\u8005\u5728": 490, "\u4e0e\u6211\u4eec\u8054\u7cfb": 490, "\u8fd0\u884c": 490, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 490, "\u5728\u901a\u8fc7": 490, "\u5ba2\u6237\u7aef\u4f7f\u7528": 490, "\u8fc7\u7a0b\u4e2d": 490, "\u9700\u8981\u7684\u6700\u4f4e": 490, "\u7248\u672c\u662f3": 490, "\u6700\u4f4epip\u7248\u672c\u662f": 490, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 490, "\u5355\u673a\u60c5\u51b5\u4e0b": 490, "\u8d44\u6e90\u9700\u6c42": 490, "\u6838": 490, "\u5185\u5b58": 490, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 490, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 490, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 490, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 490, "\u662f\u5426\u5f3a\u4f9d\u8d56": 490, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 490, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 490, "\u7684\u5f62\u5f0f\u5206\u53d1": 490, "\u53ef\u4ee5\u7528": 490, "\u5feb\u901f\u5b89\u88c5": 490, "\u5982\u4f55\u5982\u67e5\u770b": 490, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 490, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 490, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 490, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 490, "\u53ef\u4ee5\u4f7f\u7528": [490, 496], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 490, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 490, "\u7684\u78c1\u76d8": 490, "\u4e5f\u53ef\u5728": 490, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 490, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 490, "\u547d\u4ee4\u65f6": 490, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 490, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 490, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 490, "\u8fdb\u884c\u5220\u9664": 490, "\u901a\u5e38\u60c5\u51b5\u4e0b": 490, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 490, "\u90e8\u7f72": [490, 493], "\u65f6": [490, 491], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 490, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 490, "\u7b49\u6743\u9650": 490, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 490, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 490, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 490, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 490, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 490, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 490, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 490, "\u76ee\u524d": [490, 497], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 490, "\u53ef\u901a\u8fc7": 490, "\u8be5\u6587\u6863": 490, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 490, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 490, "\u5982\u679c": 490, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 490, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 490, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 490, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 490, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 490, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 490, "\u8f7d\u56fe\u9636\u6bb5": 490, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 490, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 490, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 490, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 490, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 490, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 490, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 490, "\u53ef\u89c1": 490, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 490, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 490, "\u90e8\u7f72\u7684": 490, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 490, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 490, "\u865a\u62df\u7684": 490, "\u6709\u4ec0\u4e48\u533a\u522b": 490, "\u5982\u4f55\u8bbe\u7f6e": 490, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 490, "\u5b83\u5b58\u50a8\u7531": 490, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 490, "\u7684\u5143\u4fe1\u606f": 490, "\u4f8b\u5982\u5f62\u72b6": 490, "\u540d\u79f0\u7b49": 490, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 490, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 490, "\u5b83\u76f8\u5f53\u4e8e": 490, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 490, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 490, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 490, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 490, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 490, "\u7684\u540c\u6837\u5927\u5c0f": 490, "\u5bfc\u81f4\u5728": 490, "\u73af\u5883\u4e0b\u5b89\u88c5": 490, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 490, "\u7f16\u8bd1": 490, "\u5931\u8d25": 490, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 490, "\u8be6\u60c5\u53ef\u53c2\u8003": 490, "\u4f60\u53ef\u4ee5\u6839\u636e": 490, "\u6b64\u6559\u7a0b": 490, "\u6765\u6e90\u7801\u7f16\u8bd1": 490, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 490, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 490, "\u4e0a\u5206\u914d": 490, "\u65f6\u9047\u5230\u4e86": 490, "\u95ee\u9898": 490, "\u5982\u4f55\u89e3\u51b3": 490, "\u901a\u5e38\u5f53\u4f7f\u7528": 490, "\u7684\u65b9\u5f0f\u5b89\u88c5": 490, "\u4f1a\u62a5": 490, "\u9519\u8bef": [490, 492], "\u6211\u4eec\u901a\u8fc7": 490, "\u6765\u67e5\u770b\u65e5\u5fd7": 490, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 490, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 490, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 490, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 490, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 490, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 490, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 490, "\u7136\u540e\u5c06": 490, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 490, "\u4e3a\u4ec0\u4e48\u5728": 490, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 490, "\u5b9e\u4f8b\u65f6": 490, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 490, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 490, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 490, "\u96c6\u7fa4\u62c9\u8d77": 490, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 490, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 490, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 490, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 490, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 490, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 490, "\u6216\u5bb9\u5668": 490, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 490, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 490, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 490, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 490, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 490, "\u4ee5\u53ca": [490, 497], "\u8bf7\u6ce8\u610f": 490, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 490, "stackexchang": 490, "23452": 490, "\u5176\u4ed6\u95ee\u9898": 490, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 490, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 490, "\u540c\u65f6": [490, 495], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 490, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 491, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 491, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 491, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 491, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 491, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 491, "\u4f7f\u7528": [491, 493, 496, 497, 498], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 491, "\u6570\u636e\u96c6": 491, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 491, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 491, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 491, "\u5373\u8bba\u6587": 491, "\u4f5c\u8005": 491, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 491, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 491, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 491, "\u7ed9\u51fa\u5f02\u6784\u7684": 491, "\u6570\u636e": 491, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 491, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 491, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 491, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 491, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 491, "\u5728\u8be5\u6570\u636e\u4e2d": 491, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 491, "\u6458\u8981\u62bd\u53d6\u7684": 491, "\u7ef4": 491, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 491, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 491, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 491, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 491, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 491, "\u5ba2\u6237\u7aef\u8c03\u7528": 491, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 491, "\u6b65\u9aa4": 491, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 491, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 491, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 491, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 491, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 491, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 491, "\u7684\u7b2c\u4e00\u6b65": 491, "\u6211\u4eec\u9700\u8981\u5728": 491, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 491, "\u5bf9\u4e8e": [491, 494], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 491, "\u670d\u52a1\u7c7b\u578b": 491, "\u9ed8\u8ba4\u662f": 491, "\u53e6\u5916": [491, 497], "\u6ce8\u610f": [491, 494], "\u662f": 491, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 491, "\u5f53\u5728": 491, "\u4e0a\u4f7f\u7528": 491, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 491, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 491, "\u901a\u5e38\u4e3a": 491, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 491, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 491, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 491, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 491, "\u8be5": 491, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 491, "\u6240\u6709\u8d44\u6e90": 491, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 491, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 491, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 491, "\u90fd\u6709\u4e00\u4e2a": 491, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 491, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 491, "\u8f7d\u56fe": [491, 492, 493], "\u4ee5\u5c5e\u6027\u56fe": 491, "\u5efa\u6a21\u56fe\u6570\u636e": [491, 497], "\u5c5e\u6027\u56fe\u4e2d": 491, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 491, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 491, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 491, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 491, "\u5206\u522b\u6807\u8bb0\u4e3a": 491, "\u8bba\u6587": 491, "\u673a\u6784": 491, "\u7814\u7a76\u9886\u57df": 491, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 491, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 491, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 491, "\u5f15\u7528": 491, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 491, "\u9876\u70b9": 491, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 491, "\u64b0\u5199": 491, "\u7684\u8fb9": [491, 497], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 491, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 491, "\u6240\u6709\u7684\u9876\u70b9": 491, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 491, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 491, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 491, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 491, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 491, "\u6570\u636e\u6587\u4ef6": 491, "\u7ed3\u5408\u4f7f\u7528": 491, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 491, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 491, "author_affiliated_with_institut": 491, "paper_has_topic_field_of_studi": 491, "hastop": 491, "paper_cites_pap": 491, "author_writes_pap": 491, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 491, "\u8fd9\u91cc\u7684": 491, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 491, "\u4e2d\u7684\u56fe": 491, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 491, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 491, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 491, "\u63a2\u7d22\u6027": 491, "\u65b9\u5f0f\u6765\u63a2\u7d22": 491, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 491, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 491, "\u91c7\u7528\u79f0\u4e3a": 491, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 491, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 491, "\u5728\u6b64\u793a\u4f8b\u4e2d": 491, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 491, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 491, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 491, "\u552f\u4e00\u6807\u8bc6": 491, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 491, "\u4e8b\u5b9e\u8bc1\u660e": 491, "\u8bb8\u591a\u7b97\u6cd5": 491, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 491, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 491, "\u96c6\u4e2d\u6027": 491, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 491, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 491, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 491, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 491, "\u80cc\u540e\u57fa\u4e8e": 491, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 491, "\u7136\u540e\u8fd0\u884c": 491, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 491, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 491, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 491, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 491, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 491, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 491, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 491, "\u5f53\u524d": 491, "\u652f\u6301\u7528\u6237\u4ee5": 491, "\u6a21\u578b\u548c": 491, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 491, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 491, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 491, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 491, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 491, "\u6211\u4eec\u8bad\u7ec3\u4e86": 491, "\u6a21\u578b": 491, "\u5c06\u8282\u70b9": 491, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 491, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 491, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 491, "\u4e3a\u6b64": 491, "\u63a5\u7740\u4e0a\u4e00\u6b65": 491, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 491, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 491, "train_gcn": 491, "\u6700\u540e": [491, 492, 495], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 491, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 491, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 491, "\u548c\u5f15\u64ce": 491, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 491, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 492, "\u6295\u5f71\u7684\u65b9\u6cd5": 492, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 492, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 492, "\u5177\u4f53\u800c\u8a00": 492, "\u56fe": 492, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 492, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 492, "\u6211\u4eec\u5df2\u7ecf\u5728": 492, "\u4e00\u8282\u89c1\u5230\u8fc7": 492, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 492, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 492, "\u8fdb\u4e00\u6b65\u7684": 492, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 492, "\u4e2d\u4e4b\u540e": 492, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 492, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 492, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 492, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 492, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 492, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 492, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 492, "pathlib": 492, "\u5230\u8fd9\u91cc": 492, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 492, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 492, "graph1": 492, "graph2": 492, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 492, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 492, "\u5728\u5e95\u5c42": 492, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 492, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 492, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 492, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 492, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 492, "\u6765\u5b8c\u6210": 492, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 492, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 492, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 492, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 492, "\u503c\u53ef\u4ee5\u4e3a": 492, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 492, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 492, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 492, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 492, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 492, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 492, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 492, "sub_graph2": 492, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 492, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 492, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 492, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 492, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 492, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 492, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 492, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 492, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 492, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 492, "\u8fb9\u6807\u7b7e": 492, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 492, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 492, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 492, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 492, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 492, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 492, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 492, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 493, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 493, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 493, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 493, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 493, "\u63d0\u4f9b\u4e86": 493, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 493, "\u5177\u6709\u4e00\u7ad9\u5f0f": 493, "\u5f00\u53d1\u4fbf\u6377": 493, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 493, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 493, "\u5305\u62ec": [493, 496], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 493, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 493, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 493, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 493, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 493, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 493, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 493, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 493, "\u5982\u98ce\u63a7": 493, "\u7535\u5546\u63a8\u8350": 493, "\u5e7f\u544a": 493, "\u7f51\u7edc\u5b89\u5168": [493, 496], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 493, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 493, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 493, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 493, "\u6700\u4f73\u8bba\u6587\u5956": 493, "vldb2017": 493, "\u6700\u4f73\u6f14\u793a\u5956": 493, "vldb2020": 493, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 493, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 493, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 493, "2021\u5f55\u7528": 493, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 493, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 493, "kdd\u7b49": 493, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 493, "\u57fa\u4e8e": [493, 498], "\u793a\u4f8b": 493, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 493, "\u521b\u5efa\u4f1a\u8bdd": 493, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 493, "\u56fe\u5206\u6790": 493, "\u56fe\u795e\u7ecf\u7f51\u7edc": 493, "\u5173\u95ed\u4f1a\u8bdd": 493, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 493, "\u5728aw": 493, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 493, "\u672c\u5730\u90e8\u7f72graphscop": 493, "\u5165\u95e8\u6559\u7a0b": 493, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [493, 498], "\u4f7f\u7528\u517c\u5bb9": [493, 498], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [493, 498], "\u7528": [493, 495, 498], "\u50cf": [493, 498], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [493, 498], "\u8f7d\u5165\u56fe\u6570\u636e": [493, 498], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [493, 498], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [493, 498], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [493, 498], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [493, 498], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [493, 498], "bipartitegraphsag": [493, 498], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [493, 498], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [493, 498], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [493, 498], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 493, "\u624b\u52a8\u914d\u7f6e\u56fe": 493, "\u9ad8\u7ea7\u7528\u6cd5": 493, "\u4ece": [493, 495], "\u4e2d\u8f7d\u56fe": 493, "\u7684\u53d8\u79cd": 493, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 493, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 493, "\u6295\u5f71": 493, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 493, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 493, "\u5185\u7f6e\u7b97\u6cd5": 493, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 493, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 493, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 493, "\u4e2d\u7684\u51fd\u6570": 493, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 493, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 493, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 493, "\u5229\u7528python": 493, "\u8fde\u63a5graphscop": 493, "\u5229\u7528java": 493, "\u5f00\u53d1\u63a7\u5236\u53f0": 493, "gremlin\u7f16\u7a0b\u5165\u95e8": 493, "gremlin\u517c\u5bb9\u6027": 493, "\u5bf9\u6bd4tinkerpop": 493, "\u56fe\u5b66\u4e60\u6a21\u578b": 493, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 493, "\u5e38\u89c1\u95ee\u9898": 493, "\u5f00\u53d1\u8005\u6307\u5357": 493, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 493, "\u6784\u5efa": 493, "\u4ee3\u7801\u98ce\u683c": 493, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 494, "monterei": 494, "\u7a0b\u5e8f\u5305": 494, "\u7684\u5f62\u5f0f\u53d1\u5e03": 494, "\u53ef\u76f4\u63a5\u901a\u8fc7": 494, "\u9700\u8981\u6ee1\u8db3": 494, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 494, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 494, "\u73af\u5883\u4e0b\u8fd0\u884c": 494, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 494, "\u7684\u7528\u6237": 494, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 494, "\u5e76\u5728": 494, "\u4e2d\u5f00\u542f": 494, "\u529f\u80fd": 494, "\u53d1\u884c\u7248\u7528\u6237": 494, "\u4f60\u4e5f\u53ef\u4ee5\u4f7f\u7528": 494, "\u90e8\u7f72\u4e00\u4e2a\u672c\u5730\u7684": 494, "\u7684\u5b89\u88c5\u548c\u90e8\u7f72\u53ef\u4ee5\u53c2\u8003\u5b98\u7f51\u7684": 494, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 494, "\u4e0a\u5b89\u88c5": 494, "wsl2": 494, "\u6765\u6a21\u62df": 494, "\u73af\u5883": [494, 498], "\u63a5\u4e0b\u6765": [494, 495, 496], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 494, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 495, "\u7b80\u79f0gie": 495, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 495, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 495, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 495, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 495, "\u8be5\u5f15\u64ce\u652f\u6301": 495, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 495, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 495, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 495, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 495, "\u63a5\u53e3": [495, 496], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 495, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 495, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 495, "\u5982\u4e0b\u6240\u793a": 495, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 495, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 495, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 495, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 495, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 495, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 495, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 495, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 495, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 495, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 495, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 495, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 495, "\u683c\u5f0f": 495, "\u7684\u8f93\u51fa": 495, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 495, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 495, "python\u8bbf\u95ee\u56fe\u6570\u636e": 495, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 495, "\u5b98\u65b9\u6587\u6863": 495, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 495, "\u8be6\u89c1gremlin": 495, "java\u7684": 495, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 495, "\u4e5f\u53eb\u505arepl\u73af\u5883": 495, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 495, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 495, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 495, "\u5b89\u88c5gremlin": 495, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 495, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 495, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 495, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 495, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 495, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 495, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 495, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 495, "\u5176\u4e2d\u7684": 495, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 495, "\u6216ip": 495, "\u548c\u7aef\u53e3": 495, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 495, "\u63d0\u793a\u7b26\u4e0b": 495, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 495, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 495, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 495, "\u8fdc\u7a0b": 495, "graphscope\u6267\u884c": 495, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 495, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 495, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 495, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 495, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 495, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 495, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 495, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 495, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 495, "hoc": 495, "\u904d\u5386\u67e5\u8be2": 495, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 495, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 495, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 495, "\u70b9\u6216\u8fb9": 495, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 495, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 495, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 495, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 495, "\u952e": 495, "\u503c": 495, "\u5bf9": 495, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 495, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 495, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 495, "\u5b83\u5305\u542b": 495, "\u7528\u6237": 495, "\u5546\u54c1": 495, "\u5730\u5740": 495, "\u4e09\u7c7b\u70b9": 495, "\u5b83\u4eec\u901a\u8fc7": 495, "\u8d2d\u4e70": 495, "\u9012\u9001": 495, "belongs_to": 495, "\u5c5e\u4e8e": 495, "home_of": 495, "\u5bb6\u5ead\u5730\u5740": 495, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 495, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 495, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 495, "\u8def\u5f841": 495, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 495, "\u4e70\u5bb6": 495, "tom": 495, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 495, "jack": 495, "\u63d0\u4f9b\u7684\u6807\u4ef7": 495, "\u7684\u5546\u54c1": 495, "gift": 495, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 495, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 495, "\u904d\u5386\u5668": 495, "\u6807\u8bc6": 495, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 495, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 495, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 495, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 495, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 495, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 495, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 495, "\u8fb9\u6216\u5c5e\u6027": 495, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 495, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 495, "\u5d4c\u5957\u904d\u5386": 495, "\u7684\u652f\u6301": 495, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 495, "\u5b50": 495, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 495, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 495, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 495, "\u8fc7\u6ee4": 495, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 495, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 495, "\u800c": 495, "\u6620\u5c04": 495, "\u6392\u5e8f": 495, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 495, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 495, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 495, "\u5728gremlin\u4e2d\u901a\u8fc7": 495, "\u5faa\u73af": 495, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 495, "\u7ec8\u6b62\u6761\u4ef6": 495, "\u8868\u8fbe": 495, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 495, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 495, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 495, "\u6761\u4ef6\u7ec8\u6b62": 495, "\u64cd\u4f5c\u7c7b\u4f3c": 495, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 495, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 495, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 495, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 495, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 495, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 495, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 495, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 495, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 495, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 495, "\u7684\u6709\u5411\u73af\u8def": 495, "\u9996\u5148": [495, 497], "\u8f93\u5165\u56fe\u64cd\u4f5c": 495, "\u5305\u542b\u4e00\u4e2a": 495, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 495, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 495, "\u70b9": 495, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 495, "\u7684\u70b9": 495, "\u7d27\u968f\u5176\u540e\u7684": 495, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 495, "\u4fee\u9970\u7b26": 495, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 495, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 495, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 495, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 495, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 495, "\u67e5\u8be2\u6cbf\u7740": 495, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 495, "\u6b21": 495, "\u8f93\u51fahops\u5728": 495, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 495, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 495, "\u901a\u8fc7\u5728": 495, "\u5185\u914d\u7f6e": 495, "\u9009\u9879\u5b9e\u73b0": 495, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 495, "\u6307\u4ee3": 495, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 495, "\u7684\u73af": 495, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 495, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 495, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 495, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 495, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 495, "\u5982\u679c\u6709\u7684\u8bdd": 495, "gie\u652f\u6301apach": 495, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 495, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 495, "3\u548c3": 495, "4\u7248\u672c\u517c\u5bb9\u7684": 495, "\u670d\u52a1\u63a5\u53e3": 495, "\u9664\u6b64\u4e4b\u5916": 495, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 495, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 495, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 495, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 495, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 495, "\u76ee\u524d\u7684": 495, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 495, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 495, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 495, "\u4e0d\u53ef\u4fee\u6539": 495, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 495, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 495, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 495, "\u7ea6\u675f": 495, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 495, "\u5305\u62ec\u70b9": 495, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 495, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 495, "\u4e3b\u952e\u7ea6\u675f": 495, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 495, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 495, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 495, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 495, "id\u7f16\u7801\u4e86\u7c7b\u578b": 495, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 495, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 495, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 495, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 495, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 495, "\u56fe\u4fee\u6539\u64cd\u4f5c": 495, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 495, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 495, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 495, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 495, "\u4e8b\u52a1": 495, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 495, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 495, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 495, "\u548c\u793a\u4f8b\u7528\u6cd5": 495, "\u8f93\u5165\u56fe": 495, "labelnam": 495, "labelname1": 495, "labelname2": 495, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 495, "\u8bed\u6cd5\u7cd6": 495, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 495, "\u4ee3\u8868": 495, "\u8282\u70b9\u7684age\u5c5e\u6027": 495, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 495, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 495, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 495, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 495, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 495, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 495, "dedup": 495, "aaa": 495, "otherv": 495, "flatmap": 495, "\u591a\u91cd\u6620\u5c04": 495, "bothv": 495, "\u627e\u5230\u6240\u6709\u4ece": 495, "\u5f00\u59cb\u901a\u8fc7": 495, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 495, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 495, "\u70b9\u4e0d\u91cd\u590d": 495, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 495, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 495, "\u70b9\u53ef\u91cd\u590d": 495, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 495, "\u805a\u5408": 495, "groupbi": 495, "groupby\u591a\u4e2akei": 495, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 495, "groupby\u591a\u4e2avalu": 495, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 495, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 495, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 495, "\u4f1a\u9010\u6b65\u652f\u6301": 495, "\u53ef\u4ee5\u901a\u8fc7path": 495, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 495, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 495, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 495, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 495, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 495, "\u8ba1\u7b97\u5b50\u56fe": 495, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 495, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 495, "cap": 495, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 495, "\u4f8b\u5982pagerank\u548cshortestpath": 495, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 495, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 496, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 496, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 496, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 496, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 496, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 496, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 496, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 496, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 496, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 496, "\u57fa\u4e8egl": 496, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 496, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 496, "\u4f8b\u5982\u56fe\u91c7\u6837": 496, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 496, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 496, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 496, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 496, "\u539f\u59cb\u7684gcn": 496, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 496, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 496, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 496, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 496, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 496, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 496, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 496, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 496, "graphsaint\u7b49": 496, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 496, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 496, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 496, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 496, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 496, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 496, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 496, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 496, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 496, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 496, "\u5305\u62ectensorflow": 496, "\u548cpytorch": 496, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 496, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 496, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 496, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 496, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 496, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 496, "\u79f0\u4e3a": 496, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 496, "\u611f\u53d7\u91ce": 496, "\u591a\u8df3\u90bb\u5c45": 496, "\u7ec4\u6210": 496, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 496, "\u6211\u4eec\u5b9e\u73b0": 496, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 496, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 496, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 496, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 496, "\u7136\u540e\u7528": 496, "\u7ba1\u7406": 496, "\u5230": 496, "\u7684\u8f6c\u6362": 496, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 496, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 496, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 496, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 496, "\u5411\u91cf": 496, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 496, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 496, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 496, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 496, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 496, "\u56fe\u7f16\u7801\u5668": 496, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 496, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 496, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 496, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 496, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 496, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 496, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 496, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 496, "\u5982tensorflow": 496, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 496, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 496, "\u901a\u5e38\u6765\u8bf4": 496, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 496, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 496, "\u7528\u56fe\u91c7\u6837": 496, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 496, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 496, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 496, "\u4ee5\u8fd9\u4e9b": 496, "\u4e3a\u8f93\u5165\u4ea7\u751f": 496, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 496, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 496, "\u4ea7\u751f\u8d1f\u6837\u672c": 496, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 496, "\u6211\u4eec\u62bd\u8c61\u4e86": 496, "\u6765\u91c7\u6837\u90bb\u5c45": 496, "\u6700\u540e\u5c06": 496, "\u4ea7\u751f\u7684": 496, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 496, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 496, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 496, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 496, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 496, "\u624d\u80fd\u4f7f\u7528": 496, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 496, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 496, "\u5b9a\u4e49\u7f16\u7801\u5668": 496, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 496, "\u5f97\u5230": 496, "\u540e": 496, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 496, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 496, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 496, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 496, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 496, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 496, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 496, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 496, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 496, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 496, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 496, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 496, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 496, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 496, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 496, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 496, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 496, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 496, "\u6765": 496, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 496, "\u9700\u8981\u7684\u683c\u5f0f": 496, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 496, "\u5206\u522b\u662f\u70b9\u8868": 496, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 496, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 496, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 496, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 496, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 496, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 496, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 496, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 496, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 496, "\u56de\u4e00\u8df3\u90bb\u5c45": 496, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 496, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 496, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 496, "\u56e0\u6b64\u9009\u62e9": 496, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 496, "\u6210": 496, "\u8fd4\u56de": 496, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 496, "\u6765\u628a": 496, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 496, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 496, "\u4f60\u53ef\u4ee5\u4ece": 496, "\u83b7\u53d6\u548c\u524d\u9762": 496, "\u5bf9\u5e94\u7684": 496, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 496, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 496, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 496, "\u56e0\u4e3a": 496, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 496, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 496, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 496, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 496, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 496, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 496, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 496, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 496, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 496, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 496, "\u7136\u540e\u5728": 496, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 496, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 496, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 496, "\u6765\u8fdb\u884c\u8bad\u7ec3": 496, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 496, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 496, "\u76ee\u5f55": 496, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 496, "gat\u7b49\u6a21\u578b": 496, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 496, "\u5c5e\u6027\u56fe": 497, "\u56fe\u4e0a\u7684\u70b9": 497, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 497, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 497, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 497, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 497, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 497, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 497, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 497, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 497, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 497, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 497, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 497, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 497, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 497, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 497, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 497, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 497, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 497, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 497, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 497, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 497, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 497, "\u7684\u672c\u5730\u8def\u5f84": 497, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 497, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 497, "\u662f\u6211\u4eec\u901a\u8fc7": 497, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 497, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 497, "\u4f60\u53ef\u4ee5\u5728": 497, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 497, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 497, "\u7136\u800c": 497, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 497, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 497, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 497, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 497, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 497, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 497, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 497, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 497, "\u6211\u4eec\u5c06\u4f7f\u7528": 497, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 497, "\u627e\u5230\u6e90\u6570\u636e": 497, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 497, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 497, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 497, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 497, "\u4ee3\u8868\u6570\u636e\u6e90": 497, "\u6307\u793a": 497, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 497, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 497, "\u6570\u7ec4\u7b49": 497, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 497, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 497, "\u8f7d\u5165\u6570\u636e": 497, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 497, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 497, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 497, "\u9ed8\u8ba4\u4e3a": 497, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 497, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 497, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 497, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 497, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 497, "\u4e3e\u4e2a\u4f8b\u5b50": 497, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 497, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 497, "\u53ef\u9009\u9879": 497, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 497, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 497, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 497, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 497, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 497, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 497, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 497, "\u6bd4\u5982\u8bf4": 497, "\u5217\u7684\u5217\u540d": 497, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 497, "\u6216\u76ee\u6807\u70b9": 497, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 497, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 497, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 497, "\u4ee3\u8868\u7b2c\u51e0\u5217": 497, "\u4ece0\u5f00\u59cb": 497, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 497, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 497, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 497, "\u7c7b\u4f3c": 497, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 497, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 497, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 497, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 497, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 497, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 497, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 497, "\u8fb9\u7684\u6807\u7b7e\u540d": 497, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 497, "\u4e00\u5217\u5c5e\u6027": 497, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 497, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 497, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 497, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 497, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 497, "\u4e3e\u4f8b\u6765\u8bf4": 497, "\u8d77\u70b9\u7684": 497, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 497, "\u5217\u540d": 497, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 497, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 497, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 497, "\u4e00\u5217\u4e3a\u8d77\u70b9": 497, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 497, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 497, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 497, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 497, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 497, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 497, "\u5982\u679c\u7528\u6237\u7684": 497, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 497, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 497, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 497, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 497, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 497, "\u6709\u4e00\u4e2a\u540d\u4e3a": 497, "\u7684\u8fb9\u6807\u7b7e": 497, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 497, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 497, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 497, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 497, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 497, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 497, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 497, "\u50cf\u8fd9\u6837": 497, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 497, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 497, "\u5728\u8fd9\u91cc": 497, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 497, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 497, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 497, "\u7b49\u7c7b\u578b": 497, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 497, "\u5206\u522b\u4e3a": 497, "\u53ef\u4ee5\u4e3a": 497, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 497, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 497, "\u5f53id\u4e0d\u80fd\u7528": 497, "\u8868\u793a\u65f6": 497, "\u624d\u5e94\u8be5\u4f7f\u7528": 497, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 497, "\u5efa\u8bae\u4f7f\u7528": 497, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 497, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 497, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 497, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 497, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 497, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 497, "\u5c5e\u6027\u56fe\u7684": 497, "\u4f8b\u5b50": 497, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 497, "\u7684\u7c7b": 497, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 497, "\u652f\u6301\u4ece": 497, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 497, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 497, "\u9664\u4e86": 497, "\u5916": 497, "\u5176\u4ed6\u5c5e\u6027": 497, "id\u5217": 497, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 497, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 497, "\u6211\u4eec\u5c06\u5176\u4ee5": 497, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 497, "\u5f53": 497, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 497, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 497, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 497, "\u6807\u51c6": 497, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 497, "\u5c06\u4f1a\u89e3\u6790": 497, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 497, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 497, "\u672c\u5730": 497, "\u6570\u636e\u7531": 497, "\u8d1f\u8d23\u8f7d\u5165": 497, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 497, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 497, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 497, "\u4e4b\u4e8e": 497, "\u6216\u8005\u662f": 497, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 497, "\u6bd4\u5982\u53c2\u7167": 497, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 497, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 497, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 497, "abstractbufferedfil": 497, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 497, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 497, "write\u529f\u80fd": 497, "\u6700\u540e\u901a\u8fc7": 497, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 497, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 498, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 498, "\u5982\u4f55\u8f7d\u56fe": 498, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 498, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 498, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 498, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 498, "\u6211\u4eec\u7528jupyt": 498, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 498, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 498, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 498, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 498, "lab": 498, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 498, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 498}, "objects": {"": [[254, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [254, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [254, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [254, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [254, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [254, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [254, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [254, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [254, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [254, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [254, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [254, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [254, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [254, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [254, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [254, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [254, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [254, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [254, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [254, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [254, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [254, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [254, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [254, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [254, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [254, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [254, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [254, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [254, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [254, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [254, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [254, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [254, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [254, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [254, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [254, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [254, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [254, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [254, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::frag_id"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedELabel::label_id"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::frag_id"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t", "gs::ArrowFragmentLoader::AddDataToExistedVLabel::label_id"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::extend_type"], [254, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi", "gs::ArrowFragmentLoader::ExtendLabelData::frag_id"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [254, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [254, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [254, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [254, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [254, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [254, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [254, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [254, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [254, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [254, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [254, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [254, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [254, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [254, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [254, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [254, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [254, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [254, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [254, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [254, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [254, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [254, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [254, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [254, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [254, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [254, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [254, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [254, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [254, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [254, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [254, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [254, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [254, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [254, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [254, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [254, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [254, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [254, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [254, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [254, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [254, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [254, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [254, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [254, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [254, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [254, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [254, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [254, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [254, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [254, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [254, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [254, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [254, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [254, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [254, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [254, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [254, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [254, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [254, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [254, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [254, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [254, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [254, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [254, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [254, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [254, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [254, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [254, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [254, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [254, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [254, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [254, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [254, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [254, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [254, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [254, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [254, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [254, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [254, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [254, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [254, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [254, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [254, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [254, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [254, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [254, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [254, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [254, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [254, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [254, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [254, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [254, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [254, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [254, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [254, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [254, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [254, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [254, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [254, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [254, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [254, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [254, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [254, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [254, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [254, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [254, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [254, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [254, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [254, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [254, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [254, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [254, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [254, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [254, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [254, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [254, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [254, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [254, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [254, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [254, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [254, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [254, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [254, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [254, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [254, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [254, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [254, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [254, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [254, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [254, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [254, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [254, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [254, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [254, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [254, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [254, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [254, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [254, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [254, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [254, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [254, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [254, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [254, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [254, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [254, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [254, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [254, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [254, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [254, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [254, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [254, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [254, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [254, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [254, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [254, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [254, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [254, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [254, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [254, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [254, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [254, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [254, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [254, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [254, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [254, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [254, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [254, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [254, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [254, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [254, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [254, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [254, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [254, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [254, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [254, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [254, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [254, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [254, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [254, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [254, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [254, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [254, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [254, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [254, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [254, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [254, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [254, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [254, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [254, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [254, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [254, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [254, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [254, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [254, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [254, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [254, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [254, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [254, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [254, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [254, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [254, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [254, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [254, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [254, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [254, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [254, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [254, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [254, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [254, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [254, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [254, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [254, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [254, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [254, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [254, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [254, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [254, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [254, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [254, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [254, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [254, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [254, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [254, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [254, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [254, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [254, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [254, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [254, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [254, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [254, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [254, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [254, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [254, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [254, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [254, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [254, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [254, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [254, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [254, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [254, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [254, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [254, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [254, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [254, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [254, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [254, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [254, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [254, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [254, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [254, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [254, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [254, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [254, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [254, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [254, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [254, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [254, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [254, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [254, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [254, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [254, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [254, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [254, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [254, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [254, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [254, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [254, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [254, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [254, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [254, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [254, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [254, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [254, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [254, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [254, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [254, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [254, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [254, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [254, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [254, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [254, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [254, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [254, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [254, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [254, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [254, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [254, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [254, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [254, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [254, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [254, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [254, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [254, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [254, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [254, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [254, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [254, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [254, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [254, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [254, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [254, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [254, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [254, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [254, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [254, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [254, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [254, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [254, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [254, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [254, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [254, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [254, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [254, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [254, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [254, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [254, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [254, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [254, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [254, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [254, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [254, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [254, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [254, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [254, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [254, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [254, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [254, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[471, 9, 1, "", "Session"], [261, 12, 1, "", "Vertex"], [255, 8, 1, "", "attribute_assortativity_coefficient"], [255, 8, 1, "", "average_degree_connectivity"], [255, 8, 1, "", "average_shortest_path_length"], [255, 8, 1, "", "avg_clustering"], [255, 8, 1, "", "bfs"], [255, 8, 1, "", "cdlp"], [255, 8, 1, "", "clustering"], [262, 8, 1, "", "declare"], [255, 8, 1, "", "degree_assortativity_coefficient"], [255, 8, 1, "", "degree_centrality"], [255, 8, 1, "", "eigenvector_centrality"], [305, 8, 1, "", "g"], [306, 8, 1, "", "get_default_session"], [307, 8, 1, "", "graphlearn"], [308, 8, 1, "", "gremlin"], [309, 8, 1, "", "has_default_session"], [255, 8, 1, "", "hits"], [255, 8, 1, "", "is_simple_path"], [255, 8, 1, "", "k_core"], [255, 8, 1, "", "k_shell"], [255, 8, 1, "", "katz_centrality"], [255, 8, 1, "", "louvain"], [255, 8, 1, "", "lpa"], [255, 8, 1, "", "lpa_u2i"], [255, 8, 1, "", "numeric_assortativity_coefficient"], [255, 8, 1, "", "pagerank"], [255, 8, 1, "", "pagerank_nx"], [310, 14, 1, "", "session"], [311, 8, 1, "", "set_option"], [255, 8, 1, "", "sssp"], [255, 8, 1, "", "triangles"], [255, 8, 1, "", "voterank"], [255, 8, 1, "", "wcc"]], "graphscope.Session": [[471, 10, 1, "", "__enter__"], [471, 10, 1, "", "__exit__"], [471, 10, 1, "", "__init__"], [471, 10, 1, "", "add_lib"], [471, 10, 1, "", "as_default"], [471, 10, 1, "", "close"], [471, 10, 1, "", "connected"], [471, 11, 1, "", "engine_config"], [471, 10, 1, "", "g"], [471, 10, 1, "", "get_config"], [471, 10, 1, "", "get_vineyard_object_mapping_table"], [471, 10, 1, "", "graphlearn"], [471, 11, 1, "", "info"], [471, 10, 1, "", "interactive"], [471, 10, 1, "", "load_from"], [471, 10, 1, "", "restore_from_pvc"], [471, 10, 1, "", "run_fetches"], [471, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[255, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[255, 10, 1, "", "__call__"], [255, 10, 1, "", "__init__"], [255, 10, 1, "", "is_compatible"], [255, 10, 1, "", "signature"]], "graphscope.framework.app": [[255, 9, 1, "", "App"], [255, 9, 1, "", "AppAssets"], [255, 9, 1, "", "AppDAGNode"], [263, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[255, 10, 1, "", "__del__"], [255, 10, 1, "", "__init__"], [255, 11, 1, "", "key"], [255, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[255, 10, 1, "", "__init__"], [255, 11, 1, "", "algo"], [255, 11, 1, "", "context_type"], [255, 11, 1, "", "gar"], [255, 10, 1, "", "is_compatible"], [255, 11, 1, "", "signature"], [255, 11, 1, "", "type"]], "graphscope.framework.context": [[256, 9, 1, "", "BaseContextDAGNode"], [256, 9, 1, "", "Context"], [256, 9, 1, "", "DynamicVertexDataContext"], [256, 9, 1, "", "LabeledVertexDataContextDAGNode"], [256, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [256, 9, 1, "", "ResultDAGNode"], [256, 9, 1, "", "TensorContextDAGNode"], [256, 9, 1, "", "VertexDataContextDAGNode"], [256, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[256, 10, 1, "", "to_dataframe"], [256, 10, 1, "", "to_numpy"], [256, 10, 1, "", "to_vineyard_dataframe"], [256, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[468, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[264, 8, 1, "", "add_column"], [265, 8, 1, "", "add_labels_to_graph"], [266, 8, 1, "", "arrow_to_dynamic"], [267, 8, 1, "", "bind_app"], [268, 8, 1, "", "clear_edges"], [269, 8, 1, "", "clear_graph"], [270, 8, 1, "", "context_to_dataframe"], [271, 8, 1, "", "context_to_numpy"], [272, 8, 1, "", "copy_graph"], [273, 8, 1, "", "create_app"], [274, 8, 1, "", "create_graph"], [275, 8, 1, "", "create_graph_view"], [276, 8, 1, "", "create_loader"], [277, 8, 1, "", "create_subgraph"], [278, 8, 1, "", "create_unload_op"], [279, 8, 1, "", "dynamic_to_arrow"], [280, 8, 1, "", "get_context_data"], [281, 8, 1, "", "graph_to_dataframe"], [282, 8, 1, "", "graph_to_numpy"], [283, 8, 1, "", "gremlin_to_subgraph"], [284, 8, 1, "", "modify_edges"], [285, 8, 1, "", "modify_vertices"], [286, 8, 1, "", "output"], [287, 8, 1, "", "project_arrow_property_graph"], [288, 8, 1, "", "project_to_simple"], [289, 8, 1, "", "report_graph"], [290, 8, 1, "", "run_app"], [291, 8, 1, "", "to_data_sink"], [292, 8, 1, "", "to_directed"], [293, 8, 1, "", "to_undirected"], [294, 8, 1, "", "to_vineyard_dataframe"], [295, 8, 1, "", "to_vineyard_tensor"], [296, 8, 1, "", "unload_app"], [297, 8, 1, "", "unload_context"], [298, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[326, 9, 1, "", "Graph"], [326, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[326, 10, 1, "", "__init__"], [326, 10, 1, "", "add_column"], [326, 10, 1, "", "add_edges"], [326, 10, 1, "", "add_vertices"], [326, 10, 1, "", "consolidate_columns"], [326, 10, 1, "", "detach"], [326, 11, 1, "", "key"], [326, 10, 1, "", "load_from"], [326, 10, 1, "", "loaded"], [326, 10, 1, "", "project"], [326, 10, 1, "", "save_to"], [326, 11, 1, "", "schema"], [326, 11, 1, "", "schema_path"], [326, 11, 1, "", "session_id"], [326, 10, 1, "", "to_dataframe"], [326, 10, 1, "", "to_directed"], [326, 10, 1, "", "to_numpy"], [326, 10, 1, "", "to_undirected"], [326, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[326, 10, 1, "", "__init__"], [326, 10, 1, "", "add_column"], [326, 10, 1, "", "add_edges"], [326, 10, 1, "", "add_vertices"], [326, 10, 1, "", "consolidate_columns"], [326, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[326, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[326, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[326, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[468, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[299, 10, 1, "", "__init__"], [300, 10, 1, "", "as_op_def"], [301, 10, 1, "", "eval"], [302, 11, 1, "", "evaluated"], [303, 11, 1, "", "key"], [304, 11, 1, "", "signature"]], "graphscope.interactive.query": [[327, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[327, 10, 1, "", "__init__"], [327, 10, 1, "", "close"], [327, 11, 1, "", "cypher_driver"], [327, 11, 1, "", "cypher_url"], [327, 10, 1, "", "execute"], [327, 11, 1, "", "graph_url"], [327, 11, 1, "", "gremlin_client"], [327, 11, 1, "", "gremlin_url"], [327, 11, 1, "", "object_id"], [327, 11, 1, "", "session"], [327, 11, 1, "", "session_id"], [327, 10, 1, "", "subgraph"], [327, 10, 1, "", "submit"], [327, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[328, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[328, 10, 1, "", "E"], [328, 10, 1, "", "V"], [328, 10, 1, "", "__init__"], [328, 10, 1, "", "get_handle"]], "graphscope.nx": [[464, 9, 1, "", "DiGraph"], [464, 9, 1, "", "Graph"], [466, 8, 1, "", "read_adjlist"], [466, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[464, 10, 1, "", "__contains__"], [464, 10, 1, "", "__getitem__"], [464, 10, 1, "", "__init__"], [464, 10, 1, "", "__iter__"], [464, 10, 1, "", "__len__"], [464, 10, 1, "", "add_edge"], [464, 10, 1, "", "add_edges_from"], [464, 10, 1, "", "add_node"], [464, 10, 1, "", "add_nodes_from"], [464, 10, 1, "", "add_weighted_edges_from"], [464, 11, 1, "", "adj"], [464, 10, 1, "", "adjacency"], [464, 14, 1, "", "adjlist_inner_dict_factory"], [464, 14, 1, "", "adjlist_outer_dict_factory"], [464, 10, 1, "", "clear"], [464, 10, 1, "", "clear_edges"], [464, 10, 1, "", "copy"], [464, 11, 1, "", "degree"], [464, 14, 1, "", "edge_attr_dict_factory"], [464, 10, 1, "", "edge_subgraph"], [464, 11, 1, "", "edges"], [464, 10, 1, "", "get_edge_data"], [464, 14, 1, "", "graph_attr_dict_factory"], [464, 14, 1, "", "graph_cache_factory"], [464, 11, 1, "", "graph_type"], [464, 10, 1, "", "has_edge"], [464, 10, 1, "", "has_node"], [464, 10, 1, "", "has_predecessor"], [464, 10, 1, "", "has_successor"], [464, 11, 1, "", "in_degree"], [464, 11, 1, "", "in_edges"], [464, 10, 1, "", "is_directed"], [464, 10, 1, "", "is_multigraph"], [464, 11, 1, "", "key"], [464, 11, 1, "", "name"], [464, 10, 1, "", "nbunch_iter"], [464, 10, 1, "", "neighbors"], [464, 14, 1, "", "node_attr_dict_factory"], [464, 14, 1, "", "node_dict_factory"], [464, 11, 1, "", "nodes"], [464, 10, 1, "", "number_of_edges"], [464, 10, 1, "", "number_of_nodes"], [464, 11, 1, "", "op"], [464, 10, 1, "", "order"], [464, 11, 1, "", "out_degree"], [464, 11, 1, "", "out_edges"], [464, 11, 1, "", "pred"], [464, 10, 1, "", "predecessors"], [464, 10, 1, "", "remove_edge"], [464, 10, 1, "", "remove_edges_from"], [464, 10, 1, "", "remove_node"], [464, 10, 1, "", "remove_nodes_from"], [464, 10, 1, "", "reverse"], [464, 11, 1, "", "schema"], [464, 11, 1, "", "session"], [464, 11, 1, "", "session_id"], [464, 10, 1, "", "set_edge_data"], [464, 10, 1, "", "set_node_data"], [464, 11, 1, "", "signature"], [464, 10, 1, "", "size"], [464, 10, 1, "", "subgraph"], [464, 11, 1, "", "succ"], [464, 10, 1, "", "successors"], [464, 10, 1, "", "to_directed"], [464, 10, 1, "", "to_undirected"], [464, 10, 1, "", "to_undirected_class"], [464, 10, 1, "", "update"]], "graphscope.nx.Graph": [[464, 10, 1, "", "__contains__"], [464, 10, 1, "", "__getitem__"], [467, 8, 1, "", "__init__"], [464, 10, 1, "", "__iter__"], [464, 10, 1, "", "__len__"], [467, 8, 1, "", "_convert_arrow_to_dynamic"], [464, 10, 1, "", "add_edge"], [464, 10, 1, "", "add_edges_from"], [464, 10, 1, "", "add_node"], [464, 10, 1, "", "add_nodes_from"], [464, 10, 1, "", "add_weighted_edges_from"], [464, 11, 1, "", "adj"], [464, 10, 1, "", "adjacency"], [464, 14, 1, "", "adjlist_inner_dict_factory"], [464, 14, 1, "", "adjlist_outer_dict_factory"], [464, 10, 1, "", "clear"], [464, 10, 1, "", "clear_edges"], [464, 10, 1, "", "copy"], [464, 11, 1, "", "degree"], [464, 14, 1, "", "edge_attr_dict_factory"], [464, 10, 1, "", "edge_subgraph"], [464, 11, 1, "", "edges"], [464, 10, 1, "", "get_edge_data"], [464, 14, 1, "", "graph_attr_dict_factory"], [464, 14, 1, "", "graph_cache_factory"], [464, 11, 1, "", "graph_type"], [464, 10, 1, "", "has_edge"], [464, 10, 1, "", "has_node"], [464, 10, 1, "", "is_directed"], [464, 10, 1, "", "is_multigraph"], [464, 11, 1, "", "key"], [464, 11, 1, "", "name"], [464, 10, 1, "", "nbunch_iter"], [464, 10, 1, "", "neighbors"], [464, 14, 1, "", "node_attr_dict_factory"], [464, 14, 1, "", "node_dict_factory"], [464, 11, 1, "", "nodes"], [464, 10, 1, "", "number_of_edges"], [464, 10, 1, "", "number_of_nodes"], [464, 11, 1, "", "op"], [464, 10, 1, "", "order"], [464, 10, 1, "", "remove_edge"], [464, 10, 1, "", "remove_edges_from"], [464, 10, 1, "", "remove_node"], [464, 10, 1, "", "remove_nodes_from"], [464, 11, 1, "", "schema"], [464, 11, 1, "", "session"], [464, 11, 1, "", "session_id"], [464, 10, 1, "", "set_edge_data"], [464, 10, 1, "", "set_node_data"], [464, 11, 1, "", "signature"], [464, 10, 1, "", "size"], [464, 10, 1, "", "subgraph"], [464, 10, 1, "", "to_directed"], [464, 10, 1, "", "to_undirected"], [464, 10, 1, "", "to_undirected_class"], [464, 10, 1, "", "update"]], "graphscope.nx.builtin": [[329, 8, 1, "", "average_clustering"], [329, 8, 1, "", "average_shortest_path_length"], [329, 8, 1, "", "bfs_edges"], [329, 8, 1, "", "clustering"], [329, 8, 1, "", "degree_centrality"], [329, 8, 1, "", "eigenvector_centrality"], [329, 8, 1, "", "has_path"], [329, 8, 1, "", "hits"], [329, 8, 1, "", "in_degree_centrality"], [329, 8, 1, "", "k_core"], [329, 8, 1, "", "katz_centrality"], [329, 8, 1, "", "out_degree_centrality"], [329, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[330, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[331, 8, 1, "", "add_cycle"], [332, 8, 1, "", "add_path"], [333, 8, 1, "", "add_star"], [334, 8, 1, "", "all_neighbors"], [335, 8, 1, "", "common_neighbors"], [336, 8, 1, "", "create_empty_copy"], [337, 8, 1, "", "degree"], [338, 8, 1, "", "degree_histogram"], [339, 8, 1, "", "density"], [340, 8, 1, "", "edge_subgraph"], [341, 8, 1, "", "edges"], [342, 8, 1, "", "freeze"], [343, 8, 1, "", "induced_subgraph"], [344, 8, 1, "", "info"], [345, 8, 1, "", "is_directed"], [346, 8, 1, "", "is_empty"], [347, 8, 1, "", "is_frozen"], [348, 8, 1, "", "is_negatively_weighted"], [349, 8, 1, "", "is_weighted"], [350, 8, 1, "", "neighbors"], [351, 8, 1, "", "nodes"], [352, 8, 1, "", "nodes_with_selfloops"], [353, 8, 1, "", "non_edges"], [354, 8, 1, "", "non_neighbors"], [355, 8, 1, "", "number_of_edges"], [356, 8, 1, "", "number_of_nodes"], [357, 8, 1, "", "number_of_selfloops"], [358, 8, 1, "", "selfloop_edges"], [359, 8, 1, "", "subgraph"], [360, 8, 1, "", "to_directed"], [361, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[463, 13, 0, "-", "atlas"], [463, 13, 0, "-", "classic"], [463, 13, 0, "-", "community"], [463, 13, 0, "-", "degree_seq"], [463, 13, 0, "-", "directed"], [463, 13, 0, "-", "duplication"], [463, 13, 0, "-", "ego"], [463, 13, 0, "-", "expanders"], [463, 13, 0, "-", "geometric"], [463, 13, 0, "-", "harary_graph"], [463, 13, 0, "-", "intersection"], [463, 13, 0, "-", "joint_degree_seq"], [463, 13, 0, "-", "mycielski"], [463, 13, 0, "-", "nonisomorphic_trees"], [463, 13, 0, "-", "small"], [463, 13, 0, "-", "social"], [463, 13, 0, "-", "spectral_graph_forge"], [463, 13, 0, "-", "sudoku"], [463, 13, 0, "-", "trees"], [463, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[362, 8, 1, "", "graph_atlas"], [363, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[364, 8, 1, "", "balanced_tree"], [365, 8, 1, "", "barbell_graph"], [366, 8, 1, "", "binomial_tree"], [367, 8, 1, "", "circulant_graph"], [368, 8, 1, "", "circular_ladder_graph"], [369, 8, 1, "", "complete_graph"], [370, 8, 1, "", "complete_multipartite_graph"], [371, 8, 1, "", "cycle_graph"], [372, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [373, 8, 1, "", "empty_graph"], [374, 8, 1, "", "full_rary_tree"], [375, 8, 1, "", "ladder_graph"], [376, 8, 1, "", "lollipop_graph"], [377, 8, 1, "", "null_graph"], [378, 8, 1, "", "path_graph"], [379, 8, 1, "", "star_graph"], [380, 8, 1, "", "trivial_graph"], [381, 8, 1, "", "turan_graph"], [382, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[383, 8, 1, "", "LFR_benchmark_graph"], [384, 8, 1, "", "caveman_graph"], [385, 8, 1, "", "connected_caveman_graph"], [386, 8, 1, "", "gaussian_random_partition_graph"], [387, 8, 1, "", "planted_partition_graph"], [388, 8, 1, "", "random_partition_graph"], [389, 8, 1, "", "relaxed_caveman_graph"], [390, 8, 1, "", "ring_of_cliques"], [391, 8, 1, "", "stochastic_block_model"], [392, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[393, 8, 1, "", "configuration_model"], [394, 8, 1, "", "degree_sequence_tree"], [395, 8, 1, "", "directed_configuration_model"], [396, 8, 1, "", "directed_havel_hakimi_graph"], [397, 8, 1, "", "expected_degree_graph"], [398, 8, 1, "", "havel_hakimi_graph"], [399, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[400, 8, 1, "", "gn_graph"], [401, 8, 1, "", "gnc_graph"], [402, 8, 1, "", "gnr_graph"], [403, 8, 1, "", "random_k_out_graph"], [404, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[405, 8, 1, "", "duplication_divergence_graph"], [406, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[407, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[408, 8, 1, "", "chordal_cycle_graph"], [409, 8, 1, "", "margulis_gabber_galil_graph"], [410, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[411, 8, 1, "", "geographical_threshold_graph"], [412, 8, 1, "", "random_geometric_graph"], [413, 8, 1, "", "soft_random_geometric_graph"], [414, 8, 1, "", "thresholded_random_geometric_graph"], [415, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[416, 8, 1, "", "hkn_harary_graph"], [417, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[418, 8, 1, "", "general_random_intersection_graph"], [419, 8, 1, "", "k_random_intersection_graph"], [420, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[421, 8, 1, "", "directed_joint_degree_graph"], [422, 8, 1, "", "is_valid_directed_joint_degree"], [423, 8, 1, "", "is_valid_joint_degree"], [424, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[425, 8, 1, "", "mycielski_graph"], [426, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[427, 8, 1, "", "nonisomorphic_trees"], [428, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[429, 8, 1, "", "LCF_graph"], [430, 8, 1, "", "bull_graph"], [431, 8, 1, "", "chvatal_graph"], [432, 8, 1, "", "cubical_graph"], [433, 8, 1, "", "desargues_graph"], [434, 8, 1, "", "diamond_graph"], [435, 8, 1, "", "dodecahedral_graph"], [436, 8, 1, "", "frucht_graph"], [437, 8, 1, "", "heawood_graph"], [438, 8, 1, "", "house_graph"], [439, 8, 1, "", "house_x_graph"], [440, 8, 1, "", "icosahedral_graph"], [441, 8, 1, "", "krackhardt_kite_graph"], [442, 8, 1, "", "make_small_graph"], [443, 8, 1, "", "moebius_kantor_graph"], [444, 8, 1, "", "octahedral_graph"], [445, 8, 1, "", "pappus_graph"], [446, 8, 1, "", "petersen_graph"], [447, 8, 1, "", "sedgewick_maze_graph"], [448, 8, 1, "", "tetrahedral_graph"], [449, 8, 1, "", "truncated_cube_graph"], [450, 8, 1, "", "truncated_tetrahedron_graph"], [451, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[452, 8, 1, "", "davis_southern_women_graph"], [453, 8, 1, "", "florentine_families_graph"], [454, 8, 1, "", "karate_club_graph"], [455, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[456, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[457, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[458, 8, 1, "", "prefix_tree"], [459, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[460, 8, 1, "", "triad_graph"]], "networkx.generators": [[463, 13, 0, "-", "internet_as_graphs"], [463, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[461, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[462, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 233, 243, 324, 477, 479], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 233, 312, 329, 479, 481], "all": [0, 31, 32, 36, 41], "pair": 0, "shortest": 0, "path": [0, 226, 228, 230], "length": 0, "attribut": [0, 20, 313, 330], "assort": 0, "averag": 0, "degre": [0, 337, 463], "connect": [0, 29, 30, 221, 229, 477, 484], "between": [0, 226, 473], "central": [0, 17], "breadth": 0, "first": [0, 217], "search": 0, "cdlp": 0, "close": [0, 484], "cluster": [0, 27, 30, 33, 41, 217, 239, 241], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": 0, "katz": 0, "k": 0, "core": 0, "shell": [0, 221], "label": [0, 228, 230, 243, 313, 476, 497], "propag": 0, "lcc": 0, "pagerank": 0, "sampl": [0, 44, 46, 228, 237, 249, 312, 316, 318, 321, 324], "singl": [0, 48, 214], "sourc": [0, 17, 31, 32, 46, 228, 259, 313, 319, 322, 323], "voterank": 0, "wcc": 0, "custom": [1, 23, 27, 44, 45, 48, 220, 477], "aggreg": [1, 226, 228, 230, 234], "local": [1, 7, 32, 36, 38, 41, 219, 220, 228, 235, 236, 240, 242, 476, 477], "vertex": [1, 10, 24, 46, 230, 243, 261, 470, 476, 497], "map": [1, 46, 210, 473], "support": [1, 11, 23, 46, 223, 228, 233], "deploy": [2, 27, 38, 48, 216, 217], "gae": [2, 34, 246, 481, 485], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 203, 217, 477], "onli": [2, 37], "python": [2, 15, 18, 31, 35, 36, 199, 221, 229, 233, 253, 469, 477, 481, 489], "sdk": [2, 16, 34, 125, 199, 205, 229, 257], "helm": [2, 29, 48], "execut": [2, 34, 222, 244], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 45, 46, 47, 48, 204, 213, 214, 216, 222, 225, 226, 230, 233, 234, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 312, 314, 315, 316, 317, 318, 320, 324, 326, 328, 330, 463, 464, 466, 467, 473, 475, 476, 477, 478, 479, 485], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 213, 216, 233, 244, 245, 247, 252, 254, 255, 485], "uninstal": [2, 29, 477], "design": [3, 9, 34, 218, 233, 234, 244, 322, 476], "engin": [3, 4, 7, 9, 10, 12, 24, 31, 36, 44, 216, 220, 233, 235, 236, 240, 241, 242, 244, 252, 254, 476, 485], "dev": [4, 32, 36, 41, 219, 235], "test": [4, 36, 37, 41, 199, 219, 235, 241, 242, 319], "setup": [4, 32], "understand": 4, "codebas": 4, "make": [4, 20], "modif": 4, "build": [4, 17, 32, 36, 41, 219, 235, 259, 312, 319, 477, 497], "faq": [5, 226], "program": [6, 12, 14, 34, 214, 322], "model": [6, 12, 14, 15, 16, 17, 24, 34, 47, 204, 234, 239, 240, 241, 242, 246, 249, 312, 320, 324, 476, 477], "flash": [6, 15, 246], "motiv": [6, 9, 218, 244, 476], "The": [6, 19, 30, 204, 208, 218, 475], "overview": [6, 9, 12, 200, 204, 208, 216, 320, 477], "api": [6, 9, 12, 19, 20, 43, 125, 199, 200, 222, 254, 257, 258, 313, 324, 465, 469, 493], "strong": 6, "express": [6, 228, 230], "implement": [6, 15, 17, 37, 322, 476], "architectur": [6, 12, 218, 473], "optim": [6, 13, 225, 226, 242], "get": [7, 17, 37, 125, 199, 201, 212, 220, 228, 236, 245, 319, 474], "start": [7, 45, 125, 199, 200, 201, 212, 219, 220, 230, 236, 245, 324, 474], "instal": [7, 27, 29, 30, 31, 32, 36, 37, 125, 199, 203, 216, 220, 235, 236, 319, 477, 484], "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 41, 201, 214, 220, 228, 236, 241, 319], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 41, 49, 50, 51, 205, 209, 214, 216, 220, 236, 244, 247, 249, 250, 251, 254, 257, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 473, 475, 485, 489, 493, 494], "what": [7, 14, 220, 226, 236, 247, 249, 250], "": [7, 220, 226, 236, 254], "next": [7, 220, 236, 250], "guid": [8, 35, 36, 49, 227, 238, 477, 481, 482], "exampl": [8, 17, 22, 23, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 227, 228, 238, 481, 482], "ingress": [9, 246], "increment": [9, 12], "messag": [9, 234], "driven": 9, "differenti": 9, "flexibl": [9, 34], "memoiz": 9, "distribut": [9, 214, 314, 322], "runtim": [9, 34, 322], "kei": [10, 204, 222, 226, 233, 303], "concept": [10, 476], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 46, 230, 243, 330, 341, 466, 476, 497], "cut": [10, 476], "vertic": [10, 230, 243, 497], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 20, 461, 462, 465], "compat": [11, 226], "convert": 11, "nx": [11, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460], "oper": [11, 20, 28, 223, 230, 299, 300, 301, 302, 303, 304, 322, 468], "storag": [12, 33, 34, 216, 244, 473, 476], "layer": [12, 244], "grape": [12, 17, 246, 259], "ffi": 12, "comput": [12, 214, 216, 244, 476], "applic": [12, 15, 22, 23, 230, 244, 479], "perform": [13, 19, 34, 226, 233, 252], "tune": 13, "memori": [13, 243, 478], "footprint": 13, "properti": [13, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 204, 223, 226, 228, 230, 243, 475, 476, 497], "data": [13, 45, 46, 47, 48, 125, 199, 214, 217, 223, 226, 243, 313, 320, 323, 324, 475, 477], "structur": [13, 125, 199, 223, 259, 330], "usag": [13, 199, 208, 226, 243], "estim": [13, 472], "pie": [14, 16, 17, 18, 246, 257, 487], "i": [14, 228, 247, 249, 250], "workflow": [14, 233, 473], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 230, 232, 239, 240, 241, 242, 253], "develop": [15, 16, 17, 18, 22, 23, 36, 49, 200, 216, 312, 324, 477, 481], "your": [15, 16, 17, 18, 22, 37, 44, 217, 240, 242, 243, 312, 322, 481], "c": [15, 16, 35, 50, 481], "defin": [15, 16, 240, 241, 242, 322, 473], "A": [15, 204, 216, 225], "function": [15, 18, 241, 242, 255, 257, 312, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 471], "integr": [15, 37, 214, 323], "client": [15, 27, 30, 36, 241, 314, 484], "step": [16, 45, 228, 230, 249], "1": [16, 45, 210, 222, 313, 314, 316, 324], "context": [16, 254, 256, 470], "class": [16, 322, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361], "2": [16, 45, 210, 222, 313, 314, 324, 477], "3": [16, 45, 210, 222, 313, 314, 324, 477], "packag": [16, 31, 32, 241, 319], "4": [16, 210, 222, 313, 324], "gar": 16, "file": [16, 27, 31, 46, 323, 475], "github": [16, 17, 25, 37], "templat": [16, 17], "java": [17, 35, 39, 125, 229, 232, 260, 477, 481], "jar": 17, "own": [17, 18, 22, 217, 243, 312, 322], "prepar": [17, 27, 30, 41, 201, 324], "jdk": [17, 259], "from": [17, 19, 20, 31, 32, 33, 46, 216, 222, 230, 243, 259, 319, 473, 477], "maven": [17, 125], "repositori": 17, "submit": [17, 22, 23, 37, 40], "javasdk": 17, "write": [18, 241, 477], "pregel": [18, 24, 257, 487], "us": [18, 20, 27, 32, 45, 217, 222, 226, 233, 250, 319, 322, 324, 470, 473, 477, 478], "math": [18, 487], "h": [18, 487], "how": [19, 37, 39, 40, 41, 215, 226, 235, 312, 322, 324, 485], "doe": 19, "analysi": [19, 244], "displai": 19, "speed": 19, "up": [19, 27, 30, 33], "over": 19, "creat": [20, 33, 37, 45, 50, 239, 242], "an": [20, 222, 322], "empti": 20, "ad": [20, 243], "node": [20, 48, 234, 239, 240, 241, 242, 330, 351, 477], "examin": 20, "element": 20, "remov": [20, 217], "constructor": 20, "access": 20, "neighbor": [20, 242, 350], "deepcopi": 20, "subgraph": [20, 226, 228, 234, 237, 249, 359], "edge_subgraph": [20, 340], "copi": [20, 31], "direct": [20, 400, 401, 402, 403, 404, 463], "analyz": 20, "object": [20, 255, 256, 314, 326, 468, 471], "transform": [20, 467], "builtin": [21, 255, 329, 468], "giraph": 22, "try": [22, 45, 324], "some": [22, 230], "app": [22, 23, 254, 255, 263], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 30, 48, 217, 477], "along": 23, "spark": 23, "includ": 23, "depend": [23, 31, 32, 319], "toward": 23, "centric": [24, 234], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 37], "discuss": [25, 37], "cloud": [26, 233, 313], "k8": [27, 239, 241, 485], "kubernet": [27, 30, 33, 38, 41, 239, 489, 494], "launch": [27, 240, 241, 242], "default": 27, "paramet": [27, 52, 53, 54, 55, 90, 91, 95, 100, 117, 126, 127, 128, 129, 164, 165, 170, 174, 191, 241, 243], "frequent": [27, 211], "imag": [27, 32, 41, 319, 477], "uri": 27, "specifi": [27, 243], "number": 27, "worker": [27, 254], "provid": 27, "kubeconfig": 27, "other": [27, 45, 125, 217, 243, 323, 477], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 30, 33], "coordin": [28, 36, 42, 43], "configur": [28, 29, 44, 46, 48, 217, 220, 241, 325, 477], "releas": [29, 37], "offlin": [29, 31, 477], "exist": 30, "vineyard": [30, 219, 246, 478], "lifecycl": 30, "load": [30, 46, 222, 230, 239, 240, 241, 242, 243, 473, 475, 477, 478], "dataset": [30, 222, 243, 477], "anoth": 30, "session": [30, 239, 310, 471], "environ": [31, 32, 36, 41, 219, 222, 235], "wheel": [31, 319, 489], "download": [31, 222], "destin": 31, "extract": [31, 230], "them": [31, 243], "locat": 31, "basic": [31, 230, 313], "gcc": 31, "g": [31, 305], "third": 31, "parti": 31, "stabl": 32, "version": 32, "preview": 32, "linux": [32, 489], "maco": [32, 489], "persist": [33, 477], "pv": 33, "pvc": 33, "store": [33, 50, 51, 202, 206, 219, 477], "retor": 33, "framework": [34, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304], "multi": [34, 470], "languag": [34, 204, 318], "high": [34, 233, 244, 477], "librari": [34, 233, 319], "code": [35, 37, 200, 322, 483], "style": [35, 37, 465, 476], "rust": 35, "script": [35, 241, 484], "linter": 35, "checker": 35, "contain": [36, 235], "dep": [36, 235], "target": [36, 41, 243], "compon": 36, "individu": 36, "contribut": 37, "conduct": 37, "commun": [37, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 463], "report": [37, 215], "bug": [37, 215], "request": [37, 40, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 200], "featur": [37, 204, 233, 475, 477], "improv": 37, "document": [37, 125, 199, 200], "chang": [37, 484], "pre": 37, "commit": [37, 477], "minor": 37, "fix": 37, "fork": 37, "branch": [37, 228], "suit": 37, "format": [37, 313, 475, 477], "right": 37, "keep": 37, "pull": [37, 40], "updat": [37, 484], "merg": 37, "pr": 37, "maintain": 37, "ship": 37, "review": 37, "continu": 37, "debug": 38, "find": [38, 485], "log": [38, 473, 477, 485], "command": [38, 200, 208, 484], "techniqu": [38, 243], "instrument": 39, "automat": 39, "rest": [43, 200], "servic": [44, 45, 125, 199, 200, 201, 208, 217, 219, 477], "avail": [44, 477], "new": [45, 322], "import": [45, 46, 241, 477], "column": 46, "csv": 46, "odp": 46, "tabl": [46, 210, 216, 313], "modern": 46, "breakdown": 46, "entiti": 47, "primit": 47, "type": [47, 52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 223, 225, 243, 251, 257, 313, 464, 475], "string": 47, "tempor": 47, "arrai": [47, 476], "docker": [48, 235, 319, 489], "quickstart": 48, "multipl": [48, 226, 230, 243], "valu": [48, 226, 228, 230], "yaml": 48, "interact": [49, 50, 51, 201, 203, 205, 209, 213, 216, 220, 245, 248, 252, 327, 485], "procedur": [50, 51, 202, 206, 208], "turn": 51, "cypher": [51, 201, 202, 204, 221, 223, 233, 248], "queri": [51, 201, 204, 206, 213, 218, 222, 226, 230, 244, 245, 315, 327, 477], "craft": 51, "compil": [51, 200, 202, 206, 319, 322], "enabl": [51, 200, 206], "invok": 51, "adminservicegraphmanagementapi": [52, 126], "createdataloadingjob": 52, "return": [52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191], "author": [52, 53, 54, 55, 90, 91, 100, 117, 125, 126, 127, 128, 129, 164, 165, 174, 191, 199], "http": [52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 200], "header": [52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191], "respons": [52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 200], "detail": [52, 53, 54, 55, 90, 91, 100, 117, 126, 127, 128, 129, 164, 165, 174, 191, 200, 208, 476], "creategraph": [52, 200], "deletegraph": [52, 200], "getgraph": 52, "getgraphstatist": [52, 200], "getschema": 52, "listgraph": [52, 200], "adminservicejobmanagementapi": [53, 127], "deletejobbyid": 53, "getjobbyid": [53, 200], "listjob": 53, "adminserviceproceduremanagementapi": [54, 128], "createprocedur": [54, 200], "deleteprocedur": [54, 200], "getprocedur": [54, 200], "listprocedur": 54, "updateprocedur": [54, 200], "adminserviceservicemanagementapi": [55, 129], "getservicestatu": 55, "restartservic": [55, 200], "startservic": [55, 200], "stopservic": [55, 200], "baseedgetyp": [56, 130], "baseedgetypevertextypepairrelationsinn": [57, 131], "enum": [57, 58, 67, 82, 84, 87, 93, 96, 102, 103, 108], "relationenum": 57, "baseedgetypevertextypepairrelationsinnerxcsrparam": [58, 132], "edgestoragestrategyenum": 58, "basepropertymeta": [59, 133], "basevertextyp": [60, 134], "basevertextypexcsrparam": [61, 135], "columnmap": [62, 136], "createedgetyp": [63, 137], "creategraphrequest": [64, 138], "creategraphrespons": [65, 139], "creategraphschemarequest": [66, 140], "createprocedurerequest": [67, 141], "typeenum": [67, 87, 108], "createprocedurerespons": [68, 142], "createpropertymeta": [69, 143], "createvertextyp": [70, 144], "datetyp": [71, 145], "edgedata": [72, 146], "edgemap": [73, 147], "edgemappingdestinationvertexmappingsinn": [74, 148], "edgemappingsourcevertexmappingsinn": [75, 149], "edgemappingsourcevertexmappingsinnercolumn": [76, 150], "edgemappingtypetriplet": [77, 151], "edgerequest": [78, 152], "edgestatist": [79, 153], "fixedchar": [80, 154], "fixedcharchar": [81, 155], "gsdatatyp": [82, 156], "primitivetypeenum": [82, 96], "getedgetyp": [83, 157], "getgraphrespons": [84, 158], "storetypeenum": 84, "getgraphschemarespons": [85, 159], "getgraphstatisticsrespons": [86, 160], "getprocedurerespons": [87, 161], "getpropertymeta": [88, 162], "getvertextyp": [89, 163], "graphserviceedgemanagementapi": [90, 164], "addedg": 90, "deleteedg": 90, "getedg": 90, "updateedg": 90, "graphservicevertexmanagementapi": [91, 165], "addvertex": 91, "deletevertex": 91, "getvertex": 91, "updatevertex": 91, "jobrespons": [92, 166], "jobstatu": [93, 167], "statusenum": 93, "longtext": [94, 168], "primitivetyp": [96, 171], "propertyarrai": [98, 172], "queryrequest": [99, 173], "queryserviceapi": [100, 174], "proccal": 100, "proccallcurr": 100, "schemamap": [101, 175], "schemamappingloadingconfig": [102, 176], "importoptionenum": 102, "schemamappingloadingconfigdatasourc": [103, 177], "schemeenum": 103, "schemamappingloadingconfigformat": [104, 178], "schemamappingloadingconfigxcsrparam": [105, 179], "servicestatu": [106, 180, 200], "startservicerequest": [107, 181], "storedproceduremeta": [108, 182], "stringtyp": [109, 183], "stringtypestr": [110, 184], "temporaltyp": [111, 185], "temporaltypetempor": [112, 186], "timestamptyp": [113, 187], "typedvalu": [114, 188], "updateprocedurerequest": [115, 189], "uploadfilerespons": [116, 190], "utilsapi": [117, 191], "uploadfil": 117, "varchar": [118, 192], "varcharvarchar": [119, 193], "vertexdata": [120, 194], "vertexmap": [121, 195], "vertexrequest": [122, 196], "vertexstatist": [123, 197], "vertextypepairstatist": [124, 198], "refer": [125, 199, 216, 254, 258, 260, 469, 476], "requir": [125, 199], "user": [125, 232, 253, 313, 481, 482], "gs_interact": [126, 127, 128, 129, 164, 165, 174, 191], "create_dataloading_job": 126, "create_graph": [126, 274], "delete_graph": 126, "get_graph": 126, "get_graph_statist": 126, "get_schema": 126, "list_graph": 126, "delete_job_by_id": 127, "get_job_by_id": 127, "list_job": 127, "create_procedur": 128, "delete_procedur": 128, "get_procedur": 128, "list_procedur": 128, "update_procedur": 128, "get_service_statu": 129, "restart_servic": 129, "start_servic": 129, "stop_servic": 129, "add_edg": 164, "delete_edg": 164, "get_edg": 164, "update_edg": 164, "add_vertex": 165, "delete_vertex": 165, "get_vertex": 165, "update_vertex": 165, "modelproperti": 169, "proc_cal": 174, "proc_call_curr": 174, "upload_fil": 191, "pip": [199, 319], "setuptool": 199, "For": [199, 224, 231, 476], "introduct": [200, 210, 228, 316], "graphmanag": 200, "categori": 200, "descript": 200, "curl": 200, "expect": 200, "statu": [200, 201], "getgraphschema": 200, "getgraphmeta": 200, "importgraph": 200, "proceduremanag": 200, "listallprocedur": 200, "servicemanag": 200, "systemmetr": 200, "nodemetr": 200, "jobmanag": 200, "getalljob": 200, "canceljobbyid": 200, "adminservic": 200, "error": [200, 483], "manag": 201, "initi": 201, "stop": [201, 216, 245], "restart": [201, 477], "check": 201, "destroi": [201, 477], "gremlin": [201, 202, 204, 226, 228, 229, 230, 233, 248, 308, 495], "glossari": [202, 246], "solid": 204, "foundat": 204, "limit": [204, 228, 230, 250, 477], "disabl": 206, "view": [206, 477], "tool": [207, 208], "administr": 208, "root": 208, "databas": [208, 251], "arrowfrag": 210, "0": [210, 222], "\u672f\u8bed": 210, "\u8f7d\u56fe": [210, 497], "\u521d\u59cb\u5316partition": 210, "\u6784\u5efa\u539f\u59cbarrow": 210, "shuffl": 210, "vtabl": 210, "\u6784\u5efavertex": 210, "basicarrowvertexmapbuild": 210, "5": [210, 222, 313], "\u6784\u5efafragment\u51c6\u5907": 210, "\u5904\u7406edg": 210, "basicevfragmentload": 210, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 210, "basicarrowfragmentbuild": 210, "6": 210, "fragment\u6784\u5efa": 210, "\u8bbf\u95eefragment": 210, "\u8bbf\u95ee\u9876\u70b9": 210, "\u8bbf\u95ee\u5185\u90e8\u70b9": 210, "\u8303\u56f4\u5916\u90e8\u70b9": 210, "\u8bbf\u95ee\u5168\u90e8\u70b9": 210, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 210, "\u8bbf\u95ee\u8fb9": 210, "\u8bbf\u95ee\u51fa\u8fb9": 210, "\u8bbf\u95ee\u5165\u8fb9": 210, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 210, "ask": 211, "question": [211, 222], "gle": [212, 234, 482, 485], "workload": [213, 247, 248, 249, 251, 473], "learn": [213, 216, 234, 235, 236, 240, 242, 244, 245, 249, 251, 312, 320, 328, 485], "scientist": 214, "challeng": [214, 247, 249], "handl": [214, 251], "solut": 214, "machin": [214, 240, 242], "pydata": 214, "ecosystem": [214, 224, 231], "One": [216, 245, 470], "larg": [216, 243, 247, 249], "scale": [216, 480], "system": [216, 251, 323, 325], "alibaba": [216, 313], "flex": [216, 258], "troubleshoot": [216, 477], "util": [216, 484], "indic": 216, "standalon": 217, "gie": [217, 218, 219, 220, 221, 222, 224, 225, 226, 229, 231, 246, 485], "process": [218, 240, 241, 245, 251, 312, 477], "manual": [219, 243], "instanc": [220, 477], "via": [221, 229], "driver": 221, "llm": 222, "assist": 222, "set": [222, 241], "endpoint": 222, "gener": [222, 225, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463], "sentenc": 222, "construct": [223, 324], "claus": 223, "neo4j": [224, 248], "tinkerpop": [224, 226, 231, 248, 495], "rule": 225, "base": [225, 234], "rbo": 225, "filtermatchrul": 225, "degreefusionrul": 225, "notmatchtoantijoinrul": 225, "fieldtrimrul": 225, "cost": 225, "cbo": 225, "infer": [225, 233], "constraint": 226, "differ": [226, 470], "inner": 226, "id": [226, 228, 230, 476], "expand": [226, 228, 408, 409, 410, 463], "filter": [226, 228, 230], "like": 226, "sql": 226, "group": [226, 228, 230], "appropri": 226, "index": 226, "standard": [228, 475], "v": 228, "e": 228, "out": [228, 230, 324], "inE": [228, 230], "both": [228, 230], "outv": [228, 230], "inv": [228, 230], "otherv": [228, 230], "bothv": [228, 230], "hasid": [228, 230], "haslabel": 228, "ha": 228, "hasnot": 228, "where": [228, 230], "travers": [228, 230, 233, 237, 248, 317], "predic": 228, "dedup": [228, 230], "project": [228, 230, 259], "constant": [228, 230], "valuemap": [228, 230], "elementmap": 228, "select": [228, 230], "count": 228, "fold": [228, 230], "sum": [228, 230], "min": [228, 230], "max": [228, 230], "mean": [228, 230], "groupcount": [228, 230], "h3": 228, "order": [228, 230, 476], "statist": 228, "coin": 228, "union": 228, "match": [228, 230, 248], "ident": 228, "unfold": 228, "syntact": [228, 230], "sugar": [228, 230], "pathexpand": 228, "endv": 228, "properit": 228, "To": 228, "Will": 228, "Not": 228, "repeat": 228, "sideeffect": 228, "consol": [229, 495], "ldbc": 230, "retriev": [230, 476], "appli": [230, 249], "real": 230, "expans": 230, "mani": 230, "point": 230, "after": 230, "pattern": [230, 248], "relat": [230, 243, 473], "syntax": 230, "complex": 230, "bi2": 230, "bi3": 230, "bi4": 230, "left": 230, "part": 230, "bi11": 230, "bi14": 230, "apach": [231, 495], "eas": 233, "interfac": [233, 322, 323, 476], "extens": 233, "gnn": [233, 239, 249, 324, 491], "train": [233, 239, 240, 241, 242, 249, 312], "nativ": 233, "across": 233, "orchestr": 233, "paradigm": [234, 249], "egograph": 234, "pass": 234, "pipelin": 234, "neighborhood": 237, "neg": [237, 321], "gsl": [237, 318], "classif": [239, 240, 241, 242], "neural": [239, 249], "network": [239, 249, 463], "egographsag": 240, "pyg": [241, 242], "server": [241, 314, 484], "pod": 241, "loader": [241, 243, 326, 497], "main": 241, "evalu": [242, 302], "loaderfor": 242, "valid": 242, "graphsag": 242, "advanc": 243, "deduc": 243, "when": 243, "ambigu": 243, "put": [243, 313], "togeth": [243, 313], "panda": [243, 497], "numpi": [243, 497], "variant": 243, "tip": 243, "reduc": 243, "consumpt": 243, "unifi": [244, 476], "platform": 244, "disaggreg": 244, "divers": 244, "bi": 244, "qp": 244, "task": 245, "quick": [245, 324], "gart": [246, 473], "grin": [246, 476], "graphar": [246, 475], "groot": [246, 477, 485], "gum": 246, "maxgraph": 246, "deprec": 246, "v6d": 246, "gaia": 246, "pegasu": 246, "can": [247, 249], "do": [247, 249], "typic": 249, "introduc": 250, "why": 250, "ar": 250, "case": 250, "posit": 251, "compar": 251, "variou": 251, "benchmark": 252, "result": [252, 470], "gpu": 252, "reproduc": 252, "fragment": 254, "appasset": 255, "javaapp": 255, "cython": 257, "about": 259, "javadoc": 260, "declar": 262, "load_app": 263, "dag_util": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298], "add_column": 264, "add_labels_to_graph": 265, "arrow_to_dynam": 266, "bind_app": 267, "clear_edg": 268, "clear_graph": 269, "context_to_datafram": 270, "context_to_numpi": 271, "copy_graph": 272, "create_app": 273, "create_graph_view": 275, "create_load": 276, "create_subgraph": 277, "create_unload_op": 278, "dynamic_to_arrow": 279, "get_context_data": 280, "graph_to_datafram": 281, "graph_to_numpi": 282, "gremlin_to_subgraph": 283, "modify_edg": 284, "modify_vertic": 285, "output": 286, "project_arrow_property_graph": 287, "project_to_simpl": 288, "report_graph": 289, "run_app": 290, "to_data_sink": 291, "to_direct": [292, 360], "to_undirect": [293, 361], "to_vineyard_datafram": 294, "to_vineyard_tensor": 295, "unload_app": 296, "unload_context": 297, "unload_graph": 298, "__init__": 299, "as_op_def": 300, "eval": 301, "signatur": 304, "get_default_sess": 306, "graphlearn": 307, "has_default_sess": 309, "set_opt": 311, "encod": [312, 320], "loss": 312, "weight": 313, "maxcomput": 313, "describ": 314, "topologi": 314, "stand": 314, "alon": 314, "mode": [314, 484], "tensorflow": 319, "git": 319, "clone": 322, "regist": [322, 323], "bytestreamaccessfil": 323, "structuredaccessfil": 323, "writablefil": 323, "scheme": 323, "gl": 324, "self": 330, "loop": 330, "freez": [330, 342], "add_cycl": 331, "add_path": 332, "add_star": 333, "all_neighbor": 334, "common_neighbor": 335, "create_empty_copi": 336, "degree_histogram": 338, "densiti": 339, "induced_subgraph": 343, "info": 344, "is_direct": 345, "is_empti": 346, "is_frozen": 347, "is_negatively_weight": 348, "is_weight": 349, "nodes_with_selfloop": 352, "non_edg": 353, "non_neighbor": 354, "number_of_edg": 355, "number_of_nod": 356, "number_of_selfloop": 357, "selfloop_edg": 358, "atla": [362, 363, 463], "graph_atla": 362, "graph_atlas_g": 363, "classic": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 463], "balanced_tre": 364, "barbell_graph": 365, "binomial_tre": 366, "circulant_graph": 367, "circular_ladder_graph": 368, "complete_graph": 369, "complete_multipartite_graph": 370, "cycle_graph": 371, "dorogovtsev_goltsev_mendes_graph": 372, "empty_graph": 373, "full_rary_tre": 374, "ladder_graph": 375, "lollipop_graph": 376, "null_graph": 377, "path_graph": 378, "star_graph": 379, "trivial_graph": 380, "turan_graph": 381, "wheel_graph": 382, "lfr_benchmark_graph": 383, "caveman_graph": 384, "connected_caveman_graph": 385, "gaussian_random_partition_graph": 386, "planted_partition_graph": 387, "random_partition_graph": 388, "relaxed_caveman_graph": 389, "ring_of_cliqu": 390, "stochastic_block_model": 391, "windmill_graph": 392, "degree_seq": [393, 394, 395, 396, 397, 398, 399], "configuration_model": 393, "degree_sequence_tre": 394, "directed_configuration_model": 395, "directed_havel_hakimi_graph": 396, "expected_degree_graph": 397, "havel_hakimi_graph": 398, "random_degree_sequence_graph": 399, "gn_graph": 400, "gnc_graph": 401, "gnr_graph": 402, "random_k_out_graph": 403, "scale_free_graph": 404, "duplic": [405, 406, 463], "duplication_divergence_graph": 405, "partial_duplication_graph": 406, "ego": [407, 463], "ego_graph": 407, "chordal_cycle_graph": 408, "margulis_gabber_galil_graph": 409, "paley_graph": 410, "geometr": [411, 412, 413, 414, 415, 463], "geographical_threshold_graph": 411, "random_geometric_graph": 412, "soft_random_geometric_graph": 413, "thresholded_random_geometric_graph": 414, "waxman_graph": 415, "harary_graph": [416, 417], "hkn_harary_graph": 416, "hnm_harary_graph": 417, "intersect": [418, 419, 420, 463], "general_random_intersection_graph": 418, "k_random_intersection_graph": 419, "uniform_random_intersection_graph": 420, "joint_degree_seq": [421, 422, 423, 424], "directed_joint_degree_graph": 421, "is_valid_directed_joint_degre": 422, "is_valid_joint_degre": 423, "joint_degree_graph": 424, "mycielski": [425, 426, 463], "mycielski_graph": 425, "mycielskian": 426, "nonisomorphic_tre": [427, 428], "number_of_nonisomorphic_tre": 428, "small": [429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 463], "lcf_graph": 429, "bull_graph": 430, "chvatal_graph": 431, "cubical_graph": 432, "desargues_graph": 433, "diamond_graph": 434, "dodecahedral_graph": 435, "frucht_graph": 436, "heawood_graph": 437, "house_graph": 438, "house_x_graph": 439, "icosahedral_graph": 440, "krackhardt_kite_graph": 441, "make_small_graph": 442, "moebius_kantor_graph": 443, "octahedral_graph": 444, "pappus_graph": 445, "petersen_graph": 446, "sedgewick_maze_graph": 447, "tetrahedral_graph": 448, "truncated_cube_graph": 449, "truncated_tetrahedron_graph": 450, "tutte_graph": 451, "social": [452, 453, 454, 455, 463], "davis_southern_women_graph": 452, "florentine_families_graph": 453, "karate_club_graph": 454, "les_miserables_graph": 455, "spectral_graph_forg": 456, "sudoku": [457, 463], "sudoku_graph": 457, "tree": [458, 459, 463], "prefix_tre": 458, "random_tre": 459, "triad": [460, 463], "triad_graph": 460, "internet_as_graph": 461, "random_internet_as_graph": 461, "stochast": [462, 463], "stochastic_graph": 462, "diverg": 463, "sequenc": 463, "AS": 463, "spectral": 463, "non": 463, "isomorph": 463, "joint": 463, "harari": 463, "digraph": 464, "read": 466, "list": [466, 476], "adjac": 466, "selector": 470, "tensorcontext": 470, "vertexdatacontext": 470, "labeledvertexdatacontext": 470, "vertexpropertycontext": 470, "labeledvertexpropertycontext": 470, "method": 470, "dimension": 470, "rang": 470, "resourc": 472, "bridg": 473, "gap": 473, "oltp": 473, "inform": 475, "save": 475, "predefin": 476, "macro": 476, "partit": [476, 477, 480], "strategi": 476, "guidelin": 476, "handler": 476, "iter": 476, "master": 476, "mirror": 476, "complet": 476, "natur": 476, "trait": 476, "known": 477, "artifacthub": 477, "directori": 477, "common": 477, "modifi": 477, "j": 477, "realtim": 477, "secondari": 477, "trace": 477, "In": 478, "immut": 478, "bind": 479, "repartit": 480, "fennel": 480, "xtrapulp": 480, "hybrid": 480, "line": 484, "gsctl": 484, "scope": 484, "monitor": 486, "\u56fe\u5206\u6790\u5f15\u64ce": 487, "\u5185\u7f6e\u7b97\u6cd5": 487, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 487, "\u4f7f\u7528": 487, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 487, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 487, "\u4e2d\u7684\u51fd\u6570": 487, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 487, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 487, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 487, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 487, "\u90e8\u7f72": 488, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 488, "\u5728aw": 488, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 488, "\u672c\u5730\u90e8\u7f72graphscop": 488, "\u5f00\u53d1\u8005\u6307\u5357": 489, "\u57fa\u4e8e": [489, 494], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 489, "\u6784\u5efa": 489, "\u4ee3\u7801\u98ce\u683c": 489, "\u5e38\u89c1\u95ee\u9898": 490, "\u5feb\u901f\u4e0a\u624b": 491, "\u793a\u4f8b": 491, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 491, "\u521b\u5efa\u4f1a\u8bdd": 491, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 491, "\u56fe\u5206\u6790": 491, "\u56fe\u795e\u7ecf\u7f51\u7edc": 491, "\u5173\u95ed\u4f1a\u8bdd": 491, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 492, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 492, "\u6295\u5f71": 492, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 492, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 492, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 493, "\u76ee\u5f55": [493, 498], "\u53c2\u8003": 493, "\u7d22\u5f15": 493, "\u5b89\u88c5": 494, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 494, "\u5ba2\u6237\u7aef": 494, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 495, "\u5229\u7528python": 495, "\u8fde\u63a5graphscop": 495, "\u5229\u7528java": 495, "\u5f00\u53d1\u63a7\u5236\u53f0": 495, "gremlin\u7f16\u7a0b\u5165\u95e8": 495, "101": 495, "\u56fe\u6570\u636e\u6a21\u578b": 495, "\u67e5\u8be2\u8bed\u8a00": 495, "\u4e00\u4e2a\u4f8b\u5b50": 495, "gremlin\u517c\u5bb9\u6027": 495, "\u5bf9\u6bd4tinkerpop": 495, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 495, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 495, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 495, "\u5df2\u77e5\u9650\u5236": 495, "\u56fe\u5b66\u4e60\u5f15\u64ce": 496, "\u56fe\u5b66\u4e60\u6a21\u578b": 496, "\u6570\u636e\u6a21\u578b": 496, "\u7f16\u7801\u5668": 496, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 496, "\u91c7\u6837": 496, "\u56fe\u6570\u636e\u6d41": 496, "\u6a21\u578b": 496, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 496, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 497, "\u624b\u52a8\u914d\u7f6e\u56fe": 497, "vid_field": 497, "src_label": 497, "dst_label": 497, "src_field": 497, "dst_field": 497, "\u9ad8\u7ea7\u7528\u6cd5": 497, "\u6ca1\u6709\u6b67\u4e49\u65f6": 497, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 497, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 497, "\u591a\u79cd\u8fb9\u5173\u7cfb": 497, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 497, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 497, "\u5b8c\u6574\u7684\u793a\u4f8b": 497, "\u4ece": 497, "\u6216": 497, "\u4e2d\u8f7d\u56fe": 497, "\u7684\u53d8\u79cd": 497, "\u5165\u95e8\u6559\u7a0b": 498}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "CDLP": [[0, "cdlp"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LCC": [[0, "lcc"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [203, "prerequisites"], [217, "prerequisites"], [477, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null]], "Dev and Test": [[4, "dev-and-test"], [219, "dev-and-test"], [235, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [244, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [204, "overview"], [208, "overview"], [216, null], [320, "overview"], [477, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [125, "getting-started"], [199, "getting-started"], [201, "getting-started"], [220, "getting-started"], [236, "getting-started"], [245, "getting-started"], [474, "getting-started"]], "Installation": [[7, "installation"], [29, "installation"], [125, "installation"], [203, "installation"], [220, "installation"], [236, "installation"], [477, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [220, "whats-the-next"], [236, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [227, "guide-and-examples"], [238, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with GitHub Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Get from Maven Central Repository": [[17, "get-from-maven-central-repository"]], "Build from source": [[17, "build-from-source"], [319, "build-from-source"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with GitHub Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetworkX APIs": [[19, "tutorial-graph-algorithms-with-networkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetworkX APIs": [[20, "tutorial-graph-operations-with-networkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"], [243, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [37, "slack"]], "Discussion on GitHub": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [41, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope Operator": [[28, "deploy-graphscope-operator"]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Deploy GraphScope with helm": [[29, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Configuration": [[29, "configuration"]], "Offline Installation": [[29, "offline-installation"]], "Deploy with Existing Vineyard Cluster": [[30, "deploy-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[30, "cleaning-up"]], "Install GraphScope in offline environment": [[31, "install-graphscope-in-offline-environment"]], "Install from wheels": [[31, "install-from-wheels"]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[32, "install-graphscope-on-local"]], "Install from packages": [[32, "install-from-packages"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[32, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[33, "retore-graphs-from-the-pvc"]], "Clean up": [[33, "clean-up"]], "Design of GAE": [[34, "design-of-gae"]], "Graph Storage": [[34, "graph-storage"]], "Execution Framework": [[34, "execution-framework"]], "Flexible programming models": [[34, "flexible-programming-models"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "High-performance runtime": [[34, "high-performance-runtime"]], "Algorithm Library": [[34, "algorithm-library"]], "Code Style Guide": [[35, "code-style-guide"]], "C++ Style": [[35, "c-style"]], "Python Style": [[35, "python-style"]], "Rust Style": [[35, "rust-style"]], "Java Style": [[35, "java-style"]], "Script Style": [[35, "script-style"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "Development Guide": [[36, "development-guide"]], "Dev Environment": [[36, "dev-environment"], [41, "dev-environment"], [219, "dev-environment"], [235, "dev-environment"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Install deps on local": [[36, "install-deps-on-local"], [235, "install-deps-on-local"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [41, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Python Client": [[36, "build-python-client"]], "How to Contribute": [[37, "how-to-contribute"]], "Code of Conduct": [[37, "code-of-conduct"]], "Community": [[37, "community"], [463, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[37, "github-discussion"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Requesting Features": [[37, "requesting-features"]], "Improving Documentation": [[37, "improving-documentation"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[37, "install-pre-commit"]], "Minor Fixes": [[37, "minor-fixes"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Debugging on local deployment": [[38, "debugging-on-local-deployment"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Debugging Techniques": [[38, "debugging-techniques"]], "How to instrument": [[39, "how-to-instrument"]], "Java": [[39, "java"], [477, "java"], [477, "id2"]], "Automatic instrument": [[39, "automatic-instrument"]], "How to Submit Pull-requests": [[40, "how-to-submit-pull-requests"]], "How to Test": [[41, "how-to-test"], [235, "how-to-test"]], "Test GraphScope on local": [[41, "test-graphscope-on-local"]], "Run tests": [[41, "run-tests"], [41, "id1"]], "Test GraphScope on Kubernetes cluster": [[41, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[41, "build-images"]], "Coordinator": [[42, "coordinator"]], "Coordinator RESTFul API": [[43, "coordinator-restful-api"]], "Engine Configuration": [[44, "engine-configuration"]], "Customizing Your Service Configuration": [[44, "customizing-your-service-configuration"]], "Sample Configuration": [[44, "sample-configuration"]], "Available Configurations": [[44, "available-configurations"]], "Service configurations": [[44, "service-configurations"]], "Using Custom Graph": [[45, "using-custom-graph"]], "Step 1: Create a New Graph": [[45, "step-1-create-a-new-graph"]], "Step 2: Import Graph Data": [[45, "step-2-import-graph-data"]], "Step 3: Start the Service with the New Graph": [[45, "step-3-start-the-service-with-the-new-graph"]], "Try other graphs": [[45, "try-other-graphs"]], "Data Import Configuration": [[46, "data-import-configuration"]], "Supported data source": [[46, "supported-data-source"]], "Column mapping": [[46, "column-mapping"]], "Import from CSV": [[46, "import-from-csv"]], "Import from ODPS Table": [[46, "import-from-odps-table"]], "Sample Configuration for loading \u201cModern\u201d Graph from csv files": [[46, "sample-configuration-for-loading-modern-graph-from-csv-files"]], "Sample configuration for loading \u201cModern Graph\u201d from odps tables": [[46, "sample-configuration-for-loading-modern-graph-from-odps-tables"]], "Configuration Breakdown": [[46, "configuration-breakdown"]], "Loading Configurations": [[46, "loading-configurations"]], "Vertex Mappings": [[46, "vertex-mappings"]], "Edge Mappings": [[46, "edge-mappings"]], "Data Model": [[47, "data-model"]], "Graph Data": [[47, "graph-data"]], "Entity Data": [[47, "entity-data"]], "Primitive Types": [[47, "primitive-types"]], "String Types": [[47, "string-types"]], "Temporal types": [[47, "temporal-types"]], "Array Types": [[47, "array-types"]], "Deployment": [[48, "deployment"]], "Deploy with docker": [[48, "deploy-with-docker"]], "Deploy with helm": [[48, "deploy-with-helm"]], "QuickStart": [[48, "quickstart"]], "Customizing Configuration": [[48, "customizing-configuration"]], "Customize Graph Data.": [[48, "customize-graph-data"]], "Single Node": [[48, "single-node"]], "Multiple nodes": [[48, "multiple-nodes"]], "Customize Values.yaml": [[48, "customize-values-yaml"]], "GraphScope Interactive Development guide": [[49, "graphscope-interactive-development-guide"]], "Create c++ Stored Procedures on GraphScope Interactive": [[50, "create-c-stored-procedures-on-graphscope-interactive"]], "Turning Cypher Queries into Stored Procedures with GraphScope Interactive": [[51, "turning-cypher-queries-into-stored-procedures-with-graphscope-interactive"]], "Crafting a Cypher Stored Procedure": [[51, "crafting-a-cypher-stored-procedure"]], "Compiling and Enabling the Stored Procedure": [[51, "compiling-and-enabling-the-stored-procedure"]], "Invoking the Cypher Stored Procedure": [[51, "invoking-the-cypher-stored-procedure"]], "AdminServiceGraphManagementApi": [[52, "adminservicegraphmanagementapi"]], "createDataloadingJob": [[52, "createdataloadingjob"]], "Example": [[52, "example"], [52, "id1"], [52, "id7"], [52, "id13"], [52, "id19"], [52, "id25"], [52, "id31"], [53, "example"], [53, "id1"], [53, "id7"], [54, "example"], [54, "id1"], [54, "id7"], [54, "id13"], [54, "id19"], [55, "example"], [55, "id1"], [55, "id7"], [55, "id13"], [90, "example"], [90, "id1"], [90, "id7"], [90, "id13"], [91, "example"], [91, "id1"], [91, "id7"], [91, "id13"], [100, "example"], [100, "id1"], [117, "example"], [126, "example"], [126, "id1"], [126, "id7"], [126, "id13"], [126, "id19"], [126, "id25"], [126, "id31"], [127, "example"], [127, "id1"], [127, "id7"], [128, "example"], [128, "id1"], [128, "id7"], [128, "id13"], [128, "id19"], [129, "example"], [129, "id1"], [129, "id7"], [129, "id13"], [130, "example"], [131, "example"], [132, "example"], [133, "example"], [134, "example"], [135, "example"], [136, "example"], [137, "example"], [138, "example"], [139, "example"], [140, "example"], [141, "example"], [142, "example"], [143, "example"], [144, "example"], [145, "example"], [146, "example"], [147, "example"], [148, "example"], [149, "example"], [150, "example"], [151, "example"], [152, "example"], [153, "example"], [154, "example"], [155, "example"], [156, "example"], [157, "example"], [158, "example"], [159, "example"], [160, "example"], [161, "example"], [162, "example"], [163, "example"], [164, "example"], [164, "id1"], [164, "id7"], [164, "id13"], [165, "example"], [165, "id1"], [165, "id7"], [165, "id13"], [166, "example"], [167, "example"], [168, "example"], [169, "example"], [170, "example"], [171, "example"], [172, "example"], [173, "example"], [174, "example"], [174, "id1"], [175, "example"], [176, "example"], [177, "example"], [178, "example"], [179, "example"], [180, "example"], [181, "example"], [182, "example"], [183, "example"], [184, "example"], [185, "example"], [186, "example"], [187, "example"], [188, "example"], [189, "example"], [190, "example"], [191, "example"], [192, "example"], [193, "example"], [194, "example"], [195, "example"], [196, "example"], [197, "example"], [198, "example"]], "Parameters": [[52, "parameters"], [52, "id2"], [52, "id8"], [52, "id14"], [52, "id20"], [52, "id26"], [52, "id32"], [53, "parameters"], [53, "id2"], [53, "id8"], [54, "parameters"], [54, "id2"], [54, "id8"], [54, "id14"], [54, "id20"], [55, "parameters"], [55, "id2"], [55, "id8"], [55, "id14"], [90, "parameters"], [90, "id2"], [90, "id8"], [90, "id14"], [91, "parameters"], [91, "id2"], [91, "id8"], [91, "id14"], [100, "parameters"], [100, "id2"], [117, "parameters"], [126, "parameters"], [126, "id2"], [126, "id8"], [126, "id14"], [126, "id20"], [126, "id26"], [126, "id32"], [127, "parameters"], [127, "id2"], [127, "id8"], [128, "parameters"], [128, "id2"], [128, "id8"], [128, "id14"], [128, "id20"], [129, "parameters"], [129, "id2"], [129, "id8"], [129, "id14"], [164, "parameters"], [164, "id2"], [164, "id8"], [164, "id14"], [165, "parameters"], [165, "id2"], [165, "id8"], [165, "id14"], [174, "parameters"], [174, "id2"], [191, "parameters"]], "Return type": [[52, "return-type"], [52, "id3"], [52, "id9"], [52, "id15"], [52, "id21"], [52, "id27"], [52, "id33"], [53, "return-type"], [53, "id3"], [53, "id9"], [54, "return-type"], [54, "id3"], [54, "id9"], [54, "id15"], [54, "id21"], [55, "return-type"], [55, "id3"], [55, "id9"], [55, "id15"], [90, "return-type"], [90, "id3"], [90, "id9"], [90, "id15"], [91, "return-type"], [91, "id3"], [91, "id9"], [91, "id15"], [100, "return-type"], [100, "id3"], [117, "return-type"], [126, "return-type"], [126, "id3"], [126, "id9"], [126, "id15"], [126, "id21"], [126, "id27"], [126, "id33"], [127, "return-type"], [127, "id3"], [127, "id9"], [128, "return-type"], [128, "id3"], [128, "id9"], [128, "id15"], [128, "id21"], [129, "return-type"], [129, "id3"], [129, "id9"], [129, "id15"], [164, "return-type"], [164, "id3"], [164, "id9"], [164, "id15"], [165, "return-type"], [165, "id3"], [165, "id9"], [165, "id15"], [174, "return-type"], [174, "id3"], [191, "return-type"]], "Authorization": [[52, "authorization"], [52, "id4"], [52, "id10"], [52, "id16"], [52, "id22"], [52, "id28"], [52, "id34"], [53, "authorization"], [53, "id4"], [53, "id10"], [54, "authorization"], [54, "id4"], [54, "id10"], [54, "id16"], [54, "id22"], [55, "authorization"], [55, "id4"], [55, "id10"], [55, "id16"], [90, "authorization"], [90, "id4"], [90, "id10"], [90, "id16"], [91, "authorization"], [91, "id4"], [91, "id10"], [91, "id16"], [100, "authorization"], [100, "id4"], [117, "authorization"], [126, "authorization"], [126, "id4"], [126, "id10"], [126, "id16"], [126, "id22"], [126, "id28"], [126, "id34"], [127, "authorization"], [127, "id4"], [127, "id10"], [128, "authorization"], [128, "id4"], [128, "id10"], [128, "id16"], [128, "id22"], [129, "authorization"], [129, "id4"], [129, "id10"], [129, "id16"], [164, "authorization"], [164, "id4"], [164, "id10"], [164, "id16"], [165, "authorization"], [165, "id4"], [165, "id10"], [165, "id16"], [174, "authorization"], [174, "id4"], [191, "authorization"]], "HTTP request headers": [[52, "http-request-headers"], [52, "id5"], [52, "id11"], [52, "id17"], [52, "id23"], [52, "id29"], [52, "id35"], [53, "http-request-headers"], [53, "id5"], [53, "id11"], [54, "http-request-headers"], [54, "id5"], [54, "id11"], [54, "id17"], [54, "id23"], [55, "http-request-headers"], [55, "id5"], [55, "id11"], [55, "id17"], [90, "http-request-headers"], [90, "id5"], [90, "id11"], [90, "id17"], [91, "http-request-headers"], [91, "id5"], [91, "id11"], [91, "id17"], [100, "http-request-headers"], [100, "id5"], [117, "http-request-headers"], [126, "http-request-headers"], [126, "id5"], [126, "id11"], [126, "id17"], [126, "id23"], [126, "id29"], [126, "id35"], [127, "http-request-headers"], [127, "id5"], [127, "id11"], [128, "http-request-headers"], [128, "id5"], [128, "id11"], [128, "id17"], [128, "id23"], [129, "http-request-headers"], [129, "id5"], [129, "id11"], [129, "id17"], [164, "http-request-headers"], [164, "id5"], [164, "id11"], [164, "id17"], [165, "http-request-headers"], [165, "id5"], [165, "id11"], [165, "id17"], [174, "http-request-headers"], [174, "id5"], [191, "http-request-headers"]], "HTTP response details": [[52, "http-response-details"], [52, "id6"], [52, "id12"], [52, "id18"], [52, "id24"], [52, "id30"], [52, "id36"], [53, "http-response-details"], [53, "id6"], [53, "id12"], [54, "http-response-details"], [54, "id6"], [54, "id12"], [54, "id18"], [54, "id24"], [55, "http-response-details"], [55, "id6"], [55, "id12"], [55, "id18"], [90, "http-response-details"], [90, "id6"], [90, "id12"], [90, "id18"], [91, "http-response-details"], [91, "id6"], [91, "id12"], [91, "id18"], [100, "http-response-details"], [100, "id6"], [117, "http-response-details"], [126, "http-response-details"], [126, "id6"], [126, "id12"], [126, "id18"], [126, "id24"], [126, "id30"], [126, "id36"], [127, "http-response-details"], [127, "id6"], [127, "id12"], [128, "http-response-details"], [128, "id6"], [128, "id12"], [128, "id18"], [128, "id24"], [129, "http-response-details"], [129, "id6"], [129, "id12"], [129, "id18"], [164, "http-response-details"], [164, "id6"], [164, "id12"], [164, "id18"], [165, "http-response-details"], [165, "id6"], [165, "id12"], [165, "id18"], [174, "http-response-details"], [174, "id6"], [191, "http-response-details"]], "createGraph": [[52, "creategraph"]], "deleteGraph": [[52, "deletegraph"]], "getGraph": [[52, "getgraph"]], "getGraphStatistic": [[52, "getgraphstatistic"]], "getSchema": [[52, "getschema"]], "listGraphs": [[52, "listgraphs"]], "AdminServiceJobManagementApi": [[53, "adminservicejobmanagementapi"]], "deleteJobById": [[53, "deletejobbyid"]], "getJobById": [[53, "getjobbyid"]], "listJobs": [[53, "listjobs"]], "AdminServiceProcedureManagementApi": [[54, "adminserviceproceduremanagementapi"]], "createProcedure": [[54, "createprocedure"]], "deleteProcedure": [[54, "deleteprocedure"]], "getProcedure": [[54, "getprocedure"]], "listProcedures": [[54, "listprocedures"]], "updateProcedure": [[54, "updateprocedure"]], "AdminServiceServiceManagementApi": [[55, "adminserviceservicemanagementapi"]], "getServiceStatus": [[55, "getservicestatus"]], "restartService": [[55, "restartservice"]], "startService": [[55, "startservice"]], "stopService": [[55, "stopservice"]], "BaseEdgeType": [[56, "baseedgetype"], [130, "baseedgetype"]], "Properties": [[56, "properties"], [57, "properties"], [58, "properties"], [59, "properties"], [60, "properties"], [61, "properties"], [62, "properties"], [63, "properties"], [64, "properties"], [65, "properties"], [66, "properties"], [67, "properties"], [68, "properties"], [69, "properties"], [70, "properties"], [71, "properties"], [72, "properties"], [73, "properties"], [74, "properties"], [75, "properties"], [76, "properties"], [77, "properties"], [78, "properties"], [79, "properties"], [80, "properties"], [81, "properties"], [82, "properties"], [83, "properties"], [84, "properties"], [85, "properties"], [86, "properties"], [87, "properties"], [88, "properties"], [89, "properties"], [92, "properties"], [93, "properties"], [94, "properties"], [95, "properties"], [96, "properties"], [97, "properties"], [98, "properties"], [99, "properties"], [101, "properties"], [102, "properties"], [103, "properties"], [104, "properties"], [105, "properties"], [106, "properties"], [107, "properties"], [108, "properties"], [109, "properties"], [110, "properties"], [111, "properties"], [112, "properties"], [113, "properties"], [114, "properties"], [115, "properties"], [116, "properties"], [118, "properties"], [119, "properties"], [120, "properties"], [121, "properties"], [122, "properties"], [123, "properties"], [124, "properties"], [130, "properties"], [131, "properties"], [132, "properties"], [133, "properties"], [134, "properties"], [135, "properties"], [136, "properties"], [137, "properties"], [138, "properties"], [139, "properties"], [140, "properties"], [141, "properties"], [142, "properties"], [143, "properties"], [144, "properties"], [145, "properties"], [146, "properties"], [147, "properties"], [148, "properties"], [149, "properties"], [150, "properties"], [151, "properties"], [152, "properties"], [153, "properties"], [154, "properties"], [155, "properties"], [156, "properties"], [157, "properties"], [158, "properties"], [159, "properties"], [160, "properties"], [161, "properties"], [162, "properties"], [163, "properties"], [166, "properties"], [167, "properties"], [168, "properties"], [169, "properties"], [170, "properties"], [171, "properties"], [172, "properties"], [173, "properties"], [175, "properties"], [176, "properties"], [177, "properties"], [178, "properties"], [179, "properties"], [180, "properties"], [181, "properties"], [182, "properties"], [183, "properties"], [184, "properties"], [185, "properties"], [186, "properties"], [187, "properties"], [188, "properties"], [189, "properties"], [190, "properties"], [192, "properties"], [193, "properties"], [194, "properties"], [195, "properties"], [196, "properties"], [197, "properties"], [198, "properties"]], "BaseEdgeTypeVertexTypePairRelationsInner": [[57, "baseedgetypevertextypepairrelationsinner"], [131, "baseedgetypevertextypepairrelationsinner"]], "Enum: RelationEnum": [[57, "enum-relationenum"]], "BaseEdgeTypeVertexTypePairRelationsInnerXCsrParams": [[58, "baseedgetypevertextypepairrelationsinnerxcsrparams"], [132, "baseedgetypevertextypepairrelationsinnerxcsrparams"]], "Enum: EdgeStorageStrategyEnum": [[58, "enum-edgestoragestrategyenum"]], "BasePropertyMeta": [[59, "basepropertymeta"], [133, "basepropertymeta"]], "BaseVertexType": [[60, "basevertextype"], [134, "basevertextype"]], "BaseVertexTypeXCsrParams": [[61, "basevertextypexcsrparams"], [135, "basevertextypexcsrparams"]], "ColumnMapping": [[62, "columnmapping"], [136, "columnmapping"]], "CreateEdgeType": [[63, "createedgetype"], [137, "createedgetype"]], "CreateGraphRequest": [[64, "creategraphrequest"], [138, "creategraphrequest"]], "CreateGraphResponse": [[65, "creategraphresponse"], [139, "creategraphresponse"]], "CreateGraphSchemaRequest": [[66, "creategraphschemarequest"], [140, "creategraphschemarequest"]], "CreateProcedureRequest": [[67, "createprocedurerequest"], [141, "createprocedurerequest"]], "Enum: TypeEnum": [[67, "enum-typeenum"], [87, "enum-typeenum"], [108, "enum-typeenum"]], "CreateProcedureResponse": [[68, "createprocedureresponse"], [142, "createprocedureresponse"]], "CreatePropertyMeta": [[69, "createpropertymeta"], [143, "createpropertymeta"]], "CreateVertexType": [[70, "createvertextype"], [144, "createvertextype"]], "DateType": [[71, "datetype"], [145, "datetype"]], "EdgeData": [[72, "edgedata"], [146, "edgedata"]], "EdgeMapping": [[73, "edgemapping"], [147, "edgemapping"]], "EdgeMappingDestinationVertexMappingsInner": [[74, "edgemappingdestinationvertexmappingsinner"], [148, "edgemappingdestinationvertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInner": [[75, "edgemappingsourcevertexmappingsinner"], [149, "edgemappingsourcevertexmappingsinner"]], "EdgeMappingSourceVertexMappingsInnerColumn": [[76, "edgemappingsourcevertexmappingsinnercolumn"], [150, "edgemappingsourcevertexmappingsinnercolumn"]], "EdgeMappingTypeTriplet": [[77, "edgemappingtypetriplet"], [151, "edgemappingtypetriplet"]], "EdgeRequest": [[78, "edgerequest"], [152, "edgerequest"]], "EdgeStatistics": [[79, "edgestatistics"], [153, "edgestatistics"]], "FixedChar": [[80, "fixedchar"], [154, "fixedchar"]], "FixedCharChar": [[81, "fixedcharchar"], [155, "fixedcharchar"]], "GSDataType": [[82, "gsdatatype"], [156, "gsdatatype"]], "Enum: PrimitiveTypeEnum": [[82, "enum-primitivetypeenum"], [96, "enum-primitivetypeenum"]], "GetEdgeType": [[83, "getedgetype"], [157, "getedgetype"]], "GetGraphResponse": [[84, "getgraphresponse"], [158, "getgraphresponse"]], "Enum: StoreTypeEnum": [[84, "enum-storetypeenum"]], "GetGraphSchemaResponse": [[85, "getgraphschemaresponse"], [159, "getgraphschemaresponse"]], "GetGraphStatisticsResponse": [[86, "getgraphstatisticsresponse"], [160, "getgraphstatisticsresponse"]], "GetProcedureResponse": [[87, "getprocedureresponse"], [161, "getprocedureresponse"]], "GetPropertyMeta": [[88, "getpropertymeta"], [162, "getpropertymeta"]], "GetVertexType": [[89, "getvertextype"], [163, "getvertextype"]], "GraphServiceEdgeManagementApi": [[90, "graphserviceedgemanagementapi"]], "addEdge": [[90, "addedge"]], "deleteEdge": [[90, "deleteedge"]], "getEdge": [[90, "getedge"]], "updateEdge": [[90, "updateedge"]], "GraphServiceVertexManagementApi": [[91, "graphservicevertexmanagementapi"]], "addVertex": [[91, "addvertex"]], "deleteVertex": [[91, "deletevertex"]], "getVertex": [[91, "getvertex"]], "updateVertex": [[91, "updatevertex"]], "JobResponse": [[92, "jobresponse"], [166, "jobresponse"]], "JobStatus": [[93, "jobstatus"], [167, "jobstatus"]], "Enum: StatusEnum": [[93, "enum-statusenum"]], "LongText": [[94, "longtext"], [168, "longtext"]], "Parameter": [[95, "parameter"], [170, "parameter"]], "PrimitiveType": [[96, "primitivetype"], [171, "primitivetype"]], "Property": [[97, "property"], [476, "property"]], "PropertyArray": [[98, "propertyarray"], [172, "propertyarray"]], "QueryRequest": [[99, "queryrequest"], [173, "queryrequest"]], "QueryServiceApi": [[100, "queryserviceapi"]], "procCall": [[100, "proccall"]], "procCallCurrent": [[100, "proccallcurrent"]], "SchemaMapping": [[101, "schemamapping"], [175, "schemamapping"]], "SchemaMappingLoadingConfig": [[102, "schemamappingloadingconfig"], [176, "schemamappingloadingconfig"]], "Enum: ImportOptionEnum": [[102, "enum-importoptionenum"]], "SchemaMappingLoadingConfigDataSource": [[103, "schemamappingloadingconfigdatasource"], [177, "schemamappingloadingconfigdatasource"]], "Enum: SchemeEnum": [[103, "enum-schemeenum"]], "SchemaMappingLoadingConfigFormat": [[104, "schemamappingloadingconfigformat"], [178, "schemamappingloadingconfigformat"]], "SchemaMappingLoadingConfigXCsrParams": [[105, "schemamappingloadingconfigxcsrparams"], [179, "schemamappingloadingconfigxcsrparams"]], "ServiceStatus": [[106, "servicestatus"], [180, "servicestatus"], [200, "servicestatus"]], "StartServiceRequest": [[107, "startservicerequest"], [181, "startservicerequest"]], "StoredProcedureMeta": [[108, "storedproceduremeta"], [182, "storedproceduremeta"]], "StringType": [[109, "stringtype"], [183, "stringtype"]], "StringTypeString": [[110, "stringtypestring"], [184, "stringtypestring"]], "TemporalType": [[111, "temporaltype"], [185, "temporaltype"]], "TemporalTypeTemporal": [[112, "temporaltypetemporal"], [186, "temporaltypetemporal"]], "TimeStampType": [[113, "timestamptype"], [187, "timestamptype"]], "TypedValue": [[114, "typedvalue"], [188, "typedvalue"]], "UpdateProcedureRequest": [[115, "updateprocedurerequest"], [189, "updateprocedurerequest"]], "UploadFileResponse": [[116, "uploadfileresponse"], [190, "uploadfileresponse"]], "UtilsApi": [[117, "utilsapi"]], "uploadFile": [[117, "uploadfile"]], "VarChar": [[118, "varchar"], [192, "varchar"]], "VarCharVarChar": [[119, "varcharvarchar"], [193, "varcharvarchar"]], "VertexData": [[120, "vertexdata"], [194, "vertexdata"]], "VertexMapping": [[121, "vertexmapping"], [195, "vertexmapping"]], "VertexRequest": [[122, "vertexrequest"], [196, "vertexrequest"]], "VertexStatistics": [[123, "vertexstatistics"], [197, "vertexstatistics"]], "VertexTypePairStatistics": [[124, "vertextypepairstatistics"], [198, "vertextypepairstatistics"]], "Java SDK Reference": [[125, "java-sdk-reference"]], "Requirements": [[125, "requirements"]], "Maven users": [[125, "maven-users"]], "Others": [[125, "others"]], "Documentation for Service APIs": [[125, "documentation-for-service-apis"], [199, "documentation-for-service-apis"]], "Documentation for Data Structures": [[125, "documentation-for-data-structures"], [199, "documentation-for-data-structures"]], "Documentation for Authorization": [[125, "documentation-for-authorization"]], "gs_interactive.AdminServiceGraphManagementApi": [[126, "gs-interactive-adminservicegraphmanagementapi"]], "create_dataloading_job": [[126, "create-dataloading-job"]], "create_graph": [[126, "create-graph"]], "delete_graph": [[126, "delete-graph"]], "get_graph": [[126, "get-graph"]], "get_graph_statistic": [[126, "get-graph-statistic"]], "get_schema": [[126, "get-schema"]], "list_graphs": [[126, "list-graphs"]], "gs_interactive.AdminServiceJobManagementApi": [[127, "gs-interactive-adminservicejobmanagementapi"]], "delete_job_by_id": [[127, "delete-job-by-id"]], "get_job_by_id": [[127, "get-job-by-id"]], "list_jobs": [[127, "list-jobs"]], "gs_interactive.AdminServiceProcedureManagementApi": [[128, "gs-interactive-adminserviceproceduremanagementapi"]], "create_procedure": [[128, "create-procedure"]], "delete_procedure": [[128, "delete-procedure"]], "get_procedure": [[128, "get-procedure"]], "list_procedures": [[128, "list-procedures"]], "update_procedure": [[128, "update-procedure"]], "gs_interactive.AdminServiceServiceManagementApi": [[129, "gs-interactive-adminserviceservicemanagementapi"]], "get_service_status": [[129, "get-service-status"]], "restart_service": [[129, "restart-service"]], "start_service": [[129, "start-service"]], "stop_service": [[129, "stop-service"]], "gs_interactive.GraphServiceEdgeManagementApi": [[164, "gs-interactive-graphserviceedgemanagementapi"]], "add_edge": [[164, "add-edge"]], "delete_edge": [[164, "delete-edge"]], "get_edge": [[164, "get-edge"]], "update_edge": [[164, "update-edge"]], "gs_interactive.GraphServiceVertexManagementApi": [[165, "gs-interactive-graphservicevertexmanagementapi"]], "add_vertex": [[165, "add-vertex"]], "delete_vertex": [[165, "delete-vertex"]], "get_vertex": [[165, "get-vertex"]], "update_vertex": [[165, "update-vertex"]], "ModelProperty": [[169, "modelproperty"]], "gs_interactive.QueryServiceApi": [[174, "gs-interactive-queryserviceapi"]], "proc_call": [[174, "proc-call"]], "proc_call_current": [[174, "proc-call-current"]], "gs_interactive.UtilsApi": [[191, "gs-interactive-utilsapi"]], "upload_file": [[191, "upload-file"]], "Python SDK Reference": [[199, "python-sdk-reference"]], "Requirements.": [[199, "requirements"]], "Installation & Usage": [[199, "installation-usage"]], "pip install": [[199, "pip-install"]], "Setuptools": [[199, "setuptools"]], "Tests": [[199, "tests"]], "Documentation For Authorization": [[199, "documentation-for-authorization"]], "RESTful API Documentation": [[200, "restful-api-documentation"]], "Introduction": [[200, "introduction"], [228, "introduction"]], "API Overview": [[200, "api-overview"]], "Detailed API Documentation": [[200, "detailed-api-documentation"]], "ListGraphs API (GraphManagement Category)": [[200, "listgraphs-api-graphmanagement-category"]], "Description": [[200, "description"], [200, "id1"], [200, "id6"], [200, "id11"], [200, "id16"], [200, "id21"], [200, "id26"], [200, "id31"], [200, "id36"], [200, "id41"], [200, "id46"], [200, "id51"], [200, "id56"], [200, "id61"], [200, "id66"], [200, "id71"], [200, "id75"], [200, "id80"], [200, "id85"], [200, "id90"]], "HTTP Request": [[200, "http-request"], [200, "id2"], [200, "id7"], [200, "id12"], [200, "id17"], [200, "id22"], [200, "id27"], [200, "id32"], [200, "id37"], [200, "id42"], [200, "id47"], [200, "id52"], [200, "id57"], [200, "id62"], [200, "id67"], [200, "id72"], [200, "id76"], [200, "id81"], [200, "id86"], [200, "id91"]], "Curl Command Example": [[200, "curl-command-example"], [200, "id3"], [200, "id8"], [200, "id13"], [200, "id18"], [200, "id23"], [200, "id28"], [200, "id33"], [200, "id38"], [200, "id43"], [200, "id48"], [200, "id53"], [200, "id58"], [200, "id63"], [200, "id68"], [200, "id77"], [200, "id82"], [200, "id87"], [200, "id92"]], "Expected Response": [[200, "expected-response"], [200, "id4"], [200, "id9"], [200, "id14"], [200, "id19"], [200, "id24"], [200, "id29"], [200, "id34"], [200, "id39"], [200, "id44"], [200, "id49"], [200, "id54"], [200, "id59"], [200, "id64"], [200, "id69"], [200, "id73"], [200, "id78"], [200, "id83"], [200, "id88"], [200, "id93"]], "Status Codes": [[200, "status-codes"], [200, "id5"], [200, "id10"], [200, "id15"], [200, "id20"], [200, "id25"], [200, "id30"], [200, "id35"], [200, "id40"], [200, "id45"], [200, "id50"], [200, "id55"], [200, "id60"], [200, "id65"], [200, "id70"], [200, "id74"], [200, "id79"], [200, "id84"], [200, "id89"], [200, "id94"]], "GetGraphStatistics API (GraphManagement Category)": [[200, "getgraphstatistics-api-graphmanagement-category"]], "CreateGraph (GraphManagement Category)": [[200, "creategraph-graphmanagement-category"]], "DeleteGraph  (GraphManagement Category)": [[200, "deletegraph-graphmanagement-category"]], "GetGraphSchema  (GraphManagement Category)": [[200, "getgraphschema-graphmanagement-category"]], "GetGraphMeta  (GraphManagement Category)": [[200, "getgraphmeta-graphmanagement-category"]], "ImportGraph  (GraphManagement Category)": [[200, "importgraph-graphmanagement-category"]], "CreateProcedure (ProcedureManagement Category)": [[200, "createprocedure-proceduremanagement-category"]], "ListAllProcedure  (ProcedureManagement Category)": [[200, "listallprocedure-proceduremanagement-category"]], "GetProcedure (ProcedureManagement Category)": [[200, "getprocedure-proceduremanagement-category"]], "UpdateProcedure (ProcedureManagement Category)": [[200, "updateprocedure-proceduremanagement-category"]], "DeleteProcedure (ProcedureManagement Category)": [[200, "deleteprocedure-proceduremanagement-category"]], "StartService (ServiceManagement Category)": [[200, "startservice-servicemanagement-category"]], "RestartService (ServiceManagement Category)": [[200, "restartservice-servicemanagement-category"]], "StopService (ServiceManagement Category)": [[200, "stopservice-servicemanagement-category"]], "SystemMetrics (NodeMetrics Category)": [[200, "systemmetrics-nodemetrics-category"]], "GetJobById (JobManagement Category)": [[200, "getjobbyid-jobmanagement-category"]], "GetAllJobs (JobManagement category)": [[200, "getalljobs-jobmanagement-category"]], "CancelJobById (JobManagement category)": [[200, "canceljobbyid-jobmanagement-category"]], "Enable AdminService in development": [[200, "enable-adminservice-in-development"]], "Start Compiler Service": [[200, "start-compiler-service"]], "Http error code": [[200, "http-error-code"]], "Preparation": [[201, "preparation"]], "Manage Interactive Service": [[201, "manage-interactive-service"]], "Initialize the Service": [[201, "initialize-the-service"]], "Start the Service": [[201, "start-the-service"]], "Stop the Service": [[201, "stop-the-service"]], "Restart the Service": [[201, "restart-the-service"]], "Check Service Status": [[201, "check-service-status"]], "Destroy the Service": [[201, "destroy-the-service"]], "Running Cypher Queries": [[201, "running-cypher-queries"]], "Running Gremlin Queries": [[201, "running-gremlin-queries"]], "Glossary": [[202, "glossary"], [246, "glossary"]], "Stored Procedure.": [[202, "stored-procedure"]], "Cypher.": [[202, "cypher"]], "Gremlin": [[202, "gremlin"]], "Compile.": [[202, "compile"]], "Install Interactive": [[203, "install-interactive"]], "A Solid Foundation": [[204, "a-solid-foundation"]], "Key Features": [[204, "key-features"], [233, "key-features"]], "Property Graph Model and Graph Queries": [[204, "property-graph-model-and-graph-queries"]], "The Cypher Query Language": [[204, "the-cypher-query-language"]], "The Gremlin Query Language": [[204, "the-gremlin-query-language"]], "Limitations": [[204, "limitations"], [228, "limitations"]], "GraphScope Interactive SDK": [[205, "graphscope-interactive-sdk"]], "Stored Procedures": [[206, "stored-procedures"]], "Compiling a Stored Procedure": [[206, "compiling-a-stored-procedure"]], "Enabling Stored Procedures": [[206, "enabling-stored-procedures"]], "Disabling Stored Procedures": [[206, "disabling-stored-procedures"]], "Viewing Enabled Stored Procedures": [[206, "viewing-enabled-stored-procedures"]], "Querying Stored Procedures": [[206, "querying-stored-procedures"]], "Tools": [[207, "tools"]], "The Administrative tool": [[208, "the-administrative-tool"]], "Detailed Usage": [[208, "detailed-usage"]], "Root Commands": [[208, "root-commands"]], "Service Commands": [[208, "service-commands"]], "Database Commands": [[208, "database-commands"]], "Procedure Commands": [[208, "procedure-commands"]], "GraphScope Interactive": [[209, "graphscope-interactive"]], "Introduction to ArrowFragment": [[210, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[210, "id1"]], "1. \u8f7d\u56fe": [[210, "id2"]], "1.1 \u521d\u59cb\u5316partitioner": [[210, "partitioner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[210, "arrow-table"]], "1.3. Shuffle vtable": [[210, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[210, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[210, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[210, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[210, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[210, "id3"]], "2. \u8bbf\u95eeFragment": [[210, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[210, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[210, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[210, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[210, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[210, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[210, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[210, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[210, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[210, "id13"]], "Frequently Asked Questions": [[211, "frequently-asked-questions"]], "Getting Started for GLE": [[212, "getting-started-for-gle"]], "Graph Workloads": [[213, "graph-workloads"]], "Graph Analytics": [[213, "graph-analytics"]], "Graph Interactive Query": [[213, "graph-interactive-query"]], "Graph Learning": [[213, "graph-learning"], [328, "graph-learning"]], "GraphScope for Data Scientists": [[214, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[214, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[214, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[214, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[214, "integration-with-pydata-ecosystem"]], "How to Report Bugs": [[215, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[216, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[216, null]], "GraphScope Flex": [[216, null]], "Graph Analytical Engine": [[216, null], [252, "graph-analytical-engine"]], "Graph Interactive Engine": [[216, null], [252, "graph-interactive-engine"]], "Graph Learning Engine": [[216, null]], "Storage Engine": [[216, null]], "Troubleshooting & Utilities": [[216, null]], "Development": [[216, null]], "Reference": [[216, null], [476, "reference"]], "Indices and tables": [[216, "indices-and-tables"]], "Standalone Deployment for GIE": [[217, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[217, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[217, "remove-the-gie-service"]], "Using Your Own Data": [[217, "using-your-own-data"]], "Deploy on a Cluster": [[217, "deploy-on-a-cluster"]], "Other Useful Configurations": [[217, "other-useful-configurations"]], "Design of GIE": [[218, "design-of-gie"]], "The Motivations": [[218, "the-motivations"]], "The Architecture": [[218, "the-architecture"]], "Query Processing": [[218, "query-processing"]], "Build GIE with Vineyard Store on Local": [[219, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[219, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[219, "manually-start-the-gie-services"]], "Running GraphScope Interactive Engine on Local": [[220, "running-graphscope-interactive-engine-on-local"]], "Customize Configurations for GIE instance": [[220, "customize-configurations-for-gie-instance"]], "GIE for Cypher": [[221, "gie-for-cypher"]], "Connecting via Python Driver": [[221, "connecting-via-python-driver"]], "Connecting via Cypher-Shell": [[221, "connecting-via-cypher-shell"]], "Using LLM as an Assistant in GIE": [[222, "using-llm-as-an-assistant-in-gie"]], "0. Environment": [[222, "environment"]], "1. Download Datasets": [[222, "download-datasets"]], "2. Load the Graph": [[222, "load-the-graph"]], "3. Set Endpoint and API Key": [[222, "set-endpoint-and-api-key"]], "4. Generate Graph Query Sentence from Questions": [[222, "generate-graph-query-sentence-from-questions"]], "5. Execute Generated Query Sentence with GIE": [[222, "execute-generated-query-sentence-with-gie"]], "Cypher Support": [[223, "cypher-support"]], "Data Types": [[223, "data-types"], [475, "data-types"]], "Property Types": [[223, "property-types"]], "Structural types": [[223, "structural-types"]], "Constructed Types": [[223, "constructed-types"]], "Operators": [[223, "operators"]], "Clause": [[223, "clause"]], "Neo4j Ecosystem": [[224, "neo4j-ecosystem"]], "GIE For Tinkerpop Ecosystem": [[224, null], [231, null]], "A Generic Graph Optimizer for GIE": [[225, "a-generic-graph-optimizer-for-gie"]], "Rule-based Optimizer (RBO)": [[225, "rule-based-optimizer-rbo"]], "FilterMatchRule": [[225, "filtermatchrule"]], "DegreeFusionRule": [[225, "degreefusionrule"]], "NotMatchToAntiJoinRule": [[225, "notmatchtoantijoinrule"]], "FieldTrimRule": [[225, "fieldtrimrule"]], "Cost-based Optimizer (CBO)": [[225, "cost-based-optimizer-cbo"]], "Graph Type Inference": [[225, "graph-type-inference"]], "FAQs for GIE Gremlin Usage": [[226, "faqs-for-gie-gremlin-usage"]], "Compatibility with TinkerPop": [[226, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[226, "property-graph-constraints"]], "What\u2019s the difference between Inner ID and Property ID ?": [[226, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[226, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[226, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[226, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[226, "group-by-multiple-keys"]], "group by multiple values:": [[226, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[226, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[226, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[226, "how-to-use-subgraph-in-gie-gremlin"]], "Supported Gremlin Steps": [[228, "supported-gremlin-steps"]], "Standard Steps": [[228, "standard-steps"]], "Source": [[228, "source"]], "V()": [[228, "v"]], "E()": [[228, "e"]], "Expand": [[228, "expand"]], "outE()": [[228, "oute"]], "inE()": [[228, "ine"]], "bothE()": [[228, "bothe"]], "out()": [[228, "out"], [228, "id7"]], "in()": [[228, "in"], [228, "id8"]], "both()": [[228, "both"], [228, "id9"]], "outV()": [[228, "outv"]], "inV()": [[228, "inv"]], "otherV()": [[228, "otherv"]], "bothV()": [[228, "bothv"]], "Filter": [[228, "filter"]], "hasId()": [[228, "hasid"], [230, "hasid"]], "hasLabel()": [[228, "haslabel"]], "has()": [[228, "has"]], "hasNot()": [[228, "hasnot"]], "is()": [[228, "is"]], "where(traversal)": [[228, "where-traversal"]], "where(predicate)": [[228, "where-predicate"]], "not(traversal)": [[228, "not-traversal"]], "dedup()": [[228, "dedup"], [230, "dedup"]], "Project": [[228, "project"]], "id()": [[228, "id"]], "label()": [[228, "label"]], "constant()": [[228, "constant"], [230, "constant"]], "valueMap()": [[228, "valuemap"], [230, "valuemap"]], "values()": [[228, "values"]], "elementMap()": [[228, "elementmap"]], "select()": [[228, "select"], [230, "select"]], "Aggregate": [[228, "aggregate"]], "count()": [[228, "count"]], "fold()": [[228, "fold"], [230, "fold"]], "sum()": [[228, "sum"]], "min()": [[228, "min"]], "max()": [[228, "max"]], "mean()": [[228, "mean"]], "group()": [[228, "group"], [230, "group"]], "groupCount()": [[228, "groupcount"], [230, "groupcount"]], "<h3 id=\"gremlin-order\">Order</h3>": [[228, "order"]], "order()": [[228, "id1"]], "Statistics": [[228, "statistics"]], "limit()": [[228, "limit"]], "coin()": [[228, "coin"]], "sample()": [[228, "sample"]], "Union": [[228, "union"]], "union()": [[228, "id2"]], "Match": [[228, "match"]], "match()": [[228, "id3"]], "Subgraph": [[228, "subgraph"]], "subgraph()": [[228, "id4"]], "Identity": [[228, "identity"]], "identity()": [[228, "id5"]], "Unfold": [[228, "unfold"]], "unfold()": [[228, "id6"], [228, "id10"]], "Syntactic Sugars": [[228, "syntactic-sugars"]], "PathExpand": [[228, "pathexpand"]], "endV()": [[228, "endv"]], "Getting Properites": [[228, "getting-properites"]], "Expression": [[228, "expression"]], "Running Examples": [[228, "running-examples"]], "Aggregate (Group)": [[228, "aggregate-group"]], "To be Supported": [[228, "to-be-supported"]], "path()": [[228, "path"]], "local()": [[228, "local"]], "Will Not be Supported": [[228, "will-not-be-supported"]], "repeat()": [[228, "repeat"]], "properties()": [[228, "properties"]], "sideEffect": [[228, "sideeffect"]], "branch": [[228, "branch"]], "GIE for Gremlin": [[229, "gie-for-gremlin"]], "Connecting via Python SDK": [[229, "connecting-via-python-sdk"]], "Connecting via Java SDK": [[229, "connecting-via-java-sdk"]], "Connecting via Gremlin-Console": [[229, "connecting-via-gremlin-console"]], "Tutorial: LDBC Gremlin": [[230, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[230, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[230, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[230, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[230, "apply-some-filters"]], "Extract Property Values": [[230, "extract-property-values"]], "Real Applications": [[230, "real-applications"], [230, "id1"]], "Basic Traversal Query": [[230, "basic-traversal-query"]], "Expansion": [[230, "expansion"]], "out(), in() and both()": [[230, "out-in-and-both"]], "outE(), inE() and bothE()": [[230, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[230, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[230, "multiple-expansion-steps"]], "Expansion from many starting points": [[230, "expansion-from-many-starting-points"]], "Filter & Expansion": [[230, "filter-expansion"]], "Apply filters after expansion": [[230, "apply-filters-after-expansion"]], "Expansion as filters": [[230, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[230, "path-expansion-syntactic-sugar"]], "Pattern Match": [[230, "pattern-match"]], "Relational Operations": [[230, "relational-operations"]], "Filter Steps": [[230, "filter-steps"]], "where()": [[230, "where"]], "Project Steps": [[230, "project-steps"]], "id() and label()": [[230, "id-and-label"]], "Aggregate Steps": [[230, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[230, "sum-min-max-and-mean"]], "Order Step": [[230, "order-step"]], "Limit Step": [[230, "limit-step"]], "Expression(Syntax Sugar)": [[230, "expression-syntax-sugar"]], "Complex Queries": [[230, "complex-queries"]], "LDBC BI2": [[230, "ldbc-bi2"]], "LDBC BI3": [[230, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[230, "ldbc-bi4-left-part"]], "LDBC BI11": [[230, "ldbc-bi11"]], "LDBC BI14": [[230, "ldbc-bi14"]], "Apache TinkerPop Ecosystem": [[231, "apache-tinkerpop-ecosystem"]], "Tutorials for Java Users": [[232, "tutorials-for-java-users"]], "Ease-of-use: Python Interface": [[233, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[233, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[233, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[233, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[233, "gnn-training-inference"]], "Cloud Native Design": [[233, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[233, "across-engine-workflow-orchestration"]], "Design of GLE": [[234, "design-of-gle"]], "Model Paradigms": [[234, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[234, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[234, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[234, "pipeline-for-learning"]], "Dev on docker container": [[235, "dev-on-docker-container"]], "Build Learning Engine": [[235, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[236, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[237, "graph-sampling"], [316, "graph-sampling"]], "Graph Traversal": [[237, "graph-traversal"], [248, "graph-traversal"], [317, "graph-traversal"]], "Neighborhood Sampling": [[237, "neighborhood-sampling"]], "Subgraph Sampling": [[237, "subgraph-sampling"], [249, "subgraph-sampling"]], "Negative Sampling": [[237, "negative-sampling"], [321, "negative-sampling"]], "GSL": [[237, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[239, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[239, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[239, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[240, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[240, "load-graph"], [242, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[240, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[240, "launch-the-learning-engine"], [242, "launch-the-learning-engine"]], "Train the Model": [[240, "train-the-model"]], "Tutorial: Training a Node Classification Model (PyG) on a K8S Cluster": [[241, "tutorial-training-a-node-classification-model-pyg-on-a-k8s-cluster"]], "Set parameters & load graph": [[241, "set-parameters-load-graph"]], "Launch the Server Engine": [[241, "launch-the-server-engine"]], "Configure the parameters for client pods": [[241, "configure-the-parameters-for-client-pods"]], "Write training and testing script": [[241, "write-training-and-testing-script"]], "Import packages": [[241, "import-packages"]], "Define test function": [[241, "define-test-function"]], "Define the loader and training process": [[241, "define-the-loader-and-training-process"]], "main function": [[241, "main-function"]], "Run the script": [[241, "run-the-script"]], "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine": [[242, "tutorial-training-a-node-classification-model-pyg-on-your-local-machine"]], "Define the evaluation function": [[242, "define-the-evaluation-function"]], "Create neighbor loaderfor training, testing and validation": [[242, "create-neighbor-loaderfor-training-testing-and-validation"]], "Define the PyG GraphSage Model and optimizer": [[242, "define-the-pyg-graphsage-model-and-optimizer"]], "Train and test": [[242, "train-and-test"]], "Loading Graphs": [[243, "loading-graphs"]], "Load Built-in Datasets": [[243, "load-built-in-datasets"]], "Loading Your Own Datasets": [[243, "loading-your-own-datasets"]], "Adding Vertices": [[243, "adding-vertices"]], "Advanced Usages": [[243, "advanced-usages"]], "Deduce vertex labels when not ambiguous": [[243, "deduce-vertex-labels-when-not-ambiguous"]], "Deduce vertex from edges": [[243, "deduce-vertex-from-edges"]], "Multiple relations": [[243, "multiple-relations"]], "Specify data types of properties manually": [[243, "specify-data-types-of-properties-manually"]], "Other parameters of graph": [[243, "other-parameters-of-graph"]], "Putting them Together": [[243, "putting-them-together"]], "Loading From Pandas or Numpy": [[243, "loading-from-pandas-or-numpy"]], "From Pandas": [[243, "from-pandas"]], "From Numpy": [[243, "from-numpy"]], "Loader Variants": [[243, "loader-variants"]], "Techniques targeting at large graph": [[243, "techniques-targeting-at-large-graph"]], "Tips for reduce memory consumption of graphs": [[243, "tips-for-reduce-memory-consumption-of-graphs"]], "Design of GraphScope": [[244, "design-of-graphscope"]], "Unified Graph Computing Platform": [[244, "unified-graph-computing-platform"]], "Application layer": [[244, "application-layer"]], "Execution engine layer": [[244, "execution-engine-layer"]], "Storage layer": [[244, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[244, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[244, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[244, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[244, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[244, "graphscope-for-learning"]], "One-stop Graph Processing": [[245, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[245, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[245, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[245, "graph-learning-quick-start"]], "FLASH": [[246, "flash"]], "GRAPE": [[246, "grape"]], "GAE": [[246, "gae"]], "GART": [[246, "gart"]], "GRIN": [[246, "grin"]], "GraphAr": [[246, "graphar"]], "Groot": [[246, "groot"]], "GUM": [[246, "gum"]], "MaxGraph (deprecated)": [[246, "maxgraph-deprecated"]], "Vineyard, or v6d": [[246, "vineyard-or-v6d"]], "GIE": [[246, "gie"]], "GAIA": [[246, "gaia"]], "Pegasus": [[246, "pegasus"]], "Ingress": [[246, "ingress"]], "PIE-model": [[246, "pie-model"]], "Graph Analytics Workloads": [[247, "graph-analytics-workloads"]], "What is Graph Analytics": [[247, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[247, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[247, "what-can-graphscope-do"], [249, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[248, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[248, "tinkerpop-and-gremlin"]], "Pattern Matching": [[248, "pattern-matching"], [248, "id1"]], "Neo4j and Cypher": [[248, "neo4j-and-cypher"]], "Graph Learning Workloads": [[249, "graph-learning-workloads"]], "What is Graph Neural Network": [[249, "what-is-graph-neural-network"]], "Typical GNN Models": [[249, "typical-gnn-models"]], "Paradigm of Model Training": [[249, "paradigm-of-model-training"]], "Steps of Model Training": [[249, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[249, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[250, "introducing-graphscope"]], "What is GraphScope": [[250, "what-is-graphscope"]], "Why use GraphScope": [[250, "why-use-graphscope"]], "What are the Use Cases": [[250, "what-are-the-use-cases"]], "What are the Limitations": [[250, "what-are-the-limitations"]], "What are the Next": [[250, "what-are-the-next"]], "Positioning of GraphScope": [[251, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[251, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[251, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[251, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[251, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[252, "performance-and-benchmark"]], "Results": [[252, "results"]], "Performance on GPUs": [[252, "performance-on-gpus"]], "Reproducing the results": [[252, "reproducing-the-results"]], "Tutorials for Python Users": [[253, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[254, "analytical-engine-api-reference"]], "Analytical Engine": [[254, "analytical-engine"]], "Fragments in GraphScope": [[254, "fragments-in-graphscope"]], "Analytical Apps": [[254, "analytical-apps"]], "Analytical Workers": [[254, "analytical-workers"]], "App\u2019s Context": [[254, "app-s-context"]], "Analytical App": [[255, "analytical-app"]], "AppAssets": [[255, "appassets"]], "JavaApp": [[255, "javaapp"]], "App object": [[255, "app-object"]], "Functions": [[255, "functions"], [257, "functions"], [330, "functions"]], "BuiltIn apps": [[255, "builtin-apps"]], "Context": [[256, "context"]], "Context object": [[256, "context-object"]], "Cython SDK API": [[257, "cython-sdk-api"]], "Pregel": [[257, "pregel"]], "PIE": [[257, "pie"]], "GraphScope types": [[257, "graphscope-types"]], "Flex API Reference": [[258, "flex-api-reference"]], "About Grape JDK": [[259, "about-grape-jdk"]], "Project Structure": [[259, "project-structure"]], "Building from source": [[259, "building-from-source"]], "Java Reference (javadoc)": [[260, "java-reference-javadoc"]], "graphscope.Vertex": [[261, "graphscope-vertex"]], "graphscope.declare": [[262, "graphscope-declare"]], "graphscope.framework.app.load_app": [[263, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[264, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[265, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[266, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[267, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[268, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[269, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[270, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[271, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[272, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[273, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[274, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[275, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[276, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[277, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[278, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[279, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.get_context_data": [[280, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[281, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[282, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[283, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[284, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[285, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[286, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[287, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[288, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[289, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[290, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[291, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[292, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[293, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[294, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[295, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[296, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[297, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[298, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[299, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[300, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[301, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[302, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[303, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[304, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[305, "graphscope-g"]], "graphscope.get_default_session": [[306, "graphscope-get-default-session"]], "graphscope.graphlearn": [[307, "graphscope-graphlearn"]], "graphscope.gremlin": [[308, "graphscope-gremlin"]], "graphscope.has_default_session": [[309, "graphscope-has-default-session"]], "graphscope.session": [[310, "graphscope-session"]], "graphscope.set_option": [[311, "graphscope-set-option"]], "Developing Your Own Model": [[312, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[312, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[312, "sampling"]], "Encoder": [[312, "encoder"], [320, "encoder"]], "Loss Function and Training Process": [[312, "loss-function-and-training-process"]], "Data Source": [[313, "data-source"]], "1 Data format": [[313, "data-format"]], "1.1 Basic format": [[313, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[313, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[313, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[313, "label-format-labeled"]], "1.5 Putting together": [[313, "putting-together"]], "2 Data source type": [[313, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[313, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[313, "user-api"]], "Graph Object": [[314, "graph-object"]], "2 Describe the Topology": [[314, "describe-the-topology"]], "3.1 Stand-alone Mode": [[314, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[314, "distributed-mode-client-server-mode"]], "Graph Query": [[315, "graph-query"]], "1 Introduction": [[316, "introduction"]], "Graph Sampling Language\uff08GSL)": [[318, "graph-sampling-language-gsl"]], "Install from pip": [[319, "install-from-pip"]], "Get wheel package": [[319, "get-wheel-package"]], "Install using pip": [[319, "install-using-pip"]], "Install TensorFlow": [[319, "install-tensorflow"]], "Install git": [[319, "install-git"]], "Install dependent libraries": [[319, "install-dependent-libraries"]], "Compile": [[319, "compile"], [322, "compile"]], "Install": [[319, "install"]], "Run test": [[319, "run-test"]], "Docker image": [[319, "docker-image"]], "Graph Learning Model": [[320, "graph-learning-model"]], "Data model": [[320, "data-model"]], "Defining Your Own Operator": [[322, "defining-your-own-operator"]], "Programming Interface": [[322, "programming-interface"]], "Distributed Runtime Design": [[322, "distributed-runtime-design"]], "Implement a New Operator": [[322, "implement-a-new-operator"]], "Clone source code": [[322, "clone-source-code"]], "Implement your operator class": [[322, "implement-your-operator-class"]], "Register Operator": [[322, "register-operator"]], "How to Use an Operator": [[322, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[323, "integrating-other-data-sources"]], "File System Interface": [[323, "file-system-interface"]], "ByteStreamAccessFile": [[323, "bytestreamaccessfile"]], "StructuredAccessFile": [[323, "structuredaccessfile"]], "WritableFile": [[323, "writablefile"]], "Register with Scheme": [[323, "register-with-scheme"]], "Quick Start": [[324, "quick-start"]], "1 Trying out the built-in models": [[324, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[324, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[324, "developing-a-gnn-model"]], "3.1 Data Preparation": [[324, "data-preparation"]], "3.2 Graph Construction": [[324, "graph-construction"]], "3.3 Graph Sampling": [[324, "graph-sampling"]], "3.4 GNN Model": [[324, "gnn-model"]], "System configuration": [[325, "system-configuration"]], "Graph": [[326, "graph"], [330, "graph"], [464, "graph"]], "Graph object": [[326, "graph-object"]], "Loader object": [[326, "loader-object"]], "Graph Functions": [[326, "graph-functions"]], "Interactive Query": [[327, "interactive-query"]], "Builtin algorithms": [[329, "builtin-algorithms"]], "Nodes": [[330, "nodes"]], "Edges": [[330, "edges"]], "Self loops": [[330, "self-loops"]], "Attributes": [[330, "attributes"]], "Freezing graph structure": [[330, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[331, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[332, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[333, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[334, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[335, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[336, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[337, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[338, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[339, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[340, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[341, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[342, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[343, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[344, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[345, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[346, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[347, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[348, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[349, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[350, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[351, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[352, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[353, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[354, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[355, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[356, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[357, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[358, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[359, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[360, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[361, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[362, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[363, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[364, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[365, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[366, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[367, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[368, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[369, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[370, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[371, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[372, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[373, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[374, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[375, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[376, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[377, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[378, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[379, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[380, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[381, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[382, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[383, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[384, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[385, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[386, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[387, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[388, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[389, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[390, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[391, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[392, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[393, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[394, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[395, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[396, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[397, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[398, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[399, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[400, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[401, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[402, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[403, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[404, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[405, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[406, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[407, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[408, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[409, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[410, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[411, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[412, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[413, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[414, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[415, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[416, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[417, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[418, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[419, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[420, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[421, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[422, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[423, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[424, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[425, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[426, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[427, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[428, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[429, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[430, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[431, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[432, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[433, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[434, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[435, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[436, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[437, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[438, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[439, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[440, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[441, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[442, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[443, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[444, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[445, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[446, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[447, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[448, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[449, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[450, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[451, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[452, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[453, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[454, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[455, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[456, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[457, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[458, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[459, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[460, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[461, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[462, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[463, "graph-generators"]], "Atlas": [[463, "module-graphscope.nx.generators.atlas"]], "Classic": [[463, "module-graphscope.nx.generators.classic"]], "Expanders": [[463, "module-graphscope.nx.generators.expanders"]], "Small": [[463, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[463, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[463, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[463, "module-graphscope.nx.generators.directed"]], "Geometric": [[463, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[463, "module-graphscope.nx.generators.ego"]], "Stochastic": [[463, "module-networkx.generators.stochastic"]], "AS graph": [[463, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[463, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[463, "module-graphscope.nx.generators.social"]], "Spectral": [[463, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[463, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[463, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[463, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[463, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[463, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[463, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[463, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[464, "graph-types"]], "DiGraph": [[464, "digraph"]], "NetworkX-style API": [[465, "networkx-style-api"]], "Reading graphs": [[466, "reading-graphs"]], "Edge List": [[466, "edge-list"]], "Adjacency List": [[466, "adjacency-list"]], "Graph Transformation": [[467, "graph-transformation"]], "Operation": [[468, "operation"]], "Operation object": [[468, "operation-object"]], "BuiltIn operations": [[468, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[469, "python-api-reference"]], "Selector": [[470, "selector"]], "Selectors in different context": [[470, "selectors-in-different-context"]], "TensorContext": [[470, "tensorcontext"]], "VertexDataContext": [[470, "vertexdatacontext"]], "LabeledVertexDataContext": [[470, "labeledvertexdatacontext"]], "VertexPropertyContext": [[470, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[470, "labeledvertexpropertycontext"]], "Methods that use selectors": [[470, "methods-that-use-selectors"]], "One-dimensional results": [[470, "one-dimensional-results"]], "Multi-dimensional results": [[470, "multi-dimensional-results"]], "Vertex Range": [[470, "vertex-range"]], "Session": [[471, "session"]], "Session object": [[471, "session-object"]], "Session Functions": [[471, "session-functions"]], "Resources Estimator": [[472, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[473, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[473, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[473, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[473, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[473, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[475, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[475, "the-graphar-file-format"]], "Features": [[475, "features"]], "File Format": [[475, "file-format"]], "Information files": [[475, "information-files"]], "Data files": [[475, "data-files"]], "Property Data Types": [[475, "property-data-types"]], "GraphAr in GraphScope": [[475, "graphar-in-graphscope"]], "Saving Graph Data in GraphAr": [[475, "saving-graph-data-in-graphar"]], "Loading GraphAr Data into GraphScope": [[475, "loading-graphar-data-into-graphscope"]], "GRIN: Graph Retrieval INterface": [[476, "grin-graph-retrieval-interface"]], "Motivations": [[476, "motivations"]], "Unified Graph Retrieval": [[476, "unified-graph-retrieval"]], "GRIN Concepts": [[476, "grin-concepts"]], "Predefined Macros": [[476, "predefined-macros"]], "Partition Strategy": [[476, "partition-strategy"]], "Edge-cut Partition Strategy": [[476, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[476, "vertex-cut-partition-strategy"]], "Property Graph Model": [[476, "property-graph-model"]], "Implementation Guideline": [[476, "implementation-guideline"]], "For computing engine": [[476, "for-computing-engine"]], "For storage engine": [[476, "for-storage-engine"]], "Design Details": [[476, "design-details"]], "Handler": [[476, "handler"]], "Edge": [[476, "edge"]], "List": [[476, "list"]], "Array-style Retrieval": [[476, "array-style-retrieval"]], "List Iterator": [[476, "list-iterator"]], "Label": [[476, "label"], [497, "label"]], "Order": [[476, "order"]], "Master and Mirror": [[476, "master-and-mirror"]], "Local Complete": [[476, "local-complete"]], "Natural ID Trait": [[476, "natural-id-trait"]], "Groot: Persistent Graph Store": [[477, "groot-persistent-graph-store"]], "Known Limitation": [[477, "known-limitation"]], "Deploy Groot": [[477, "deploy-groot"]], "Install from ArtifactHub": [[477, "install-from-artifacthub"]], "Installing from a local directory": [[477, "installing-from-a-local-directory"]], "Common Configurations": [[477, "common-configurations"]], "Connecting to Groot": [[477, "connecting-to-groot"]], "Connection": [[477, "connection"]], "Building and Modifying Graph Models": [[477, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[477, "using-built-in-datasets"]], "Customizing Models and Datasets": [[477, "customizing-models-and-datasets"]], "Querying Data": [[477, "querying-data"]], "Python": [[477, "python"], [477, "id1"]], "Node.js": [[477, "node-js"]], "Data Import": [[477, "data-import"]], "Offline Import": [[477, "offline-import"]], "Prerequisite": [[477, "prerequisite"]], "Data Format": [[477, "data-format"]], "Loading Process": [[477, "loading-process"]], "Build: Building a partitioned graph": [[477, "build-building-a-partitioned-graph"]], "2. Loading graph partitions": [[477, "loading-graph-partitions"]], "3. Commit to store service": [[477, "commit-to-store-service"]], "Realtime Write": [[477, "realtime-write"]], "Other features": [[477, "other-features"]], "Uninstalling and Restarting": [[477, "uninstalling-and-restarting"]], "Uninstall Groot": [[477, "uninstall-groot"]], "Restart Groot": [[477, "restart-groot"]], "Destroy Groot": [[477, "destroy-groot"]], "Developing Guide": [[477, "developing-guide"]], "Build image": [[477, "build-image"]], "Persistence": [[477, "persistence"]], "Troubleshooting": [[477, "troubleshooting"]], "Viewing logs": [[477, "viewing-logs"]], "Configuring logs": [[477, "configuring-logs"]], "Secondary Instance": [[477, "secondary-instance"]], "Traces": [[477, "traces"]], "Write High-availability": [[477, "write-high-availability"]], "In-memory immutable graphs on Vineyard": [[478, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[478, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[478, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[478, "using-loaded-graphs"]], "Applications and algorithms": [[479, "applications-and-algorithms"]], "Bind application to graph": [[479, "bind-application-to-graph"]], "Built-in algorithms": [[479, "built-in-algorithms"]], "Scaling and repartitioning": [[480, "scaling-and-repartitioning"]], "Fennel": [[480, "fennel"]], "XtraPuLP": [[480, "xtrapulp"]], "Hybrid partitioning": [[480, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[481, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[481, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[481, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[481, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[482, "user-guide-and-examples-of-gle"]], "Error Codes": [[483, "error-codes"]], "Command-line Utility gsctl": [[484, "command-line-utility-gsctl"]], "Install/Update gsctl": [[484, "install-update-gsctl"]], "Commands": [[484, "commands"]], "Utility Scripts": [[484, "utility-scripts"]], "Client/Server Mode": [[484, "client-server-mode"]], "Change scope": [[484, "change-scope"]], "Close the connection": [[484, "close-the-connection"]], "How to Find logs": [[485, "how-to-find-logs"]], "Find logs in k8s": [[485, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[485, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[485, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[485, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[485, "find-logs-for-groot"]], "Monitoring": [[486, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[487, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[487, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[487, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[487, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[487, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[487, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[487, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[487, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[487, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[487, "id7"]], "\u90e8\u7f72": [[488, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[488, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[488, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[488, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[489, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[489, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[489, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[489, "python-wheels"]], "Linux": [[489, "linux"]], "macOS": [[489, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[489, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[490, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[491, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[491, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[491, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[491, "id6"]], "\u56fe\u5206\u6790": [[491, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[491, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[491, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[492, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[492, "id2"]], "\u6295\u5f71": [[492, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[492, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[492, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[493, "graphscope"]], "\u76ee\u5f55": [[493, null], [498, null]], "API \u53c2\u8003": [[493, null]], "\u7d22\u5f15": [[493, "id1"]], "\u5b89\u88c5": [[494, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[494, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[494, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[495, "id1"]], "Apache TinkerPop": [[495, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[495, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[495, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[495, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[495, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[495, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[495, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[495, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[495, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[495, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[495, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[495, "id13"]], "\u5df2\u77e5\u9650\u5236": [[495, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[496, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[496, "id2"]], "\u6570\u636e\u6a21\u578b": [[496, "id3"]], "\u7f16\u7801\u5668": [[496, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[496, "id5"]], "\u91c7\u6837": [[496, "id6"]], "\u56fe\u6570\u636e\u6d41": [[496, "id7"]], "\u6a21\u578b": [[496, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[496, "id9"]], "\u8f7d\u56fe": [[497, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[497, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[497, "id4"]], "Build Vertex": [[497, "build-vertex"]], "vertices": [[497, "vertices"]], "properties": [[497, "properties"], [497, "id7"]], "vid_field": [[497, "vid-field"]], "Build Edge": [[497, "build-edge"]], "edges": [[497, "edges"]], "label": [[497, "id6"]], "src_label and dst_label": [[497, "src-label-and-dst-label"]], "src_field and dst_field": [[497, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[497, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[497, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[497, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[497, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[497, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[497, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[497, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[497, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[497, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[497, "numpy"]], "Loader \u7684\u53d8\u79cd": [[497, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[498, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "cdlp()": [[0, "id0"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id1"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lcc()": [[0, "id2"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id3"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id4"]], "wcc()": [[0, "id5"]], "gs::appbase (c++ class)": [[254, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[254, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[254, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[254, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[254, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[254, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[254, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[254, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[254, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[254, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[254, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[254, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[254, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[254, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[254, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[254, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[254, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[254, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::adddatatoexistedelabel (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedELabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::adddatatoexistedvlabel (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader22AddDataToExistedVLabelEN8vineyard8ObjectIDE10label_id_t"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [254, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb"]], "gs::arrowfragmentloader::extendlabeldata (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader15ExtendLabelDataEN8vineyard8ObjectIDEi"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[254, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[254, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[254, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[254, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[254, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [254, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [254, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[254, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[254, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[254, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [254, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [254, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[254, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[254, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[254, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [254, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [254, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [254, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[254, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[254, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[254, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[254, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[254, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[254, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[254, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[254, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[254, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[254, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[254, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[254, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[254, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[254, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[254, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[254, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[254, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[254, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[254, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [254, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[254, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[254, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[254, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[254, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[254, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[254, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[254, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[254, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv"]], "gs::ctxwrapperbuilder (c++ struct)": [[254, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[254, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[254, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[254, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[254, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[254, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[254, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[254, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[254, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[254, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[254, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[254, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[254, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[254, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[254, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[254, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[254, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[254, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[254, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[254, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[254, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[254, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[254, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[254, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[254, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[254, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[254, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[254, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[254, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[254, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[254, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[254, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [254, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[254, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[254, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[254, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[254, "_CPPv4N2gs14DispatchResult9graph_defEv"], [254, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[254, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[254, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[254, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [254, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[254, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[254, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[254, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[254, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[254, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[254, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[254, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[254, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[254, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[254, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[254, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[254, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[254, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[254, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[254, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[254, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[254, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[254, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[254, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[254, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[254, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[254, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[254, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[254, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[254, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [254, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[254, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[254, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[254, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[254, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[254, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[254, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[254, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[254, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[254, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [254, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[254, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[254, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[254, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[254, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[254, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[254, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[254, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[254, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[254, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[254, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[254, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[254, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[254, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[254, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[254, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[254, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[254, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[254, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[254, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[254, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[254, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[254, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[254, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[254, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[254, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[254, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[254, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[254, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[254, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[254, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[254, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[254, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[254, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[254, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[254, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[254, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[254, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[254, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[254, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[254, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[254, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[254, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[254, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[254, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[254, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [254, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[254, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[254, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[254, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[254, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[254, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[254, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[254, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[254, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[254, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[254, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[254, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[254, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[254, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[254, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[254, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[254, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[254, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[254, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[254, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[254, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[254, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[254, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[254, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[254, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[254, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[254, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[254, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[254, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[254, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [254, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[254, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [254, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[254, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[254, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[254, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[254, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[254, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[254, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[254, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[254, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[254, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[255, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[255, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[255, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[255, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[255, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[255, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[255, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[255, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[255, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[255, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[255, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[255, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[255, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[255, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[255, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[255, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[255, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[255, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[255, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[255, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[255, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[255, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[255, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[255, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[255, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[255, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[255, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[255, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[255, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[255, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[255, "graphscope.louvain"]], "lpa() (in module graphscope)": [[255, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[255, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[255, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[255, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[255, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[255, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[255, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[255, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[255, "graphscope.sssp"]], "triangles() (in module graphscope)": [[255, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[255, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[255, "graphscope.voterank"]], "wcc() (in module graphscope)": [[255, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[256, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[256, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[256, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[256, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[256, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[256, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[256, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[256, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[256, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[256, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[256, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[256, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[256, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[261, "graphscope.Vertex"]], "declare() (in module graphscope)": [[262, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[263, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[264, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[265, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[266, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[267, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[268, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[269, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[270, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[271, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[272, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[273, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[274, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[275, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[276, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[277, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[278, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[279, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[280, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[281, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[282, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[283, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[284, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[285, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[286, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[287, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[288, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[289, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[290, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[291, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[292, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[293, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[294, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[295, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[296, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[297, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[298, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[299, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[300, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[301, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[302, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[303, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[304, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[305, "graphscope.g"]], "get_default_session() (in module graphscope)": [[306, "graphscope.get_default_session"]], "graphlearn() (in module graphscope)": [[307, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[308, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[309, "graphscope.has_default_session"]], "session (in module graphscope)": [[310, "graphscope.session"]], "set_option() (in module graphscope)": [[311, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[326, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[326, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[326, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[326, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[326, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.add_column"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[326, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.add_edges"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[326, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.add_vertices"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[326, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.consolidate_columns"]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[326, "graphscope.framework.graph.GraphDAGNode.consolidate_columns"]], "detach() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[326, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[326, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[326, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.project"]], "project() (graphscope.framework.graph.graphdagnode method)": [[326, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[326, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[326, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[326, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[326, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[326, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[327, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[327, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[327, "graphscope.interactive.query.InteractiveQuery.close"]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[327, "graphscope.interactive.query.InteractiveQuery.cypher_driver"]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[327, "graphscope.interactive.query.InteractiveQuery.cypher_url"]], "execute() (graphscope.interactive.query.interactivequery method)": [[327, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[327, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[327, "graphscope.interactive.query.InteractiveQuery.gremlin_client"]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[327, "graphscope.interactive.query.InteractiveQuery.gremlin_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[327, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[327, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[327, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[327, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[327, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[327, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[328, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[328, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[328, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[328, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[328, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[329, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[330, "module-graphscope.nx.classes.function"]], "module": [[330, "module-graphscope.nx.classes.function"], [463, "module-graphscope.nx.generators.atlas"], [463, "module-graphscope.nx.generators.classic"], [463, "module-graphscope.nx.generators.community"], [463, "module-graphscope.nx.generators.degree_seq"], [463, "module-graphscope.nx.generators.directed"], [463, "module-graphscope.nx.generators.duplication"], [463, "module-graphscope.nx.generators.ego"], [463, "module-graphscope.nx.generators.expanders"], [463, "module-graphscope.nx.generators.geometric"], [463, "module-graphscope.nx.generators.harary_graph"], [463, "module-graphscope.nx.generators.intersection"], [463, "module-graphscope.nx.generators.joint_degree_seq"], [463, "module-graphscope.nx.generators.mycielski"], [463, "module-graphscope.nx.generators.nonisomorphic_trees"], [463, "module-graphscope.nx.generators.small"], [463, "module-graphscope.nx.generators.social"], [463, "module-graphscope.nx.generators.spectral_graph_forge"], [463, "module-graphscope.nx.generators.sudoku"], [463, "module-graphscope.nx.generators.trees"], [463, "module-graphscope.nx.generators.triads"], [463, "module-networkx.generators.internet_as_graphs"], [463, "module-networkx.generators.stochastic"], [468, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[331, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[332, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[333, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[334, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[335, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[336, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[337, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[338, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[339, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[340, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[341, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[342, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[343, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[344, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[345, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[346, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[347, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[348, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[349, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[350, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[351, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[352, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[353, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[354, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[355, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[356, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[357, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[358, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[359, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[360, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[361, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[362, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[363, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[364, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[365, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[366, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[367, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[368, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[369, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[370, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[371, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[372, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[373, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[374, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[375, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[376, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[377, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[378, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[379, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[380, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[381, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[382, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[383, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[384, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[385, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[386, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[387, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[388, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[389, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[390, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[391, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[392, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[393, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[394, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[395, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[396, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[397, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[398, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[399, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[400, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[401, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[402, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[403, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[404, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[405, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[406, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[407, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[408, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[409, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[410, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[411, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[412, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[413, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[414, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[415, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[416, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[417, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[418, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[419, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[420, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[421, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[422, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[423, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[424, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[425, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[426, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[427, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[428, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[429, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[430, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[431, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[432, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[433, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[434, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[435, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[436, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[437, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[438, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[439, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[440, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[441, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[442, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[443, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[444, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[445, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[446, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[447, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[448, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[449, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[450, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[451, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[452, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[453, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[454, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[455, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[456, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[457, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[458, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[459, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[460, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[461, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[462, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[463, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[463, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[463, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[463, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[463, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[463, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[463, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[463, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[463, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[463, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[463, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[463, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[463, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[463, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[463, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[463, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[463, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[463, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[463, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[463, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[463, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[463, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[464, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[464, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[464, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[464, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[464, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[464, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[464, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[464, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[464, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[464, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[464, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[464, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[464, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[464, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[464, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[464, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[464, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[464, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[464, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[464, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[466, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[466, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[467, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[467, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[468, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[468, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[471, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[471, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[471, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[471, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[471, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[471, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[471, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[471, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[471, "graphscope.Session.engine_config"]], "g() (graphscope.session method)": [[471, "graphscope.Session.g"]], "get_config() (graphscope.session method)": [[471, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[471, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[471, "graphscope.Session.graphlearn"]], "info (graphscope.session property)": [[471, "graphscope.Session.info"]], "interactive() (graphscope.session method)": [[471, "graphscope.Session.interactive"]], "load_from() (graphscope.session method)": [[471, "graphscope.Session.load_from"]], "restore_from_pvc() (graphscope.session method)": [[471, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[471, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[471, "graphscope.Session.store_to_pvc"]]}})