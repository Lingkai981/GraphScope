Search.setIndex({"docnames": ["analytical_engine/builtin_algorithms", "analytical_engine/customized_algorithms", "analytical_engine/deployment", "analytical_engine/design_of_gae", "analytical_engine/dev_and_test", "analytical_engine/faqs", "analytical_engine/flash", "analytical_engine/getting_started", "analytical_engine/guide_and_examples", "analytical_engine/ingress", "analytical_engine/key_concepts", "analytical_engine/networkx_compatibility", "analytical_engine/overview_and_architecture", "analytical_engine/performance_tuning", "analytical_engine/programming_model_pie", "analytical_engine/tutorial_dev_algo_cpp_flash", "analytical_engine/tutorial_dev_algo_cpp_pie", "analytical_engine/tutorial_dev_algo_java", "analytical_engine/tutorial_dev_algo_python", "analytical_engine/tutorial_networkx_algorithms", "analytical_engine/tutorial_networkx_operations", "analytical_engine/tutorial_run_builtin_algo", "analytical_engine/tutorial_run_giraph_apps", "analytical_engine/tutorial_run_graphx_apps", "analytical_engine/vertex_centric_models", "contact_us", "deployment/deploy_graphscope_on_clouds", "deployment/deploy_graphscope_on_self_managed_k8s", "deployment/deploy_graphscope_operator", "deployment/deploy_graphscope_with_helm", "deployment/deploy_with_existing_vineyard_cluster", "deployment/install_in_offline_env", "deployment/install_on_local", "deployment/persistent_storage_of_graphs_on_k8s", "design_of_gae", "development/code_style_guide", "development/dev_guide", "development/how_to_contribute", "development/how_to_debug", "development/how_to_submit_pr", "development/how_to_test", "flex/interactive/configuration", "flex/interactive/custom_graph_data", "flex/interactive/data_import", "flex/interactive/data_model", "flex/interactive/dev_guide", "flex/interactive/development/cpp_procedure", "flex/interactive/development/cypher_procedure", "flex/interactive/getting_started", "flex/interactive/glossary", "flex/interactive/installation", "flex/interactive/overview", "flex/interactive/stored_procedures", "flex/interactive/tools/admin_tool", "flex/interactive/tools/cypher_shell", "flex/interactive_intro", "frag_intro", "frequently_asked_questions", "getting_started_gle", "graph_workloads", "graphscope_for_data_scientists", "how_to_report_bugs", "index", "interactive_engine/deployment", "interactive_engine/design_of_gie", "interactive_engine/dev_and_test", "interactive_engine/getting_started", "interactive_engine/neo4j/cypher_sdk", "interactive_engine/neo4j/llm_assistant", "interactive_engine/neo4j/supported_cypher", "interactive_engine/neo4j_eco", "interactive_engine/optimizer", "interactive_engine/tinkerpop/faq", "interactive_engine/tinkerpop/guide_and_examples", "interactive_engine/tinkerpop/supported_gremlin_steps", "interactive_engine/tinkerpop/tinkerpop_gremlin", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin", "interactive_engine/tinkerpop_eco", "java_tutorials", "key_features", "learning_engine/design_of_gle", "learning_engine/dev_and_test", "learning_engine/getting_started", "learning_engine/graph_sampling", "learning_engine/guide_and_examples", "learning_engine/tutorial_node_classification_k8s", "learning_engine/tutorial_node_classification_local", "learning_engine/tutorial_node_classification_pyg_local", "loading_graphs", "overview/design_of_graphscope", "overview/getting_started", "overview/glossary", "overview/graph_analytics_workloads", "overview/graph_interactive_workloads", "overview/graph_learning_workloads", "overview/intro", "overview/positioning", "performance_and_benchmark", "python_tutorials", "reference/analytical_engine_index", "reference/app", "reference/context", "reference/cython_sdk", "reference/flex/index", "reference/gae_java/about", "reference/gae_java/index", "reference/generated/graphscope.Vertex", "reference/generated/graphscope.declare", "reference/generated/graphscope.framework.app.load_app", "reference/generated/graphscope.framework.dag_utils.add_column", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic", "reference/generated/graphscope.framework.dag_utils.bind_app", "reference/generated/graphscope.framework.dag_utils.clear_edges", "reference/generated/graphscope.framework.dag_utils.clear_graph", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe", "reference/generated/graphscope.framework.dag_utils.context_to_numpy", "reference/generated/graphscope.framework.dag_utils.copy_graph", "reference/generated/graphscope.framework.dag_utils.create_app", "reference/generated/graphscope.framework.dag_utils.create_graph", "reference/generated/graphscope.framework.dag_utils.create_graph_view", "reference/generated/graphscope.framework.dag_utils.create_loader", "reference/generated/graphscope.framework.dag_utils.create_subgraph", "reference/generated/graphscope.framework.dag_utils.create_unload_op", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow", "reference/generated/graphscope.framework.dag_utils.get_context_data", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph", "reference/generated/graphscope.framework.dag_utils.modify_edges", "reference/generated/graphscope.framework.dag_utils.modify_vertices", "reference/generated/graphscope.framework.dag_utils.output", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph", "reference/generated/graphscope.framework.dag_utils.project_to_simple", "reference/generated/graphscope.framework.dag_utils.report_graph", "reference/generated/graphscope.framework.dag_utils.run_app", "reference/generated/graphscope.framework.dag_utils.to_data_sink", "reference/generated/graphscope.framework.dag_utils.to_directed", "reference/generated/graphscope.framework.dag_utils.to_undirected", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor", "reference/generated/graphscope.framework.dag_utils.unload_app", "reference/generated/graphscope.framework.dag_utils.unload_context", "reference/generated/graphscope.framework.dag_utils.unload_graph", "reference/generated/graphscope.framework.operation.Operation.__init__", "reference/generated/graphscope.framework.operation.Operation.as_op_def", "reference/generated/graphscope.framework.operation.Operation.eval", "reference/generated/graphscope.framework.operation.Operation.evaluated", "reference/generated/graphscope.framework.operation.Operation.key", "reference/generated/graphscope.framework.operation.Operation.signature", "reference/generated/graphscope.g", "reference/generated/graphscope.get_default_session", "reference/generated/graphscope.graphlearn", "reference/generated/graphscope.gremlin", "reference/generated/graphscope.has_default_session", "reference/generated/graphscope.session", "reference/generated/graphscope.set_option", "reference/gnn_engine/algo_en", "reference/gnn_engine/data_loader_en", "reference/gnn_engine/graph_object_en", "reference/gnn_engine/graph_query_en", "reference/gnn_engine/graph_sampling_en", "reference/gnn_engine/graph_traverse_en", "reference/gnn_engine/gsl_en", "reference/gnn_engine/install_en", "reference/gnn_engine/model_programming_en", "reference/gnn_engine/negative_sampling_en", "reference/gnn_engine/operator", "reference/gnn_engine/other_source", "reference/gnn_engine/quick_start_en", "reference/gnn_engine/system_config", "reference/graph", "reference/interactive", "reference/learning", "reference/networkx/builtin", "reference/networkx/functions", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle", "reference/networkx/generated/graphscope.nx.classes.function.add_path", "reference/networkx/generated/graphscope.nx.classes.function.add_star", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy", "reference/networkx/generated/graphscope.nx.classes.function.degree", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram", "reference/networkx/generated/graphscope.nx.classes.function.density", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.edges", "reference/networkx/generated/graphscope.nx.classes.function.freeze", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph", "reference/networkx/generated/graphscope.nx.classes.function.info", "reference/networkx/generated/graphscope.nx.classes.function.is_directed", "reference/networkx/generated/graphscope.nx.classes.function.is_empty", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted", "reference/networkx/generated/graphscope.nx.classes.function.neighbors", "reference/networkx/generated/graphscope.nx.classes.function.nodes", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.non_edges", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges", "reference/networkx/generated/graphscope.nx.classes.function.subgraph", "reference/networkx/generated/graphscope.nx.classes.function.to_directed", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_graph", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph", "reference/networkx/generators", "reference/networkx/graphs", "reference/networkx/index", "reference/networkx/io", "reference/networkx/transformation", "reference/operation", "reference/python_index", "reference/selector", "reference/session", "resources_estimator", "storage_engine/gart", "storage_engine/getting_started", "storage_engine/graphar", "storage_engine/grin", "storage_engine/groot", "storage_engine/vineyard", "tutorial/builtin", "tutorial/scaling", "user_guide_and_examples_of_gae", "user_guide_and_examples_of_gle", "utilities/error_codes", "utilities/gs", "utilities/how_to_find_logs", "utilities/monitoring", "zh/analytics_engine", "zh/deployment", "zh/developer_guide", "zh/frequently_asked_questions", "zh/getting_started", "zh/graph_transformation", "zh/index", "zh/installation", "zh/interactive_engine", "zh/learning_engine", "zh/loading_graph", "zh/tutorials"], "filenames": ["analytical_engine/builtin_algorithms.md", "analytical_engine/customized_algorithms.md", "analytical_engine/deployment.md", "analytical_engine/design_of_gae.md", "analytical_engine/dev_and_test.md", "analytical_engine/faqs.md", "analytical_engine/flash.md", "analytical_engine/getting_started.md", "analytical_engine/guide_and_examples.md", "analytical_engine/ingress.md", "analytical_engine/key_concepts.rst", "analytical_engine/networkx_compatibility.md", "analytical_engine/overview_and_architecture.md", "analytical_engine/performance_tuning.md", "analytical_engine/programming_model_pie.md", "analytical_engine/tutorial_dev_algo_cpp_flash.md", "analytical_engine/tutorial_dev_algo_cpp_pie.md", "analytical_engine/tutorial_dev_algo_java.md", "analytical_engine/tutorial_dev_algo_python.rst", "analytical_engine/tutorial_networkx_algorithms.md", "analytical_engine/tutorial_networkx_operations.md", "analytical_engine/tutorial_run_builtin_algo.md", "analytical_engine/tutorial_run_giraph_apps.md", "analytical_engine/tutorial_run_graphx_apps.md", "analytical_engine/vertex_centric_models.md", "contact_us.md", "deployment/deploy_graphscope_on_clouds.md", "deployment/deploy_graphscope_on_self_managed_k8s.md", "deployment/deploy_graphscope_operator.md", "deployment/deploy_graphscope_with_helm.md", "deployment/deploy_with_existing_vineyard_cluster.md", "deployment/install_in_offline_env.md", "deployment/install_on_local.md", "deployment/persistent_storage_of_graphs_on_k8s.md", "design_of_gae.md", "development/code_style_guide.md", "development/dev_guide.md", "development/how_to_contribute.md", "development/how_to_debug.md", "development/how_to_submit_pr.md", "development/how_to_test.md", "flex/interactive/configuration.md", "flex/interactive/custom_graph_data.md", "flex/interactive/data_import.md", "flex/interactive/data_model.md", "flex/interactive/dev_guide.md", "flex/interactive/development/cpp_procedure.md", "flex/interactive/development/cypher_procedure.md", "flex/interactive/getting_started.md", "flex/interactive/glossary.md", "flex/interactive/installation.md", "flex/interactive/overview.md", "flex/interactive/stored_procedures.md", "flex/interactive/tools/admin_tool.md", "flex/interactive/tools/cypher_shell.md", "flex/interactive_intro.md", "frag_intro.md", "frequently_asked_questions.rst", "getting_started_gle.md", "graph_workloads.md", "graphscope_for_data_scientists.md", "how_to_report_bugs.md", "index.rst", "interactive_engine/deployment.md", "interactive_engine/design_of_gie.md", "interactive_engine/dev_and_test.md", "interactive_engine/getting_started.md", "interactive_engine/neo4j/cypher_sdk.md", "interactive_engine/neo4j/llm_assistant.md", "interactive_engine/neo4j/supported_cypher.md", "interactive_engine/neo4j_eco.md", "interactive_engine/optimizer.md", "interactive_engine/tinkerpop/faq.md", "interactive_engine/tinkerpop/guide_and_examples.md", "interactive_engine/tinkerpop/supported_gremlin_steps.md", "interactive_engine/tinkerpop/tinkerpop_gremlin.md", "interactive_engine/tinkerpop/tutorial_ldbc_gremlin.md", "interactive_engine/tinkerpop_eco.md", "java_tutorials.md", "key_features.md", "learning_engine/design_of_gle.md", "learning_engine/dev_and_test.md", "learning_engine/getting_started.md", "learning_engine/graph_sampling.md", "learning_engine/guide_and_examples.md", "learning_engine/tutorial_node_classification_k8s.md", "learning_engine/tutorial_node_classification_local.md", "learning_engine/tutorial_node_classification_pyg_local.md", "loading_graphs.rst", "overview/design_of_graphscope.md", "overview/getting_started.md", "overview/glossary.md", "overview/graph_analytics_workloads.md", "overview/graph_interactive_workloads.md", "overview/graph_learning_workloads.md", "overview/intro.md", "overview/positioning.md", "performance_and_benchmark.md", "python_tutorials.md", "reference/analytical_engine_index.rst", "reference/app.rst", "reference/context.rst", "reference/cython_sdk.rst", "reference/flex/index.rst", "reference/gae_java/about.rst", "reference/gae_java/index.rst", "reference/generated/graphscope.Vertex.rst", "reference/generated/graphscope.declare.rst", "reference/generated/graphscope.framework.app.load_app.rst", "reference/generated/graphscope.framework.dag_utils.add_column.rst", "reference/generated/graphscope.framework.dag_utils.add_labels_to_graph.rst", "reference/generated/graphscope.framework.dag_utils.arrow_to_dynamic.rst", "reference/generated/graphscope.framework.dag_utils.bind_app.rst", "reference/generated/graphscope.framework.dag_utils.clear_edges.rst", "reference/generated/graphscope.framework.dag_utils.clear_graph.rst", "reference/generated/graphscope.framework.dag_utils.context_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.context_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.copy_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_app.rst", "reference/generated/graphscope.framework.dag_utils.create_graph.rst", "reference/generated/graphscope.framework.dag_utils.create_graph_view.rst", "reference/generated/graphscope.framework.dag_utils.create_loader.rst", "reference/generated/graphscope.framework.dag_utils.create_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.create_unload_op.rst", "reference/generated/graphscope.framework.dag_utils.dynamic_to_arrow.rst", "reference/generated/graphscope.framework.dag_utils.get_context_data.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.graph_to_numpy.rst", "reference/generated/graphscope.framework.dag_utils.gremlin_to_subgraph.rst", "reference/generated/graphscope.framework.dag_utils.modify_edges.rst", "reference/generated/graphscope.framework.dag_utils.modify_vertices.rst", "reference/generated/graphscope.framework.dag_utils.output.rst", "reference/generated/graphscope.framework.dag_utils.project_arrow_property_graph.rst", "reference/generated/graphscope.framework.dag_utils.project_to_simple.rst", "reference/generated/graphscope.framework.dag_utils.report_graph.rst", "reference/generated/graphscope.framework.dag_utils.run_app.rst", "reference/generated/graphscope.framework.dag_utils.to_data_sink.rst", "reference/generated/graphscope.framework.dag_utils.to_directed.rst", "reference/generated/graphscope.framework.dag_utils.to_undirected.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_dataframe.rst", "reference/generated/graphscope.framework.dag_utils.to_vineyard_tensor.rst", "reference/generated/graphscope.framework.dag_utils.unload_app.rst", "reference/generated/graphscope.framework.dag_utils.unload_context.rst", "reference/generated/graphscope.framework.dag_utils.unload_graph.rst", "reference/generated/graphscope.framework.operation.Operation.__init__.rst", "reference/generated/graphscope.framework.operation.Operation.as_op_def.rst", "reference/generated/graphscope.framework.operation.Operation.eval.rst", "reference/generated/graphscope.framework.operation.Operation.evaluated.rst", "reference/generated/graphscope.framework.operation.Operation.key.rst", "reference/generated/graphscope.framework.operation.Operation.signature.rst", "reference/generated/graphscope.g.rst", "reference/generated/graphscope.get_default_session.rst", "reference/generated/graphscope.graphlearn.rst", "reference/generated/graphscope.gremlin.rst", "reference/generated/graphscope.has_default_session.rst", "reference/generated/graphscope.session.rst", "reference/generated/graphscope.set_option.rst", "reference/gnn_engine/algo_en.rst", "reference/gnn_engine/data_loader_en.rst", "reference/gnn_engine/graph_object_en.rst", "reference/gnn_engine/graph_query_en.rst", "reference/gnn_engine/graph_sampling_en.rst", "reference/gnn_engine/graph_traverse_en.rst", "reference/gnn_engine/gsl_en.rst", "reference/gnn_engine/install_en.rst", "reference/gnn_engine/model_programming_en.rst", "reference/gnn_engine/negative_sampling_en.rst", "reference/gnn_engine/operator.rst", "reference/gnn_engine/other_source.rst", "reference/gnn_engine/quick_start_en.rst", "reference/gnn_engine/system_config.rst", "reference/graph.rst", "reference/interactive.rst", "reference/learning.rst", "reference/networkx/builtin.rst", "reference/networkx/functions.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_cycle.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_path.rst", "reference/networkx/generated/graphscope.nx.classes.function.add_star.rst", "reference/networkx/generated/graphscope.nx.classes.function.all_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.common_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.create_empty_copy.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree.rst", "reference/networkx/generated/graphscope.nx.classes.function.degree_histogram.rst", "reference/networkx/generated/graphscope.nx.classes.function.density.rst", "reference/networkx/generated/graphscope.nx.classes.function.edge_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.freeze.rst", "reference/networkx/generated/graphscope.nx.classes.function.induced_subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.info.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_empty.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_frozen.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_negatively_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.is_weighted.rst", "reference/networkx/generated/graphscope.nx.classes.function.neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.nodes_with_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.non_neighbors.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_nodes.rst", "reference/networkx/generated/graphscope.nx.classes.function.number_of_selfloops.rst", "reference/networkx/generated/graphscope.nx.classes.function.selfloop_edges.rst", "reference/networkx/generated/graphscope.nx.classes.function.subgraph.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_directed.rst", "reference/networkx/generated/graphscope.nx.classes.function.to_undirected.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas.rst", "reference/networkx/generated/graphscope.nx.generators.atlas.graph_atlas_g.rst", "reference/networkx/generated/graphscope.nx.generators.classic.balanced_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.barbell_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.binomial_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circulant_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.circular_ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.complete_multipartite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.empty_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.full_rary_tree.rst", "reference/networkx/generated/graphscope.nx.generators.classic.ladder_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.lollipop_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.null_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.path_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.star_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.trivial_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.turan_graph.rst", "reference/networkx/generated/graphscope.nx.generators.classic.wheel_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.LFR_benchmark_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.connected_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.gaussian_random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.planted_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.random_partition_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.relaxed_caveman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.community.ring_of_cliques.rst", "reference/networkx/generated/graphscope.nx.generators.community.stochastic_block_model.rst", "reference/networkx/generated/graphscope.nx.generators.community.windmill_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.degree_sequence_tree.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_configuration_model.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.expected_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.havel_hakimi_graph.rst", "reference/networkx/generated/graphscope.nx.generators.degree_seq.random_degree_sequence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gn_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnc_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.gnr_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.random_k_out_graph.rst", "reference/networkx/generated/graphscope.nx.generators.directed.scale_free_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.duplication_divergence_graph.rst", "reference/networkx/generated/graphscope.nx.generators.duplication.partial_duplication_graph.rst", "reference/networkx/generated/graphscope.nx.generators.ego.ego_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.chordal_cycle_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.margulis_gabber_galil_graph.rst", "reference/networkx/generated/graphscope.nx.generators.expanders.paley_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.geographical_threshold_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.soft_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.thresholded_random_geometric_graph.rst", "reference/networkx/generated/graphscope.nx.generators.geometric.waxman_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hkn_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.harary_graph.hnm_harary_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.general_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.k_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.intersection.uniform_random_intersection_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree.rst", "reference/networkx/generated/graphscope.nx.generators.joint_degree_seq.joint_degree_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielski_graph.rst", "reference/networkx/generated/graphscope.nx.generators.mycielski.mycielskian.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees.rst", "reference/networkx/generated/graphscope.nx.generators.small.LCF_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.bull_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.chvatal_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.cubical_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.desargues_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.diamond_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.dodecahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.frucht_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.heawood_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.house_x_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.icosahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.krackhardt_kite_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.make_small_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.moebius_kantor_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.octahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.pappus_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.petersen_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.sedgewick_maze_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tetrahedral_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_cube_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.truncated_tetrahedron_graph.rst", "reference/networkx/generated/graphscope.nx.generators.small.tutte_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.davis_southern_women_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.florentine_families_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.karate_club_graph.rst", "reference/networkx/generated/graphscope.nx.generators.social.les_miserables_graph.rst", "reference/networkx/generated/graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge.rst", "reference/networkx/generated/graphscope.nx.generators.sudoku.sudoku_graph.rst", "reference/networkx/generated/graphscope.nx.generators.trees.prefix_tree.rst", "reference/networkx/generated/graphscope.nx.generators.trees.random_tree.rst", "reference/networkx/generated/graphscope.nx.generators.triads.triad_graph.rst", "reference/networkx/generated/networkx.generators.internet_as_graphs.random_internet_as_graph.rst", "reference/networkx/generated/networkx.generators.stochastic.stochastic_graph.rst", "reference/networkx/generators.rst", "reference/networkx/graphs.rst", "reference/networkx/index.rst", "reference/networkx/io.rst", "reference/networkx/transformation.rst", "reference/operation.rst", "reference/python_index.rst", "reference/selector.rst", "reference/session.rst", "resources_estimator.md", "storage_engine/gart.md", "storage_engine/getting_started.md", "storage_engine/graphar.md", "storage_engine/grin.md", "storage_engine/groot.md", "storage_engine/vineyard.md", "tutorial/builtin.rst", "tutorial/scaling.rst", "user_guide_and_examples_of_gae.md", "user_guide_and_examples_of_gle.md", "utilities/error_codes.md", "utilities/gs.md", "utilities/how_to_find_logs.md", "utilities/monitoring.md", "zh/analytics_engine.rst", "zh/deployment.rst", "zh/developer_guide.rst", "zh/frequently_asked_questions.rst", "zh/getting_started.rst", "zh/graph_transformation.rst", "zh/index.rst", "zh/installation.rst", "zh/interactive_engine.rst", "zh/learning_engine.rst", "zh/loading_graph.rst", "zh/tutorials.rst"], "titles": ["Built-in Algorithms", "Customized Algorithms", "Deployment for GAE", "Design of Analytical Engine", "Dev and Test", "FAQs", "Programming Model: FLASH", "Getting Started", "Guide and Examples", "Ingress: Incrementalize Graph Algorithms", "Key Concepts", "NetworkX Compatibility", "Overview and Architecture", "Performance Tuning", "Programming Model: PIE", "Tutorial: Develop Your Algorithms in C++ with FLASH Model", "Tutorial: Develop your Algorithm in C++ with PIE Model", "Tutorial: Develop your Algorithm in Java with PIE Model", "Tutorial: Develop algorithms in Python", "Tutorial: Graph Algorithms with NetowrkX APIs", "Tutorial: Graph Operations with NetowrkX APIs", "Tutorial: Running Builtin Algorithms", "Tutorial: Run Giraph Applications on GraphScope", "Tutorial: Run GraphX Applications on GraphScope", "Vertex-Centric Model", "Contact Us", "Deploy GraphScope on Clouds", "Deploy on K8s Cluster", "Deploy GraphScope Operator", "Deploy GraphScope with <code class=\"docutils literal notranslate\"><span class=\"pre\">helm</span></code>", "Deploy with Existing Vineyard Cluster", "Install GraphScope in offline environment", "Install GraphScope on Local", "Persistent storage of graphs on the Kubernetes cluster", "Design of GAE", "Code Style Guide", "Development Guide", "How to Contribute", "Debugging on local deployment", "How to Submit Pull-requests", "How to Test", "Engine Configuration", "Using Custom Graph", "Data Import Configuration", "Data Model", "GraphScope Interactive Development guide", "Create c++ Stored Procedures on GraphScope Interactive", "Turning Cypher Queries into Stored Procedures with GraphScope Interactive", "Getting Started", "Glossary", "Installation", "Overview", "Stored Procedures", "The Administrative tool", "Cypher Shell", "GraphScope Interactive", "Introduction to ArrowFragment", "Frequently Asked Questions", "Getting Started for GLE", "Graph Workloads", "GraphScope for Data Scientists", "How to Report Bugs", "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba", "Standalone Deployment for GIE", "Design of GIE", "Dev and Test", "Getting Started", "GIE for Cypher", "Using LLM as an Assistant in GIE", "Cypher Support", "Neo4j Ecosystem", "A Generic Graph Optimizer for GIE", "FAQs for GIE Gremlin Usage", "Guide and Examples", "Supported Gremlin Steps", "GIE for Gremlin", "Tutorial: LDBC Gremlin", "Apache TinkerPop Ecosystem", "Tutorials for Java Users", "Key Features", "Design of GLE", "Dev and Test", "Getting Started", "Graph Sampling", "Guide and Examples", "Tutorial: Training a Node Classification Model on K8s Cluster", "Tutorial: Training a Node Classification Model on Your Local Machine", "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine", "Loading Graphs", "Design of GraphScope", "Getting Started", "Glossary", "Graph Analytics Workloads", "Graph Interactive Workloads", "Graph Learning Workloads", "Introducing GraphScope", "Positioning of GraphScope", "Performance and Benchmark", "Tutorials for Python Users", "Analytical Engine API Reference", "Analytical App", "Context", "Cython SDK API", "Flex API Reference", "About Grape JDK", "Java Reference (javadoc)", "graphscope.Vertex", "graphscope.declare", "graphscope.framework.app.load_app", "graphscope.framework.dag_utils.add_column", "graphscope.framework.dag_utils.add_labels_to_graph", "graphscope.framework.dag_utils.arrow_to_dynamic", "graphscope.framework.dag_utils.bind_app", "graphscope.framework.dag_utils.clear_edges", "graphscope.framework.dag_utils.clear_graph", "graphscope.framework.dag_utils.context_to_dataframe", "graphscope.framework.dag_utils.context_to_numpy", "graphscope.framework.dag_utils.copy_graph", "graphscope.framework.dag_utils.create_app", "graphscope.framework.dag_utils.create_graph", "graphscope.framework.dag_utils.create_graph_view", "graphscope.framework.dag_utils.create_loader", "graphscope.framework.dag_utils.create_subgraph", "graphscope.framework.dag_utils.create_unload_op", "graphscope.framework.dag_utils.dynamic_to_arrow", "graphscope.framework.dag_utils.get_context_data", "graphscope.framework.dag_utils.graph_to_dataframe", "graphscope.framework.dag_utils.graph_to_numpy", "graphscope.framework.dag_utils.gremlin_to_subgraph", "graphscope.framework.dag_utils.modify_edges", "graphscope.framework.dag_utils.modify_vertices", "graphscope.framework.dag_utils.output", "graphscope.framework.dag_utils.project_arrow_property_graph", "graphscope.framework.dag_utils.project_to_simple", "graphscope.framework.dag_utils.report_graph", "graphscope.framework.dag_utils.run_app", "graphscope.framework.dag_utils.to_data_sink", "graphscope.framework.dag_utils.to_directed", "graphscope.framework.dag_utils.to_undirected", "graphscope.framework.dag_utils.to_vineyard_dataframe", "graphscope.framework.dag_utils.to_vineyard_tensor", "graphscope.framework.dag_utils.unload_app", "graphscope.framework.dag_utils.unload_context", "graphscope.framework.dag_utils.unload_graph", "graphscope.framework.operation.Operation.__init__", "graphscope.framework.operation.Operation.as_op_def", "graphscope.framework.operation.Operation.eval", "graphscope.framework.operation.Operation.evaluated", "graphscope.framework.operation.Operation.key", "graphscope.framework.operation.Operation.signature", "graphscope.g", "graphscope.get_default_session", "graphscope.graphlearn", "graphscope.gremlin", "graphscope.has_default_session", "graphscope.session", "graphscope.set_option", "Developing Your Own Model", "Data Source", "Graph Object", "Graph Query", "Graph Sampling", "Graph Traversal", "Graph Sampling Language\uff08GSL)", "Install from pip", "Graph Learning Model", "Negative Sampling", "Defining Your Own Operator", "Integrating Other Data Sources", "Quick Start", "System configuration", "Graph", "Interactive Query", "Graph Learning", "Builtin algorithms", "Functions", "graphscope.nx.classes.function.add_cycle", "graphscope.nx.classes.function.add_path", "graphscope.nx.classes.function.add_star", "graphscope.nx.classes.function.all_neighbors", "graphscope.nx.classes.function.common_neighbors", "graphscope.nx.classes.function.create_empty_copy", "graphscope.nx.classes.function.degree", "graphscope.nx.classes.function.degree_histogram", "graphscope.nx.classes.function.density", "graphscope.nx.classes.function.edge_subgraph", "graphscope.nx.classes.function.edges", "graphscope.nx.classes.function.freeze", "graphscope.nx.classes.function.induced_subgraph", "graphscope.nx.classes.function.info", "graphscope.nx.classes.function.is_directed", "graphscope.nx.classes.function.is_empty", "graphscope.nx.classes.function.is_frozen", "graphscope.nx.classes.function.is_negatively_weighted", "graphscope.nx.classes.function.is_weighted", "graphscope.nx.classes.function.neighbors", "graphscope.nx.classes.function.nodes", "graphscope.nx.classes.function.nodes_with_selfloops", "graphscope.nx.classes.function.non_edges", "graphscope.nx.classes.function.non_neighbors", "graphscope.nx.classes.function.number_of_edges", "graphscope.nx.classes.function.number_of_nodes", "graphscope.nx.classes.function.number_of_selfloops", "graphscope.nx.classes.function.selfloop_edges", "graphscope.nx.classes.function.subgraph", "graphscope.nx.classes.function.to_directed", "graphscope.nx.classes.function.to_undirected", "graphscope.nx.generators.atlas.graph_atlas", "graphscope.nx.generators.atlas.graph_atlas_g", "graphscope.nx.generators.classic.balanced_tree", "graphscope.nx.generators.classic.barbell_graph", "graphscope.nx.generators.classic.binomial_tree", "graphscope.nx.generators.classic.circulant_graph", "graphscope.nx.generators.classic.circular_ladder_graph", "graphscope.nx.generators.classic.complete_graph", "graphscope.nx.generators.classic.complete_multipartite_graph", "graphscope.nx.generators.classic.cycle_graph", "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph", "graphscope.nx.generators.classic.empty_graph", "graphscope.nx.generators.classic.full_rary_tree", "graphscope.nx.generators.classic.ladder_graph", "graphscope.nx.generators.classic.lollipop_graph", "graphscope.nx.generators.classic.null_graph", "graphscope.nx.generators.classic.path_graph", "graphscope.nx.generators.classic.star_graph", "graphscope.nx.generators.classic.trivial_graph", "graphscope.nx.generators.classic.turan_graph", "graphscope.nx.generators.classic.wheel_graph", "graphscope.nx.generators.community.LFR_benchmark_graph", "graphscope.nx.generators.community.caveman_graph", "graphscope.nx.generators.community.connected_caveman_graph", "graphscope.nx.generators.community.gaussian_random_partition_graph", "graphscope.nx.generators.community.planted_partition_graph", "graphscope.nx.generators.community.random_partition_graph", "graphscope.nx.generators.community.relaxed_caveman_graph", "graphscope.nx.generators.community.ring_of_cliques", "graphscope.nx.generators.community.stochastic_block_model", "graphscope.nx.generators.community.windmill_graph", "graphscope.nx.generators.degree_seq.configuration_model", "graphscope.nx.generators.degree_seq.degree_sequence_tree", "graphscope.nx.generators.degree_seq.directed_configuration_model", "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph", "graphscope.nx.generators.degree_seq.expected_degree_graph", "graphscope.nx.generators.degree_seq.havel_hakimi_graph", "graphscope.nx.generators.degree_seq.random_degree_sequence_graph", "graphscope.nx.generators.directed.gn_graph", "graphscope.nx.generators.directed.gnc_graph", "graphscope.nx.generators.directed.gnr_graph", "graphscope.nx.generators.directed.random_k_out_graph", "graphscope.nx.generators.directed.scale_free_graph", "graphscope.nx.generators.duplication.duplication_divergence_graph", "graphscope.nx.generators.duplication.partial_duplication_graph", "graphscope.nx.generators.ego.ego_graph", "graphscope.nx.generators.expanders.chordal_cycle_graph", "graphscope.nx.generators.expanders.margulis_gabber_galil_graph", "graphscope.nx.generators.expanders.paley_graph", "graphscope.nx.generators.geometric.geographical_threshold_graph", "graphscope.nx.generators.geometric.random_geometric_graph", "graphscope.nx.generators.geometric.soft_random_geometric_graph", "graphscope.nx.generators.geometric.thresholded_random_geometric_graph", "graphscope.nx.generators.geometric.waxman_graph", "graphscope.nx.generators.harary_graph.hkn_harary_graph", "graphscope.nx.generators.harary_graph.hnm_harary_graph", "graphscope.nx.generators.intersection.general_random_intersection_graph", "graphscope.nx.generators.intersection.k_random_intersection_graph", "graphscope.nx.generators.intersection.uniform_random_intersection_graph", "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph", "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree", "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree", "graphscope.nx.generators.joint_degree_seq.joint_degree_graph", "graphscope.nx.generators.mycielski.mycielski_graph", "graphscope.nx.generators.mycielski.mycielskian", "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees", "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees", "graphscope.nx.generators.small.LCF_graph", "graphscope.nx.generators.small.bull_graph", "graphscope.nx.generators.small.chvatal_graph", "graphscope.nx.generators.small.cubical_graph", "graphscope.nx.generators.small.desargues_graph", "graphscope.nx.generators.small.diamond_graph", "graphscope.nx.generators.small.dodecahedral_graph", "graphscope.nx.generators.small.frucht_graph", "graphscope.nx.generators.small.heawood_graph", "graphscope.nx.generators.small.house_graph", "graphscope.nx.generators.small.house_x_graph", "graphscope.nx.generators.small.icosahedral_graph", "graphscope.nx.generators.small.krackhardt_kite_graph", "graphscope.nx.generators.small.make_small_graph", "graphscope.nx.generators.small.moebius_kantor_graph", "graphscope.nx.generators.small.octahedral_graph", "graphscope.nx.generators.small.pappus_graph", "graphscope.nx.generators.small.petersen_graph", "graphscope.nx.generators.small.sedgewick_maze_graph", "graphscope.nx.generators.small.tetrahedral_graph", "graphscope.nx.generators.small.truncated_cube_graph", "graphscope.nx.generators.small.truncated_tetrahedron_graph", "graphscope.nx.generators.small.tutte_graph", "graphscope.nx.generators.social.davis_southern_women_graph", "graphscope.nx.generators.social.florentine_families_graph", "graphscope.nx.generators.social.karate_club_graph", "graphscope.nx.generators.social.les_miserables_graph", "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge", "graphscope.nx.generators.sudoku.sudoku_graph", "graphscope.nx.generators.trees.prefix_tree", "graphscope.nx.generators.trees.random_tree", "graphscope.nx.generators.triads.triad_graph", "networkx.generators.internet_as_graphs.random_internet_as_graph", "networkx.generators.stochastic.stochastic_graph", "Graph generators", "Graph types", "NetworkX-style API", "Reading graphs", "Graph Transformation", "Operation", "Python API Reference", "Selector", "Session", "Resources Estimator", "GART: Bridging the Gap between Relational OLTP and Graph Workloads", "Getting Started", "GraphAr: Standard Graph Data File Format", "GRIN: Graph Retrieval INterface", "Groot: Persistent Graph Store", "In-memory immutable graphs on Vineyard", "Applications and algorithms", "Scaling and repartitioning", "User Guide and Examples of GAE", "User Guide and Examples of GLE", "Error Codes", "Command-line Utility <code class=\"docutils literal notranslate\"><span class=\"pre\">gsctl</span></code>", "How to Find logs", "Monitoring", "\u56fe\u5206\u6790\u5f15\u64ce", "\u90e8\u7f72", "\u5f00\u53d1\u8005\u6307\u5357", "\u5e38\u89c1\u95ee\u9898", "\u5feb\u901f\u4e0a\u624b", "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c", "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf", "\u5b89\u88c5", "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce", "\u56fe\u5b66\u4e60\u5f15\u64ce", "\u8f7d\u56fe", "\u5165\u95e8\u6559\u7a0b"], "terms": {"The": [0, 1, 2, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 22, 24, 27, 29, 31, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 48, 52, 54, 55, 57, 63, 65, 66, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 110, 128, 129, 130, 133, 141, 143, 144, 151, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 178, 179, 183, 184, 185, 188, 189, 191, 193, 194, 199, 202, 207, 208, 209, 210, 211, 212, 215, 218, 221, 224, 226, 227, 228, 230, 231, 233, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 311, 312, 315, 316, 318, 321, 322, 323, 324, 325, 326, 329, 330, 332], "graph": [0, 1, 3, 4, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 36, 37, 38, 41, 47, 48, 49, 52, 53, 55, 57, 63, 64, 65, 66, 67, 69, 70, 74, 75, 77, 78, 82, 84, 91, 95, 98, 99, 100, 101, 102, 109, 110, 111, 112, 113, 114, 117, 119, 120, 122, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 137, 138, 143, 150, 152, 158, 164, 167, 168, 172, 174, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 310, 313, 314, 315, 316, 325, 326, 332, 336, 337, 338, 340, 341, 342], "analyt": [0, 1, 5, 8, 12, 14, 15, 16, 17, 18, 23, 27, 32, 34, 36, 37, 38, 40, 47, 57, 76, 78, 91, 93, 95, 96, 98, 102, 104, 107, 112, 171, 309, 314, 322, 325, 326, 332], "engin": [0, 1, 2, 5, 8, 16, 17, 23, 27, 28, 30, 32, 34, 38, 40, 49, 51, 52, 55, 57, 60, 63, 64, 65, 68, 71, 72, 73, 76, 80, 84, 85, 88, 90, 91, 92, 93, 94, 96, 100, 104, 112, 128, 152, 157, 165, 171, 172, 173, 309, 315, 316, 318, 322, 323, 324, 325, 335, 336], "gae": [0, 3, 10, 12, 14, 15, 28, 32, 57, 62, 78, 79, 89, 92, 96, 97, 98, 104, 128, 172, 333, 334], "graphscop": [0, 1, 2, 3, 4, 6, 8, 9, 11, 12, 13, 18, 24, 33, 34, 35, 37, 38, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 56, 57, 59, 63, 65, 67, 68, 71, 73, 74, 75, 76, 78, 79, 81, 84, 85, 86, 87, 88, 90, 91, 93, 97, 98, 100, 101, 104, 171, 172, 173, 174, 309, 311, 312, 313, 314, 315, 316, 317, 321, 322, 323, 324, 325, 326, 329, 332, 333, 335, 336, 337, 340, 342, 343], "offer": [0, 2, 9, 12, 20, 34, 42, 43, 44, 47, 48, 51, 52, 62, 65, 69, 71, 75, 79, 80, 89, 91, 95, 96, 321], "mani": [0, 4, 6, 10, 12, 13, 14, 24, 32, 34, 36, 37, 44, 51, 55, 57, 60, 64, 81, 88, 90, 91, 92, 94, 158, 165, 212, 256, 258, 309, 321, 326], "which": [0, 2, 4, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 38, 40, 41, 43, 44, 51, 52, 57, 60, 63, 64, 65, 66, 67, 68, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 102, 104, 108, 111, 124, 133, 135, 157, 158, 159, 160, 161, 162, 163, 165, 167, 168, 169, 171, 172, 173, 174, 188, 213, 215, 228, 229, 230, 238, 240, 257, 258, 259, 266, 268, 269, 287, 299, 301, 303, 307, 308, 309, 311, 312, 313, 315, 316, 318, 320, 321, 322, 323, 324, 326, 329], "enabl": [0, 1, 4, 6, 13, 15, 17, 18, 23, 31, 41, 45, 48, 51, 53, 55, 57, 75, 76, 80, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 99, 168, 174, 309, 316, 321, 322, 325, 326, 330], "user": [0, 2, 4, 6, 9, 11, 12, 13, 14, 15, 17, 18, 22, 23, 24, 27, 29, 31, 34, 37, 40, 43, 44, 45, 47, 48, 51, 54, 57, 62, 64, 68, 72, 74, 76, 79, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 157, 159, 160, 161, 162, 163, 164, 166, 169, 172, 309, 315, 316, 318, 321, 322, 325, 336, 340], "analyz": [0, 7, 13, 19, 27, 75, 89, 90, 92, 93, 95, 163, 321], "data": [0, 2, 3, 4, 6, 9, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 27, 30, 31, 33, 34, 48, 49, 50, 51, 52, 53, 55, 57, 62, 64, 65, 68, 70, 71, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 107, 109, 115, 116, 121, 126, 127, 131, 139, 140, 157, 159, 160, 161, 162, 163, 167, 171, 181, 187, 203, 204, 219, 236, 252, 271, 301, 309, 311, 312, 315, 316, 318, 321, 323, 324, 326, 332, 333, 335, 336, 341], "least": [0, 6, 37, 76, 174, 208, 230], "effort": [0, 34, 51, 97, 321], "cover": [0, 6, 15, 40, 83], "wide": [0, 11, 12, 24, 66, 78, 79, 83, 89, 90, 92, 93, 94, 96, 161, 320, 326], "rang": [0, 13, 18, 43, 44, 72, 74, 76, 79, 82, 83, 85, 86, 87, 89, 90, 93, 96, 99, 101, 102, 115, 116, 126, 127, 131, 139, 140, 157, 162, 166, 214, 216, 218, 221, 224, 236, 242, 256, 257, 258, 259, 287, 309, 314, 321, 332, 335, 336, 340, 341], "applic": [0, 1, 4, 6, 8, 10, 11, 13, 14, 24, 34, 49, 51, 57, 63, 64, 67, 75, 77, 79, 80, 91, 92, 93, 94, 97, 99, 100, 102, 112, 161, 240, 264, 320, 330], "commun": [0, 4, 6, 8, 9, 12, 15, 16, 18, 24, 27, 79, 89, 90, 91, 92, 95, 99, 100, 104, 159, 167, 260, 301, 306, 310, 320, 329], "detect": [0, 6, 8, 9, 79, 89, 90, 92, 93, 95, 96, 100, 228, 232, 233, 234], "etc": [0, 6, 7, 15, 29, 60, 64, 72, 80, 83, 88, 90, 91, 94, 97, 101, 157, 160, 161, 162, 165, 176, 188, 197, 202, 203, 309, 311, 322], "ar": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 37, 38, 41, 42, 43, 44, 48, 49, 50, 51, 52, 54, 57, 60, 63, 64, 65, 68, 69, 71, 72, 74, 75, 76, 79, 80, 81, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 104, 107, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 174, 183, 184, 185, 198, 199, 204, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 221, 223, 224, 227, 228, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 248, 252, 254, 255, 256, 257, 258, 259, 260, 264, 266, 268, 270, 271, 274, 292, 301, 302, 303, 304, 305, 309, 312, 315, 316, 318, 320, 321, 322, 323, 325, 329, 330, 342], "implement": [0, 1, 4, 8, 9, 12, 13, 16, 18, 22, 24, 34, 48, 60, 64, 67, 69, 70, 72, 74, 77, 79, 80, 83, 87, 88, 89, 93, 96, 99, 100, 104, 157, 159, 161, 162, 163, 165, 168, 169, 171, 172, 174, 250, 251, 255, 256, 258, 260, 261, 262, 303, 304, 312, 332], "pie": [0, 1, 3, 8, 12, 34, 76, 78, 79, 92, 104, 107, 314, 326, 336, 338], "program": [0, 3, 9, 15, 16, 17, 18, 20, 23, 24, 47, 51, 52, 78, 79, 83, 89, 91, 92, 94, 96, 97, 104, 157, 162, 163, 321, 322, 326], "model": [0, 1, 3, 8, 9, 18, 42, 55, 60, 64, 70, 71, 72, 76, 78, 79, 82, 83, 84, 88, 89, 90, 92, 93, 96, 104, 159, 161, 163, 164, 228, 232, 236, 238, 240, 242, 248, 250, 251, 256, 257, 258, 259, 260, 264, 265, 299, 306, 316, 320, 326, 336], "highli": [0, 4, 12, 34, 70, 76, 79, 91, 92, 320], "optim": [0, 9, 12, 14, 34, 41, 43, 44, 47, 52, 62, 64, 75, 76, 77, 79, 80, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 100, 157, 169, 171, 321, 323, 336], "best": [0, 16, 89, 91, 93, 96, 97, 100, 309, 332], "perform": [0, 3, 4, 6, 9, 12, 14, 17, 22, 23, 24, 37, 40, 41, 43, 62, 64, 69, 71, 74, 76, 77, 78, 80, 89, 91, 92, 94, 95, 96, 101, 159, 163, 165, 171, 266, 271, 301, 313, 315, 318, 322, 324, 326], "can": [0, 1, 2, 4, 6, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 60, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 83, 85, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 104, 108, 110, 134, 135, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 174, 183, 184, 187, 191, 212, 215, 228, 229, 230, 237, 238, 240, 256, 257, 258, 259, 266, 270, 271, 278, 280, 282, 287, 290, 295, 296, 301, 303, 309, 312, 313, 315, 316, 318, 320, 321, 322, 323, 324, 326, 329, 330, 332], "us": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 23, 24, 28, 29, 30, 31, 33, 35, 36, 37, 38, 40, 41, 43, 44, 48, 49, 51, 52, 53, 54, 55, 57, 60, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 109, 110, 134, 135, 144, 149, 157, 158, 159, 160, 161, 163, 165, 168, 170, 171, 172, 173, 174, 193, 194, 203, 215, 218, 222, 228, 229, 230, 236, 238, 242, 243, 245, 247, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 266, 270, 274, 287, 292, 301, 303, 306, 307, 309, 311, 312, 314, 316, 320, 321, 324, 325, 326, 329, 330, 332, 336, 342], "them": [0, 1, 2, 6, 8, 12, 14, 15, 17, 24, 27, 30, 33, 34, 36, 40, 52, 57, 60, 64, 69, 74, 76, 85, 89, 90, 92, 94, 96, 97, 98, 109, 157, 160, 169, 214, 301, 315, 321, 322, 332], "out": [0, 6, 9, 12, 27, 29, 33, 34, 37, 72, 75, 80, 87, 88, 90, 91, 92, 93, 96, 100, 102, 157, 160, 161, 163, 171, 174, 231, 240, 241, 248, 249, 252, 266, 267, 303, 307, 309, 321, 322, 323, 325, 336, 340], "box": [0, 91, 302], "manner": [0, 2, 17, 18, 32, 36, 51, 90, 92, 93], "here": [0, 4, 10, 14, 16, 17, 18, 20, 23, 27, 33, 36, 37, 38, 40, 41, 42, 44, 50, 52, 57, 63, 64, 65, 68, 69, 71, 72, 74, 75, 76, 79, 81, 82, 85, 86, 88, 94, 97, 100, 158, 159, 163, 166, 168, 169, 171, 174, 228, 240, 255, 256, 258, 267, 287, 309, 312, 320, 321, 322, 336], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 96, 97, 99, 100, 101, 102, 103, 104, 105, 108, 110, 134, 144, 146, 150, 151, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 178, 179, 180, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 203, 204, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 301, 302, 303, 304, 305, 306, 307, 309, 311, 312, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 329, 330, 332, 335, 336, 340, 341, 342], "full": [0, 4, 12, 16, 17, 18, 22, 34, 43, 72, 79, 80, 83, 89, 94, 96, 100, 157, 160, 161, 163, 219, 322, 326, 332, 341], "list": [0, 1, 16, 19, 20, 28, 31, 34, 37, 38, 42, 43, 44, 52, 63, 69, 72, 74, 76, 79, 85, 88, 91, 94, 98, 100, 102, 121, 122, 129, 130, 144, 158, 161, 163, 171, 174, 183, 185, 188, 195, 197, 203, 204, 207, 208, 212, 214, 215, 233, 236, 238, 240, 241, 242, 243, 244, 256, 260, 263, 266, 267, 272, 274, 287, 303, 309, 310, 312, 316, 322, 325, 330, 337, 340], "support": [0, 3, 4, 6, 9, 10, 12, 13, 17, 18, 20, 22, 24, 29, 32, 34, 37, 41, 42, 44, 48, 51, 54, 57, 60, 63, 64, 66, 70, 72, 76, 77, 78, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 104, 110, 157, 158, 159, 161, 162, 163, 165, 166, 168, 171, 172, 174, 309, 312, 315, 316, 318, 320, 322, 323, 325, 326, 329, 335], "bf": [0, 15, 17, 34, 97, 100, 332], "df": [0, 34], "hit": [0, 34, 36, 100, 101, 174, 310, 315, 332], "lpa": [0, 7, 34, 90, 100, 332], "sssp": [0, 7, 8, 9, 13, 14, 17, 18, 22, 24, 34, 56, 90, 97, 100, 101, 108, 315, 316, 324, 325, 332], "thi": [0, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 51, 52, 53, 57, 60, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 99, 100, 101, 102, 118, 131, 134, 149, 157, 158, 159, 161, 162, 163, 164, 165, 167, 169, 171, 174, 191, 205, 206, 207, 208, 209, 210, 215, 218, 220, 221, 228, 229, 230, 232, 233, 236, 237, 238, 240, 242, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 268, 270, 287, 289, 292, 297, 301, 303, 304, 306, 307, 308, 309, 311, 313, 315, 316, 317, 318, 320, 321, 322, 326, 329, 330, 332], "find": [0, 4, 8, 9, 22, 31, 32, 36, 37, 40, 42, 50, 57, 60, 62, 65, 72, 74, 76, 85, 88, 90, 92, 93, 97, 99, 108, 156, 174, 179, 198, 199, 228, 316, 321, 322], "problem": [0, 2, 6, 9, 11, 14, 15, 24, 31, 37, 38, 57, 59, 60, 64, 76, 92, 94], "from": [0, 2, 3, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 27, 29, 30, 34, 36, 37, 38, 41, 43, 47, 48, 49, 50, 51, 52, 54, 57, 60, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 108, 128, 129, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 188, 207, 209, 214, 216, 218, 221, 228, 231, 235, 236, 237, 238, 240, 243, 248, 249, 251, 252, 256, 257, 258, 259, 260, 261, 268, 275, 284, 296, 301, 303, 304, 308, 309, 311, 312, 315, 316, 321, 323, 329, 332, 336, 337, 340, 342], "given": [0, 7, 9, 13, 14, 20, 34, 43, 51, 52, 53, 55, 60, 63, 64, 65, 74, 75, 76, 83, 88, 90, 93, 94, 96, 100, 161, 163, 166, 169, 171, 173, 208, 215, 226, 238, 239, 240, 241, 242, 243, 244, 252, 260, 261, 262, 266, 267, 268, 269, 273, 301, 304, 305, 308, 309, 315, 316, 320, 321, 324, 325], "weight": [0, 7, 19, 20, 33, 43, 56, 74, 76, 83, 90, 92, 97, 100, 129, 157, 159, 160, 161, 162, 163, 166, 169, 171, 174, 176, 177, 178, 182, 193, 194, 236, 248, 252, 256, 259, 299, 307, 308, 309, 311, 316, 341], "As": [0, 7, 12, 13, 15, 16, 18, 20, 22, 24, 27, 38, 51, 57, 64, 66, 69, 76, 82, 83, 89, 93, 157, 159, 165, 166, 167, 238, 320, 321], "result": [0, 2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 24, 33, 37, 51, 52, 60, 64, 65, 66, 68, 71, 74, 75, 76, 79, 83, 89, 90, 92, 93, 94, 99, 100, 101, 109, 115, 116, 125, 131, 133, 135, 136, 139, 140, 157, 160, 161, 163, 165, 166, 168, 171, 172, 174, 238, 240, 243, 262, 309, 322, 324, 332, 336], "comput": [0, 3, 4, 6, 9, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 31, 34, 37, 49, 51, 64, 65, 74, 76, 79, 80, 83, 90, 91, 92, 93, 94, 95, 96, 99, 100, 102, 161, 162, 165, 167, 174, 255, 258, 259, 263, 268, 277, 300, 301, 313, 316, 322, 323, 332], "minimum": [0, 6, 57, 65, 69, 74, 76, 100, 228, 316], "distanc": [0, 7, 15, 17, 18, 90, 100, 174, 209, 248, 252, 256, 257, 258, 259, 260, 278, 290, 332], "ani": [0, 2, 4, 17, 19, 20, 22, 24, 27, 30, 33, 34, 36, 37, 38, 41, 42, 52, 53, 63, 64, 66, 72, 74, 75, 76, 88, 89, 90, 92, 93, 96, 98, 99, 101, 110, 117, 161, 171, 172, 173, 174, 185, 189, 204, 228, 233, 235, 238, 240, 256, 258, 260, 309, 312, 315, 321, 329], "vertex": [0, 2, 3, 4, 6, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 30, 33, 34, 42, 44, 56, 63, 69, 71, 72, 74, 78, 79, 80, 83, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 107, 128, 158, 159, 160, 161, 162, 163, 166, 169, 171, 173, 174, 248, 253, 270, 271, 287, 312, 314, 318, 320, 322, 323, 326, 332, 337], "other": [0, 3, 4, 6, 8, 9, 10, 12, 14, 16, 20, 23, 24, 29, 30, 33, 34, 36, 37, 42, 43, 50, 52, 57, 60, 64, 72, 74, 76, 79, 80, 83, 85, 89, 91, 92, 93, 94, 95, 96, 100, 102, 157, 159, 161, 163, 167, 170, 171, 172, 174, 178, 209, 211, 215, 218, 228, 237, 243, 249, 258, 259, 301, 309, 311, 312, 315, 316, 320, 321, 322, 325], "vertic": [0, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24, 33, 43, 44, 51, 56, 63, 64, 66, 69, 71, 72, 74, 80, 83, 89, 90, 92, 93, 94, 99, 100, 101, 102, 130, 158, 159, 160, 161, 162, 163, 166, 169, 171, 232, 243, 253, 255, 270, 271, 282, 284, 295, 296, 302, 315, 316, 318, 320, 321, 322, 323, 332, 336, 337], "all_pairs_shortest_path_length": [0, 34], "refer": [0, 2, 4, 9, 10, 12, 16, 17, 23, 24, 30, 33, 34, 37, 40, 42, 44, 48, 49, 51, 52, 54, 57, 63, 65, 66, 69, 72, 74, 76, 80, 81, 83, 92, 93, 94, 96, 100, 119, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 174, 207, 208, 219, 228, 229, 230, 231, 232, 233, 234, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 308, 309, 322, 326, 340], "tendenc": [0, 20], "similar": [0, 10, 12, 20, 37, 42, 63, 64, 72, 75, 76, 80, 83, 88, 89, 92, 96, 100, 157, 158, 159, 160, 163, 166, 171, 301, 309], "over": [0, 9, 12, 15, 16, 18, 22, 24, 33, 34, 57, 60, 74, 78, 83, 89, 91, 92, 96, 97, 100, 102, 160, 174, 196, 197, 203, 255, 309, 318, 326], "dissimilar": 0, "measur": [0, 6, 20, 64, 92, 94, 100, 158, 174, 252, 253, 286], "extent": [0, 6], "same": [0, 2, 4, 6, 10, 13, 15, 17, 20, 22, 29, 30, 37, 44, 48, 54, 64, 69, 74, 76, 80, 88, 92, 93, 97, 158, 159, 163, 164, 167, 169, 171, 173, 174, 202, 203, 224, 232, 233, 238, 240, 266, 267, 269, 302, 303, 309, 316, 320, 321, 322, 323, 324], "properti": [0, 4, 6, 7, 9, 12, 15, 17, 20, 33, 42, 43, 44, 55, 56, 65, 68, 71, 77, 90, 92, 93, 94, 99, 100, 101, 102, 119, 133, 147, 148, 149, 160, 163, 171, 172, 256, 271, 301, 306, 309, 312, 315, 316, 318, 320, 322, 323, 330, 336, 337, 340], "each": [0, 6, 9, 10, 12, 13, 14, 15, 16, 19, 20, 24, 30, 34, 35, 36, 38, 40, 42, 43, 44, 47, 63, 64, 71, 72, 74, 75, 76, 80, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 148, 157, 158, 159, 160, 161, 162, 163, 167, 168, 169, 171, 174, 183, 185, 203, 204, 209, 213, 215, 220, 226, 228, 230, 231, 232, 234, 235, 237, 238, 240, 241, 243, 248, 251, 253, 256, 257, 258, 259, 260, 263, 264, 266, 268, 269, 274, 277, 289, 294, 299, 303, 305, 306, 307, 309, 315, 316, 318, 320, 321, 322, 323, 326, 330], "attribute_assort": [0, 34], "nearest": [0, 100], "neighbor": [0, 6, 9, 13, 14, 17, 18, 56, 71, 74, 76, 80, 83, 92, 93, 94, 100, 102, 157, 158, 160, 161, 163, 165, 166, 167, 169, 170, 174, 179, 180, 199, 251, 252, 266, 269, 302, 309, 318, 321, 332], "return": [0, 6, 9, 15, 18, 20, 47, 48, 56, 64, 66, 67, 68, 69, 71, 74, 75, 76, 83, 85, 87, 90, 93, 100, 101, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 150, 151, 152, 156, 157, 159, 160, 161, 162, 163, 166, 167, 168, 169, 171, 172, 173, 174, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 315, 316, 318, 321, 332, 341], "success": [0, 13, 22, 104, 159, 243, 274], "0": [0, 9, 10, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 27, 28, 29, 30, 31, 33, 35, 41, 42, 43, 57, 60, 63, 65, 66, 70, 74, 76, 80, 82, 83, 85, 86, 87, 88, 90, 97, 99, 100, 101, 102, 116, 157, 158, 159, 160, 161, 162, 163, 164, 167, 168, 169, 170, 171, 174, 176, 177, 178, 180, 184, 185, 188, 189, 193, 203, 207, 208, 210, 211, 212, 213, 215, 218, 220, 221, 223, 224, 225, 227, 228, 231, 232, 233, 234, 236, 237, 238, 240, 241, 244, 247, 249, 256, 257, 258, 259, 260, 266, 267, 271, 274, 287, 292, 301, 303, 304, 309, 311, 312, 316, 318, 321, 322, 323, 324, 330, 332, 334, 335, 336, 337, 339, 340, 341, 342], "1": [0, 6, 7, 9, 10, 13, 14, 15, 17, 19, 20, 22, 23, 24, 28, 30, 31, 33, 34, 35, 37, 41, 43, 55, 60, 63, 64, 65, 66, 70, 72, 74, 76, 80, 82, 83, 85, 86, 87, 88, 90, 93, 94, 97, 100, 101, 157, 160, 162, 163, 164, 166, 171, 172, 173, 174, 176, 177, 178, 180, 184, 185, 188, 193, 194, 197, 202, 203, 207, 209, 210, 211, 212, 213, 215, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 309, 311, 312, 316, 321, 322, 323, 324, 330, 332, 336, 337, 339, 340, 341, 342], "2": [0, 6, 9, 10, 13, 14, 17, 18, 19, 20, 22, 23, 28, 31, 33, 34, 37, 43, 55, 63, 64, 65, 66, 70, 74, 76, 80, 82, 83, 85, 86, 87, 88, 90, 93, 94, 97, 100, 101, 157, 160, 161, 162, 163, 164, 166, 174, 176, 177, 178, 180, 188, 189, 193, 194, 197, 202, 203, 210, 211, 212, 215, 220, 221, 226, 228, 230, 232, 234, 235, 236, 238, 239, 240, 242, 243, 244, 248, 249, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 276, 278, 280, 281, 282, 286, 287, 289, 291, 292, 294, 301, 302, 303, 304, 309, 311, 312, 316, 321, 323, 324, 332, 333, 334, 336, 337, 340, 341, 342], "average_degree_connect": [0, 100, 332], "source_degree_typ": 0, "target_degree_typ": 0, "paramet": [0, 2, 6, 9, 15, 16, 17, 30, 41, 47, 49, 51, 52, 57, 64, 69, 74, 75, 76, 83, 87, 90, 94, 99, 100, 101, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 122, 124, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 156, 158, 159, 161, 163, 166, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 191, 192, 193, 194, 198, 199, 203, 204, 207, 209, 211, 212, 214, 215, 216, 218, 219, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 301, 302, 303, 304, 305, 306, 307, 309, 311, 312, 316, 321, 322], "str": [0, 20, 85, 86, 88, 100, 101, 102, 108, 109, 115, 116, 117, 119, 126, 127, 128, 131, 133, 134, 135, 136, 139, 140, 169, 171, 172, 187, 189, 303, 309, 311, 315, 316, 322, 337, 342], "target": [0, 6, 17, 22, 24, 65, 80, 81, 89, 90, 94, 96, 100, 102, 163, 165, 171, 174, 245, 247, 266, 269, 301, 322, 332], "base": [0, 4, 6, 9, 11, 12, 13, 14, 18, 32, 34, 41, 43, 45, 51, 60, 64, 65, 68, 72, 74, 76, 79, 83, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 123, 129, 157, 159, 161, 163, 164, 165, 171, 174, 245, 284, 299, 309, 321, 322, 326, 332, 341], "v": [0, 2, 6, 7, 9, 10, 13, 14, 15, 18, 20, 22, 24, 33, 37, 48, 56, 60, 66, 69, 72, 75, 76, 83, 90, 93, 94, 99, 100, 101, 102, 157, 160, 161, 162, 163, 166, 169, 171, 172, 173, 174, 180, 203, 228, 231, 236, 238, 242, 248, 251, 256, 259, 266, 269, 271, 303, 309, 315, 316, 321, 322, 332, 336, 340, 341], "sum": [0, 20, 69, 72, 92, 100, 102, 174, 228, 233, 236, 238, 239, 240, 249, 256, 259, 260, 267, 268, 307, 309, 340], "fraction": [0, 100, 174, 228], "pass": [0, 2, 6, 9, 10, 14, 15, 16, 18, 20, 24, 27, 37, 41, 51, 52, 64, 66, 68, 74, 76, 83, 88, 93, 94, 100, 102, 107, 163, 167, 169, 218, 256, 258, 301, 309, 313, 322, 332, 337, 342], "through": [0, 2, 4, 6, 12, 13, 14, 15, 16, 19, 22, 24, 27, 32, 34, 37, 38, 42, 48, 62, 63, 64, 66, 67, 68, 70, 71, 74, 75, 76, 77, 80, 83, 88, 90, 92, 93, 94, 96, 101, 104, 158, 159, 161, 162, 163, 168, 169, 171, 174, 204, 218, 235, 274, 309, 321, 322], "betweenness_centr": [0, 34, 174], "normal": [0, 6, 27, 57, 76, 100, 163, 171, 174, 231, 321], "endpoint": [0, 9, 10, 27, 28, 29, 63, 65, 67, 70, 74, 75, 85, 88, 90, 99, 163, 172, 174, 316, 318, 322, 332, 340, 342], "bool": [0, 6, 14, 15, 20, 56, 69, 88, 99, 100, 102, 146, 154, 171, 174, 181, 191, 193, 194, 203, 232, 242, 248, 252, 268, 309, 311, 316, 321, 342], "whether": [0, 37, 43, 52, 63, 64, 74, 76, 88, 89, 93, 99, 100, 158, 159, 163, 171, 231, 233, 236, 256, 267, 268, 309, 321, 322, 323], "should": [0, 6, 9, 13, 16, 19, 20, 22, 23, 27, 28, 30, 33, 37, 43, 47, 48, 63, 64, 66, 68, 72, 74, 76, 88, 89, 90, 94, 99, 100, 108, 111, 124, 133, 167, 168, 171, 173, 174, 204, 228, 256, 257, 258, 259, 309, 311, 316, 318, 321, 322, 323, 324], "includ": [0, 3, 4, 6, 7, 9, 12, 16, 17, 20, 22, 24, 27, 30, 35, 36, 37, 42, 43, 44, 51, 52, 53, 60, 62, 64, 65, 69, 70, 71, 74, 76, 79, 80, 81, 82, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 159, 160, 163, 165, 171, 174, 189, 228, 236, 242, 252, 301, 308, 309, 320, 321, 322, 329, 330], "count": [0, 6, 33, 47, 64, 66, 69, 71, 72, 75, 76, 83, 90, 92, 99, 100, 161, 162, 166, 167, 170, 174, 184, 242, 309, 322, 336, 340], "an": [0, 4, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 27, 29, 30, 31, 32, 34, 37, 40, 41, 42, 43, 44, 48, 51, 52, 53, 55, 57, 60, 63, 64, 65, 66, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 104, 108, 111, 112, 113, 114, 115, 116, 118, 119, 121, 124, 126, 127, 128, 129, 130, 131, 134, 135, 136, 139, 140, 141, 143, 144, 152, 157, 158, 159, 161, 162, 163, 165, 166, 168, 169, 171, 173, 174, 185, 186, 191, 196, 197, 203, 204, 206, 207, 208, 210, 213, 214, 215, 216, 218, 219, 221, 223, 224, 227, 229, 230, 238, 240, 241, 242, 244, 245, 248, 249, 250, 251, 255, 256, 257, 258, 259, 260, 265, 266, 267, 268, 269, 270, 274, 276, 282, 287, 291, 294, 295, 299, 301, 302, 303, 304, 306, 307, 309, 312, 313, 315, 316, 318, 320, 321, 322, 323, 324, 325, 326, 329], "travers": [0, 6, 13, 15, 17, 51, 64, 69, 72, 75, 80, 89, 90, 91, 92, 157, 160, 163, 165, 169, 172, 303, 309, 318, 321, 322, 323, 332, 340], "It": [0, 2, 4, 6, 9, 10, 11, 12, 13, 15, 16, 24, 27, 29, 34, 37, 40, 42, 43, 44, 47, 51, 57, 60, 63, 64, 66, 68, 69, 72, 74, 75, 76, 79, 80, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 100, 104, 150, 157, 158, 159, 163, 165, 167, 171, 172, 174, 178, 233, 237, 261, 262, 266, 269, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 290, 293, 295, 296, 301, 309, 316, 320, 321, 322, 323, 329, 330], "start": [0, 2, 4, 6, 9, 16, 19, 20, 27, 28, 29, 31, 32, 37, 41, 44, 51, 52, 53, 54, 55, 62, 63, 67, 68, 69, 74, 75, 83, 85, 87, 88, 93, 95, 98, 99, 101, 157, 161, 163, 172, 173, 174, 209, 234, 238, 240, 241, 244, 260, 274, 303, 311, 316, 321, 322, 326], "root": [0, 4, 27, 32, 36, 41, 57, 88, 91, 209, 211, 302, 303, 320], "explor": [0, 17, 42, 43, 50, 55, 60, 65, 74, 76, 89, 90, 93, 321], "present": [0, 2, 20, 27, 43, 53, 71, 76, 83, 84, 85, 86, 87, 89, 90, 92, 104, 174, 185, 228, 309, 320, 321], "prior": [0, 12, 34, 42, 76, 79, 89], "move": [0, 4, 6, 42, 68, 91, 163, 266, 269], "next": [0, 6, 9, 12, 14, 16, 24, 29, 30, 33, 34, 50, 75, 76, 80, 83, 84, 88, 89, 94, 157, 158, 161, 163, 165, 167, 168, 169, 235, 303, 315, 318, 321, 322, 324], "level": [0, 6, 12, 38, 41, 60, 64, 89, 91, 94, 100, 165, 219, 266, 267, 306, 321, 322], "int": [0, 14, 15, 16, 17, 18, 19, 20, 23, 24, 33, 56, 72, 85, 88, 99, 100, 101, 102, 134, 158, 159, 160, 161, 162, 163, 166, 169, 170, 171, 173, 174, 202, 207, 209, 211, 214, 216, 218, 219, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 244, 245, 246, 247, 248, 250, 251, 254, 255, 256, 257, 258, 259, 260, 263, 264, 265, 270, 271, 272, 273, 304, 309, 311, 316, 318, 322, 332, 340, 342], "evalu": [0, 6, 14, 15, 16, 18, 37, 79, 90, 91, 94, 97, 99, 100, 101, 112, 135, 144, 146, 150, 152, 171, 316, 326, 340], "also": [0, 1, 2, 4, 6, 9, 10, 12, 16, 17, 19, 20, 22, 23, 27, 29, 30, 32, 34, 36, 37, 38, 44, 49, 51, 53, 57, 60, 63, 64, 68, 72, 76, 79, 82, 84, 85, 89, 90, 91, 92, 94, 96, 97, 99, 100, 102, 104, 157, 158, 159, 161, 164, 165, 166, 169, 171, 172, 174, 209, 228, 253, 255, 256, 260, 279, 284, 289, 301, 303, 307, 309, 312, 315, 316, 318, 320, 321, 322, 325, 326, 332], "known": [0, 6, 8, 9, 24, 32, 63, 66, 68, 69, 76, 92, 93, 100, 191, 209, 212, 261, 262, 279, 303, 324], "see": [0, 2, 4, 13, 19, 20, 27, 29, 30, 36, 37, 38, 48, 57, 63, 66, 68, 72, 75, 76, 79, 88, 95, 100, 101, 104, 150, 152, 158, 159, 161, 166, 169, 171, 207, 217, 222, 228, 231, 232, 233, 234, 236, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 263, 264, 265, 266, 269, 274, 301, 304, 306, 309, 311, 315, 316, 320, 321, 322, 325], "max_round": [0, 100, 332], "10": [0, 13, 15, 16, 17, 20, 27, 31, 44, 57, 59, 60, 64, 66, 67, 72, 74, 76, 82, 83, 85, 86, 87, 90, 97, 100, 158, 159, 160, 162, 163, 169, 171, 174, 176, 177, 178, 212, 218, 228, 231, 233, 242, 243, 244, 245, 247, 251, 256, 260, 264, 280, 286, 291, 304, 309, 316, 322, 330, 332, 336, 340], "maximum": [0, 63, 69, 74, 76, 92, 100, 160, 174, 228, 244, 259, 260, 261, 262, 267, 308], "round": [0, 9, 14, 17, 24, 100, 102, 226, 236], "default": [0, 6, 13, 15, 20, 23, 28, 29, 30, 32, 36, 40, 41, 43, 47, 48, 52, 53, 54, 57, 60, 63, 65, 66, 72, 74, 76, 82, 85, 88, 97, 99, 100, 101, 102, 119, 128, 150, 151, 154, 158, 159, 163, 170, 171, 173, 174, 176, 177, 178, 181, 203, 205, 206, 209, 211, 212, 214, 216, 218, 219, 221, 223, 224, 227, 228, 231, 232, 233, 234, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 301, 302, 304, 306, 307, 309, 311, 312, 316, 318, 322, 329, 330, 342], "origin": [0, 4, 6, 9, 12, 13, 22, 42, 64, 71, 72, 74, 80, 85, 86, 94, 99, 101, 128, 157, 159, 171, 172, 228, 250, 256, 295, 303, 307, 309, 315, 316, 322, 323], "reciproc": [0, 174], "n": [0, 19, 20, 30, 33, 38, 41, 43, 47, 52, 53, 64, 66, 67, 69, 74, 76, 79, 83, 90, 94, 97, 100, 101, 161, 163, 166, 168, 174, 184, 188, 189, 191, 195, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 230, 231, 232, 237, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 270, 271, 274, 287, 302, 303, 304, 306, 309], "reachabl": [0, 174], "node": [0, 4, 10, 13, 15, 18, 27, 30, 33, 44, 47, 57, 60, 69, 70, 82, 83, 84, 89, 90, 92, 94, 96, 98, 100, 101, 102, 122, 125, 130, 133, 134, 152, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 191, 195, 197, 199, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 321, 323, 332, 335, 336, 341], "wasserman": 0, "faust": 0, "propos": [0, 3, 6, 12, 14, 24, 34, 79, 89, 91, 92, 94, 96, 161, 167, 318, 321], "improv": [0, 6, 9, 17, 19, 23, 72, 91, 94, 95, 96, 325], "formula": 0, "more": [0, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 20, 27, 29, 30, 32, 34, 36, 37, 38, 40, 44, 47, 48, 51, 52, 57, 60, 64, 65, 66, 68, 71, 72, 74, 76, 79, 80, 81, 82, 83, 88, 89, 91, 92, 93, 94, 95, 96, 99, 100, 101, 104, 157, 158, 161, 162, 163, 167, 168, 171, 174, 207, 248, 255, 256, 270, 271, 303, 309, 311, 316, 320, 321, 322, 325, 326, 329], "than": [0, 13, 15, 18, 23, 24, 29, 30, 33, 37, 51, 57, 63, 64, 69, 74, 76, 78, 83, 88, 89, 92, 93, 95, 96, 100, 159, 161, 163, 170, 174, 184, 218, 226, 228, 230, 235, 237, 248, 250, 259, 316, 321, 322, 325, 326], "one": [0, 2, 6, 9, 10, 12, 13, 14, 15, 19, 20, 22, 24, 29, 30, 36, 37, 40, 44, 47, 51, 57, 60, 62, 63, 64, 69, 72, 74, 76, 80, 83, 88, 90, 93, 94, 96, 99, 100, 102, 108, 109, 149, 157, 158, 159, 160, 161, 163, 167, 171, 174, 183, 207, 208, 211, 212, 215, 224, 225, 228, 237, 238, 243, 245, 246, 247, 248, 249, 251, 266, 269, 277, 280, 284, 287, 293, 294, 295, 301, 303, 305, 309, 315, 316, 318, 320, 321, 322, 325, 336, 340], "compon": [0, 4, 6, 12, 19, 29, 32, 34, 38, 40, 44, 57, 66, 71, 89, 91, 92, 93, 99, 100, 174, 242, 256, 315, 321, 322], "ratio": [0, 13, 76, 301], "actor": [0, 52, 76, 89, 286], "group": [0, 2, 51, 57, 64, 88, 90, 92, 93, 99, 165, 171, 232, 233, 234, 236, 253, 281, 299, 320, 322, 340, 342], "who": [0, 11, 29, 51, 76, 89, 93, 164, 169, 322], "closeness_centr": [0, 34], "wf": 0, "quantifi": 0, "how": [0, 2, 4, 8, 9, 12, 13, 14, 16, 20, 27, 30, 33, 34, 36, 38, 43, 44, 48, 52, 53, 57, 59, 60, 62, 63, 65, 68, 71, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 89, 90, 92, 93, 94, 96, 98, 101, 104, 112, 158, 159, 163, 165, 316, 317, 321, 323, 325, 326, 336], "its": [0, 4, 6, 7, 9, 10, 12, 13, 14, 18, 24, 30, 31, 34, 41, 42, 43, 51, 52, 53, 60, 68, 71, 72, 74, 76, 80, 82, 83, 86, 88, 89, 90, 92, 93, 94, 100, 101, 102, 149, 157, 159, 163, 167, 169, 171, 174, 216, 219, 226, 228, 248, 253, 266, 269, 277, 296, 306, 316, 321, 322, 324], "being": [0, 72, 83, 93, 171, 208, 238, 318, 321, 322, 323], "cliqu": [0, 6, 76, 89, 92, 229, 230, 234, 235, 237, 251], "complet": [0, 14, 31, 33, 34, 64, 68, 72, 76, 88, 91, 157, 159, 163, 184, 209, 210, 212, 214, 215, 221, 226, 235, 266, 269, 293, 309, 322], "have": [0, 2, 4, 6, 8, 9, 11, 12, 13, 15, 19, 20, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 44, 50, 57, 60, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 76, 78, 79, 81, 83, 88, 89, 90, 92, 93, 94, 96, 100, 101, 104, 108, 157, 158, 159, 160, 161, 163, 164, 166, 167, 169, 171, 174, 184, 188, 191, 203, 209, 214, 219, 228, 238, 239, 240, 242, 248, 251, 266, 267, 269, 285, 289, 303, 309, 315, 316, 320, 321, 322, 324, 326, 330, 336], "edg": [0, 6, 7, 9, 12, 13, 15, 17, 18, 19, 22, 24, 30, 33, 37, 42, 44, 51, 56, 63, 64, 68, 69, 72, 74, 80, 82, 83, 85, 86, 87, 89, 90, 92, 93, 94, 96, 99, 100, 101, 102, 113, 114, 117, 122, 129, 133, 134, 152, 157, 158, 159, 160, 161, 162, 163, 165, 166, 169, 170, 171, 172, 173, 174, 176, 177, 178, 181, 184, 185, 187, 188, 189, 191, 193, 194, 197, 198, 200, 202, 203, 204, 208, 210, 211, 212, 213, 214, 215, 218, 220, 221, 222, 225, 226, 228, 230, 233, 234, 236, 238, 239, 240, 242, 244, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 295, 296, 299, 303, 306, 307, 308, 309, 310, 312, 315, 316, 318, 320, 322, 323, 324, 332, 336, 337, 341], "u": [0, 6, 14, 16, 18, 20, 37, 56, 57, 72, 76, 88, 90, 100, 163, 167, 169, 171, 174, 180, 203, 215, 228, 242, 248, 251, 256, 259, 271, 309, 321, 332, 342], "equal": [0, 10, 57, 69, 74, 76, 82, 86, 88, 90, 174, 226, 228, 259, 264, 302, 336], "degree_assortativity_coeffici": [0, 100, 332], "hold": [0, 10, 20, 74, 99, 100, 101, 102, 128, 136, 159, 171, 174, 309, 315], "numer": [0, 20, 89, 91, 92, 100, 101, 174, 309, 315, 321], "valu": [0, 6, 9, 13, 15, 18, 20, 24, 29, 36, 41, 43, 47, 56, 57, 63, 64, 66, 69, 80, 85, 88, 92, 94, 99, 100, 101, 102, 135, 144, 156, 157, 159, 160, 161, 162, 163, 166, 168, 169, 170, 171, 173, 174, 183, 203, 218, 228, 256, 257, 258, 259, 266, 268, 269, 301, 302, 303, 309, 311, 312, 315, 316, 318, 321, 322, 323, 332, 340, 341, 342], "If": [0, 2, 4, 6, 7, 8, 13, 14, 15, 17, 20, 23, 27, 29, 30, 32, 33, 36, 37, 41, 42, 43, 48, 50, 52, 53, 54, 57, 63, 65, 66, 68, 74, 76, 82, 88, 90, 96, 100, 101, 104, 156, 158, 159, 163, 164, 167, 168, 170, 171, 172, 173, 174, 179, 180, 182, 189, 193, 194, 203, 204, 209, 210, 211, 212, 214, 215, 216, 218, 219, 221, 223, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 269, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 301, 304, 305, 307, 309, 311, 312, 315, 316, 318, 321, 322, 323, 329, 330], "fals": [0, 13, 15, 17, 18, 19, 20, 43, 63, 68, 87, 88, 99, 100, 102, 150, 157, 158, 159, 163, 169, 171, 173, 174, 187, 191, 193, 194, 203, 205, 206, 231, 232, 233, 236, 242, 252, 267, 309, 312, 316, 322, 332, 341], "ha": [0, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 17, 23, 28, 29, 31, 34, 37, 40, 41, 42, 44, 51, 57, 60, 64, 65, 66, 68, 69, 71, 72, 73, 76, 80, 83, 84, 85, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 102, 104, 149, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 171, 172, 174, 191, 193, 194, 197, 202, 203, 209, 224, 226, 228, 239, 243, 248, 256, 257, 258, 259, 260, 266, 269, 275, 276, 280, 281, 285, 291, 293, 296, 299, 301, 303, 307, 309, 313, 315, 316, 324, 326, 336, 337, 340], "adjac": [0, 10, 16, 20, 24, 74, 76, 94, 100, 160, 165, 174, 197, 230, 254, 272, 287, 301, 302, 309, 310, 321], "direct": [0, 9, 10, 15, 42, 44, 63, 76, 80, 83, 86, 88, 90, 91, 94, 99, 100, 120, 150, 157, 159, 163, 166, 169, 171, 174, 179, 184, 190, 205, 216, 229, 230, 231, 232, 233, 236, 240, 241, 243, 252, 253, 254, 255, 266, 267, 276, 303, 307, 309, 310, 312, 316, 320, 321, 323, 337, 341, 342], "three": [0, 6, 10, 12, 14, 18, 30, 34, 38, 40, 42, 76, 88, 89, 91, 96, 97, 104, 158, 161, 162, 163, 166, 167, 168, 169, 174, 203, 208, 215, 291, 296, 305, 309, 322, 326], "separ": [0, 6, 17, 30, 36, 52, 63, 65, 76, 89, 96, 158, 159, 256, 311, 321, 322], "defin": [0, 4, 6, 10, 12, 13, 18, 20, 24, 27, 42, 43, 44, 51, 52, 57, 63, 68, 72, 74, 76, 79, 82, 85, 88, 89, 90, 91, 93, 99, 100, 104, 119, 157, 158, 161, 163, 166, 168, 169, 174, 211, 233, 235, 258, 315, 316, 320, 321, 322, 336], "name": [0, 2, 4, 6, 12, 16, 17, 20, 22, 23, 27, 28, 29, 30, 32, 33, 37, 38, 40, 41, 42, 43, 44, 48, 52, 53, 57, 64, 65, 68, 69, 71, 72, 74, 76, 87, 88, 89, 91, 93, 99, 100, 101, 102, 108, 144, 158, 160, 163, 165, 167, 169, 171, 172, 174, 193, 194, 208, 275, 282, 287, 299, 305, 309, 311, 312, 315, 316, 320, 321, 322, 330, 332, 333, 335, 340, 342], "both": [0, 2, 10, 12, 13, 18, 19, 20, 32, 34, 44, 48, 52, 63, 66, 71, 72, 80, 86, 88, 89, 90, 91, 92, 93, 94, 100, 102, 157, 158, 159, 171, 172, 173, 188, 197, 202, 203, 208, 228, 252, 255, 260, 266, 269, 316, 318, 320, 321, 322, 324, 325, 339, 340], "degree_centr": [0, 34, 60, 100, 174, 310, 332], "centrality_typ": [0, 100], "appli": [0, 6, 9, 10, 12, 13, 24, 27, 33, 41, 48, 63, 64, 71, 74, 78, 80, 89, 90, 92, 96, 251, 258, 274, 301, 318, 321, 322, 324, 326], "far": [0, 89, 158], "possibl": [0, 4, 6, 15, 43, 51, 55, 57, 64, 80, 93, 94, 100, 159, 165, 166, 174, 242, 250, 251, 266, 267, 268, 269, 301, 305, 321], "along": [0, 6, 10, 20, 24, 31, 53, 72, 74, 80, 102, 159, 163, 169, 303, 309, 323], "branch": [0, 69, 76, 163, 209, 219, 340], "befor": [0, 4, 17, 22, 23, 27, 29, 30, 37, 41, 42, 48, 53, 68, 76, 83, 85, 99, 100, 104, 157, 163, 170, 209, 211, 212, 214, 216, 219, 221, 223, 224, 227, 238, 240, 241, 243, 245, 246, 247, 253, 254, 255, 261, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 304, 311, 316, 318, 321, 322, 324], "backtrack": 0, "influenc": [0, 27, 174], "relationship": [0, 44, 51, 57, 64, 69, 70, 76, 80, 83, 89, 92, 93, 94, 158, 159, 169, 321, 322], "high": [0, 6, 9, 51, 55, 60, 64, 71, 76, 88, 91, 92, 94, 95, 96, 97, 165, 243, 274, 316, 318, 322], "score": [0, 76, 94], "contribut": [0, 4, 62, 321], "low": [0, 6, 7, 13, 32, 64, 82, 89, 90, 94, 95, 96, 301, 322], "A": [0, 6, 7, 9, 10, 24, 27, 28, 29, 37, 41, 43, 44, 49, 55, 60, 65, 67, 69, 75, 76, 80, 82, 88, 89, 91, 92, 93, 94, 97, 99, 100, 101, 102, 109, 110, 112, 113, 114, 117, 120, 122, 129, 130, 134, 135, 144, 161, 162, 163, 166, 168, 171, 172, 173, 174, 176, 177, 178, 180, 181, 183, 185, 187, 188, 189, 191, 192, 193, 194, 197, 202, 203, 204, 207, 208, 209, 211, 212, 214, 218, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 244, 248, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 275, 277, 286, 297, 301, 302, 303, 304, 306, 307, 309, 311, 316, 320, 321, 322, 323, 324], "mean": [0, 2, 20, 29, 30, 36, 37, 41, 51, 63, 64, 72, 85, 99, 101, 107, 146, 159, 162, 163, 173, 174, 214, 231, 238, 248, 257, 258, 259, 309, 312, 315, 316, 318, 321, 322, 324, 329], "themselv": [0, 64, 76, 80, 303], "eigenvector_centr": [0, 34, 100, 174, 310, 332], "toler": [0, 100, 174, 228], "doubl": [0, 9, 14, 16, 17, 18, 33, 43, 56, 69, 72, 88, 97, 102, 158, 168, 279, 303, 324, 332, 340, 342], "error": [0, 2, 32, 36, 37, 38, 41, 57, 62, 64, 66, 99, 100, 163, 167, 171, 174, 208, 309, 322], "check": [0, 6, 12, 17, 27, 29, 30, 32, 33, 34, 35, 37, 38, 53, 57, 63, 64, 68, 76, 83, 85, 92, 93, 100, 167, 171, 174, 267, 268, 309, 316, 321, 322, 330, 335, 336], "converg": [0, 6, 9, 14, 17, 24, 94, 97, 100, 174], "number": [0, 8, 9, 13, 19, 20, 24, 28, 30, 33, 38, 41, 60, 63, 65, 66, 73, 74, 76, 80, 84, 85, 90, 92, 94, 97, 99, 100, 102, 159, 160, 161, 162, 163, 166, 170, 174, 184, 189, 191, 200, 201, 202, 207, 208, 210, 212, 215, 219, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 282, 287, 292, 299, 301, 302, 304, 306, 307, 308, 309, 316, 318, 321, 322, 323, 330, 336, 340], "iter": [0, 6, 9, 14, 16, 17, 19, 20, 24, 74, 75, 80, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 100, 102, 157, 160, 169, 173, 174, 176, 177, 178, 179, 180, 185, 196, 197, 198, 199, 203, 204, 214, 215, 216, 218, 221, 223, 224, 227, 228, 256, 257, 258, 259, 260, 266, 269, 271, 303, 309, 332, 336, 341], "import": [0, 2, 4, 7, 10, 15, 16, 17, 18, 19, 20, 22, 27, 29, 30, 33, 36, 37, 38, 53, 55, 60, 62, 64, 66, 67, 68, 75, 76, 78, 80, 82, 83, 85, 86, 87, 88, 90, 92, 94, 100, 101, 150, 152, 157, 158, 159, 161, 164, 166, 168, 169, 170, 171, 174, 228, 256, 257, 258, 259, 309, 316, 320, 324, 326, 330, 332, 333, 334, 336, 337, 340, 341, 342], "rate": [0, 42, 51, 55, 89, 95, 100, 256, 258, 259], "two": [0, 2, 6, 9, 13, 16, 17, 18, 19, 29, 37, 44, 51, 57, 60, 63, 64, 68, 71, 72, 76, 80, 81, 88, 90, 92, 93, 94, 96, 97, 157, 158, 159, 160, 161, 163, 165, 167, 169, 171, 174, 180, 203, 210, 211, 213, 215, 216, 220, 237, 248, 249, 256, 257, 258, 259, 260, 264, 266, 269, 270, 275, 276, 284, 302, 303, 308, 309, 320, 321, 322, 329, 336], "hub": [0, 29, 100, 101, 174, 227, 315], "author": [0, 27, 86, 90, 100, 174, 228, 316, 336], "estim": [0, 64, 71, 76, 92, 93, 169, 174], "within": [0, 13, 30, 36, 41, 43, 44, 47, 51, 52, 53, 55, 68, 69, 71, 72, 74, 75, 76, 81, 89, 90, 91, 92, 93, 94, 163, 172, 174, 228, 231, 232, 252, 258, 259, 316, 321, 330, 336, 340], "we": [0, 2, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 34, 35, 36, 37, 40, 41, 42, 43, 44, 47, 48, 50, 52, 54, 57, 60, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 76, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 104, 108, 110, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 172, 212, 226, 228, 238, 240, 266, 287, 309, 312, 315, 316, 321, 322, 324, 326, 336, 342], "need": [0, 2, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 29, 30, 31, 32, 33, 34, 36, 37, 40, 41, 42, 47, 48, 57, 60, 63, 64, 68, 76, 79, 80, 81, 82, 85, 88, 89, 90, 91, 93, 94, 96, 99, 100, 104, 157, 158, 159, 161, 163, 166, 167, 168, 170, 171, 243, 256, 261, 267, 287, 303, 309, 312, 318, 321, 322, 324, 325, 326, 332], "rel": [0, 27, 41, 43, 64, 65, 80, 88, 94, 159, 163, 174, 322], "immedi": [0, 6, 51, 64, 95, 100, 102, 163, 174, 312, 316, 322], "under": [0, 9, 10, 14, 17, 24, 38, 44, 52, 71, 76, 82, 88, 89, 100, 104, 163, 165, 166, 174, 321], "consider": [0, 71, 72, 88, 174, 231], "katz_centr": [0, 34, 100, 174, 310, 332], "alpha": [0, 76, 100, 174, 248, 249, 260, 301], "beta": [0, 100, 174, 249, 260], "attenu": [0, 174], "factor": [0, 13, 65, 76, 100, 174, 209, 219, 241, 243, 321], "neighborhood": [0, 6, 89, 91, 94, 100, 163, 167, 174, 252], "maxim": [0, 6, 174, 262, 308], "subgraph": [0, 6, 9, 17, 33, 76, 77, 79, 90, 91, 92, 100, 122, 128, 157, 163, 165, 171, 172, 174, 185, 188, 210, 221, 252, 309, 336, 340], "contain": [0, 2, 4, 6, 8, 17, 20, 23, 27, 32, 37, 38, 42, 43, 48, 50, 52, 57, 60, 63, 64, 69, 71, 73, 74, 76, 80, 83, 84, 88, 89, 90, 92, 94, 96, 97, 99, 102, 104, 157, 158, 161, 163, 166, 167, 168, 169, 171, 174, 176, 177, 178, 185, 188, 189, 204, 214, 215, 216, 218, 221, 236, 261, 262, 266, 267, 309, 312, 313, 316, 321, 322, 330, 334, 340], "found": [0, 4, 9, 16, 17, 18, 36, 57, 63, 75, 76, 80, 81, 91, 97, 150, 170, 228, 270, 271, 307, 309, 316, 320, 321, 322, 326], "recurs": [0, 6, 163, 211], "prune": 0, "less": [0, 2, 6, 13, 17, 27, 63, 68, 69, 88, 100, 163, 170, 174, 226, 237, 248, 250, 322], "kkore": [0, 34], "order": [0, 6, 34, 43, 51, 64, 69, 71, 79, 91, 93, 94, 100, 101, 158, 163, 169, 174, 176, 177, 183, 207, 208, 211, 216, 223, 236, 237, 240, 272, 273, 276, 301, 302, 309, 315, 318, 322, 340], "That": [0, 27, 100, 168, 226, 269, 312, 324], "kshell": [0, 34], "fast": [0, 9, 20, 64, 100, 167], "where": [0, 2, 6, 12, 13, 14, 18, 24, 37, 38, 40, 41, 54, 57, 68, 69, 71, 72, 79, 80, 88, 89, 90, 93, 94, 96, 100, 144, 158, 159, 161, 163, 167, 174, 184, 191, 209, 238, 242, 244, 253, 256, 257, 258, 259, 287, 309, 316, 320, 321, 322, 329, 336, 340], "assign": [0, 7, 9, 15, 18, 20, 36, 37, 63, 72, 81, 88, 90, 92, 94, 99, 100, 102, 174, 228, 236, 238, 240, 242, 256, 259, 264, 309, 312, 315, 318, 321, 322, 342], "unlabel": 0, "dure": [0, 6, 9, 13, 24, 52, 57, 66, 74, 76, 91, 92, 94, 99, 158, 163, 228, 316, 318, 322, 323, 324, 325], "aim": [0, 22, 47, 51, 76, 86, 91, 92, 93, 94, 96], "local": [0, 2, 4, 6, 10, 13, 14, 22, 24, 27, 30, 34, 37, 57, 62, 63, 67, 75, 76, 84, 88, 89, 90, 94, 99, 100, 104, 134, 158, 159, 167, 168, 169, 171, 323, 339, 340], "follow": [0, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 41, 42, 43, 47, 48, 50, 52, 53, 55, 57, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 104, 108, 157, 158, 159, 160, 161, 163, 166, 167, 169, 171, 173, 208, 228, 238, 242, 248, 251, 261, 262, 268, 271, 292, 305, 309, 316, 318, 320, 321, 322, 323, 325, 326, 329, 330], "specif": [0, 4, 6, 9, 12, 14, 15, 16, 20, 24, 33, 34, 37, 38, 40, 41, 47, 48, 53, 57, 60, 63, 64, 66, 69, 71, 72, 76, 79, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 161, 162, 163, 166, 169, 171, 228, 256, 260, 309, 315, 318, 320, 321], "ldbc": [0, 4, 34, 51, 63, 65, 72, 73, 79, 88, 92, 96, 97, 337, 342], "wai": [0, 1, 4, 6, 10, 14, 20, 29, 36, 37, 42, 47, 51, 52, 57, 60, 63, 64, 71, 72, 75, 79, 91, 93, 94, 161, 163, 165, 167, 174, 228, 294, 301, 303, 309, 316, 320, 321, 323], "exist": [0, 2, 4, 6, 8, 9, 10, 12, 14, 15, 20, 27, 34, 37, 41, 47, 53, 54, 60, 62, 69, 71, 74, 80, 88, 89, 91, 92, 93, 94, 96, 100, 102, 108, 110, 154, 156, 158, 161, 163, 167, 168, 171, 174, 193, 194, 198, 240, 249, 263, 307, 309, 316, 318, 320], "variant": [0, 31, 94, 97], "networkx": [0, 3, 7, 8, 12, 20, 34, 60, 79, 95, 98, 99, 100, 134, 174, 176, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 191, 192, 193, 194, 198, 199, 203, 204, 208, 209, 211, 212, 214, 215, 216, 219, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 249, 252, 253, 254, 255, 260, 261, 262, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 302, 304, 309, 311, 312, 314, 338, 343], "damp": 0, "set": [0, 2, 4, 6, 7, 9, 10, 13, 14, 15, 16, 18, 20, 23, 27, 30, 31, 40, 41, 42, 43, 48, 51, 57, 60, 63, 64, 65, 66, 69, 70, 71, 74, 76, 79, 82, 83, 88, 89, 90, 91, 93, 94, 97, 98, 99, 100, 102, 150, 156, 157, 158, 159, 161, 163, 166, 169, 170, 171, 172, 173, 174, 188, 212, 228, 242, 243, 248, 252, 260, 263, 264, 265, 270, 271, 289, 304, 307, 309, 312, 316, 320, 321, 322, 323, 326, 329, 334, 335, 339], "sampling_path": [0, 34], "source_id": [0, 14], "cutoff": 0, "fix": [0, 6, 74, 76, 80, 82, 94, 149, 301, 322, 324], "rank": [0, 6, 33, 89, 99, 100, 101, 301, 315], "vote": [0, 102], "scheme": [0, 6, 9, 42, 63, 88], "With": [0, 4, 12, 19, 24, 34, 36, 40, 52, 65, 69, 71, 72, 74, 76, 79, 84, 85, 89, 90, 91, 247, 320, 329], "top": [0, 9, 12, 22, 34, 72, 74, 76, 96, 161, 283, 322, 340], "highest": [0, 76, 243], "elect": 0, "num_of_nod": [0, 100], "select": [0, 9, 15, 36, 64, 68, 72, 80, 83, 88, 89, 92, 94, 101, 109, 115, 116, 126, 127, 131, 139, 140, 157, 163, 171, 228, 237, 260, 272, 306, 309, 315, 316, 320, 321, 340], "influenti": 0, "extract": [0, 50, 67, 69, 74, 88, 89, 90, 91, 100, 108, 172, 316, 318, 322], "weakli": [0, 100, 174, 248], "In": [1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 28, 29, 32, 34, 37, 38, 41, 42, 43, 44, 47, 49, 51, 52, 57, 60, 62, 63, 64, 65, 66, 68, 69, 72, 74, 75, 76, 78, 79, 80, 83, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 174, 231, 260, 263, 266, 267, 269, 309, 312, 315, 318, 321, 322, 324, 326, 329], "addit": [1, 4, 6, 9, 10, 12, 15, 18, 20, 24, 32, 34, 60, 64, 65, 66, 69, 72, 74, 76, 78, 79, 80, 83, 88, 91, 97, 119, 135, 158, 159, 160, 161, 171, 303, 309, 322, 326], "built": [1, 3, 4, 8, 9, 12, 15, 18, 20, 22, 32, 34, 36, 40, 51, 52, 57, 65, 66, 68, 71, 76, 89, 90, 94, 95, 97, 98, 157, 171, 245, 246, 247, 318, 326], "provid": [1, 2, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 41, 42, 43, 48, 51, 52, 53, 57, 60, 62, 63, 64, 68, 69, 71, 72, 74, 75, 76, 78, 79, 80, 81, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 118, 157, 159, 163, 164, 165, 169, 174, 205, 206, 228, 256, 257, 258, 259, 306, 309, 311, 316, 318, 320, 321, 322, 323, 326, 329, 332], "run": [1, 2, 4, 6, 8, 9, 12, 13, 19, 20, 24, 27, 29, 30, 31, 32, 38, 41, 42, 52, 53, 54, 55, 57, 63, 65, 67, 68, 74, 75, 78, 81, 84, 85, 88, 89, 90, 91, 94, 96, 98, 99, 100, 101, 135, 146, 163, 167, 168, 169, 171, 172, 261, 262, 312, 313, 316, 321, 322, 323, 324, 325, 326, 329, 330, 332, 334, 339], "your": [1, 2, 4, 7, 8, 12, 13, 14, 20, 23, 24, 27, 29, 30, 31, 32, 36, 38, 40, 42, 48, 50, 51, 52, 55, 57, 65, 66, 67, 68, 75, 80, 81, 82, 84, 85, 90, 96, 98, 100, 104, 159, 164, 168, 169, 218, 238, 309, 316, 318, 321, 329, 332, 340], "own": [1, 4, 6, 8, 12, 15, 24, 34, 36, 37, 48, 68, 72, 78, 79, 92, 98, 104, 149, 161, 164, 169, 228, 238, 316, 321, 322, 326], "design": [1, 4, 6, 7, 12, 13, 15, 18, 27, 41, 43, 44, 51, 52, 53, 55, 60, 62, 66, 71, 72, 76, 82, 83, 84, 85, 91, 93, 94, 95, 96, 99, 157, 159, 165, 174, 309, 322], "extens": [1, 4, 6, 27, 36, 43, 64, 66, 69, 83, 89, 158], "henc": [1, 2, 10, 32, 88, 183, 306, 309, 322], "you": [1, 2, 4, 7, 8, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 47, 48, 50, 52, 54, 57, 63, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 81, 82, 84, 85, 88, 90, 93, 95, 96, 98, 100, 104, 156, 158, 159, 162, 163, 164, 167, 168, 171, 174, 187, 218, 228, 238, 240, 252, 257, 258, 259, 309, 316, 318, 321, 322, 324, 329, 330, 332, 342], "flash": [1, 3, 8, 12, 89], "java": [1, 4, 8, 12, 14, 34, 62, 65, 77, 79, 91, 92, 96, 100, 104, 108, 321, 332], "c": [1, 6, 8, 12, 14, 17, 18, 31, 34, 38, 41, 42, 45, 47, 48, 49, 51, 52, 53, 55, 74, 76, 79, 80, 89, 91, 92, 99, 100, 101, 104, 107, 119, 131, 159, 163, 167, 169, 174, 207, 208, 218, 238, 249, 262, 263, 266, 267, 301, 303, 305, 306, 309, 321, 324, 330, 332, 334, 340], "python": [1, 7, 8, 11, 12, 14, 16, 17, 20, 22, 23, 27, 29, 30, 32, 33, 34, 37, 57, 60, 62, 63, 66, 68, 70, 76, 77, 80, 82, 85, 88, 89, 90, 92, 93, 95, 96, 99, 100, 107, 157, 160, 164, 167, 169, 172, 173, 309, 311, 312, 320, 321, 329, 330, 332, 333, 335, 336, 338, 339, 340, 342], "These": [1, 4, 9, 15, 20, 24, 43, 44, 51, 63, 69, 80, 88, 89, 90, 92, 93, 94, 95, 163, 169, 321, 329], "type": [1, 3, 4, 6, 9, 12, 13, 15, 16, 18, 19, 20, 27, 29, 30, 33, 34, 36, 37, 38, 42, 43, 48, 51, 52, 60, 63, 64, 65, 68, 70, 72, 74, 76, 80, 83, 85, 86, 87, 89, 90, 92, 93, 94, 97, 99, 100, 101, 107, 108, 110, 111, 115, 116, 119, 120, 123, 124, 126, 127, 128, 129, 130, 131, 133, 134, 136, 139, 140, 144, 150, 152, 157, 159, 160, 161, 162, 163, 166, 167, 168, 169, 171, 172, 173, 174, 179, 180, 183, 185, 188, 189, 191, 193, 194, 197, 198, 199, 202, 203, 204, 207, 208, 209, 211, 212, 214, 215, 216, 218, 219, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 301, 302, 303, 304, 305, 306, 310, 311, 313, 314, 316, 318, 320, 321, 322, 324, 333, 336, 341], "queri": [1, 2, 7, 9, 13, 14, 19, 22, 29, 34, 41, 42, 45, 49, 54, 55, 57, 60, 63, 65, 66, 67, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 109, 115, 116, 128, 131, 135, 139, 140, 144, 157, 159, 161, 163, 165, 169, 171, 173, 193, 194, 314, 316, 321, 324, 326, 330, 336], "upon": [1, 2, 9, 14, 51, 69, 71, 96, 171, 322, 323], "pregel": [1, 4, 8, 12, 17, 22, 34, 79, 89, 92, 314, 326, 336, 338], "alreadi": [2, 8, 20, 23, 24, 27, 29, 30, 36, 37, 40, 41, 60, 65, 71, 76, 83, 88, 90, 157, 307, 309, 342], "deploi": [2, 15, 33, 57, 62, 64, 65, 66, 67, 75, 79, 82, 89, 91, 96, 159, 316, 318, 323], "machin": [2, 4, 6, 7, 11, 14, 20, 24, 27, 30, 32, 36, 37, 38, 43, 50, 54, 57, 63, 65, 66, 67, 75, 81, 82, 84, 85, 89, 90, 91, 92, 93, 94, 100, 157, 169, 316, 321], "take": [2, 4, 6, 9, 14, 15, 18, 24, 27, 29, 30, 36, 40, 41, 48, 52, 57, 64, 68, 76, 79, 80, 88, 90, 91, 94, 104, 121, 158, 161, 162, 163, 167, 169, 171, 174, 237, 258, 289, 307, 309, 313, 315, 321, 322, 323, 324], "advantag": [2, 64, 79, 88, 95, 96, 325], "3": [2, 6, 9, 10, 13, 14, 17, 19, 20, 22, 23, 27, 30, 31, 32, 34, 37, 40, 55, 57, 60, 63, 64, 65, 66, 70, 72, 74, 75, 76, 80, 83, 87, 90, 94, 97, 100, 101, 160, 161, 162, 163, 166, 171, 172, 174, 176, 177, 178, 180, 185, 189, 193, 194, 210, 212, 215, 218, 224, 228, 229, 230, 232, 233, 234, 236, 240, 243, 244, 248, 249, 253, 255, 266, 267, 269, 271, 274, 277, 282, 286, 287, 290, 293, 296, 298, 301, 302, 303, 304, 309, 311, 312, 321, 324, 333, 336, 339, 340], "gie": [2, 32, 33, 62, 69, 76, 79, 88, 89, 93, 96, 97, 98, 128, 316, 333, 334, 343], "gle": [2, 32, 62, 79, 82, 83, 84, 89, 94, 96, 98, 333, 334, 341], "address": [2, 9, 14, 17, 23, 31, 54, 57, 72, 89, 94, 322, 340], "differ": [2, 6, 9, 10, 12, 13, 15, 17, 18, 20, 23, 27, 30, 34, 35, 36, 37, 40, 48, 60, 64, 68, 71, 74, 76, 77, 79, 80, 83, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 119, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 228, 232, 233, 234, 256, 259, 266, 286, 301, 309, 314, 316, 318, 320, 321, 323, 324, 325, 326], "complex": [2, 4, 6, 12, 22, 34, 37, 51, 52, 60, 64, 65, 72, 73, 74, 79, 80, 88, 89, 91, 92, 93, 94, 95, 96, 100, 160, 174, 238, 242, 257, 258, 259, 321], "relat": [2, 4, 13, 23, 24, 27, 33, 38, 42, 44, 48, 49, 51, 53, 57, 62, 64, 68, 70, 71, 74, 75, 80, 83, 86, 89, 90, 91, 93, 94, 99, 159, 163, 169, 265, 301, 306, 321, 322], "show": [2, 14, 19, 20, 27, 29, 30, 38, 52, 53, 57, 64, 65, 76, 79, 84, 85, 90, 92, 93, 94, 160, 161, 169, 312, 316, 318, 321], "kubernet": [2, 29, 57, 60, 62, 63, 79, 84, 88, 90, 95, 316, 322, 333, 335, 336, 338, 342, 343], "cluster": [2, 6, 7, 10, 14, 15, 17, 18, 19, 20, 22, 23, 29, 34, 57, 60, 62, 65, 67, 75, 76, 79, 82, 84, 88, 89, 90, 91, 92, 93, 94, 95, 100, 159, 169, 174, 231, 310, 316, 322, 323, 330, 332, 339], "howev": [2, 6, 9, 11, 13, 15, 20, 24, 30, 37, 41, 44, 48, 57, 60, 63, 64, 66, 68, 69, 71, 72, 76, 80, 88, 89, 94, 96, 158, 159, 160, 165, 174, 238, 309, 321, 322], "scenario": [2, 4, 6, 8, 12, 13, 40, 51, 52, 64, 74, 75, 76, 80, 83, 88, 89, 93, 94, 96, 158, 159, 161], "quit": [2, 30, 68, 228], "common": [2, 6, 12, 15, 30, 64, 68, 76, 80, 83, 88, 89, 91, 92, 93, 94, 96, 157, 158, 165, 166, 180, 301, 303, 309, 321, 330], "intend": [2, 13, 36, 69, 301, 315], "analysi": [2, 7, 8, 11, 13, 64, 75, 76, 79, 88, 94, 95, 97, 98, 100, 262], "offlin": [2, 62, 79, 80, 91, 94, 95, 318], "everi": [2, 6, 23, 41, 44, 74, 76, 83, 94, 99, 163, 174, 176, 177, 178, 193, 194, 212, 226, 289, 296, 309, 315, 321], "dai": [2, 20, 76, 309, 312], "export": [2, 4, 23, 29, 31, 33, 50, 57, 65, 81, 320, 335], "warehous": 2, "without": [2, 4, 6, 9, 14, 22, 27, 29, 30, 34, 37, 52, 53, 72, 74, 89, 91, 96, 104, 117, 158, 160, 161, 162, 163, 184, 221, 235, 242, 248, 249, 256, 257, 258, 259, 260, 309, 312, 316, 321, 324, 340], "real": [2, 6, 9, 12, 13, 34, 60, 63, 72, 74, 79, 89, 90, 92, 94, 301, 322], "time": [2, 6, 9, 12, 13, 14, 17, 19, 20, 23, 27, 29, 30, 33, 34, 37, 48, 57, 64, 69, 72, 74, 76, 79, 83, 87, 88, 90, 93, 94, 97, 100, 158, 159, 163, 174, 207, 208, 244, 245, 246, 247, 257, 258, 259, 261, 262, 271, 274, 309, 321, 322, 324, 336, 340], "sampl": [2, 29, 30, 31, 33, 42, 47, 55, 62, 63, 79, 80, 89, 90, 96, 104, 158, 159, 160, 162, 165, 167, 170, 173, 248, 268, 301, 322, 341], "case": [2, 4, 6, 8, 10, 13, 14, 15, 18, 27, 37, 40, 57, 60, 63, 64, 69, 72, 76, 83, 88, 93, 97, 102, 158, 159, 163, 165, 167, 170, 174, 228, 236, 242, 266, 277, 293, 315, 316, 321, 322, 326, 329], "unnecessari": [2, 6, 9, 71, 76, 321], "capabl": [2, 6, 11, 16, 20, 51, 69, 70, 71, 74, 77, 89, 91, 93, 96, 309], "independ": [2, 6, 30, 89, 96, 158, 172, 185, 188, 236, 263, 309], "document": [2, 10, 27, 29, 33, 35, 36, 38, 52, 53, 55, 57, 65, 68, 69, 70, 74, 75, 77, 79, 81, 94, 100, 157, 158, 164, 316, 317, 322], "walk": [2, 4, 32, 42, 48, 63, 76, 89, 90, 93, 163, 210, 221], "process": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 19, 22, 23, 24, 27, 29, 30, 32, 34, 35, 37, 41, 42, 48, 49, 51, 52, 55, 60, 62, 63, 65, 66, 70, 71, 75, 76, 78, 79, 80, 82, 83, 84, 85, 89, 91, 92, 93, 94, 95, 99, 110, 158, 159, 161, 163, 167, 169, 238, 240, 243, 271, 277, 309, 316, 318, 320, 321, 324, 326], "standalon": [2, 23, 27, 32, 57, 62, 65, 66, 76, 88, 89, 323, 329, 342], "self": [2, 63, 76, 88, 144, 157, 160, 163, 174, 184, 197, 236, 238, 240, 242, 248, 256, 257, 258, 259, 260, 309, 310, 312, 316, 322, 337, 341, 342], "manag": [2, 4, 10, 12, 14, 16, 27, 29, 30, 49, 52, 53, 55, 57, 60, 63, 70, 76, 79, 83, 84, 85, 89, 91, 92, 93, 94, 95, 96, 97, 99, 316, 322, 323, 329, 332], "k8": [2, 4, 7, 17, 22, 30, 37, 38, 40, 57, 60, 62, 63, 67, 75, 79, 82, 84, 88, 96, 98, 316, 322, 332, 333, 334, 336, 339, 342], "7": [2, 10, 20, 23, 27, 30, 31, 32, 57, 66, 76, 97, 158, 164, 169, 176, 177, 189, 212, 274, 280, 282, 286, 287, 290, 292, 304, 309, 324, 335, 339, 340], "To": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 34, 36, 37, 41, 42, 43, 47, 48, 50, 51, 52, 57, 60, 63, 64, 76, 78, 79, 80, 81, 83, 85, 86, 88, 89, 90, 94, 96, 97, 100, 104, 157, 158, 159, 161, 163, 164, 165, 167, 169, 174, 187, 238, 240, 245, 247, 256, 259, 299, 303, 309, 311, 315, 316, 318, 320, 321, 322, 325, 326, 329, 330], "get": [2, 4, 6, 12, 16, 17, 18, 19, 20, 27, 29, 30, 31, 32, 33, 34, 38, 40, 51, 55, 57, 62, 63, 64, 65, 69, 74, 76, 80, 83, 88, 93, 95, 98, 100, 101, 102, 120, 157, 160, 161, 162, 163, 166, 171, 172, 173, 174, 207, 228, 299, 309, 315, 316, 318, 321, 322, 326, 329, 330, 332, 335, 336], "instal": [2, 4, 15, 16, 19, 23, 33, 35, 40, 48, 55, 57, 63, 65, 67, 75, 90, 100, 104, 167, 309, 312, 316, 333, 334, 335, 336, 339], "client": [2, 17, 22, 23, 29, 33, 38, 40, 54, 56, 64, 75, 77, 79, 85, 87, 99, 100, 169, 316, 318, 320, 321, 322, 323, 332, 334, 339], "prepar": [2, 4, 33, 36, 42, 55, 63, 66, 68, 80, 81, 82, 83, 85, 86, 90, 94, 98, 321, 336, 339], "continu": [2, 6, 15, 16, 20, 27, 63, 64, 75, 76, 79, 80, 89, 90, 94, 97, 157, 228, 266, 269, 321, 322, 323], "incas": [2, 63], "doesn": [2, 13, 29, 32, 37, 38, 40, 63, 76, 104, 163, 171, 238, 240, 242, 309, 315, 324], "t": [2, 6, 8, 13, 17, 23, 29, 30, 32, 33, 36, 37, 38, 40, 50, 53, 56, 57, 63, 72, 74, 76, 87, 88, 91, 97, 99, 100, 102, 104, 110, 157, 162, 163, 169, 171, 173, 174, 187, 203, 238, 240, 242, 262, 266, 267, 301, 303, 306, 309, 315, 322, 324, 341], "could": [2, 4, 6, 9, 15, 22, 27, 28, 29, 31, 32, 36, 38, 40, 44, 63, 65, 66, 74, 79, 81, 88, 98, 100, 152, 159, 161, 162, 171, 237, 320, 321, 322, 323], "creat": [2, 9, 10, 12, 13, 16, 17, 19, 23, 27, 29, 30, 31, 34, 38, 43, 45, 48, 51, 53, 54, 55, 57, 63, 65, 66, 68, 74, 75, 76, 88, 89, 90, 93, 94, 99, 100, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 128, 129, 130, 134, 137, 138, 144, 150, 151, 152, 161, 163, 166, 168, 171, 172, 187, 209, 211, 212, 214, 215, 216, 218, 219, 221, 223, 224, 226, 227, 228, 230, 231, 233, 236, 238, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 253, 254, 255, 257, 258, 259, 261, 262, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 303, 304, 309, 311, 312, 313, 316, 322, 323, 324, 325, 330, 332, 335], "distinct": [2, 47, 69, 74, 89, 90, 93, 214, 276, 302, 321], "method": [2, 15, 16, 17, 18, 20, 22, 23, 29, 71, 76, 83, 85, 88, 92, 94, 99, 100, 102, 123, 134, 149, 157, 161, 165, 166, 171, 172, 174, 237, 245, 247, 256, 258, 309, 312, 314, 316, 321, 322, 326, 332], "entir": [2, 9, 34, 52, 64, 76, 90, 94, 163, 174, 309], "discret": [2, 80, 94, 157, 228, 241, 243, 249, 253, 264], "util": [2, 4, 6, 9, 15, 32, 36, 40, 42, 44, 47, 53, 69, 70, 71, 76, 79, 81, 86, 88, 89, 91, 92, 95, 99, 100, 102, 173, 274, 320, 321, 322, 325], "either": [2, 13, 30, 34, 52, 57, 71, 72, 75, 76, 83, 100, 159, 163, 171, 172, 212, 215, 228, 255, 266, 299, 309, 323], "aforement": [2, 47, 88, 92, 94, 158, 163, 322], "per": [2, 43, 51, 63, 321], "prefer": [2, 13, 27, 36, 41, 51, 321], "session": [2, 7, 8, 16, 17, 22, 27, 28, 29, 33, 57, 60, 66, 68, 73, 75, 76, 79, 82, 84, 88, 90, 98, 100, 101, 119, 150, 151, 152, 154, 156, 171, 172, 309, 313, 314, 322, 324, 329, 330, 332, 333, 334, 336, 337, 340, 342], "class": [2, 4, 9, 15, 17, 18, 20, 22, 23, 69, 76, 83, 86, 88, 90, 94, 99, 100, 101, 102, 107, 157, 158, 171, 172, 173, 174, 218, 287, 309, 313, 316, 321, 322, 323, 332, 341], "option": [2, 4, 6, 13, 15, 27, 29, 31, 32, 37, 40, 41, 43, 47, 52, 53, 63, 65, 67, 68, 69, 72, 74, 75, 76, 79, 81, 88, 91, 93, 96, 100, 101, 104, 107, 128, 134, 135, 136, 146, 156, 158, 161, 163, 171, 172, 174, 176, 177, 178, 193, 194, 203, 209, 211, 212, 214, 216, 218, 219, 221, 223, 224, 227, 231, 232, 233, 236, 238, 240, 241, 243, 244, 245, 246, 247, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 266, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 301, 304, 307, 309, 311, 312, 315, 316, 322, 323], "control": [2, 6, 27, 38, 88, 89, 91, 99, 174, 309, 321], "subset": [2, 6, 20, 51, 72, 74, 86, 90, 215, 226, 315, 316], "launch": [2, 8, 9, 17, 22, 29, 36, 40, 57, 60, 63, 73, 82, 84, 85, 90, 98, 150, 168, 313, 316, 322, 323, 329, 336], "For": [2, 4, 6, 9, 10, 12, 15, 16, 17, 20, 22, 29, 30, 35, 37, 40, 41, 42, 44, 47, 48, 51, 52, 57, 60, 63, 64, 69, 71, 72, 74, 76, 79, 80, 83, 85, 88, 89, 90, 92, 93, 94, 100, 102, 108, 157, 158, 159, 160, 163, 165, 167, 169, 171, 174, 186, 207, 210, 212, 215, 238, 240, 242, 243, 248, 251, 252, 256, 257, 258, 259, 260, 271, 274, 303, 309, 313, 315, 316, 322, 324, 325, 330], "exampl": [2, 7, 10, 15, 16, 18, 19, 20, 27, 31, 37, 40, 42, 43, 44, 47, 50, 52, 60, 62, 63, 66, 68, 69, 71, 72, 74, 75, 76, 77, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 100, 101, 107, 108, 150, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 174, 176, 177, 178, 180, 185, 187, 188, 193, 194, 197, 202, 203, 208, 210, 212, 214, 215, 218, 221, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 242, 244, 245, 247, 249, 252, 256, 257, 258, 259, 260, 266, 269, 274, 299, 301, 302, 303, 304, 307, 309, 311, 312, 313, 315, 316, 320, 321, 322, 323, 324, 329, 330, 332, 336, 341], "set_opt": [2, 7, 15, 17, 19, 29, 38, 57, 66, 68, 82, 85, 86, 87, 90, 330, 335], "show_log": [2, 7, 15, 17, 19, 29, 38, 57, 66, 82, 85, 86, 87, 90, 156, 330, 335], "true": [2, 6, 7, 9, 13, 15, 16, 17, 18, 19, 20, 29, 38, 41, 43, 57, 63, 66, 71, 74, 75, 76, 82, 83, 85, 86, 87, 88, 90, 99, 100, 102, 104, 146, 150, 154, 157, 158, 159, 163, 166, 169, 171, 174, 181, 190, 191, 192, 193, 194, 203, 205, 206, 212, 214, 232, 236, 238, 242, 248, 252, 255, 267, 307, 309, 311, 312, 316, 322, 323, 330, 332, 335, 340, 341, 342], "sess": [2, 16, 17, 22, 27, 29, 30, 33, 60, 68, 85, 86, 88, 100, 101, 146, 150, 171, 172, 316, 324, 330, 332, 333, 334, 336, 337, 340, 342], "enabled_engin": [2, 156, 316], "g": [2, 4, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 28, 29, 32, 33, 34, 36, 37, 40, 42, 47, 48, 52, 53, 60, 65, 66, 68, 72, 74, 75, 76, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 108, 152, 157, 159, 160, 161, 162, 163, 164, 166, 167, 169, 171, 172, 174, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 208, 209, 211, 212, 214, 215, 218, 219, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 244, 245, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 265, 266, 269, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 299, 301, 302, 306, 307, 309, 311, 312, 315, 316, 318, 320, 321, 322, 323, 325, 326, 329, 330, 332, 335, 336, 337, 339, 340, 341, 342], "custom": [2, 3, 4, 7, 8, 22, 29, 35, 36, 43, 44, 48, 55, 64, 79, 83, 88, 89, 92, 94, 95, 157, 158, 161, 163, 165, 166, 167, 256, 258, 259, 306, 326], "command": [2, 4, 7, 16, 23, 27, 29, 30, 31, 32, 35, 36, 40, 41, 42, 47, 48, 52, 57, 62, 65, 81, 82, 99, 158, 322, 323, 330], "line": [2, 4, 6, 7, 17, 36, 37, 38, 40, 47, 53, 62, 64, 81, 82, 91, 96, 157, 158, 309, 311, 322, 323, 330, 341], "releas": [2, 27, 31, 32, 35, 42, 48, 54, 57, 72, 85, 97, 266, 269, 315, 316, 322, 335, 339], "replac": [2, 17, 19, 22, 23, 29, 30, 42, 64, 65, 68, 74, 91, 97, 160, 161, 162, 171, 309], "my": [2, 18, 29, 309, 312, 316, 322], "illustr": [2, 4, 29, 42, 43, 44, 71, 76, 80, 86, 87, 92, 94, 160, 286], "Then": [2, 9, 14, 15, 16, 17, 19, 22, 23, 27, 29, 30, 33, 48, 60, 63, 64, 67, 75, 76, 83, 85, 88, 89, 90, 157, 163, 303, 318, 324], "connect": [2, 6, 15, 17, 19, 20, 27, 37, 40, 44, 54, 57, 63, 64, 70, 76, 77, 79, 83, 85, 88, 89, 90, 91, 92, 94, 100, 101, 102, 158, 159, 161, 163, 166, 172, 174, 178, 195, 210, 212, 214, 216, 220, 221, 223, 224, 226, 227, 228, 230, 231, 232, 233, 235, 237, 242, 243, 248, 249, 251, 256, 258, 259, 260, 261, 262, 263, 265, 274, 284, 285, 287, 289, 291, 308, 309, 316, 323, 324, 329, 332, 340], "servic": [2, 27, 28, 29, 38, 43, 47, 52, 54, 55, 67, 75, 79, 85, 89, 90, 92, 94, 99, 316, 323], "detail": [2, 4, 6, 7, 9, 12, 13, 14, 17, 20, 27, 29, 30, 33, 34, 38, 41, 42, 43, 44, 48, 57, 59, 63, 69, 71, 76, 79, 82, 83, 88, 92, 94, 96, 99, 100, 101, 150, 152, 156, 158, 159, 161, 162, 165, 166, 167, 169, 266, 309, 316, 320, 322, 325, 326], "addr": [2, 29, 102, 316], "ip": [2, 29, 54, 63, 65, 75, 316, 322, 340], "port": [2, 23, 29, 38, 48, 53, 54, 57, 63, 65, 68, 75, 88, 99, 316, 322, 340, 342], "mai": [2, 4, 6, 7, 8, 14, 15, 18, 20, 22, 24, 27, 29, 30, 31, 32, 36, 37, 38, 57, 60, 63, 64, 66, 68, 72, 74, 76, 80, 82, 85, 88, 89, 90, 93, 94, 95, 96, 110, 158, 163, 165, 166, 167, 168, 171, 208, 231, 238, 240, 248, 309, 312, 315, 316, 321, 322, 324, 326, 329], "would": [2, 4, 20, 29, 31, 36, 37, 40, 57, 65, 68, 76, 89, 99, 100, 163, 169, 312, 315, 316, 322], "previou": [2, 9, 15, 19, 27, 29, 31, 33, 40, 76, 90, 100, 109, 157, 161, 163, 247, 322], "wcc_result": 2, "wcc": [2, 13, 97, 100, 332, 337], "print": [2, 7, 16, 20, 29, 30, 33, 57, 60, 63, 66, 67, 68, 75, 76, 82, 83, 85, 86, 87, 88, 90, 100, 101, 160, 162, 163, 166, 169, 171, 172, 174, 187, 236, 304, 309, 312, 322, 330, 337, 340, 342], "to_datafram": [2, 7, 15, 60, 90, 101, 171, 315, 332], "id": [2, 4, 7, 9, 13, 15, 17, 18, 28, 30, 33, 38, 42, 43, 44, 47, 56, 57, 60, 63, 64, 65, 68, 69, 71, 77, 80, 83, 88, 90, 93, 94, 97, 99, 100, 101, 102, 128, 134, 136, 157, 158, 159, 160, 161, 162, 163, 166, 167, 169, 170, 171, 173, 266, 267, 306, 309, 312, 315, 316, 322, 323, 330, 332, 333, 335, 336, 340, 341, 342], "r": [2, 6, 7, 15, 16, 17, 22, 31, 33, 35, 60, 63, 69, 90, 91, 94, 100, 101, 209, 219, 226, 232, 236, 248, 256, 265, 297, 302, 315, 316, 322, 332, 336, 337], "tip": [2, 13, 294], "encount": [2, 32, 37, 57, 92, 110], "fail": [2, 37, 57, 64, 71, 74, 94, 174, 309, 322], "project": [2, 4, 7, 13, 15, 17, 23, 33, 37, 48, 51, 64, 67, 69, 90, 91, 93, 99, 100, 101, 133, 164, 171, 316, 322, 332, 336, 337, 340], "simpl": [2, 7, 9, 15, 16, 17, 20, 27, 30, 32, 33, 41, 43, 48, 52, 57, 62, 64, 66, 72, 74, 76, 82, 88, 89, 90, 93, 100, 101, 133, 157, 159, 172, 174, 238, 240, 243, 244, 266, 267, 268, 269, 271, 283, 301, 309, 315, 322, 332, 335, 336, 340], "empti": [2, 19, 29, 40, 53, 56, 74, 76, 88, 100, 102, 191, 215, 218, 248, 249, 287, 303, 309, 312, 322], "load": [2, 4, 7, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 29, 33, 42, 48, 49, 53, 57, 60, 62, 63, 64, 65, 66, 67, 70, 75, 82, 90, 91, 92, 94, 97, 98, 99, 100, 108, 110, 112, 141, 157, 159, 168, 169, 171, 316, 321], "dataset": [2, 4, 7, 15, 16, 17, 18, 19, 20, 22, 23, 27, 33, 57, 60, 66, 70, 76, 82, 85, 86, 87, 90, 94, 97, 100, 101, 157, 163, 169, 316, 332, 334, 336, 340, 342], "load_modern_graph": [2, 7, 30, 33, 66, 90, 100, 172], "modern": [2, 6, 7, 33, 41, 42, 47, 48, 52, 53, 55, 63, 65, 66, 76, 79, 90, 91, 92, 318, 322, 323], "current": [2, 7, 11, 12, 13, 16, 17, 22, 27, 29, 32, 37, 38, 41, 42, 44, 48, 51, 52, 53, 54, 57, 60, 63, 64, 69, 72, 74, 76, 79, 83, 85, 88, 90, 92, 93, 95, 100, 102, 151, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 171, 172, 301, 304, 309, 316, 321, 322, 332, 339], "e": [2, 4, 6, 9, 10, 12, 13, 14, 17, 18, 19, 20, 22, 23, 32, 34, 37, 56, 60, 65, 69, 71, 72, 76, 78, 79, 82, 83, 85, 88, 89, 90, 91, 92, 93, 94, 96, 97, 100, 101, 110, 159, 160, 161, 162, 163, 166, 169, 171, 172, 173, 174, 210, 228, 238, 240, 242, 243, 245, 246, 247, 250, 255, 256, 263, 264, 265, 266, 269, 271, 287, 292, 298, 300, 309, 311, 312, 315, 316, 318, 320, 321, 323, 325, 326, 332, 336, 339, 340, 342], "path": [2, 4, 6, 7, 9, 17, 19, 22, 23, 24, 27, 28, 30, 31, 33, 41, 42, 43, 63, 64, 65, 68, 69, 71, 77, 79, 80, 83, 88, 90, 92, 93, 96, 100, 108, 158, 159, 161, 163, 168, 169, 171, 174, 177, 210, 216, 220, 221, 223, 240, 303, 309, 311, 313, 315, 316, 320, 322, 324, 332, 333, 336, 337, 340], "store": [2, 10, 12, 13, 16, 17, 30, 34, 42, 45, 48, 51, 53, 55, 57, 62, 63, 69, 70, 72, 74, 76, 79, 88, 89, 91, 92, 93, 95, 96, 101, 102, 115, 116, 131, 139, 140, 159, 165, 171, 172, 228, 233, 256, 257, 258, 259, 260, 309, 311, 316, 318, 320, 321, 323, 330, 332, 335], "pod": [2, 27, 28, 29, 30, 38, 40, 57, 60, 63, 85, 88, 316, 322, 330, 333, 335, 336, 342], "elimin": [2, 6, 14, 47, 159], "extran": 2, "resourc": [2, 27, 29, 33, 38, 50, 57, 60, 75, 85, 89, 96, 100, 108, 228, 261, 316, 322, 325, 329, 335], "fewer": 2, "inconveni": 2, "requir": [2, 4, 6, 13, 15, 17, 20, 31, 32, 35, 37, 41, 44, 48, 50, 52, 57, 60, 64, 66, 68, 71, 72, 74, 76, 80, 83, 85, 88, 89, 90, 94, 96, 100, 104, 118, 157, 158, 159, 161, 162, 166, 167, 168, 169, 170, 207, 255, 256, 260, 309, 316, 321, 322, 325, 339], "equival": [2, 20, 57, 69, 71, 72, 74, 76, 163, 228, 265, 309], "function": [2, 4, 6, 9, 12, 14, 16, 17, 19, 20, 24, 34, 42, 44, 51, 52, 53, 57, 68, 69, 72, 74, 75, 76, 80, 88, 89, 91, 94, 96, 99, 163, 167, 174, 207, 208, 215, 218, 238, 240, 245, 256, 257, 258, 259, 260, 268, 304, 307, 308, 309, 310, 311, 314, 320, 321, 326, 329, 332], "when": [2, 4, 6, 9, 10, 13, 20, 23, 24, 27, 29, 30, 31, 37, 43, 44, 52, 57, 60, 63, 64, 68, 69, 74, 75, 76, 80, 83, 85, 89, 91, 92, 94, 96, 97, 100, 101, 102, 110, 144, 150, 158, 159, 160, 161, 162, 163, 166, 167, 168, 170, 171, 173, 174, 218, 228, 248, 256, 257, 258, 259, 265, 309, 311, 312, 316, 318, 320, 321, 322, 324, 330], "close": [2, 6, 27, 29, 30, 33, 75, 83, 85, 89, 100, 159, 169, 172, 311, 316, 322, 329, 336], "free": [2, 9, 37, 57, 83, 96, 249, 256, 266, 269, 271, 302, 308, 316], "delet": [2, 9, 27, 29, 30, 33, 57, 129, 168, 316, 318, 322, 335], "handl": [3, 6, 8, 9, 11, 12, 20, 27, 34, 37, 51, 53, 55, 63, 64, 72, 75, 76, 79, 89, 91, 92, 93, 94, 101, 131, 158, 170, 173, 309, 311, 321], "variou": [3, 4, 8, 12, 14, 15, 20, 24, 30, 34, 38, 40, 41, 51, 53, 64, 72, 76, 79, 80, 89, 90, 91, 92, 94, 95, 121, 171, 274, 321, 326], "algorithm": [3, 4, 7, 8, 12, 13, 14, 20, 24, 30, 57, 60, 64, 78, 80, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 104, 159, 162, 163, 165, 171, 219, 228, 231, 232, 240, 241, 242, 243, 244, 248, 249, 250, 251, 256, 261, 262, 265, 266, 268, 269, 292, 301, 306, 309, 310, 312, 314, 315, 325], "deriv": [3, 12, 34, 90, 93, 99, 101, 171, 174, 318], "grape": [3, 4, 15, 16, 22, 23, 34, 62, 78, 89, 95, 99, 108, 318, 321, 323, 324, 325, 326, 332, 338], "system": [3, 6, 8, 9, 12, 24, 30, 31, 33, 34, 36, 37, 47, 48, 49, 51, 57, 60, 63, 64, 66, 69, 70, 71, 72, 76, 77, 78, 79, 82, 89, 91, 92, 93, 94, 95, 97, 158, 159, 164, 167, 306, 308, 318, 320, 321, 322, 324, 326, 332, 340], "sigmod": [3, 12, 14, 24, 34, 89, 332, 338], "2017": [3, 12, 14, 34, 89, 266, 267, 332], "further": [3, 6, 10, 14, 20, 27, 30, 34, 51, 60, 65, 69, 72, 74, 76, 90, 91, 101, 159, 171, 172, 187, 318, 321], "enhanc": [3, 4, 9, 51, 71, 90], "introduc": [3, 6, 10, 19, 20, 24, 43, 62, 64, 69, 72, 74, 76, 78, 80, 89, 91, 93, 96, 157, 160, 161, 163, 165, 174, 286, 308, 321, 326], "lot": [3, 13, 37, 60, 76, 78, 326], "new": [3, 4, 6, 9, 12, 13, 14, 17, 20, 23, 30, 33, 34, 37, 41, 51, 55, 64, 66, 71, 76, 81, 89, 90, 91, 99, 102, 109, 110, 151, 168, 171, 172, 174, 181, 187, 228, 240, 249, 251, 271, 300, 307, 309, 316, 318, 320, 321, 322, 324, 336], "featur": [3, 6, 9, 12, 23, 32, 34, 42, 55, 69, 78, 80, 82, 85, 86, 89, 90, 93, 94, 95, 96, 99, 104, 157, 158, 165, 169, 171, 309, 316, 321, 326, 336, 341], "storag": [3, 9, 30, 57, 64, 65, 69, 71, 72, 76, 88, 91, 94, 96, 136, 159, 171, 320, 322, 323], "languag": [3, 12, 16, 35, 49, 55, 60, 64, 66, 71, 72, 74, 75, 76, 77, 79, 80, 83, 89, 90, 91, 92, 93, 96, 104, 172, 321, 322, 326], "pattern": [3, 6, 12, 23, 30, 41, 51, 64, 65, 68, 71, 72, 74, 79, 83, 89, 92, 96, 100, 162, 167, 322], "better": [3, 8, 12, 20, 24, 29, 34, 63, 64, 76, 78, 94, 96, 316, 322, 326], "integr": [3, 4, 9, 12, 13, 23, 34, 43, 48, 64, 66, 68, 71, 77, 78, 89, 91, 93, 95, 96, 302, 321, 322, 324, 326], "big": [3, 6, 12, 37, 78, 91, 326], "overview": [3, 23, 34, 48, 55, 71, 76, 90, 318], "architectur": [3, 9, 51, 89, 94, 100], "kei": [3, 4, 13, 20, 27, 42, 43, 44, 55, 63, 66, 69, 70, 71, 74, 76, 88, 91, 93, 94, 95, 100, 101, 102, 133, 134, 135, 144, 160, 163, 169, 171, 174, 203, 252, 256, 257, 258, 259, 307, 309, 311, 312, 315, 316, 321, 322, 332, 342], "concept": [3, 91, 94, 157, 158], "centric": [3, 6, 9, 12, 14, 15, 17, 18, 34, 78, 79, 89, 91, 92, 326], "ingress": [3, 12], "increment": [3, 14, 16, 18, 20, 34, 75, 80, 91, 99, 326], "compat": [3, 7, 12, 13, 15, 19, 20, 23, 32, 34, 48, 54, 57, 60, 63, 66, 69, 77, 79, 80, 82, 83, 84, 85, 86, 90, 94, 95, 98, 100, 165, 172, 315, 316, 318, 320, 336], "tune": [3, 60, 88, 89], "guid": [4, 7, 9, 16, 27, 29, 32, 37, 40, 41, 42, 43, 48, 50, 52, 53, 55, 62, 63, 66, 68, 70, 74, 75, 77, 82, 85, 86, 90, 104, 336], "code": [4, 6, 8, 14, 15, 16, 18, 29, 31, 32, 34, 36, 49, 51, 52, 62, 64, 65, 68, 69, 76, 81, 89, 90, 91, 96, 97, 99, 100, 102, 107, 157, 158, 159, 160, 163, 164, 169, 228, 270, 313, 321, 322, 324, 329], "organ": [4, 47, 53, 68, 74, 76, 79, 80, 94, 98, 157, 159, 161, 165, 166, 245, 247, 286], "identifi": [4, 9, 13, 24, 44, 72, 74, 76, 89, 90, 92, 100, 149, 236, 303, 306, 309, 316, 322, 342], "simplic": [4, 9], "suggest": [4, 13, 64, 68, 76, 88, 91, 228], "prebuilt": [4, 40, 65], "docker": [4, 27, 32, 33, 36, 38, 40, 42, 48, 50, 53, 57, 65, 79, 322, 329, 333, 336, 338, 339], "imag": [4, 29, 36, 38, 48, 53, 57, 65, 79, 81, 97, 160, 316, 329], "necessari": [4, 6, 23, 27, 37, 40, 42, 50, 52, 65, 66, 71, 75, 88, 111, 119, 124, 158, 159, 161, 163, 171, 321, 322, 330], "depend": [4, 13, 17, 22, 27, 30, 35, 36, 37, 40, 57, 65, 67, 68, 75, 76, 81, 82, 91, 94, 100, 163, 231, 236, 322, 329, 332], "shm": [4, 32, 40, 65, 81, 334], "size": [4, 6, 10, 13, 16, 17, 23, 24, 32, 40, 43, 56, 57, 65, 75, 80, 81, 83, 88, 94, 97, 102, 158, 160, 161, 163, 168, 170, 214, 215, 226, 228, 229, 230, 231, 233, 234, 235, 236, 237, 240, 251, 260, 264, 266, 309, 321, 322, 323, 334], "4096m": [4, 32, 40, 65, 81], "registri": [4, 27, 32, 40, 65, 81, 164, 316, 322, 334], "cn": [4, 23, 27, 29, 31, 32, 40, 65, 81, 88, 164, 322, 333, 334, 342], "hongkong": [4, 27, 32, 40, 65, 81, 322, 334], "aliyunc": [4, 23, 27, 29, 31, 32, 40, 65, 81, 88, 164, 322, 333, 334, 342], "com": [4, 7, 17, 19, 22, 23, 27, 29, 30, 31, 32, 35, 40, 65, 66, 68, 81, 82, 88, 91, 92, 97, 100, 104, 164, 167, 174, 261, 270, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 289, 294, 316, 321, 322, 332, 333, 334, 335, 342], "latest": [4, 14, 32, 37, 38, 40, 48, 50, 65, 68, 81, 82, 321, 322, 334, 339], "altern": [4, 42, 44, 69, 237, 256, 260, 309, 321, 322], "manual": [4, 9, 27, 30, 33, 57, 89, 96, 171, 322], "all": [4, 6, 9, 10, 12, 13, 15, 16, 17, 20, 22, 23, 24, 27, 29, 30, 35, 37, 44, 48, 51, 52, 53, 57, 63, 64, 66, 69, 71, 72, 74, 75, 76, 81, 83, 85, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 102, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 178, 179, 181, 182, 186, 188, 203, 204, 208, 209, 212, 214, 215, 219, 228, 237, 246, 252, 266, 267, 269, 271, 295, 303, 304, 307, 309, 316, 320, 321, 322, 325, 330], "pleas": [4, 9, 12, 14, 16, 17, 23, 24, 27, 30, 32, 33, 34, 37, 40, 41, 42, 48, 50, 51, 57, 65, 68, 72, 83, 85, 88, 90, 157, 158, 159, 161, 162, 163, 164, 167, 169, 320, 322, 326, 329, 336], "environ": [4, 11, 19, 20, 23, 24, 27, 29, 33, 37, 38, 42, 48, 57, 60, 62, 66, 70, 79, 85, 90, 91, 98, 100, 104, 164, 168, 174, 316, 321, 322, 323, 330, 335, 339], "after": [4, 6, 9, 14, 15, 17, 18, 20, 22, 24, 29, 32, 33, 34, 41, 52, 60, 68, 72, 74, 80, 91, 92, 94, 100, 101, 102, 112, 157, 158, 159, 160, 167, 168, 169, 174, 271, 282, 301, 309, 313, 315, 316, 318, 321, 322, 323, 329, 330, 332], "clone": [4, 22, 29, 30, 31, 32, 36, 37, 65, 68, 104, 164, 322, 334], "repositori": [4, 17, 29, 36, 37, 63, 68, 104, 316, 322], "enter": [4, 64, 75], "analatical_engin": 4, "directori": [4, 22, 27, 30, 31, 32, 33, 36, 38, 41, 42, 52, 57, 68, 75, 79, 99, 103, 105, 157, 168, 316, 320, 329, 330, 333, 335, 336], "git": [4, 22, 29, 30, 31, 32, 35, 37, 65, 68, 104, 167, 321, 334], "http": [4, 7, 19, 22, 23, 27, 29, 30, 31, 32, 35, 48, 57, 65, 66, 67, 68, 70, 75, 82, 85, 86, 90, 91, 92, 100, 104, 164, 167, 174, 228, 232, 233, 234, 248, 251, 258, 259, 261, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 293, 294, 295, 296, 301, 316, 321, 322, 332, 333, 334, 335, 336, 340, 342], "github": [4, 22, 29, 30, 31, 32, 35, 65, 68, 91, 92, 100, 104, 164, 167, 259, 316, 321, 332, 334, 342], "alibaba": [4, 17, 22, 23, 29, 31, 32, 65, 79, 89, 91, 94, 95, 104, 164, 167, 332, 334, 342], "cd": [4, 22, 29, 31, 32, 35, 50, 65, 67, 75, 104, 164, 167, 169, 322, 329, 330, 332, 334, 340], "sinc": [4, 6, 23, 24, 29, 30, 37, 41, 64, 68, 76, 81, 85, 88, 89, 97, 110, 159, 163, 171, 207, 208, 238, 240, 287, 304, 311, 315, 321, 322, 329], "inherit": [4, 6, 9, 16, 64, 91, 99, 157, 167], "libgrap": [4, 16, 31, 34, 91, 104], "lite": [4, 16, 31, 34, 91, 104], "note": [4, 13, 14, 20, 27, 29, 37, 38, 41, 42, 44, 47, 48, 52, 64, 68, 69, 71, 76, 80, 85, 86, 88, 90, 91, 92, 100, 101, 102, 110, 149, 151, 159, 163, 171, 174, 183, 184, 187, 191, 204, 205, 206, 207, 208, 209, 215, 216, 221, 224, 226, 228, 229, 230, 231, 233, 235, 237, 238, 240, 241, 242, 243, 244, 248, 249, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 269, 270, 271, 286, 301, 302, 303, 304, 306, 309, 311, 312, 315, 316, 320, 322, 329, 336, 342], "core": [4, 6, 12, 34, 37, 57, 64, 66, 89, 90, 91, 100, 104, 169, 174, 316, 336], "structur": [4, 6, 9, 12, 15, 16, 17, 20, 24, 41, 43, 44, 51, 60, 64, 71, 75, 76, 86, 90, 91, 92, 93, 94, 100, 158, 159, 160, 171, 219, 238, 286, 301, 303, 309, 310, 320, 321, 322, 325], "partition": [4, 56, 167], "worker": [4, 9, 13, 14, 23, 28, 34, 41, 65, 83, 85, 159, 162, 169, 171, 316], "between": [4, 6, 9, 10, 12, 13, 18, 19, 44, 57, 62, 64, 76, 77, 80, 92, 94, 99, 100, 158, 159, 161, 163, 169, 174, 231, 232, 233, 236, 242, 248, 249, 251, 255, 256, 257, 258, 260, 263, 265, 266, 267, 269, 274, 304, 306, 309, 321, 322, 329], "heavili": 4, "reus": [4, 30, 52, 71, 80, 83, 91, 100, 169, 171, 316, 318], "want": [4, 6, 7, 18, 20, 22, 27, 29, 30, 32, 33, 52, 72, 76, 82, 88, 95, 104, 110, 156, 167, 171, 218, 252, 309, 315, 316, 318, 322, 329], "fulli": [4, 80, 83, 93, 100, 110, 251, 321], "analytci": 4, "recomman": 4, "locat": [4, 23, 27, 36, 38, 42, 43, 44, 48, 50, 63, 65, 69, 76, 81, 88, 93, 103, 105, 159, 160, 171, 322, 323, 329], "analytical_engin": [4, 15, 31, 36, 104, 332], "like": [4, 14, 15, 18, 19, 20, 23, 24, 27, 32, 36, 37, 40, 41, 44, 57, 60, 63, 64, 66, 68, 71, 76, 77, 79, 81, 88, 89, 90, 94, 95, 96, 98, 99, 100, 158, 163, 167, 169, 171, 228, 238, 240, 248, 309, 315, 316, 318, 321, 322, 323, 342], "therebi": [4, 72], "fledg": [4, 12, 89], "coordin": [4, 15, 27, 29, 35, 37, 38, 40, 66, 85, 99, 171, 221, 316, 322, 329, 330, 333, 334, 336], "while": [4, 6, 12, 19, 20, 29, 34, 43, 44, 48, 51, 52, 60, 63, 67, 69, 71, 72, 74, 75, 76, 80, 89, 91, 92, 93, 95, 96, 158, 163, 169, 205, 206, 266, 269, 271, 303, 309, 318, 321, 322, 330], "": [4, 6, 9, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 29, 30, 32, 33, 35, 37, 38, 40, 41, 42, 43, 44, 47, 48, 51, 52, 53, 57, 63, 65, 67, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 83, 85, 86, 88, 89, 90, 91, 92, 93, 94, 97, 100, 110, 126, 127, 144, 157, 159, 161, 163, 166, 168, 170, 171, 174, 210, 221, 228, 231, 233, 236, 240, 243, 245, 246, 247, 263, 271, 272, 273, 296, 299, 301, 309, 315, 316, 318, 320, 321, 322, 323, 340, 341], "onli": [4, 6, 9, 12, 13, 14, 15, 17, 18, 20, 22, 23, 27, 29, 30, 34, 36, 41, 42, 44, 51, 54, 60, 63, 64, 69, 71, 72, 74, 76, 79, 80, 82, 83, 88, 89, 90, 91, 92, 93, 94, 96, 99, 100, 101, 102, 104, 108, 157, 158, 159, 161, 162, 163, 164, 171, 172, 174, 193, 194, 203, 229, 230, 255, 256, 260, 268, 281, 302, 303, 309, 315, 316, 321, 322, 323, 326], "ship": [4, 329], "6": [4, 10, 17, 18, 22, 31, 60, 66, 74, 75, 76, 90, 97, 100, 158, 163, 169, 174, 193, 212, 241, 242, 243, 260, 274, 276, 282, 283, 286, 289, 293, 294, 302, 304, 309, 322, 324, 332, 335, 336, 340], "graphalyt": [4, 96], "benchmark": [4, 34, 51, 72, 76, 79, 92, 94, 96, 228], "flatten": [4, 13], "thu": [4, 6, 12, 16, 20, 27, 34, 36, 57, 60, 76, 85, 94, 100, 162, 204, 212, 309, 321], "execut": [4, 6, 9, 12, 14, 15, 17, 23, 24, 27, 29, 40, 41, 42, 44, 48, 49, 51, 52, 54, 60, 63, 64, 65, 66, 70, 71, 74, 76, 79, 90, 91, 93, 94, 99, 100, 101, 128, 163, 167, 171, 172, 174, 269, 313, 316, 318, 322, 324, 329, 330, 332, 336, 340], "written": [4, 12, 20, 44, 76, 89, 91, 93, 287, 318, 321, 324, 332], "giraph": [4, 7, 8, 12, 17, 23, 24, 78, 96, 326], "graphx": [4, 7, 8, 12, 17, 24, 78, 96, 326], "app": [4, 15, 16, 17, 18, 33, 101, 102, 104, 109, 112, 135, 141, 144, 158, 171, 314, 315, 321, 332], "librari": [4, 6, 12, 15, 16, 31, 32, 33, 48, 51, 64, 65, 89, 99, 100, 104, 322], "serv": [4, 27, 57, 68, 71, 79, 90, 91, 94, 159, 322], "layer": [4, 6, 64, 80, 83, 91, 94, 96, 157, 158, 161, 165, 169, 341], "cuda": [4, 97], "suit": [4, 36, 60, 65, 80, 94, 329], "gpu": [4, 91, 164], "acceler": [4, 27, 321], "fragment": [4, 10, 12, 13, 14, 16, 17, 18, 56, 64, 92, 94, 102, 134, 171, 172, 318, 323, 326, 332], "extend": [4, 9, 17, 23, 51, 71, 72, 74, 75, 76, 96, 101, 158, 166, 167, 255, 321, 332], "loader": [4, 22, 65, 87, 99, 110, 121, 314, 323, 337, 338], "mutabl": [4, 91], "io": [4, 27, 30, 33, 40, 91, 92, 100, 168, 171, 259, 316, 322, 325], "io_adaptor": 4, "parallel": [4, 6, 12, 14, 15, 16, 24, 34, 60, 79, 89, 91, 93, 99, 102, 159, 238, 240, 277, 309, 312, 322, 332], "sub": [4, 12, 14, 18, 76, 79, 88, 101, 161, 163, 321, 326], "helper": [4, 329], "thread": [4, 6, 31, 41, 63, 65, 80, 97, 170], "messag": [4, 6, 10, 14, 15, 16, 17, 18, 24, 34, 36, 37, 38, 53, 57, 64, 76, 83, 94, 99, 102, 170, 321, 332], "buffer": [4, 168], "sync": [4, 102, 168, 321], "serial": [4, 74, 75, 99, 171, 316, 321, 340], "vertex_map": [4, 13, 42, 43, 150, 171, 316], "some": [4, 6, 10, 12, 13, 17, 20, 23, 29, 31, 34, 36, 37, 48, 63, 64, 66, 69, 72, 74, 75, 80, 88, 89, 92, 94, 100, 157, 158, 159, 165, 167, 169, 170, 171, 172, 219, 228, 238, 240, 243, 262, 303, 308, 309, 321, 322, 323, 329], "map": [4, 6, 13, 42, 48, 53, 69, 72, 74, 76, 92, 99, 158, 167, 171, 301, 316, 322, 323, 337, 340], "intern": [4, 13, 42, 48, 72, 92, 171, 209, 332, 334], "frame": [4, 94], "wrap": [4, 88, 91, 99, 104], "becaus": [4, 37, 64, 68, 72, 76, 94, 157, 160, 174, 304, 321, 322], "reli": [4, 9, 19, 68, 70, 164, 321], "templat": [4, 9, 15, 28, 56, 99, 321], "inadequ": 4, "usual": [4, 9, 13, 19, 27, 38, 57, 60, 64, 68, 74, 76, 80, 83, 84, 85, 94, 163, 167, 170, 237, 260, 303, 309, 321, 323, 324], "multipl": [4, 6, 12, 14, 17, 29, 30, 40, 43, 44, 51, 52, 63, 64, 69, 71, 74, 79, 80, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 158, 159, 163, 174, 271, 309, 315, 320, 321, 324, 330], "label": [4, 6, 7, 13, 15, 20, 33, 47, 56, 63, 68, 69, 72, 82, 86, 87, 89, 90, 92, 94, 99, 100, 101, 102, 110, 157, 160, 163, 169, 171, 174, 209, 213, 220, 224, 225, 227, 237, 238, 240, 241, 242, 243, 244, 286, 287, 309, 311, 312, 315, 316, 320, 322, 323, 336, 337, 340, 341], "cannot": [4, 27, 30, 57, 74, 76, 80, 94, 96, 99, 100, 159, 171, 228, 267, 268, 316, 322, 324, 335], "determin": [4, 37, 41, 64, 74, 76, 80, 83, 88, 92, 93, 99, 100, 159, 163, 254, 257, 258, 259, 316], "reason": [4, 57, 72, 74, 80, 158, 159, 289], "jit": 4, "technologi": [4, 62, 64, 95], "compil": [4, 15, 31, 32, 34, 41, 45, 48, 51, 53, 55, 57, 64, 65, 69, 75, 89, 100, 112, 321, 322, 324, 330], "associ": [4, 6, 9, 29, 41, 42, 44, 52, 69, 74, 94, 243, 255, 301, 303, 309, 316, 321, 322], "runtim": [4, 6, 17, 23, 31, 47, 48, 64, 89, 91, 92, 93, 99, 100, 104, 321, 334, 335], "wrapper": [4, 67, 75, 77, 79, 93, 99, 112, 118, 171, 172, 321], "facilit": [4, 20, 65, 79, 80, 83, 94, 158, 321, 322], "task": [4, 6, 7, 14, 34, 37, 40, 64, 66, 76, 79, 80, 82, 84, 85, 86, 87, 89, 91, 92, 94, 158, 169, 321], "api": [4, 8, 15, 16, 18, 22, 24, 30, 34, 60, 62, 70, 79, 89, 95, 98, 104, 110, 157, 159, 161, 162, 163, 167, 173, 309, 316, 321, 322, 323, 332, 343], "jar": [4, 8, 22, 23, 35, 100, 322, 332], "read": [4, 8, 20, 24, 37, 43, 51, 60, 67, 69, 73, 84, 88, 89, 90, 91, 157, 158, 163, 168, 169, 171, 207, 208, 307, 309, 310, 314, 316, 318, 320, 322, 340], "about": [4, 7, 12, 14, 17, 30, 34, 37, 38, 63, 65, 66, 76, 81, 82, 89, 94, 95, 99, 100, 163, 167, 168, 315, 316, 320, 325, 332], "cmake": [4, 31, 32, 36, 57, 164], "script": [4, 32, 37, 96, 97, 128, 157, 158, 169, 172, 333, 339], "configur": [4, 15, 16, 17, 23, 27, 31, 35, 37, 38, 42, 48, 50, 52, 53, 55, 57, 65, 74, 75, 76, 85, 88, 89, 99, 100, 111, 112, 118, 119, 124, 149, 168, 169, 171, 228, 238, 240, 316, 318, 323, 329], "figur": [4, 6, 9, 12, 24, 27, 30, 34, 64, 68, 76, 80, 83, 90, 92, 93, 94, 159, 161, 292, 318], "abov": [4, 6, 7, 9, 13, 14, 15, 16, 19, 22, 27, 30, 32, 33, 42, 52, 60, 63, 66, 72, 76, 78, 82, 88, 92, 93, 157, 158, 159, 163, 167, 212, 228, 248, 271, 305, 315, 322, 324, 326, 330], "well": [4, 6, 8, 9, 12, 13, 18, 20, 27, 29, 34, 44, 64, 68, 71, 72, 79, 80, 88, 90, 91, 92, 93, 94, 98, 163, 171, 179, 212, 260, 309, 318, 322, 325, 326, 330], "thei": [4, 6, 20, 24, 27, 30, 31, 60, 64, 68, 76, 79, 85, 89, 92, 94, 96, 157, 158, 166, 171, 215, 223, 228, 256, 258, 259, 302, 303, 309, 315, 316, 318, 321, 322], "work": [4, 8, 11, 14, 18, 20, 32, 34, 36, 37, 40, 44, 60, 63, 64, 66, 71, 74, 79, 83, 88, 89, 90, 91, 92, 93, 94, 99, 101, 161, 163, 171, 308, 309, 315, 324], "partit": [4, 6, 9, 10, 12, 13, 14, 15, 18, 24, 63, 64, 72, 83, 89, 92, 94, 100, 162, 167, 226, 231, 232, 233, 236, 267, 326], "object": [4, 15, 38, 65, 66, 67, 74, 75, 76, 80, 83, 88, 89, 90, 92, 94, 97, 99, 111, 124, 136, 150, 158, 160, 161, 162, 163, 166, 169, 172, 173, 187, 207, 208, 266, 306, 309, 311, 312, 314, 315, 320, 322, 332, 342], "messagemessag": 4, "strategi": [4, 9, 10, 12, 16, 24, 72, 74, 75, 76, 83, 94, 97, 102, 161, 162, 163, 166, 167, 312, 325, 340], "respons": [4, 9, 12, 16, 27, 34, 36, 37, 57, 64, 68, 89, 99, 167, 170, 316, 318], "state": [4, 6, 9, 10, 12, 24, 27, 34, 64, 79, 92, 93, 95, 97, 168, 171, 228, 231, 232, 233, 234, 236, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 263, 264, 265, 269, 301, 304, 306], "synchron": [4, 6, 10, 12, 14, 15, 89, 321], "explicitli": [4, 13, 99, 159, 228, 316, 322], "implicitli": [4, 110], "main": [4, 6, 30, 34, 37, 42, 51, 64, 71, 72, 75, 76, 96, 157, 166, 169, 174, 316, 322, 341, 342], "logic": [4, 6, 9, 14, 16, 17, 64, 74, 76, 79, 91, 93, 97, 160, 320, 321, 322, 330, 332], "access": [4, 6, 12, 14, 27, 29, 30, 31, 38, 47, 49, 51, 57, 63, 65, 68, 75, 76, 80, 83, 88, 89, 91, 92, 93, 94, 158, 159, 160, 161, 162, 163, 168, 169, 171, 309, 312, 316, 318, 320, 321, 322, 323, 330, 342], "send": [4, 6, 10, 18, 24, 65, 92, 102, 321, 329, 332], "receiv": [4, 6, 9, 14, 16, 17, 24, 37, 88, 89, 92, 94, 102, 163, 167, 318, 332], "messagemanag": [4, 17, 332], "call": [4, 6, 12, 13, 16, 17, 19, 24, 47, 51, 52, 57, 72, 74, 76, 83, 99, 102, 157, 159, 163, 166, 167, 171, 172, 204, 218, 219, 249, 260, 289, 301, 309, 312, 316, 320, 321, 322], "encourag": [4, 6, 15, 24, 37], "fork": 4, "repo": [4, 29, 37, 65, 91, 322, 333, 334], "much": [4, 6, 13, 19, 22, 57, 64, 74, 76, 159, 163, 321], "easier": [4, 32, 36, 37, 74, 91, 92, 93, 163, 316], "begin": [4, 15, 16, 30, 42, 56, 60, 68, 69, 73, 76, 90, 101, 102, 248, 315, 321], "small": [4, 9, 11, 13, 20, 51, 60, 76, 92, 93, 96, 174, 229, 230, 256, 299, 310, 316, 322], "chang": [4, 9, 11, 12, 14, 20, 23, 33, 34, 36, 41, 48, 76, 89, 93, 94, 96, 97, 100, 117, 149, 158, 171, 174, 187, 309, 316, 322, 329], "revis": [4, 14, 97], "ad": [4, 6, 9, 13, 15, 17, 19, 29, 37, 69, 79, 80, 94, 96, 97, 108, 109, 159, 171, 176, 177, 187, 245, 246, 247, 249, 303, 309, 318, 340, 342], "gradual": 4, "avoid": [4, 13, 72, 75, 321], "larg": [4, 6, 7, 9, 11, 12, 13, 14, 18, 20, 23, 27, 34, 37, 57, 60, 63, 64, 66, 70, 75, 76, 77, 79, 80, 83, 84, 85, 89, 90, 91, 95, 96, 100, 144, 158, 159, 161, 163, 165, 169, 170, 183, 207, 208, 228, 263, 321, 332], "singl": [4, 6, 7, 11, 14, 15, 20, 24, 27, 36, 37, 40, 44, 52, 57, 63, 69, 72, 74, 76, 81, 82, 84, 85, 89, 90, 92, 93, 100, 101, 157, 171, 182, 189, 211, 215, 220, 230, 235, 252, 258, 303, 305, 309, 316, 320, 324], "commit": [4, 97, 318], "python3": [4, 7, 23, 27, 28, 30, 31, 32, 35, 36, 40, 57, 65, 66, 81, 82, 90, 332, 333, 334, 335], "gsctl": [4, 32, 36, 40, 62, 65, 81, 333, 334], "py": [4, 15, 32, 36, 40, 65, 81, 157, 164, 169, 316, 322, 329, 332, 333, 334, 341], "cmakelist": 4, "txt": [4, 31, 35, 332], "artifact": [4, 17, 23, 29, 36, 65, 81, 329], "grape_engin": [4, 38, 134, 330], "togeth": [4, 9, 10, 20, 40, 64, 76, 85, 89, 97, 163, 167, 210], "share": [4, 6, 30, 31, 37, 41, 44, 76, 81, 89, 91, 92, 321, 323, 334], "bunch": [4, 40, 96, 99], "binari": [4, 15, 27, 31, 94, 329], "choos": [4, 6, 12, 22, 34, 40, 64, 74, 76, 79, 80, 89, 94, 157, 158, 248, 249, 287], "prefix": [4, 31, 36, 37, 49, 57, 65, 81, 171, 303, 321, 340], "usr": [4, 322], "look": [4, 15, 18, 20, 27, 41, 42, 63, 76, 88, 104, 170, 315, 318, 322, 323], "file": [4, 15, 17, 22, 23, 28, 29, 35, 37, 38, 41, 42, 43, 44, 47, 48, 50, 51, 52, 53, 57, 62, 63, 65, 68, 88, 99, 100, 108, 131, 157, 158, 164, 169, 171, 207, 208, 259, 309, 311, 316, 318, 322, 323, 329, 330, 332, 342], "investig": [4, 6], "ensur": [4, 6, 9, 32, 35, 36, 37, 41, 42, 43, 48, 50, 51, 52, 64, 69, 72, 90, 96, 316], "correct": [4, 6, 14, 37, 38, 64, 68, 163, 171, 174, 321], "unit": [4, 64, 76, 93, 167, 257, 258, 259, 322], "easili": [4, 12, 20, 22, 23, 24, 27, 29, 30, 34, 52, 57, 63, 66, 76, 79, 89, 90, 91, 93, 94, 96, 163, 165, 321], "graphscope_hom": [4, 23, 334], "pwd": [4, 30, 50, 169], "download": [4, 7, 17, 19, 22, 23, 27, 29, 30, 32, 35, 36, 50, 53, 66, 67, 70, 75, 81, 82, 88, 97, 164, 169, 334], "tmp": [4, 18, 19, 28, 38, 63, 65, 131, 136, 169, 316, 322, 330, 332, 335], "gstest": [4, 19, 22, 23, 30, 332, 334], "against": [4, 14, 37, 65, 100, 291], "compar": [4, 19, 64, 69, 71, 72, 74, 76, 92, 97, 99, 100, 160, 228, 315], "ground": [4, 71, 94], "truth": [4, 94], "distribut": [6, 10, 11, 12, 14, 15, 18, 20, 22, 23, 24, 27, 32, 34, 51, 57, 62, 63, 64, 66, 70, 72, 74, 77, 79, 80, 83, 84, 85, 87, 89, 91, 92, 94, 95, 96, 100, 104, 157, 160, 162, 166, 168, 169, 173, 228, 231, 238, 240, 249, 256, 257, 258, 259, 260, 268, 322, 323], "broad": [6, 91], "spectrum": [6, 91, 174, 301], "central": [6, 15, 60, 79, 80, 90, 91, 94, 95, 100, 163, 174, 286], "match": [6, 15, 41, 47, 48, 51, 64, 65, 66, 67, 68, 69, 71, 89, 90, 91, 100, 208, 228, 236, 238, 240, 267, 303, 340], "mine": [6, 15, 89, 91, 92], "philosophi": [6, 24, 91], "step": [6, 9, 14, 15, 27, 29, 30, 31, 32, 33, 36, 37, 48, 55, 63, 64, 65, 66, 67, 72, 75, 77, 79, 80, 87, 88, 89, 90, 91, 93, 102, 157, 158, 159, 161, 163, 166, 169, 228, 236, 248, 301, 322, 330, 342], "stronger": [6, 91], "flexibl": [6, 12, 13, 23, 41, 70, 76, 79, 89, 90, 91, 316, 320], "flow": [6, 91, 92, 157, 299], "oper": [6, 9, 12, 15, 30, 31, 36, 41, 51, 52, 53, 54, 57, 60, 62, 64, 66, 70, 71, 72, 74, 79, 80, 83, 88, 89, 91, 92, 93, 94, 95, 100, 102, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 129, 130, 131, 133, 134, 137, 138, 139, 140, 158, 159, 160, 161, 162, 163, 165, 166, 168, 170, 171, 191, 270, 271, 309, 312, 314, 316, 318, 321, 322, 329], "arbitrari": [6, 74, 76, 91, 161, 236, 240, 256, 257, 258, 259, 309, 312, 322, 340], "beyond": [6, 24, 91, 95, 269], "make": [6, 9, 13, 14, 15, 16, 23, 27, 29, 30, 31, 32, 35, 36, 37, 40, 42, 47, 48, 51, 52, 62, 63, 64, 65, 67, 68, 69, 71, 75, 76, 79, 81, 88, 91, 92, 93, 94, 97, 163, 164, 167, 169, 171, 187, 239, 303, 309, 316, 321, 322, 329, 333, 334], "divers": [6, 10, 12, 34, 44, 62, 64, 91, 92, 158, 318], "easi": [6, 7, 12, 51, 52, 60, 63, 64, 66, 67, 75, 76, 77, 79, 82, 83, 88, 89, 90, 91, 95, 158, 163, 167, 329], "write": [6, 8, 9, 12, 15, 17, 22, 24, 34, 37, 51, 54, 57, 60, 69, 72, 76, 79, 88, 89, 90, 91, 92, 93, 98, 102, 104, 157, 163, 171, 172, 311, 312, 318, 321, 326, 332, 336], "few": [6, 29, 51, 57, 63, 91, 321], "satisfactori": [6, 91, 94], "major": [6, 12, 13, 14, 69, 92, 99], "recent": [6, 161, 322], "framework": [6, 9, 15, 16, 17, 18, 22, 23, 24, 57, 64, 71, 77, 80, 83, 88, 89, 91, 92, 93, 94, 95, 96, 100, 101, 150, 161, 163, 165, 167, 171, 172, 313, 316, 318, 320, 332, 337, 342], "focu": [6, 40, 89, 93, 96, 167], "hand": [6, 30, 33, 64, 72, 74, 289], "point": [6, 13, 14, 22, 37, 64, 74, 83, 92, 157, 212, 237, 266, 269, 309, 322, 323, 324, 329], "breadth": [6, 100, 174], "first": [6, 13, 14, 15, 16, 17, 19, 20, 24, 29, 35, 37, 42, 43, 48, 57, 60, 64, 65, 66, 67, 69, 74, 75, 76, 80, 84, 85, 88, 90, 91, 93, 94, 100, 101, 157, 158, 163, 165, 167, 171, 174, 178, 208, 224, 227, 236, 249, 252, 263, 264, 265, 266, 267, 270, 303, 308, 309, 312, 315, 316, 318, 321, 322, 323, 324], "search": [6, 37, 62, 68, 80, 89, 92, 94, 96, 100, 174, 338], "pagerank": [6, 8, 9, 13, 17, 22, 33, 34, 37, 60, 89, 92, 95, 97, 100, 101, 174, 312, 315, 332], "shortest": [6, 7, 19, 24, 64, 90, 92, 100, 174, 324], "leav": [6, 76, 171, 209, 219], "varieti": [6, 12, 34, 60, 89, 96], "suffer": [6, 60], "effici": [6, 9, 12, 13, 16, 18, 23, 34, 44, 47, 51, 52, 57, 60, 62, 68, 71, 72, 75, 76, 79, 80, 83, 88, 89, 90, 91, 92, 93, 94, 95, 96, 104, 161, 163, 165, 242, 263, 320, 321, 323, 325], "limit": [6, 9, 13, 22, 55, 57, 67, 68, 69, 72, 77, 80, 92, 93, 94, 96, 97, 316, 335, 340], "phase": [6, 16, 23, 24, 158, 163], "propag": [6, 7, 9, 14, 36, 89, 90, 92, 94, 100, 163, 181, 271], "short": [6, 91, 96, 97, 189, 321, 322], "isvp": 6, "until": [6, 9, 14, 17, 24, 27, 30, 74, 76, 94, 168, 228, 251, 322, 340], "updat": [6, 9, 12, 14, 15, 17, 20, 24, 27, 29, 32, 34, 41, 79, 80, 89, 92, 94, 96, 164, 167, 309, 318, 322, 332, 333], "Such": [6, 13, 49, 93, 96, 131, 136, 268, 277], "abstract": [6, 60, 79, 83, 86, 89, 90, 91, 157, 158, 165, 167, 168, 323], "bring": [6, 40], "product": [6, 12, 32, 57, 83, 89, 93, 96, 102, 158, 159, 163, 340], "sacrific": 6, "almost": [6, 22, 76, 244, 321], "infeas": 6, "kind": [6, 9, 12, 13, 15, 27, 33, 34, 57, 76, 88, 90, 91, 96, 99, 101, 161, 163, 167, 168, 306, 315, 320, 322, 324, 325, 333, 335, 339], "At": [6, 12, 14, 15, 20, 34, 37, 64, 75, 76, 158, 168, 322, 324], "advanc": [6, 7, 15, 64, 82, 83, 91, 255], "pose": 6, "challeng": [6, 9, 59, 89, 321], "repres": [6, 9, 12, 15, 41, 43, 44, 60, 64, 68, 72, 76, 80, 82, 83, 86, 88, 89, 90, 91, 92, 94, 97, 99, 100, 101, 108, 135, 158, 159, 160, 161, 163, 167, 169, 171, 215, 248, 256, 257, 258, 259, 260, 268, 275, 278, 282, 290, 299, 301, 303, 304, 309, 313, 316, 321, 322], "non": [6, 9, 27, 74, 96, 99, 102, 160, 198, 199, 219, 238, 240, 243, 267, 271, 278, 296, 309, 310], "ones": [6, 9, 95, 100, 165], "distil": 6, "critic": [6, 13, 80, 100], "context": [6, 15, 17, 18, 20, 27, 31, 44, 72, 91, 93, 100, 102, 107, 108, 109, 115, 116, 131, 136, 139, 140, 142, 151, 154, 167, 171, 174, 299, 314, 316, 321, 332], "fall": 6, "meet": [6, 15, 18, 37, 60, 64, 66, 83, 89, 94, 161, 162, 228, 257, 258, 259, 324, 326], "therefor": [6, 12, 15, 60, 64, 66, 68, 69, 72, 74, 76, 80, 90, 157, 158, 163, 255, 321, 330], "fulfil": [6, 15, 18, 51, 91], "ligra": 6, "By": [6, 13, 17, 20, 30, 36, 41, 42, 43, 48, 57, 60, 72, 74, 76, 77, 82, 88, 92, 94, 95, 158, 159, 174, 309, 318, 321, 330], "must": [6, 13, 24, 27, 30, 37, 42, 43, 44, 47, 52, 53, 57, 63, 74, 76, 89, 99, 101, 110, 158, 159, 161, 162, 163, 171, 173, 174, 187, 226, 228, 236, 239, 249, 251, 253, 256, 258, 260, 268, 271, 307, 309, 311, 315, 321, 322], "race": 6, "schedul": [6, 23, 36, 89, 91, 316], "do": [6, 15, 16, 18, 20, 29, 30, 31, 33, 35, 37, 40, 41, 42, 57, 63, 64, 65, 68, 69, 72, 76, 88, 99, 100, 101, 118, 134, 159, 171, 228, 240, 252, 256, 266, 269, 287, 303, 309, 312, 315, 316, 321, 326, 329], "so": [6, 12, 13, 30, 37, 40, 54, 57, 63, 64, 66, 70, 75, 76, 80, 83, 85, 88, 89, 91, 100, 104, 157, 163, 165, 184, 219, 224, 237, 238, 239, 242, 257, 258, 259, 270, 303, 309, 321, 322, 336], "middlewar": 6, "flashwar": 6, "hide": [6, 60], "automat": [6, 9, 12, 14, 34, 41, 43, 51, 52, 63, 64, 67, 72, 75, 79, 88, 89, 92, 93, 94, 96, 101, 169, 171, 309, 322, 324, 325, 342], "adapt": [6, 22, 41, 51, 64, 94, 96, 97, 324, 325], "70": [6, 15, 340], "40": [6, 15, 97, 159, 160, 162, 236, 302], "commonli": [6, 69, 74, 79, 83, 88], "now": [6, 7, 20, 23, 27, 42, 48, 51, 63, 65, 68, 69, 71, 75, 76, 82, 100, 167, 240, 322, 324, 337], "succinct": [6, 72], "interfac": [6, 9, 11, 12, 17, 18, 19, 22, 23, 34, 57, 60, 62, 64, 76, 77, 78, 80, 83, 89, 92, 93, 94, 95, 96, 99, 104, 159, 160, 161, 163, 164, 165, 166, 309, 316, 326], "help": [6, 9, 12, 13, 16, 17, 32, 37, 38, 48, 53, 68, 74, 76, 88, 92, 93, 167, 171, 321, 323, 329, 333], "demonstr": [6, 16, 41, 63, 64, 71, 79, 84, 86, 89, 90, 92, 94, 96, 101, 157, 169, 171, 316, 321], "up": [6, 13, 20, 23, 37, 48, 68, 74, 76, 79, 81, 83, 95, 102, 167, 170, 208, 212, 236, 303, 321, 322, 339], "92": [6, 174], "bulk": [6, 15], "bsp": [6, 15], "paradigm": [6, 15, 79, 83, 89, 157, 163], "primari": [6, 15, 42, 43, 44, 51, 55, 72, 89, 96, 322], "constitut": [6, 86, 88], "superstep": [6, 16, 17, 24, 102], "vertexsubset": [6, 15], "indic": [6, 13, 24, 37, 38, 43, 44, 47, 51, 52, 63, 76, 88, 91, 92, 93, 97, 108, 158, 160, 163, 171, 215, 218, 228, 231, 232, 233, 234, 236, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 253, 256, 257, 258, 259, 260, 263, 264, 265, 269, 299, 301, 304, 306, 311, 321], "maintain": [6, 10, 14, 35, 36, 43, 71, 72, 74, 89, 92, 93, 322], "onc": [6, 12, 15, 17, 20, 24, 27, 29, 30, 34, 36, 44, 47, 48, 52, 64, 65, 80, 100, 102, 159, 160, 163, 169, 171, 172, 174, 204, 309, 316, 322, 329], "describ": [6, 27, 36, 37, 38, 44, 52, 57, 63, 65, 76, 80, 81, 89, 93, 94, 101, 158, 161, 163, 168, 169, 208, 212, 228, 229, 230, 233, 238, 240, 241, 266, 267, 280, 287, 289, 303, 305, 306, 320, 321, 322, 330, 335], "vsize": [6, 15], "size_t": [6, 13, 56, 99, 102, 168, 318, 321], "vertexmap": [6, 13, 15, 56], "condit": [6, 9, 14, 24, 27, 38, 41, 64, 71, 76, 83, 91, 93, 97, 228, 257, 258, 259, 267, 268, 321], "f": [6, 20, 33, 63, 65, 82, 87, 90, 163, 174, 261, 262, 308, 322, 330, 336], "output": [6, 14, 17, 24, 27, 29, 30, 34, 38, 60, 65, 68, 71, 72, 74, 76, 80, 82, 83, 86, 89, 90, 94, 97, 99, 128, 136, 144, 157, 163, 165, 169, 171, 172, 256, 258, 260, 301, 313, 315, 322, 332, 333, 336, 341], "form": [6, 20, 64, 70, 72, 74, 76, 80, 83, 93, 94, 100, 157, 159, 160, 163, 210, 230, 260, 275, 277, 280, 283, 287, 309, 315], "special": [6, 20, 51, 55, 76, 89, 158, 277, 293, 303, 326], "m": [6, 7, 9, 18, 20, 23, 27, 28, 30, 31, 32, 35, 63, 64, 66, 76, 82, 90, 100, 101, 174, 184, 215, 219, 221, 232, 238, 240, 242, 244, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 288, 297, 301, 302, 306, 309, 332], "omit": [6, 52, 88, 101, 182, 323, 342], "filter": [6, 15, 23, 41, 64, 71, 77, 88, 93, 100, 101, 301, 315, 321, 340], "semant": [6, 64, 83, 162, 321], "unchang": 6, "edgemap": [6, 15], "sourc": [6, 7, 8, 9, 14, 15, 18, 22, 23, 24, 29, 33, 36, 37, 38, 42, 43, 44, 51, 56, 57, 63, 65, 66, 68, 69, 76, 80, 81, 83, 88, 90, 92, 93, 94, 96, 99, 100, 101, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 150, 151, 152, 154, 156, 159, 160, 161, 162, 163, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 311, 313, 315, 316, 318, 320, 321, 322, 324, 329, 332, 333, 334, 340, 342], "satisfi": [6, 9, 24, 32, 51, 66, 76, 93, 96, 100, 104, 168, 174, 226, 256, 260, 267, 268, 326], "h": [6, 9, 15, 16, 20, 36, 40, 53, 80, 81, 97, 108, 174, 185, 188, 209, 236, 240, 256, 301, 308, 309, 321, 333, 338], "conduct": [6, 15, 76, 97, 163], "allow": [6, 11, 12, 20, 22, 24, 27, 30, 36, 41, 42, 48, 51, 60, 63, 64, 68, 69, 71, 72, 74, 76, 77, 78, 79, 83, 88, 89, 90, 92, 93, 94, 95, 96, 158, 163, 233, 238, 240, 243, 248, 251, 256, 301, 309, 318, 321, 326, 329], "dynam": [6, 12, 34, 48, 49, 51, 64, 79, 89, 91, 92, 94, 100, 111, 124, 229, 230, 312, 318, 322], "even": [6, 8, 20, 64, 68, 76, 91, 92, 165, 171, 174, 238, 248, 266, 268, 269, 309, 321], "virtual": [6, 9, 23, 66, 68, 90, 99, 167, 168], "gener": [6, 9, 13, 14, 17, 27, 34, 40, 44, 48, 52, 60, 62, 64, 70, 72, 74, 76, 80, 83, 88, 89, 90, 91, 92, 94, 100, 109, 157, 158, 159, 163, 169, 171, 173, 174, 309, 310, 314, 316, 318, 320, 321, 322, 323, 324, 330], "index": [6, 12, 13, 31, 42, 43, 56, 62, 80, 83, 88, 94, 99, 100, 101, 159, 160, 168, 171, 173, 174, 183, 207, 208, 238, 240, 241, 242, 244, 321, 338, 342], "pre": [6, 27, 29, 32, 47, 57, 64, 71, 76, 82, 86, 90, 93, 316, 335], "conveni": [6, 29, 57, 63, 68, 76, 80, 91, 163, 307, 309], "revers": [6, 20, 69, 76, 117, 120, 173, 174, 252, 260, 309], "exchang": [6, 14], "chosen": [6, 238, 245, 246, 247, 248, 249, 260, 264, 304], "temporari": 6, "sequenti": [6, 12, 14, 18, 34, 36, 89, 207, 208, 244, 321, 326, 332], "pull": [6, 12, 14, 27, 29, 32, 34, 38, 48, 57, 63, 92, 164, 167, 316, 322, 334], "mode": [6, 15, 27, 32, 36, 57, 75, 84, 88, 99, 100, 101, 150, 157, 161, 167, 169, 171, 311, 316, 326, 330, 342], "push": [6, 12, 34, 37, 41, 64, 71, 92, 167], "anoth": [6, 9, 10, 20, 36, 44, 64, 74, 76, 88, 89, 90, 94, 102, 238, 271, 309, 321, 324, 325], "final": [6, 9, 13, 14, 17, 19, 24, 64, 68, 76, 80, 85, 89, 93, 99, 157, 163, 165, 251, 271, 309, 323], "reduc": [6, 9, 13, 14, 15, 17, 64, 68, 71, 75, 83, 158, 161, 257, 258, 259, 309, 322], "commut": 6, "alwai": [6, 50, 76, 85, 101, 205, 206, 245, 247, 266, 269, 303, 321, 329], "ctrue": 6, "doe": [6, 11, 12, 13, 20, 34, 37, 51, 74, 83, 88, 91, 93, 96, 160, 163, 168, 174, 193, 194, 236, 238, 240, 255, 266, 309, 311, 316, 321], "sometim": [6, 27, 76, 88, 219, 279], "similarli": [6, 19, 20, 44, 65, 76, 92, 174, 212, 238, 240, 256, 259, 266, 309, 330], "suppli": [6, 57, 72, 258], "edgeset": 6, "d": [6, 9, 15, 17, 19, 20, 47, 52, 53, 63, 76, 100, 161, 163, 166, 169, 174, 184, 229, 230, 238, 240, 241, 243, 244, 245, 247, 252, 256, 257, 258, 259, 260, 263, 300, 309, 311, 316], "auxiliari": [6, 15, 16, 76], "union": [6, 171, 237, 337], "minu": [6, 212], "intersect": [6, 93, 310], "add": [6, 15, 19, 20, 23, 29, 33, 37, 57, 76, 88, 90, 99, 102, 109, 110, 119, 158, 169, 171, 176, 177, 178, 228, 235, 248, 266, 269, 271, 287, 309, 312, 316, 321, 322, 333, 336, 337, 342], "getv": [6, 64], "besid": [6, 10, 38, 168, 169], "combin": [6, 14, 18, 34, 62, 64, 76, 79, 89, 90, 93, 157, 158, 159, 163, 309, 316, 325, 332], "primit": [6, 42, 91], "natur": [6, 12, 13, 24, 44, 60, 72, 76], "multi": [6, 31, 62, 72, 76, 79, 80, 83, 89, 91, 93, 94, 95, 96, 100, 161, 163, 165, 318, 322], "tradit": [6, 64, 68, 70, 72, 94, 286], "awkward": 6, "supplement": 6, "perspect": [6, 24, 91], "whole": [6, 9, 12, 24, 34, 51, 63, 64, 76, 80, 89, 91, 93, 94, 165, 322, 325], "pick": [6, 76, 97, 251, 266, 269], "transfer": [6, 60, 62, 79, 93, 95, 340], "intuit": [6, 51, 64, 72, 79, 93, 316], "sever": [6, 9, 15, 17, 20, 23, 30, 33, 36, 37, 38, 51, 62, 64, 69, 76, 79, 80, 83, 88, 89, 92, 94, 95, 97, 101, 157, 163, 165, 167, 168, 174, 215, 309, 315, 316, 321, 322], "shown": [6, 7, 9, 10, 12, 15, 16, 18, 24, 27, 34, 47, 64, 66, 76, 82, 83, 92, 94, 97, 158, 159, 160, 163, 169], "input": [6, 9, 12, 13, 15, 17, 22, 24, 42, 43, 52, 53, 60, 80, 82, 83, 86, 88, 89, 90, 93, 94, 100, 119, 123, 144, 157, 158, 159, 160, 161, 163, 166, 169, 172, 174, 242, 256, 258, 260, 266, 267, 301, 309, 312, 313, 316, 321, 322, 336, 341], "second": [6, 13, 27, 43, 51, 60, 69, 76, 80, 88, 93, 96, 97, 101, 165, 254, 255, 263, 264, 265, 266, 270, 308, 309, 316, 322, 323], "fundament": [6, 9, 44, 64, 91], "modul": [6, 8, 9, 15, 19, 20, 23, 62, 64, 68, 74, 79, 89, 90, 91, 93, 94, 170, 308, 338], "produc": [6, 38, 40, 42, 64, 97, 100, 109, 157, 169, 171, 172, 174, 228, 242, 244, 252, 313, 322], "abil": [6, 12, 34, 47, 68, 72, 76, 83, 89], "activ": [6, 9, 23, 24, 30, 47, 52, 66, 85, 90, 94, 169, 316], "dens": [6, 80, 92, 94, 160, 169], "spars": [6, 13, 80, 94, 157, 160, 236, 309, 312], "dispatch": [6, 34, 89, 99], "kernel": [6, 245], "auto": [6, 14, 16, 34, 56, 76, 102, 318, 321, 323], "switch": [6, 12, 23, 34, 75, 92, 266, 269, 321, 329], "prove": [6, 24, 301], "world": [6, 9, 13, 60, 74, 76, 89, 90, 92, 99, 174, 229, 230, 256], "dual": 6, "edgemapdens": 6, "edgemapspars": 6, "instead": [6, 13, 16, 20, 23, 30, 37, 44, 68, 71, 74, 76, 88, 91, 159, 160, 161, 167, 168, 171, 235, 242, 247, 255, 256, 260, 266, 309, 315, 318, 321], "co": [6, 23, 60, 90, 158, 336], "lead": [6, 17, 24, 57, 76, 94, 238, 240], "master": [6, 19, 22, 23, 24, 31, 332], "broadcast": [6, 99, 321], "mirror": [6, 7, 10, 24, 27, 32, 66, 81, 82], "On": [6, 27, 30, 37, 51, 64, 72, 74, 100, 243, 306, 321], "contrari": 6, "total": [6, 8, 12, 34, 60, 63, 64, 65, 75, 76, 102, 184, 228, 251, 268, 274, 309, 323, 336], "4": [6, 9, 10, 13, 17, 19, 20, 22, 27, 31, 48, 54, 57, 64, 65, 67, 70, 72, 74, 75, 76, 87, 90, 97, 108, 157, 159, 160, 162, 163, 164, 174, 180, 185, 187, 188, 193, 194, 212, 214, 215, 224, 232, 235, 237, 244, 253, 255, 260, 269, 276, 279, 280, 286, 287, 293, 295, 302, 303, 304, 309, 311, 312, 316, 321, 322, 323, 324, 325, 332, 335, 336, 340], "redund": [6, 52, 71], "programm": [6, 17, 89, 104], "scope": [6, 23, 37, 91, 171], "disabl": [6, 31, 48, 53, 55, 65, 68, 97, 316], "develop": [6, 8, 9, 11, 12, 14, 24, 29, 34, 37, 51, 55, 60, 64, 65, 70, 71, 72, 76, 77, 78, 79, 80, 81, 89, 92, 93, 94, 96, 104, 161, 163, 164, 165, 167, 228, 321, 329], "katz": [6, 100, 174], "eigenvector": [6, 100, 174, 301], "harmon": 6, "coeffici": [6, 19, 100, 174], "fluid": 6, "version": [6, 15, 17, 18, 20, 23, 27, 29, 37, 41, 42, 44, 48, 54, 57, 66, 68, 72, 75, 82, 89, 91, 96, 97, 100, 164, 171, 229, 230, 245, 247, 260, 266, 287, 309, 318, 320, 321, 322, 329, 332, 335], "color": [6, 19, 20, 76, 309], "biconnect": 6, "bridg": [6, 62, 91], "seven": [6, 169, 208], "strongli": [6, 36, 66, 68, 76, 163, 248], "cut": [6, 12, 24, 294], "k": [6, 20, 37, 56, 65, 76, 80, 89, 90, 91, 93, 100, 101, 161, 174, 211, 219, 229, 230, 231, 232, 234, 236, 237, 238, 245, 248, 257, 258, 259, 261, 264, 265, 266, 267, 268, 269, 274, 309, 315, 321, 336, 340], "decomposit": [6, 90, 174], "degeneraci": 6, "onion": 6, "minim": [6, 11, 92, 169, 260, 261, 282, 308], "domin": [6, 174, 321], "cycl": [6, 91, 93, 96, 99, 176, 212, 213, 216, 227, 249, 253, 274, 276, 292, 296], "triangl": [6, 33, 76, 90, 93, 100, 174, 271, 275, 279, 283, 295, 310, 332, 336], "acycl": [6, 91, 303], "cyclic": [6, 89, 91, 93, 216], "diamond": [6, 279], "rectangl": 6, "tail": [6, 63, 68, 74, 76, 91, 330], "approxim": [6, 228, 301], "densest": 6, "articlerank": 6, "hyperlink": [6, 100, 174], "induc": [6, 72, 74, 100, 122, 185, 188, 204, 252, 309], "topic": [6, 7, 66, 82, 90, 100], "person": [6, 7, 30, 33, 42, 43, 44, 47, 48, 63, 66, 68, 71, 72, 74, 76, 88, 90, 171, 289, 298, 309, 312, 315, 321, 322, 323, 337, 342], "standard": [6, 35, 48, 62, 64, 71, 76, 77, 88, 91, 172, 242, 257, 258, 259, 321], "diamet": 6, "span": [6, 20], "forest": 6, "center": [6, 76, 224, 227, 252], "four": [6, 9, 12, 20, 86, 90, 91, 99, 157, 160, 169, 256, 260, 321], "random": [6, 28, 31, 83, 85, 89, 97, 161, 162, 163, 166, 169, 210, 221, 228, 231, 232, 233, 234, 236, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 269, 301, 304, 306, 308, 316], "give": [7, 12, 13, 31, 34, 43, 66, 76, 82, 88, 97, 163, 171, 236, 256, 276, 308, 309], "quick": [7, 66, 82, 322], "ll": [7, 13, 20, 29, 42, 43, 82], "pip": [7, 27, 30, 31, 32, 57, 63, 66, 82, 90, 167, 322, 329, 335, 339], "upgrad": [7, 23, 32, 66, 82, 339], "occur": [7, 9, 14, 32, 57, 74, 82, 322], "veri": [7, 13, 32, 60, 64, 66, 76, 79, 82, 88, 90, 94, 159, 161, 332], "speed": [7, 32, 51, 55, 76, 81, 82, 91, 170, 236, 309], "try": [7, 17, 23, 32, 36, 40, 57, 60, 66, 75, 81, 82, 85, 86, 90, 98, 100, 187, 228, 312, 316, 336], "site": [7, 32, 66, 82], "aliyun": [7, 27, 32, 66, 81, 82, 97, 316, 333], "pypi": [7, 27, 32, 57, 66, 67, 82, 335], "trust": [7, 27, 32, 66, 82], "host": [7, 15, 17, 22, 23, 27, 28, 32, 43, 48, 54, 60, 65, 66, 68, 75, 82, 88, 97, 99, 100, 101, 312, 316, 332, 340, 342], "packag": [7, 8, 11, 17, 18, 20, 22, 23, 27, 29, 30, 36, 57, 63, 66, 82, 90, 167, 256, 258, 309, 312, 322, 329, 334], "everyth": [7, 82, 90, 321], "job": [7, 13, 23, 60, 64, 82, 89, 90, 91, 95, 99, 134, 158, 316, 322], "modern_graph": [7, 30, 33, 43, 63, 66, 90, 323], "gremlin": [7, 29, 33, 51, 57, 60, 63, 64, 65, 66, 71, 73, 77, 80, 83, 89, 90, 91, 95, 96, 98, 128, 163, 172, 316, 322, 330, 335, 336, 338, 343], "apach": [7, 17, 22, 23, 31, 62, 71, 72, 75, 78, 79, 89, 90, 93, 320, 322, 326, 332, 334, 338], "tinkerpop": [7, 48, 60, 62, 63, 65, 66, 75, 79, 90, 91, 172, 322, 338], "org": [7, 17, 23, 48, 57, 67, 75, 82, 85, 86, 90, 92, 100, 174, 232, 233, 234, 248, 251, 258, 271, 275, 276, 277, 278, 280, 281, 282, 288, 289, 290, 291, 293, 294, 295, 296, 301, 322, 332, 335, 336, 340], "doc": [7, 16, 17, 30, 37, 90, 91, 99, 103, 105, 171, 258], "tutori": [7, 8, 12, 14, 24, 63, 65, 66, 73, 79, 84, 88, 90, 92, 94, 169, 258, 326], "trigger": [7, 14, 15, 18, 37, 83, 90, 110, 324, 329], "ret": [7, 18, 75, 90, 332, 337], "selector": [7, 15, 33, 38, 90, 99, 101, 109, 115, 116, 126, 127, 131, 139, 140, 171, 314, 316, 332, 337], "homogen": [7, 80, 88, 90, 94, 159], "pg": [7, 90, 100, 316, 321], "none": [7, 9, 20, 27, 31, 69, 85, 87, 88, 90, 100, 101, 108, 115, 116, 119, 122, 126, 127, 128, 129, 131, 134, 136, 139, 140, 144, 150, 152, 156, 157, 158, 163, 171, 172, 173, 174, 182, 186, 188, 189, 193, 194, 203, 204, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 231, 232, 233, 234, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 301, 303, 304, 306, 309, 311, 312, 313, 316, 321, 322, 337, 341, 342], "know": [7, 8, 30, 33, 38, 43, 44, 63, 71, 73, 74, 76, 84, 88, 90, 93, 158, 159, 167, 171, 322, 323, 337, 340, 342], "src": [7, 13, 15, 16, 17, 18, 30, 34, 56, 60, 72, 75, 82, 83, 86, 88, 90, 100, 101, 108, 157, 159, 171, 315, 318, 321, 322, 324, 332, 336, 341, 342], "our": [7, 12, 13, 17, 32, 34, 36, 37, 40, 41, 43, 44, 48, 60, 64, 69, 71, 72, 81, 90, 92, 93, 94, 96, 97, 98, 164, 165, 174, 322, 324, 332], "learn": [7, 27, 32, 36, 37, 38, 40, 60, 64, 66, 79, 83, 84, 85, 91, 92, 95, 98, 152, 158, 161, 162, 163, 164, 167, 169, 314, 316, 336, 338], "technic": [7, 82, 165, 303, 309], "disaggreg": [7, 36], "deploy": [7, 29, 30, 33, 57, 60, 65, 76, 89, 95, 159, 169, 316, 322], "scale": [7, 11, 12, 13, 20, 23, 27, 34, 37, 51, 60, 63, 65, 70, 75, 76, 77, 79, 80, 89, 90, 91, 92, 94, 95, 96, 159, 161, 163, 165, 170, 238, 249, 256, 308, 321], "usag": [7, 17, 31, 32, 36, 37, 50, 74, 76, 77, 81, 82, 83, 101, 160, 161, 162, 166, 171, 228, 309, 316, 322, 323], "section": [8, 13, 27, 29, 41, 43, 44, 52, 53, 73, 76, 80, 84, 89, 163, 164, 171, 208, 321, 322], "assum": [8, 23, 27, 30, 50, 63, 73, 76, 84, 90, 158, 171, 207, 268, 307, 309, 316, 321, 336], "getting_start": [8, 41, 50, 73, 84], "most": [8, 9, 13, 15, 22, 33, 38, 51, 57, 64, 68, 69, 71, 74, 76, 80, 88, 90, 92, 94, 96, 97, 101, 157, 159, 163, 165, 167, 171, 229, 230, 254, 257, 258, 259, 322], "suffici": [8, 17, 57, 89, 158], "louvain": [8, 92, 100, 332], "social": [8, 44, 60, 65, 76, 89, 92, 94, 97, 236, 286, 301, 310], "scientist": [8, 79, 96], "familiar": [8, 14, 16, 29, 64], "manipul": [8, 11, 19, 20, 51, 74, 76, 79, 93, 96, 98, 99, 309], "invok": [8, 9, 12, 14, 15, 17, 24, 34, 45, 51, 52, 88, 99, 161, 162, 166, 316, 332], "pydata": [8, 95], "eco": 8, "still": [8, 24, 27, 34, 38, 60, 76, 92, 187, 316, 321, 322], "directli": [8, 12, 20, 24, 30, 32, 34, 36, 37, 38, 51, 60, 68, 71, 72, 76, 78, 80, 83, 88, 94, 99, 158, 161, 163, 164, 165, 166, 301, 309, 312, 316, 322, 326], "migrat": [8, 64, 82, 85, 86, 90, 91, 96, 318, 336], "transpar": [8, 89], "don": [8, 17, 23, 30, 33, 36, 37, 57, 63, 76, 110, 203, 309, 322], "autom": [9, 29, 91], "abl": [9, 24, 27, 48, 63, 91, 162, 266, 321, 322], "batch": [9, 12, 19, 43, 65, 75, 80, 83, 87, 91, 94, 157, 160, 162, 163, 165, 167, 169, 173, 322, 341], "counterpart": [9, 71, 79, 91], "redesign": [9, 91], "underli": [9, 60, 64, 76, 91, 165, 321], "equip": [9, 78, 79, 91, 97, 326], "polici": [9, 57, 91, 99, 316], "memori": [9, 12, 23, 24, 27, 34, 57, 60, 62, 72, 75, 79, 81, 84, 85, 89, 91, 92, 94, 95, 96, 97, 157, 158, 159, 165, 169, 171, 309, 316, 322, 325, 334, 335], "todai": 9, "static": [9, 16, 31, 75, 99, 322, 324], "recomput": 9, "costli": 9, "consum": [9, 57, 94, 165, 168], "especi": [9, 88], "trillion": 9, "commerc": [9, 89, 92], "constantli": 9, "issu": [9, 17, 32, 37, 57, 60, 63, 66, 75, 91, 92, 96, 232, 233, 234, 298, 335], "involv": [9, 13, 37, 40, 51, 60, 64, 76, 80, 83, 89, 92, 93, 94, 95, 96], "adjust": [9, 12, 41, 42, 57], "old": [9, 12, 14, 32, 34, 68, 316], "typic": [9, 24, 41, 48, 51, 60, 72, 74, 76, 89, 92, 93, 96, 158, 163, 238, 309, 315, 321], "often": [9, 37, 44, 51, 60, 63, 75, 89, 92, 93, 94, 96, 159, 160, 163, 309, 322, 330], "overlap": [9, 316], "intervent": 9, "burden": [9, 15, 159], "expert": 9, "light": 9, "overal": [9, 94], "verifi": [9, 27, 38, 60, 63, 65, 69, 97, 163], "characterist": [9, 72, 83, 89, 94, 157, 162], "deduc": [9, 171, 342], "appropri": [9, 27, 40, 43, 64, 80, 89, 94, 157], "record": [9, 13, 51, 63, 66, 67, 68, 76, 90, 168, 318, 322], "part": [9, 13, 37, 60, 64, 74, 80, 83, 91, 163, 164, 167, 169, 292, 309, 321, 322], "intermedi": [9, 12, 17, 64, 71, 76, 79, 89, 91], "deliv": [9, 340], "There": [9, 10, 12, 34, 37, 38, 57, 63, 64, 76, 90, 92, 93, 94, 100, 159, 162, 163, 165, 309, 315, 316, 321, 322], "reshap": [9, 169], "eas": [9, 12, 34, 66, 94, 96, 97], "achiev": [9, 12, 20, 24, 27, 34, 51, 76, 89, 92, 97, 318], "decid": [9, 159, 256], "due": [9, 57, 89, 96, 163], "among": [9, 64, 76, 89, 96, 99, 168, 174, 303, 322], "fetch": [9, 15, 17, 316, 322, 332], "suffic": 9, "replai": [9, 83, 91, 318], "affect": [9, 13, 30, 36, 37, 71, 309], "area": [9, 15, 51, 68, 260, 306], "readili": 9, "obtain": [9, 14, 17, 29, 30, 64, 65, 67, 71, 75, 79, 80, 83, 86, 90, 94, 158, 162, 163, 165, 284, 287, 303, 309, 316, 322], "simpli": [9, 17, 20, 41, 52, 63, 68, 76, 88, 90, 163, 231, 235, 309], "coincid": 9, "idea": [9, 37, 80, 94, 104, 165], "invalid": [9, 171, 316], "miss": [9, 37, 161, 171, 219, 316], "comparison": [9, 19, 69, 74, 76, 79, 96, 97], "those": [9, 29, 44, 51, 63, 65, 68, 69, 72, 76, 88, 98, 161, 171, 174, 185, 214, 216, 218, 309, 311, 315], "although": [9, 12, 14, 22, 34, 47, 60, 90, 104, 208, 321, 322], "solut": [9, 31, 51, 57, 93, 94, 96, 174, 335], "enough": [9, 83, 158, 161, 228, 316, 320], "caus": [9, 14, 22, 32, 37, 57, 75, 82, 94, 159, 165, 171, 208], "overwhelm": 9, "overhead": [9, 13, 96, 158, 159], "mf": 9, "delta": [9, 12, 13, 33, 37, 100, 171], "php": 9, "mp": 9, "cc": [9, 321, 337], "sswp": 9, "mv": [9, 68], "track": 9, "gcn": [9, 79, 83, 94, 98, 157, 161, 165, 169, 336, 338, 341, 343], "commnet": 9, "me": 9, "keep": [9, 76, 83, 102, 163, 171, 266, 269, 322], "graphsag": [9, 79, 83, 90, 94, 98, 157, 161, 163, 165, 169, 338, 341, 343], "gin": [9, 94], "vldb": [9, 332, 338], "paper": [9, 14, 24, 80, 82, 85, 86, 87, 89, 90, 91, 97, 169, 174, 306, 316, 332, 336], "publish": [9, 14, 24, 29, 71, 89, 90], "2021": [9, 91], "denot": [9, 47, 49, 51, 74, 76, 162, 237, 322], "w": [9, 75, 100, 174, 236, 242, 256, 259, 261, 266, 269, 271, 299, 309, 311, 322, 340], "respect": [9, 16, 38, 52, 62, 64, 69, 74, 88, 89, 90, 93, 94, 100, 119, 136, 144, 160, 163, 174, 215, 228, 275, 309, 315, 321, 322], "initi": [9, 16, 18, 19, 41, 42, 43, 53, 65, 76, 87, 92, 94, 99, 158, 159, 169, 171, 173, 174, 248, 250, 251, 309, 312, 322, 326, 332], "init_v": 9, "init_m": 9, "aggreg": [9, 64, 69, 77, 94, 102, 157, 163, 165, 169, 321, 340], "vector": [9, 56, 80, 86, 90, 94, 99, 102, 157, 165, 167, 174, 256, 260], "element": [9, 13, 44, 69, 74, 76, 92, 99, 158, 161, 163, 171, 174, 204, 236, 281, 303, 315, 316, 321], "specifi": [9, 16, 20, 23, 24, 30, 36, 41, 42, 43, 44, 47, 48, 51, 52, 53, 63, 69, 72, 74, 79, 83, 90, 92, 100, 102, 108, 115, 116, 126, 127, 131, 135, 139, 140, 156, 157, 158, 160, 163, 166, 171, 173, 174, 185, 193, 194, 215, 228, 238, 240, 241, 244, 245, 252, 256, 257, 258, 259, 260, 266, 269, 271, 274, 287, 306, 309, 311, 315, 316, 322, 323], "addition": [9, 12, 14, 36, 44, 68, 80, 86, 89, 91, 93, 96, 165, 174, 321, 330], "correspond": [9, 10, 13, 15, 17, 18, 37, 40, 64, 68, 72, 74, 76, 79, 83, 88, 93, 96, 100, 134, 157, 158, 159, 160, 162, 163, 167, 171, 174, 207, 208, 238, 240, 241, 242, 243, 244, 256, 302, 303, 305, 309, 311, 312, 318, 322, 330], "iteratorkernel": 9, "void": [9, 14, 15, 16, 17, 24, 56, 99, 318, 321, 322, 323, 332], "m1": [9, 57, 66, 210, 335, 339], "m2": [9, 210], "below": [9, 10, 12, 20, 34, 35, 36, 37, 43, 47, 48, 83, 89, 90, 92, 93, 94, 97, 158, 161, 163, 166, 169, 208, 238, 240, 274, 309, 316, 322], "ssspkernel": 9, "public": [9, 15, 16, 17, 27, 90, 97, 99, 167, 322, 332, 336], "dbl_max": 9, "backend": [9, 27, 29, 79, 82, 89, 90, 94, 171, 309, 316, 323, 336], "seamless": [9, 47, 60, 95, 322], "block": [9, 57, 64, 160, 236, 322], "spawn": 9, "adopt": [9, 41, 52, 96, 161, 322], "csc": [9, 320], "csr": [9, 13, 56, 171, 320, 323], "sent": [9, 10, 14, 16, 24, 75], "mainten": [9, 321], "preserv": [9, 13, 52, 71, 101, 171, 271, 301], "effect": [9, 36, 37, 41, 51, 52, 60, 71, 74, 75, 83, 89, 94, 161, 240, 309, 322], "readi": [9, 30, 32, 37, 51, 57, 60, 65, 75, 89, 159, 161, 316, 322, 330], "accept": [9, 41, 48, 174, 256, 260, 322, 323], "insert": [9, 14, 64, 129, 322], "newli": [9, 40, 41], "particular": [9, 37, 69, 74, 100, 160, 163, 238], "incid": [9, 20, 72, 74, 76, 185, 186, 228, 250, 299, 309], "encod": [9, 13, 69, 72, 100, 158, 163, 169, 171, 173, 311, 322, 341], "dummi": 9, "furthermor": [9, 75, 76, 79, 89, 96], "proprieti": 9, "deduct": 9, "techniqu": [9, 34, 83, 91, 92, 163], "cancel": 9, "compens": 9, "whose": [9, 24, 68, 76, 161, 163, 174, 179, 199, 281, 285, 301, 303, 304, 320, 321], "proce": [9, 48, 228, 322], "inner": [10, 13, 16, 56, 76, 77, 102, 171, 321], "outer": [10, 14, 56, 69, 102, 224, 321], "cross": [10, 72, 104, 284], "f_": 10, "instanc": [10, 15, 23, 27, 28, 29, 30, 33, 38, 44, 47, 48, 51, 52, 57, 63, 72, 76, 85, 89, 90, 92, 93, 97, 99, 100, 101, 108, 110, 112, 128, 135, 152, 160, 171, 209, 211, 212, 214, 216, 218, 219, 221, 223, 224, 227, 238, 240, 241, 243, 245, 246, 247, 249, 253, 254, 255, 261, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 304, 311, 316, 321, 322, 330], "5": [10, 13, 19, 20, 31, 57, 65, 70, 74, 76, 82, 83, 85, 86, 87, 90, 93, 97, 157, 160, 162, 163, 164, 166, 169, 174, 180, 185, 187, 193, 212, 215, 228, 232, 233, 234, 236, 237, 245, 247, 254, 255, 256, 257, 259, 260, 274, 275, 277, 278, 279, 280, 282, 283, 286, 288, 290, 292, 293, 299, 304, 309, 315, 316, 322, 324, 330, 335, 336, 340], "9": [10, 31, 63, 66, 76, 90, 158, 174, 212, 214, 260, 278, 286, 299, 304, 339], "12": [10, 20, 32, 57, 66, 76, 97, 100, 158, 159, 160, 162, 164, 176, 177, 178, 214, 276, 277, 281, 285, 289, 295, 333, 335, 339, 340], "split": [10, 43, 71, 74, 76, 85, 86, 87, 158, 159, 316, 322], "roughli": 10, "across": [10, 14, 34, 35, 36, 48, 72, 89, 91, 92, 96, 321, 323], "divid": [10, 69, 76, 80, 89, 100, 158, 161, 165, 166, 174, 320], "place": [10, 18, 19, 36, 42, 43, 63, 76, 167, 168, 171, 236, 256, 257, 258, 259, 260, 289, 307], "itself": [10, 20, 22, 37, 74, 76, 80, 88, 89, 102, 157, 159, 315, 316, 321], "replic": [10, 65, 250], "resid": [10, 14, 38], "j": [10, 31, 56, 100, 169, 174, 207, 208, 229, 230, 238, 240, 241, 243, 249, 260, 263, 264, 265, 287, 321], "outcom": 10, "outgo": [10, 13, 16, 24, 74, 76, 93, 102, 163, 174, 309, 321], "incom": [10, 13, 14, 16, 34, 74, 76, 99, 102, 174], "consid": [10, 15, 18, 27, 37, 71, 76, 83, 92, 100, 101, 158, 159, 174, 238, 301, 318, 321], "vice": [10, 256], "versa": [10, 256], "compani": [10, 321], "syncstateonoutervertexastarget": 10, "certain": [10, 24, 60, 74, 88, 96, 158, 159, 163, 166, 321, 322], "regardless": [10, 52, 69, 91, 158, 254, 321], "friendli": [11, 12, 37, 62, 79, 92, 94, 95, 96], "research": [11, 71, 83, 94, 299, 316], "particularli": [11, 94, 301], "field": [11, 27, 30, 33, 38, 42, 44, 63, 83, 85, 86, 88, 90, 161, 165, 169, 171, 255, 316, 322, 333, 336], "scienc": [11, 263, 286], "solv": [11, 24, 37, 57, 59, 76, 92], "recast": [12, 14, 34], "ga": 12, "plug": [12, 34, 89], "minor": [12, 14, 34, 79, 89, 94, 97, 324], "cope": [12, 34], "life": [12, 32, 34, 63, 89], "extrem": [12, 27, 89, 165, 210, 221, 321], "fashion": [12, 20], "consist": [12, 13, 20, 24, 30, 34, 35, 36, 41, 44, 64, 71, 72, 74, 76, 79, 80, 83, 91, 92, 94, 96, 97, 99, 100, 102, 160, 161, 163, 165, 211, 212, 213, 224, 227, 235, 281, 303, 316, 318, 320, 321, 322, 323], "format": [12, 13, 20, 22, 34, 35, 42, 43, 60, 62, 76, 80, 88, 94, 95, 97, 100, 128, 135, 157, 160, 163, 165, 168, 169, 171, 172, 309, 311, 316, 318, 334], "unifi": [12, 34, 60, 62, 64, 158, 318], "care": [12, 34, 76, 167, 168, 321], "foreign": [12, 321], "ecosystem": [12, 48, 54, 62, 66, 78, 79, 93, 96, 326], "freedom": 12, "accord": [12, 19, 36, 41, 57, 63, 64, 68, 74, 76, 80, 88, 89, 93, 94, 99, 161, 163, 167, 228, 236, 248, 249, 318, 322], "demand": [12, 51, 64, 92, 321, 322, 326], "sdk": [12, 18, 57, 63, 67, 77, 78, 79, 92, 93, 96, 104, 314, 322, 326, 332], "domain": [12, 68, 89, 94, 256, 257, 258, 259, 260], "dedic": 12, "treat": [12, 14, 20, 34, 76, 171, 309, 311, 316], "immut": [12, 34, 62, 72, 91], "persist": [12, 15, 30, 34, 57, 62, 63, 89, 91, 96, 320], "fortun": [12, 20, 42, 60], "grin": [12, 62], "awar": [12, 37, 41, 48, 57, 63, 91], "introduct": [12, 34, 77, 92, 162, 163, 166, 174, 219, 301, 321], "foundat": [12, 55, 71, 89], "visit": [12, 29, 48, 68, 76, 93, 158], "meanwhil": [12, 60, 79, 94, 321], "compress": [12, 13, 50, 90, 100, 158, 274], "pipelin": [12, 34, 79, 89, 92, 96, 325], "balanc": [12, 159, 209], "link": [12, 31, 37, 38, 44, 47, 57, 59, 64, 72, 80, 94, 97, 100, 171, 174, 211, 232, 234, 235, 245, 246, 247, 306, 309, 316], "popular": [12, 22, 29, 49, 60, 88, 90, 93, 94, 157, 169, 322], "freeli": [12, 24], "background": [12, 59], "interoper": [12, 321], "panda": [12, 60, 68, 99, 101, 115, 126, 171, 309, 338], "mar": [12, 27, 60, 74, 91, 316], "fastffi": [12, 104], "via": [12, 14, 17, 18, 20, 22, 23, 24, 27, 32, 42, 51, 52, 57, 63, 69, 70, 72, 74, 77, 78, 79, 89, 91, 93, 96, 99, 210, 221, 228, 304, 307, 309, 326, 332], "emploi": [12, 24, 34, 47, 86, 91, 92], "captur": [12, 94], "20": [12, 13, 27, 29, 32, 34, 63, 66, 74, 76, 79, 97, 100, 101, 159, 160, 162, 171, 228, 256, 257, 278, 280, 309, 332, 333, 339, 340], "100": [12, 34, 68, 76, 82, 85, 86, 90, 100, 169, 174, 231, 238, 242, 249, 258, 309, 316, 336, 340], "build": [12, 15, 31, 34, 35, 37, 57, 64, 68, 75, 79, 80, 88, 91, 99, 100, 110, 112, 159, 163, 165, 167, 168, 171, 257, 258, 259, 301, 316, 318, 329, 334, 341], "been": [12, 17, 23, 24, 28, 29, 33, 37, 41, 57, 64, 65, 66, 68, 71, 74, 76, 78, 80, 89, 91, 92, 93, 94, 96, 100, 149, 161, 163, 171, 172, 174, 228, 251, 301, 313, 326], "go": [13, 81, 169, 236, 289, 322], "impact": [13, 93], "dive": 13, "arrowfrag": [13, 16, 99, 323], "vineyard": [13, 15, 16, 23, 28, 31, 33, 56, 57, 62, 63, 72, 79, 84, 85, 89, 95, 96, 99, 101, 131, 136, 139, 140, 171, 172, 316, 321, 322, 330, 332, 335, 336, 337, 340, 342], "basic": [13, 16, 20, 42, 43, 74, 93, 157, 160, 165, 167, 168, 169, 228, 238, 243, 315], "member": [13, 16, 76, 99, 299], "string": [13, 17, 23, 33, 63, 68, 69, 72, 88, 99, 100, 102, 107, 144, 158, 159, 160, 161, 162, 163, 166, 168, 169, 170, 171, 173, 174, 189, 193, 194, 203, 301, 303, 305, 309, 311, 318, 321, 322, 323, 332, 340, 342], "consecut": 13, "hashmap": [13, 56, 171], "arrai": [13, 17, 56, 69, 80, 88, 94, 99, 100, 101, 160, 161, 163, 166, 169, 309, 312, 324, 332], "o2g_": 13, "fragment_id": 13, "_": [13, 30, 37, 67, 88, 100, 171, 174, 309, 312, 332, 335, 337, 342], "vertex_label": [13, 99, 102], "perfect": [13, 171], "int64_t": [13, 56, 63, 88, 99, 100, 171, 324, 342], "std": [13, 14, 15, 56, 99, 318, 323], "string_view": 13, "uint64_t": [13, 16, 171, 318], "oid_arrays_": [13, 56], "topologi": [13, 80, 83, 91, 160, 165, 306, 318, 320, 321], "row": [13, 43, 63, 71, 80, 94, 158, 171, 302, 322], "matrix": [13, 88, 94, 100, 165, 174, 236, 254, 269, 272, 301, 309, 312], "src_type": [13, 160], "edge_typ": [13, 42, 44, 82, 85, 86, 90, 157, 159, 160, 161, 162, 163, 166, 169, 173, 321, 336, 341], "pair": [13, 20, 66, 69, 72, 76, 99, 100, 102, 156, 169, 208, 213, 214, 220, 236, 254, 260, 309, 312, 315, 321, 323], "indptr": 13, "ie_lists_": [13, 56], "edge_label": [13, 68, 99, 102, 316], "neighbor_vertex_id": 13, "edge_table_index": 13, "tabl": [13, 41, 43, 71, 72, 76, 80, 88, 97, 157, 159, 171, 316, 318, 320, 321, 323], "uint32_t": [13, 99, 171], "num_edg": 13, "ie_offsets_lists_": [13, 56], "offset": [13, 56, 99, 160, 168, 212], "slice": [13, 64, 101, 171, 315], "ie_list": 13, "ie_offset": 13, "arai": 13, "num_vertic": 13, "oe_lists_": [13, 56], "oe_offsets_lists_": [13, 56], "oe_list": 13, "oe_offset": 13, "edge_tables_": [13, 56], "vertex_tables_": [13, 56], "oid_t": [13, 15, 16, 56, 99], "vid_t": [13, 15, 16, 56, 99], "sizeof": 13, "uint8_t": 13, "load_factor": 13, "observ": [13, 23, 57], "practic": [13, 16, 28, 64, 72, 80, 83, 89, 94, 158, 159, 161, 322], "load_factori": 13, "15": [13, 57, 76, 85, 86, 87, 97, 159, 160, 162, 163, 269, 291, 302, 309, 316], "extra": [13, 37, 57, 63, 65, 174, 270, 335], "column": [13, 18, 33, 42, 43, 56, 60, 64, 72, 80, 88, 90, 94, 99, 101, 102, 109, 158, 168, 171, 302, 318, 322, 323, 332, 336, 342], "edge_id": 13, "uniqu": [13, 42, 43, 44, 53, 64, 68, 72, 88, 89, 90, 91, 100, 148, 149, 158, 162, 167, 168, 171, 174, 276, 282, 315, 322, 323], "kept": [13, 74, 76, 99], "summari": [13, 96, 189], "argument": [13, 23, 30, 74, 76, 83, 88, 174, 176, 177, 178, 207, 215, 245, 252, 256, 257, 258, 259, 260, 287, 309, 312, 315, 316, 322, 323, 332], "use_perfect_hash": [13, 99, 150, 171, 316], "load_from": [13, 22, 30, 171, 316], "realli": 13, "margin": 13, "former": [13, 92], "globalvertexmap": 13, "later": [13, 18, 20, 32, 33, 66, 68, 76, 93, 171, 316, 321, 322, 339], "localvertexmap": 13, "suitabl": [13, 50, 89, 96, 159, 163, 169, 228, 322, 325], "dozen": 13, "hundr": [13, 238, 249], "repeatedli": [13, 64, 92], "add_vertic": [13, 60, 68, 88, 171, 309, 312, 313, 336, 337, 342], "sure": [13, 23, 27, 30, 40, 42, 48, 65, 68, 76, 163, 167, 169, 316, 322], "fairli": [13, 66], "8": [13, 20, 31, 32, 33, 35, 37, 57, 63, 66, 68, 76, 79, 82, 97, 100, 158, 212, 235, 254, 277, 286, 288, 294, 298, 304, 306, 309, 311, 322, 324, 335, 340], "absolut": 13, "int32_t": [13, 88, 171, 342], "vid_typ": [13, 33, 99, 150, 171, 316], "compact_edg": [13, 99, 150, 171, 316], "compact": [13, 99, 171], "varint": [13, 171], "half": [13, 171], "generated_eid": 13, "save": [13, 18, 28, 29, 47, 63, 159, 174, 322], "interact": [13, 27, 29, 33, 36, 37, 38, 40, 41, 42, 44, 49, 51, 52, 53, 54, 60, 63, 64, 65, 67, 68, 70, 71, 73, 75, 76, 77, 79, 88, 89, 91, 92, 95, 96, 98, 128, 171, 250, 299, 314, 316, 336, 340], "vertex_id": [13, 24, 52, 60, 88, 342], "retain_oid": [13, 63, 88, 99, 150, 171, 316, 323, 342], "gain": [13, 37], "signific": [13, 91, 96], "arrowprojectedfrag": [13, 15, 16, 99, 108], "implicit": [13, 312], "arrowflattenfrag": 13, "thought": [13, 237], "view": [13, 20, 24, 55, 88, 89, 120, 182, 186, 205, 206, 309, 312, 318, 330], "mainli": [13, 43, 64, 69, 76, 96, 165], "purpos": [13, 71, 76, 89, 321], "penalti": 13, "arrowprojectfrag": 13, "r1": [13, 101, 324, 325], "r2": [13, 101, 324, 325], "r3": [13, 101, 324], "projected_g": 13, "_project_to_simpl": [13, 16, 17, 22], "otherwis": [13, 33, 76, 92, 100, 158, 162, 163, 164, 174, 191, 228, 248, 258, 307, 309, 316, 321, 322], "express": [14, 15, 24, 64, 69, 70, 72, 83, 91, 93, 101, 158, 160, 163, 260, 309, 340], "modifi": [14, 20, 24, 28, 51, 63, 69, 75, 113, 114, 129, 130, 164, 187, 240, 307, 320, 321], "adher": [14, 35, 44, 321], "think": [14, 24], "principl": [14, 167], "privileg": 14, "experienc": [14, 93], "inform": [14, 15, 16, 19, 27, 29, 38, 48, 57, 64, 65, 68, 69, 72, 86, 90, 92, 94, 95, 104, 118, 157, 158, 159, 160, 163, 165, 167, 171, 174, 189, 207, 248, 270, 271, 299, 309, 316, 318, 322, 329], "hop": [14, 64, 72, 74, 76, 79, 80, 83, 89, 93, 94, 157, 161, 163, 165, 166, 167, 169], "slow": [14, 66], "consequ": [14, 89, 92], "piec": [14, 49, 62, 168, 316], "destin": [14, 33, 42, 43, 44, 63, 68, 69, 76, 80, 88, 90, 99, 101, 117, 158, 159, 160, 162, 163, 169, 171, 173, 315, 320, 321, 322, 342], "abovement": 14, "peval": [14, 16, 17, 18, 34, 92, 99, 107, 326, 332], "incev": [14, 16, 17, 18, 34, 92, 99, 107, 326, 332], "assembl": [14, 34, 64, 91, 92, 99, 171], "unlik": [14, 17, 70, 80, 83, 89, 309], "modif": [14, 22, 79, 89, 94, 171, 312], "convent": [14, 37, 57, 71, 242, 268, 330], "taught": [14, 76], "colleg": 14, "textbook": 14, "answer": [14, 34, 37, 57, 68, 89, 322], "collect": [14, 34, 69, 74, 75, 76, 93, 94, 95, 169, 309], "partial": [14, 16, 18, 34, 74, 99, 101, 158, 251, 326], "intricaci": 14, "fixpoint": 14, "monoton": 14, "guarante": [14, 63, 83, 96, 158, 166, 174, 244, 309], "accur": [14, 68, 71], "long": [14, 17, 30, 33, 38, 52, 68, 72, 76, 91, 96, 100, 163, 321, 322, 332, 340], "const": [14, 15, 16, 56, 99, 102, 167, 168, 321, 322, 323], "fragment_t": [14, 15, 16, 99], "frag": [14, 17, 18, 56, 107, 318, 323, 332], "context_t": [14, 15, 16, 99], "ctx": [14, 17, 22, 99, 332], "message_manager_t": [14, 16, 99], "vertex_t": [14, 16, 56, 99], "native_sourc": [14, 18, 332], "getinnervertex": [14, 99], "partial_result": 14, "getoutgoingadjlist": [14, 16, 17, 56, 99, 318, 332], "get_neighbor": 14, "min": [14, 18, 24, 66, 69, 102, 332, 340], "static_cast": [14, 16, 56, 318], "get_data": [14, 56], "isoutervertex": [14, 99], "put": [14, 16, 17, 22, 167], "channel": [14, 16, 37], "syncstateonoutervertex": 14, "els": [14, 16, 18, 56, 76, 159, 169, 171, 267, 321, 322, 332], "next_modifi": 14, "inner_vertic": [14, 16], "innervertic": [14, 16, 17, 56, 99, 318, 332], "parallelprocess": [14, 16], "thread_num": [14, 16], "tid": [14, 16], "msg": [14, 16, 24, 76, 102, 321], "atomic_min": 14, "curr_modifi": 14, "foreach": [14, 16], "distv": [14, 18, 332], "ndistu": 14, "outer_vertic": 14, "outervertic": [14, 56, 99], "dijkstra": [14, 18, 92, 174, 332], "checkout": [14, 37, 164], "seri": [15, 76, 94, 99, 163, 321], "strong": [15, 64, 92], "typenam": [15, 16, 56, 99], "frag_t": [15, 16, 99], "yourapp": 15, "flashappbas": 15, "v_type": 15, "install_flash_work": 15, "flashvertexdatacontext": 15, "v_res_typ": 15, "sync_all_": 15, "re": [15, 37, 41, 42, 63, 75, 76, 93, 160, 163, 167, 169, 315, 324], "shared_ptr": [15, 56, 99, 318, 323], "fw_t": 15, "fw": 15, "Or": [15, 17, 19, 22, 29, 36, 40, 52, 68, 76, 88, 316, 332, 342], "global": [15, 24, 64, 72, 74, 76, 94, 150, 171, 301, 316, 323, 340], "flashglobaldatacontext": 15, "g_res_typ": 15, "let": [15, 18, 19, 40, 43, 63, 64, 76, 88, 94, 271, 315], "bfsflash": 15, "bfs_type": 15, "value_t": 15, "di": 15, "o_sourc": 15, "oid2flashid": 15, "definemapv": 15, "init": [15, 16, 17, 18, 42, 48, 53, 56, 85, 88, 99, 100, 102, 107, 157, 159, 160, 164, 167, 169, 309, 312, 318, 326, 332, 341, 342], "vset_t": 15, "ctruev": 15, "definefv": 15, "definemap": 15, "cond": [15, 217], "len": [15, 76, 85, 159, 174, 183, 214, 231, 233, 236, 238, 239, 243, 309], "ed": [15, 23, 242, 256, 263, 286, 292], "ctruee": 15, "rather": [15, 18, 51, 76, 88, 93, 95, 96, 174, 228, 270, 321], "project_to_simpl": 15, "not_compatible_for": 15, "arrow_properti": [15, 30, 111, 312], "dynamic_properti": [15, 124, 312], "def": [15, 18, 23, 67, 82, 85, 86, 87, 88, 90, 107, 157, 159, 160, 161, 162, 163, 166, 169, 215, 322, 332, 336, 337, 341, 342], "arg": [15, 85, 99, 100, 101, 102, 135, 153, 160, 161, 162, 163, 166, 169, 173, 316, 322], "appasset": [15, 18, 107, 108, 112, 314, 332], "algo": [15, 16, 17, 22, 23, 100, 108], "flash_bf": 15, "vertex_data": [15, 16, 100, 108], "gscoordin": [15, 28, 36], "builtin": [15, 19, 20, 52, 310, 312, 314], "gs_conf": [15, 16, 108], "yaml": [15, 16, 28, 29, 38, 41, 42, 43, 44, 48, 52, 53, 63, 75, 100, 108, 316, 320, 322, 340], "cpp_flash": 15, "class_nam": [15, 16, 108], "compatible_graph": [15, 16, 108], "immutableedgecutfrag": 15, "log": [15, 17, 41, 57, 62, 85, 86, 89, 91, 321, 323, 335], "p2p": [15, 17, 22, 23], "network": [15, 27, 44, 57, 60, 62, 65, 76, 80, 84, 86, 89, 90, 92, 95, 96, 97, 98, 100, 157, 158, 159, 161, 163, 165, 169, 174, 229, 230, 236, 238, 242, 245, 246, 247, 250, 262, 286, 297, 298, 300, 301, 306, 310, 324, 335], "load_p2p_network": [15, 16, 17, 18, 60, 100, 101, 332], "attribut": [15, 19, 72, 83, 86, 90, 92, 94, 99, 100, 133, 144, 159, 160, 162, 165, 169, 170, 173, 174, 176, 177, 178, 193, 194, 203, 215, 228, 233, 252, 256, 257, 258, 259, 260, 263, 264, 265, 299, 301, 303, 306, 307, 309, 310, 312, 318], "convert": [15, 20, 23, 47, 71, 80, 100, 115, 116, 126, 127, 139, 140, 157, 158, 165, 169, 229, 230, 287, 304, 309, 311, 312, 318], "simple_graph": [15, 16], "dist": [15, 17, 48, 67, 100, 101, 164, 167, 256, 258, 260, 316, 332, 340], "codegen": [15, 64], "bit": [15, 66, 69, 74, 76], "longer": [15, 85, 102, 316], "retriev": [15, 47, 62, 68, 72, 74, 90, 91, 101, 115, 116, 126, 127, 131, 135, 139, 140, 160, 161, 163, 169, 174, 315, 322, 323], "displai": [15, 53, 75, 158], "vertex_rang": [15, 101, 115, 116, 126, 127, 131, 139, 140, 171, 315], "end": [15, 16, 56, 60, 69, 74, 76, 83, 84, 85, 86, 87, 88, 89, 90, 93, 96, 101, 102, 163, 168, 174, 188, 197, 202, 203, 216, 228, 311, 315, 321, 326], "sort_valu": 15, "pip3": [16, 19, 23, 35, 37, 57, 67, 75, 333, 335, 339], "degre": [16, 19, 20, 56, 60, 71, 76, 83, 100, 102, 160, 161, 166, 174, 183, 208, 209, 228, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 254, 266, 267, 268, 269, 303, 309, 310, 322], "vertexdatacontext": [16, 17, 99, 174, 332], "myappcontext": 16, "explicit": [16, 99, 253, 309, 316], "parallelmessagemanag": [16, 17, 332], "param1": 16, "setvalu": [16, 17, 332], "vertex_array_t": [16, 99], "variabl": [16, 29, 33, 40, 57, 65, 74, 107, 228, 316, 322, 323, 335], "And": [16, 18, 23, 29, 31, 36, 38, 60, 64, 66, 74, 76, 88, 97, 100, 101, 162, 167, 312, 315, 316], "zero": [16, 44, 91, 100, 158, 163, 174, 191, 209, 218, 251, 303, 304, 323], "myapp": 16, "parallelappbas": [16, 17, 332], "parallelengin": [16, 17, 332], "install_parallel_work": 16, "constexpr": [16, 99], "messagestrategi": [16, 18, 99, 102, 332], "message_strategi": [16, 99], "ksynconoutervertex": [16, 18, 99, 102, 332], "loadstrategi": [16, 99], "load_strategi": [16, 99], "kbothoutin": [16, 99], "initchannel": 16, "noth": [16, 102, 118, 171, 173, 309], "forc": [16, 37, 88], "forcecontinu": [16, 17, 332], "getincomingadjlist": [16, 56, 99], "counter": [16, 76], "runnabl": [16, 17, 23], "content": [16, 50, 60, 76, 86, 88, 90, 174, 306, 320, 342], "my_app": [16, 18, 332], "cpp_pie": [16, 100, 108], "context_typ": [16, 99, 100, 108], "dynamicprojectedfrag": 16, "codebas": [16, 35], "my_app_context": 16, "zip": [16, 48, 50, 67, 68, 75, 108, 256, 260, 309, 340], "jr": 16, "load_app": [16, 17, 18, 22, 332], "path_to_your_gar_resourc": 16, "to_numpi": [16, 17, 22, 100, 101, 171, 315, 332], "demo": [17, 22, 23, 66, 104, 316, 320, 322, 330, 332], "turn": [17, 45, 55, 57, 68, 97, 104, 303, 330], "verbos": [17, 23, 38, 57, 330], "lauch": [17, 22, 332], "cluster_typ": [17, 22, 68, 88, 100, 101, 316, 332, 342], "add_lib": [17, 22, 316], "home": [17, 22, 23, 28, 38, 42, 43, 57, 60, 88, 99, 164, 165, 167, 168, 170, 171, 174, 218, 330, 332, 334, 342], "19": [17, 22, 23, 32, 57, 67, 76, 97, 159, 160, 162, 330, 335, 339], "shade": [17, 22, 23, 332], "java_pi": [17, 100], "threadnum": [17, 332], "info": [17, 38, 41, 48, 57, 66, 76, 102, 171, 309, 312, 316, 320, 321, 322, 323, 330], "maven": [17, 23, 104, 322, 332], "groupid": [17, 23, 322, 332], "artifactid": [17, 23, 322, 332], "shall": [17, 23], "fat": 17, "plugin": [17, 23, 322, 332], "spark": [17, 320], "drastic": 17, "great": [17, 23, 37, 322], "suppos": [17, 76, 171, 303, 321], "traversecontext": [17, 332], "overrid": [17, 88, 99, 157, 167, 332], "ifrag": [17, 332], "parallelcontextbas": [17, 332], "adjlist": [17, 99, 102, 320, 332], "nbr": [17, 20, 56, 99, 102, 309, 332], "dst": [17, 18, 30, 60, 72, 83, 88, 101, 157, 160, 171, 173, 315, 318, 321, 332, 341, 342], "largest": [17, 76, 174, 254, 332], "vertexarrai": [17, 99, 102, 332], "math": [17, 82, 86, 90, 174, 258, 259, 336, 338], "max": [17, 69, 102, 170, 174, 332, 340], "pars": [17, 64, 88, 100, 158, 318, 322], "maxiter": [17, 332], "jsonobject": [17, 332], "gsvertexarrai": [17, 332], "createfficontext": [17, 332], "avail": [17, 23, 29, 30, 40, 43, 49, 55, 60, 68, 69, 72, 75, 83, 88, 91, 97, 100, 156, 169, 257, 258, 259, 309, 316, 318, 321, 322, 329, 332], "containskei": [17, 332], "getinteg": [17, 332], "javadoc": [17, 35], "mvn": [17, 22, 104, 322], "proper": [17, 37], "javaapp": [17, 314, 332], "But": [17, 63, 76, 88, 96, 104, 309, 315], "rememb": [17, 22, 23, 30, 33, 41, 52, 329], "singel": 17, "full_jar_path": [17, 100, 332], "pack": [17, 23, 332], "java_app_class": [17, 100, 332], "fullli": [17, 332], "qualifi": [17, 100, 332], "b": [17, 18, 22, 37, 69, 74, 76, 163, 218, 236, 249, 255, 256, 260, 265, 266, 267, 269, 297, 305, 309, 332, 340], "param": [17, 23, 29, 57, 66, 68, 100, 120, 121, 135, 150, 152, 156, 163, 169, 171, 316, 322, 332], "bother": 17, "click": [17, 36, 37, 83, 159, 160, 163, 333], "pure": [18, 99, 326], "just": [18, 19, 23, 27, 48, 50, 52, 57, 60, 63, 74, 76, 96, 104, 167, 171, 309, 312, 316, 324], "udf": [18, 107, 315, 332], "decor": [18, 332], "vd_type": [18, 102, 107, 332], "md_type": [18, 102, 107, 332], "youralgorithm": [18, 332], "staticmethod": [18, 107, 332], "statu": [18, 27, 29, 30, 38, 52, 53, 57, 85, 167, 168, 174, 322, 326, 330], "cython": [18, 34, 57, 135, 314, 332], "sssp_pie": [18, 332], "v_label_num": [18, 323, 332], "vertex_label_num": [18, 102, 318, 323, 332], "v_label_id": [18, 102, 332], "init_valu": [18, 102, 332], "1000000000": [18, 100, 332], "pieaggregatetyp": [18, 102, 332], "kminaggreg": [18, 102, 332], "register_sync_buff": [18, 102, 332], "get_config": [18, 102, 316, 332], "declar": [18, 51, 64, 74, 76, 79, 93, 96, 159, 332], "get_inner_nod": [18, 102, 332], "break": [18, 37, 47, 51, 75, 169, 332], "set_node_valu": [18, 102, 332], "e_label_num": [18, 56, 323, 332], "edge_label_num": [18, 102, 318, 323, 332], "e_label_id": [18, 332], "get_outgoing_edg": [18, 102, 332], "third": [18, 88, 89, 93, 171, 294, 295], "get_int": [18, 102, 332], "get_node_valu": [18, 102, 332], "iv": [18, 332], "inner_nod": [18, 102, 332], "v_dist": [18, 332], "u_dist": [18, 56, 332], "classic": [18, 83, 162, 310], "yourpregelalgorithm": [18, 332], "sssp_pregel": [18, 332], "set_valu": [18, 102, 332], "src_id": [18, 56, 83, 158, 159, 160, 162, 163, 166, 169, 173, 332], "cur_dist": [18, 332], "new_dist": [18, 332], "outgoing_edg": [18, 102, 332], "vote_to_halt": [18, 102, 332], "sin": [18, 332], "m_pi": [18, 332], "translat": [18, 37, 68, 89], "generate_eid": [18, 63, 88, 99, 150, 171, 316, 323, 332, 342], "test": [18, 23, 29, 33, 47, 57, 62, 63, 66, 76, 79, 82, 85, 86, 90, 94, 157, 167, 169, 173, 193, 194, 228, 309, 311, 316, 321, 322, 329, 333, 334, 336, 341], "futur": [18, 44, 48, 51, 69, 74, 76, 88], "to_gar": [18, 332], "my_sssp_pregel": [18, 332], "gar": [18, 100, 108, 171, 316, 320, 332], "construct": [19, 51, 55, 76, 80, 83, 88, 89, 90, 91, 99, 150, 157, 158, 159, 160, 161, 171, 172, 176, 177, 217, 238, 240, 241, 243, 249, 253, 254, 255, 263, 266, 267, 268, 269, 271, 287, 291, 295, 301, 303, 316, 320, 323], "expand": [19, 51, 64, 76, 77, 161, 163, 310], "add_edges_from": [19, 20, 193, 309], "add_nod": [19, 20, 309, 312], "number_of_nod": [19, 20, 174, 218, 302, 309], "number_of_edg": [19, 20, 183, 218, 302, 309], "sort": [19, 20, 56, 64, 76, 174, 180, 208, 212, 215, 218, 243, 244, 302, 303, 309, 321], "connected_compon": [19, 174], "nx": [19, 20, 60, 111, 113, 114, 117, 120, 122, 124, 129, 130, 134, 137, 138, 171, 174, 309, 311, 312], "add_nodes_from": [19, 20, 309], "red": [19, 20, 37, 68, 158, 309], "green": [19, 20, 36, 37], "add_edg": [19, 20, 60, 68, 88, 171, 187, 193, 194, 197, 202, 203, 309, 312, 336, 337, 342], "1415": [19, 20], "all_pairs_shortest_path": 19, "sp": [19, 49], "dict": [19, 20, 27, 100, 101, 128, 136, 156, 159, 160, 163, 171, 172, 256, 257, 258, 259, 266, 267, 287, 309, 315, 316, 322], "draw": [19, 47, 51, 76, 256, 259], "matplotlib": [19, 76], "with_label": 19, "font_weight": 19, "bold": [19, 97], "twitter": [19, 97], "wget": [19, 22, 23, 29, 35, 48, 67, 164, 340], "raw": [19, 22, 23, 42, 43, 48, 53, 63, 64, 80, 126, 127, 159, 165, 167, 168, 173], "githubusercont": [19, 22, 23], "p": [19, 20, 31, 36, 47, 68, 74, 76, 90, 91, 100, 159, 169, 174, 232, 233, 234, 236, 245, 246, 247, 250, 251, 253, 255, 257, 258, 259, 260, 263, 265, 340], "netwrokx": 19, "o": [19, 22, 23, 27, 30, 33, 38, 48, 99, 169, 174, 191, 242, 244, 249, 257, 258, 259, 261, 262, 263, 309, 322, 333, 336], "gs_nx": 19, "g1": [19, 171, 313, 324, 325], "read_edgelist": [19, 311], "expandvar": [19, 22], "nodetyp": [19, 311], "create_us": [19, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 238, 239, 240, 241, 243, 245, 246, 247, 249, 253, 254, 255, 261, 262, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 304, 311], "g2": [19, 171, 309, 313, 324, 325], "ret_g": 19, "ret_nx": 19, "lack": [20, 32, 68, 95, 174], "hashabl": [20, 189, 204, 266, 309, 311], "float": [20, 69, 72, 85, 88, 97, 100, 157, 158, 159, 160, 168, 169, 170, 174, 228, 231, 232, 233, 234, 236, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 263, 264, 265, 301, 309, 311, 316, 324, 340, 341, 342], "tupl": [20, 76, 88, 158, 159, 160, 169, 171, 174, 193, 194, 203, 215, 256, 260, 266, 305, 309, 311, 316], "though": [20, 54, 228, 309, 322], "yield": [20, 47, 52, 163, 169, 256, 260, 309], "node_attribute_dict": 20, "discuss": [20, 57, 76, 174, 321, 335], "incorpor": [20, 47, 71], "path_graph": [20, 174, 185, 187, 188, 194, 309, 311], "grown": [20, 218, 251, 309], "unpack": [20, 75, 99, 309], "ebunch": [20, 309], "dictionari": [20, 49, 100, 144, 174, 256, 257, 258, 259, 266, 267, 268, 269, 309, 311], "11": [20, 27, 30, 31, 32, 63, 66, 76, 82, 97, 100, 158, 159, 160, 162, 176, 177, 178, 214, 309, 322, 330], "complaint": 20, "clear": [20, 37, 74, 76, 113, 114, 209, 211, 212, 214, 216, 218, 219, 221, 223, 224, 227, 238, 240, 241, 243, 245, 246, 247, 249, 253, 254, 255, 261, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 304, 309, 311, 322], "quietli": [20, 204, 309], "ignor": [20, 174, 185, 204, 309, 316], "spam": 20, "stage": [20, 57, 62, 80, 95, 96, 163, 321], "seen": [20, 64, 89, 321], "report": [20, 57, 97, 134, 232, 233, 234, 309, 312], "adj": [20, 102, 174, 309], "item": [20, 29, 43, 48, 89, 158, 159, 160, 163, 169, 174, 309, 322], "One": [20, 64, 69, 89, 93, 94, 95, 96, 100, 161, 163, 240, 249, 303, 322], "nbunch": [20, 182, 186, 188, 204, 309], "remove_nod": [20, 309], "remove_nodes_from": [20, 309], "remove_edg": [20, 309], "remove_edges_from": [20, 238, 240, 309], "instanti": [20, 100, 169, 324], "digraph": [20, 171, 176, 186, 188, 193, 194, 197, 202, 203, 214, 231, 232, 233, 236, 240, 241, 243, 245, 246, 247, 248, 252, 303, 304, 305, 307, 310, 311, 312], "edgelist": [20, 287, 311], "subscript": [20, 309], "notat": [20, 41, 43, 274, 276, 278, 280, 282, 288, 290, 309], "yellow": [20, 158], "blue": [20, 158, 309], "undirect": [20, 44, 88, 94, 100, 120, 159, 163, 171, 174, 180, 184, 206, 229, 230, 236, 238, 245, 247, 250, 252, 253, 254, 256, 257, 258, 259, 260, 266, 271, 275, 276, 279, 282, 283, 285, 291, 304, 306, 309, 323], "twice": [20, 287, 309], "fg": [20, 323], "add_weighted_edges_from": [20, 193, 309], "125": [20, 158, 242, 253], "75": [20, 76, 82, 85, 86, 90, 97, 174, 232, 233, 234, 236, 316, 336], "375": 20, "eattr": [20, 309], "wt": 20, "attach": [20, 99, 158, 245, 248], "fridai": [20, 309, 312], "mondai": 20, "5pm": [20, 309], "2pm": [20, 309], "room": [20, 309], "714": [20, 309], "to_direct": [20, 171, 229, 230, 245, 247, 309], "representaion": 20, "dg": [20, 79, 94], "represent": [20, 51, 64, 89, 91, 94, 171, 307, 309, 320], "dgv": 20, "as_view": [20, 205, 206, 309], "shallow": 20, "out_edg": [20, 186, 309], "in_degre": [20, 83, 85, 161, 163, 166, 169, 240, 266, 267, 309], "predecessor": [20, 179, 252, 303, 309], "successor": [20, 146, 179, 246, 247, 252, 309], "out_degre": [20, 240, 266, 267, 309], "feel": [20, 37, 57], "inconsist": [20, 97], "inde": [20, 22], "lump": 20, "danger": 20, "probabl": [20, 37, 74, 83, 94, 100, 161, 166, 231, 232, 233, 234, 236, 238, 242, 245, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 263, 265], "to_undirect": [20, 171, 245, 247, 309], "theoret": 20, "load_ldbc": [20, 76, 340], "foo": [20, 309], "famou": [22, 23, 308], "hadoop": [22, 322], "cetric": 22, "stop": [22, 27, 30, 42, 53, 91, 95, 99, 174], "intergr": 22, "open": [22, 36, 37, 65, 75, 77, 83, 93, 96, 169, 311, 321], "actual": [22, 23, 28, 42, 65, 72, 74, 76, 83, 103, 105, 162, 260, 309, 312, 320, 330], "vertexinputformat": 22, "edgeinputformat": 22, "vformat": [22, 171], "p2pvertexinputformat": 22, "eformat": [22, 171], "p2pedgeinputformat": 22, "gs_test_dir": [22, 33], "graphscope_sess": [22, 171], "31": [22, 23, 60, 88, 159, 160, 162, 342], "v_prop": [22, 99, 133], "vdata": 22, "e_prop": [22, 99, 133], "giraph_sssp": 22, "sourceid": 22, "faster": [22, 48, 174], "toward": [22, 322], "offici": [22, 54, 63, 65, 66, 75, 93], "pl": 22, "snapshot": [22, 72, 96, 318, 322], "writabl": 22, "degrad": [22, 96], "procedur": [22, 29, 42, 45, 48, 51, 55, 63, 64, 76, 110, 251], "except": [22, 51, 57, 75, 82, 85, 86, 88, 90, 95, 162, 169, 187, 204, 208, 219, 228, 238, 240, 289, 309, 316, 321, 336], "right": [22, 69, 71, 88, 167, 210, 219, 221, 242, 307], "inputformat": 22, "sparksess": 23, "gssparksess": 23, "experi": [23, 32, 37, 47, 60, 64, 79, 92, 94, 96, 97, 231], "proceed": [23, 27, 48, 231, 249], "side": [23, 37, 64, 74, 75, 100, 119, 159, 212, 321, 329], "venv": [23, 66, 90], "virtualenv": 23, "pyspark_venv": 23, "bin": [23, 31, 41, 42, 47, 48, 52, 65, 66, 75, 76, 89, 90, 183, 322, 330, 334, 340], "pyspark_venv_g": 23, "tar": [23, 29, 31, 322], "gz": [23, 31, 311, 322], "upload": [23, 63], "pyspark_driver_python": 23, "pyspark_python": 23, "archiv": [23, 89, 171, 340], "oss": [23, 29, 31, 42, 88, 99, 164, 171, 322, 332, 333, 342], "beij": [23, 29, 31, 80, 94, 158, 322, 333], "fixm": 23, "yuansi": 23, "env": [23, 57, 66, 90, 164], "var": [23, 33, 38, 57, 88, 169, 322, 330, 342], "gs_jar": 23, "l": [23, 29, 35, 52, 83, 94, 161, 229, 230, 232, 233, 234, 241, 242, 243, 245, 246, 247, 250, 257, 258, 259, 260, 262, 266, 267, 268, 269, 298, 301, 309, 330], "lib": [23, 31, 49, 65, 108, 322], "7077": 23, "master_url": 23, "conf": [23, 41, 42, 48, 65, 75, 99, 322, 340], "executor": [23, 35, 38, 63, 65, 89, 172, 330], "driver": [23, 27, 70, 75, 88, 136, 171, 322, 340], "2g": 23, "10g": [23, 334], "minregisteredresourcesratio": 23, "bfstest": 23, "placehold": [23, 69], "url": [23, 65, 171, 172, 322, 340], "rdd": 23, "pom": [23, 322], "xml": [23, 99, 322], "classifi": [23, 80, 82, 86, 90, 94, 169, 332], "conflict": [23, 66, 76, 82, 171, 299], "correctli": [23, 37, 57, 79, 174, 322], "resolv": [23, 28, 57, 88, 171, 323], "goal": [23, 51, 55, 64, 69, 80, 91, 94, 321], "reloc": 23, "shadedpattern": 23, "vineyardmemori": 23, "memorystr": 23, "builder": [23, 56, 64, 215, 322], "config": [23, 27, 28, 31, 53, 63, 65, 75, 134, 144, 156, 157, 170, 173, 313, 316, 318, 322, 323, 329, 340, 341], "socket": [23, 28, 30, 65, 99, 323], "bound": [23, 74, 76, 93, 135, 228, 316, 321, 324], "vineyardsock": 23, "filepath": 23, "sock": [23, 28, 65], "gssubmitjar": 23, "grapegraph": 23, "togsgraph": 23, "vd": 23, "classtag": 23, "grapegraphimpl": 23, "loadgraphtog": 23, "vfilepath": 23, "efilepath": 23, "numpartit": 23, "shell": [23, 35, 47, 48, 52, 63, 65, 70, 93, 100], "grow": [24, 51, 60, 79, 89, 228, 238, 245, 246, 247, 308, 321], "capac": [24, 33, 65, 309, 316], "indivis": 24, "succinctli": 24, "oppos": [24, 83], "orient": [24, 83, 96, 166, 322], "googl": [24, 35, 92, 334], "powergraph": [24, 96, 97], "wa": [24, 29, 30, 37, 52, 71, 74, 76, 91, 97, 163, 174, 228, 243, 256, 257, 258, 259, 308, 322], "2010": [24, 97, 100, 174, 234, 301, 306], "sequenc": [24, 69, 74, 76, 100, 171, 208, 228, 238, 239, 240, 241, 242, 243, 244, 260, 266, 267, 270, 303, 304, 309, 310, 323], "conceptu": [24, 71], "behavior": [24, 41, 74, 76, 88, 102, 316], "becom": [24, 52, 60, 71, 76, 83, 309, 321, 322], "inact": 24, "again": [24, 57, 88, 324, 329], "termin": [24, 36, 48, 68, 329], "halt": [24, 93, 102, 248], "individu": [24, 63, 65, 71, 86, 90], "messageiter": [24, 102], "mindist": 24, "issourc": 24, "inf": 24, "done": [24, 80, 83, 158, 169, 174, 271, 323], "getvalu": [24, 56], "mutablevalu": 24, "outedgeiter": 24, "getoutedgeiter": 24, "sendmessageto": 24, "votetohalt": 24, "drop": [24, 37, 57, 322], "dramat": 24, "face": [24, 31, 64, 76, 92, 294, 295], "power": [24, 52, 70, 76, 79, 93, 100, 174, 228, 238, 286, 309], "law": [24, 228, 238], "gather": [24, 316], "scatter": [24, 159], "accumul": [24, 83, 303], "workload": [27, 36, 60, 62, 64, 65, 73, 76, 79, 89, 91, 97, 322, 324, 325], "grpc": [27, 28, 31, 57, 99, 333, 335], "linux": [27, 30, 31, 36, 50, 63, 82, 97, 104, 339], "maco": [27, 30, 36, 57, 66, 333, 335, 336, 339], "skip": [27, 31, 35, 93, 104, 322], "recommend": [27, 30, 36, 37, 57, 63, 66, 68, 76, 80, 88, 89, 90, 94, 163], "minikub": [27, 30, 322], "instruct": [27, 29, 30, 33, 37, 52, 63, 65, 66, 67, 68, 75, 90, 93, 99, 112, 163], "platform": [27, 32, 37, 62, 63, 64, 82, 95, 96, 97, 104, 158, 300, 316], "desktop": [27, 322, 336], "server": [27, 29, 64, 65, 68, 72, 75, 77, 79, 83, 87, 89, 91, 93, 98, 162, 167, 168, 169, 321, 322, 334, 340], "kubectl": [27, 29, 30, 33, 38, 57, 63, 322, 330, 335], "kube": [27, 316], "apivers": [27, 33], "v1": [27, 33, 35, 57, 74, 76, 82, 85, 86, 90, 93, 157, 274, 287, 312, 335, 336, 341], "certif": 27, "ca": 27, "crt": 27, "last": [27, 30, 76, 163, 168, 171, 231, 303, 330], "16": [27, 31, 65, 76, 97, 157, 159, 160, 162, 164, 265, 288, 302, 341], "2023": [27, 71, 330], "44": [27, 97, 159, 160, 162, 302], "05": [27, 236, 249], "cst": 27, "sig": [27, 332], "28": [27, 76, 80, 94, 97, 159, 160, 162, 306], "cluster_info": 27, "172": [27, 97], "21": [27, 31, 60, 76, 97, 100, 159, 160, 162, 282, 322], "67": [27, 97, 100], "111": 27, "8443": 27, "context_info": 27, "namespac": [27, 28, 29, 30, 33, 38, 316], "profil": [27, 340], "encapsul": [27, 47, 48, 52, 79, 80, 157, 163, 316], "entranc": [27, 163], "tag": [27, 40, 74, 76, 97, 236, 316, 322, 334], "intranet": 27, "internet": [27, 29, 31, 68, 76, 92, 306, 308], "might": [27, 41, 44, 48, 57, 174, 266, 309, 325], "k8s_image_registri": [27, 33, 316], "k8s_image_repositori": [27, 316], "k8s_image_tag": [27, 33, 316], "fit": [27, 60, 63, 84, 85, 104], "increas": [27, 38, 41, 57, 60, 159, 207, 208, 216, 238, 240, 248, 266, 269, 271, 321], "cpu": [27, 57, 63, 87, 164, 316, 325, 335], "num_work": [27, 28, 33, 87, 156, 316, 340], "k8s_engine_cpu": [27, 156, 316], "32": [27, 74, 97, 159, 160, 162, 170, 174], "k8s_engine_mem": [27, 57, 156, 316, 335], "256gi": 27, "vineyard_shared_mem": [27, 57, 156, 316, 335], "k8s_client_config": [27, 316], "disk": [27, 57, 63, 89, 322], "test_data": [27, 82, 86, 90, 333, 336], "testingdata": [27, 30, 33, 333, 336], "k8s_volum": [27, 30, 33, 156, 316, 333, 336], "constructor": [27, 88, 209, 211, 212, 214, 216, 218, 219, 221, 223, 224, 227, 238, 240, 241, 243, 245, 246, 247, 249, 253, 254, 255, 261, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 304, 311], "vm": [27, 30, 99], "copi": [27, 29, 30, 63, 89, 91, 96, 117, 174, 181, 185, 187, 188, 246, 252, 307, 309, 312, 320, 321, 322, 323, 324], "hostpath": [27, 30, 33, 63, 316, 333, 336], "expandus": [27, 333, 336], "mountpath": [27, 30, 33, 316, 333, 336], "expect": [27, 34, 37, 57, 88, 104, 238, 240, 242, 312, 316], "monitor": [27, 29, 79], "wait": [27, 57, 316], "finish": [27, 56, 75, 85, 102, 159, 162], "remov": [27, 29, 53, 71, 74, 76, 100, 104, 164, 181, 187, 189, 235, 238, 240, 242, 284, 287, 303, 309, 322], "remain": [27, 51, 52, 69, 74, 88, 92, 158, 163, 243, 270], "statefulset": [27, 322], "svc": [27, 63], "left": [27, 36, 41, 69, 71, 100, 171, 174, 210, 242], "service_port": 28, "63800": 28, "launcher_typ": 28, "operator_launch": 28, "gae_endpoint": 28, "60001": 28, "instance_id": [28, 323], "0000": [28, 60, 76], "rpc_port": 28, "9600": 28, "sai": [28, 40], "configmap": 28, "mount": [28, 30, 33, 42, 57, 64, 88, 168, 316, 333, 335, 336], "ideal": [29, 37, 51, 96], "deploy_graphscope_on_self_managed_k8": 29, "chart": [29, 57, 63, 65, 76, 322, 333, 335], "minut": [29, 57, 64], "succe": 29, "past": [29, 64, 324], "noteport": 29, "node_ip": [29, 322], "ojsonpath": 29, "hostip": 29, "node_port": 29, "spec": [29, 33, 99, 169], "nodeport": [29, 316, 322, 336], "echo": [29, 31], "listen": [29, 65, 99], "statement": [29, 163, 322], "ident": [29, 101, 117, 171, 205, 206, 210, 281, 301, 303, 309], "reconnect": [29, 316], "disconnect": [29, 174, 250, 251, 266, 269, 316, 329], "sess2": 29, "comment": [29, 37, 60, 68, 69, 76, 88, 158, 309, 311, 312, 337, 342], "homepag": 29, "remot": [29, 36, 75, 87, 104, 172, 316, 340], "cater": [29, 89], "tgz": 29, "unzip": [29, 48, 50, 67, 68, 75, 340], "zxvf": 29, "bundl": [30, 316], "aliv": 30, "reserv": 30, "simplifi": [30, 47, 63, 89, 90, 91, 93, 95, 158, 163, 321], "etcd": [30, 57, 63, 316, 318, 333], "replica": [30, 63], "etcd_replica": 30, "greater": [30, 33, 69, 100, 159, 174, 228, 259, 316, 321], "ag": [30, 33, 43, 44, 48, 64, 72, 74, 76, 80, 94, 157, 158, 171, 315, 330, 340, 341], "33": [30, 51, 159, 160, 162, 299, 302], "vineyardd": [30, 33, 65], "vineyardctl": [30, 316], "v6d": [30, 31, 63, 88, 316], "blob": [30, 57, 332], "cmd": [30, 99, 316], "readm": [30, 104], "md": [30, 169], "notic": [30, 33, 63, 72, 76, 89, 163, 171, 302, 309, 316, 324], "charact": [30, 43, 300, 305, 311], "vineyard_deploy": 30, "restart": [30, 41, 47, 52, 53, 330], "etcd0": 30, "73m": 30, "5db59987f": 30, "vr2fg": 30, "beforehand": 30, "onto": 30, "stai": 30, "k8s_namespac": [30, 33, 156, 316], "k8s_vineyard_deploy": [30, 33, 156, 316], "reload": [30, 322], "vineyard_id": [30, 33, 171, 330], "new_sess": 30, "22731319746904674": 30, "objectid": [30, 33, 99, 171, 316, 321, 323], "softwar": [30, 33, 43, 63, 66, 74, 79, 89, 171, 323], "successfulli": [30, 65, 68, 80, 85, 228, 322], "folder": [31, 38, 42, 50, 53, 88, 321], "cento": [31, 32, 57, 66, 97, 335, 339], "82": [31, 97], "boost": [31, 79, 89, 99], "perl": 31, "v3": [31, 93, 97], "24": [31, 63, 76, 97, 159, 160, 162, 276, 294, 302], "openmpi": [31, 97], "gflag": 31, "glog": [31, 71], "arrow": [31, 56, 99, 111, 124, 171, 312], "74": [31, 97, 300], "openssl": [31, 57, 335], "zlib": 31, "protobuf": 31, "49": [31, 76, 97, 159, 160, 162], "13": [31, 35, 76, 97, 158, 159, 160, 162, 214, 255], "libclang": 31, "curl": [31, 75], "lo": [31, 75], "czf": 31, "mkdir": [31, 57, 169, 335], "workdir": 31, "xzf": 31, "yum": 31, "scl": 31, "rh": [31, 56], "y": [31, 32, 76, 87, 100, 255, 256, 260], "devtoolset": 31, "python38": 31, "opt": [31, 36, 41, 52, 64, 65, 81, 169], "bash": [31, 74, 330, 334], "euxo": 31, "pipefail": 31, "dir": [31, 322], "ld_library_path": 31, "lib64": 31, "py2": 31, "py3": [31, 334], "manylinux2010_x86_64": 31, "whl": [31, 164, 167], "x86_64": 31, "sh": [31, 35, 75, 164, 322, 339, 340], "licens": [31, 334], "dbuild_shared_lib": 31, "ON": 31, "dcmake_prefix_path": 31, "dcmake_install_prefix": 31, "boost_1_74_0": 31, "bootstrap": 31, "filesystem": [31, 158], "program_opt": 31, "regex": 31, "chrono": 31, "atom": [31, 322], "date_tim": 31, "b2": 31, "openssl_1_1_1h": 31, "fpic": 31, "cpp": 31, "darrow_comput": 31, "darrow_with_utf8proc": 31, "off": [31, 64, 89, 294, 322], "darrow_csv": 31, "darrow_filesystem": 31, "darrow_ipc": 31, "darrow_build_benchmark": 31, "darrow_build_exampl": 31, "darrow_build_integr": 31, "darrow_build_util": 31, "darrow_build_test": 31, "darrow_enable_timing_test": 31, "darrow_fuzz": 31, "darrow_jemalloc": 31, "darrow_build_shar": 31, "darrow_build_stat": 31, "mpi": [31, 99], "cxx": 31, "dlopen": 31, "nproc": 31, "dgrpc_instal": 31, "dgrpc_build_test": 31, "dgrpc_build_csharp_ext": 31, "dgrpc_build_grpc_csharp_plugin": 31, "dgrpc_build_grpc_node_plugin": 31, "dgrpc_build_grpc_objective_c_plugin": 31, "dgrpc_build_grpc_php_plugin": 31, "dgrpc_build_grpc_python_plugin": 31, "dgrpc_build_grpc_ruby_plugin": 31, "dgrpc_backwards_compatibility_mod": 31, "dgrpc_protobuf_provid": 31, "dgrpc_zlib_provid": 31, "dgrpc_ssl_provid": 31, "dopenssl_root_dir": 31, "dcmake_cxx_flag": 31, "fpermiss": 31, "dbuild_vineyard_test": 31, "dbuild_vineyard_python_bind": 31, "j4": 31, "dnetworkx": 31, "denable_java_sdk": 31, "dbuild_test": 31, "ubuntu": [32, 57, 63, 66, 164, 333, 335, 339], "04": [32, 57, 63, 66, 76, 97, 164, 333, 335, 339], "intel": [32, 66, 333, 335, 339], "appl": [32, 57, 66, 309, 333, 335, 339], "silicon": [32, 66, 333, 335], "jdk": [32, 63, 66, 78, 326, 332], "wheel": [32, 57, 227, 293, 335, 338], "manylinux2014": [32, 334], "abi": 32, "wish": [32, 37, 41, 48, 52], "nightli": [32, 57, 335], "clean": [32, 60, 66, 68, 90, 104, 167, 321], "tidi": 32, "quickli": [32, 36, 51, 79, 90, 93, 94, 96, 169, 316], "insid": [32, 38, 43, 57, 74, 76, 100, 108, 158, 170, 171, 284, 315, 316, 340], "apt": [32, 164], "ipython": 32, "tensorflow": [32, 79, 80, 82, 85, 86, 89, 90, 94, 95, 157, 158, 159, 162, 163, 165, 169, 336], "tool": [32, 35, 36, 42, 48, 51, 60, 63, 70, 77, 79, 81, 89, 256, 258, 318, 321, 322, 323, 339], "dep": [32, 35, 329, 333, 334], "fly": [32, 51, 90], "clang": [32, 35, 66, 334], "essenti": [32, 43, 44, 69, 74, 79, 93, 95], "arm": 32, "preliminari": 32, "yet": [32, 50, 67, 74, 101, 266, 269, 309, 315, 322], "calcul": [33, 64, 71, 74, 76, 100, 102, 160, 174, 228, 260], "period": [33, 322], "restor": [33, 171, 316], "persistentvolum": [33, 322], "dump": [33, 100, 136, 171], "cat": [33, 87, 322, 330], "eof": 33, "metadata": [33, 42, 43, 52, 53, 57, 99, 171, 309, 318, 322], "1gi": 33, "accessmod": 33, "readwriteonc": 33, "storageclassnam": 33, "importantli": 33, "lost": [33, 316], "persistentvolumeclaim": [33, 316, 322], "matchlabel": 33, "request": [33, 57, 88, 99, 128, 159, 167, 170, 172, 203, 309, 316, 335], "extern": [33, 37, 42, 83, 89, 316, 322], "ccc": 33, "sub_graph": [33, 72, 90, 336, 337], "haslabel": [33, 60, 66, 72, 76, 90, 340], "simple_g": [33, 90, 332, 336], "pr_result": 33, "tc_result": 33, "add_column": [33, 90, 99, 171, 332, 336, 337], "tc": [33, 90, 336], "997255889378630": 33, "997163552113975": 33, "store_graphs_to_pvc": 33, "graphid": [33, 316], "pvc_name": [33, 316], "schema": [33, 42, 43, 51, 53, 64, 65, 68, 70, 72, 76, 85, 86, 88, 100, 158, 159, 168, 171, 309, 318, 320, 321, 322, 323, 337, 340, 342], "oid_typ": [33, 88, 99, 100, 128, 150, 171, 316, 342], "ulong": 33, "lang": [33, 35, 43, 66, 68, 90, 172], "eid": [33, 56, 68, 171, 322], "restore_graphs_from_pvc": 33, "anymor": 33, "nativ": [34, 41, 64, 70, 89, 93, 95, 96], "behind": [34, 85, 321, 324, 330], "scene": [34, 64, 85, 166], "lower": [34, 64, 74, 76, 93, 228, 235, 248], "cost": [34, 64, 76, 89, 93, 174, 322], "ownership": 34, "cach": [34, 48, 80, 92, 96, 309], "layout": [34, 92, 322], "were": [34, 37, 76, 97, 260, 322], "outperform": [34, 79, 92, 94, 95, 96], "art": [34, 79, 92, 95, 97], "voderank": 34, "average_degree_assort": 34, "degree_assort": 34, "guidelin": [35, 37, 51, 52], "promot": 35, "readabl": [35, 47, 309], "qualiti": [35, 37, 94], "black": [35, 334], "enforc": 35, "rule": [35, 41, 52, 64, 76, 83, 92, 161, 167, 171, 208, 318], "cpplint": 35, "flake8": 35, "fmt": 35, "lint": [35, 37], "makefil": 35, "graphscope_clformat": 35, "graphscope_cpplint": 35, "dev": [35, 62, 333, 334], "pushd": 35, "isort": 35, "diff": 35, "popd": 35, "interactive_engin": [35, 36, 65, 75], "check_format": 35, "files_to_format": 35, "aosp": 35, "toolchain": [36, 81], "devcontain": 36, "json": [36, 63, 65, 316, 318, 322, 323], "setup": [36, 37, 57, 171, 316, 334], "visual": [36, 37, 51, 89], "studio": 36, "collabor": [36, 89, 321], "stabl": [36, 100, 171, 318, 322, 339], "haven": [36, 50, 76], "navig": [36, 321, 329], "icon": 36, "bottom": [36, 219], "corner": 36, "window": [36, 76, 339], "reopen": 36, "marketplac": 36, "prompt": [36, 47, 68, 75], "shift": [36, 69, 76, 174, 274], "ctrl": 36, "made": [36, 37, 41, 48, 63, 83, 97, 158, 161, 167, 174, 269, 321], "rebuild": 36, "subcommand": [36, 81], "assembli": [36, 65], "learning_engin": 36, "graphlearn": [36, 38, 80, 82, 85, 86, 90, 157, 158, 159, 163, 164, 169, 170, 173, 316, 330, 336, 341], "compos": [36, 38, 80, 83, 90, 92, 96], "alon": [36, 64, 72, 329], "circul": [36, 212], "edit": [36, 37, 68, 255, 292, 329], "entrypoint": [36, 329, 336], "plai": [36, 64, 78, 98, 168, 173, 326], "thank": [37, 60, 68, 89], "interest": [37, 76, 79, 92, 322], "focus": [37, 71, 76, 89, 95, 97, 163, 301, 322], "eager": [37, 100, 101, 150, 152, 171, 316], "contributor": [37, 302], "welcom": [37, 48], "engag": [37, 89, 90], "good": 37, "particip": [37, 41], "join": [37, 41, 69, 71, 76, 159, 169, 210, 213, 221, 228, 237, 238, 251, 253, 256, 257, 258, 259, 260, 268, 269, 309, 321], "ask": [37, 62], "question": [37, 62, 70, 76, 335], "ve": [37, 42, 48, 52, 63, 67, 75, 89], "hasn": [37, 76], "confirm": 37, "concis": [37, 71, 72, 93, 172], "descript": [37, 43, 52, 53, 64, 69, 71, 83, 88, 158, 161, 166, 167, 266, 274, 322], "relev": [37, 41, 42, 164, 203, 309, 320], "reproduc": [37, 309], "yourself": 37, "why": [37, 57, 76, 100], "saw": 37, "incomplet": 37, "inaccur": 37, "knowledg": [37, 60, 68, 80, 94, 165], "submiss": 37, "fact": [37, 64, 68, 71, 266, 269], "page": [37, 42, 48, 62, 91, 100, 103, 105, 219, 234, 298, 338], "button": [37, 68], "tbf": [37, 61, 97, 317, 328, 331], "isn": [37, 53, 72, 162], "someon": 37, "approach": [37, 51, 68, 72, 79, 80, 89, 91, 93, 94, 162, 238, 251, 306, 321], "spend": 37, "secret": [37, 88, 316, 333, 342], "accident": 37, "hook": 37, "titl": [37, 42, 76, 86, 90], "grammar": 37, "spell": 37, "500": [37, 228], "word": [37, 52, 76, 86, 90, 93, 94, 169, 171, 309], "42": [37, 76, 97, 159, 160, 162, 232, 234, 244, 302], "ticket": 37, "chines": 37, "everyon": 37, "beginn": [37, 93], "patch": 37, "rest": [37, 309, 322], "attain": 37, "brief": [37, 59], "descipt": 37, "valid": [37, 64, 85, 86, 94, 107, 157, 204, 228, 250, 256, 305, 316, 318], "typo": 37, "feat": 37, "inv": [37, 163, 169, 340], "refactor": 37, "gulp": 37, "broccoli": 37, "npm": [37, 322], "ci": 37, "perf": 37, "neither": 37, "nor": 37, "chore": 37, "routin": [37, 174, 309], "insight": [37, 60, 92, 94], "addtion": 37, "depoli": 37, "feedback": [37, 60], "discourag": 37, "rebas": 37, "workflow": [37, 60, 89, 94, 95, 99], "upstream": [37, 163], "leas": 37, "ping": [37, 332], "await": 37, "unfamiliar": 37, "acronym": 37, "glossari": [37, 55, 62, 302], "approv": 37, "date": [37, 69, 76, 321, 322], "todo": [37, 69, 71, 87, 167], "dongz": 37, "potenti": [37, 51, 80, 89, 321], "concern": [37, 89, 96, 321], "reach": [37, 57, 72, 76, 93, 163, 168, 171, 174, 251, 266, 269, 321], "action": [37, 48, 53], "realiti": [37, 163], "uncommon": 37, "infrastructur": 37, "vital": 37, "inspect": [37, 38, 88, 316, 322], "failur": [37, 96], "stream": [38, 57, 74, 75, 76, 80, 163, 168, 171], "stdout": 38, "log_level": [38, 41, 156], "permiss": [38, 44, 57, 108, 335], "consol": [38, 63, 65, 68, 77, 79, 88, 93, 172, 322, 338], "frontend": [38, 63, 65, 66, 67, 75, 322, 330], "event": [38, 228], "involvedobject": 38, "warn": [38, 309], "pinpoint": 38, "exec": [38, 322, 330], "diagnost": 38, "forward": [38, 80, 82, 83, 85, 86, 90, 94, 163, 336], "browser": [38, 76], "explain": [38, 76, 158, 316, 321, 340], "compris": [40, 42, 69, 72, 86, 89, 162], "busi": [40, 64, 76, 80, 88, 89, 90, 96], "e2": [40, 288], "coupl": [40, 91, 96, 289, 318], "straightforward": [41, 66, 90], "gs_interact": [41, 42, 47, 48, 52, 53], "tailor": 41, "align": [41, 42, 44, 48, 52, 64, 83, 93, 157, 160, 161, 260, 321], "engine_config": [41, 316], "unconfigur": 41, "glimps": 41, "what": [41, 52, 57, 63, 76, 77, 93, 168, 255, 309, 315, 321], "compute_engin": 41, "shard_num": 41, "planner": [41, 52], "is_on": 41, "rbo": [41, 64], "filtermatchrul": 41, "filterintojoinrul": 41, "notexisttoantijoinrul": 41, "query_timeout": 41, "20000": 41, "timeout": [41, 57, 65, 66], "millisecond": [41, 97], "hierarchi": [41, 43], "propertynam": [41, 322], "databas": [41, 42, 49, 54, 57, 64, 70, 71, 76, 89, 91, 93, 95, 97, 322, 332], "debug": [41, 57, 158, 163, 316, 322, 330], "default_graph": 41, "benefit": [41, 71, 75, 88, 92, 321], "throughput": [41, 51, 55, 64, 89, 95, 96, 322], "ison": 41, "cypher": [41, 45, 48, 52, 55, 63, 64, 65, 66, 68, 70, 71, 89, 90, 91, 95, 96, 172, 316], "claus": [41, 51, 54, 70, 71], "calcit": [41, 71], "notmatchtoantijoinrul": 41, "transform": [41, 47, 64, 71, 76, 99, 111, 124, 301, 309, 310, 314, 320], "anti": [41, 69, 71, 89, 93, 96], "movi": [42, 52, 91, 159], "interactive_hom": [42, 50], "destroi": [42, 48, 53], "csv": [42, 43, 60, 63, 68, 88, 171, 309, 312, 320, 322, 323, 336, 337, 342], "volum": [42, 48, 53, 57, 63, 71, 75, 232, 233, 234, 244, 253, 298, 316, 321], "crucial": [42, 44, 47, 89], "conclud": [42, 157], "reflect": [42, 74, 321, 329], "v0": [42, 97, 164, 312], "vertex_typ": [42, 44], "type_nam": [42, 43, 44], "property_nam": [42, 44, 76, 101, 102, 315], "property_typ": 42, "primitive_typ": [42, 44], "dt_signed_int64": [42, 44], "dt_signed_int32": [42, 44], "taglin": 42, "dt_string": [42, 44], "primary_kei": [42, 44, 322], "born": 42, "acted_in": 42, "vertex_type_pair_rel": [42, 44], "source_vertex": [42, 43, 44], "destination_vertex": [42, 43, 44], "many_to_mani": [42, 44], "review": [42, 89, 100, 174, 238, 256], "wrote": 42, "dt_unsigned_int32": [42, 44], "dt_unsigned_int64": [42, 44], "dt_bool": [42, 44], "comprehens": [42, 51, 52, 53, 89, 95, 97, 98], "administr": [42, 48, 286], "loading_config": [42, 43], "data_sourc": [42, 43], "s3": [42, 88, 171, 342], "hdf": [42, 63, 88, 136, 168, 171, 322, 332, 342], "import_opt": 42, "append": [42, 56, 76, 85, 86, 87, 90, 102, 157, 168, 169, 240, 303, 336, 341], "overwrit": [42, 53, 316, 322], "delimit": [42, 43, 63, 171, 311, 323, 337], "edge_map": [42, 43], "type_triplet": [42, 43], "column_map": [42, 43], "understand": [42, 43, 76, 83, 93, 157, 163, 171, 321], "consult": 42, "delv": 43, "deeper": 43, "thorough": 43, "examin": [43, 90], "modern_import_ful": 43, "showcas": 43, "dissect": 43, "header_row": [43, 63, 171, 323], "quot": 43, "quote_char": 43, "double_quot": 43, "escape_char": 43, "block_siz": 43, "4mb": 43, "person_knows_person": [43, 322], "source_vertex_map": 43, "destination_vertex_map": 43, "person_created_softwar": 43, "mandatori": [43, 44, 90, 158], "ye": [43, 60, 309], "intial": 43, "header": [43, 63, 171, 321, 322], "No": [43, 57, 74, 309], "escap": 43, "batch_siz": [43, 83, 85, 87, 157, 161, 162, 163, 166, 169, 325, 341], "triplet": [43, 72], "outlin": [43, 65, 69], "seamlessli": [43, 48, 60, 63, 70, 77, 79, 89, 95, 96], "encompass": [44, 67, 75, 86], "friendship": 44, "peopl": [44, 64, 68, 76, 309, 322], "since_d": 44, "explan": [44, 100, 161], "terminologi": [44, 69], "gs_interactive_imag": 44, "delin": 44, "property_data_typ": 44, "plan": [44, 51, 64, 69, 89, 91, 92, 93, 104, 322, 330], "character": [44, 161], "exclus": [44, 47, 69], "symbol": 44, "skill": 44, "profici": [44, 76], "one_to_on": 44, "one_to_mani": 44, "many_to_on": 44, "pertain": [44, 63], "dt_float": 44, "dt_doubl": 44, "dt_date32": 44, "albeit": 44, "previous": [44, 52, 76, 108, 245, 246, 247, 320, 321], "mention": [44, 76, 320, 321, 330], "component_typ": 44, "max_length": 44, "overflow": 44, "truncat": [44, 294, 295, 296, 301], "craft": [45, 51, 52], "intric": [47, 76], "inspir": [47, 104, 309], "neo4j": [47, 48, 49, 51, 52, 54, 62, 63, 65, 66, 67, 68, 69, 91, 96, 97, 172, 320], "empow": [47, 70, 77, 93], "skeleton": [47, 277, 280, 294, 295], "param_nam": [47, 51], "clariti": [47, 69], "mandat": 47, "hous": [47, 89, 283, 284], "personid": 47, "draft": 47, "query1": 47, "firstnam": [47, 76, 88, 337, 342], "lastnam": [47, 76, 88, 337, 342], "intrins": 47, "absenc": 47, "imper": [47, 74, 93], "subsequ": [47, 48, 52, 63, 64, 65, 75, 100, 158, 159], "1l": [47, 52], "conclus": [47, 76], "effortlessli": [47, 90], "streamlin": [47, 71], "depth": [48, 65, 69, 90, 157, 169, 174, 341], "adminstr": 48, "graph_data": 48, "gs_interactive_conf": 48, "breakdown": [48, 55], "regist": [48, 49, 51, 64, 71, 88, 99, 102, 131, 316], "meta": [48, 65, 80, 88, 99, 160, 161, 171, 320, 322], "7687": [48, 54, 65, 67, 68], "eras": [48, 53], "irrevers": [48, 53], "caution": 48, "establish": [48, 60, 322], "bolt": [48, 54, 65, 67, 68, 93], "connector": [48, 54, 67, 74, 76], "opencyph": [48, 91], "supported_cyph": [48, 51], "22": [48, 54, 76, 97, 159, 160, 162, 302], "localhost": [48, 54, 65, 67, 75, 88, 316, 342], "password": [48, 65, 322], "authent": [48, 65, 67, 95, 322], "peter": [48, 74], "35": [48, 74, 76, 97, 159, 160, 162, 169, 236, 286, 302], "term": [49, 80], "proc": [49, 261, 262, 266, 267, 308], "storp": 49, "sproc": 49, "stopro": 49, "storedproc": 49, "storeproc": 49, "subroutin": 49, "rdbm": [49, 68], "wikipedia": [49, 92, 100, 271, 275, 276, 277, 278, 280, 281, 282, 288, 289, 290, 291, 293, 294, 295, 296, 302], "mac": [50, 104, 334, 336], "gs_interactive_hom": 50, "flex": [51, 55], "concurr": [51, 55, 89, 159], "impress": [51, 55], "Its": [51, 55, 57, 91, 288, 321], "timefram": [51, 55], "emphas": [51, 55, 96], "stand": [51, 96, 161, 162, 321], "shoulder": 51, "pivot": 51, "pillar": 51, "qp": [51, 76, 95], "snb": [51, 76, 88, 337, 342], "180": 51, "87": [51, 97, 300], "op": [51, 101, 111, 113, 114, 115, 116, 118, 119, 121, 123, 124, 126, 127, 128, 129, 130, 131, 134, 135, 136, 139, 140, 141, 143, 144, 167, 309, 313, 316], "boast": 51, "highlight": [51, 69, 89, 93], "laid": 51, "triumph": 51, "ten": [51, 92, 96, 161], "thousand": 51, "swiftli": 51, "versatil": [51, 71, 95, 321], "expans": [51, 93, 94, 166, 340], "prowess": 51, "prime": [51, 253, 255], "gql": [51, 64, 89, 96], "scalabl": [51, 63, 75, 92, 93, 94, 95, 96, 306], "possess": 51, "larger": [51, 72, 76, 86, 256], "constraint": [51, 69, 76, 77, 93], "portion": [51, 76, 92, 93, 101, 171], "occurr": [51, 68, 93], "Not": [51, 71, 309, 322], "categor": [51, 83], "submit": [51, 54, 64, 67, 68, 75, 76, 90, 93, 158, 159, 172, 318, 322, 336], "admin": [51, 171, 322], "ddl": 51, "acid": [51, 95], "graph_nam": [52, 53, 65], "stored_procedure_1": 52, "flag": [52, 158, 159], "taken": [52, 309], "account": [52, 64, 93, 307, 340], "compile_onli": [52, 53], "procedure_nam": 52, "stored_procedur": [52, 53], "comma": [52, 158], "proc1": 52, "proc2": 52, "appear": [52, 57, 64, 76, 100, 214, 216, 218, 221, 223, 250, 251, 309, 335], "capit": [52, 69, 71], "aspect": [53, 64, 71, 76, 96], "entri": [53, 64, 74, 76, 83, 85, 173, 174, 221, 238, 240, 241, 266, 268, 269, 287, 329], "proc_nam": 53, "desc": [53, 74, 76], "input_fil": 53, "currenli": 54, "ok": [54, 99], "solid": [55, 277, 294, 295], "prerequisit": 55, "entiti": [55, 72, 76, 86, 90, 94, 158], "\u6807\u7b7e": 56, "\u8868\u793a\u67d0\u4e00\u7c7b\u9876\u70b9\u6216\u8005\u8fb9": 56, "\u5c5e\u6027": [56, 340, 342], "\u8868\u793a\u9876\u70b9\u6216\u8fb9\u6240\u5173\u8054\u7684\u6570\u636e": 56, "\u539f\u59cbid": 56, "oid": [56, 99, 101, 102], "\u539f\u59cb\u6570\u636e\u96c6\u4e2d\u7684id": 56, "\u4e0d\u540c\u6807\u7b7e\u7684\u9876\u70b9\u5141\u8bb8\u6709\u76f8\u540c\u7684oid": 56, "\u5b50\u56feid": 56, "fid": [56, 99, 102, 134, 318], "\u5b50\u56fe\u7684\u552f\u4e00\u7f16\u53f7": 56, "\u5206\u533a\u5668": 56, "\u80fd\u591f\u786e\u5b9a\u9876\u70b9oid\u5230\u5206\u533aid": 56, "\u7684\u6620\u5c04": 56, "\u5b50\u56fe": 56, "\u901a\u8fc7\u5207\u8fb9\u5f97\u5230\u7684\u5b50\u56fe": 56, "\u5b58\u50a8\u4e86\u9876\u70b9": 56, "\u8fb9": [56, 332], "\u9876\u70b9\u6570\u636e": 56, "\u8fb9\u6570\u636e\u7b49\u4fe1\u606f": 56, "\u5185\u90e8\u70b9": 56, "\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 56, "\u5916\u90e8\u70b9": 56, "\u4e0d\u5c5e\u4e8e\u672cfragment\u7684\u9876\u70b9": 56, "\u672c\u5730id": 56, "lid": [56, 99, 134], "\u53ea\u5728\u67d0\u4e2afragment\u5185\u90e8\u6709\u610f\u4e49": 56, "\u5168\u5c40id": 56, "gid": [56, 99, 134], "\u80fd\u591f\u8868\u793a\u4efb\u610f\u4e00\u4e2a\u9876\u70b9": 56, "\u88abfragment\u5171\u8bc6": 56, "\u7528\u4e8e\u5b58\u50a8gid": 56, "oid\u7684\u6620\u5c04\u5173\u7cfb": 56, "\u7684\u8282\u70b9": 56, "\u5b58\u5728\u4ee5\u4e0b\u7f16\u7801\u65b9\u5f0f": 56, "gid\u7f16\u7801": 56, "\u5176\u4e2d": [56, 332, 337], "\u548c": [56, 163, 332, 334, 335, 336, 337, 339, 340, 341, 342], "\u5171\u540c\u7ec4\u6210": 56, "\u67d0\u4e00\u7c7b\u9876\u70b9\u5728\u67d0\u4e2a": 56, "\u7684\u9876\u70b9": 56, "\u5e8f\u53f7": 56, "lid\u7f16\u7801": 56, "\u586b\u5145": 56, "\u603b\u662f": 56, "\u6309\u7167\u6267\u884c\u6d41\u7a0b\u7f16\u53f7": 56, "\u63cf\u8ff0\u4e86\u8f7d\u56fe\u7684\u4e3b\u8981\u903b\u8f91": 56, "\u5206\u4e3ahashpartitioner\u548csegmentedpartiton": 56, "\u521d\u59cb\u5316\u4ed6\u4eec\u9700\u8981\u7ed9\u51fafragment\u7684\u6570\u91cf": 56, "segmentedpartitioner\u8fd8\u9700\u7ed9\u51fa\u5168\u90e8\u7684oid": 56, "\u6bcf\u4e2a\u8fdb\u7a0b\u8bfb\u53d6\u4e00\u90e8\u5206\u70b9": 56, "\u8fb9\u6587\u4ef6": 56, "\u5f97\u5230\u591a\u4e2avertex": 56, "\u548cedg": 56, "etabl": 56, "\u5176\u4e2dvtable\u6309\u7167\u9876\u70b9\u6807\u7b7e": 56, "\u5206\u7ec4": 56, "etable\u5148\u6309\u7167\u8fb9\u6807\u7b7e": 56, "\u540c\u4e00\u4e2a\u8fb9\u6807\u7b7e\u4e0b\u9762\u53c8\u6309\u7167src\u548cdst\u7684\u9876\u70b9\u6807\u7b7e\u5206\u7ec4": 56, "\u539f\u59cb\u7684\u9876\u70b9\u8868": 56, "\u8fb9\u8868": 56, "\u6bcf\u4e2a\u8fdb\u7a0b\u6301\u6709\u90e8\u5206\u7684\u6570\u636e": 56, "partial_v_t": 56, "partial_e_t": 56, "num": [56, 65, 74, 75, 76, 170, 321], "table\u5305\u542boid": 56, "table\u5305\u62ecsrc\u548cdst\u7684oid": 56, "\u8bbf\u95eevtable\u7684oid\u5217": 56, "\u6839\u636eoid\u67e5\u8be2partit": 56, "\u5c06\u8868\u4e2d\u7684\u8bb0\u5f55\u5206\u53d1\u7ed9\u9876\u70b9\u7684\u62e5\u6709\u8005": 56, "\u4eceshuffle\u540e\u7684vtable\u53d6\u51faoid\u6267\u884cal": 56, "gather\u64cd\u4f5c": 56, "\u4f7f\u5f97\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u80fd\u591f\u83b7\u53d6\u7684\u6240\u6709oid": 56, "\u6839\u636efrag\u6570\u91cf": 56, "label\u6570\u91cf\u548c\u5168\u90e8oid": 56, "\u6bcf\u4e2a\u8fdb\u7a0b\u6784\u5efavertex": 56, "fid_t": [56, 99], "fnum_": 56, "label_id_t": [56, 99], "label_num_": 56, "hashmapbuild": 56, "cur_gid": 56, "id_parser_": 56, "generateid": 56, "\u8d77\u59cbgid": 56, "vnum": 56, "length": [56, 60, 69, 74, 76, 88, 93, 100, 161, 174, 213, 215, 220, 242, 263, 267, 273, 295, 304, 309, 342], "\u904d\u5386\u5168\u90e8\u5185\u90e8\u70b9": 56, "\u751f\u6210gid": 56, "emplac": 56, "getview": 56, "\u6309\u7167elabel\u904d\u5386\u6bcf\u4e00\u5f20edg": 56, "\u83b7\u53d6\u5230src\u548cdst\u7684label": 56, "\u8bbf\u95ee\u6bcf\u4e2asrc\u7684oid": 56, "\u6839\u636epartitioner\u83b7\u53d6fid": 56, "\u6839\u636efid": 56, "id\u548coid\u67e5\u8be2gid": 56, "\u751f\u6210gid\u6570\u7ec4": 56, "\u5904\u7406dst\u7684\u903b\u8f91\u540c\u7406": 56, "\u5f97\u5230src\u548cdst\u4e24\u4e2agid\u6570\u7ec4\u540e": 56, "\u66ff\u6362\u6389\u539fetable\u7684oid\u6570\u7ec4": 56, "\u5bf9etable\u6267\u884cshuffl": 56, "\u5c06\u76f8\u5e94\u7684\u884c\u4f20\u8f93\u7ed9\u6b63\u786e\u7684\u8fdb\u7a0b": 56, "\u5c06shuffle\u8fc7\u7684vtable\u548cetable\u9001\u7ed9basicarrowfragmentbuilder\u6784\u5efacsr": 56, "\u5904\u7406\u9876\u70b9": 56, "\u521d\u59cb\u5316id": 56, "parser": [56, 64], "\u521d\u59cb\u5316ivnum": 56, "ovnum\u548ctvnum\u6570\u7ec4": 56, "\u6309\u7167vertex": 56, "label\u5206\u7ec4": 56, "\u904d\u5386\u6bcf\u4e00\u79cd\u9876\u70b9": 56, "\u5411vertex": 56, "map\u67e5\u8be2\u672cfragment\u7684\u5185\u90e8\u70b9\u6570\u91cf": 56, "\u5e76\u8bbe\u7f6e\u5bf9\u5e94\u7684ivnum": 56, "\u5c06vertex": 56, "table\u5408\u5e76\u6210\u4e00\u4e2achunk\u4fbf\u4e8e\u540e\u7eed\u8bbf\u95ee": 56, "vid_parser_": 56, "vertex_label_num_": 56, "resiz": 56, "ivnums_": 56, "ovnums_": 56, "tvnums_": 56, "combinechunk": 56, "default_memory_pool": 56, "vm_ptr_": 56, "getinnervertexs": [56, 99], "fid_": 56, "\u5904\u7406\u8fb9\u5305\u62ec\u4ee5\u4e0b5\u4e2a\u6b65\u9aa4": 56, "\u904d\u5386\u6bcf\u4e00\u79cd\u8fb9": 56, "\u901a\u8fc7src": 56, "gid\u5217\u548cdst": 56, "gid\u5217\u67e5\u8be2\u51fa\u672cfragment\u6240\u6709\u7684\u5916\u90e8\u70b9": 56, "\u5e76\u6309\u7167vertex": 56, "edge_t": [56, 158, 169], "table\u5408\u5e76\u6210\u4e00\u4e2achunk": 56, "\u627e\u51fa\u672cfragment\u5168\u90e8\u5916\u90e8\u70b9\u7684gid": 56, "collect_outer_vertic": 56, "dynamic_pointer_cast": [56, 323], "converttoarrowtyp": [56, 99], "arraytyp": [56, 99], "chunk": [56, 144], "\u6839\u636e\u5916\u90e8\u70b9\u7684gid": 56, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efagid\u5230lid\u7684\u6620\u5c04\u4e0e\u53bb\u91cd\u7684gid\u6570\u7ec4": 56, "\u5916\u90e8\u70b9\u7684lid\u7531label": 56, "id\u548c\u9876\u70b9\u5e8f\u53f7\u7ec4\u6210": 56, "\u9876\u70b9\u5e8f\u53f7\u4eceivnum\u5f00\u59cb\u8ba1\u6570": 56, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u586b\u5145ovnum\u548ctvnum": 56, "ovg2l_maps_": 56, "ovgid_lists_": 56, "cur_list": 56, "collected_ovgids_": 56, "\u6392\u5e8fgid": 56, "cur_map": 56, "buildertyp": 56, "vec_build": 56, "\u751f\u6210\u5916\u90e8\u70b9\u7684lid": 56, "\u5176\u4e2dfid\u4e3a0": 56, "offset\u4eceivnum\u5f00\u59cb\u7f16\u53f7": 56, "cur_id": 56, "\u5904\u7406\u7b2c\u4e00\u4e2a\u5143\u7d20": 56, "cur_list_length": 56, "\u627e\u5230\u4e0d\u91cd\u590d\u7684\u4e24\u4e2agid": 56, "\u6839\u636e\u4e0a\u4e00\u6b65\u6784\u6210\u7684gid\u5230lid\u7684\u6620\u5c04": 56, "\u5c06src\u548cdst\u7684gid\u90fd\u8f6c\u6362\u6210lid": 56, "\u5220\u9664edg": 56, "table\u7684src\u5217\u548cdst\u5217": 56, "gid\u5230lid\u8f6c\u6362\u51fd\u6570": 56, "generate_local_id_list": 56, "gid_list": 56, "lid_list": 56, "vec": 56, "getfid": 56, "\u751f\u6210\u5185\u90e8\u70b9lid": 56, "getlabelid": 56, "getoffset": 56, "\u67e5\u8be2g2l": 56, "\u901a\u8fc7gid\u627e\u5230\u5916\u90e8\u70b9lid": 56, "\u6839\u636esrc\u548cdst\u5217\u7684gid\u751f\u6210lid": 56, "edge_src_": 56, "edge_dst_": 56, "table\u7684src\u5217\u548cgid\u5217": 56, "\u53ea\u4fdd\u7559\u5c5e\u6027": 56, "tmp_table0": 56, "removecolumn": 56, "\u6784\u5efacsr": 56, "\u5bf9\u4e8e\u6709\u5411\u56fe": 56, "\u6784\u5efa\u51fa\u8fb9\u548c\u5165\u8fb9\u4e24\u4e2acsr": 56, "\u9996\u5148\u6784\u5efa\u51fa\u8fb9csr": 56, "\u7edf\u8ba1\u6bcf\u79cd\u6e90\u9876\u70b9\u7684\u51fa\u5ea6": 56, "\u6784\u5efarow": 56, "offset\u6570\u7ec4": 56, "\u8bbf\u95ee\u6bcf\u6761\u8fb9": 56, "\u4f7f\u7528row": 56, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9nbr\u7684\u5730\u5740": 56, "\u586b\u5145dst": 56, "lid\u548ceid\u5230nbr": 56, "\u6309\u7167\u76ee\u7684\u9876\u70b9\u7684lid": 56, "\u5c06\u6bcf\u4e00\u4e2a\u6e90\u9876\u70b9\u7684\u76ee\u7684\u9876\u70b9\u6392\u5e8f": 56, "generate_directed_csr": 56, "vid_array_t": [56, 99], "src_list": 56, "dst_list": 56, "fixedsizebinaryarrai": 56, "int64arrai": 56, "edge_offset": 56, "actual_edge_num": 56, "v_label": [56, 99, 318], "edge_num": [56, 134, 336, 340], "src_list_ptr": 56, "raw_valu": 56, "dst_list_ptr": 56, "\u8ba1\u7b97\u6e90\u9876\u70b9\u7684\u5ea6": 56, "\u4e3a\u6bcf\u4e00\u79cd\u9876\u70b9\u6784\u5efarow": 56, "tvnum": 56, "offset_vec": 56, "degree_vec": 56, "int64build": 56, "podarraybuild": 56, "nbr_unit_t": [56, 99], "edge_build": 56, "v_offset": 56, "\u83b7\u53d6\u76ee\u7684\u9876\u70b9\u6307\u9488": 56, "ptr": 56, "mutablepoint": 56, "\u586b\u5145\u76ee\u7684\u9876\u70b9lid": 56, "\u5176\u4e2deid\u7528\u4e8e\u4e4b\u540e\u83b7\u53d6\u8fb9\u4e0a\u7684\u5c5e\u6027": 56, "vid": [56, 99, 171], "eid_t": [56, 99], "\u66f4\u65b0offset": 56, "\u6307\u5411\u6e90\u9876\u70b9\u7684\u4e0b\u4e00\u6761\u51fa\u8fb9": 56, "\u5bf9\u4e34\u63a5\u70b9\u6309\u7167lid\u6392\u5e8f": 56, "offsets_ptr": 56, "lh": 56, "\u6784\u5efa\u5165\u8fb9csr\u548c\u51fa\u8fb9\u540c\u7406": 56, "\u5bf9\u4e8e\u65e0\u5411\u56fe": 56, "\u51fa\u8fb9\u548c\u5165\u8fb9\u5171\u7528\u4e00\u4e2acsr": 56, "\u903b\u8f91\u548c\u6709\u5411\u56fe\u7c7b\u4f3c": 56, "\u4f46\u662f\u8981\u540c\u65f6\u7edf\u8ba1\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9\u7684\u5ea6\u6765\u6784\u5efarow": 56, "offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u6e90\u9876\u70b9\u7684nbr\u586b\u5145\u5165\u8fb9\u7684src": 56, "lid\u548ceid": 56, "\u540c\u65f6\u8fd8\u8981\u4f7f\u7528offset\u6570\u7ec4\u5b9a\u4f4d\u5230\u76ee\u7684\u9876\u70b9\u7684nbr\u586b\u5145dst": 56, "\u5c01\u88c5": 56, "seal": [56, 79, 94], "\u51c6\u5907\u597d\u9876\u70b9\u6570\u91cf": 56, "ovgid\u548cg2l_map\u540e": 56, "\u5c06\u4ed6\u4eec\u5c01\u88c5\u6210\u5404\u79cdvineyardobject": 56, "\u6839\u636emetadata\u4ecevineyard\u67e5\u8be2\u548c\u6784\u5efa\u4ee5\u4e0b\u6570\u636e\u7ed3\u6784\u4f5c\u4e3aarrowfragment\u7684\u6210\u5458": 56, "\u4e5f\u5c31\u662f\u8bf4": [56, 333], "\u4ee5\u4e0b\u6570\u636e\u90fd\u662f\u5b58\u50a8\u5728vineyard\u4e2d\u7684": 56, "\u5f53\u524dfragment": 56, "fragment\u603b\u6570": 56, "directed_": 56, "\u662f\u5426\u4e3a\u6709\u5411\u56fe": 56, "\u9876\u70b9\u79cd\u7c7b\u6570\u91cf": 56, "edge_label_num_": 56, "\u8fb9\u79cd\u7c7b\u6570\u91cf": 56, "propertygraphschema": 56, "schema_": 56, "shcema": 56, "\u5185\u90e8\u548c\u5916\u90e8\u70b9\u603b\u6570": 56, "\u9876\u70b9\u5c5e\u6027\u8868": 56, "\u4e0d\u5305\u542bid\u5217": 56, "\u5916\u90e8\u70b9gid": 56, "gid\u5230lid\u6620\u5c04": 56, "\u8fb9\u5c5e\u6027": 56, "csr\u7ed3\u6784\u7684column": 56, "\u5bf9\u4e8e\u65e0\u5411\u56fe\u53ea\u6709oe_lists_\u88ab\u4f7f\u7528": 56, "csr\u7ed3\u6784\u7684row": 56, "vertex_map_t": [56, 99], "\u5269\u4e0b\u7684\u6210\u5458\u5c06\u6839\u636e\u4ee5\u4e0a\u4fe1\u606f\u6765\u6784\u5efa": 56, "edge_tables_columns_": 56, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u5c5e\u6027\u5217\u5730\u5740": 56, "flatten_edge_tables_columns_": 56, "\u540c\u4e0a": 56, "vertex_tables_columns_": 56, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u5c5e\u6027\u5217\u5730\u5740": 56, "ie_ptr_lists_": 56, "oe_ptr_lists_": 56, "\u6bcf\u4e00\u79cd\u9876\u70b9\u7684\u6bcf\u4e00\u79cd\u5165": 56, "\u51fa\u8fb9\u7684\u8d77\u59cb\u5730\u5740": 56, "\u4e5f\u5c31\u662fcolumn": 56, "index\u7684\u8d77\u59cb\u5730\u5740": 56, "ie_offsets_ptr_lists_": 56, "oe_offsets_ptr_lists_": 56, "\u51fa\u8fb9\u7684row": 56, "offset\u8d77\u59cb\u5730\u5740": 56, "offset\u7684\u8d77\u59cb\u5730\u5740": 56, "\u4ee5\u4e0b\u662f\u6bcf\u4e00\u79cd\u9876\u70b9": 56, "\u6bcf\u4e00\u79cd\u8fb9\u7684\u6e90\u9876\u70b9fid": 56, "\u76ee\u7684\u9876\u70b9fid": 56, "\u6e90\u9876\u70b9\u548c\u76ee\u7684\u9876\u70b9fid\u6784\u6210\u7684csr\u7ed3\u6784": 56, "idst_": 56, "odst_": 56, "iodst_": 56, "idoffset_": 56, "odoffset_": 56, "iodoffset_": 56, "\u4ee5\u4e0b\u5185\u5bb9\u63cf\u8ff0\u4e86\u8bbf\u95ee\u9876\u70b9": 56, "\u9876\u70b9\u6570\u636e\u548c\u8fb9\u6570\u636e\u7684api\u548c\u5b9e\u73b0": 56, "\u5185\u90e8\u70b9\u8303\u56f4\u7531\u8d77\u59cblid\u548c\u7ec8\u6b62lid\u6784\u6210": 56, "lid\u7684\u7f16\u7801\u5305\u542b\u4e86\u9876\u70b9label": 56, "id\u548c\u9876\u70b9\u5e8f\u53f7": 56, "\u5185\u90e8\u70b9\u7684\u9876\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 56, "ivnum": 56, "\u5916\u90e8\u70b9\u5e8f\u53f7\u8303\u56f4\u4e3a": 56, "\u5168\u90e8\u9876\u70b9\u5e8f\u53f7\u4e3a": 56, "vertex_range_t": [56, 99], "label_id": [56, 101, 102, 134], "\u751f\u6210lid\u7684\u8d77\u59cb\u548c\u7ed3\u675f\u8303\u56f4": 56, "\u7ed3\u675f\u8303\u56f4\u662f\u5f00\u533a\u95f4": 56, "\u6839\u636e\u9876\u70b9lid\u83b7\u53d6\u9876\u70b9\u7c7b\u578b": 56, "\u5c5e\u6027id": 56, "\u5217\u53f7": 56, "\u83b7\u53d6\u5230\u5217\u6307\u9488": 56, "\u7136\u540e\u4ecelid\u83b7\u53d6\u5230\u9876\u70b9\u5e8f\u53f7": 56, "\u884c\u53f7": 56, "\u5373\u53ef\u8bbf\u95ee\u5230\u9876\u70b9\u7684\u67d0\u4e2a\u5c5e\u6027": 56, "getdata": [56, 99], "prop_id_t": [56, 99], "prop_id": 56, "property_graph_util": [56, 99], "valuegett": 56, "\u8bbf\u95ee\u51fa\u8fb9\u9700\u8981\u7ed9\u51fa\u6e90\u9876\u70b9lid\u548c\u67d0\u4e00\u79cd\u8fb9\u7684\u7c7b\u578b": 56, "\u800c\u6e90\u9876\u70b9\u7684\u7c7b\u578b\u5df2\u7ecf\u88ablid\u7f16\u7801\u6240\u5305\u542b": 56, "\u6240\u4ee5\u4e0d\u7528\u7ed9\u51fa": 56, "adj_list_t": [56, 99], "e_label": [56, 99], "\u83b7\u53d6\u6e90\u9876\u70b9lid": 56, "\u83b7\u53d6\u6e90\u9876\u70b9\u7c7b\u578b": 56, "\u83b7\u53d6\u6e90\u9876\u70b9\u5e8f\u53f7": 56, "offset_arrai": 56, "\u8bbf\u95eerow": 56, "oe": 56, "\u83b7\u53d6\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 56, "\u751f\u6210adjlist\u5bf9\u8c61": 56, "\u5206\u522b\u4e3a\u51fa\u8fb9\u8d77\u59cb\u5730\u5740": 56, "\u7ed3\u675f\u5730\u5740": 56, "\u8fb9\u5c5e\u6027\u5217\u5730\u5740": 56, "\u548c\u51fa\u8fb9\u540c\u7406": 56, "\u53ea\u9700\u8981\u628aoe\u76f8\u5173\u53d8\u91cf\u540d\u6362\u6210ie\u5373\u53ef": 56, "ie": 56, "\u56e0\u4e3a\u5728adjlist\u4e2d\u5df2\u7ecf\u5305\u542b\u4e86\u51fa\u8fb9\u5c5e\u6027\u8868\u7684\u8d77\u59cb\u5730\u5740": 56, "\u6bcf\u6761\u51fa\u8fb9\u8fd8\u5305\u542b\u4e86\u8fb9id": 56, "\u5bf9\u5e94\u5230\u884c\u53f7": 56, "\u56e0\u6b64\u518d\u7ed9\u51fa\u5c5e\u6027\u7684\u5217\u53f7\u5c31\u80fd\u591f\u53bb\u5f97\u5230\u5177\u4f53\u7684\u6570\u636e": 56, "\u4f8b\u5982": [56, 332, 336, 340, 342], "\u83b7\u53d6edg": 56, "struct": [56, 99, 232, 265], "\u83b7\u53d6\u5c5e\u6027\u5217\u7684\u5730\u5740": 56, "\u548ceid\u5c31\u80fd\u591f\u83b7\u53d6\u5230\u5177\u4f53\u7684\u5c5e\u6027": 56, "edata_arrays_": 56, "nbr_": 56, "post": [57, 76, 88, 163, 228, 342], "mininum": 57, "8g": 57, "18": [57, 66, 76, 97, 159, 160, 162, 174, 232, 281, 286, 290, 292, 295, 301, 332, 335, 339], "depoly": 57, "enssenti": 57, "silent": [57, 309, 330], "helm": [57, 62, 63, 322, 333, 335], "did": [57, 169], "role": [57, 64, 78, 91, 159, 168, 174, 260, 298, 306, 322, 326, 330, 335], "rolebind": [57, 335], "uninstal": [57, 63, 335], "recycl": 57, "alloc": [57, 81, 85], "seem": [57, 76], "stuck": 57, "consumpt": 57, "poor": [57, 165], "acquir": [57, 67, 75], "mostli": [57, 65, 135], "visibl": [57, 102], "engnin": 57, "cloud": [57, 95, 96, 322], "k8s_vineyard_mem": [57, 156, 316, 335], "shape": [57, 82, 83, 86, 90, 99, 101, 160, 161, 162, 163, 166, 169, 173, 231, 336], "forth": 57, "smaller": [57, 76, 97, 172, 174, 230, 231, 235], "shared_mem": [57, 335], "grpcio": [57, 335], "grpc_python_build_system_openssl": [57, 335], "scipi": [57, 256, 257, 258, 259, 309, 312, 335], "anaconda": [57, 335], "workaround": 57, "openbla": 57, "tri": [57, 60, 85, 93, 238, 244], "pkgconfig": 57, "cmake_prefix_path": 57, "brew": 57, "deni": [57, 108, 335], "pv": [57, 63, 316, 322, 335], "nf": [57, 168, 335], "kafka": [57, 318, 335], "zookeep": [57, 335], "crashloopbackoff": [57, 335], "bitnami": [57, 335], "755": 57, "1001": [57, 322], "brutal": 57, "chmod": [57, 75, 335], "777": [57, 97, 335], "eleg": [57, 60], "grant": [57, 306], "rais": [57, 64, 100, 108, 110, 144, 156, 163, 171, 172, 174, 180, 189, 193, 194, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 248, 250, 253, 254, 255, 266, 269, 301, 304, 305, 309, 312, 316], "timeout_second": [57, 156, 316, 335], "600": [57, 97, 316, 335], "enterpris": 57, "proxi": [57, 335], "properli": [57, 72], "wrong": 57, "resolut": [57, 322], "occup": 57, "hostnam": [57, 335], "no_proxi": [57, 335], "suffix": 57, "flush": 57, "forcibli": 57, "contact": 57, "slack": [57, 335], "dingtalk": [57, 335], "happi": 57, "90": [59, 97], "traffic": 60, "web": [60, 100, 174, 242, 256, 261, 302], "ever": [60, 83], "amount": [60, 75, 81, 94, 161, 163, 165], "hidden": [60, 91, 92, 94, 157, 341], "attract": 60, "attent": [60, 94, 163], "compuatit": 60, "difficult": [60, 158, 168, 322], "obstacl": 60, "attempt": [60, 63, 92, 93, 96, 309], "curv": [60, 92], "hard": [60, 74, 84, 85, 270, 321], "complic": [60, 64, 76, 101], "sql": [60, 64, 71, 76, 77], "deep": [60, 83, 89, 157, 162, 163, 165, 185, 188, 297, 309], "gnn": [60, 62, 80, 82, 83, 86, 89, 90, 95, 96, 157, 161, 162, 163, 165, 166, 316, 338, 341], "train": [60, 68, 80, 82, 83, 84, 89, 90, 95, 96, 98, 159, 162, 163, 165, 166, 169, 173, 316, 336, 341], "fist": 60, "interpret": [60, 89, 174], "mount_dataset": [60, 88], "ran": [60, 85], "p2p_network": 60, "embed": [60, 80, 86, 90, 94, 158, 165], "inter": [60, 170, 228, 231], "wherea": [60, 228, 321], "numpi": [60, 76, 80, 99, 101, 116, 127, 136, 160, 161, 163, 164, 165, 166, 169, 171, 173, 174, 301, 309, 312, 338], "datafram": [60, 88, 101, 115, 126, 136, 139, 171, 309, 332, 342], "head": [60, 63, 68, 74, 76], "creationd": [60, 76, 88, 337, 342], "locationip": [60, 88, 342], "browserus": [60, 76, 88, 342], "618475290625": 60, "2011": [60, 76, 242], "08": [60, 97, 174], "17t14": 60, "26": [60, 76, 97, 159, 160, 162, 258], "59": [60, 97], "961": 60, "210": [60, 97, 305], "17": [60, 76, 97, 159, 160, 162, 332], "48": [60, 97, 159, 160, 162, 261, 262, 308], "chrome": [60, 76], "618475290626": 60, "17t11": 60, "570": 60, "comment_replyof_com": 60, "274877907301": 60, "274877907299": 60, "274877907302": 60, "pd": [60, 68, 88, 342], "df_v": [60, 88, 332, 342], "read_csv": [60, 68, 88, 342], "sep": [60, 68, 88, 171, 342], "df_e": [60, 88, 342], "graphcomput": [62, 340], "gl": [62, 83, 95, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170], "neural": [62, 80, 89, 90, 95, 96, 98, 157, 158, 161, 163, 165, 169], "posit": [62, 76, 94, 95, 157, 163, 174, 219, 238, 240, 241, 243, 244, 248, 256, 257, 258, 259, 260, 304, 307, 321, 324], "frequent": [62, 89, 92, 322], "groot": [62, 72, 89, 96], "graphar": 62, "gart": 62, "gap": 62, "oltp": [62, 89, 91], "style": [62, 79, 89, 314], "too": [63, 76, 96, 159, 228, 309], "wonder": 63, "throughout": [63, 64, 74], "smoothli": 63, "easiest": 63, "websit": [63, 92, 228], "untar": 63, "cp": [63, 65, 306, 321], "tree": [63, 91, 209, 211, 219, 239, 245, 247, 257, 258, 259, 272, 273, 310, 316, 342], "claim": [63, 291, 321, 322], "pvc": [63, 316, 322], "your_release_nam": 63, "gremlinport": 63, "grep": 63, "awk": 63, "cypherport": 63, "littl": [63, 74, 76], "v6d_modern_load": [63, 65], "data_path": [63, 323], "store_data_path": [63, 65], "src_label": [63, 88, 171, 312, 316, 322, 323, 336, 337], "dst_label": [63, 88, 171, 312, 316, 322, 323, 336, 337], "thing": [63, 163, 329], "key1": 63, "value1": [63, 88, 342], "key2": 63, "value2": 63, "token": [63, 74], "column_typ": 63, "infer": [63, 88, 94, 95], "filed1": 63, "filed2": 63, "unexpect": 63, "troubl": 63, "correspondingli": [63, 83, 266, 269], "v6d_ldbc_loader": 63, "physic": [63, 64, 89, 100, 174, 232, 233, 234, 256, 320], "replicacount": [63, 322], "8182": [63, 65, 75, 322], "pegasusworkernum": 63, "obvious": 63, "x": [63, 75, 76, 87, 97, 100, 157, 163, 169, 174, 212, 245, 253, 255, 256, 260, 284, 341], "pegasustimeout": 63, "durat": [63, 74], "000": [63, 76, 97], "inher": 64, "massiv": [64, 93], "manufactur": 64, "upcom": 64, "sticki": 64, "shelv": 64, "intellig": [64, 76, 89, 96, 266, 269], "hybrid": [64, 321, 322], "dedupl": 64, "higher": [64, 95, 174, 184, 248, 322], "latenc": [64, 75, 89, 95, 96], "hope": [64, 76, 322], "trade": [64, 89, 322], "inevit": 64, "realist": [64, 301], "lengthi": 64, "ir": [64, 65, 89, 91], "verif": [64, 89], "80": [64, 97, 288], "decoupl": [64, 89, 96], "upper": [64, 74, 76, 80, 93, 228, 321], "briefli": [64, 94], "algebra": [64, 298], "edgeexpans": 64, "pathexpans": 64, "legal": 64, "predic": [64, 76], "arithmet": [64, 74, 76], "firstli": [64, 72, 76, 88, 96], "down": [64, 71, 226], "cbo": 64, "statist": [64, 71, 76, 160], "glogu": 64, "shuffl": [64, 74, 87, 163, 169, 173], "plu": [64, 76, 212, 284], "unaccept": 64, "come": [64, 68, 76, 79, 88, 90, 91, 94, 95, 97, 160, 275, 312], "kubenet": 65, "end2end": 65, "sf": [65, 76], "v6d_object_id": 65, "unsur": [65, 68], "assist": [65, 70, 92], "vineyard_ipc_socket": [65, 323], "gie_test_hom": 65, "rpc": [65, 99, 170, 316, 322], "1234": 65, "127": [65, 97, 322], "11234": 65, "pegasu": [65, 89], "gaia_executor": 65, "log4r": [65, 322], "yml": [65, 320, 322], "240000": 65, "1024": 65, "usernam": [65, 322], "auth": [65, 67, 174, 322], "djna": 65, "kill": [65, 316], "pkill": 65, "gcc": [66, 97, 339], "64": [66, 75, 83, 162, 163, 240, 340], "chip": [66, 339], "hereaft": [66, 76, 90], "q1": [66, 68, 76, 90], "q2": [66, 76, 90], "q3": [66, 76, 90], "someth": [66, 309], "453": 66, "xxx": [66, 68, 167, 316, 332], "pppp": 66, "startup": 66, "600000": 66, "entr": 66, "ee": 66, "syntact": [66, 72, 77, 93], "sugar": [66, 72, 77, 93], "protocol": [67, 70, 88, 96, 316], "graphdatabas": 67, "routingcontrol": [67, 90], "uri": [67, 88, 342], "print_top_10": 67, "execute_queri": 67, "routing_": [67, 90], "simpler": [67, 75, 76, 309], "nowadai": 68, "sole": [68, 69], "shortcom": [68, 72, 76], "gpt": 68, "materi": 68, "year": [68, 76, 90, 92, 336], "mislead": 68, "hot": 68, "cold": 68, "workabl": 68, "significantli": [68, 71, 72, 92, 95], "openai": 68, "novic": 68, "dream": 68, "chamber": 68, "25": [68, 76, 82, 86, 90, 97, 159, 160, 162, 231, 233, 236, 255, 302, 336], "langchain": 68, "316": 68, "suchun": 68, "sv": 68, "nodes_set": 68, "stone_story_nodes_rel": 68, "vid_field": [68, 88, 171, 337], "edges_set": 68, "stone_story_edg": 68, "edges_sets_": 68, "src_field": [68, 88, 171, 337], "dst_field": [68, 88, 171, 337], "daughter_in_law_of_grandson_of": 68, "wife_of": 68, "api_kei": 68, "query_to_cyph": 68, "langchain_prompt": 68, "son": 68, "baoyu": 68, "jia": 68, "\u8d3e\u5b9d\u7389\u662f\u8c01\u7684\u513f\u5b50": 68, "cypher_sent": 68, "son_of": 68, "q": [68, 75, 161, 163, 169, 251, 255], "\u8d3e\u5b9d\u7389": 68, "lastli": 68, "\u8d3e\u653f": 68, "stori": 68, "syntax": [69, 74, 83, 93, 101, 163, 309, 315], "compli": [69, 163], "unaddress": 69, "regard": [69, 76, 86, 321], "keyword": [69, 176, 177, 178, 245, 252, 256, 257, 258, 259, 260, 309, 312, 315, 316], "insensit": 69, "lowercas": 69, "letter": [69, 303], "categori": [69, 80, 82, 83, 90, 94, 169], "slightli": [69, 164, 228, 315], "elabor": [69, 96], "boolean": [69, 88, 100, 102, 159, 163, 174, 193, 194, 231, 233, 236, 267, 307], "integ": [69, 74, 174, 209, 212, 213, 214, 215, 216, 218, 220, 221, 223, 224, 227, 228, 231, 232, 233, 234, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 274, 287, 301, 302, 303, 304, 306, 309, 322], "byte": [69, 100, 108, 168], "tempor": 69, "int32": [69, 82, 86, 90, 158, 160, 168, 169, 336], "uint32": 69, "int64": [69, 88, 102, 128, 150, 158, 160, 161, 166, 168, 169, 171, 316, 342], "uint64": [69, 150, 171, 316], "byte_arrai": 69, "null": [69, 174, 191, 207, 208, 215, 222, 274, 304, 309], "datetim": 69, "zone": 69, "citizen": 69, "unsupport": [69, 72, 74], "conceiv": [69, 256], "inner_typ": 69, "mathemat": [69, 241, 243, 251, 253, 255, 264], "moment": [69, 104, 322], "averag": [69, 74, 86, 90, 100, 174, 228], "avg": [69, 174], "summar": [69, 76, 80], "subtract": 69, "divis": 69, "modulo": [69, 253], "exponenti": [69, 74, 76, 94, 256, 258, 259], "inequ": 69, "NOT": [69, 321], "WITH": 69, "conjunct": 69, "AND": [69, 90, 102], "disjunct": 69, "OR": [69, 72, 102, 309], "xor": 69, "negat": 69, "bitopr": 69, "scalar": [69, 167, 174], "listliter": 69, "fold": [69, 321, 340], "mapliter": 69, "sinl": 69, "interv": [69, 228, 260, 316], "sensit": [69, 301], "notabl": 69, "AS": [69, 72, 306, 310], "BY": [69, 72], "leverag": [70, 72, 78, 79, 91, 93, 104, 301, 318, 326], "interconnect": [70, 92, 159], "tcp": 70, "llm": 70, "sentenc": [70, 74, 76], "tradition": 71, "accommod": [71, 96], "heurist": [71, 93, 236], "coexist": 71, "sophist": [71, 91], "cardin": 71, "primarili": [71, 76, 93, 321], "stem": 71, "atc": 71, "instrument": 71, "efficaci": 71, "alias": [71, 74], "p1": [71, 76], "p2": [71, 76], "id1": [71, 340], "id2": [71, 340], "expedit": 71, "intent": 71, "k1": [71, 74], "k2": [71, 74], "p3": 71, "retain": [71, 74, 250, 323], "websocket": [72, 340], "worth": [72, 86, 163, 171, 309], "mutat": 72, "lambda": [72, 76, 157, 163, 169, 174, 245, 256, 258, 259, 260, 341], "groovi": 72, "currenttimemilli": [72, 340], "expr": [72, 74, 76, 340], "transact": [72, 89, 95, 96, 97, 318, 322, 332], "secondari": 72, "rocksdb": [72, 322], "isol": [72, 174, 270, 322], "therein": 72, "council": [72, 97], "birthdai": [72, 88, 342], "differenti": 72, "123456": [72, 80, 94, 322], "hasid": 72, "expos": [72, 78, 161, 172, 316, 326], "secondli": [72, 96], "path_expand": 72, "desir": [72, 171, 228, 250, 270, 272, 273], "concret": [72, 100, 101, 171], "endv": [72, 76, 93, 340], "repeat": [72, 93, 94, 163, 169, 243, 248, 251, 271, 274, 340], "path_opt": [72, 74, 76, 93, 340], "pathexpand": 72, "marko": [72, 74, 76], "27": [72, 74, 76, 97, 159, 160, 162, 290], "hasstep": 72, "groupcount": [72, 340], "age_cnt": 72, "age_sum": 72, "scan": [72, 321], "propertyidvalu": 72, "inE": [72, 163, 340], "conquer": 73, "situat": [74, 76, 79, 158, 159, 322], "meant": [74, 76], "moreov": [74, 89, 93, 95, 321], "vertexid": 74, "inject": 74, "edgeid": 74, "edgelabel": [74, 121], "histori": [74, 76, 93], "elementid": 74, "propertykei": 74, "accessor": 74, "eq": [74, 76, 93, 100, 340], "neq": [74, 340], "gt": [74, 76, 340], "lt": [74, 76, 340], "gte": [74, 76, 90, 336, 340], "lte": [74, 90, 336, 340], "outsid": [74, 340], "textp": [74, 340], "startingwith": [74, 340], "endingwith": [74, 340], "rko": 74, "ark": 74, "notstartingwith": [74, 340], "notendingwith": [74, 340], "notcontain": [74, 340], "unequ": 74, "nest": 74, "wheretravers": 74, "act": [74, 157, 306, 309, 329, 341], "startkei": 74, "alter": [74, 309], "opposit": [74, 163, 237, 284], "nottravers": 74, "duplic": [74, 76, 236, 238, 240, 309, 310], "deduplabel": 74, "composit": [74, 76], "de": [74, 85], "impli": 74, "flat": 74, "br": 74, "selectkei": 74, "roll": [74, 76, 79], "accompani": 74, "aggregatefunc": 74, "emit": [74, 76, 157, 160, 163, 169, 341], "ascend": [74, 76], "asc": [74, 76], "bias": 74, "toss": 74, "merg": [74, 163], "uniontravers": 74, "matchsent": 74, "binder": 74, "__": [74, 75, 76, 90, 163, 336, 340], "graphnam": 74, "unrol": 74, "linear": [74, 243, 245, 301, 321], "result_opt": [74, 76, 340], "all_v": [74, 76, 340], "lengthrang": 74, "keyvaluepair": 74, "end_v": [74, 76, 340], "all_v_": 74, "vada": 74, "josh": 74, "isnul": 74, "rippl": 74, "lop": 74, "v2": [74, 76, 82, 93, 157, 287, 341], "29": [74, 76, 159, 160, 162], "simplepath": [74, 340], "latter": [74, 76, 92], "mix": [74, 100, 321], "sack": [74, 340], "guidanc": 75, "gremlinpython": [75, 322], "sy": [75, 169], "gremlin_python": [75, 322], "graph_travers": 75, "driver_remote_connect": 75, "driverremoteconnect": [75, 322], "gremlin_endpoint": [75, 322], "remoteconn": [75, 322], "withremot": [75, 322], "assert": [75, 100, 321], "oom": 75, "vast": 75, "mitig": 75, "risk": [75, 89], "queue": [75, 102], "graph_url": [75, 172, 322, 340], "stopiter": 75, "resultiterationbatchs": 75, "addcontactpoint": [75, 322], "resultset": [75, 322], "hasnext": 75, "dlcdn": 75, "your_endpoint_address": 75, "your_endpoint_port": 75, "classnam": [75, 340], "ser": [75, 340], "gryomessageserializerv1d0": [75, 340], "serializeresulttostr": [75, 340], "exit": [75, 100, 340], "realm": 76, "audit": 76, "toolsuit": 76, "simul": [76, 134, 169], "confid": 76, "permit": [76, 309], "3k": 76, "gremlin_queri": 76, "190376": 76, "787074": 76, "sf1": 76, "432345564227583365": 76, "504403158265495622": 76, "576460752303435306": 76, "432345564227579434": 76, "hastyp": 76, "504403158265495612": 76, "144115188075855941": 76, "issubclassof": 76, "504403158265495553": 76, "confus": [76, 257, 258, 259], "mechan": [76, 91, 94, 96, 318, 326], "belong": [76, 94, 100, 101, 102, 171, 299, 302, 309, 315, 322], "distinguish": [76, 89, 157, 158, 159, 321], "worri": 76, "havelabel": 76, "veritc": 76, "216172782113783808": 76, "216172782113784710": 76, "label1": 76, "label2": 76, "forum": 76, "72057594037936036": 76, "360287970189718653": 76, "360287970189718655": 76, "joseph": 76, "joeseph": 76, "yacin": 76, "01": [76, 82, 86, 87, 90, 100, 158, 174, 233, 336], "01t00": 76, "00": 76, "curiou": 76, "38416": 76, "mayb": 76, "pyplot": 76, "plt": 76, "comment_cont": 76, "comment_length": 76, "histogram": 76, "hist": [76, 183], "50": [76, 97, 256, 258, 259], "607c8e": 76, "grid": [76, 302], "axi": [76, 99, 100, 101, 116, 140, 169, 315], "xlabel": 76, "ylabel": 76, "gender": [76, 88, 342], "person_gend": 76, "male": 76, "femal": 76, "male_count": 76, "female_count": 76, "216172782113784483": 76, "around": [76, 172], "432345564227569033": 76, "288230376151712472": 76, "144115188075856168": 76, "144115188075860911": 76, "72057594037934114": 76, "hasmoder": 76, "studyat": 76, "workat": 76, "islocatedin": 76, "432345564227582847": 76, "hasinterest": 76, "504403158265496227": 76, "864691128455136658": 76, "1008806316530991636": 76, "360287970189645858": 76, "en": [76, 92, 100, 271, 275, 276, 277, 278, 280, 281, 282, 288, 289, 290, 291, 293, 294, 295, 296], "e1": 76, "citi": [76, 80, 92, 94], "ispartof": 76, "countri": 76, "288230376151711797": 76, "216172782113784555": 76, "14": [76, 97, 159, 160, 162, 214, 274, 282, 294, 309], "exactli": [76, 80, 93, 100, 174, 219, 228, 242, 287, 315, 322], "432345564227569357": 76, "432345564227570524": 76, "288230376151712984": 76, "144115188075861043": 76, "replyof": [76, 337], "54336": 76, "33411": 76, "360287970189700805": 76, "59465": 76, "33403": 76, "awai": 76, "ineffect": 76, "illeg": 76, "simple_path": 76, "unfold": [76, 100], "hascreat": 76, "nation": 76, "china": 76, "np": [76, 160, 163, 169, 173, 324], "market": 76, "japan": 76, "browsers_us": 76, "browser_list": 76, "firefox": 76, "safari": 76, "browser_count": 76, "autopct": 76, "1f": 76, "univers": [76, 89, 174, 207, 208, 255, 265, 297, 301], "person1": 76, "person2": 76, "university1": 76, "university2": 76, "studi": [76, 86, 90, 96, 255, 257], "216172782113784481": 76, "216172782113784279": 76, "144115188075858884": 76, "216172782113784361": 76, "216172782113784291": 76, "144115188075858879": 76, "216172782113784642": 76, "216172782113784473": 76, "216172782113784328": 76, "144115188075858700": 76, "216172782113784700": 76, "216172782113784331": 76, "144115188075860619": 76, "216172782113784375": 76, "216172782113784333": 76, "144115188075858813": 76, "216172782113784593": 76, "216172782113784688": 76, "144115188075860870": 76, "216172782113784047": 76, "216172782113784692": 76, "144115188075862429": 76, "isomorph": [76, 94, 159, 163, 288, 310], "23": [76, 159, 160, 162], "216172782113784192": 76, "216172782113784107": 76, "216172782113784171": 76, "regular": [76, 248, 253, 254, 255, 277, 282, 285, 290, 293, 294, 295, 296], "squar": [76, 236, 255, 283, 284, 287, 302], "butterfli": 76, "notion": 76, "matchanalyticsalgorithm": 76, "matchoptimizationalgorithm": 76, "216172782113784587": 76, "216172782113784363": 76, "144115188075860919": 76, "216172782113784532": 76, "216172782113784400": 76, "144115188075861858": 76, "216172782113784491": 76, "216172782113784401": 76, "144115188075858086": 76, "216172782113784598": 76, "216172782113784629": 76, "144115188075858881": 76, "216172782113783931": 76, "216172782113784657": 76, "144115188075858708": 76, "repli": 76, "pa": 76, "pb": 76, "216172782113783809": 76, "216172782113784011": 76, "360287970189640007": 76, "360287970189640008": 76, "360287970189640009": 76, "34": [76, 97, 159, 160, 162, 302], "2012": [76, 268], "216172782113783812": 76, "216172782113783882": 76, "36": [76, 97, 159, 160, 162, 214, 294, 302, 334], "360287970189640010": 76, "37": [76, 97, 159, 160, 162, 174, 302, 334], "216172782113784105": 76, "38": [76, 97, 159, 160, 162, 302, 334], "41": [76, 97, 159, 160, 162, 249, 302], "43": [76, 159, 160, 162, 174, 276, 302, 332], "216172782113783814": 76, "216172782113783962": 76, "360287970189640135": 76, "52": [76, 302], "216172782113784199": 76, "54": [76, 97, 249, 302], "216172782113784038": 76, "56": [76, 97, 208, 302], "216172782113783816": 76, "216172782113784144": 76, "175": 76, "360287970189640462": 76, "72057594037927936": 76, "144115188075855872": 76, "288230376151711744": 76, "432345564227567616": 76, "504403158265495555": 76, "india": 76, "hasmemb": 76, "8248": 76, "8101": 76, "imposs": 76, "back": [76, 79, 85, 167, 321, 329], "2822": 76, "tag1": 76, "tag2": 76, "37164": 76, "432": 76, "vertinc": 76, "property1": 76, "properti2": 76, "donati": 76, "luigi": 76, "hall": 76, "costa": 76, "carlo": 76, "khan": 76, "meera": 76, "mahinda": 76, "eli": 76, "94": 76, "228": [76, 97], "emb": [76, 157, 341], "th": [76, 161, 174, 287], "dom": 76, "pedro": 76, "ii": 76, "condariuc": 76, "bonomi": 76, "anyth": 76, "david": [76, 210, 221, 286], "silva": 76, "guliyev": 76, "tagclass": 76, "504403158265495552": 76, "504403158265495554": 76, "504403158265495556": 76, "504403158265495557": 76, "504403158265495558": 76, "504403158265495559": 76, "504403158265495560": 76, "504403158265495561": 76, "504403158265495562": 76, "504403158265495563": 76, "504403158265495564": 76, "504403158265495565": 76, "504403158265495566": 76, "504403158265495567": 76, "504403158265495568": 76, "504403158265495569": 76, "504403158265495570": 76, "504403158265495571": 76, "504403158265495572": 76, "504403158265495573": 76, "504403158265495574": 76, "504403158265495575": 76, "504403158265495576": 76, "504403158265495577": 76, "504403158265495578": 76, "504403158265495579": 76, "504403158265495580": 76, "504403158265495581": 76, "504403158265495582": 76, "504403158265495583": 76, "504403158265495584": 76, "504403158265495585": 76, "504403158265495586": 76, "504403158265495587": 76, "504403158265495588": 76, "504403158265495589": 76, "504403158265495590": 76, "504403158265495591": 76, "504403158265495592": 76, "504403158265495593": 76, "504403158265495594": 76, "504403158265495595": 76, "504403158265495596": 76, "504403158265495597": 76, "504403158265495598": 76, "504403158265495599": 76, "504403158265495600": 76, "504403158265495601": 76, "504403158265495602": 76, "504403158265495603": 76, "504403158265495604": 76, "504403158265495605": 76, "504403158265495606": 76, "504403158265495607": 76, "504403158265495608": 76, "504403158265495609": 76, "504403158265495610": 76, "504403158265495611": 76, "504403158265495613": 76, "504403158265495614": 76, "504403158265495615": 76, "504403158265495616": 76, "504403158265495617": 76, "504403158265495618": 76, "504403158265495619": 76, "504403158265495620": 76, "504403158265495621": 76, "q4": 76, "690": 76, "134313148716225": 76, "216172782113783811": 76, "216172782113783813": 76, "216172782113784707": 76, "216172782113784708": 76, "216172782113784709": 76, "216172782113783910": 76, "216172782113784104": 76, "216172782113784207": 76, "216172782113784318": 76, "216172782113784305": 76, "216172782113784597": 76, "216172782113784693": 76, "216172782113784018": 76, "216172782113784092": 76, "216172782113784108": 76, "216172782113784161": 76, "216172782113784162": 76, "73": [76, 97, 255], "216172782113783875": 76, "216172782113783932": 76, "216172782113784057": 76, "216172782113784068": 76, "216172782113784065": 76, "216172782113784235": 76, "216172782113784247": 76, "meaning": [76, 88, 101, 171], "449": 76, "454": [76, 97], "216172782113783810": 76, "acsend": 76, "descend": [76, 303], "216172782113784082": 76, "216172782113784169": 76, "216172782113784267": 76, "216172782113784368": 76, "216172782113784376": 76, "216172782113783938": 76, "216172782113784405": 76, "216172782113783980": 76, "216172782113783844": 76, "216172782113783901": 76, "216172782113783935": 76, "216172782113784439": 76, "216172782113784315": 76, "216172782113784374": 76, "216172782113784601": 76, "216172782113784431": 76, "216172782113783815": 76, "216172782113783817": 76, "216172782113783971": 76, "216172782113784154": 76, "216172782113784381": 76, "216172782113783933": 76, "earlier": [76, 260, 322], "216172782113783819": 76, "216172782113783826": 76, "216172782113783836": 76, "bi": [76, 92, 95], "query2": 76, "09": [76, 97], "200": [76, 157, 315, 325, 341], "07": [76, 85, 97, 228, 236], "hastag": 76, "count1": 76, "count2": 76, "jet_li": 76, "zhang_yim": 76, "faye_wong": 76, "tsui_hark": 76, "bruce_le": 76, "johnny_depp": 76, "tom_cruis": 76, "jackie_chan": 76, "query3": 76, "moder": 76, "infinit": [76, 270], "seriou": 76, "song": 76, "containerof": 76, "message_count": 76, "824633725780": 76, "08t02": 76, "334": [76, 97], "album": 76, "hao": 76, "wang": [76, 241, 243], "19791209300479": 76, "755914248304": 76, "02t20": 76, "03": [76, 97, 330], "344": 76, "wall": 76, "lin": 76, "lei": 76, "24189255811275": 76, "824633725045": 76, "02": [76, 236], "03t18": 76, "633": 76, "893353201782": 76, "28t23": 76, "53": [76, 97, 302], "251": 76, "1030792152809": 76, "03t09": 76, "47": [76, 87, 97, 159, 160, 162], "414": 76, "chen": 76, "32985348833887": 76, "07t07": 76, "30": [76, 97, 159, 160, 162, 233, 278, 280, 285, 322, 340], "038": 76, "zhang": [76, 332], "yang": [76, 332], "15393162789707": 76, "query4": 76, "membercount": 76, "country_count": 76, "counri": 76, "personcount": 76, "72057594037932503": 76, "72057594037932473": 76, "72057594037932489": 76, "72057594037932494": 76, "72057594037932501": 76, "72057594037934803": 76, "72057594037934804": 76, "72057594037935005": 76, "72057594037928132": 76, "72057594037935879": 76, "288230376151711799": 76, "country_top100_forums_dict": 76, "personcountforum": 76, "72057594037935702": 76, "72057594037930685": 76, "72057594037932114": 76, "72057594037934231": 76, "72057594037935703": 76, "72057594037935730": 76, "72057594037935734": 76, "72057594037932509": 76, "72057594037935707": 76, "72057594037935708": 76, "72057594037935711": 76, "72057594037935714": 76, "72057594037935719": 76, "72057594037935729": 76, "72057594037935731": 76, "72057594037935724": 76, "72057594037929560": 76, "72057594037931546": 76, "72057594037931545": 76, "72057594037932479": 76, "72057594037932485": 76, "72057594037932505": 76, "72057594037932511": 76, "72057594037935710": 76, "72057594037935722": 76, "72057594037929246": 76, "72057594037928266": 76, "72057594037935713": 76, "72057594037934308": 76, "72057594037934313": 76, "72057594037934302": 76, "72057594037930430": 76, "72057594037934303": 76, "72057594037932482": 76, "72057594037935147": 76, "72057594037935148": 76, "72057594037935157": 76, "72057594037927973": 76, "72057594037929386": 76, "72057594037934315": 76, "72057594037935720": 76, "72057594037935015": 76, "72057594037934300": 76, "72057594037930861": 76, "72057594037934319": 76, "72057594037931542": 76, "72057594037929583": 76, "72057594037933324": 76, "72057594037929182": 76, "72057594037929739": 76, "72057594037934829": 76, "72057594037935658": 76, "72057594037935660": 76, "72057594037935674": 76, "72057594037935682": 76, "72057594037935683": 76, "72057594037935672": 76, "72057594037927978": 76, "72057594037935163": 76, "72057594037935014": 76, "72057594037931544": 76, "72057594037934297": 76, "72057594037927979": 76, "72057594037932474": 76, "72057594037934384": 76, "72057594037932639": 76, "72057594037934380": 76, "72057594037935146": 76, "72057594037935152": 76, "72057594037928134": 76, "72057594037928674": 76, "72057594037929248": 76, "72057594037931240": 76, "72057594037931247": 76, "72057594037931256": 76, "72057594037930958": 76, "72057594037930963": 76, "72057594037931259": 76, "72057594037931260": 76, "72057594037931262": 76, "72057594037929365": 76, "72057594037929419": 76, "72057594037929421": 76, "72057594037929431": 76, "72057594037929434": 76, "72057594037929437": 76, "72057594037929446": 76, "72057594037929447": 76, "72057594037929449": 76, "72057594037929450": 76, "72057594037935166": 76, "72057594037929519": 76, "72057594037929451": 76, "72057594037929452": 76, "72057594037935046": 76, "72057594037932339": 76, "72057594037932481": 76, "72057594037934294": 76, "72057594037932389": 76, "72057594037932976": 76, "72057594037930870": 76, "72057594037931266": 76, "72057594037928092": 76, "72057594037928495": 76, "72057594037929510": 76, "72057594037929517": 76, "72057594037929961": 76, "72057594037929965": 76, "72057594037930242": 76, "72057594037930248": 76, "72057594037930250": 76, "72057594037930313": 76, "72057594037931547": 76, "72057594037935686": 76, "72057594037929052": 76, "72057594037929053": 76, "72057594037929055": 76, "72057594037929057": 76, "72057594037929060": 76, "72057594037934811": 76, "72057594037934813": 76, "72057594037934816": 76, "72057594037934821": 76, "72057594037934822": 76, "72057594037934823": 76, "72057594037934828": 76, "72057594037934835": 76, "72057594037934837": 76, "72057594037934975": 76, "72057594037934976": 76, "72057594037935032": 76, "72057594037935038": 76, "72057594037935045": 76, "72057594037935664": 76, "72057594037935673": 76, "72057594037935678": 76, "72057594037935685": 76, "72057594037931549": 76, "72057594037931550": 76, "72057594037931552": 76, "72057594037931554": 76, "72057594037931557": 76, "72057594037931560": 76, "72057594037931566": 76, "72057594037935671": 76, "72057594037935670": 76, "72057594037934977": 76, "72057594037931543": 76, "72057594037929518": 76, "72057594037935679": 76, "72057594037931575": 76, "72057594037932438": 76, "72057594037932878": 76, "72057594037932886": 76, "72057594037932888": 76, "72057594037927982": 76, "72057594037930526": 76, "72057594037930535": 76, "72057594037930546": 76, "72057594037930976": 76, "72057594037930536": 76, "72057594037931358": 76, "72057594037930366": 76, "72057594037931574": 76, "72057594037932435": 76, "72057594037935020": 76, "72057594037935864": 76, "72057594037933861": 76, "72057594037932440": 76, "72057594037927981": 76, "72057594037931349": 76, "72057594037931366": 76, "72057594037932885": 76, "72057594037927980": 76, "72057594037930529": 76, "72057594037930532": 76, "72057594037931304": 76, "72057594037932433": 76, "72057594037932441": 76, "72057594037934547": 76, "query11": 76, "live": 76, "startdat": 76, "enddat": 76, "216172782113784091": 76, "216172782113784250": 76, "216172782113784403": 76, "216172782113784537": 76, "216172782113784122": 76, "query14": 76, "country1": 76, "country2": 76, "subscor": 76, "award": [76, 332], "chile": 76, "case1": 76, "case2": 76, "case3": 76, "case4": 76, "216172782113784153": 76, "216172782113784100": 76, "216172782113783956": 76, "216172782113784673": 76, "216172782113784252": 76, "216172782113784263": 76, "216172782113784193": 76, "216172782113784242": 76, "216172782113784623": 76, "216172782113784498": 76, "216172782113784251": 76, "216172782113784538": 76, "216172782113784167": 76, "216172782113783864": 76, "216172782113784613": 76, "216172782113784116": 76, "faq": 77, "jave": [78, 326], "javasdk": [78, 326], "creation": [79, 159, 233], "transit": [79, 278, 306], "magnitud": [79, 91], "superior": [79, 90, 92, 96], "rich": [79, 89, 92, 94, 159, 161], "neg": [79, 80, 157, 161, 163, 165, 169, 174, 193, 271], "gsl": [79, 80, 89, 159, 160, 161, 162, 166, 173], "gat": [79, 94, 157, 165, 341], "deepwalk": [79, 157, 341], "trans": [79, 157, 341], "pyg": [79, 80, 83, 84, 94, 95, 96], "flexibli": [79, 89, 94, 96], "pytorch": [79, 80, 89, 94, 163, 165], "onlin": [79, 91, 94, 95, 318, 322], "fed": [79, 90, 94], "dockerfil": [79, 164], "ek": 79, "aw": [79, 97, 333], "ack": 79, "failov": [79, 96], "concentr": [79, 96, 213], "secur": [80, 94, 95], "industri": [80, 89, 94, 96, 97], "feasibl": [80, 94], "preprocess": [80, 169], "uniformli": [80, 246, 247, 248, 256, 257, 258, 259, 260, 304], "lookup": [80, 94, 169, 309], "topolog": [80, 159], "nn": [80, 82, 85, 86, 87, 90, 94, 100, 157, 169, 336, 341], "ego": [80, 94, 165, 310, 341], "dimension": [80, 86, 90, 94, 158, 160, 161], "conv": [80, 83, 94], "edge_index": [80, 83, 87], "carri": 80, "predict": [80, 86, 89, 90, 94], "asynchron": 80, "tensor": [80, 83, 99, 100, 101, 140, 157, 161, 165, 167, 313, 315], "plaintext": 80, "clearli": [80, 94], "space": [80, 94, 158, 159, 163, 174, 208, 256, 257, 258, 259, 260], "dimens": [80, 82, 85, 86, 90, 94, 158, 256, 257, 258, 259, 301, 336], "batchgraph": 80, "mini": [80, 94], "loss": [80, 82, 85, 86, 87, 90, 94, 169, 336, 341], "mind": 80, "classif": [80, 84, 90, 94, 98, 157, 158, 169], "trainer": [80, 82, 85, 86, 90, 157, 336, 341], "dependic": 81, "hk": 81, "rm": [81, 169], "4g": 81, "aarch64": 82, "processor": 82, "verion": 82, "egographsag": [82, 85, 90, 336], "349": [82, 86, 90, 336], "venu": [82, 90], "confer": [82, 90, 161, 332], "www": [82, 85, 86, 90, 174, 228, 282, 291, 294, 322, 336], "tf": [82, 83, 85, 86, 90, 157, 158, 163, 164, 169, 336, 341], "disable_v2_behavior": [82, 85, 86, 90, 336], "importerror": [82, 85, 86, 90, 336], "load_ogbn_mag": [82, 85, 86, 88, 90, 336, 342], "egosagesuperviseddataload": [82, 86, 90, 336], "localtrain": [82, 85, 86, 90, 336], "node_typ": [82, 85, 86, 90, 157, 159, 160, 163, 166, 169, 173, 336, 341], "class_num": [82, 86, 90, 157, 336, 341], "features_num": [82, 85, 86, 90, 157, 336, 341], "hops_num": [82, 86, 90, 157, 336, 341], "nbrs_num": [82, 85, 86, 90, 336], "epoch": [82, 83, 85, 86, 87, 90, 157, 162, 336, 341], "hidden_dim": [82, 85, 86, 90, 157, 169, 336, 341], "256": [82, 86, 87, 90, 97, 238, 298, 322, 336], "in_drop_r": [82, 86, 90, 336], "learning_r": [82, 85, 86, 90, 169, 336], "reset_default_tf_graph": [82, 86, 90, 336], "act_func": [82, 86, 90, 336], "relu": [82, 86, 90, 336], "dropout": [82, 85, 86, 90, 169, 336], "train_data": [82, 85, 86, 90, 336], "mask": [82, 86, 90, 173, 336], "train_embed": [82, 86, 90, 336], "src_ego": [82, 85, 86, 90, 336], "train_label": [82, 86, 90, 336], "reduce_mean": [82, 86, 90, 157, 169, 336, 341], "sparse_softmax_cross_entropy_with_logit": [82, 86, 90, 157, 169, 336, 341], "logit": [82, 86, 90, 169, 336], "adamoptim": [82, 85, 86, 90, 169, 336], "test_embed": [82, 86, 90, 336], "test_label": [82, 86, 90, 336], "test_indic": [82, 86, 90, 336], "argmax": [82, 86, 87, 90, 336], "output_typ": [82, 86, 90, 144, 313, 336], "test_acc": [82, 86, 87, 90, 336], "div": [82, 86, 90, 336], "reduce_sum": [82, 86, 90, 336], "cast": [82, 86, 88, 90, 169, 321, 336], "float32": [82, 86, 87, 90, 160, 169, 336], "obgn": [82, 86], "mag": [82, 86, 90, 336], "paper_featur": [82, 90, 336], "feat_": [82, 85, 86, 87, 90, 336], "128": [82, 85, 86, 87, 90, 169, 336], "lg": [82, 85, 86, 90, 152, 316, 330, 336], "cite": [82, 85, 86, 90, 336], "gen_label": [82, 85, 86, 90, 152, 316, 336], "val": [82, 85, 86, 90, 157, 173, 316, 336, 341], "85": [82, 85, 86, 90, 97, 100, 316, 336], "seed": [83, 157, 165, 169, 228, 231, 232, 233, 234, 236, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 263, 264, 265, 266, 269, 301, 304, 306], "sampler": [83, 85, 162, 165, 167], "perceptu": 83, "theori": [83, 161, 169], "unsupervis": [83, 85, 98, 157, 163, 165, 166, 316], "mainstream": [83, 161, 162], "putback": 83, "outofrangeerror": [83, 162, 163, 169], "evolv": [83, 89, 322], "neighborsampl": [83, 161], "edge_weight": [83, 161, 163], "random_with_replac": 83, "topk": [83, 161, 163], "pad": [83, 161], "expand_factor": [83, 161, 166], "sparsenod": [83, 160, 161, 163], "sparseedg": [83, 160, 161, 163], "layer1": [83, 161], "layer2": [83, 161], "neighbor_sampl": [83, 161], "bui": [83, 89, 160, 161, 162, 163, 166, 169], "i2i": [83, 161, 163], "layer_nod": [83, 161], "int_attr": [83, 160, 161, 162, 166, 169], "layer_edg": [83, 161], "float_attr": [83, 160, 161, 162, 166, 169], "egograph": [83, 94, 157, 165, 341], "negativesampl": [83, 166], "node_weight": [83, 163, 166], "edge_sampl": [83, 162, 166], "negative_sampl": [83, 157, 166, 341], "neg_nod": [83, 166], "heterogen": [83, 86, 90, 92, 94, 158, 159, 160, 161, 163], "randomli": [83, 163, 228, 234, 238, 240, 249, 251, 256, 259, 264, 306], "outv": [83, 157, 161, 163, 169, 340, 341], "overs": 83, "citat": [84, 86, 87, 90, 98, 169, 336], "revisit": [84, 85, 98], "ho2": 84, "with_dataset": [85, 156, 316, 342], "k8s_service_typ": [85, 156, 316, 336], "loadbalanc": [85, 316, 336], "k8s_image_pull_polici": [85, 156, 316], "cell": [85, 302], "metainfo": 85, "obgn_mag": 85, "ogbn_mag_smal": [85, 88, 336, 342], "chose": [85, 86], "i_featur": [85, 86], "argpars": 85, "tfg": 85, "egosageunsuperviseddataload": 85, "parse_arg": 85, "argumentpars": 85, "egosag": 85, "add_argu": 85, "output_dim": [85, 157, 341], "neg_num": 85, "0001": 85, "agg_typ": 85, "drop_out": 85, "neg_sampl": 85, "temperatur": 85, "dim": [85, 87, 256, 257, 258, 259], "src_emb": [85, 157, 341], "dst_emb": 85, "dst_ego": 85, "neg_dst_emb": 85, "neg_dst_ego": 85, "unsupervised_softmax_cross_entropy_loss": 85, "ogbn": [86, 87, 90, 336], "academ": [86, 90, 336], "microsoft": [86, 90, 336], "institut": [86, 90, 336], "accomplish": [86, 90, 228], "word2vec": [86, 90, 336], "torch": 87, "ogb": 87, "nodeproppr": 87, "torch_geometr": 87, "graphlearn_torch": 87, "glt": 87, "load_ogbn_arxiv": 87, "ogbn_arxiv": 87, "no_grad": 87, "test_load": 87, "dataset_nam": 87, "eval": [87, 313], "y_true": 87, "enumer": [87, 99], "devic": [87, 97], "del": [87, 171, 309], "y_pred": 87, "keepdim": 87, "unsqueez": 87, "acc": 87, "glt_graph": 87, "node_featur": 87, "node_label": [87, 316], "edge_dir": 87, "random_node_split": 87, "num_val": 87, "num_test": 87, "init_cli": 87, "num_serv": 87, "num_client": 87, "client_rank": 87, "master_addr": 87, "master_port": 87, "server_client_master_port": 87, "num_rpc_thread": 87, "is_dynam": 87, "dataload": 87, "train_load": 87, "distneighborload": 87, "num_neighbor": 87, "input_nod": 87, "512": [87, 163], "collect_featur": 87, "to_devic": 87, "worker_opt": 87, "remotedistsamplingworkeropt": 87, "worker_devic": 87, "worker_concurr": 87, "buffer_s": 87, "1gb": 87, "prefetch_s": 87, "workload_typ": 87, "in_channel": 87, "hidden_channel": 87, "num_lay": 87, "out_channel": 87, "adam": 87, "lr": 87, "arxiv": [87, 174, 217, 232, 233, 234, 248, 301], "zero_grad": 87, "log_softmax": 87, "nll_loss": 87, "backward": [87, 94, 163, 260, 316], "03d": 87, "4f": 87, "accuraci": [87, 94], "shutdown": 87, "shutdown_cli": 87, "trivial": [88, 96, 225], "bucket": [88, 316, 332], "avaiabl": [88, 322], "_e": [88, 171, 318, 342], "ldbc_sampl": [88, 322, 340, 342], "person_0_0": [88, 322, 337, 342], "didn": [88, 97], "person_knows_person_0_0": [88, 322, 337, 342], "comment_0_0": [88, 337, 342], "person_likes_comment_0_0": [88, 342], "deal": [88, 92, 161], "unseen": [88, 94, 324], "person_likes_post_0_0": [88, 342], "post_0_0": [88, 342], "ndarrai": [88, 101, 116, 127, 160, 161, 163, 166, 171, 173, 309, 342], "apart": [88, 256], "comment_replyof_comment_0_0": [88, 337, 342], "datasourc": [88, 342], "col_0": [88, 342], "col_1": [88, 342], "coo": [88, 320, 342], "array_v": [88, 342], "col": [88, 342], "array_": [88, 342], "hood": 88, "distributedli": [88, 159, 165, 167, 168, 169], "fsspec": [88, 342], "kwarg": [88, 100, 101, 108, 119, 131, 135, 136, 153, 156, 166, 171, 172, 173, 316], "ds1": [88, 342], "datafil": [88, 342], "ds2": [88, 342], "graphscope_bucket": [88, 342], "hangzhou": [88, 158, 342], "ds3": [88, 342], "9000": [88, 322, 342], "extra_conf": [88, 342], "conf1": [88, 342], "d34": [88, 342], "client_kwarg": [88, 342], "region_nam": [88, 342], "east": [88, 342], "ossf": [88, 342], "subclass": [88, 99, 309], "abstractfilesystem": [88, 342], "abstractbufferfil": 88, "_upload_chunk": [88, 342], "_initiate_upload": [88, 342], "_fetch_rang": [88, 342], "register_implement": [88, 342], "protocol_nam": [88, 342], "protocol_file_system": [88, 342], "direction": 88, "exce": [88, 267, 268], "super": [88, 100, 159, 163], "precis": [88, 94, 301], "modular": [89, 301], "rapidli": [89, 161], "seller": 89, "buyer": [89, 93], "fraudul": 89, "sell": 89, "suspici": 89, "fraud": [89, 96], "feed": [89, 152, 157, 160, 163, 169, 173, 316, 341], "webui": 89, "necessit": 89, "diversifi": 89, "ingest": [89, 322], "rapid": 89, "parti": [89, 289], "analyst": 89, "gaia": [89, 340], "resembl": [89, 301, 306, 308], "olap": 89, "gen": [89, 163], "dataflow": [89, 91], "arriv": 89, "hiactor": 89, "financi": 89, "billion": [89, 92, 96], "preval": 89, "definit": [89, 174, 255, 256, 258], "miniconda": 90, "scientif": 90, "field_of_studi": [90, 336], "subject": 90, "4307": [90, 336], "n1": 90, "n2": 90, "proven": 90, "2014": [90, 174, 336], "2020": [90, 336], "ret1": [90, 336], "k_core": [90, 100, 174, 310, 332, 336], "ret2": [90, 336], "kcore": [90, 336], "downstream": [90, 163], "supervis": [90, 98, 158, 161, 169, 316, 336], "train_sag": 90, "130": [90, 336], "conduit": 90, "simultan": [90, 96, 318], "icde2023": 91, "indroduc": 91, "sigmod2017": [91, 332, 338], "gra": 91, "ph": 91, "arallel": 91, "ngine": 91, "opensourc": 91, "raph": 91, "nalysi": 91, "elat": 91, "ransact": 91, "loos": [91, 96, 318], "mysql": [91, 318], "nutshel": [91, 318], "exploit": [91, 318], "ahead": [91, 318], "wal": [91, 318], "etriev": 91, "IN": 91, "terfac": 91, "portabl": [91, 321], "rust": [91, 321, 322], "handler": [91, 316], "chive": 91, "guardian": 91, "galaxi": 91, "steal": 91, "tackl": [91, 92], "imbal": 91, "nvlink": 91, "acut": 91, "asymmetr": 91, "holist": 91, "innov": 91, "speedup": 91, "cncf": 91, "sandbox": 91, "soon": [91, 95, 96, 97, 160], "amplifi": 91, "dissoci": 91, "ly": 91, "dag": [91, 100, 101, 119, 171, 309, 313, 316], "laptop": 91, "loop": [91, 174, 184, 197, 236, 238, 240, 242, 248, 256, 257, 258, 259, 260, 266, 269, 309, 310, 340], "correl": [91, 174], "subtask": 91, "earli": 91, "nsdi": [91, 338], "legaci": 91, "interchang": 91, "memoiz": 91, "vldb2021": 91, "artial": 91, "ncrement": 91, "transport": 92, "protein": [92, 250], "uncov": 92, "vari": [92, 158], "unless": [92, 161, 309], "discov": 92, "discoveri": [92, 94, 316], "rough": 92, "accordingli": [92, 149], "snap": 92, "stanford": [92, 300], "cs224w": 92, "constitu": 92, "bellman": [92, 174], "ford": [92, 174], "wiki": [92, 100, 271, 275, 276, 277, 278, 280, 281, 282, 288, 289, 290, 291, 293, 294, 295, 296], "s_algorithm": 92, "towardsdatasci": 92, "9bd8951e7da": 92, "road": [92, 324], "logist": 92, "deliveri": 92, "media": 92, "nontrivi": [92, 281], "steep": 92, "sought": 92, "monei": [93, 96], "launder": [93, 96], "exact": [93, 238, 240, 336], "exclud": 93, "purchas": 93, "bolder": 93, "border": 93, "sens": [93, 301, 316], "worst": 93, "embrac": 93, "grasp": 93, "drug": 94, "likelihood": 94, "biologi": 94, "valuabl": 94, "bioinformat": 94, "chemic": 94, "promis": 94, "driven": [94, 301, 321], "carefulli": 94, "rewind": 94, "stack": 94, "convolut": [94, 165], "weigh": 94, "choic": [94, 321, 322], "huge": [94, 324], "plain": 94, "text": [94, 102, 210], "gradient": 94, "metric": [94, 256, 257, 258, 259, 260], "recal": 94, "f1": [94, 171], "assess": [94, 169, 286], "irregular": 94, "unstructur": 94, "pool": 94, "hardwar": [94, 325], "undergo": 94, "perceiv": 94, "maxgraph": [95, 338], "2x": 95, "excel": 95, "elast": [95, 322], "encrypt": 95, "geminigraph": [96, 97], "plato": [96, 97], "empir": 96, "enjoi": 96, "janusgraph": 96, "nebula": 96, "dbm": 96, "relaunch": [96, 322], "recoveri": 96, "coars": 96, "grain": 96, "invest": 96, "trace": [96, 100], "dgl": 96, "nebular": 96, "movement": [96, 163], "grade": 97, "r6": 97, "8xlarg": 97, "alibabacloud": 97, "ec": 97, "xl": 97, "a038f97": 97, "170e7d3": 97, "21009d6": 97, "v4": 97, "mpich": 97, "fair": 97, "huge_pag": 97, "jemalloc": 97, "o3": 97, "stub": [97, 103, 105, 238, 266, 269], "determinist": [97, 102, 316, 322], "cdlp": [97, 100, 332], "load_direct": 97, "load_undirected_from_direct": 97, "reformat": 97, "mark": [97, 174], "datagen": 97, "9_0": 97, "fb": 97, "62": 97, "9_1": 97, "78": [97, 228, 302], "9_2": 97, "zf": 97, "88": [97, 241, 243], "60": [97, 174, 302], "61": 97, "176": [97, 265], "graph500": 97, "71": [97, 174, 246, 250, 256], "79": [97, 241, 243], "friendster": 97, "97": 97, "39": [97, 159, 160, 162, 174, 302, 332, 334], "86": 97, "57": 97, "126": [97, 242], "98": 97, "83": 97, "66": 97, "1695": 97, "2742": 97, "3600": 97, "425": 97, "55": [97, 208], "lcc": 97, "521": 97, "51": [97, 302], "296": 97, "1859": 97, "201": [97, 305], "842": 97, "68": 97, "competitor": 97, "pagerank_loc": 97, "65": 97, "72": 97, "84": 97, "63": [97, 245, 247], "gunrock": 97, "0c9a96": 97, "grout": 97, "5ce160": 97, "v7": 97, "v10": 97, "gn6v": 97, "c8g1": 97, "16xlarg": 97, "8x": 97, "16gb": 97, "nvidia": 97, "v100": 97, "gb": 97, "soc": [97, 229, 230], "livejournal1": 97, "89": 97, "9345": 97, "215": [97, 298], "560": 97, "3029": 97, "129": [97, 264], "389": 97, "155": 97, "0549": 97, "sinaweibo": 97, "168": 97, "1649": 97, "647": 97, "orkut": 97, "105": [97, 229, 230], "121": 97, "193": 97, "658": 97, "3201": 97, "7677": 97, "137": [97, 236], "2139": 97, "319": 97, "261": 97, "69": [97, 296, 302], "235": 97, "567": 97, "283": 97, "073": 97, "6619": 97, "45": [97, 159, 160, 162, 238], "150": 97, "87299": 97, "162": 97, "60403": 97, "9676": 97, "141": 97, "347": 97, "7772": 97, "0118": 97, "306": 97, "8618": 97, "9134": 97, "467": 97, "60801": 97, "8666": 97, "3501": 97, "870": 97, "6451": 97, "198": 97, "829": 97, "5036": 97, "229": 97, "024": 97, "483": 97, "178": 97, "5593": 97, "807": 97, "367": 97, "6946": 97, "2339": 97, "jupyt": [98, 316], "notebook": [98, 316], "jupyterlab": 98, "playground": [98, 343], "bipartit": [98, 157, 159, 215, 263, 264, 265, 297, 341], "grapeengin": 99, "vineyardserv": 99, "grapeinst": 99, "graphscopeserv": 99, "inlin": 99, "dag_fil": 99, "dagfil": 99, "rundagfil": 99, "subscrib": 99, "charg": 99, "commspec": [99, 318, 321, 323], "comm_spec": [99, 318, 321, 323], "vineyard_socket": 99, "bl": 99, "dispatchresult": 99, "onrec": 99, "commanddetail": 99, "gsobject": 99, "objectmanag": 99, "appentri": 99, "icontextwrapp": 99, "ifragmentwrapp": 99, "projector": 99, "propertygraphutil": 99, "objecttyp": 99, "tostr": [99, 323], "putobject": 99, "obj": 99, "removeobject": 99, "getobject": [99, 322, 323], "hasobject": 99, "analyticalserv": 99, "startserv": 99, "stopserv": 99, "engineconfig": 99, "tojsonstr": 99, "vineyard_rpc_endpoint": 99, "enable_java_sdk": 99, "setcommand": 99, "enum": 99, "aggregatepolici": 99, "kpickfirst": 99, "kpickfirstnonempti": 99, "krequireconsist": 99, "kconcat": 99, "kpickfirstnonemptygraphdef": 99, "kmergegraphdef": 99, "worker_id": [99, 171], "error_cod": 99, "set_error": 99, "has_large_data": 99, "set_graph_def": 99, "graphdefpb": 99, "graph_def": 99, "set_data": 99, "large_data": 99, "inarch": 99, "arc": 99, "aggregate_polici": 99, "fragmentwrapp": 99, "addcolumn": 99, "vdata_t": 99, "edata_t": 99, "arrowvertexmap": 99, "internaltyp": 99, "arrowprojectedfragmentbas": 99, "bareregist": 99, "internal_oid_t": 99, "property_graph_typ": 99, "eid_typ": 99, "vertexrang": [99, 102], "inner_vertices_t": 99, "outer_vertices_t": 99, "vertices_t": 99, "sub_vertices_t": 99, "nbr_t": 99, "arrow_projected_fragment_impl": 99, "compact_nbr_t": 99, "compactnbr": 99, "nbrunit": 99, "compact_adj_list_t": 99, "compactadjlist": 99, "const_adj_list_t": 99, "const_compact_adj_list_t": 99, "property_vertex_map_t": 99, "arrowprojectedvertexmap": 99, "label_id_typ": 99, "prop_id_typ": 99, "property_graph_t": 99, "eid_array_t": 99, "data_t": 99, "inner_vertex_array_t": 99, "outer_vertex_array_t": 99, "objectmeta": 99, "preparetorunapp": 99, "prepareconf": 99, "fnum": [99, 102], "vertex_prop_id": 99, "edge_prop_id": 99, "mirrorvertic": 99, "getvertex": 99, "getid": 99, "getinternalid": 99, "getfragid": 99, "typedarrai": 99, "value_typ": 99, "gid2vertex": 99, "vertex2gid": 99, "getinnerverticesnum": 99, "getouterverticesnum": 99, "getverticesnum": 99, "getedgenum": [99, 323], "getinedgenum": [99, 323], "getoutedgenum": [99, 323], "getoutgoingedgenum": 99, "getincomingedgenum": 99, "gettotalverticesnum": 99, "isinnervertex": 99, "getoutervertex": 99, "getinnervertexid": 99, "getinnervertexinternalid": 99, "getoutervertexid": 99, "getoutervertexinternalid": 99, "gid2oid": 99, "oid2gid": 99, "innervertexgid2vertex": 99, "outervertexgid2vertex": 99, "getoutervertexgid": 99, "getinnervertexgid": 99, "compact_": 99, "enable_if": 99, "getincominginnervertexadjlist": 99, "getoutgoinginnervertexadjlist": 99, "getincomingoutervertexadjlist": 99, "getoutgoingoutervertexadjlist": 99, "src_fid": 99, "dst_fid": 99, "getlocaloutdegre": 99, "getlocalindegre": 99, "destlist": 99, "iedest": 99, "oedest": 99, "ioedest": 99, "getvertexmap": 99, "get_out_edges_ptr": 99, "get_in_edges_ptr": 99, "get_oe_offsets_begin_ptr": 99, "get_oe_offsets_end_ptr": 99, "get_ie_offsets_begin_ptr": 99, "get_ie_offsets_end_ptr": 99, "get_edata_array_accessor": 99, "get_vdata_array_accessor": 99, "get_arrow_frag": 99, "vertex_map_id": 99, "local_vertex_map": [99, 323], "getoid": 99, "getgid": 99, "offset2lid": 99, "getoffsetfromlid": 99, "getlidfromgid": 99, "getfidfromgid": 99, "oid_t_": 99, "vid_t_": 99, "arrowfragmentload": 99, "efil": [99, 323], "vfile": [99, 323], "graph_info": 99, "leaf": [99, 101, 146, 174, 219, 303], "table_vec_t": 99, "loadvertexedget": 99, "loadvertext": 99, "loadedget": 99, "loadfrag": 99, "loadfragmentasfragmentgroup": 99, "addlabelstofrag": 99, "frag_id": [99, 318, 323], "addlabelstofragmentasfragmentgroup": 99, "initpartition": 99, "doxygenclass": 99, "arrowfragmentappend": 99, "doxygen": 99, "runner": [99, 332], "_build": 99, "appbas": 99, "defaultmessagemanag": 99, "need_split_edg": 99, "konlyout": 99, "propertyappbas": 99, "propertymessagemanag": 99, "propertyautoappbas": 99, "propertyautomessagemanag": 99, "app_t": 99, "defaultwork": 99, "parallelenginespec": 99, "pe_spec": 99, "defaultparallelenginespec": 99, "getcontext": 99, "ostream": 99, "parallelpropertywork": 99, "parallelpropertymessagemanag": 99, "propertyautowork": 99, "pointer": 99, "appfram": 99, "creatework": 99, "deletework": 99, "lib_path": 99, "worker_handl": 99, "queryarg": 99, "query_arg": [99, 144, 313], "context_kei": 99, "frag_wrapp": 99, "functiontyp": 99, "argsnum": 99, "argsunpack": 99, "proto": [99, 119, 144], "datatyp": 99, "argtypeat": 99, "defaultpropertywork": 99, "ctx_t": 99, "ctxwrapperbuild": 99, "contextwrapp": 99, "vertexpropertycontext": [99, 332], "contextbas": 99, "labeledvertexdatacontext": 99, "contextdatatyp": 99, "icolumn": 99, "get_column": 99, "get_typed_column": 99, "vertex_properti": [99, 100, 102], "properties_map": 99, "vertexdatacontextwrapp": 99, "ivertexdatacontextwrapp": 99, "fragment_wrapp": 99, "unique_ptr": 99, "tondarrai": 99, "todatafram": 99, "tovineyardtensor": 99, "tovineyarddatafram": 99, "toarrowarrai": 99, "tensorcontext": [99, 101], "set_shap": 99, "tensor_t": 99, "tensorcontextwrapp": 99, "itensorcontextwrapp": 99, "cmake_extra_opt": 100, "asset": 100, "labeled_vertex_data": 100, "dynamic_vertex_data": 100, "labeled_vertex_properti": 100, "cpp_pregel": 100, "cython_pi": 100, "cython_pregel": 100, "appdagnod": [100, 135, 141], "__init__": [100, 157, 164, 171, 172, 173, 309, 310, 312, 316, 322, 341], "bytesio": [100, 108], "is_compat": 100, "graphdagnod": [100, 112, 126, 127, 143, 150, 152, 171, 172, 316], "invalidargumenterror": [100, 316], "scannererror": 100, "incorrect": 100, "signatur": [100, 163, 309], "neccessari": 100, "resouc": 100, "__call__": 100, "app_asset": [100, 112, 118], "bind": [100, 321], "app_nod": 100, "__del__": 100, "unload": [100, 123, 141, 143], "attribute_assortativity_coeffici": [100, 332], "assort": 100, "ref": [100, 321], "joint": [100, 266, 267, 268, 269, 310], "newman": [100, 174, 238, 240, 301], "026126": 100, "2003": [100, 174, 231, 238, 249, 257], "numeric_assortativity_coeffici": [100, 332], "analog": 100, "k_": [100, 210, 274], "rac": 100, "s_i": 100, "sum_": [100, 174, 242], "w_": [100, 174, 242], "ij": [100, 174], "k_j": 100, "valueerror": [100, 156, 171, 174, 248, 305, 316], "barrat": 100, "barth\u00e9lemi": 100, "pastor": 100, "satorra": 100, "vespignani": 100, "pna": 100, "101": [100, 338], "3747": 100, "3752": 100, "2004": [100, 263], "average_shortest_path_length": [100, 174, 310, 332], "frac": [100, 174, 184, 242], "vertexdatacontextdagnod": [100, 101], "avg_clust": [100, 332], "degree_threshold": 100, "threshold": [100, 256, 257, 258, 259], "1e9": 100, "unweight": [100, 174], "foster": 100, "grassberg": 100, "paczuski": 100, "107": [100, 262], "10815": 100, "1e": [100, 169, 174, 228], "06": [100, 174], "html": [100, 174, 258, 261, 270, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 289, 291], "gv": 100, "hits_algorithm": 100, "vertexpropertycontextdagnod": [100, 101], "is_simple_path": [100, 332], "nonempti": 100, "biject": [100, 304], "smallest": [100, 261, 281, 291], "pairwis": 100, "k_shell": [100, 332], "katz_centrality_numpi": [100, 174], "auttenu": 100, "maximun": 100, "min_progress": 100, "1000": [100, 159, 174, 306, 309, 322], "progress_tri": 100, "progress": [100, 253], "met": 100, "blondel": 100, "et": [100, 306], "al": [100, 306], "stat": [100, 256, 258], "mech": 100, "10008": 100, "2008": [100, 228, 251], "sotera": 100, "lpa_u2i": [100, 332], "labeledvertexpropertycontextdagnod": [100, 101], "pagerank_nx": [100, 332], "max_it": [100, 174, 228], "tol": [100, 174, 228], "solver": 100, "voterank": [100, 332], "unsign": [100, 322], "basecontextdagnod": [101, 171], "bound_app": [101, 118], "contextdagnod": 101, "to_vineyard_tensor": [101, 315, 332], "to_vineyard_datafram": [101, 315, 332], "lazi": [101, 171, 316], "sg": 101, "ramework": 101, "resultdagnod": [101, 136], "r4": [101, 324], "62586": 101, "comparis": 101, "alphabet": [101, 315], "tensorcontextdagnod": 101, "quer": [101, 315], "labeledvertexdatacontextdagnod": 101, "label_nam": [101, 315], "column_nam": [101, 315], "labeld": [101, 158], "context_nod": 101, "result_schema": 101, "referenc": 101, "dynamicvertexdatacontext": 101, "dag_nod": 101, "get_str": 102, "property_id": 102, "get_doubl": 102, "edge_label_id": 102, "edge_label_nam": 102, "incoming_edg": 102, "register_aggreg": 102, "pregelaggregatortyp": 102, "aggr_typ": 102, "get_aggregated_valu": 102, "get_total_vertices_num": 102, "vertex_property_num": 102, "vertex_label_nam": 102, "vertex_label_id": 102, "edge_property_num": 102, "get_vertex_label_by_id": 102, "get_vertex_label_id_by_nam": 102, "get_edge_label_by_id": 102, "get_edge_label_id_by_nam": 102, "edge_properti": 102, "get_vertex_property_id_by_nam": 102, "vertex_property_nam": [102, 321], "get_vertex_property_by_id": 102, "vertex_property_id": 102, "get_edge_property_id_by_nam": 102, "edge_property_nam": 102, "get_edge_property_by_id": 102, "edge_property_id": 102, "kboolandaggreg": 102, "kbooloraggreg": 102, "kbooloverwriteaggreg": 102, "overwritten": 102, "kdoubleminaggreg": 102, "kdoublemaxaggreg": 102, "kdoublesumaggreg": 102, "kdoubleproductaggreg": 102, "kdoubleoverwriteaggreg": 102, "kint64minaggreg": 102, "kint64maxaggreg": 102, "kint64sumaggreg": 102, "kint64productaggreg": 102, "kint64overwriteaggreg": 102, "ktextappendaggreg": 102, "kalongoutgoingedgetooutervertex": 102, "kalongincomingedgetooutervertex": 102, "kalongedgetooutervertex": 102, "nerghbor": 102, "get_total_nodes_num": 102, "get_nodes_num": 102, "get_inner_nodes_num": 102, "get_outer_nodes_num": 102, "outer_nod": 102, "get_node_fid": 102, "is_inner_nod": 102, "is_outer_nod": 102, "get_nod": [102, 160], "get_outer_nod": 102, "get_node_id": 102, "get_incoming_edg": 102, "has_child": 102, "child": [102, 211, 303], "has_par": 102, "parent": [102, 104, 144, 149, 303], "get_indegre": 102, "get_outdegre": 102, "kmaxaggreg": 102, "ksumaggreg": 102, "kproductaggreg": 102, "koverwriteaggreg": 102, "subproject": 104, "scratch": 104, "never": [104, 309], "hopefulli": 104, "dskiptest": 104, "dmaven": 104, "antrun": 104, "jni": 104, "gae_java": 105, "graphscope_typ": 107, "graphscopetyp": 107, "myalgorithm": 107, "filenotfounderror": 108, "permissionerror": 108, "typeerror": [108, 144, 316], "arrowproperti": 109, "subrang": 109, "loader_op": 110, "notimplementederror": 110, "run_app": [115, 116, 131, 139, 140], "copy_typ": 117, "session_id": [119, 123, 144, 171, 172, 309, 313], "graph_typ": [119, 309], "graphtyp": [119, 309, 318, 323], "view_typ": 120, "vertex_or_edge_label_list": 121, "graph_util": 121, "vertexlabel": 121, "op_typ": [123, 144, 313], "uiliti": 123, "interactive_queri": [128, 316], "gremlin_script": [128, 172], "request_opt": [128, 172], "interactivequerydagnod": 128, "modify_typ": [129, 130], "attr": [129, 130, 144, 163, 176, 177, 178, 309, 312], "type_pb2": [129, 130, 134], "nx_add_edg": 129, "nx_del_edg": 129, "nx_update_edg": 129, "nx_add_nod": 130, "nx_del_nod": 130, "nx_update_nod": 130, "fd": [131, 136, 332], "storage_opt": [131, 136], "write_opt": [131, 136], "adaptor": 131, "result_path": [131, 136], "vertex_collect": 132, "edge_collect": 132, "report_typ": 134, "variati": 134, "node_num": [134, 336, 340], "has_nod": [134, 309], "has_edg": [134, 309], "node_data": 134, "edge_data": [134, 324], "neighbors_by_nod": 134, "succs_by_nod": 134, "preds_by_nod": 134, "neighbors_by_loc": 134, "succs_by_loc": 134, "preds_by_loc": 134, "deg_by_nod": 134, "in_deg_by_nod": 134, "out_deg_by_nod": 134, "deg_by_loc": 134, "in_deg_by_loc": 134, "out_deg_by_loc": 134, "nodes_by_loc": 134, "loc": 134, "multigraph": [134, 174, 176, 184, 188, 197, 202, 203, 229, 230, 238, 240, 253, 254, 255, 309, 312], "multidigraph": [134, 176, 188, 197, 202, 203, 240, 248, 249, 307, 309], "large_attr": [144, 313], "types_pb2": [144, 309], "operationtyp": 144, "opdef": [144, 148], "attrvalu": [144, 171, 340], "largeattrvalu": 144, "op_def_pb2": 148, "incoming_data": [150, 171, 316], "as_default": [150, 316], "alia": [155, 157, 163, 309, 316, 341], "k8s_gs_imag": [156, 316, 334], "k8s_etcd_imag": 156, "k8s_image_pull_secret": [156, 316], "k8s_coordinator_cpu": [156, 316], "k8s_coordinator_mem": [156, 316], "k8s_vineyard_cpu": [156, 316], "k8s_mars_worker_cpu": [156, 316], "k8s_mars_worker_mem": [156, 316], "k8s_mars_scheduler_cpu": [156, 316], "k8s_mars_scheduler_mem": [156, 316], "with_mar": [156, 316], "k8s_waiting_for_delet": [156, 316], "dataset_download_retri": 156, "k8s_deploy_mod": [156, 316], "kv": 156, "cooper": [157, 171], "\u02bbegograph": 157, "\u02bbegotensor": 157, "sample_se": [157, 341], "positive_sampl": [157, 341], "receptive_fn": [157, 341], "egotensor": [157, 165, 341], "egoflow": [157, 165, 341], "cora": [157, 169, 341], "convers": [157, 158, 318], "node_t": [157, 158, 169, 341], "edge_table_with_self_loop": [157, 341], "train_tabl": [157, 341], "val_tabl": [157, 341], "test_tabl": [157, 341], "dataset_fold": [157, 341], "decod": [157, 158, 159, 169, 341], "attr_typ": [157, 158, 159, 169, 341], "1433": [157, 169, 341], "attr_delimit": [157, 158, 159, 341], "learningbasedmodel": [157, 341], "categorical_attrs_desc": [157, 341], "_sample_se": [157, 341], "_positive_sampl": [157, 341], "_receptive_fn": [157, 341], "ego_flow": [157, 341], "src_ego_spec": [157, 341], "pos_src_ego_tensor": [157, 341], "identityencod": [157, 341], "widendeepencod": [157, 341], "feature_encod": [157, 341], "gcnconv": [157, 341], "sparseegographencod": [157, 341], "_encod": [157, 341], "conv_lay": [157, 341], "_supervised_loss": [157, 341], "full_graph_mod": [157, 341], "localtftrain": [157, 341], "model_fn": [157, 169, 341], "batch_szi": [157, 341], "load_graph": [157, 341], "server_id": [157, 341], "server_count": [157, 159, 169, 341], "tracker": [157, 169, 341], "bought": 158, "saturdai": 158, "morn": 158, "bigint": 158, "dst_id": [158, 159, 160, 162, 163, 169, 173], "shanghai": 158, "localfilesystem": 158, "pai": [158, 163, 164], "tab": 158, "s2": [158, 274], "215340": 158, "933091": 158, "grei": 158, "362519": 158, "097545": 158, "chapter": [158, 159, 161, 255, 292], "dscript": 158, "dentryfil": 158, "dtabl": 158, "odp": 158, "prj": 158, "define_str": 158, "node_sourc": 158, "edge_sourc": 158, "hash": [158, 171], "bucket_s": 158, "greatli": [158, 159, 321], "your_attr_typ": 158, "you_delimit": 158, "weightd": 158, "scr_id": 158, "10001": [158, 159, 160, 162], "feature1": 158, "10002": [158, 159, 160, 162], "feature2": 158, "10003": [158, 159, 160, 162], "feature3": 158, "123": 158, "124": 158, "\u02bbitem_node_decod": 158, "\u02bbuser_node_decod": 158, "\u02bbedge_decod": 158, "item_node_decod": 158, "user_node_decod": 158, "edge_decod": [158, 169], "graph_object": 158, "commod": 159, "swing": [159, 160], "30001": [159, 160, 162], "30002": [159, 160, 162], "30003": [159, 160, 162], "table_1": 159, "table_2": 159, "dest": 159, "10004": [159, 160], "20001": [159, 160, 162], "20003": [159, 160, 162], "20004": [159, 160, 162], "46": [159, 160, 162, 174, 296], "ui_decod": 159, "uv_decod": 159, "table_3": 159, "table_4": 159, "click_v": 159, "task_index": [159, 169], "task_count": 159, "atyp": 159, "job_nam": [159, 169], "worker_host": 159, "respond": 159, "necessarili": [159, 271], "serious": 159, "decreas": [159, 238, 240], "speak": 159, "client_count": [159, 169], "wait_for_clos": [159, 169], "matter": [159, 315], "infom": 160, "get_topologi": 160, "dst_type": 160, "figure1": 160, "topo": 160, "print_al": 160, "egde_typ": 160, "ravers": 160, "string_attr": 160, "src_node": 160, "dst_node": 160, "diment": 160, "dense_shap": 160, "arra": 160, "__next__": 160, "dimenti": 160, "table1": 160, "u_nod": 160, "traves": 160, "get_edg": 160, "inferfac": 160, "table2": 160, "table3": 160, "click_edg": 160, "table4": 160, "conduc": 161, "recept": [161, 165], "ai": 161, "meta_path": 161, "layer_id": 161, "famili": [161, 174, 212, 270, 298], "random_without_replac": 161, "ueri": 161, "default_neighbor_id": 161, "set_default_neighbor_id": [161, 170], "xx": 161, "set_padding_mod": 161, "circular": [161, 163, 213], "alogrithm": 162, "throw": 162, "nodesampl": 162, "node_sampl": 162, "by_ord": 162, "node_from": [162, 173], "edge_src": [162, 173], "edge_dst": [162, 173], "edgesampl": 162, "matur": 163, "dl": 163, "sheer": 163, "sink": 163, "generatortyp": [163, 173], "won": [163, 324], "cursor": 163, "ingo": 163, "query\u5bf9\u8c61": 163, "outneg": [163, 166], "inneg": [163, 166, 169], "candid": [163, 166], "u2i": 163, "ouv": 163, "func": 163, "edeg": 163, "src_1hop": 163, "dst_1hop": 163, "neg_i": 163, "neg_i_1hop": 163, "parmas_list": 163, "bodi": [163, 167, 275], "params_list": 163, "arrang": 163, "anonym": [163, 301], "src_attr": 163, "neg_attr": 163, "encode_fn": [163, 169], "src_atr": 163, "outnegv": 163, "gen1": 163, "gen2": 163, "circumst": 163, "sour": 163, "foewa": 163, "from_gener": [163, 169], "make_one_shot_iter": [163, 169], "get_next": [163, 169], "zhangjiak": 164, "cp27": 164, "cp27mu": 164, "linux_x86_64": 164, "sudo": [164, 333, 334], "autoconf": 164, "automak": 164, "libtool": 164, "submodul": [164, 167, 321], "your_wheel_nam": [164, 167], "test_cpp_ut": 164, "test_python_ut": 164, "fastgcn": [165, 341], "graphsaint": 165, "amd": 165, "oprat": 166, "object_typ": 166, "oprequest": 167, "req": 167, "oprespons": 167, "params_": 167, "tensors_": 167, "redirect": [167, 247], "rewrit": 167, "till": [167, 316], "happen": [167, 321, 324], "stitch": 167, "myoper": 167, "register_oper": 167, "opnam": 167, "randomsampl": 167, "writ": 167, "xxxsampler": 167, "kubeflow": 168, "reader": 168, "seek": 168, "litestr": 168, "char": [168, 171, 321], "getfiles": 168, "getrecordcount": 168, "register_file_system": 168, "myfilesystem": 168, "registr": 168, "ppi": 169, "train_supervis": 169, "gen_test_data": 169, "getopt": 169, "argv": 169, "cur_path": 169, "elif": 169, "102": [169, 305], "__name__": 169, "__main__": 169, "dirnam": 169, "rf": 169, "\u4f60\u9700\u8981\u628agen_test_data": 169, "py\u653e\u5230shell\u811a\u672c\u540c\u4e00\u76ee\u5f55\u4e0b": 169, "fi": 169, "sleep": 169, "case_bas": 169, "genetic_algorithm": 169, "neural_network": 169, "probabilistic_method": 169, "reinforcement_learn": 169, "rule_learn": 169, "bag": 169, "1033": 169, "103482": 169, "103515": 169, "31336": 169, "1061127": 169, "05882353": 169, "1106406": 169, "n_featur": 169, "node_decod": 169, "n_class": 169, "140": [169, 232], "n_hop": 169, "n_epoch": 169, "tripl": 169, "graph_object_cn": 169, "sample_gen": 169, "input_fn": 169, "sample_input_fn": 169, "float64": 169, "tensorshap": 169, "layer_featur": 169, "aggregate_fn": 169, "self_vec": 169, "neigh_vec": 169, "raw_feat_layer_index": 169, "layer_index": 169, "variable_scop": 169, "_layer": 169, "auto_reus": 169, "neigh_weight": 169, "get_vari": 169, "self_weight": 169, "output_shap": 169, "get_shap": 169, "neigh_mean": 169, "from_neigh": 169, "matmul": 169, "from_self": 169, "add_n": 169, "leaky_relu": 169, "depth_to_encod": 169, "h_self_vec": 169, "h_neighbor_vec": 169, "features_column": 169, "feature_column": 169, "numeric_column": 169, "loss_fn": 169, "train_op": 169, "global_step": 169, "get_global_step": 169, "estimatorspec": 169, "modekei": 169, "set_xxx": 170, "set_yyi": 170, "other_model": 170, "fill": [170, 210, 221, 231, 265], "nbr_id": 170, "set_default_int_attribut": 170, "set_default_float_attribut": 170, "set_default_string_attribut": 170, "set_inter_threadnum": 170, "intra": [170, 228, 231], "set_intra_threadnum": 170, "16mb": 170, "reset": 170, "enlarg": 170, "set_rpc_message_max_s": 170, "objectnam": 171, "degener": 171, "unspecifi": [171, 186], "consolidate_column": 171, "result_column": 171, "consolid": [171, 323, 330], "weight0": 171, "weight1": 171, "graph_nod": 171, "deseri": [171, 321], "detach": 171, "varaibl": 171, "lexic": 171, "classmethod": 171, "broken": 171, "save_to": 171, "path_": 171, "graphschema": [171, 309], "schema_path": 171, "currrent": 171, "object_id": [171, 172, 173], "filetyp": 171, "ordinari": 171, "f0": 171, "orc": [171, 320], "parquet": [171, 320], "graph_build": 171, "deprec": [171, 189, 287], "group_id": 171, "member_s": 171, "leader_student_id": 171, "student": 171, "member_student_id": 171, "group_for_teacher_stud": 171, "group_nam": 171, "establish_d": 171, "teacher_in_charge_id": 171, "teacher": 171, "lesson_num": 171, "avg_scor": 171, "student_id": 171, "salari": 171, "teacher_id": 171, "both_in_out": 171, "unambigu": 171, "orign": 171, "interactivequeri": [172, 314, 316, 340], "frontend_gremlin_endpoint": 172, "frontend_cypher_endpoint": 172, "gremlin_url": 172, "lifetim": 172, "traversal_sourc": 172, "graphtraversalsourc": 172, "cypher_driv": 172, "cypher_url": 172, "gremlin_cli": 172, "runtimeerror": [172, 316], "modern_graph_data_dir": 172, "tolist": [172, 322], "dtype": 173, "pywrap": 173, "nodefrom": 173, "get_handl": 173, "worker_count": 173, "base64": 173, "nstart": 174, "poweriterationfailedconverg": 174, "langvil": 174, "meyer": 174, "survei": [174, 262], "cites": 174, "ist": 174, "psu": 174, "edu": 174, "713792": 174, "jon": 174, "kleinberg": 174, "authorit": 174, "journal": [174, 243, 251, 268, 299, 302, 306], "acm": [174, 249, 300, 332], "604": 174, "1999": [174, 229, 230], "doi": [174, 244, 251, 286], "1145": 174, "324133": 174, "324140": 174, "cornel": 174, "kleinber": 174, "pdf": [174, 256, 258, 259], "load_centr": 174, "in_degree_centr": [174, 310], "networkxnotimpl": 174, "out_degree_centr": [174, 310], "equat": 174, "ax": 174, "eigenvalu": [174, 254], "virtu": 174, "perron": 174, "frobeniu": 174, "theorem": [174, 253, 265], "0e": 174, "strength": 174, "2f": 174, "networkxpointlessconcept": [174, 304], "networkxerror": [174, 180, 187, 189, 193, 194, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 244, 250, 253, 254, 255, 266, 269, 301, 309, 312], "eigenvector_centrality_numpi": 174, "discern": 174, "phillip": 174, "bonacich": 174, "american": 174, "sociologi": 174, "1170": 174, "1182": 174, "1986": [174, 298], "leonidzhukov": 174, "net": [174, 228], "hse": 174, "socialnetwork": 174, "oxford": [174, 207, 208, 257, 301], "press": [174, 207, 208, 255, 297, 300, 301], "usa": [174, 261, 262, 308], "pp": [174, 238, 241, 242, 243, 256, 262, 263, 300, 306], "169": 174, "x_i": 174, "a_": 174, "x_j": 174, "lambda_": 174, "distant": 174, "penal": 174, "strictli": [174, 228], "invers": [174, 253], "phi": 174, "sqrt": [174, 254], "adjacency_spectrum": 174, "720": 174, "leo": 174, "sociometr": 174, "psychometrika": 174, "1953": 174, "springer": [174, 263], "1007": [174, 208, 244], "bf02289026": 174, "has_path": [174, 310], "djikstra": 174, "floyd": 174, "warshal": 174, "bfs_edg": [174, 310], "depth_limit": 174, "core_numb": 174, "vladimir": 174, "batagelj": 174, "matjaz": 174, "zaversnik": 174, "ab": [174, 232, 233, 234, 248, 256, 260, 301, 303], "0310049": 174, "c_u": 174, "deg": [174, 228, 242, 309], "geometr": [174, 296, 310], "vw": 174, "hat": 174, "uv": [174, 242], "uw": 174, "tot": 174, "2deg": 174, "leftrightarrow": 174, "complete_graph": [174, 180, 309], "saram\u00e4ki": 174, "kivel\u00e4": 174, "onnela": 174, "kaski": 174, "kert\u00e9sz": 174, "027105": 174, "2007": [174, 256, 302], "jponnela": 174, "web_docu": 174, "a9": 174, "intens": 174, "coher": 174, "motif": 174, "065103": 174, "2005": [174, 250, 256], "sign": 174, "costantini": 174, "perugini": 174, "plo": 174, "e88669": 174, "fagiolo": 174, "76": 174, "026107": 174, "average_clust": [174, 310], "count_zero": 174, "c_v": 174, "nonzero": [174, 238, 255], "marcu": 174, "kaiser": 174, "0802": 174, "2512": 174, "g_to_add_to": [176, 177, 178], "nodes_for_cycl": 176, "add_path": [176, 178, 309], "add_star": [176, 177], "nodes_for_path": 177, "add_cycl": [177, 178], "nodes_for_star": 178, "star": [178, 215, 224], "middl": 178, "cnbor": 180, "with_data": 181, "empty_graph": [181, 222], "frequenc": 183, "width": 183, "2m": [184, 262], "prevent": 187, "err": 187, "frozen": [187, 192], "unfreez": 187, "frozen_graph": 187, "unfrozen_graph": 187, "is_frozen": 187, "neighbour": 189, "freez": [192, 310], "signifi": [193, 194], "nodelist": [197, 236], "selfloop_edg": [197, 202, 238, 240], "number_of_selfloop": [197, 203], "selfloop": [202, 203, 236, 242], "nloop": 202, "nodes_with_selfloop": [202, 203], "datadict": [203, 309], "datavalu": 203, "attrnam": [203, 340], "edgeit": 203, "ekei": 203, "graph_atlas_g": 207, "linearli": [207, 223], "ronald": [207, 208, 298], "robin": [207, 208], "wilson": [207, 208], "1998": [207, 208], "111223": 208, "112222": 208, "automorph": [208, 281], "graph_atla": 208, "expens": 208, "popul": [208, 209, 211, 212, 214, 216, 219, 221, 223, 224, 227, 238, 240, 241, 243, 245, 246, 247, 253, 254, 255, 261, 262, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 288, 289, 291, 292, 293, 294, 295, 296, 304, 311], "book": 208, "violat": 208, "lexicograph": 208, "nondecreas": 208, "001111": 208, "000112": 208, "1008": 208, "3333444": 208, "3333336": 208, "1012": 208, "1213": 208, "1244555": 208, "1244456": 208, "perfectli": 209, "ari": [209, 219], "height": 209, "children": [209, 219, 303], "barbel": [210, 221], "bell": 210, "p_": [210, 242, 256], "mere": [210, 221], "aldou": [210, 221], "jim": [210, 221], "binomi": 211, "leftmost": 211, "ci_n": 212, "x_1": 212, "x_2": 212, "x_m": 212, "mod": [212, 226, 255, 274], "subfamili": 212, "ladder": [213, 220], "cl_n": 213, "k_n": 214, "is_direct": [214, 309], "subset_s": 215, "multipartit": [215, 226], "tripartit": 215, "bc": 215, "complete_bipartite_graph": 215, "c_n": 216, "hierarch": 217, "dorogovtsev": 217, "goltsev": 217, "mend": 217, "mat": 217, "0112143": 217, "kw": [218, 316], "unknown": [218, 321], "abc": 218, "rightmost": 219, "jame": 219, "andrew": 219, "storer": 219, "birkhaus": 219, "boston": 219, "2001": [219, 232, 240, 245, 247, 255, 264, 322], "225": [219, 309], "lollipop": 221, "k_m": 221, "p_n": [221, 223], "etext": 221, "turan": 226, "disjoint": [226, 237, 275], "2r": 226, "tau1": 228, "tau2": 228, "mu": 228, "average_degre": 228, "min_degre": 228, "max_degre": 228, "min_commun": 228, "max_commun": 228, "lfr": 228, "mathrm": 228, "expon": 228, "reassign": [228, 266], "affili": [228, 336], "random_st": [228, 231, 232, 233, 234, 236, 238, 240, 242, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 263, 264, 265, 269, 301, 304, 306], "exceededmaxiter": 228, "250": 228, "frozenset": [228, 311], "rewir": [228, 230, 234, 266, 269], "wire": 228, "robust": 228, "somewhat": 228, "narrow": 228, "andrea": 228, "lancichinetti": 228, "santo": [228, 232, 233, 234], "fortunato": [228, 232, 233, 234], "filippo": 228, "radicchi": 228, "phy": [228, 240, 245, 246, 247, 250], "rev": [228, 240, 245, 246, 247, 250], "046110": 228, "santofortunato": 228, "caveman": [229, 230, 234], "unclear": [229, 230], "connected_caveman_graph": [229, 235], "watt": [229, 230, 240], "phenomenon": [229, 230], "amer": [229, 230], "493": [229, 230], "527": [229, 230], "caveman_graph": 230, "p_in": [231, 232, 233], "p_out": [231, 232, 233], "gaussian": [231, 257, 258, 259], "drawn": [231, 259], "varianc": 231, "probabilti": [231, 234], "random_partition_graph": [231, 236], "ulrik": 231, "brand": 231, "marco": 231, "gaertler": 231, "dorothea": 231, "wagner": 231, "11th": 231, "europ": 231, "symp": 231, "plant": [232, 233], "random_partition_model": 232, "condon": 232, "karp": 232, "algor": 232, "116": 232, "486": [232, 233, 234], "174": [232, 233, 234], "0906": [232, 233, 234], "0612": [232, 233, 234], "relax": 234, "februari": 234, "num_cliqu": 235, "clique_s": 235, "ring": 235, "stochast": [236, 310], "densiti": [236, 238, 256, 258], "symmetr": [236, 255, 278, 282, 288, 290, 301], "300": [236, 305], "prob": 236, "450": 236, "quotient_graph": 236, "relabel": 236, "245": 236, "348": 236, "405": 236, "051": 236, "022": 236, "planted_partition_graph": 236, "gaussian_random_partition_graph": 236, "gnp_random_graph": [236, 263, 264, 265], "holland": 236, "laskei": 236, "leinhardt": 236, "blockmodel": 236, "109": 236, "1983": 236, "windmil": 237, "contract": 237, "wd": 237, "deg_sequ": [238, 239, 240, 241, 243], "pseudograph": [238, 240], "nonneg": [238, 240], "is_graph": [238, 244], "graphic": [238, 240, 243, 244], "realiz": [238, 240, 243, 266, 267, 268, 269, 296, 321], "tend": 238, "poisson": 238, "constant": [238, 340], "siam": [238, 243, 249], "167": 238, "random_sequ": 238, "random_powerlaw_tree_sequ": 238, "5000": 238, "actual_degre": 238, "in_degree_sequ": 240, "out_degree_sequ": 240, "directed_random": 240, "configuration_model": [240, 241, 244], "finit": [240, 242, 255], "strogatz": 240, "026118": 240, "din": 240, "dout": 240, "in_deg_sequ": 241, "out_deg_sequ": 241, "kleitman": [241, 243], "valenc": [241, 243], "1973": [241, 243], "w_0": 242, "w_1": 242, "ldot": 242, "w_u": [242, 256, 259], "w_v": [242, 256, 259], "sum_k": 242, "w_k": 242, "z": [242, 255, 256, 260], "mathcal": 242, "ne": 242, "uu": 242, "fan": [242, 256, 332], "chung": [242, 256], "lu": [242, 332], "ann": 242, "combinator": [242, 302], "145": 242, "2002": 242, "joel": 242, "miller": 242, "aric": [242, 256], "hagberg": [242, 256], "waw": [242, 256], "alan": 242, "friez": 242, "paul": 242, "horn": 242, "pawe\u0142": 242, "pra\u0142at": 242, "lnc": 242, "6732": 242, "115": 242, "havel": 243, "hakimi": 243, "networkxexcept": 243, "resort": 243, "496": 243, "506": 243, "1962": [243, 261, 262, 308], "d_m": 244, "uniform": [244, 256, 265], "networkxunfeas": 244, "moshen": 244, "bayati": 244, "jeong": 244, "han": 244, "kim": 244, "amin": 244, "saberi": 244, "algorithmica": 244, "58": 244, "860": 244, "910": 244, "s00453": 244, "009": 244, "9340": 244, "gn": [245, 308], "a_k": 245, "krapivski": [245, 246, 247, 250], "redner": [245, 246, 247], "066123": [245, 247], "gnc": 246, "growth": [246, 306], "036118": 246, "2005k": 246, "gnr": 247, "probabilii": 247, "self_loop": 248, "preferenti": 248, "proport": 248, "peterson": [248, 291], "nichola": 248, "bori": 248, "pittel": 248, "preprint": 248, "1311": 248, "5961": 248, "2013": [248, 268], "gamma": 249, "delta_in": 249, "delta_out": 249, "bia": 249, "bollob\u00e1": 249, "borg": 249, "chay": 249, "riordan": 249, "fourteenth": 249, "annual": 249, "symposium": 249, "132": [249, 264], "139": 249, "diverg": [250, 310], "retent": 250, "disallow": 250, "ispolatov": 250, "yuryev": 250, "061911": 250, "inclus": 251, "knudsen": 251, "michael": 251, "carsten": 251, "wiuf": 251, "markov": 251, "chain": 251, "1155": 251, "190836": 251, "radiu": [252, 257, 258, 259], "chordal": 253, "chord": [253, 267], "mildli": 253, "lubotzki": 253, "invari": 253, "birkh\u00e4us": 253, "verlag": 253, "basel": 253, "1994": 253, "marguli": 254, "gabber": 254, "galil": 254, "palei": 255, "pz": 255, "f_q": 255, "odd": 255, "bolloba": 255, "cambridg": 255, "theta": [256, 259], "po": [256, 257, 258, 259, 260], "p_dist": [256, 258], "geograph": [256, 259], "rectangular": [256, 260], "ge": [256, 260], "prone": 256, "le": [256, 260, 300], "euclidean": [256, 257, 258, 259, 260], "taxicab": [256, 260], "expovari": [256, 259], "masuda": 256, "miwa": 256, "konno": 256, "036108": 256, "milan": 256, "bradonji\u0107": 256, "allon": 256, "percu": 256, "giant": 256, "antoni": 256, "bonato": 256, "209": 256, "216": 256, "cube": [257, 258, 259, 277, 294], "kdtree": [257, 258, 259], "minkowski": [257, 258, 259], "infin": [257, 258, 259], "erd\u0151": [257, 258, 259], "r\u00e9nyi": [257, 258, 259], "twenti": 257, "2d": [257, 258, 259, 309, 312], "deviat": [257, 258, 259], "gauss": [257, 258, 259], "penros": [257, 258], "mathew": [257, 258], "soft": 258, "exp": [258, 260], "annal": 258, "2016": 258, "986": 258, "1028": 258, "summat": 259, "nodethr": 259, "cole": 259, "maclean": 259, "blog": 259, "thesi": [259, 265], "waxman": 260, "x_min": 260, "y_min": 260, "x_max": 260, "y_max": 260, "Their": 260, "incompat": [260, 321], "rout": 260, "multipoint": 260, "ieee": [260, 268, 269, 301, 306], "1988": 260, "1617": 260, "1622": 260, "harari": [261, 262, 310], "h_": [261, 262], "ceil": 261, "kn": 261, "hnm_harary_graph": 261, "weisstein": 261, "eric": 261, "mathworld": [261, 270, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 289], "wolfram": [261, 270, 274, 276, 278, 279, 280, 281, 282, 283, 284, 285, 289], "hararygraph": 261, "nat": [261, 262, 308], "acad": [261, 262, 308], "sci": [261, 262, 308], "1142": [261, 262, 308], "1146": [261, 262, 308], "floor": 262, "hkn_harary_graph": 262, "boesch": 262, "satyanarayana": 262, "suffel": 262, "reliabl": 262, "synthesi": 262, "99": [262, 340], "2009": [262, 302], "uniform_random_intersection_graph": [263, 264], "nikoletsea": 263, "raptopoulo": 263, "spiraki": 263, "icalp": 263, "\u0131az": 263, "karhum": 263, "aki": 263, "lepist": 263, "sannella": 263, "vol": [263, 306], "3142": 263, "lectur": 263, "1029": 263, "1040": 263, "godehardt": 264, "jaworski": 264, "electron": [264, 302], "singer": 265, "cohen": 265, "1995": 265, "phd": 265, "john": [265, 282], "hopkin": 265, "scheinerman": 265, "evolut": 265, "2000": 265, "156": 265, "nkk": [266, 267], "degree_seq": 266, "n_edges_add": 266, "li": [266, 269], "unsatur": 266, "proof": 266, "tillman": [266, 267, 269], "markopoul": [266, 267, 268, 269, 301], "butt": [266, 267, 301], "gjoka": [266, 267, 268, 269], "2k": [266, 267], "kdd": [266, 267], "seconnd": 267, "joint_degre": [268, 269], "diagon": [268, 284], "joint_degree_graph": 268, "kurant": 268, "5k": 268, "infocom": [268, 269, 301], "stanton": 268, "pinar": 268, "prescrib": 268, "experiment": [268, 316], "n_th": 270, "m_1": 270, "singleton": [270, 309], "m_2": 270, "m_i": 270, "mycielskian": 270, "m_": 270, "mycielskigraph": 270, "p_2": 270, "chromat": [271, 302], "2n": 271, "bigcup": 271, "nonisomporph": 272, "adjanc": 272, "matric": [272, 301], "nonisomorph": 273, "shift_list": 274, "cubic": [274, 277, 278, 281, 282, 288, 290, 291, 296], "lcf": [274, 276, 278, 280, 282, 288, 290], "lederberg": 274, "coxet": 274, "frucht": [274, 281], "hamiltonian": [274, 276, 281, 282, 285, 290, 296], "symmetri": [274, 281], "dodecahedral_graph": 274, "desargues_graph": 274, "heawood_graph": 274, "pappus_graph": 274, "s1": 274, "sk": 274, "v_current": 274, "shiftlist": 274, "heawood": [274, 282], "lcfnotat": 274, "bull": 275, "planar": [275, 278, 279, 281], "pendant": 275, "leg": 275, "chv\u00e1tal": 276, "370": 276, "chv": 276, "c3": [276, 288, 289], "a1tal_graph": 276, "chvatalgraph": 276, "platon": [277, 280, 285, 289, 293, 295], "hypercub": 277, "aris": 277, "desargu": 278, "desarguesgraph": 278, "kite": [279, 286], "diamondgraph": 279, "dodecahedr": 280, "dodecahedron": 280, "regular_dodecahedron": 280, "dodecahedralgraph": 280, "fruchtgraph": 281, "cage": 282, "perci": 282, "nonplanar": 282, "girth": 282, "heawoodgraph": 282, "win": [282, 291], "tue": [282, 291], "nl": [282, 291], "aeb": [282, 291], "housegraph": [283, 284], "pentatop": 284, "icosahedr": 285, "icosahedron": 285, "icosahedralgraph": 285, "krackhardt": 286, "andr": 286, "beverlei": 286, "carol": 286, "dian": 286, "fernando": 286, "garth": 286, "heather": 286, "ik": 286, "jane": 286, "polit": 286, "landscap": 286, "cognit": 286, "quarterli": 286, "342": [286, 309], "369": 286, "2307": 286, "2393394": 286, "jstor": 286, "june": 286, "1990": 286, "graph_descript": 287, "ltype": 287, "adjacencylist": 287, "from_dict_of_list": 287, "from_edgelist": 287, "xlist": 287, "c_4": 287, "w2": 287, "vk": 287, "wk": 287, "vj": 287, "wj": 287, "moebiu": 288, "kantor": 288, "m\u00f6biu": 288, "petersen": [288, 291], "b6biu": 288, "93kantor_graph": 288, "octahedr": 289, "octahedron": 289, "shake": 289, "hi": [289, 299, 308], "her": 289, "partner": 289, "handshak": 289, "cocktail": 289, "octahedralgraph": 289, "tur": 289, "a1n_graph": 289, "special_cas": 289, "pappu": 290, "juliu": 291, "counterexampl": [291, 296], "bridgeless": 291, "colour": 291, "drg": 291, "maze": 292, "sedgewick": 292, "3rd": 292, "tetrahedr": 293, "k4": 293, "w4": 293, "grpah": 293, "tetrahedron": [293, 295, 296], "archimedean": [294, 295], "octagon": 294, "triangular": 294, "truncated_cub": 294, "coolmath": 294, "polyhedra": 294, "hexagon": 295, "equilater": 295, "truncated_tetrahedron": 295, "tutt": 296, "polyhedr": 296, "tait": 296, "conjectur": 296, "polyhedron": 296, "multipli": 296, "davi": 297, "southern": 297, "women": 297, "gardner": 297, "1941": 297, "south": 297, "chicago": 297, "il": 297, "florentin": 298, "breiger": 298, "philippa": 298, "pattison": 298, "cumul": 298, "dualiti": 298, "septemb": 298, "zachari": 299, "karat": 299, "club": 299, "mr": [299, 302], "offic": 299, "wayn": 299, "fission": 299, "anthropolog": 299, "452": 299, "473": 299, "1977": 299, "coappear": 300, "novel": 300, "miser": 300, "knuth": 300, "1993": 300, "graphbas": 300, "combinatori": 300, "york": 300, "spectral": [301, 310], "forg": 301, "sgf": 301, "eigenstructur": 301, "synthes": 301, "percentag": 301, "telecommun": 301, "bernoulli": 301, "baldesi": 301, "1801": 301, "01715": 301, "karate_club_graph": 301, "sud": 302, "81": 302, "810": 302, "herzberg": 302, "murti": 302, "polynomi": 302, "am": 302, "708": 302, "717": 302, "sander": 302, "torsten": 302, "7pp": 302, "2529816": 302, "encyclopedia": 302, "dec": 302, "2019": 302, "nil": 303, "arboresc": 303, "downward": 303, "synthet": 303, "trie": 303, "recov": [303, 316], "pr\u00fcfer": 304, "from_prufer_sequ": 304, "forest_str": 304, "triad_nam": 305, "003": 305, "012": 305, "021d": 305, "021u": 305, "021c": 305, "111d": 305, "111u": 305, "030t": 305, "030c": 305, "120d": 305, "120u": 305, "120c": 305, "triadic_censu": 305, "10000": 306, "autonom": [306, 308], "elmokashfi": 306, "tier": 306, "mid": 306, "adv": 306, "bidirect": 306, "peer": 306, "commerci": 306, "agreement": 306, "kvalbein": 306, "dovroli": 306, "bgp": 306, "1250": 306, "1261": 306, "octob": 306, "reweight": 307, "mathematician": 308, "frank": 308, "incoming_graph_data": [309, 312], "default_label": [309, 312], "to_networkx_graph": 309, "110": 309, "protect": 309, "bracket": 309, "shortcut": 309, "nbrsdict": 309, "persion": 309, "miscellan": 309, "__contains__": 309, "__getitem__": 309, "adj_dict": 309, "atlasview": 309, "__iter__": 309, "niter": 309, "__len__": 309, "nnode": 309, "u_of_edg": 309, "v_of_edg": 309, "ebunch_to_add": 309, "preced": 309, "wn2898": 309, "node_for_ad": 309, "nodes_for_ad": 309, "hello": 309, "k3": 309, "attrdict": 309, "behav": 309, "idiom": 309, "foovalu": 309, "adj_it": 309, "nbrdict": 309, "adjlist_inner_dict_factori": 309, "neighbordict": 309, "adjlist_outer_dict_factori": 309, "adjlistdict": 309, "clear_edg": 309, "deepcopi": 309, "fresh": [309, 318], "__class__": 309, "degreeview": 309, "nd_view": 309, "edge_attr_dict_factori": 309, "neighborattrdict": 309, "edge_subgraph": 309, "edgeview": 309, "edgedataview": 309, "ddict": 309, "get_edge_data": 309, "edge_dict": 309, "safe": 309, "graph_attr_dict_factori": 309, "graph_cache_factori": 309, "keyerror": 309, "edge_ind": 309, "data_dictionari": 309, "is_multigraph": 309, "corespond": 309, "nbunch_it": 309, "membership": 309, "exhaust": 309, "possibli": 309, "node_attr_dict_factori": 309, "nodeattrdict": 309, "node_dict_factori": 309, "nodedict": 309, "nodeview": 309, "nodedataview": 309, "nodedata": 309, "bar": 309, "nedg": 309, "Will": 309, "nodes_for_remov": 309, "set_edge_data": 309, "set_node_data": 309, "set_item": 309, "adjedgeattr": 309, "dd": 309, "nodeattr": 309, "netowrkx": 309, "to_undirected_class": 309, "itertool": 309, "mg": 309, "nd_iter": 309, "outedgeview": 309, "in_edg": 309, "outedgedataview": 309, "has_predecessor": 309, "has_successor": 309, "indegreeview": 309, "inedgeview": 309, "outdegreeview": 309, "pred": 309, "succ": 309, "_convert_arrow_to_dynam": [310, 312], "atla": 310, "triad": 310, "mycielski": 310, "sudoku": 310, "edgetyp": 311, "utf": [311, 322], "filenam": [311, 322], "rb": 311, "bz2": 311, "uncompress": 311, "whitespac": 311, "obsolet": 311, "write_edgelist": 311, "fh": 311, "textlin": 311, "parse_edgelist": 311, "read_adjlist": 311, "marker": 311, "v_0": 312, "v_1": 312, "add_label": 313, "talk": 315, "output_to_cli": [315, 332], "person_id": [315, 322], "400": 315, "api_cli": 316, "apicli": 316, "deregist": 316, "256mi": 316, "4gi": 316, "5gi": 316, "__enter__": 316, "__exit__": 316, "exc_typ": 316, "exc_valu": 316, "exc_tb": 316, "unregist": 316, "preemptiv": 316, "burstabl": 316, "qo": 316, "preempt": 316, "ifnotpres": 316, "k8s_vineyard_imag": 316, "fallback": 316, "512mi": 316, "etcd_addr": 316, "etcd01": 316, "etcd02": 316, "etcd03": 316, "4mi": 316, "k8s_coordinator_pod_node_selector": 316, "tinyurl": 316, "3nx6k7ph": 316, "k8s_engine_pod_node_selector": 316, "path1": 316, "path2": 316, "claimnam": 316, "dangling_timeout_second": 316, "heartbeat": 316, "dangl": 316, "config_fil": 316, "reject": 316, "resource_nam": 316, "sigint": 316, "sigterm": 316, "signal": 316, "get_vineyard_object_mapping_t": 316, "with_cyph": 316, "recreat": 316, "load_from_gar": [316, 320], "restore_from_pvc": 316, "kubeconfig": 316, "run_fetch": 316, "lock": 316, "store_to_pvc": 316, "backup": 316, "graph_id": 316, "describl": 317, "maxwel": 318, "binlog": 318, "buildgartfrag": 318, "etcd_endpoint": 318, "gartfrag": 318, "etcd_client": 318, "make_shar": 318, "mpi_comm_world": 318, "schema_kei": 318, "gart_schema_p": 318, "to_str": 318, "edge_config_str": 318, "as_str": 318, "gart_blob_m": 318, "_p": 318, "config_str": 318, "edge_config": 318, "inner_vertices_it": 318, "elabel": [318, 323], "edge_it": 318, "hive": 320, "ordered_by_sourc": 320, "ordered_by_dest": 320, "graph_yaml_path": 320, "broader": 321, "ffi": 321, "agnost": 321, "grin_": 321, "partitioned_graph": 321, "edge_type_nam": 321, "boundari": 321, "sync_properti": 321, "grin_partitioned_graph": 321, "grin_partit": 321, "grin_graph": 321, "grin_get_local_graph_from_partit": 321, "grin_edge_typ": 321, "etyp": 321, "grin_get_edge_type_by_nam": 321, "grin_vertex_type_list": 321, "src_vtype": 321, "grin_get_src_types_from_edge_typ": 321, "dst_vtype": 321, "grin_get_dst_types_from_edge_typ": 321, "src_vtypes_num": 321, "grin_get_vertex_type_list_s": 321, "dst_vtypes_num": 321, "grin_vertex_typ": 321, "grin_get_vertex_type_from_list": 321, "grin_vertex_properti": 321, "dst_vp": 321, "grin_get_vertex_property_by_nam": 321, "grin_null_vertex_properti": 321, "grin_vertex_property_t": 321, "dst_vpt": 321, "grin_get_vertex_property_table_by_typ": 321, "grin_datatyp": 321, "dst_vp_dt": 321, "grin_get_vertex_property_data_typ": 321, "grin_vertex_list": 321, "__src_vl": 321, "grin_get_vertex_list": 321, "_src_vl": 321, "grin_select_type_for_vertex_list": 321, "src_vl": 321, "grin_select_master_for_vertex_list": 321, "src_vl_num": 321, "grin_get_vertex_list_s": 321, "grin_vertex": 321, "grin_get_vertex_from_list": 321, "ifdef": 321, "grin_trait_select_edge_type_for_adjacent_list": 321, "grin_adjacent_list": 321, "_adj_list": 321, "grin_get_adjacent_list": 321, "grin_direct": 321, "adj_list": 321, "grin_select_edge_type_for_adjacent_list": 321, "adj_lsit": 321, "endif": 321, "al_sz": 321, "grin_get_adjacent_list_s": 321, "ifndef": 321, "grin_edg": 321, "grin_get_edge_from_adjacent_list": 321, "grin_get_edge_typ": 321, "grin_equal_edge_typ": 321, "grin_get_neighbor_from_adjacent_list": 321, "grin_get_value_from_vertex_property_t": 321, "grin_vertex_ref": 321, "uref": 321, "grin_get_vertex_ref_for_vertex": 321, "recogin": 321, "u_master_partit": 321, "grin_get_master_partition_from_vertex_ref": 321, "send_valu": 321, "fragment_group_id": [321, 323], "get_partitioned_graph_by_object_id": 321, "local_partit": 321, "grin_get_local_partition_list": 321, "pnum": 321, "grin_get_partition_list_s": 321, "grin_get_partition_from_list": 321, "disclaim": 321, "sacrif": 321, "boilerpl": 321, "ineffici": 321, "enorm": 321, "grin_assume_all_vertex_property_local_complet": 321, "grin_assume_master_vertex_property_local_complet": 321, "grin_assume_by_type_all_vertex_property_local_complet": 321, "grin_assume_by_type_master_vertex_property_local_complet": 321, "assumpt": 321, "wider": 321, "undefin": 321, "tell": 321, "granular": 321, "grin_frag": 321, "storagespecif": 321, "vertexhandl": 321, "goe": 321, "grin_edge_list": 321, "grin_partition_list": 321, "grin_enable_": 321, "_list_arrai": 321, "vertexlist": 321, "grin_enable_vertex_list_arrai": 321, "vl": 321, "idx": 321, "sz": 321, "caller": 321, "_list_iter": 321, "grin_enable_vertex_list_iter": 321, "grin_vertex_list_iter": 321, "grin_get_vertex_list_begin": 321, "grin_get_next_vertex_list_it": 321, "vli": 321, "grin_is_vertex_list_end": 321, "grin_get_vertex_from_it": 321, "grin_get_vertex_type_by_nam": 321, "vtype": 321, "grin_vertex_property_list": 321, "grin_get_vertex_properties_by_nam": 321, "vprop": 321, "vpl": 321, "seperatedli": 321, "with_vertex_label": 321, "with_edge_label": 321, "facili": 321, "recogn": [321, 322], "grin_serialize_vertex_ref": 321, "grin_deserialize_to_vertex_ref": 321, "grin_get_vertex_from_vertex_ref": 321, "vref": 321, "recgon": 321, "reciev": 321, "borrow": 321, "vertexcut": 321, "centur": 321, "edgecut": 321, "repect": 321, "judgement": 321, "columnar": 322, "gear": 322, "compromis": 322, "timestamp": 322, "strict": 322, "foward": 322, "ingestor": [322, 330], "multitud": 322, "exemplifi": 322, "said": 322, "grpc_port": 322, "gremlin_port": 322, "grpc_endpoint": 322, "conn": 322, "add_vertex_label": 322, "v_label_nam": 322, "add_primary_kei": 322, "pk_name": 322, "prop_name_1": 322, "prop_name_2": 322, "add_edge_label": 322, "e_label_nam": 322, "prop_name_3": 322, "add_properti": 322, "xmln": 322, "xsi": 322, "w3": 322, "xmlschema": 322, "schemaloc": 322, "xsd": 322, "modelvers": 322, "gremlinexampl": 322, "codehau": 322, "mojo": 322, "classpath": 322, "mainclass": 322, "compliancelevel": 322, "killaft": 322, "credenti": 322, "valuemap": [322, 340], "println": 322, "javascript": 322, "catch": 322, "data_load": 322, "load_tool": 322, "xzvf": 322, "alic": 322, "bob": 322, "person_id_1": 322, "20210611151923": 322, "seper": 322, "mapreduc": 322, "data_output": 322, "55555": 322, "propertiescolmap": 322, "srclabel": 322, "dstlabel": 322, "srcpkcolmap": 322, "dstpkcolmap": 322, "mb": 322, "columnidx": 322, "_success": 322, "xxxxx": 322, "sst": 322, "00000": 322, "00001": 322, "00002": 322, "load_data": 322, "test_store_servic": 322, "insert_vertex": 322, "vertexrecordkei": 322, "insert_vertic": 322, "update_vertex_properti": 322, "delel": 322, "delete_vertex": 322, "vertex_pk": 322, "delete_vertic": 322, "insert_edg": 322, "edgerecordkei": 322, "update_edge_properti": 322, "delete_edg": 322, "edge_pk": 322, "remote_flush": 322, "snapshot_id": 322, "src_vertex_kei": 322, "dst_vertex_kei": 322, "realtimewrit": 322, "provis": 322, "lapp": 322, "reinstal": 322, "pv_name": 322, "pod_nam": [322, 330, 335], "logback": 322, "arrowfragmentgroup": 323, "spread": 323, "ipc": 323, "docket": 323, "string_oid": 323, "ipcclient": 323, "writeout": 323, "nb": 323, "fragmentloc": 323, "gettotalnodesnum": 323, "labeltyp": 323, "vlabel": 323, "vertex_data_t": 323, "edge_data_t": 323, "willing": 324, "implic": 324, "polymorph": 324, "instant": 324, "aka": 324, "applciat": 324, "pygrap": [324, 325], "frist": 324, "from_numpi": 324, "bind_sssp1": 324, "delai": 324, "screen": 324, "bind_sssp2": 324, "vertex_bal": 325, "vcut": 325, "ecut": 325, "repo_hom": 329, "gsconfig": 329, "syoov": 330, "79b44f7b58": 330, "ctmqb": 330, "10m": 330, "9m53": 330, "9m46": 330, "6dd67c65fc": 330, "gn4mb": 330, "15334625083466732": 330, "33d": 330, "kubetl": 330, "\u7684\u56fe\u5206\u6790\u5f15\u64ce\u7ee7\u627f\u4e86": 332, "\u8be5\u7cfb\u7edf\u4e8e": 332, "\u4e0a\u9996\u6b21\u63d0\u51fa\u5e76\u83b7\u5f97\u6700\u4f73\u8bba\u6587\u5956": 332, "\u4e0e\u4ee5\u5f80\u7684\u7cfb\u7edf\u7684\u4e0d\u540c": 332, "\u652f\u6301\u5c06\u4e32\u884c\u56fe\u7b97\u6cd5\u81ea\u52a8\u5e76\u884c\u5316": 332, "\u5728": [332, 333, 334, 335, 336, 339, 340, 341, 342], "\u4e2d": [332, 334, 335, 336, 342], "\u53ea\u9700\u8fdb\u884c\u5f88\u5c0f\u7684\u66f4\u6539\u5373\u53ef\u8f7b\u677e\u5730\u5c06\u4e32\u884c\u7b97\u6cd5\u5373\u63d2\u5373\u7528": 332, "\u4f7f\u5176\u5e76\u884c\u5316\u7684\u8fd0\u884c\u5728\u5206\u5e03\u5f0f\u73af\u5883": 332, "\u5e76\u9ad8\u6548\u5730\u5904\u7406\u5927\u89c4\u6a21\u56fe\u6570\u636e": 332, "\u9664\u4e86\u6613\u4e8e\u7f16\u7a0b\u5916": 332, "\u8fd8\u88ab\u8bbe\u8ba1\u4e3a\u9ad8\u6548\u4e14\u53ef\u62d3\u5c55\u7684\u7cfb\u7edf": 332, "\u53ef\u7075\u6d3b\u5e94\u5bf9\u73b0\u5b9e\u4e2d\u56fe\u5e94\u7528\u591a\u53d8\u7684\u89c4\u6a21": 332, "\u591a\u6837\u6027\u548c\u590d\u6742\u6027": 332, "\u56fe\u5206\u6790\u5f15\u64ce\u5185\u7f6e\u4e86\u8bb8\u591a\u5e38\u7528\u7684\u56fe\u5206\u6790\u7b97\u6cd5": 332, "\u5305\u62ec\u8fde\u901a\u6027\u5206\u6790\u7b97\u6cd5": 332, "\u8def\u5f84\u5206\u6790\u7b97\u6cd5": 332, "\u793e\u533a\u68c0\u6d4b\u548c\u4e2d\u5fc3\u5ea6\u8ba1\u7b97\u7b49\u7c7b\u578b": 332, "\u5185\u7f6e\u7b97\u6cd5\u53ef\u4ee5\u5728\u56fe\u4e0a\u8f7b\u677e\u8c03\u7528": 332, "\u521b\u5efa\u9ed8\u8ba4": 332, "\u5e76\u52a0\u8f7d\u5c5e\u6027\u56fe": 332, "\u5927\u591a\u6570\u5185\u7f6e\u7b97\u6cd5\u53ea\u652f\u6301\u5728\u7b80\u5355\u56fe\u4e0a\u8fdb\u884c\u8ba1\u7b97": 332, "\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5148\u901a\u8fc7\u9876\u70b9\u548c\u8fb9\u7684\u7c7b\u578b\u6765\u751f\u6210\u4e00\u4e2a\u7b80\u5355\u56fe": 332, "result_lpa": 332, "result_sssp": 332, "\u5185\u7f6e\u7b97\u6cd5\u7684\u5b8c\u6574\u5217\u8868\u5982\u4e0b\u6240\u793a": 332, "\u5177\u4f53\u67d0\u4e2a\u7b97\u6cd5\u662f\u5426\u652f\u6301\u5c5e\u6027\u56fe\u4e5f\u5728\u5176\u6587\u6863\u8fdb\u884c\u4e86\u63cf\u8ff0": 332, "\u7b97\u6cd5\u7684\u652f\u6301\u5217\u8868\u4f1a\u968f\u7740\u4e0d\u65ad\u589e\u52a0\u6301\u7eed\u66f4\u65b0\u4e2d": 332, "\u5f53\u5b8c\u6210\u4e00\u6b21\u56fe\u8ba1\u7b97": 332, "\u8ba1\u7b97\u7ed3\u679c\u4f1a\u88ab\u5305\u88c5\u6210": 332, "\u7c7b": [332, 342], "\u4fdd\u5b58\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4\u7684\u5185\u5b58\u4e2d": 332, "\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06\u7ed3\u679c\u4f20\u5230\u5ba2\u6237\u7aef\u8fdb\u884c\u5904\u7406": 332, "\u6216\u662f\u5199\u5165\u4e91\u4e2d\u67d0\u4f4d\u7f6e\u6216\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf": 332, "\u652f\u6301\u7528\u6237\u901a\u8fc7\u4ee5\u4e0b\u65b9\u6cd5\u6765\u83b7\u53d6\u7ed3\u679c\u6570\u636e": 332, "\u8f6c\u5316\u4e3a\u76f8\u5e94\u6570\u636e\u7c7b\u578b": 332, "\u6216\u5199\u5165": 332, "\u6216\u672c\u5730\u76ee\u5f55\u4e2d": 332, "pod\u4e2d\u7684\u672c\u5730\u76ee\u5f55": 332, "\u6216\u5199\u5165\u672c\u5730\u7684": 332, "lpa_result": 332, "\u6570\u636e\u7ed3\u6784": 332, "\u6b64\u5916": [332, 336], "\u5982": [332, 335, 338, 340], "\u5feb\u901f\u4e0a\u624b": [332, 338], "\u4e2d\u6240\u793a": 332, "\u7528\u6237\u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u52a0\u56de\u5230\u8be5\u56fe\u6570\u636e\u4e2d\u4f5c\u4e3a\u9876\u70b9": 332, "\u7684\u65b0\u5c5e\u6027": 332, "\u5217": 332, "\u5c06\u7ed3\u679c\u4f5c\u4e3a\u65b0\u5217\u6dfb\u52a0\u56de\u5c5e\u6027\u56fe": 332, "\u5217\u540d\u4e3a": 332, "\u5e76\u751f\u6210\u4e00\u5f20\u65b0\u56fe": 332, "new_graph": [332, 337], "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u9009\u62e9\u5668": 332, "\u6765\u5b9a\u4e49\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e9b\u90e8\u5206\u5199\u56de\u56fe\u6570\u636e": 332, "\u9009\u62e9\u5668\u6307\u5b9a\u4e86\u8ba1\u7b97\u7ed3\u679c\u4e2d\u7684\u54ea\u4e00\u90e8\u5206\u4f1a\u88ab\u5904\u7406": 332, "\u7c7b\u4f3c\u7684": 332, "\u56fe\u6570\u636e\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u88ab\u5904\u7406\u6570\u636e\u7684\u4e00\u90e8\u5206": 332, "\u4f8b\u5982\u9876\u70b9id": 332, "\u6211\u4eec\u4e3a\u9009\u62e9\u5668\u4fdd\u7559\u4e86\u4e09\u4e2a\u5173\u952e\u5b57": 332, "\u4ee3\u8868\u7ed3\u679c": 332, "\u5206\u522b\u4ee3\u8868\u9876\u70b9\u548c\u8fb9": 332, "\u4ee5\u4e0b\u662f\u7ed3\u679c\u5904\u7406\u4e2d\u9009\u62e9\u5668\u7684\u4e00\u4e9b\u793a\u4f8b": 332, "\u83b7\u53d6\u9876\u70b9\u4e0a\u7684\u7ed3\u679c": 332, "\u8f6c\u6362\u4e3a": [332, 341], "\u4f7f\u7528\u9876\u70b9\u7684": 332, "\u4f5c\u4e3a\u540d\u4e3a": 332, "\u7684\u5217": 332, "df_vd": 332, "\u4f7f\u7528\u7ed3\u679c\u5217\u4f5c\u4e3a\u540d\u4e3a": 332, "df_result": 332, "property0": 332, "label0": 332, "\u5bf9\u4e8e\u5c5e\u6027\u56fe\u7684\u7ed3\u679c": 332, "\u4f5c\u4e3av\u548ce\u7684\u6807\u7b7e\u9009\u62e9\u5668": 332, "\u5c06": [332, 341], "\u9876\u70b9\u7684": 332, "\u4f5c\u4e3a": [332, 333, 342], "\u4f7f\u7528\u5199\u5728\u5e26\u6709label0\u7684\u9876\u70b9\u4e0a\u7684property0\u4f5c\u4e3a": 332, "gs_data": 332, "\u53ef\u4ee5\u67e5\u770b": 332, "\u83b7\u53d6\u66f4\u591a\u7ec6\u8282": 332, "\u5982\u679c\u5185\u7f6e\u7b97\u6cd5\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42": 332, "\u7528\u6237\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 332, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7": 332, "\u5728\u7eaf": 332, "\u6a21\u5f0f": [332, 340], "\u4e0b\u4f7f\u7528": 332, "\u7f16\u7a0b\u6a21\u578b\u7f16\u5199\u7b97\u6cd5": 332, "\u4e3a\u4e86\u5b9e\u73b0\u81ea\u5df1\u7684\u7b97\u6cd5": 332, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u6b64\u7c7b": 332, "\u5982\u4ee3\u7801\u6240\u793a": 332, "\u7528\u6237\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u4ee5": 332, "\u88c5\u9970\u7684\u7c7b": 332, "\u5e76\u63d0\u4f9b\u4e09\u4e2a\u4e32\u884c": 332, "\u56fe\u7b97\u6cd5\u51fd\u6570": 332, "\u51fd\u6570\u7528\u4e8e\u8bbe\u7f6e\u7b97\u6cd5\u521d\u59cb\u72b6\u6001": 332, "\u51fd\u6570\u5b9a\u4e49\u7b97\u6cd5\u7684\u5c40\u90e8\u8ba1\u7b97": 332, "\u51fd\u6570\u5b9a\u4e49\u5bf9\u5206\u533a\u6570\u636e\u7684\u589e\u91cf\u8ba1\u7b97": 332, "\u4e0e": 332, "\u76f8\u5173\u7684\u5b8c\u6574": 332, "\u53ef\u4ee5\u53c2\u8003": 332, "\u4ee5\u5355\u6e90\u6700\u77ed\u8def\u5f84\u7b97\u6cd5": 332, "\u4e3a\u4f8b": [332, 336], "\u7528\u6237\u5728": 332, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684": 332, "\u7b97\u6cd5\u53ef\u5982\u4e0b\u6240\u793a": 332, "\u521d\u59cb\u5316\u6bcf\u4e2a\u9876\u70b9\u7684\u8ddd\u79bb": 332, "\u4ececontext\u4e2d\u83b7\u53d6\u6e90\u9876\u70b9": 332, "\u5728\u6e90\u9876\u70b9\u6240\u5728\u5206\u533a\u4e2d": 332, "\u8fd0\u884cdijkstra\u7b97\u6cd5\u4f5c\u4e3a\u90e8\u5206\u8ba1\u7b97": 332, "\u4f7f\u7528\u8fb9\u4e0a\u7b2c\u4e09\u5217\u6570\u636e\u4f5c\u4e3a\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb": 332, "\u589e\u91cf\u8ba1\u7b97": 332, "\u66f4\u65b0\u6700\u77ed\u8ddd\u79bb": 332, "\u7528\u6237\u4ec5\u9700\u8981\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5355\u5206\u533a\u7684\u4e32\u884c\u7b97\u6cd5": 332, "\u800c\u4e0d\u9700\u8981\u8003\u8651\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u7684\u5206\u533a\u901a\u4fe1\u548c\u6d88\u606f\u4f20\u9012": 332, "\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b": [332, 342], "\u7ecf\u5178\u7684": 332, "\u7b97\u6cd5\u53ca\u5176\u589e\u91cf\u7248\u672c\u5c31\u53ef\u4ee5\u7528\u4e8e\u5728\u96c6\u7fa4\u4e0a\u7684\u5927\u89c4\u6a21\u56fe\u6570\u636e\u8ba1\u7b97": 332, "\u9664\u4e86\u57fa\u4e8e\u5b50\u56fe\u7684": 332, "\u6a21\u578b\u4e4b\u5916": 332, "\u4e5f\u652f\u6301\u4ee5\u9876\u70b9\u4e3a\u4e2d\u5fc3\u7684": 332, "\u7f16\u7a0b\u6a21\u578b": 332, "\u60a8\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0\u4ee5\u4e0b\u7b97\u6cd5\u7c7b\u6765\u5728": 332, "\u6a21\u578b\u4e2d\u5f00\u53d1\u7b97\u6cd5": 332, "\u6a21\u578b\u4e0d\u540c": 332, "\u7b97\u6cd5\u7c7b\u7684\u88c5\u9970\u5668\u4e3a": 332, "\u8be5\u7c7b\u65b9\u6cd5\u662f": 332, "\u5b9a\u4e49\u5728\u9876\u70b9\u4e0a\u7684": 332, "\u800c\u4e0d\u540c\u4e8e": 332, "\u6a21\u578b\u4e2d\u5b9a\u4e49\u5728\u56fe\u5206\u533a\u4e0a": 332, "\u8fd8\u662f\u4ee5": 332, "\u6a21\u578b\u4e0b\u7684\u7b97\u6cd5\u5982\u4e0b\u6240\u793a": 332, "\u88c5\u9970\u5668": 332, "\u5b9a\u4e49\u9876\u70b9\u6570\u636e\u548c\u6d88\u606f\u6570\u636e\u7684\u7c7b\u578b": 332, "\u652f\u6301\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u901a\u8fc7": 332, "\u4e0a\u7684\u63a5\u53e3\u6765\u4f7f\u7528\u5b9a\u4e49\u5728": 332, "\u4e2d\u7684": [332, 333, 335], "\u51fd\u6570": [332, 340], "\u4e0b\u5217\u4ee3\u7801": 332, "\u4f1a\u88ab\u7ffb\u8bd1\u6210\u5982\u4e0b\u7684": 332, "\u4ee3\u7801\u4ee5\u9ad8\u6548\u5730\u6267\u884c": 332, "\u7528\u6237\u9700\u8981\u5728\u5b9a\u4e49\u7b97\u6cd5\u540e\u8c03\u7528\u7b97\u6cd5": 332, "\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 332, "\u5728\u56fe\u4e0a\u8fd0\u884c\u81ea\u5df1\u7684\u7b97\u6cd5": 332, "\u5f97\u5230\u8ba1\u7b97\u7ed3\u679c": 332, "\u8fd9\u91cc": [332, 333, 342], "\u662f\u4e0e": 332, "\u76f8\u5bf9\u5e94\u7684": 332, "\u5728\u5f00\u53d1\u548c\u6d4b\u8bd5\u4e4b\u540e": 332, "\u60a8\u53ef\u4ee5\u901a\u8fc7": 332, "\u65b9\u6cd5\u5c06\u7b97\u6cd5\u4fdd\u5b58\u6210": 332, "\u5305\u4ee5\u5907\u5c06\u6765\u4f7f\u7528": 332, "\u5728\u6b64\u4e4b\u540e": 332, "\u60a8\u53ef\u4ee5\u4ece": 332, "\u5305\u52a0\u8f7d\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 332, "\u4ecegar\u5305\u4e2d\u52a0\u8f7d\u81ea\u5df1\u7684\u7b97\u6cd5": 332, "\u652f\u6301\u7528\u6237\u7f16\u5199java\u7684pi": 332, "\u5e76\u4e14\u8fd0\u884c\u5728\u56fe\u5206\u6790\u5f15\u64ce\u4e0a": 332, "\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u6f14\u793a\u5982\u679c\u5728graphscop": 332, "\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u4e00\u4e2ajava\u7684\u56fe\u7b97\u6cd5": 332, "\u7136\u540e\u6211\u4eec\u5c06\u5c55\u793a\u5982\u679c\u5b9e\u73b0\u5e76\u8fd0\u884c\u81ea\u5b9a\u4e49\u7684java\u56fe\u7b97\u6cd5": 332, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7ecf\u5178\u56fe\u5206\u6790\u7b97\u6cd5\u7684\u793a\u4f8b\u5b9e\u73b0": 332, "\u901a\u8fc7\u4e0b\u9762\u5c55\u793a\u7684\u4f8b\u5b50": 332, "\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5728graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8bd5\u7740\u8fd0\u884c\u4ed6\u4eec": 332, "\u9996\u5148\u4f60\u9700\u8981\u4ece\u4e0b\u8f7d\u6211\u4eec\u63d0\u4f9b\u7684\u793a\u4f8bapp\u7684\u5408\u96c6": 332, "\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u4f60\u5c31\u53ef\u4ee5\u5728": 332, "graphscope\u56fe\u5206\u6790\u5f15\u64ce\u4e0a\u8fd0\u884c\u8fd9\u4e9b\u793a\u4f8b\u7b97\u6cd5": 332, "\u7136\u540e\u4f60\u9700\u8981\u6253\u5f00graphscope\u7684python": 332, "\u5c1d\u8bd5\u8f7d\u56fe\u5e76\u4e14\u8fd0\u884c\u4e00\u4e2a\u7b80\u5355\u7684bfs\u7684\u7b97\u6cd5": 332, "dist_0": 332, "\u4e3a\u4e86\u7f16\u5199java\u5b9e\u73b0\u7684\u56fe\u7b97\u6cd5": 332, "\u7528\u6237\u9700\u8981\u501f\u52a9\u4e8e": 332, "\u8bf7\u53c2\u8003": [332, 340], "\u6765\u5c06": 332, "\u5b89\u88c5\u5230\u4f60\u7684\u672c\u5730\u73af\u5883\u4e0a": 332, "\u5b89\u88c5\u5b8c\u6210\u540e": 332, "\u4f60\u9700\u8981\u5c06": 332, "\u7684\u4f9d\u8d56\u6dfb\u52a0\u5230\u4f60\u7684maven\u9879\u76ee\u4f9d\u8d56\u4e2d": 332, "\u7528\u6237\u5e94\u5f53\u6ce8\u610f\u5728": 332, "\u7684\u4f9d\u8d56\u914d\u7f6e\u4e0a\u5e94\u5f53\u6dfb\u52a0": 332, "\u6765\u786e\u4fdd": 332, "\u6240\u6709\u5fc5\u8981\u7684\u4f9d\u8d56\u90fd\u88ab\u5305\u62ec\u5230": 332, "\u7528\u6237\u5728\u5f00\u53d1\u81ea\u5df1\u7b97\u6cd5\u7684\u8fc7\u7a0b\u4e2d": 332, "\u53ef\u80fd\u4f1a\u7528\u5230\u5176\u4ed6\u7684\u7b2c\u4e09\u65b9jar\u5305": 332, "\u4e3a\u4e86\u89e3\u51b3\u4f9d\u8d56jar\u5305\u7684\u7248\u672c\u95ee\u9898": 332, "\u7528\u6237\u9700\u8981\u4f7f\u7528\u786e\u4fdd\u81ea\u5df1\u751f\u6210\u7684jar\u5305\u5305\u542b\u6240\u6709\u4f9d\u8d56\u7684jar\u5305": 332, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528maven\u63d2\u4ef6": 332, "pluge": 332, "\u7528\u6237\u5728\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5\u65f6": 332, "\u7528\u6237\u9700\u8981\u6309\u7167": 332, "\u6765\u5b9e\u73b0\u81ea\u5b9a\u4e49\u7b97\u6cd5": 332, "\u5e76\u4e14\u9700\u8981\u6839\u636e\u9700\u8981\u7684app\u7c7b\u578b\u6765\u5b9e\u73b0": 332, "\u4e2d\u76f8\u5e94\u7684\u63a5\u53e3\u5e76\u4e14\u5b9e\u73b0\u63a5\u53e3": 332, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u5c5e\u6027\u56fe\u4e0a": 332, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u63a5\u53e3": 332, "defaultpropertyappbas": 332, "\u6216": [332, 333, 334, 335, 338, 340], "parallelpropertyappbas": 332, "\u5982\u679c\u7528\u6237\u671f\u671b\u7b97\u6cd5\u8fd0\u884c\u5728\u7b80\u5355\u56fe\u4e0a": 332, "\u90a3\u4e48\u5b9a\u4e49\u7684app\u5e94\u8be5\u5b9e\u73b0\u501f\u53e3": 332, "defaultappbas": 332, "\u540c\u65f6\u7528\u6237\u9700\u8981\u5b9e\u73b0app\u76f8\u5e94\u7684": 332, "\u6765\u4fdd\u5b58\u8de8superstep\u7684\u6570\u636e": 332, "\u5176\u5e94\u8be5\u662f": 332, "defaultpropertycontextbas": 332, "parallelpropertycontextbas": 332, "defaultcontextbas": 332, "\u6216\u8005": [332, 334, 341, 342], "\u7684\u7684\u5b50\u7c7b": 332, "\u901a\u8fc7\u7ee7\u627f": 332, "\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u5230\u4e0d\u540c\u7c7b\u578b\u7684context\u6240\u62e5\u6709\u7684\u7279\u6027": 332, "\u901a\u8fc7\u8fd9\u4e24\u79cdcontext\u63d0\u4f9b\u7684\u501f\u53e3\u6240\u5b58\u50a8\u7684\u6570\u636e\u5728\u7a0b\u5e8f\u6267\u884c\u5b8c\u4e4b\u540e\u53ef\u4ee5\u88ab\u7528\u6237\u8bbf\u95ee": 332, "\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5728python": 332, "client\u4e2dquery\u8fd4\u56de\u7684context": 332, "\u5bf9\u8c61\u6765\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e": 332, "\u8fd9\u91cc\u6211\u4eec\u5c55\u793a\u4e00\u4e2a\u7b80\u5355\u7684app\u7684\u5b9e\u73b0": 332, "\u5b83\u6240\u505a\u7684\u4e8b\u60c5\u53ea\u662f\u5bf9\u4e00\u4e2a\u7b80\u5355\u56fe\u7684\u6240\u6709\u8fb9\u8fdb\u884c\u4e86\u904d\u5386": 332, "\u8be5app\u5bf9\u5e94\u7684context\u7684\u5b9e\u73b0": 332, "\u5728\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u7b97\u6cd5\u4e4b\u540e": 332, "\u7528\u6237\u53ef\u80fd\u4f1a\u60f3\u5728\u63d0\u4ea4\u5230graphscope\u7684\u56fe\u5206\u6790\u5f15\u64ce\u8fd0\u884c\u524d": 332, "\u5148\u5728\u672c\u5730\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 332, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\u6765\u6ee1\u8db3\u7528\u6237\u7684": 332, "\u8fd9\u4e2a\u9700\u6c42": 332, "\u4e3a\u4e86\u9a8c\u8bc1\u7b97\u6cd5\u5b9e\u73b0\u7684\u6b63\u786e\u6027": 332, "\u7528\u6237\u53ea\u9700\u8981\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4": 332, "graphscope_repo": 332, "app_class_nam": 332, "java_path": 332, "path_to_your_jar": 332, "param_str": 332, "params_str": 332, "\u662f\u7528\u6237\u81ea\u5b9a\u4e49\u7684java": 332, "app\u7684\u7c7b\u7684\u5168\u540d": 332, "\u6307\u5411\u5305\u542b\u7528\u6237\u60f3\u8981\u8fd0\u884c\u7684\u7b97\u6cd5\u7684jar\u5305": 332, "\u53ef\u4ee5\u901a\u8fc7": 332, "\u6765\u5236\u5b9acontext\u521d\u59cb\u5316\u9700\u8981\u7684\u53c2\u6570": 332, "\u4f8b\u5982\u5bf9\u4e8ebfs\u7b97\u6cd5\u53ef\u4ee5\u4f7f\u7528": 332, "\u6765\u6807\u8bb0\u521d\u59cb\u8282\u70b9\u662f6": 332, "\u5e76\u884c\u7ebf\u7a0b\u6570\u4e3a1": 332, "\u53ef\u4ee5": 332, "\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6765\u8fd0\u884ctravers": 332, "jar_path": 332, "\u5728\u672c\u5730\u9a8c\u8bc1\u81ea\u5b9a\u4e49\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u4e4b\u540e": 332, "\u4f60\u53ef\u4ee5\u901a\u8fc7graphscope\u7684python": 332, "client\u6765\u63d0\u4ea4\u8fd0\u884cjar\u5305": 332, "\u4e00\u4e2ajar\u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4e0d\u540c\u7684app\u5b9e\u73b0": 332, "\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u63d0\u4ea4\u76f8\u540c\u7684jar\u5305\u4f46\u662f\u8fd0\u884c\u4e0d\u540c": 332, "\u7684app": 332, "\u8bf7\u8010\u5fc3\u7b49\u5f85\u8ba1\u7b97\u5b8c\u6210": 332, "\u5f53\u8ba1\u7b97\u5b8c\u6210\u540e": 332, "\u4f60\u53ef\u4ee5\u901a\u8fc7": [332, 333, 335], "\u5bf9\u8c61\u6765\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c": 332, "\u76f8\u5173\u8bba\u6587": 332, "wenfei": 332, "jingbo": 332, "xu": 332, "wenyuan": 332, "yu": 332, "jingren": 332, "zhou": 332, "xiaojian": 332, "luo": 332, "qiang": 332, "yin": 332, "cao": 332, "ruiqi": 332, "tod": [332, 338], "yinghui": 332, "wu": 332, "jiaxin": 332, "jiang": 332, "43rd": 332, "zeyu": 332, "zheng": 332, "bohan": 332, "chao": 332, "tian": 332, "\u4ee5": [333, 336, 337, 339, 342], "\u955c\u50cf\u7684\u65b9\u5f0f\u5206\u53d1\u5f15\u64ce\u7b49\u7ec4\u4ef6": 333, "\u9ed8\u8ba4\u60c5\u51b5\u4e0b": [333, 335], "\u5982\u679c\u8fd0\u884c": 333, "\u7684\u96c6\u7fa4\u673a\u5668\u4e0a\u4e0d\u5b58\u5728\u8be5\u955c\u50cf": 333, "\u5219\u4f1a\u62c9\u53d6\u5bf9\u5e94\u7248\u672c\u7684\u6700\u65b0\u955c\u50cf": 333, "\u56e0\u6b64": [333, 334, 336], "\u8bf7\u786e\u4fdd\u60a8\u7684\u96c6\u7fa4\u53ef\u4ee5\u8bbf\u95ee\u516c\u5171\u955c\u50cf\u4ed3\u5e93": 333, "\u4f1a\u8bdd": [333, 336], "\u5ba2\u6237\u7aef": [333, 334, 338], "\u5b83\u5c01\u88c5": 333, "\u7ba1\u7406\u7740": 333, "\u5f15\u64ce\u7684\u5404\u79cd\u7ec4\u4ef6": 333, "\u5e76": 333, "\u8fde\u63a5": 333, "\u64cd\u4f5c\u7528\u6237\u5728": 333, "\u96c6\u7fa4\u4e0a\u7684": 333, "\u5f15\u64ce": 333, "\u5982\u4e0a\u8ff0\u4ee3\u7801\u6240\u793a": 333, "\u7528\u6237\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u901a\u8fc7\u4f1a\u8bdd\u6765\u62c9\u8d77\u4e00\u4e2a": 333, "\u5b9e\u4f8b": 333, "\u7528\u6237\u6709\u65f6\u9700\u8981\u4f7f\u7528\u5728\u672c\u673a\u78c1\u76d8\u4e0a\u7684\u6570\u636e": 333, "\u6211\u4eec\u63d0\u4f9b\u4e86\u9009\u9879\u4f9b\u7528\u6237\u5c06\u672c\u673a\u7684\u76ee\u5f55\u6302\u8f7d\u5230\u96c6\u7fa4\u4e0a": 333, "\u5047\u5b9a\u6211\u4eec\u8981\u5c06\u672c\u673a\u7684": 333, "\u7684\u8def\u5f84\u6302\u8f7d\u5230": 333, "\u8def\u5f84": [333, 342], "\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u5982\u4e0b\u4e00\u4e2a\u5b57\u5178": 333, "\u7136\u540e": [333, 341], "\u5c06\u5176\u901a\u8fc7": 333, "\u7684\u53c2\u6570\u4f20\u7ed9\u4f1a\u8bdd\u7684\u6784\u9020\u51fd\u6570": 333, "\u6ce8\u610f\u8fd9\u91cc\u7684\u672c\u673a\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e": 333, "\u8282\u70b9\u7684\u6982\u5ff5": 333, "\u5982\u679c\u4f60\u662f\u901a\u8fc7": 333, "\u521b\u5efa\u7684\u96c6\u7fa4": 333, "\u90a3\u4e48\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u76ee\u5f55\u62f7\u8d1d\u5230": 333, "\u7684\u865a\u62df\u4e3b\u673a\u7684\u76f8\u5e94\u8def\u5f84\u4e0a": 333, "\u6216\u8005\u5728\u914d\u7f6e\u4e2d\u5c06\u8def\u5f84\u63d0\u524d\u6302\u8f7d\u5230\u865a\u62df\u4e3b\u673a\u4e0a\u53bb": 333, "\u67e5\u770b\u66f4\u591a\u7ec6\u8282": 333, "\u4e0a\u7684\u4e00\u4e2a": 333, "\u5b9e\u4f8b\u5305\u542b": 333, "\u4e00\u4e2a\u8fd0\u884c": 333, "\u7684": [333, 334, 335, 338, 343], "\u8d1f\u8d23\u5143\u4fe1\u606f\u7684\u540c\u6b65": 333, "\u8d1f\u8d23\u5bf9": 333, "\u5f15\u64ce\u5bb9\u5668\u7684\u7ba1\u7406": 333, "\u4ee5\u53ca\u4e00\u7ec4\u8fd0\u884c": 333, "\u5f15\u64ce\u5bb9\u5668\u7684": 333, "replicaset": 333, "\u5bf9\u8c61": 333, "\u540e\u7aef\u670d\u52a1\u7684\u5165\u53e3": 333, "\u901a\u8fc7": [333, 336], "\u63a5\u6536\u6765\u81ea": 333, "\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u548c\u547d\u4ee4": 333, "\u5e76\u7ba1\u7406\u7740\u56fe\u5206\u6790\u5f15\u64ce": 333, "\u56fe\u67e5\u8be2\u5f15\u64ce": 333, "\u56fe\u5b66\u4e60\u5f15\u64ce": [333, 338], "\u7684\u751f\u547d\u5468\u671f": 333, "\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u914d\u7f6e\u5f15\u64ce\u955c\u50cf\u5730\u5740\u7b49\u53c2\u6570": 333, "\u8bf7\u5728": 333, "\u4e2d\u53c2\u9605\u66f4\u591a\u7684\u8be6\u7ec6\u4fe1\u606f": 333, "\u83b7\u53d6\u5e76\u6dfb\u52a0\u4ed3\u5e93\u4fe1\u606f": 333, "\u5b89\u88c5": [333, 338], "release_nam": 333, "\u68c0\u6d4bgraphscope\u670d\u52a1\u53ef\u7528\u6027": 333, "\u53c2\u8003": 333, "\u8be5\u94fe\u63a5": 333, "\u4ee5\u901a\u8fc7python\u5ba2\u6237\u7aef\u8fde\u63a5\u5230\u9884\u542f\u52a8\u7684graphscope\u670d\u52a1": 333, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728aws\u6216\u963f\u91cc\u4e91\u4e0a\u521b\u5efa": 333, "\u96c6\u7fa4\u7684\u4ea4\u4e92\u5f0f\u811a\u672c": 333, "\u8fd9\u4e00\u811a\u672c\u53ef\u4ee5\u5e2e\u52a9\u7528\u6237\u4f7f\u7528\u5df2\u6709\u7684\u96c6\u7fa4\u6216\u521b\u5efa\u65b0\u7684": 333, "\u96c6\u7fa4": [333, 335, 339], "\u7136\u540e\u8f93\u51fa\u96c6\u7fa4\u7684\u914d\u7f6e\u6587\u4ef6": 333, "\u7528\u6cd5\u5982\u4e0b": 333, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7": 333, "launch_clust": 333, "\u83b7\u5f97\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 333, "pyyaml": 333, "boto3": 333, "your_access_key_id": 333, "your_access_key_secret": 333, "region": 333, "your_region_nam": 333, "kube_config_path": 333, "alibabacloud_cs20151215": 333, "alibabacloud_ecs20140526": 333, "alibabacloud_vpc20160428": 333, "your_region_id": 333, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u5728\u672c\u5730\u5b89\u88c5graphscope\u76f8\u5173\u4f9d\u8d56\u7684\u811a\u672c": 333, "\u8be5\u811a\u672c\u53ef\u4ee5\u8fd0\u884c\u5728": 333, "\u5e73\u53f0\u4e0a": 333, "\u4e3b\u8981\u7684\u7528\u6cd5\u5982\u4e0b": 333, "\u83b7\u53d6\u66f4\u8be6\u7ec6\u7684\u5e2e\u52a9\u4fe1\u606f": 333, "\u5f00\u53d1\u76f8\u5173\u4f9d\u8d56": 333, "\u672c\u5730\u90e8\u7f72": 333, "graphscope_env": [333, 334], "\u7684\u80cc\u540e\u6709\u4e00\u7fa4\u6d3b\u8dc3\u7684\u5de5\u7a0b\u4eba\u5458\u548c\u7814\u7a76\u4eba\u5458\u56e2\u961f\u6765\u63a8\u8fdb\u65e5\u5e38\u7684\u5f00\u53d1\u548c\u7ef4\u62a4": 334, "\u6211\u4eec\u70ed\u5ff1\u6b22\u8fce\u6765\u81ea\u5f00\u6e90\u793e\u533a\u7684": 334, "\u4e3a\u6539\u5584\u8be5\u9879\u76ee\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e": 334, "\u9075\u5faa": 334, "\u7684\u5f00\u6e90\u534f\u8bae": 334, "\u9700\u8981\u4e00\u4e9b\u7b2c\u4e09\u65b9\u7684\u5de5\u5177\u548c\u4f9d\u8d56": 334, "\u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u5bb9\u6613\u4e0a\u624b": 334, "\u6211\u4eec\u63d0\u4f9b\u4e86\u5b89\u88c5\u4e86\u6240\u9700\u4f9d\u8d56\u7684": 334, "\u955c\u50cf": 334, "\u5f00\u53d1\u8005\u9700\u8981\u901a\u8fc7": 334, "\u7684\u547d\u4ee4\u4ece\u6211\u4eec\u7684\u5f00\u6e90\u4ee3\u7801\u5e93": 334, "\u4e2d\u83b7\u5f97\u6700\u65b0\u7248\u7684\u4ee3\u7801": 334, "\u5728\u6b64\u57fa\u7840\u4e0a\u505a\u5f00\u53d1\u6216\u4ee3\u7801\u7684\u66f4\u6539": 334, "\u7136\u540e\u5728\u4ee3\u7801\u7684\u6839\u76ee\u5f55": 334, "\u6267\u884c": 334, "10240m": 334, "minitest": 334, "unittest": 334, "\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5982\u4e0b\u6784\u5efa\u547d\u4ee4\u5f00\u53d1\u5e76\u6d4b\u8bd5\u5176\u4e2d\u67d0\u4e00\u4e2a\u6a21\u5757": 334, "\u6bd4\u5982": [334, 342], "\u56fe\u5206\u6790\u5f15\u64ce": [334, 338], "\u6a21\u5757": 334, "\u7136\u540e\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u6784\u5efa": 334, "\u8be5\u547d\u4ee4\u4f1a\u5f00\u59cb": 334, "\u7684\u6784\u5efa\u8fc7\u7a0b": 334, "\u8be5\u8fc7\u7a0b\u5c06\u5728": 334, "\u7684\u5bb9\u5668\u4e2d\u6784\u5efa\u5f53\u524d\u6e90\u4ee3\u7801": 334, "\u5e76\u5c06\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6\u590d\u5236\u5230": 334, "\u8fd0\u884c\u65f6\u57fa\u7840\u955c\u50cf": 334, "\u751f\u6210\u7684\u955c\u50cf\u5c06\u88ab\u6807\u8bb0": 334, "\u4e3a": [334, 335, 336], "shortsha": 334, "\u5ba2\u6237\u7aef\u4e0d\u5305\u542b\u5728\u8be5\u955c\u50cf\u4e2d": 334, "\u6784\u5efa\u4e5f\u4e0e\u5f15\u64ce\u6709\u6240\u4e0d\u540c": 334, "\u5982\u679c\u5f00\u53d1\u8005\u6b63\u5728\u5f00\u53d1": 334, "\u5ba2\u6237\u7aef\u5e76\u4e14\u672a\u4fee\u6539\u5f15\u64ce\u76f8\u5173\u7684\u6587\u4ef6": 334, "\u90a3\u4e48": 334, "\u955c\u50cf\u662f\u4e0d\u9700\u8981\u91cd\u5efa\u7684": 334, "\u5f00\u53d1\u8005\u53ea\u9700\u8981\u5728\u672c\u5730\u91cd\u65b0\u5b89\u88c5": 334, "\u5ba2\u6237\u7aef\u5373\u53ef": 334, "\u6d4b\u8bd5\u65b0\u6784\u5efa\u7684\u955c\u50cf": 334, "\u7528\u6237\u53ef\u4ee5\u624b\u52a8\u6253\u5f00\u4e00\u4e2a\u4f1a\u8bdd": 334, "\u6307\u5b9a\u7528\u65b0\u7f16\u8bd1\u7684\u955c\u50cf": 334, "\u4e0b\u7684": 334, "\u5206\u53d1\u5305\u662f\u57fa\u4e8e": 334, "\u73af\u5883\u4e0b\u6784\u5efa\u7684": 334, "install_prefix": 334, "\u4e0b\u5206\u522b\u6784\u5efa": 334, "\u7531\u4e8e": 334, "\u4e0b\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u5728\u672c\u5730": 334, "\u975edocker": 334, "\u4e2d\u8fdb\u884c": 334, "\u56e0\u6b64\u9700\u8981\u672c\u5730\u4e8b\u5148\u5b89\u88c5": 334, "\u7684\u4f9d\u8d56": 334, "\u57fa\u4e8e\u5f53\u524d": 334, "\u73af\u5883\u4e0b\u7684": 334, "\u7248\u672c\u6784\u5efa": 334, "\u9700\u8981\u6ce8\u610f\u7684\u662f": [334, 336], "\u5982\u679c\u4f60\u9700\u8981\u8be5\u5206\u53d1\u5305\u80fd\u652f\u6301\u4e0d\u540c\u7684": 334, "\u7248\u672c": [334, 339], "\u4f60\u53ef\u80fd\u9700\u8981\u901a\u8fc7": 334, "conda": 334, "pyenv": 334, "\u5b89\u88c5\u591a\u4e2a": 334, "\u7684\u7248\u672c": 334, "\u98ce\u683c": 334, "\u5982\u679c\u4f60\u7684\u4ee3\u7801\u6ca1\u6709\u901a\u8fc7ci\u7684\u98ce\u683c\u68c0\u67e5": 334, "\u4f60\u53ef\u4ee5\u4f7f\u7528": 334, "\u683c\u5f0f\u5316\u4f60\u7684\u4ee3\u7801": 334, "\u6211\u4eec\u6536\u96c6\u4e86\u7528\u6237\u4f7f\u7528": 335, "\u8fc7\u7a0b\u4e2d\u7684\u5e38\u89c1\u95ee\u9898": 335, "\u5982\u679c\u5728\u4e0b\u9762\u7684\u5217\u8868\u4e2d\u4ecd\u7136\u65e0\u6cd5\u627e\u5230\u60a8\u9047\u5230\u7684\u95ee\u9898\u7684\u7b54\u6848": 335, "\u53ef\u901a\u8fc7\u63d0\u4ea4": 335, "\u6216\u8005\u5728": 335, "\u4e0e\u6211\u4eec\u8054\u7cfb": 335, "\u8fd0\u884c": 335, "\u7cfb\u7edf\u9700\u8981\u7684\u6700\u5c0f\u8d44\u6e90\u662f\u591a\u5c11": 335, "\u5728\u901a\u8fc7": 335, "\u5ba2\u6237\u7aef\u4f7f\u7528": 335, "\u8fc7\u7a0b\u4e2d": 335, "\u9700\u8981\u7684\u6700\u4f4e": 335, "\u7248\u672c\u662f3": 335, "\u6700\u4f4epip\u7248\u672c\u662f": 335, "\u7cfb\u7edf\u652f\u6301\u4ee5\u5355\u673a\u6216\u5206\u5e03\u5f0f\u7684\u65b9\u5f0f\u90e8\u7f72": 335, "\u5355\u673a\u60c5\u51b5\u4e0b": 335, "\u8d44\u6e90\u9700\u6c42": 335, "\u6838": 335, "\u5185\u5b58": 335, "\u5728\u652f\u6301\u4ee5\u4e0b\u73af\u5883\u4e2d\u8fd0\u884c": 335, "\u5bf9\u4e8e\u5206\u5e03\u5f0f\u90e8\u7f72": 335, "\u9700\u8981\u7528\u6237\u62e5\u6709\u4e00\u4e2a": 335, "\u7684\u73af\u5883\u4e0a\u6d4b\u8bd5\u901a\u8fc7": 335, "\u662f\u5426\u5f3a\u4f9d\u8d56": 335, "\u652f\u6301\u5728\u5355\u673a\u6a21\u5f0f\u5b89\u88c5\u8fd0\u884c": 335, "\u7684\u9884\u7f16\u8bd1\u5305\u4ee5": 335, "\u7684\u5f62\u5f0f\u5206\u53d1": 335, "\u53ef\u4ee5\u7528": 335, "\u5feb\u901f\u5b89\u88c5": 335, "\u5982\u4f55\u5982\u67e5\u770b": 335, "\u7684\u8fd0\u884c\u65f6\u4fe1\u606f": 335, "\u8fd0\u884c\u4e0d\u6253\u5370\u65e5\u5fd7\u4fe1\u606f": 335, "\u53c2\u6570\u5f00\u542f\u65e5\u5fd7\u8f93\u51fa": 335, "\u5982\u679c\u60a8\u7684graphscope\u8fd0\u884c\u5728k8s\u96c6\u7fa4\u4e0a": 335, "\u53ef\u4ee5\u4f7f\u7528": [335, 341], "\u6765\u67e5\u770b\u7cfb\u7edf\u7684\u5f53\u524d\u72b6\u6001": 335, "\u540c\u65f6\u5982\u679c\u4f60\u53ef\u4ee5\u8bbf\u95ee": 335, "\u7684\u78c1\u76d8": 335, "\u4e5f\u53ef\u5728": 335, "\u76ee\u5f55\u4e0b\u67e5\u770b\u8fd0\u884c\u65f6\u65e5\u5fd7": 335, "\u4e3a\u4ec0\u4e48\u5728\u4f7f\u7528": 335, "\u547d\u4ee4\u65f6": 335, "\u53d1\u73b0\u4e86\u4e00\u4e9b\u591a\u4f59\u7684": 335, "\u5bf9\u4e8e\u5176\u4e2d\u4e00\u4e9b\u5931\u8d25\u7684": 335, "\u53ea\u80fd\u901a\u8fc7\u624b\u52a8\u6267\u884c\u547d\u4ee4\u5982": 335, "\u8fdb\u884c\u5220\u9664": 335, "\u901a\u5e38\u60c5\u51b5\u4e0b": 335, "\u8be5\u95ee\u9898\u51fa\u73b0\u5728\u4f7f\u7528": 335, "\u90e8\u7f72": [335, 338], "\u65f6": [335, 336], "\u4f9d\u8d56\u4e00\u4e9b\u6743\u9650\u6765\u5220\u9664\u8fd0\u884c\u65f6\u7684\u8d44\u6e90": 335, "\u5982\u679c\u7528\u6237\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e": 335, "\u7b49\u6743\u9650": 335, "\u53ef\u80fd\u4e0d\u80fd\u6b63\u786e\u56de\u6536\u5206\u914d\u7684\u8d44\u6e90": 335, "\u8be6\u7ec6\u7ec6\u8282\u53ef\u4ee5\u67e5\u770b": 335, "\u662f\u56fe\u6570\u636e\u5e93\u5417": 335, "\u5e76\u4e0d\u662f\u4e00\u4e2a\u56fe\u6570\u636e\u5e93": 335, "\u4f46\u5176\u5305\u542b\u4e00\u4e2a\u6301\u4e45\u56fe\u5b58\u50a8\u7684\u7ec4\u4ef6": 335, "\u53ef\u4ee5\u88ab\u7528\u4f5c\u6570\u636e\u5e93": 335, "\u4e0a\u7684\u517c\u5bb9\u6027\u5982\u4f55": 335, "\u76ee\u524d": [335, 342], "graphscope\u652f\u6301gremlin\u8bed\u8a00\u4e2d\u7684\u5927\u90e8\u5206\u67e5\u8be2\u7b97\u5b50": 335, "\u53ef\u901a\u8fc7": 335, "\u8be5\u6587\u6863": 335, "\u67e5\u770b\u8be6\u7ec6\u7684\u652f\u6301\u4fe1\u606f": 335, "\u770b\u8d77\u6765\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u5361\u4f4f\u4e86": 335, "\u5982\u679c": 335, "\u770b\u8d77\u6765\u50cf\u5361\u4f4f": 335, "\u53ef\u80fd\u7684\u539f\u56e0\u6709": 335, "\u5728\u4f1a\u8bdd\u7684\u62c9\u8d77\u9636\u6bb5": 335, "\u5982\u679c\u5f53\u524d\u7f51\u7edc\u4e0b\u8f7d\u955c\u50cf\u8fc7\u6162": 335, "\u6216\u5f53\u524d\u96c6\u7fa4\u8d44\u6e90\u65e0\u6cd5\u6ee1\u8db3\u8bf7\u6c42\u7684\u8d44\u6e90\u65f6": 335, "\u4f1a\u9020\u6210\u5361\u4f4f\u7684\u73b0\u8c61": 335, "\u8f7d\u56fe\u9636\u6bb5": 335, "\u53ef\u80fd\u4f1a\u7531\u4e8e\u6570\u636e\u91cf\u8fc7\u5927\u9020\u6210\u77ed\u6682\u7684\u5361\u4f4f\u73b0\u8c61": 335, "\u5728\u6267\u884c\u56fe\u7b97\u6cd5\u5206\u6790\u9636\u6bb5": 335, "\u6216\u8005\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u7b97\u6cd5": 335, "\u7f16\u8bd1\u6784\u5efa\u5e94\u7528\u7684\u5e93\u65f6\u4f1a\u82b1\u8d39\u4e00\u4e9b\u65f6\u95f4": 335, "\u4e3a\u4ec0\u4e48\u8f7d\u56fe\u65f6\u62a5\u627e\u4e0d\u5230\u6587\u4ef6\u7684\u9519\u8bef": 335, "\u8fd9\u901a\u5e38\u53d1\u751f\u5728\u4ee5\u96c6\u7fa4\u65b9\u5f0f\u90e8\u7f72\u8fd0\u884c": 335, "\u6570\u636e\u6587\u4ef6\u5fc5\u987b\u8981\u5bf9": 335, "\u53ef\u89c1": 335, "\u4f60\u4e5f\u8bb8\u9700\u8981\u6302\u8f7d\u78c1\u76d8\u6216\u8005\u4f7f\u7528\u4e91\u5b58\u50a8\u63d0\u4f9b\u5546\u7684\u670d\u52a1": 335, "\u5982\u679c\u4f60\u7684\u96c6\u7fa4\u662f\u4f7f\u7528": 335, "\u90e8\u7f72\u7684": 335, "\u4f60\u5e94\u8be5\u9700\u8981\u8bbe\u7f6e": 335, "\u6765\u628a\u672c\u673a\u76ee\u5f55\u6302\u8f7d\u5230": 335, "\u865a\u62df\u7684": 335, "\u6709\u4ec0\u4e48\u533a\u522b": 335, "\u5982\u4f55\u8bbe\u7f6e": 335, "\u5bb9\u5668\u5206\u914d\u7684\u5185\u5b58": 335, "\u5b83\u5b58\u50a8\u7531": 335, "\u7ba1\u7406\u7684\u539f\u59cb\u6570\u636e\u7684": 335, "\u7684\u5143\u4fe1\u606f": 335, "\u4f8b\u5982\u5f62\u72b6": 335, "\u540d\u79f0\u7b49": 335, "\u7531\u4e8e\u5143\u6570\u636e\u6bd4\u6570\u636e\u96c6\u5c0f\u5f97\u591a": 335, "\u56e0\u6b64\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9ed8\u8ba4\u914d\u7f6e\u5c31\u8db3\u591f\u4e86": 335, "\u5b83\u76f8\u5f53\u4e8e": 335, "\u5b58\u50a8\u6570\u636e\u96c6\u7684\u5185\u5b58": 335, "\u6211\u4eec\u53d1\u73b0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6570\u636e\u96c6\u5728\u78c1\u76d8\u4e0a\u7684\u5927\u5c0f\u7684": 335, "\u500d\u901a\u5e38\u662f\u4e00\u4e2a\u5408\u7406\u7684\u503c": 335, "\u5bb9\u5668\u7684\u5185\u5b58\u5927\u5c0f": 335, "\u4e00\u822c\u5c06\u5176\u8bbe\u7f6e\u4e3a": 335, "\u7684\u540c\u6837\u5927\u5c0f": 335, "\u5bfc\u81f4\u5728": 335, "\u73af\u5883\u4e0b\u5b89\u88c5": 335, "\u5931\u8d25\u7684\u539f\u56e0\u53ef\u80fd\u6709\u54ea\u4e9b": 335, "\u7f16\u8bd1": 335, "\u5931\u8d25": 335, "\u6765\u5c1d\u8bd5\u4f7f\u7528\u7cfb\u7edf\u5b89\u88c5\u7684": 335, "\u8be6\u60c5\u53ef\u53c2\u8003": 335, "\u4f60\u53ef\u4ee5\u6839\u636e": 335, "\u6b64\u6559\u7a0b": 335, "\u6765\u6e90\u7801\u7f16\u8bd1": 335, "\u6216\u5c1d\u8bd5\u901a\u8fc7": 335, "\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898": 335, "\u4e0a\u5206\u914d": 335, "\u65f6\u9047\u5230\u4e86": 335, "\u95ee\u9898": 335, "\u5982\u4f55\u89e3\u51b3": 335, "\u901a\u5e38\u5f53\u4f7f\u7528": 335, "\u7684\u65b9\u5f0f\u5b89\u88c5": 335, "\u4f1a\u62a5": 335, "\u9519\u8bef": [335, 337], "\u6211\u4eec\u901a\u8fc7": 335, "\u6765\u67e5\u770b\u65e5\u5fd7": 335, "\u6b64\u65f6\u65e5\u5fd7\u663e\u793a": 335, "\u901a\u5e38\u6709\u4e24\u79cd\u89e3\u51b3\u65b9\u5f0f": 335, "\u5feb\u901f\u7684\u65b9\u5f0f\u662f\u5728\u6240\u6709\u76f8\u5173\u7684": 335, "\u76ee\u5f55\u4e0a\u4f7f\u7528": 335, "\u4f46\u4e0d\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528": 335, "\u4f18\u96c5\u7684\u65b9\u6cd5\u662f\u9996\u5148\u521b\u5efa": 335, "\u7528\u6237\u548c\u7528\u6237\u7ec4": 335, "\u7136\u540e\u5c06": 335, "\u4e0a\u7684\u8bbf\u95ee\u6743\u9650\u6388\u4e88\u76f8\u5173nfs\u76ee\u5f55": 335, "\u4e3a\u4ec0\u4e48\u5728": 335, "\u96c6\u7fa4\u4e0a\u62c9\u8d77": 335, "\u5b9e\u4f8b\u65f6": 335, "\u4ea7\u751f\u8d85\u65f6\u5f02\u5e38": 335, "\u5927\u591a\u6570\u60c5\u51b5\u4e0b": 335, "\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5728": 335, "\u96c6\u7fa4\u62c9\u8d77": 335, "\u5b9e\u4f8b\u65f6\u9700\u8981\u4e0b\u8f7d\u5bf9\u5e94\u955c\u50cf": 335, "\u8fd9\u4e00\u6b65\u901a\u5e38\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4": 335, "\u9002\u5f53\u7684\u589e\u52a0\u8d85\u65f6\u7b49\u5f85\u65f6\u95f4\u6765\u89e3\u51b3\u8be5\u95ee\u9898": 335, "\u542f\u52a8graphscope\u65f6\u7531\u4e8e\u8fde\u63a5v6d": 335, "etcd\u7b49\u7ec4\u4ef6\u5931\u8d25\u800c\u5bfc\u81f4graphscope\u542f\u52a8\u5931\u8d25": 335, "\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4f60\u6240\u4f7f\u7528\u7684\u673a\u5668": 335, "\u6216\u5bb9\u5668": 335, "\u6240\u5728\u7684\u4f01\u4e1a\u7f51\u7edc\u5185\u8981\u6c42\u76f8\u5e94\u7684\u4ee3\u7406\u8bbe\u7f6e\u65b9\u53ef\u6b63\u5e38\u4f7f\u7528\u7f51\u7edc": 335, "\u8fd9\u4e9b\u4ee3\u7406\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u5730\u5740\u89e3\u6790\u4ee5\u53ca\u7aef\u53e3\u5360\u7528": 335, "\u4e3a\u907f\u514d\u7c7b\u4f3c\u60c5\u51b5": 335, "\u53ef\u5728\u73af\u5883\u53d8\u91cf": 335, "\u4e2d\u52a0\u5165graphscope\u76f8\u5173\u7684\u5730\u5740": 335, "\u4ee5\u53ca": [335, 342], "\u8bf7\u6ce8\u610f": 335, "no_proxy\u7684\u524d\u540e\u7f00\u89c4\u5219": 335, "unix": 335, "stackexchang": 335, "23452": 335, "\u5176\u4ed6\u95ee\u9898": 335, "\u60a8\u53ef\u4ee5\u63d0\u4ea4": 335, "\u63d0\u51fa\u4f60\u7684\u95ee\u9898": 335, "\u540c\u65f6": [335, 340], "\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528": 335, "\u505a\u4e3a\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 336, "\u53ef\u4ee5\u5904\u7406\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2": 336, "\u56fe\u5206\u6790\u548c\u56fe\u5b66\u4e60\u4efb\u52a1": 336, "\u5e76\u4e14\u5177\u6709\u6613\u4e8e\u4f7f\u7528": 336, "\u9ad8\u6027\u80fd\u548c\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u7b49\u7279\u70b9": 336, "\u672c\u7ae0\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e": 336, "\u4f7f\u7528": [336, 338, 341, 342, 343], "\u5e76\u5e2e\u52a9\u6570\u636e\u79d1\u5b66\u5bb6\u6765\u9ad8\u6548\u7684\u5206\u6790\u5927\u56fe": 336, "\u6570\u636e\u96c6": 336, "\u662f\u7531\u5fae\u8f6f\u5b66\u672f\u5173\u7cfb\u56fe": 336, "\u7684\u5b50\u96c6\u7ec4\u6210\u7684\u5f02\u6784\u56fe\u7f51\u7edc": 336, "\u8be5\u56fe\u4e2d\u5305\u542b4\u79cd\u7c7b\u578b\u7684\u5b9e\u4f53": 336, "\u5373\u8bba\u6587": 336, "\u4f5c\u8005": 336, "\u673a\u6784\u548c\u7814\u7a76\u9886\u57df": 336, "\u4ee5\u53ca\u8fde\u63a5\u4e24\u4e2a\u5b9e\u4f53\u7684\u56db\u79cd\u7c7b\u578b\u7684\u6709\u5411\u5173\u7cfb\u8fb9": 336, "\u6211\u4eec\u9700\u8981\u5904\u7406\u7684\u4efb\u52a1\u662f": 336, "\u7ed9\u51fa\u5f02\u6784\u7684": 336, "\u6570\u636e": 336, "\u5728\u8be5\u56fe\u4e0a\u9884\u6d4b\u6bcf\u7bc7\u8bba\u6587\u7684\u7c7b\u522b": 336, "\u8fd9\u662f\u4e00\u4e2a\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 336, "\u8be5\u4efb\u52a1\u53ef\u4ee5\u5f52\u7c7b\u5728\u5404\u4e2a\u9886\u57df": 336, "\u5404\u4e2a\u65b9\u5411\u6216\u7814\u7a76\u5c0f\u7ec4\u7684\u8bba\u6587": 336, "\u901a\u8fc7\u5bf9\u8bba\u6587\u5c5e\u6027\u548c\u5f15\u7528\u56fe\u4e0a\u7684\u7ed3\u6784\u4fe1\u606f\u5bf9\u8bba\u6587\u8fdb\u884c\u5206\u7c7b": 336, "\u5728\u8be5\u6570\u636e\u4e2d": 336, "\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u5305\u542b\u4e86\u4e00\u4e2a\u4ece\u8bba\u6587\u6807\u9898": 336, "\u6458\u8981\u62bd\u53d6\u7684": 336, "\u7ef4": 336, "\u5411\u91cf\u4f5c\u4e3a\u8868\u5f81": 336, "\u8be5\u8868\u5f81\u662f\u7ecf\u8fc7": 336, "\u9884\u8bad\u7ec3\u63d0\u524d\u83b7\u53d6\u7684": 336, "\u800c\u7ed3\u6784\u4fe1\u606f\u662f\u5728\u4ee5\u4e0b\u8fc7\u7a0b\u4e2d\u5373\u65f6\u8ba1\u7b97\u7684": 336, "\u4e0a\u56fe\u8868\u793a\u4e86\u7528\u6237\u901a\u8fc7": 336, "\u5ba2\u6237\u7aef\u8c03\u7528": 336, "\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u5de5\u4f5c\u6d41\u7a0b": 336, "\u6b65\u9aa4": 336, "\u5efa\u7acb\u4e00\u4e2a\u4f1a\u8bdd": 336, "\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4": 336, "\u5b9a\u4e49\u548c\u8f7d\u5165\u56fe": 336, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u56fe": 336, "\u6267\u884c\u56fe\u7b97\u6cd5\u505a\u56fe\u5206\u6790": 336, "\u6267\u884c\u57fa\u4e8e\u56fe\u6570\u636e\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1": 336, "\u7684\u7b2c\u4e00\u6b65": 336, "\u6211\u4eec\u9700\u8981\u5728": 336, "\u4e2d\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 336, "\u5bf9\u4e8e": [336, 339], "\u521b\u5efa\u4f1a\u8bdd\u9700\u8981\u4f7f\u7528": 336, "\u670d\u52a1\u7c7b\u578b": 336, "\u9ed8\u8ba4\u662f": 336, "\u53e6\u5916": [336, 342], "\u6ce8\u610f": [336, 339], "\u662f": 336, "\u4e3b\u673a\u4e0a\u7684\u8def\u5f84": 336, "\u5f53\u5728": 336, "\u4e0a\u4f7f\u7528": 336, "\u9700\u8981\u9996\u5148\u5c06\u6b64\u8def\u5f84\u52a0\u5165\u5230": 336, "\u7684\u5171\u4eab\u76ee\u5f55\u4e2d": 336, "\u901a\u5e38\u4e3a": 336, "\u66f4\u8be6\u7ec6\u7684\u6307\u5f15\u8bf7\u53c2\u770b": 336, "\u7684\u5efa\u7acb\u8fc7\u7a0b\u4e2d": 336, "\u9996\u9009\u4f1a\u5728\u80cc\u540e\u5c1d\u8bd5\u62c9\u8d77\u4e00\u4e2a": 336, "\u4f5c\u4e3a\u540e\u7aef\u5f15\u64ce\u7684\u5165\u53e3": 336, "\u8be5": 336, "\u8d1f\u8d23\u7ba1\u7406\u8be5\u6b21\u4f1a\u8bdd\u7684": 336, "\u6240\u6709\u8d44\u6e90": 336, "\u4ee5\u53ca\u4ea4\u4e92\u5f0f\u67e5\u8be2": 336, "\u56fe\u5b66\u4e60\u5f15\u64ce\u7684\u751f\u547d\u5468\u671f": 336, "\u540e\u7eed\u62c9\u8d77\u7684\u5176\u4ed6\u6bcf\u4e2a": 336, "\u90fd\u6709\u4e00\u4e2a": 336, "\u5b9e\u4f8b\u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u5c42": 336, "\u5206\u5e03\u5f0f\u7684\u7ba1\u7406\u56fe\u6570\u636e": 336, "\u8f7d\u56fe": [336, 337, 338], "\u4ee5\u5c5e\u6027\u56fe": 336, "\u5efa\u6a21\u56fe\u6570\u636e": [336, 342], "\u5c5e\u6027\u56fe\u4e2d": 336, "\u70b9\u548c\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 336, "\u4e0d\u540c\u7684\u6807\u7b7e\u6709\u4e0d\u540c\u7684\u5c5e\u6027": 336, "\u4e0b\u56fe\u5c55\u793a\u4e86\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 336, "\u8be5\u56fe\u5177\u6709\u56db\u79cd\u9876\u70b9": 336, "\u5206\u522b\u6807\u8bb0\u4e3a": 336, "\u8bba\u6587": 336, "\u673a\u6784": 336, "\u7814\u7a76\u9886\u57df": 336, "\u6709\u56db\u79cd\u8fde\u63a5\u5b83\u4eec\u7684\u8fb9": 336, "\u6bcf\u79cd\u8fb9\u90fd\u6709\u4e00\u4e2a\u6807\u7b7e": 336, "\u5e76\u4e14\u8fb9\u7684\u4e24\u7aef\u9876\u70b9\u7684\u6807\u7b7e\u4e5f\u662f\u786e\u5b9a\u7684": 336, "\u5f15\u7528": 336, "\u8fd9\u79cd\u6807\u7b7e\u7684\u8fb9\u8fde\u63a5\u4e24\u4e2a": 336, "\u9876\u70b9": 336, "\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u6807\u8bb0\u4e3a": 336, "\u64b0\u5199": 336, "\u7684\u8fb9": [336, 342], "\u5b83\u8981\u6c42\u8be5\u8d77\u59cb\u70b9\u7684\u6807\u8bb0\u4e3a": 336, "\u7ec8\u6b62\u70b9\u7684\u6807\u8bb0\u4e3a": 336, "\u6240\u6709\u7684\u9876\u70b9": 336, "\u548c\u8fb9\u90fd\u53ef\u4ee5\u5177\u6709\u5c5e\u6027": 336, "\u9876\u70b9\u5177\u6709\u8bf8\u5982\u53d1\u5e03\u5e74\u4efd": 336, "\u4e3b\u9898\u6807\u7b7e\u7b49\u5c5e\u6027": 336, "\u8981\u5c06\u6b64\u56fe\u52a0\u8f7d\u5230": 336, "\u53ef\u4ee5\u5c06\u4ee5\u4e0b\u4ee3\u7801\u4e0e": 336, "\u6570\u636e\u6587\u4ef6": 336, "\u7ed3\u5408\u4f7f\u7528": 336, "\u8bf7\u4e0b\u8f7d\u6570\u636e\u5e76\u5c06\u5176\u89e3\u538b\u7f29\u5230\u672c\u5730\u7684\u6302\u8f7d\u76ee\u5f55": 336, "\u5728\u672c\u4f8b\u4e2d\u4e3a": 336, "author_affiliated_with_institut": 336, "paper_has_topic_field_of_studi": 336, "hastop": 336, "paper_cites_pap": 336, "author_writes_pap": 336, "\u4e5f\u53ef\u901a\u8fc7\u6211\u4eec\u63d0\u4f9b\u7684\u5185\u7f6e\u6570\u636e\u96c6\u51fd\u6570\u5e2e\u52a9\u5b8c\u6210\u8f7d\u56fe\u6d41\u7a0b": 336, "\u8fd9\u91cc\u7684": 336, "\u5df2\u7ecf\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u5b58\u50a8\u5728": 336, "\u4e2d\u7684\u56fe": 336, "\u56fe\u6570\u636e\u5206\u5e03\u5728\u8fd9\u4e2a\u4f1a\u8bdd\u80cc\u540e\u62c9\u8d77\u7684": 336, "\u66f4\u591a\u7ec6\u8282\u8bf7\u67e5\u770b": 336, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u5141\u8bb8\u7528\u6237\u4ee5": 336, "\u63a2\u7d22\u6027": 336, "\u65b9\u5f0f\u6765\u63a2\u7d22": 336, "\u67e5\u770b\u548c\u663e\u793a\u56fe\u6570\u636e": 336, "\u4ee5\u65b9\u4fbf\u7684\u5b9a\u4f4d\u548c\u6d1e\u5bdf\u7279\u5b9a\u7684\u6df1\u5165\u4fe1\u606f": 336, "\u91c7\u7528\u79f0\u4e3a": 336, "\u7684\u9ad8\u7ea7\u8bed\u8a00\u8fdb\u884c\u56fe\u904d\u5386": 336, "\u5e76\u63d0\u4f9b\u5927\u89c4\u6a21\u7684\u9ad8\u6548\u6267\u884c": 336, "\u5728\u6b64\u793a\u4f8b\u4e2d": 336, "\u6211\u4eec\u4f7f\u7528\u56fe\u904d\u5386\u6765\u67e5\u770b\u4e24\u4f4d\u7ed9\u5b9a\u4f5c\u8005\u5171\u540c\u64b0\u5199\u7684\u8bba\u6587\u6570\u91cf": 336, "\u4e3a\u4e86\u7b80\u5316\u67e5\u8be2": 336, "\u6211\u4eec\u5047\u8bbe\u4f5c\u8005\u53ef\u4ee5\u5206\u522b\u7531id": 336, "\u552f\u4e00\u6807\u8bc6": 336, "\u56fe\u5206\u6790\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u4e00\u7c7b\u56fe\u8ba1\u7b97": 336, "\u4e8b\u5b9e\u8bc1\u660e": 336, "\u8bb8\u591a\u7b97\u6cd5": 336, "\u4f8b\u5982\u793e\u533a\u68c0\u6d4b": 336, "\u8def\u5f84\u548c\u8fde\u63a5\u6027": 336, "\u96c6\u4e2d\u6027": 336, "\u5728\u5404\u79cd\u4e1a\u52a1\u4e2d\u90fd\u975e\u5e38\u6709\u6548": 336, "\u5185\u5efa\u4e86\u4e00\u7ec4\u9884\u7f6e\u5e38\u7528\u7b97\u6cd5": 336, "\u65b9\u4fbf\u7528\u6237\u53ef\u4ee5\u8f7b\u677e\u5206\u6790\u56fe\u6570\u636e": 336, "\u4e0b\u9762\u6211\u4eec\u9996\u5148\u901a\u8fc7\u5728\u7279\u5b9a\u5468\u671f\u5185\u4ece\u5168\u56fe\u4e2d\u63d0\u53d6\u8bba\u6587": 336, "\u80cc\u540e\u57fa\u4e8e": 336, "\u6765\u5bfc\u51fa\u4e00\u4e2a\u5b50\u56fe": 336, "\u7136\u540e\u8fd0\u884c": 336, "\u5206\u89e3\u548c\u4e09\u89d2\u5f62\u8ba1\u6570\u4ee5\u751f\u6210\u6bcf\u4e2a\u8bba\u6587\u8282\u70b9\u7684\u7ed3\u6784\u7279\u5f81": 336, "\u7531\u4e8e\u8bb8\u591a\u7b97\u6cd5\u53ef\u80fd\u4ec5\u9002\u7528\u4e8e\u540c\u6784\u56fe": 336, "\u53ea\u6709\u4e00\u7c7b\u70b9\u548c\u4e00\u7c7b\u8fb9\u800c\u4e0d\u533a\u5206\u6807\u7b7e": 336, "\u8981\u5728\u5c5e\u6027\u56fe\u4e0a\u4f7f\u7528\u8fd9\u4e9b\u7b97\u6cd5": 336, "\u6211\u4eec\u9996\u5148\u9700\u8981\u5c06\u5176\u6295\u5f71\u5230\u4e00\u4e2a\u7b80\u5355\u7684\u540c\u6784\u56fe\u4e2d": 336, "\u7528\u6237\u8fd8\u53ef\u4ee5\u5728": 336, "\u4e2d\u7f16\u5199\u81ea\u5df1\u7684\u7b97\u6cd5": 336, "\u5f53\u524d": 336, "\u652f\u6301\u7528\u6237\u4ee5": 336, "\u6a21\u578b\u548c": 336, "\u6a21\u578b\u81ea\u5b9a\u4e49\u56fe\u7b97\u6cd5": 336, "\u7ed3\u5408\u4e86\u56fe\u7ed3\u6784\u548c\u673a\u5668\u5b66\u4e60\u7684\u4f18\u52bf": 336, "\u53ef\u4ee5\u5c06\u56fe\u4e2d\u7684\u7ed3\u6784\u4fe1\u606f\u548c\u5c5e\u6027\u4fe1\u606f\u538b\u7f29\u4e3a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684\u4f4e\u7ef4\u5d4c\u5165\u5411\u91cf": 336, "\u8fd9\u4e9b\u5d4c\u5165\u548c\u8868\u5f81\u53ef\u4ee5\u8fdb\u4e00\u6b65\u8f93\u5165\u5230\u4e0b\u6e38\u7684\u673a\u5668\u5b66\u4e60\u4efb\u52a1\u4e2d": 336, "\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d": 336, "\u6211\u4eec\u8bad\u7ec3\u4e86": 336, "\u6a21\u578b": 336, "\u5c06\u8282\u70b9": 336, "\u5206\u7c7b\u4e3a349\u4e2a\u7c7b\u522b": 336, "\u6bcf\u4e2a\u7c7b\u522b\u4ee3\u8868\u4e00\u4e2a\u51fa\u5904": 336, "\u4f8b\u5982\u9884\u5370\u672c\u548c\u4f1a\u8bae": 336, "\u4e3a\u6b64": 336, "\u63a5\u7740\u4e0a\u4e00\u6b65": 336, "\u9996\u5148\u9700\u8981\u542f\u52a8\u5b66\u4e60\u5f15\u64ce\u5e76\u6784\u5efa\u4e00\u4e2a\u5177\u6709\u7279\u5f81\u7684\u6570\u636e\u56fe": 336, "\u7136\u540e\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u5e76\u6267\u884c": 336, "train_gcn": 336, "\u6700\u540e": [336, 337, 340], "\u5f53\u6211\u4eec\u5b8c\u6210\u6240\u6709\u7684\u8ba1\u7b97\u8fc7\u7a0b\u540e": 336, "\u5173\u95ed\u5f53\u524d\u7684\u4f1a\u8bdd": 336, "\u8be5\u6b65\u9aa4\u4f1a\u544a\u77e5\u80cc\u540e\u7684": 336, "\u548c\u5f15\u64ce": 336, "\u91ca\u653e\u5f53\u524d\u6240\u6709\u7684\u8d44\u6e90": 336, "\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e00\u7cfb\u5217\u53ef\u4ee5\u5728\u56fe\u4e0a\u8fdb\u884c\u65b0\u589e": 337, "\u6295\u5f71\u7684\u65b9\u6cd5": 337, "\u4ee5\u53ca\u5982\u4f55\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u56fe\u8f6c\u6362\u4e3a\u53ef\u4ee5\u9002\u914d\u666e\u901a\u7b97\u6cd5\u5e94\u7528\u7684\u65b9\u6cd5": 337, "\u6211\u4eec\u5c55\u793a\u5982\u4f55\u5c06\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u52a0\u56de\u5230\u56fe\u4e2d\u53bb": 337, "\u5177\u4f53\u800c\u8a00": 337, "\u56fe": 337, "\u63d0\u4f9b\u4e86\u4e24\u4e2a\u589e\u52a0\u6807\u7b7e\u7684\u51fd\u6570": 337, "\u548c\u4e00\u4e2a\u6295\u5f71\u7684\u51fd\u6570": 337, "\u6211\u4eec\u5df2\u7ecf\u5728": 337, "\u4e00\u8282\u89c1\u5230\u8fc7": 337, "\u8fd9\u4e24\u4e2a\u51fd\u6570": 337, "\u5f53\u65f6\u6211\u4eec\u7528\u5b83\u6765\u6784\u5efa\u4e00\u5f20\u56fe": 337, "\u8fdb\u4e00\u6b65\u7684": 337, "\u5f53\u56fe\u6784\u5efa\u597d\u5e76\u8f7d\u5165\u4e86": 337, "\u4e2d\u4e4b\u540e": 337, "\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u7528\u5176\u589e\u52a0\u66f4\u591a\u7684\u6807\u7b7e": 337, "\u5f53\u7136\u8fd9\u4e00\u6b65\u5e76\u4e0d\u4f1a\u5728\u539f\u56fe\u4e0a\u4fee\u6539": 337, "\u800c\u662f\u4f1a\u8fd4\u56de\u57fa\u4e8e\u539f\u56fe\u4e4b\u4e0a": 337, "\u589e\u52a0\u4e86\u65b0\u7684\u6807\u7b7e\u7684\u65b0\u56fe": 337, "\u5c5e\u6027\u56fe\u4e3a\u4f8b": 337, "\u6211\u4eec\u73b0\u5728\u8f7d\u5165\u5176\u4e2d\u4e00\u90e8\u5206\u6807\u7b7e": 337, "\u4f5c\u4e3a\u63a5\u4e0b\u6765\u4e00\u7cfb\u5217\u8f6c\u6362\u64cd\u4f5c\u7684\u8d77\u59cb\u56fe": 337, "pathlib": 337, "\u5230\u8fd9\u91cc": 337, "\u6211\u4eec\u5df2\u7ecf\u8f7d\u5165\u4e86\u4e00\u5f20\u56fe": 337, "\u63a5\u4e0b\u6765\u6211\u4eec\u5728\u8fd9\u5f20\u56fe\u4e0a\u518d\u6dfb\u52a0\u51e0\u4e2a\u6807\u7b7e": 337, "graph1": 337, "graph2": 337, "\u53ef\u4ee5\u770b\u5230\u6bcf\u6b21": 337, "\u90fd\u4f1a\u4ea7\u751f\u4e00\u5f20\u65b0\u7684\u56fe": 337, "\u5728\u5e95\u5c42": 337, "\u4ed6\u4eec\u5171\u6709\u7684\u90e8\u5206\u4f1a\u6307\u5411\u540c\u4e00\u5757\u5185\u5b58": 337, "\u6240\u4ee5\u5e76\u4e0d\u4f1a\u5c06\u539f\u56fe\u7684\u6570\u636e\u590d\u5236\u4e00\u4efd": 337, "\u5728\u67d0\u4e9b\u573a\u666f\u4e0b": 337, "\u6211\u4eec\u9700\u8981\u5c06\u4ece\u4e00\u5f20\u590d\u6742\u7684\u56fe\u63d0\u53d6\u51fa\u4e00\u4e2a\u5b50\u56fe": 337, "\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u501f\u52a9": 337, "\u6765\u5b8c\u6210": 337, "\u5305\u542b\u4e24\u4e2a\u53c2\u6570": 337, "\u5176\u503c\u4e3a\u4e00\u4e2a\u5b57\u5178": 337, "\u5b57\u5178\u7684\u952e\u662f\u6807\u7b7e\u540d": 337, "\u503c\u662f\u8981\u53d6\u7684\u5c5e\u6027\u7684\u5217\u8868": 337, "\u503c\u53ef\u4ee5\u4e3a": 337, "\u4ee3\u8868\u9009\u62e9\u6240\u6709\u7684\u5c5e\u6027": 337, "\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a\u5c5e\u6027\u56fe": 337, "\u5e76\u4e14\u53ef\u4ee5\u88ab\u8fdb\u4e00\u6b65": 337, "\u4ee5\u4e0b\u662f\u51e0\u4e2a\u4f8b\u5b50": 337, "\u5305\u542b\u4e00\u4e2a\u70b9\u6807\u7b7e": 337, "\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 337, "\u4ee5\u53ca\u6240\u9009\u62e9\u7684\u5c5e\u6027": 337, "sub_graph2": 337, "\u73b0\u5728\u70b9\u4e0a\u6ca1\u6709\u5c5e\u6027": 337, "\u8fb9\u4e0a\u6709\u4e00\u4e2a\u5c5e\u6027": 337, "\u5f53\u6267\u884c\u4e00\u4e2a\u4ec5\u53ef\u4ee5\u8dd1\u5728\u7b80\u5355\u56fe\u4e0a\u7684\u7b97\u6cd5\u65f6": 337, "\u5176\u4f1a\u9ed8\u8ba4\u5c06\u5176\u53c2\u6570\u4e2d\u7684\u5c5e\u6027\u56fe\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 337, "\u5982\u679c\u4e0d\u80fd\u8fdb\u884c\u8fd9\u79cd\u8f6c\u6362": 337, "\u5373\u591a\u4e8e\u4e00\u4e2a\u70b9\u6807\u7b7e\u548c\u4e00\u4e2a\u8fb9\u6807\u7b7e": 337, "\u6216\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 337, "\u90a3\u4e48\u5c31\u4f1a\u62a5\u9519": 337, "\u8f6c\u6362\u4e0d\u5408\u6cd5": 337, "\u591a\u4e8e\u4e00\u4e2a\u70b9": 337, "\u8fb9\u6807\u7b7e": 337, "\u591a\u4e8e\u4e00\u4e2a\u5c5e\u6027": 337, "\u4e0a\u4e00\u6b65\u7b97\u6cd5\u7684\u8fd0\u884c\u7ed3\u679c\u53ef\u4ee5\u88ab\u52a0\u5165\u4e00\u5f20\u56fe\u4e2d": 337, "\u4f5c\u4e3a\u70b9\u7684\u4e00\u4e2a\u5c5e\u6027": 337, "\u4e0d\u4ec5\u53ef\u4ee5\u52a0\u5165\u8fd0\u7b97\u7ed3\u679c\u5230\u76f4\u63a5\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 337, "\u8fd8\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u67e5\u8be2\u7ed3\u679c\u52a0\u5230\u88ab": 337, "\u800c\u5f97\u5230\u88ab\u67e5\u8be2\u7684\u56fe\u4e0a": 337, "\u53ea\u8981\u88ab\u52a0\u5165\u5c5e\u6027\u7684\u70b9\u6807\u7b7e\u76f8\u540c": 337, "\u662f\u963f\u91cc\u5df4\u5df4\u8fbe\u6469\u9662\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u7814\u53d1\u5e76\u5f00\u6e90\u7684\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u5e73\u53f0": 338, "\u4f9d\u6258\u4e8e\u963f\u91cc\u6d77\u91cf\u6570\u636e\u548c\u4e30\u5bcc\u573a\u666f": 338, "\u4e0e\u8fbe\u6469\u9662\u7684\u9ad8\u6c34\u5e73\u7814\u7a76": 338, "\u81f4\u529b\u4e8e\u9488\u5bf9\u5b9e\u9645\u751f\u4ea7\u573a\u666f\u4e2d\u56fe\u8ba1\u7b97\u7684\u6311\u6218": 338, "\u63d0\u4f9b\u4e00\u7ad9\u5f0f\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848": 338, "\u63d0\u4f9b\u4e86": 338, "\u80fd\u5341\u5206\u65b9\u4fbf\u7684\u5bf9\u63a5\u4e0a\u4e0b\u6e38\u5de5\u4f5c\u6d41": 338, "\u5177\u6709\u4e00\u7ad9\u5f0f": 338, "\u5f00\u53d1\u4fbf\u6377": 338, "\u6027\u80fd\u6781\u81f4\u7b49\u7279\u70b9": 338, "\u5b83\u6574\u5408\u4e86\u667a\u80fd\u8ba1\u7b97\u5b9e\u9a8c\u5ba4\u591a\u4e2a\u91cd\u8981\u7684\u521b\u65b0\u6027\u6280\u672f": 338, "\u5305\u62ec": [338, 341], "\u652f\u6301\u4e86\u56fe\u5206\u6790": 338, "\u56fe\u7684\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u5b66\u4e60": 338, "\u5176\u4e2d\u6838\u5fc3\u4f18\u52bf\u5305\u62ec\u5728\u4e1a\u754c\u9996\u6b21\u652f\u6301\u4e86": 338, "\u5206\u5e03\u5f0f\u7f16\u8bd1\u4f18\u5316": 338, "\u652f\u6301\u4e86\u7b97\u6cd5\u7684\u81ea\u52a8\u5e76\u884c\u5316": 338, "\u63d0\u4f9b\u4e86\u4f01\u4e1a\u7ea7\u573a\u666f\u4e0b\u7684\u6781\u81f4\u6027\u80fd\u7b49": 338, "\u5728\u963f\u91cc\u5df4\u5df4\u5185\u5916\u90e8\u5e94\u7528\u4e2d": 338, "\u5df2\u7ecf\u8bc1\u660e\u5728\u591a\u4e2a\u5173\u952e\u4e92\u8054\u7f51\u9886\u57df": 338, "\u5982\u98ce\u63a7": 338, "\u7535\u5546\u63a8\u8350": 338, "\u5e7f\u544a": 338, "\u7f51\u7edc\u5b89\u5168": [338, 341], "\u77e5\u8bc6\u56fe\u8c31\u7b49": 338, "\u5b9e\u73b0\u4e86\u91cd\u8981\u7684\u4e1a\u52a1\u65b0\u4ef7\u503c": 338, "\u6574\u5408\u4e86\u8fbe\u6469\u9662\u7684\u591a\u9879\u5b66\u672f\u7814\u7a76\u6210\u679c": 338, "\u5176\u4e2d\u7684\u6838\u5fc3\u6280\u672f\u66fe\u83b7\u5f97\u6570\u636e\u5e93\u9886\u57df\u9876\u7ea7\u5b66\u672f\u4f1a\u8bae": 338, "\u6700\u4f73\u8bba\u6587\u5956": 338, "vldb2017": 338, "\u6700\u4f73\u6f14\u793a\u5956": 338, "vldb2020": 338, "\u6700\u4f73\u8bba\u6587\u5956\u4e9a\u519b": 338, "\u4e16\u754c\u4eba\u5de5\u667a\u80fd\u521b\u65b0\u5927\u8d5bsail\u5956\u7b49": 338, "\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce\u7684\u8bba\u6587\u5df2\u88ab": 338, "2021\u5f55\u7528": 338, "\u8fd8\u6709\u5176\u5b83\u56f4\u7ed5": 338, "\u7684\u5341\u591a\u9879\u7814\u7a76\u6210\u679c\u53d1\u8868\u5728\u9886\u57df\u9876\u7ea7\u7684\u5b66\u672f\u4f1a\u8bae\u6216\u671f\u520a\u4e0a": 338, "kdd\u7b49": 338, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 338, "\u57fa\u4e8e": [338, 343], "\u793a\u4f8b": 338, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 338, "\u521b\u5efa\u4f1a\u8bdd": 338, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 338, "\u56fe\u5206\u6790": 338, "\u56fe\u795e\u7ecf\u7f51\u7edc": 338, "\u5173\u95ed\u4f1a\u8bdd": 338, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 338, "\u5728aw": 338, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 338, "\u672c\u5730\u90e8\u7f72graphscop": 338, "\u5165\u95e8\u6559\u7a0b": 338, "\u8bba\u6587\u5f15\u7528\u5173\u7cfb\u7f51\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [338, 343], "\u4f7f\u7528\u517c\u5bb9": [338, 343], "\u8fdb\u884c\u56fe\u64cd\u4f5c": [338, 343], "\u7528": [338, 340, 343], "\u50cf": [338, 343], "\u4e00\u6837\u8fdb\u884c\u56fe\u5206\u6790": [338, 343], "\u8f7d\u5165\u56fe\u6570\u636e": [338, 343], "\u5185\u7f6e\u7684\u56fe\u5206\u6790\u7b97\u6cd5": [338, 343], "\u7f16\u5199\u81ea\u5b9a\u4e49\u56fe\u5206\u6790\u7b97\u6cd5": [338, 343], "\u4f7f\u7528\u67e5\u8be2\u8bed\u8a00": [338, 343], "\u8fdb\u884c\u4ea4\u4e92\u5f0f\u67e5\u8be2": [338, 343], "\u8fdb\u884c\u65e0\u76d1\u7763\u56fe\u5b66\u4e60": [338, 343], "bipartitegraphsag": [338, 343], "\u7684\u4e8c\u90e8\u56fe\u65e0\u76d1\u7763\u5b66\u4e60": [338, 343], "\u8fdb\u884c\u6709\u76d1\u7763\u56fe\u5b66\u4e60": [338, 343], "\u73af\u5883\u518d\u63a2\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [338, 343], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 338, "\u624b\u52a8\u914d\u7f6e\u56fe": 338, "\u9ad8\u7ea7\u7528\u6cd5": 338, "\u4ece": [338, 340], "\u4e2d\u8f7d\u56fe": 338, "\u7684\u53d8\u79cd": 338, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 338, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 338, "\u6295\u5f71": 338, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 338, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 338, "\u5185\u7f6e\u7b97\u6cd5": 338, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 338, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 338, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 338, "\u4e2d\u7684\u51fd\u6570": 338, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 338, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 338, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 338, "\u5229\u7528python": 338, "\u8fde\u63a5graphscop": 338, "\u5229\u7528java": 338, "\u5f00\u53d1\u63a7\u5236\u53f0": 338, "gremlin\u7f16\u7a0b\u5165\u95e8": 338, "gremlin\u517c\u5bb9\u6027": 338, "\u5bf9\u6bd4tinkerpop": 338, "\u56fe\u5b66\u4e60\u6a21\u578b": 338, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 338, "\u5e38\u89c1\u95ee\u9898": 338, "\u5f00\u53d1\u8005\u6307\u5357": 338, "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 338, "\u6784\u5efa": 338, "\u4ee3\u7801\u98ce\u683c": 338, "\u76ee\u524d\u652f\u6301\u7684\u5e73\u53f0\u5982\u4e0b": 339, "monterei": 339, "\u7a0b\u5e8f\u5305": 339, "\u7684\u5f62\u5f0f\u53d1\u5e03": 339, "\u53ef\u76f4\u63a5\u901a\u8fc7": 339, "\u9700\u8981\u6ee1\u8db3": 339, "\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u672c\u6587\u6863\u7684\u4ee5\u4e0b\u6b65\u9aa4\u90e8\u7f72\u4e00\u4e2a\u672c\u5730": 339, "\u5e76\u52a0\u8f7d\u9884\u7f16\u8bd1\u597d\u7684\u955c\u50cf": 339, "\u73af\u5883\u4e0b\u8fd0\u884c": 339, "\u9996\u5148\u9700\u8981\u9884\u5148\u5b89\u88c5\u4ee5\u4e0b\u4f9d\u8d56": 339, "\u7684\u7528\u6237": 339, "\u53ef\u901a\u8fc7\u5b98\u65b9\u6587\u6863\u6765\u5b89\u88c5\u4e0a\u8ff0\u4f9d\u8d56": 339, "\u5e76\u5728": 339, "\u4e2d\u5f00\u542f": 339, "\u529f\u80fd": 339, "\u53d1\u884c\u7248\u7528\u6237": 339, "\u6211\u4eec\u63d0\u4f9b\u4e86\u811a\u672c\u6765\u51c6\u5907\u8fd0\u884c\u65f6\u73af\u5883": 339, "\u60a8\u4e5f\u53ef\u4ee5\u5728": 339, "\u4e0a\u5b89\u88c5": 339, "wsl2": 339, "\u4ee5\u4f7f\u7528\u811a\u672c": 339, "install_dep": 339, "\u63a5\u4e0b\u6765": [339, 340, 341], "\u6211\u4eec\u53ea\u9700\u8981\u901a\u8fc7": 339, "graphscope\u7684\u4ea4\u4e92\u67e5\u8be2\u5f15\u64ce": 340, "\u7b80\u79f0gie": 340, "\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7cfb\u7edf": 340, "\u5b83\u4e3a\u4e0d\u540c\u7ecf\u9a8c\u7684\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u7528\u7684\u4ea4\u4e92\u5f0f\u73af\u5883": 340, "\u652f\u6301\u6d77\u91cf\u590d\u6742\u56fe\u6570\u636e\u4e0a\u7684": 340, "\u5b9e\u65f6\u5206\u6790\u4e0e\u4ea4\u4e92\u63a2\u7d22": 340, "\u8be5\u5f15\u64ce\u652f\u6301": 340, "\u8bed\u8a00\u8868\u8fbe\u7684\u4ea4\u4e92\u56fe\u67e5\u8be2": 340, "\u5e76\u63d0\u4f9b\u4e86\u81ea\u52a8\u5316\u548c\u7528\u6237\u900f\u660e\u7684\u5206\u5e03\u5f0f\u5e76\u884c\u6267\u884c": 340, "\u662f\u57fa\u4e8egremlin\u8bed\u8a00\u5f00\u53d1\u4ea4\u4e92\u5f0f\u56fe\u5e94\u7528\u7684\u4e00\u4e2a\u5f00\u6e90\u6846\u67b6\u548c\u4e8b\u5b9e\u6807\u51c6": 340, "gie\u901a\u8fc7tinkerpop\u63d0\u4f9b\u7684": 340, "\u63a5\u53e3": [340, 341], "\u5b9e\u73b0\u4e86\u4e0etinkerpop\u751f\u6001\u65e0\u7f1d\u96c6\u6210": 340, "\u4ece\u800c\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u8bf8\u5982": 340, "\u7684\u5f00\u53d1\u5de5\u5177\u6216\u901a\u8fc7java\u548cpython\u7b49\u591a\u79cd\u8bed\u8a00\u63a5\u53e3\u7f16\u5199\u5e94\u7528\u903b\u8f91": 340, "\u5982\u4e0b\u6240\u793a": 340, "\u7528\u6237\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u901a\u8fc7python\u8fde\u4e0a\u4e00\u4e2a\u8f7d\u5165graphscope\u7cfb\u7edf\u7684\u56fe\u5e76\u53d1\u8d77gremlin\u67e5\u8be2": 340, "\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u4e92\u4f1a\u8bdd": 340, "\u8f7d\u5165ldbc\u793a\u4f8b\u56fe\u6570\u636e": 340, "\u968f\u540e\u8fd4\u56de\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 340, "\u4e0b\u9762\u4e24\u53e5gremlin\u793a\u4f8b\u67e5\u8be2\u5206\u522b\u8ba1\u7b97\u56fe\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u603b\u6570": 340, "\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684": 340, "\u5bf9\u8c61\u4e8b\u5b9e\u4e0a\u662fpython\u7c7b": 340, "\u7684\u4e00\u4e2a\u5b9e\u4f8b": 340, "\u800c\u8fd9\u4e00\u7c7b\u5c01\u88c5\u4e86\u7528python\u5b9e\u73b0\u7684\u5b8c\u6574gremlin\u5ba2\u6237\u7aef\u7c7b\u5e93": 340, "\u6bcf\u4e00\u4e2a\u8f7d\u5165graphscope\u7684\u56fe\u90fd\u5305\u542b\u4e00\u4e2agremlin\u67e5\u8be2\u63d0\u4ea4\u5165\u53e3": 340, "\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u6837\u83b7\u5f97\u5177\u4f53\u7684\u8bbf\u95ee\u5730\u5740": 340, "\u4e0a\u9762\u7684\u8bed\u53e5\u4f1a\u4ea7\u751f\u5982\u4e0b": 340, "\u683c\u5f0f": 340, "\u7684\u8f93\u51fa": 340, "\u6709\u4e86\u8fd9\u4e00url\u4fe1\u606f": 340, "\u7528\u6237\u4e5f\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528gremlin": 340, "python\u8bbf\u95ee\u56fe\u6570\u636e": 340, "\u5177\u4f53\u53ef\u4ee5\u53c2\u8003": 340, "\u5b98\u65b9\u6587\u6863": 340, "tinkerpop\u540c\u65f6\u652f\u6301java\u8bed\u8a00\u6309\u7c7b\u4f3c\u65b9\u5f0f\u8bbf\u95ee": 340, "\u8be6\u89c1gremlin": 340, "java\u7684": 340, "\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0egraphscope\u5b58\u50a8\u7684\u56fe\u6570\u636e\u8fdb\u884c\u4ea4\u4e92\u7684\u63a7\u5236\u53f0": 340, "\u4e5f\u53eb\u505arepl\u73af\u5883": 340, "\u4e0b\u9762\u63cf\u8ff0\u5982\u4f55\u5229\u7528\u4e0a\u6587\u83b7\u5f97\u7684url": 340, "\u5b89\u88c5\u548c\u914d\u7f6egremlin": 340, "console\u4ee5\u8fde\u63a5graphscope\u7684\u6b65\u9aa4": 340, "\u5b89\u88c5gremlin": 340, "console\u4f9d\u8d56\u7684java\u8fd0\u884c\u65f6\u73af\u5883": 340, "\u7248\u672c\u9700\u8981\u6ee1\u8db3": 340, "\u4e0b\u8f7d\u9002\u5f53\u7248\u672c\u7684gremlin": 340, "\u89e3\u538b\u7f29\u4e0b\u8f7d\u7684\u6587\u4ef6": 340, "\u8fdb\u5165\u89e3\u538b\u7f29\u7684\u76ee\u5f55": 340, "\u5b50\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 340, "\u7684\u6587\u672c\u6587\u4ef6\u4ee5\u914d\u7f6eurl": 340, "\u5177\u4f53\u5185\u5bb9\u5982\u4e0b\u6240\u793a": 340, "\u5176\u4e2d\u7684": 340, "\u9700\u8981\u5206\u522b\u66ff\u6362\u4e3a\u4ecegraphscope\u4f1a\u8bdd\u5f97\u5230\u7684url\u4e2d\u5bf9\u5e94\u7684\u4e3b\u673a\u540d": 340, "\u6216ip": 340, "\u548c\u7aef\u53e3": 340, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u542f\u52a8gremlin": 340, "\u63d0\u793a\u7b26\u4e0b": 340, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u8fde\u63a5\u5230\u5bf9\u5e94\u7684graphscope\u4f1a\u8bdd": 340, "\u7b2c\u4e8c\u6761\u547d\u4ee4\u5207\u6362\u5230\u8fdc\u7a0b\u6a21\u5f0f": 340, "\u4ece\u800c\u63a5\u4e0b\u6765\u8f93\u5165\u7684\u6240\u6709gremlin\u67e5\u8be2\u90fd\u88ab\u81ea\u52a8\u4f20\u8f93\u5230": 340, "\u8fdc\u7a0b": 340, "graphscope\u6267\u884c": 340, "\u73b0\u5728\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e9b\u7b80\u5355\u7684gremlin\u67e5\u8be2\u4e86": 340, "\u5f53\u4f60\u5b8c\u6210\u4ea4\u4e92": 340, "\u8f93\u5165\u4e0b\u5217\u547d\u4ee4\u53ef\u4ee5\u9000\u51fagremlin": 340, "gie\u4ee5\u5fe0\u5b9e\u4fdd\u7559gremlin\u7f16\u7a0b\u6a21\u578b\u4e3a\u8bbe\u8ba1\u76ee\u6807": 340, "\u4ece\u800c\u8ba9\u5df2\u6709\u7684\u5e94\u7528\u53ea\u9700\u6700\u5c0f\u5316\u7684\u4fee\u6539\u5c31\u53ef\u4ee5\u6269\u5c55\u5230\u5927\u89c4\u6a21\u8ba1\u7b97\u96c6\u7fa4": 340, "\u5728\u6b64\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2agremlin\u7684\u603b\u4f53\u4ecb\u7ecd": 340, "\u7279\u522b\u662f\u5176\u4e2d\u5305\u542b\u7684\u56fe\u6570\u636e\u6a21\u578b\u548c\u67e5\u8be2\u8bed\u8a00\u7b49\u5173\u952e\u6982\u5ff5": 340, "\u66f4\u8be6\u7ec6\u548c\u5b8c\u6574\u7684\u4ecb\u7ecd": 340, "gremlin\u5141\u8bb8\u7528\u6237\u5728\u5c5e\u6027\u56fe\u6a21\u578b\u4e0a\u5b9a\u4e49\u7279\u8bbe": 340, "hoc": 340, "\u904d\u5386\u67e5\u8be2": 340, "\u4e00\u4e2a\u5c5e\u6027\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u56fe": 340, "\u5176\u4e2d\u7684\u9876\u70b9\u548c\u8fb9\u53ef\u4ee5\u62e5\u6709\u4e00\u7ec4\u5c5e\u6027": 340, "\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5bf9\u8c61": 340, "\u70b9\u6216\u8fb9": 340, "\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6": 340, "\u548c\u4e00\u4e2a\u7c7b\u522b\u540d\u79f0": 340, "\u6307\u5b9a\u5176\u7c7b\u578b\u6216\u89d2\u8272": 340, "\u6bcf\u4e2a\u5c5e\u6027\u662f\u4e00\u4e2a\u5305\u542b\u5c5e\u6027\u540d\u548c\u5c5e\u6027\u503c\u7684": 340, "\u952e": 340, "\u503c": 340, "\u5bf9": 340, "\u5176\u6240\u5c5e\u5bf9\u8c61\u7684": 340, "\u52a0\u4e0a\u5c5e\u6027\u540d\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u5c5e\u6027\u503c": 340, "\u4e0a\u56fe\u5c55\u793a\u4e86\u4e00\u4e2a\u5c5e\u6027\u56fe\u6a21\u578b\u793a\u4f8b": 340, "\u5b83\u5305\u542b": 340, "\u7528\u6237": 340, "\u5546\u54c1": 340, "\u5730\u5740": 340, "\u4e09\u7c7b\u70b9": 340, "\u5b83\u4eec\u901a\u8fc7": 340, "\u8d2d\u4e70": 340, "\u9012\u9001": 340, "belongs_to": 340, "\u5c5e\u4e8e": 340, "home_of": 340, "\u5bb6\u5ead\u5730\u5740": 340, "\u56db\u7c7b\u8fb9\u76f8\u4e92\u5173\u8054": 340, "\u56fe\u4e2d\u865a\u7ebf\u5c55\u793a\u7684\u4e00\u6761": 340, "\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684": 340, "\u8def\u5f841": 340, "\u4ee3\u8868\u4e86\u4e00\u4e2a\u7528\u6237": 340, "\u4e70\u5bb6": 340, "tom": 340, "\u8d2d\u4e70\u4e86\u4e00\u4e2a\u5356\u5bb6": 340, "jack": 340, "\u63d0\u4f9b\u7684\u6807\u4ef7": 340, "\u7684\u5546\u54c1": 340, "gift": 340, "\u4e00\u4e2agremlin\u67e5\u8be2\u6216\u56fe\u904d\u5386\u7684\u6267\u884c": 340, "\u53ef\u4ee5\u7528\u4e00\u7ec4": 340, "\u904d\u5386\u5668": 340, "\u6807\u8bc6": 340, "\u5b83\u4eec\u4f9d\u636egremlin\u67e5\u8be2\u63d0\u4f9b\u7684\u7528\u6237\u6307\u4ee4\u5728\u8f93\u5165\u56fe\u4e2d\u6e38\u8d70": 340, "\u6700\u7ec8\u6240\u6709\u505c\u6b62\u7684\u904d\u5386\u5668\u96c6\u5408": 340, "\u5305\u542b\u5b83\u4eec\u7684\u4f4d\u7f6e": 340, "\u4ee3\u8868\u4e86\u67e5\u8be2\u7684\u7ed3\u679c": 340, "\u4e00\u4e2a\u904d\u5386\u5668\u662fgremlin\u5f15\u64ce\u5904\u7406\u7684\u6700\u5c0f\u6570\u636e\u5355\u5143": 340, "\u6bcf\u4e2a\u904d\u5386\u5668\u90fd\u7ef4\u62a4\u5b83\u5bf9\u5e94\u7684\u56fe\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e": 340, "\u53ef\u4ee5\u662f\u88ab\u8bbf\u95ee\u7684\u70b9": 340, "\u8fb9\u6216\u5c5e\u6027": 340, "\u53ef\u9009\u7684\u5b83\u4e5f\u53ef\u4ee5\u5305\u542b\u8d70\u8fc7\u7684\u5b8c\u6574\u8def\u5f84\u5386\u53f2\u751a\u81f3\u5e94\u7528\u72b6\u6001": 340, "gremlin\u8bed\u8a00\u4e30\u5bcc\u7075\u6d3b\u7684\u8868\u8fbe\u80fd\u529b\u4e3b\u8981\u6765\u81ea\u4e8e\u5b83\u5bf9": 340, "\u5d4c\u5957\u904d\u5386": 340, "\u7684\u652f\u6301": 340, "\u5b83\u5141\u8bb8\u4e00\u4e2a": 340, "\u5b50": 340, "\u67e5\u8be2\u6216\u904d\u5386\u88ab\u5305\u542b\u5728\u53e6\u4e00\u4e2a\u64cd\u4f5c\u4e2d": 340, "\u4f5c\u4e3a\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u51fd\u6570\u88ab\u5305\u88f9\u64cd\u4f5c\u7528\u4e8e\u5904\u7406\u5176\u6bcf\u4e00\u4e2a\u8f93\u5165": 340, "\u51fd\u6570\u7684\u58f0\u660e\u548c\u4f5c\u7528\u90fd\u7531\u5305\u88f9\u64cd\u4f5c\u7684\u8bed\u4e49\u51b3\u5b9a": 340, "\u8fc7\u6ee4": 340, "\u64cd\u4f5c\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u67e5\u8be2": 340, "\u4f5c\u4e3a\u8fc7\u6ee4\u6761\u4ef6\u8c13\u8bcd": 340, "\u800c": 340, "\u6620\u5c04": 340, "\u6392\u5e8f": 340, "\u64cd\u4f5c\u5404\u81ea\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u67e5\u8be2\u8bb2\u6bcf\u4e00\u4e2a\u8f93\u5165\u5355\u72ec\u6620\u5c04\u5230\u4ece\u5b83\u5f00\u59cb\u7684\u5b50\u904d\u5386\u5f97\u5230\u7684\u7ed3\u679c": 340, "\u6216\u4f9d\u636e\u7ed3\u679c\u503c\u4f5c\u4e3a\u6392\u5e8f\u4f9d\u636e": 340, "\u5d4c\u5957\u904d\u5386\u7684\u53e6\u4e00\u4e2a\u91cd\u8981\u5e94\u7528\u662f\u8868\u8fbe\u5faa\u73af": 340, "\u5728gremlin\u4e2d\u901a\u8fc7": 340, "\u5faa\u73af": 340, "\u64cd\u4f5c\u548c\u968f\u540e\u7684": 340, "\u7ec8\u6b62\u6761\u4ef6": 340, "\u8868\u8fbe": 340, "\u64cd\u4f5c\u5305\u542b\u4e00\u4e2a\u5d4c\u5957\u904d\u5386\u4f5c\u4e3a\u5faa\u73af\u4f53": 340, "\u6bcf\u4e00\u4e2a\u8f93\u5165\u90fd\u4f1a\u91cd\u590d\u9001\u5165\u8fd9\u4e00\u5b50\u67e5\u8be2": 340, "\u76f4\u5230\u7ec8\u6b62\u6761\u4ef6\u6ee1\u8db3": 340, "\u6761\u4ef6\u7ec8\u6b62": 340, "\u64cd\u4f5c\u7c7b\u4f3c": 340, "\u53ef\u4ee5\u8868\u8fbe\u4e00\u4e2a\u6761\u4ef6\u8c13\u8bcd": 340, "\u5b83\u88ab\u72ec\u7acb\u5e94\u7528\u4e8e\u5faa\u73af\u4f53\u7684\u6bcf\u4e00\u4e2a\u8f93\u51fa\u904d\u5386\u5668": 340, "\u6ee1\u8db3\u6761\u4ef6\u7684\u904d\u5386\u5668\u5c31\u4f1a\u79bb\u5f00\u5faa\u73af": 340, "\u53e6\u4e00\u4e2a\u5e38\u7528\u7684": 340, "\u8fed\u4ee3\u8f6e\u6b21\u7ec8\u6b62": 340, "\u64cd\u4f5c\u53ef\u4ee5\u5229\u7528\u4e00\u4e2a\u6574\u578b\u5e38\u91cf": 340, "\u8868\u8fbe\u56fa\u5b9a\u8fed\u4ee3\u8f6e\u6b21\u540e\u7ec8\u6b62\u5faa\u73af": 340, "\u4e0b\u9762\u5c55\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684gremlin\u793a\u4f8b": 340, "\u5b83\u5c1d\u8bd5\u4ece\u4e00\u4e2a\u7ed9\u5b9a\u8d26\u6237": 340, "\u70b9\u5f00\u59cb\u627e\u5230\u957f\u5ea6\u4e3a": 340, "\u7684\u6709\u5411\u73af\u8def": 340, "\u9996\u5148": [340, 342], "\u8f93\u5165\u56fe\u64cd\u4f5c": 340, "\u5305\u542b\u4e00\u4e2a": 340, "\u8868\u8fbe\u7684\u7b80\u5355\u8fc7\u6ee4": 340, "\u8fd4\u56de\u56fe\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684": 340, "\u70b9": 340, "\u5373\u552f\u4e00\u6807\u8bc6\u4e3a": 340, "\u7684\u70b9": 340, "\u7d27\u968f\u5176\u540e\u7684": 340, "\u64cd\u4f5c\u662f\u4e00\u4e2a": 340, "\u4fee\u9970\u7b26": 340, "\u5b83\u4e0d\u6539\u53d8\u8f93\u5165\u904d\u5386\u5668\u96c6\u5408": 340, "\u4f46\u5bf9\u5176\u4e2d\u6bcf\u4e00\u4e2a\u904d\u5386\u5668\u7684\u5f53\u524d\u4f4d\u7f6e": 340, "\u6253\u4e0a\u4e00\u4e2a\u6709\u540d\u6807\u7b7e": 340, "\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7684": 340, "\u4ece\u800c\u4eca\u540e\u53ef\u4ee5\u5f15\u7528": 340, "\u67e5\u8be2\u6cbf\u7740": 340, "\u7c7b\u578b\u7684\u51fa\u8fb9\u5faa\u73af\u6e38\u8d70": 340, "\u6b21": 340, "\u8f93\u51fahops\u5728": 340, "\u8303\u56f4\u5185\u7684\u90bb\u70b9": 340, "\u4e14\u6bcf\u4e00\u6b21\u90fd\u8fc7\u6ee4\u6216\u8df3\u8fc7\u8def\u5f84\u4e2d\u7684\u91cd\u590d\u70b9": 340, "\u901a\u8fc7\u5728": 340, "\u5185\u914d\u7f6e": 340, "\u9009\u9879\u5b9e\u73b0": 340, "\u64cd\u4f5c\u68c0\u67e5\u6b64\u65f6\u904d\u5386\u8def\u5f84\u7684\u4e0b\u4e00\u8df3\u662f\u5426\u53ef\u4ee5\u56de\u5230\u8d77\u70b9": 340, "\u6307\u4ee3": 340, "\u4ece\u800c\u5f62\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a": 340, "\u7684\u73af": 340, "\u5bf9\u4e8e\u68c0\u6d4b\u5230\u7684\u73af": 340, "\u67e5\u8be2\u8fd8\u901a\u8fc7": 340, "\u64cd\u4f5c\u5c55\u793a\u6bcf\u4e2a\u904d\u5386\u5668\u7684\u5b8c\u6210\u8def\u5f84\u4fe1\u606f": 340, "\u64cd\u4f5c\u7c7b\u4f3csql\u4e2d\u7684top": 340, "\u5b83\u8868\u8fbe\u4e86\u67e5\u8be2\u7ed3\u679c\u4ec5\u9700\u8981\u5305\u542b\u4e00\u4e2a\u8fd9\u6837\u7684\u8def\u5f84": 340, "\u5982\u679c\u6709\u7684\u8bdd": 340, "gie\u652f\u6301apach": 340, "tinkerpop\u5b9a\u4e49\u7684\u5c5e\u6027\u56fe\u6a21\u578b\u548cgremlin\u904d\u5386\u67e5\u8be2": 340, "\u4e14\u5b9e\u73b0\u4e86\u4e00\u4e2a\u4e0etinkerpop": 340, "3\u548c3": 340, "4\u7248\u672c\u517c\u5bb9\u7684": 340, "\u670d\u52a1\u63a5\u53e3": 340, "\u9664\u6b64\u4e4b\u5916": 340, "\u6211\u4eec\u6269\u5c55\u4e86\u4e00\u4e9b\u8bed\u6cd5\u7cd6\u6765\u8fdb\u4e00\u6b65\u5f15\u5165\u4e00\u4e9b\u7b80\u6d01\u660e\u4e86\u7684expression\u8868\u793a": 340, "\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u5f53\u524d\u5b9e\u73b0\u548capach": 340, "tinkerpop\u89c4\u8303\u7684\u4e3b\u8981\u5dee\u4e00\u70b9": 340, "\u5176\u4e2d\u4e00\u4e9b\u5dee\u5f02\u4f1a\u6709\u673a\u4f1a\u6d88\u9664": 340, "\u53e6\u4e00\u4e9b\u662f\u76ee\u524dgraphscope\u5b9a\u4f4d\u7684\u573a\u666f\u5dee\u5f02\u9020\u6210\u7684\u4e0d\u540c\u8bbe\u8ba1\u9009\u62e9": 340, "\u76ee\u524d\u7684": 340, "\u6280\u672f\u9884\u89c8\u7248\u5229\u7528\u4e86": 340, "\u9879\u76ee\u63d0\u4f9b\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u5b58\u50a8\u4f5c\u4e3a\u8f93\u5165\u56fe": 340, "\u5b83\u652f\u6301\u4e00\u6b21\u8f7d\u5165": 340, "\u4e0d\u53ef\u4fee\u6539": 340, "\u7684\u56fe\u6a21\u578b\u6570\u636e": 340, "\u548c\u56fe\u5206\u7247\u5b58\u50a8\u5728\u5206\u5e03\u5f0f\u96c6\u7fa4": 340, "\u5f53\u524d\u8bbe\u8ba1\u6709\u4e0b\u9762\u7684\u4e00\u4e9b\u9650\u5236": 340, "\u7ea6\u675f": 340, "\u6bcf\u4e2a\u56fe\u7684\u6570\u636e\u9700\u8981\u6ee1\u8db3\u4e8b\u5148\u5b9a\u4e49\u7684schema": 340, "\u5305\u62ec\u70b9": 340, "\u8fb9\u7684\u7c7b\u578b\u540d\u79f0": 340, "\u548c\u5c5e\u6027\u540d\u53ca\u503c\u7c7b\u578b": 340, "\u4e3b\u952e\u7ea6\u675f": 340, "\u6bcf\u4e2a\u9876\u70b9\u7c7b\u578b\u9700\u8981\u5305\u542b\u4e00\u4e2a\u7528\u6237\u53ef\u81ea\u5b9a\u4e49\u7684\u4e3b\u952e": 340, "\u540c\u65f6\u7cfb\u7edf\u4f1a\u4e3a\u6bcf\u4e2a\u70b9\u548c\u8fb9\u5bf9\u8c61": 340, "\u81ea\u52a8\u5206\u914d\u4ea7\u751f\u4e00\u4e2a\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u552f\u4e00\u6807\u8bc6": 340, "\u5bf9\u4e8e\u70b9\u6765\u8bf4": 340, "id\u7f16\u7801\u4e86\u7c7b\u578b": 340, "\u548c\u7528\u6237\u81ea\u5b9a\u4e49\u4e3b\u952e\u4fe1\u606f": 340, "\u6bcf\u4e2a\u70b9\u6216\u8fb9\u7684\u5c5e\u6027": 340, "\u53ef\u4ee5\u5305\u542b\u4e0b\u5217\u7c7b\u578b\u7684\u5c5e\u6027\u503c": 340, "\u56e0\u4e3a\u7cfb\u7edf\u7684\u5168\u5206\u5e03\u5f0f\u53ef\u6269\u5c55\u67b6\u6784": 340, "\u5f53\u524d\u5b9a\u4f4d\u7684\u573a\u666f\u548c\u5b9e\u73b0\u4e0d\u652f\u6301\u4e0b\u5217\u529f\u80fd": 340, "\u56fe\u4fee\u6539\u64cd\u4f5c": 340, "lambda\u548cgroovy\u8868\u8fbe\u5f0f\u6216\u81ea\u5b9a\u4e49\u51fd\u6570": 340, "\u7b49\u8868\u8fbe\u5f0f\u6216java\u8c03\u7528\u7b49\u7b49": 340, "\u5b9a\u5236gremlin\u56fe\u904d\u5386\u7b56\u7565": 340, "\u5373\u67e5\u8be2\u4f18\u5316\u7531graphscope\u7cfb\u7edf\u81ea\u52a8\u5b8c\u6210": 340, "\u4e8b\u52a1": 340, "\u4e8c\u7ea7\u7d22\u5f15\u76ee\u524d\u5c1a\u672a\u652f\u6301": 340, "\u7528\u6237\u5b9a\u4e49\u7684\u4e3b\u952e\u4f1a\u88ab\u81ea\u52a8\u7d22\u5f15": 340, "\u5f53\u524dgraphscope\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 340, "\u548c\u793a\u4f8b\u7528\u6cd5": 340, "\u8f93\u5165\u56fe": 340, "labelnam": 340, "labelname1": 340, "labelname2": 340, "\u901a\u8fc7expression\u5b9e\u73b0\u8fc7\u6ee4": 340, "\u8bed\u6cd5\u7cd6": 340, "\u4ee3\u8868head\u8282\u70b9\u7684age\u5c5e\u6027": 340, "\u4ee3\u8868": 340, "\u8282\u70b9\u7684age\u5c5e\u6027": 340, "head\u8282\u70b9\u7684a\u5c5e\u6027\u662f\u6574\u6570\u6570\u7ec4\u7c7b\u578b": 340, "\u901a\u8fc7expression\u5b9e\u73b0\u4f4d\u8fd0\u7b97": 340, "head\u8282\u70b9\u7684number\u5c5e\u6027\u662f\u6574\u578b": 340, "\u901a\u8fc7expression\u5b9e\u73b0\u7b97\u6570\u8fd0\u7b97": 340, "head\u8282\u70b9\u7684number\u548cage\u5c5e\u6027\u90fd\u662f\u6574\u578b": 340, "\u901a\u8fc7expression\u5b9e\u73b0\u6307\u6570\u8fd0\u7b97": 340, "dedup": 340, "substr": 340, "contant": 340, "aaa": 340, "otherv": 340, "flatmap": 340, "\u591a\u91cd\u6620\u5c04": 340, "bothv": 340, "\u627e\u5230\u6240\u6709\u4ece": 340, "\u5f00\u59cb\u901a\u8fc7": 340, "\u8fb9\u7c7b\u578b\u5411\u5916\u6269\u5c55": 340, "\u8df3\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84": 340, "\u70b9\u4e0d\u91cd\u590d": 340, "\u5e76\u4e14\u53ea\u4fdd\u5b58path\u7684\u6700\u672b\u7aef\u70b9": 340, "\u8df3\u7684\u6240\u6709\u4efb\u610f\u8def\u5f84": 340, "\u70b9\u53ef\u91cd\u590d": 340, "\u8f93\u51fa\u6240\u6709\u5c5e\u6027": 340, "\u805a\u5408": 340, "groupbi": 340, "groupby\u591a\u4e2akei": 340, "\u5e76\u4e14\u4e3a\u6bcf\u4e2akey\u8bbe\u7f6e\u522b\u540d": 340, "groupby\u591a\u4e2avalu": 340, "\u5e76\u4e14\u4e3a\u6bcf\u4e2avalue\u8bbe\u7f6e\u522b\u540d": 340, "\u5373\u53d6\u524dk\u4e2a\u7ed3\u679c": 340, "graphscope\u6682\u65f6\u4e0d\u652f\u6301\u4e0b\u5217gremlin\u64cd\u4f5c": 340, "\u4f1a\u9010\u6b65\u652f\u6301": 340, "\u53ef\u4ee5\u901a\u8fc7path": 340, "expansion\u8bed\u6cd5\u7cd6\u5b9e\u73b0": 340, "\u57fa\u4e8e\u96c6\u5408\u7684local\u8ba1\u7b97": 340, "\u67e5\u8be2\u8ba1\u5212\u89e3\u91ca": 340, "\u67e5\u8be2\u6267\u884c\u6027\u80fd\u5206\u6790": 340, "\u81ea\u5b9a\u4e49\u72b6\u6001\u8ba1\u7b97": 340, "\u8ba1\u7b97\u5b50\u56fe": 340, "\u76ee\u524d\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5316\u7248\u672c": 340, "\u652f\u6301\u62bd\u53d6\u5b50\u56fe\u5199\u5165vineyard\u5b58\u50a8": 340, "cap": 340, "\u8bbf\u95ee\u81ea\u5b9a\u4e49\u72b6\u6001": 340, "\u4f8b\u5982pagerank\u548cshortestpath": 340, "\u8fd9\u90e8\u5206\u529f\u80fdgraphscope\u901a\u8fc7\u56fe\u5206\u6790\u5f15\u64ce\u548cnetworkx\u517c\u5bb9\u63a5\u53e3\u63d0\u4f9b": 340, "graphscope\u4e2d\u7684\u56fe\u5b66\u4e60\u5f15\u64ce": 341, "\u662f\u9762\u5411\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u7814\u53d1\u548c\u5e94\u7528\u800c\u8bbe\u8ba1\u7684\u4e00\u6b3e\u5206\u5e03\u5f0f\u6846\u67b6": 341, "\u5b83\u4ece\u5b9e\u9645\u95ee\u9898\u51fa\u53d1": 341, "\u63d0\u70bc\u548c\u62bd\u8c61\u4e86\u4e00\u5957\u9002\u5408\u4e8e\u5f53\u4e0b\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u7f16\u7a0b\u8303\u5f0f": 341, "\u5e76\u5df2\u7ecf\u6210\u529f\u5e94\u7528\u5728\u963f\u91cc\u5df4\u5df4": 341, "\u5185\u90e8\u7684\u8bf8\u5982\u641c\u7d22\u63a8\u8350": 341, "\u77e5\u8bc6\u56fe\u8c31\u7b49\u4f17\u591a\u573a\u666f": 341, "gl\u6ce8\u91cd\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55": 341, "\u5bf9\u4e8e\u5f00\u53d1\u8005\u66f4\u4e3a\u53cb\u597d": 341, "\u4e3a\u4e86\u5e94\u5bf9gnn\u5728\u5de5\u4e1a\u573a\u666f\u4e2d\u7684\u591a\u6837\u6027\u548c\u5feb\u901f\u53d1\u5c55\u7684\u9700\u6c42": 341, "\u57fa\u4e8egl": 341, "\u5f00\u53d1\u8005\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cdgnn\u7b97\u6cd5": 341, "\u6216\u8005\u9762\u5411\u5b9e\u9645\u573a\u666f\u5b9a\u5236\u5316\u4e00\u79cd\u56fe\u7b97\u5b50": 341, "\u4f8b\u5982\u56fe\u91c7\u6837": 341, "\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5165\u95e8\u6559\u7a0b\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528": 341, "\u6765\u6784\u5efa\u7528\u6237\u81ea\u5df1\u7684cnn\u6a21\u578b": 341, "\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5b9e\u73b0\u76ee\u524d\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f": 341, "\u7b2c\u4e00\u79cd\u662f\u76f4\u63a5\u4ee5\u5168\u56fe\u4e3a\u8ba1\u7b97\u5bf9\u8c61": 341, "\u539f\u59cb\u7684gcn": 341, "gat\u7b49\u7b97\u6cd5\u90fd\u662f\u8fd9\u79cd\u5b9e\u73b0\u601d\u8def": 341, "\u4e00\u822c\u4f1a\u76f4\u63a5\u7528\u90bb\u63a5\u77e9\u9635\u8fdb\u884c\u8ba1\u7b97": 341, "\u7136\u800c\u8fd9\u79cd\u65b9\u6cd5\u5728\u5927\u89c4\u6a21\u56fe\u4e0a\u4f1a\u6d88\u8017\u5927\u91cf\u5185\u5b58": 341, "\u5bfc\u81f4\u65e0\u6cd5\u9ad8\u6548\u8bad\u7ec3\u751a\u81f3\u65e0\u6cd5\u8bad\u7ec3": 341, "\u7b2c\u4e8c\u79cd\u601d\u8def\u662f\u5c06\u5168\u56fe\u5206\u6210\u82e5\u5e72\u5b50\u56fe": 341, "\u7528\u6df1\u5ea6\u5b66\u4e60\u91cc\u5e38\u7528\u7684\u6279\u6b21\u8bad\u7ec3\u65b9\u6cd5\u8fdb\u884c\u8bad\u7ec3": 341, "\u6bcf\u6b21\u8bad\u7ec3\u4e00\u4e2a\u5b50\u56fe": 341, "\u4ee3\u8868\u65b9\u6cd5\u662fgraphsag": 341, "graphsaint\u7b49": 341, "\u4e3b\u8981\u9762\u5411\u8d85\u5927\u89c4\u6a21\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u53d1": 341, "\u5b83\u7531\u5e95\u5c42\u7684\u4e00\u4e2a\u56fe\u5f15\u64ce\u548c\u4e0a\u5c42\u7684": 341, "\u7b97\u6cd5\u6a21\u578b\u6784\u6210": 341, "\u56fe\u5f15\u64ce\u5206\u5e03\u5f0f\u5b58\u50a8\u56fe\u7684\u62d3\u6251\u548c\u5c5e\u6027\u4fe1\u606f\u5e76\u63d0\u4f9b\u9ad8\u6548\u7684\u56fe\u91c7\u6837\u67e5\u8be2": 341, "\u7b97\u6cd5\u6a21\u578b\u901a\u8fc7\u8c03\u7528\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u63a5\u53e3\u83b7\u53d6\u5b50\u56fe\u5e76\u8fdb\u884c\u8ba1\u7b97": 341, "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u7edf\u4e00\u7f16\u7a0b\u6846\u67b6": 341, "\u652f\u6301\u5e38\u89c1\u56fe\u5b66\u4e60\u7b97\u6cd5\u7684\u5f00\u53d1": 341, "\u77e5\u8bc6\u56fe\u8c31\u6a21\u578b": 341, "\u56fe\u5d4c\u5165\u7b97\u6cd5\u7b49": 341, "\u5e76\u4e14\u548c\u4e3b\u6d41\u7684\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\u517c\u5bb9": 341, "\u5305\u62ectensorflow": 341, "\u548cpytorch": 341, "\u76ee\u524d\u6211\u4eec\u5b9e\u73b0\u4e86\u57fa\u4e8etensorflow\u7684\u6a21\u578b": 341, "\u57fa\u4e8epytorch\u7684\u6a21\u578b\u6b63\u5728\u5f00\u53d1\u4e2d": 341, "\u91c7\u7528\u91c7\u6837\u5b50\u56fe\u518d\u8ba1\u7b97\u7684\u65b9\u5f0f\u6784\u5efa\u548c\u8bad\u7ec3\u6a21\u578b": 341, "\u6211\u4eec\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u57fa\u672c\u7684\u6570\u636e\u6a21\u578b": 341, "\u662f\u56fe\u5b66\u4e60\u7b97\u6cd5\u7f16\u7a0b\u7684\u57fa\u672c\u6570\u636e\u5bf9\u8c61": 341, "\u5b83\u7531\u4e00\u4e2abatch\u7684\u79cd\u5b50\u70b9\u6216\u8005\u8fb9": 341, "\u79f0\u4e3a": 341, "\u4ee5\u53ca\u4ed6\u4eec\u7684": 341, "\u611f\u53d7\u91ce": 341, "\u591a\u8df3\u90bb\u5c45": 341, "\u7ec4\u6210": 341, "\u7531\u56fe\u91c7\u6837\u548c\u67e5\u8be2\u5230\u7684\u6570\u636e\u7ec4\u6210": 341, "\u6211\u4eec\u5b9e\u73b0": 341, "\u4e86\u5e38\u89c1\u7684\u90bb\u5c45\u91c7\u6837": 341, "\u56fe\u904d\u5386\u548c\u8d1f\u91c7\u6837\u65b9\u6cd5": 341, "\u91c7\u6837\u7684\u6570\u636e\u7ec4\u7ec7\u6210numpy\u683c\u5f0f\u7684": 341, "\u540e\u6839\u636e\u4e0d\u540c\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u8f6c\u6362\u6210\u5bf9\u5e94\u7684tensor\u683c\u5f0f": 341, "\u7136\u540e\u7528": 341, "\u7ba1\u7406": 341, "\u5230": 341, "\u7684\u8f6c\u6362": 341, "\u63d0\u4f9b\u8bad\u7ec3\u6240\u9700\u8981\u7684\u6570\u636e": 341, "\u6240\u6709\u7684\u56fe\u5b66\u4e60\u6a21\u578b\u53ef\u4ee5\u62bd\u8c61\u4e3a\u4f7f\u7528\u7f16\u7801\u5668\u5c06": 341, "\u7f16\u7801\u6210\u6700\u7ec8\u7684\u70b9": 341, "\u8fb9\u6216\u8005\u5b50\u56fe\u7684": 341, "\u5411\u91cf": 341, "\u9996\u5148\u5229\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7684\u70b9\u548c\u8fb9\u4e0a\u7684\u7279\u5f81": 341, "\u7136\u540e\u5c06\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u540e\u7684": 341, "\u539f\u59cb\u5411\u91cf\u7528\u4e0d\u540c\u7684\u56fe\u7f16\u7801\u5668\u8fdb\u884c\u7f16\u7801": 341, "\u5f97\u5230\u6700\u7ec8\u7684\u8f93\u51fa": 341, "\u5bf9\u4e8e\u5927\u591a\u6570gnn\u6a21\u578b": 341, "\u56fe\u7f16\u7801\u5668": 341, "\u63d0\u4f9b\u4e86\u5982\u4f55\u805a\u5408\u90bb\u5c45\u4fe1\u606f\u5230\u81ea\u8eab\u8282\u70b9\u6216\u8005\u8fb9\u7684\u62bd\u8c61": 341, "\u7528\u4e0d\u540c\u7684\u56fe\u5377\u79ef\u5c42\u5b9e\u73b0": 341, "\u57fa\u4e8e\u4e0a\u9762\u4ecb\u7ecd\u7684\u6570\u636e\u6a21\u578b\u548c\u7f16\u7801\u5668": 341, "\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5feb\u901f\u5730\u5b9e\u73b0\u4e0d\u540c\u7684\u56fe\u5b66\u4e60\u7b97\u6cd5": 341, "\u5728\u63a5\u4e0b\u6765\u4e00\u7ae0\u91cc": 341, "\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u5f00\u53d1\u4e00\u4e2agnn\u6a21\u578b": 341, "\u8fd9\u7bc7\u6587\u6863\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u7528": 341, "\u63d0\u4f9b\u7684\u57fa\u672capi\u914d\u5408\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce": 341, "\u5982tensorflow": 341, "\u6765\u6784\u5efa\u56fe\u5b66\u4e60\u7b97\u6cd5": 341, "\u6211\u4eec\u4ee5\u56fe\u795e\u7ecf\u7f51\u7edc\u91cc\u6700\u6d41\u884c\u7684gcn\u6a21\u578b\u505a\u4e3a\u793a\u4f8b\u6765\u8bf4\u660e": 341, "\u901a\u5e38\u6765\u8bf4": 341, "\u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u9700\u8981\u4e0b\u9762\u56db\u4e2a\u6b65\u9aa4": 341, "\u6307\u5b9a\u91c7\u6837\u6a21\u5f0f": 341, "\u7528\u56fe\u91c7\u6837": 341, "\u67e5\u8be2\u65b9\u6cd5\u91c7\u6837\u5b50\u56fe\u5e76\u7ec4\u7ec7\u6210": 341, "\u6211\u4eec\u62bd\u8c61\u4e864\u4e2a\u57fa\u672c\u7684\u51fd\u6570": 341, "\u7528\u6765\u904d\u5386\u56fe\u6570\u636e\u4ea7\u751f": 341, "positve_sampl": 341, "\u4ee5\u8fd9\u4e9b": 341, "\u4e3a\u8f93\u5165\u4ea7\u751f": 341, "\u8bad\u7ec3\u7684\u6b63\u6837\u672c": 341, "\u5bf9\u4e8e\u65e0\u76d1\u7763\u5b66\u4e60": 341, "\u4ea7\u751f\u8d1f\u6837\u672c": 341, "gnns\u9700\u8981\u805a\u5408\u90bb\u5c45\u4fe1\u606f": 341, "\u6211\u4eec\u62bd\u8c61\u4e86": 341, "\u6765\u91c7\u6837\u90bb\u5c45": 341, "\u6700\u540e\u5c06": 341, "\u4ea7\u751f\u7684": 341, "\u4ee5\u53ca\u91c7\u6837\u51fa\u7684\u90bb\u5c45\u7ec4\u6210": 341, "\u6784\u5efa\u56fe\u6570\u636e\u6d41": 341, "\u7b97\u6cd5\u6a21\u578b\u57fa\u4e8e\u7c7b\u4f3ctensorflow\u7684\u6df1\u5ea6\u5b66\u4e60\u5f15\u64ce\u6784\u5efa": 341, "\u6240\u4ee5\u91c7\u6837\u51fa\u7684": 341, "\u9700\u8981\u5148\u8f6c\u6362\u6210tensor\u683c\u5f0f": 341, "\u624d\u80fd\u4f7f\u7528": 341, "\u6765\u5c01\u88c5\u8fd9\u4e00\u8f6c\u6362\u8fc7\u7a0b": 341, "\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8fed\u4ee3\u5668\u6765\u8fdb\u884c\u6279\u6b21\u8bad\u7ec3": 341, "\u5b9a\u4e49\u7f16\u7801\u5668": 341, "\u7f16\u7801\u5668\u548c\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801": 341, "\u5f97\u5230": 341, "\u540e": 341, "\u6211\u4eec\u9996\u5148\u5c06\u539f\u59cb\u7684\u70b9": 341, "\u8fb9\u7279\u5f81\u7528\u4e00\u4e9b\u5e38\u89c1\u7279\u5f81\u7f16\u7801\u5668\u7f16\u7801\u6210\u539f\u59cb\u5411\u91cf": 341, "\u505a\u4e3agnns\u6a21\u578b\u7684\u7279\u5f81\u8f93\u5165": 341, "\u7136\u540e\u7528\u56fe\u7f16\u7801\u5668\u5904\u7406": 341, "\u5c06\u90bb\u5c45\u8282\u70b9\u7279\u5f81\u8fdb\u884c\u6c47\u805a\u5e76": 341, "\u548c\u81ea\u8eab\u7279\u5f81\u8fdb\u884c\u7ec4\u5408": 341, "\u5f97\u5230\u6700\u540e\u7684\u70b9\u6216\u8005\u8fb9\u7684\u5411\u91cf": 341, "\u7f16\u5199\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 341, "\u9009\u62e9\u9002\u5f53\u7684\u635f\u5931\u51fd\u6570": 341, "\u5e76\u7f16\u5199\u8bad\u7ec3\u8fc7\u7a0b": 341, "\u5185\u7f6e\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u635f\u5931\u51fd\u6570\u548c\u4f18\u5316\u5668": 341, "\u5e76\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u8fdb\u884c\u4e86\u5c01\u88c5": 341, "\u540c\u65f6\u652f\u6301\u5355\u673a\u548c\u5206\u5e03\u5f0f\u8bad\u7ec3": 341, "\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570": 341, "\u4f18\u5316\u5668\u548c\u8bad\u7ec3\u8fc7\u7a0b": 341, "\u4e0b\u9762\u6211\u4eec\u6309\u7167\u4e0a\u9762\u4ecb\u7ecd\u76844\u4e2a\u6b65\u9aa4\u6765\u4ecb\u7ecd\u5982\u4f55\u5b9e\u73b0\u4e00\u4e2agcn\u6a21\u578b": 341, "\u6211\u4eec\u4f7f\u7528cora\u6570\u636e\u96c6\u4ee5\u70b9\u5206\u7c7b\u4efb\u52a1\u505a\u4e3a\u793a\u4f8b": 341, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6570\u636e\u8f6c\u6362\u811a\u672c": 341, "\u6765": 341, "\u5c06\u539f\u59cbcora\u8f6c\u6362\u6210": 341, "\u9700\u8981\u7684\u683c\u5f0f": 341, "\u8fd0\u884c\u5b8c\u8fd9\u4e2a\u811a\u672c\u540e\u4f60\u53ef\u4ee5\u5f97\u5230\u4e0b\u97625\u4e2a\u6587\u4ef6": 341, "\u5206\u522b\u662f\u70b9\u8868": 341, "\u8fb9\u8868\u4ee5\u53ca\u7528\u6765\u533a\u5206\u8bad\u7ec3": 341, "\u9a8c\u8bc1\u548c\u6d4b\u8bd5\u96c6\u7684\u70b9\u8868": 341, "\u7136\u540e\u53ef\u4ee5\u7528\u4e0b\u9762\u4ee3\u7801\u6765\u6784\u5efa\u56fe": 341, "\u540e\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u5c06\u56fe\u52a0\u8f7d\u8fdb\u5185\u5b58": 341, "gcn\u6a21\u578b\u7ee7\u627f\u81ea\u57fa\u672c\u7684\u5b66\u4e60\u6a21\u578b\u7c7b": 341, "\u53ea\u9700\u8981\u91cd\u5199\u57fa\u7c7b\u7684\u91c7\u6837": 341, "\u6a21\u578b\u6784\u5efa\u7b49\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b8c\u6210gcn\u7684\u6784\u5efa": 341, "\u524d\u4e24\u4e2a\u51fd\u6570\u7528\u6765\u91c7\u6837\u79cd\u5b50\u8282\u70b9\u548c\u6b63\u6837\u672c": 341, "\u91c7\u6837\u90bb\u5c45\u5e76\u7ec4\u7ec7": 341, "\u56de\u4e00\u8df3\u90bb\u5c45": 341, "\u56e0\u6b64\u4e0a\u9762\u4ee3\u7801\u662f\u91c7\u6837\u4e8c\u8df3\u90bb\u5c45": 341, "\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u4e0d\u540c\u7684\u90bb\u5c45\u91c7\u6837\u65b9\u6cd5": 341, "\u5bf9\u4e8e\u539f\u59cbgcn\u6765\u8bf4\u56e0\u4e3a\u8981\u83b7\u5f97\u6bcf\u4e2a\u70b9\u7684\u6240\u6709\u90bb\u5c45": 341, "\u56e0\u6b64\u9009\u62e9": 341, "\u91c7\u6837\u5b8c\u540e\u5c06\u7ed3\u679c\u7ec4\u7ec7": 341, "\u6210": 341, "\u8fd4\u56de": 341, "\u51fd\u6570\u91cc\u6211\u4eec\u4f7f\u7528\u5c01\u88c5\u7684": 341, "\u6765\u628a": 341, "\u8f6c\u6362\u6210\u5bf9\u5e94\u7684": 341, "\u5305\u542b\u4e00\u4e2a\u6570\u636e\u6d41\u8fed\u4ee3\u5668\u548c\u82e5\u5e72": 341, "\u4f60\u53ef\u4ee5\u4ece": 341, "\u83b7\u53d6\u548c\u524d\u9762": 341, "\u5bf9\u5e94\u7684": 341, "\u9996\u5148\u4f7f\u7528\u7279\u5f81\u7f16\u7801\u5668\u6765\u7f16\u7801\u539f\u59cb\u7279\u5f81": 341, "\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528": 341, "\u5373\u8fd4\u56de\u81ea\u8eab\u5373\u53ef": 341, "\u56e0\u4e3a": 341, "cora\u7684\u7279\u5f81\u5df2\u7ecf\u662f\u5904\u7406\u8fc7\u7684\u5411\u91cf\u683c\u5f0f\u4e86": 341, "\u5bf9\u4e8e\u65e2\u6709\u79bb\u6563\u7279\u5f81\u7531\u4e8e\u8fde\u7eed\u7279\u5f81\u7684\u60c5\u51b5": 341, "\u66f4\u591aencoder\u8bf7\u53c2\u8003": 341, "\u5c42\u6784\u5efa\u56fe\u7f16\u7801\u5668": 341, "gcn\u6bcf\u4e2a\u8282\u70b9\u91c7\u6837\u5168\u90e8\u90bb\u5c45": 341, "\u90bb\u5c45\u4ee5\u7a00\u758f\u683c\u5f0f\u7ec4\u7ec7": 341, "\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528": 341, "\u90bb\u5c45\u5bf9\u9f50\u7684\u6a21\u578b\u53ef\u4ee5\u53c2\u8003graphsage\u7684\u5b9e\u73b0": 341, "\u5bf9\u4e8ecora\u70b9\u5206\u7c7b\u6a21\u578b": 341, "\u6211\u4eec\u9009\u62e9\u5bf9\u5e94\u7684tensorflow\u91cc\u7684\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5373\u53ef": 341, "\u7136\u540e\u5728": 341, "\u51fd\u6570\u91cc\u5c06\u7f16\u7801\u5668\u548c\u635f\u5931\u51fd\u6570\u7ec4\u7ec7\u8d77\u6765": 341, "\u6700\u7ec8\u8fd4\u56de\u4e00\u4e2a\u6570\u636e\u8fed\u4ee3\u5668\u548c\u635f\u5931\u51fd\u6570": 341, "\u63a5\u7740\u4f7f\u7528\u5c01\u88c5\u7684\u5355\u673a\u8bad\u7ec3\u8fc7\u7a0b": 341, "\u6765\u8fdb\u884c\u8bad\u7ec3": 341, "\u8fd9\u6837\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2agcn\u6a21\u578b\u7684\u7f16\u5199": 341, "\u5b8c\u6574\u4ee3\u7801\u8bf7\u53c2\u8003": 341, "\u76ee\u5f55": 341, "\u6211\u4eec\u5b9e\u73b0\u4e86gcn": 341, "gat\u7b49\u6a21\u578b": 341, "\u4f60\u53ef\u4ee5\u53c2\u8003\u76f8\u4f3c\u7684\u6a21\u578b\u4ee3\u7801\u505a\u4e3a\u5f00\u59cb": 341, "\u5c5e\u6027\u56fe": 342, "\u56fe\u4e0a\u7684\u70b9": 342, "\u8fb9\u90fd\u5e26\u6709\u6807\u7b7e": 342, "\u6bcf\u4e2a\u6807\u7b7e\u90fd\u53ef\u80fd\u5e26\u6709\u8bb8\u591a\u5c5e\u6027": 342, "\u5185\u7f6e\u4e86\u4e00\u7ec4\u6d41\u884c\u7684\u6570\u636e\u96c6": 342, "\u4ee5\u53ca\u8f7d\u5165\u4ed6\u4eec\u7684\u5de5\u5177\u51fd\u6570": 342, "\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u7684\u4e0a\u624b": 342, "\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 342, "\u5728\u5355\u673a\u6a21\u5f0f\u4e0b": 342, "\u4f1a\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 342, "\u5e76\u4e14\u4f1a\u4fdd\u7559\u4ee5\u4f9b\u5c06\u6765\u4f7f\u7528": 342, "\u96c6\u7fa4\u6a21\u5f0f\u4e0b": 342, "\u5c06\u6570\u636e\u6587\u4ef6\u4e0b\u8f7d\u5230": 342, "\u7684\u672c\u5730\u5b58\u50a8\u6bd4\u8f83\u590d\u6742": 342, "\u6240\u4ee5\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6302\u8f7d\u4e86": 342, "\u7684\u6570\u636e\u96c6\u6876\u7684\u4e00\u4e2a\u5bb9\u5668": 342, "\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u91cc": 342, "\u6211\u4eec\u5c06\u8f7d\u5165\u548c\u4e0a\u9762\u540c\u6837\u7684\u4e00\u5f20\u56fe": 342, "\u53ea\u4e0d\u8fc7\u8fd9\u6b21": 342, "\u90e8\u7f72\u5728\u96c6\u7fa4\u4e2d": 342, "\u6211\u4eec\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 342, "\u7136\u540e\u5c06\u6570\u636e\u96c6\u6876\u6302\u8f7d\u5230": 342, "\u6b64\u8def\u5f84\u76f8\u5bf9\u4e8e": 342, "\u7684\u672c\u5730\u8def\u5f84": 342, "\u7136\u540e\u6211\u4eec\u5c06\u4f1a\u8bdd\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165": 342, "\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570": 342, "\u662f\u6211\u4eec\u901a\u8fc7": 342, "\u7684\u53c2\u6570\u6307\u5b9a\u7684\u6302\u8f7d\u8def\u5f84": 342, "\u662f\u8fd9\u4e2a\u6570\u636e\u96c6\u6240\u5728\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57": 342, "\u4f60\u53ef\u4ee5\u5728": 342, "\u627e\u5230\u6240\u6709\u76ee\u524d\u652f\u6301\u7684\u6570\u636e\u96c6": 342, "\u6587\u4ef6\u4e2d\u5305\u62ec\u8be6\u7ec6\u7684\u4ecb\u7ecd\u548c\u7528\u6cd5": 342, "\u7136\u800c": 342, "\u66f4\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u7528\u6237\u9700\u8981\u4f7f\u7528\u81ea\u5df1\u7684\u6570\u636e\u96c6": 342, "\u5e76\u505a\u4e00\u4e9b\u6570\u636e\u5206\u6790\u7684\u5de5\u4f5c": 342, "\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u5c5e\u6027\u56fe\u7684\u6a21\u578b": 342, "\u5e76\u4ee5\u5c06\u5c5e\u6027\u56fe\u8f7d\u5165": 342, "\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u4f1a\u8bdd": 342, "\u7136\u540e\u5728\u6b64\u4f1a\u8bdd\u5185\u521b\u5efa\u56fe": 342, "\u6709\u51e0\u4e2a\u65b9\u6cd5\u6765\u914d\u7f6e": 342, "\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u589e\u91cf\u7684\u6784\u5efa\u4e00\u4e2a\u5c5e\u6027\u56fe": 342, "\u6211\u4eec\u5c06\u4f7f\u7528": 342, "\u91cc\u7684\u6587\u4ef6\u505a\u5b8c\u6b64\u7bc7\u6559\u7a0b\u7684\u793a\u4f8b": 342, "\u627e\u5230\u6e90\u6570\u636e": 342, "\u4f60\u53ef\u4ee5\u968f\u65f6\u4f7f\u7528": 342, "\u6765\u67e5\u770b\u56fe\u7684\u6a21\u578b": 342, "\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u5185\u6dfb\u52a0\u4e00\u4e2a\u70b9\u6807\u7b7e": 342, "\u76f8\u5173\u7684\u53c2\u6570\u542b\u4e49\u5982\u4e0b": 342, "\u4ee3\u8868\u6570\u636e\u6e90": 342, "\u6307\u793a": 342, "\u53ef\u4ee5\u5728\u54ea\u91cc\u627e\u5230\u6e90\u6570\u636e": 342, "\u53ef\u4ee5\u4e3a\u6587\u4ef6\u8def\u5f84": 342, "\u6570\u7ec4\u7b49": 342, "\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50": 342, "\u8fd9\u5c06\u4f1a\u4ece\u6587\u4ef6": 342, "\u8f7d\u5165\u6570\u636e": 342, "\u5e76\u4e14\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a": 342, "\u4f46\u662f\u6709\u4e0d\u540c\u7684\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e": 342, "\u70b9\u6807\u7b7e\u7684\u540d\u5b57": 342, "\u9ed8\u8ba4\u4e3a": 342, "\u4e00\u5f20\u56fe\u4e2d\u4e0d\u80fd\u542b\u6709\u540c\u540d\u7684\u6807\u7b7e": 342, "\u6240\u4ee5\u82e5\u6709\u4e24\u4e2a\u6216\u4ee5\u4e0a\u7684\u6807\u7b7e": 342, "\u7528\u6237\u5fc5\u987b\u6307\u5b9a\u6807\u7b7e\u540d\u5b57": 342, "\u603b\u662f\u7ed9\u6807\u7b7e\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u540d\u5b57\u4e5f\u6709\u597d\u5904": 342, "\u53ef\u4ee5\u4e3a\u4efb\u4f55\u6807\u8bc6\u7b26": 342, "\u4e3e\u4e2a\u4f8b\u5b50": 342, "\u7ed3\u679c\u4e0e\u4e0a\u4e00\u6b65\u7ed3\u679c\u9664\u4e86\u6807\u7b7e\u540d\u5b8c\u5168\u4e00\u81f4": 342, "\u4e00\u7ec4\u5c5e\u6027\u540d\u5b57": 342, "\u53ef\u9009\u9879": 342, "\u5c5e\u6027\u540d\u5e94\u5f53\u4e0e\u6570\u636e\u4e2d\u7684\u9996\u884c\u8868\u5934\u4e2d\u7684\u540d\u5b57\u76f8\u4e00\u81f4": 342, "\u5982\u679c\u7701\u7565\u6216\u4e3a": 342, "\u9664id\u5217\u4e4b\u5916\u7684\u6240\u6709\u5217\u90fd\u5c06\u4f1a\u4f5c\u4e3a\u5c5e\u6027\u8f7d\u5165": 342, "\u5982\u679c\u4e3a\u7a7a\u5217\u8868": 342, "\u90a3\u4e48\u5c06\u4e0d\u4f1a\u8f7d\u5165\u4efb\u4f55\u5c5e\u6027": 342, "\u5176\u4ed6\u60c5\u51b5\u4e0b": 342, "\u53ea\u4f1a\u8f7d\u5165\u6307\u5b9a\u4e86\u7684\u5217\u4f5c\u4e3a\u5c5e\u6027": 342, "\u6bd4\u5982\u8bf4": 342, "\u5217\u7684\u5217\u540d": 342, "\u6b64\u5217\u5c06\u5728\u8f7d\u5165\u8fb9\u65f6\u88ab\u7528\u505a\u8d77\u59cb\u70b9": 342, "\u6216\u76ee\u6807\u70b9": 342, "\u5176\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32": 342, "\u6b64\u65f6\u6307\u4ee3\u5217\u540d": 342, "\u6216\u8005\u53ef\u4ee5\u662f\u4e00\u4e2a\u6b63\u6574\u6570": 342, "\u4ee3\u8868\u7b2c\u51e0\u5217": 342, "\u4ece0\u5f00\u59cb": 342, "\u9ed8\u8ba4\u4e3a\u7b2c0\u5217": 342, "\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5411\u56fe\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8fb9\u6807\u7b7e": 342, "\u4e0e\u6784\u5efa\u70b9\u6807\u7b7e\u4e00\u8282\u4e2d\u7684": 342, "\u7c7b\u4f3c": 342, "\u4e3a\u6307\u793a\u53bb\u54ea\u91cc\u8bfb\u6570\u636e\u7684\u8def\u5f84": 342, "\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u4f8b\u5b50": 342, "\u8fd9\u5c06\u4f1a\u8f7d\u5165\u4e00\u4e2a\u6807\u7b7e\u540d\u4e3a": 342, "\u6e90\u8282\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u8282\u70b9\u6807\u7b7e\u90fd\u4e3a": 342, "\u7b2c\u4e00\u5217\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9id": 342, "\u7b2c\u4e8c\u5217\u4f5c\u4e3a\u7ec8\u70b9\u7684\u70b9id": 342, "\u5176\u4ed6\u5217\u90fd\u4f5c\u4e3a\u5c5e\u6027": 342, "\u8fb9\u7684\u6807\u7b7e\u540d": 342, "\u63a8\u8350\u603b\u662f\u4f7f\u7528\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u6807\u7b7e\u540d": 342, "\u4e00\u5217\u5c5e\u6027": 342, "\u610f\u4e49\u4e0e\u884c\u4e3a\u90fd\u548c\u70b9\u4e2d\u7684\u4e00\u81f4": 342, "\u8d77\u70b9\u7684\u6807\u7b7e\u540d\u4e0e\u7ec8\u70b9\u7684\u6807\u7b7e\u540d": 342, "\u6211\u4eec\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u5df2\u7ecf\u770b\u5230\u8fc7\u4e86": 342, "\u5728\u90a3\u91cc\u5c06\u5176\u8d4b\u503c\u4e3a": 342, "\u8fd9\u4e24\u8005\u53ef\u4ee5\u53d6\u4e0d\u540c\u7684\u503c": 342, "\u4e3e\u4f8b\u6765\u8bf4": 342, "\u8d77\u70b9\u7684": 342, "\u5217\u540d\u4e0e\u7ec8\u70b9\u7684": 342, "\u5217\u540d": 342, "\u9ed8\u8ba4\u5206\u522b\u4e3a": 342, "\u610f\u4e49\u548c\u8868\u73b0\u4e0e\u70b9\u4e2d\u7684": 342, "\u4e0d\u540c\u7684\u662f\u9700\u8981\u4e24\u5217": 342, "\u4e00\u5217\u4e3a\u8d77\u70b9": 342, "\u4e00\u5217\u4e3a\u7ec8\u70b9": 342, "\u4ee5\u4e0b\u662f\u4e2a\u4f8b\u5b50": 342, "\u8fd9\u662f\u4e00\u4e9b\u7528\u6765\u5904\u7406\u7279\u522b\u7b80\u5355\u6216\u7279\u522b\u590d\u6742\u7684\u9ad8\u7ea7\u4e00\u4e9b\u7684\u7528\u6cd5": 342, "\u5982\u679c\u56fe\u4e2d\u53ea\u5b58\u5728\u4e00\u4e2a\u70b9\u6807\u7b7e": 342, "\u90a3\u4e48\u53ef\u4ee5\u7701\u7565\u6307\u5b9a\u70b9\u6807\u7b7e": 342, "\u5c06\u4f1a\u63a8\u65ad\u8d77\u59cb\u70b9\u6807\u7b7e\u548c\u7ec8\u70b9\u6807\u7b7e\u4e3a\u8fd9\u4e00\u4e2a\u70b9\u6807\u7b7e": 342, "\u5982\u679c\u7528\u6237\u7684": 342, "\u53d6\u503c\u4e3a\u56fe\u4e2d\u4e0d\u5b58\u5728\u7684\u70b9\u6807\u7b7e": 342, "\u4f1a\u4ece\u8fb9\u7684\u7aef\u70b9\u4e2d\u805a\u5408\u51fa\u70b9\u8868": 342, "\u5728\u4e00\u4e9b\u60c5\u51b5\u4e0b": 342, "\u4e00\u79cd\u8fb9\u7684\u6807\u7b7e\u53ef\u80fd\u8fde\u63a5\u4e86\u4e24\u79cd\u53ca\u4ee5\u4e0a\u7684\u70b9": 342, "\u5728\u4e0b\u9762\u7684\u5c5e\u6027\u56fe\u4e2d": 342, "\u6709\u4e00\u4e2a\u540d\u4e3a": 342, "\u7684\u8fb9\u6807\u7b7e": 342, "\u8fde\u63a5\u4e86\u4e24\u79cd\u70b9\u6807\u7b7e": 342, "\u53ef\u4ee5\u6dfb\u52a0\u4e24\u6b21\u540d\u4e3a": 342, "\u53ef\u4ee5\u4ece\u8f93\u5165\u6587\u4ef6\u4e2d\u63a8\u65ad\u70b9\u7684\u7c7b\u578b": 342, "\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5de5\u4f5c\u7684\u5f88\u597d": 342, "\u7528\u6237\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u81ea\u5b9a\u4e49\u80fd\u529b": 342, "\u4e3a\u4e86\u6ee1\u8db3\u6b64\u79cd\u9700\u6c42": 342, "\u53ef\u4ee5\u5728\u5c5e\u6027\u540d\u4e4b\u540e\u52a0\u5165\u4e00\u4e2a\u989d\u5916\u7c7b\u578b\u7684\u53c2\u6570": 342, "\u50cf\u8fd9\u6837": 342, "\u8fd9\u5c06\u4f1a\u5c06\u5c5e\u6027\u7684\u7c7b\u578b\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u7c7b\u578b": 342, "\u6ce8\u610f\u5c5e\u6027\u540d\u5b57\u548c\u7c7b\u578b\u9700\u8981\u5728\u540c\u4e00\u4e2a\u5143\u7ec4\u4e2d": 342, "\u5728\u8fd9\u91cc": 342, "\u7684\u7c7b\u578b\u5c06\u4f1a\u662f": 342, "\u800c\u9ed8\u8ba4\u4e0d\u6307\u5b9a\u7684\u8bdd\u4e3a": 342, "\u5e38\u89c1\u7684\u4f7f\u7528\u573a\u666f\u662f\u6307\u5b9a": 342, "\u7b49\u7c7b\u578b": 342, "\u6709\u4e09\u4e2a\u914d\u7f6e\u5143\u4fe1\u606f\u7684\u53c2\u6570": 342, "\u5206\u522b\u4e3a": 342, "\u53ef\u4ee5\u4e3a": 342, "\u4f1a\u6709\u66f4\u5feb\u7684\u901f\u5ea6": 342, "\u548c\u4f7f\u7528\u66f4\u5c11\u7684\u5185\u5b58": 342, "\u5f53id\u4e0d\u80fd\u7528": 342, "\u8868\u793a\u65f6": 342, "\u624d\u5e94\u8be5\u4f7f\u7528": 342, "\u5982\u679c\u786e\u5b9a\u56fe\u70b9id\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7": 342, "\u5efa\u8bae\u4f7f\u7528": 342, "\u6765\u964d\u4f4e\u5185\u5b58\u5f00\u9500": 342, "\u6307\u793a\u8f7d\u5165\u65e0\u5411\u56fe\u8fd8\u662f\u6709\u5411\u56fe": 342, "\u6307\u793a\u662f\u5426\u4e3a\u6bcf\u6761\u8fb9\u5206\u914d\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684id": 342, "\u6307\u793a\u662f\u5426\u662f\u5426\u5c06\u70b9\u539f\u59cbid\u4fdd\u7559\u4e3a\u5c5e\u6027": 342, "\u8ba9\u6211\u4eec\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u56fe\u7684\u5b9a\u4e49": 342, "\u8fd9\u91cc\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8f7d\u5165": 342, "\u5c5e\u6027\u56fe\u7684": 342, "\u4f8b\u5b50": 342, "\u4e0a\u6587\u63d0\u5230\u7684\u6570\u636e\u6e90\u662f\u4e00\u4e2a": 342, "\u7684\u7c7b": 342, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u6216\u8005\u6570\u636e\u672c\u8eab": 342, "\u652f\u6301\u4ece": 342, "\u8fd9\u53ef\u4ee5\u4f7f\u7528\u6237\u4ec5\u901a\u8fc7": 342, "\u63a7\u5236\u53f0\u4fbf\u53ef\u4ee5\u521b\u5efa\u56fe": 342, "\u9664\u4e86": 342, "\u5916": 342, "\u5176\u4ed6\u5c5e\u6027": 342, "id\u5217": 342, "\u6807\u7b7e\u8bbe\u7f6e\u7b49\u90fd\u548c\u4e4b\u524d\u63d0\u5230\u7684\u4fdd\u6301\u4e00\u81f4": 342, "\u6ce8\u610f\u6bcf\u4e2a\u6570\u7ec4\u90fd\u4ee3\u8868\u4e00\u5217": 342, "\u6211\u4eec\u5c06\u5176\u4ee5": 342, "\u77e9\u9635\u7684\u65b9\u5f0f\u4f20\u5165": 342, "\u5f53": 342, "\u5305\u542b\u6587\u4ef6\u8def\u5f84\u65f6": 342, "\u5b83\u53ef\u80fd\u4ec5\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32": 342, "\u6587\u4ef6\u8def\u5f84\u5e94\u9075\u5faa": 342, "\u6807\u51c6": 342, "\u5f53\u6536\u5230\u5305\u542b\u6587\u4ef6\u8def\u5f84\u7684\u8f7d\u56fe\u8bf7\u6c42\u65f6": 342, "\u5c06\u4f1a\u89e3\u6790": 342, "\u8c03\u7528\u76f8\u5e94\u7684\u8f7d\u56fe\u6a21\u5757": 342, "\u652f\u6301\u591a\u79cd\u6570\u636e\u6e90": 342, "\u672c\u5730": 342, "\u6570\u636e\u7531": 342, "\u8d1f\u8d23\u8f7d\u5165": 342, "\u89e3\u6790\u4e0d\u540c\u7684\u6570\u636e\u683c\u5f0f\u4ee5\u53ca\u53c2\u6570": 342, "\u4efb\u4f55\u989d\u5916\u7684\u5177\u4f53\u7684\u914d\u7f6e\u90fd\u53ef\u4ee5\u5728loader\u7684\u53ef\u53d8\u53c2\u6570\u5217\u8868\u4e2d\u4f20\u5165": 342, "\u8fd9\u4e9b\u53c2\u6570\u4f1a\u76f4\u63a5\u88ab\u4f20\u9012\u5230\u5bf9\u5e94\u7684\u5b58\u50a8\u7c7b\u4e2d": 342, "\u4e4b\u4e8e": 342, "\u6216\u8005\u662f": 342, "\u7528\u6237\u53ef\u4ee5\u65b9\u4fbf\u7684\u5b9e\u73b0\u81ea\u5df1\u7684driver\u6765\u652f\u6301\u66f4\u591a\u7684\u6570\u636e\u6e90": 342, "\u6bd4\u5982\u53c2\u7167": 342, "driver\u7684\u5b9e\u73b0\u65b9\u5f0f": 342, "\u7528\u6237\u9700\u8981\u7ee7\u627f": 342, "\u7c7b\u7528\u6765\u505ascheme\u5bf9\u5e94\u7684resolv": 342, "abstractbufferedfil": 342, "\u7528\u6237\u4ec5\u9700\u8981\u5b9e\u73b0": 342, "\u8fd9\u51e0\u4e2a\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u57fa\u672c\u7684read": 342, "write\u529f\u80fd": 342, "\u6700\u540e\u901a\u8fc7": 342, "\u6ce8\u518c\u81ea\u5b9a\u4e49\u7684resolv": 342, "\u6211\u4eec\u4e3agraphscope\u7684\u7528\u6237\u51c6\u5907\u4e86\u4e00\u7cfb\u5217\u8be6\u5c3d\u7684\u5165\u95e8\u6559\u7a0b": 343, "\u4ece\u8fd9\u4e9b\u5165\u95e8\u6559\u7a0b\u4e2d\u4f60\u53ef\u4ee5\u4e86\u89e3\u5230\u5982\u4f55\u542f\u52a8\u4e00\u4e2agraphscope\u4f1a\u8bdd": 343, "\u5982\u4f55\u8f7d\u56fe": 343, "\u4ee5\u53ca\u5982\u4f55\u5206\u522b": 343, "\u4f7f\u7528graphscope\u4e2d\u7684ga": 343, "gle\u5f15\u64ce\u6765\u5b8c\u6210\u56fe\u5206\u6790\u4efb\u52a1": 343, "\u4ea4\u4e92\u5f0f\u67e5\u8be2\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u7684\u8bad\u7ec3": 343, "\u6211\u4eec\u7528jupyt": 343, "notebook\u6765\u7ec4\u7ec7\u8fd9\u4e9b\u6559\u7a0b": 343, "\u7528\u6237\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2ajupyt": 343, "notebook\u670d\u52a1\u4e2d\u5c1d\u8bd5\u6267\u884c": 343, "\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u5df2\u7ecf\u51c6\u5907\u597d\u7684jupyt": 343, "lab": 343, "\u73af\u5883": 343, "\u4ee5\u4fbf\u4e8e\u7528\u6237\u66f4\u5feb\u5730\u4e0a\u624bgraphscop": 343, "\u5165\u95e8\u6559\u7a0b\u5305\u62ec\u5982\u4e0b\u8fd9\u4e9b\u5185\u5bb9": 343}, "objects": {"": [[99, 0, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase"], [99, 1, 1, "_CPPv4N2gs7AppBase7AppBaseEv", "gs::AppBase::AppBase"], [99, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::CONTEXT_T"], [99, 2, 1, "_CPPv4I00EN2gs7AppBaseE", "gs::AppBase::FRAG_T"], [99, 1, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval"], [99, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::context"], [99, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::graph"], [99, 3, 1, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::IncEval::messages"], [99, 1, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval"], [99, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::context"], [99, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::graph"], [99, 3, 1, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::AppBase::PEval::messages"], [99, 4, 1, "_CPPv4N2gs7AppBase13load_strategyE", "gs::AppBase::load_strategy"], [99, 5, 1, "_CPPv4N2gs7AppBase17message_manager_tE", "gs::AppBase::message_manager_t"], [99, 4, 1, "_CPPv4N2gs7AppBase16message_strategyE", "gs::AppBase::message_strategy"], [99, 4, 1, "_CPPv4N2gs7AppBase16need_split_edgesE", "gs::AppBase::need_split_edges"], [99, 1, 1, "_CPPv4N2gs7AppBaseD0Ev", "gs::AppBase::~AppBase"], [99, 0, 1, "_CPPv4N2gs8AppEntryE", "gs::AppEntry"], [99, 1, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry"], [99, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::id"], [99, 3, 1, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE", "gs::AppEntry::AppEntry::lib_path"], [99, 1, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker"], [99, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::comm_spec"], [99, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::fragment"], [99, 3, 1, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::AppEntry::CreateWorker::spec"], [99, 1, 1, "_CPPv4N2gs8AppEntry4InitEv", "gs::AppEntry::Init"], [99, 1, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query"], [99, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::context_key"], [99, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::frag_wrapper"], [99, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::query_args"], [99, 3, 1, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE", "gs::AppEntry::Query::worker_handler"], [99, 0, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt"], [99, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::FunctionType"], [99, 2, 1, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE", "gs::ArgTypeAt::index"], [99, 0, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum"], [99, 2, 1, "_CPPv4I0EN2gs7ArgsNumE", "gs::ArgsNum::FunctionType"], [99, 0, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker"], [99, 2, 1, "_CPPv4I0EN2gs12ArgsUnpackerE", "gs::ArgsUnpacker::T"], [99, 0, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragment::frag_id"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE", "gs::ArrowFragmentLoader::AddLabelsToFragmentAsFragmentGroup::frag_id"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::client"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::comm_spec"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::compact_edges"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::directed"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::efiles"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::generate_eid"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE", "gs::ArrowFragmentLoader::ArrowFragmentLoader::graph_info"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::retain_oid"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::use_perfect_hash"], [99, 3, 1, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb", "gs::ArrowFragmentLoader::ArrowFragmentLoader::vfiles"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv", "gs::ArrowFragmentLoader::LoadEdgeTables"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv", "gs::ArrowFragmentLoader::LoadFragment"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv", "gs::ArrowFragmentLoader::LoadFragmentAsFragmentGroup"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv", "gs::ArrowFragmentLoader::LoadVertexEdgeTables"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv", "gs::ArrowFragmentLoader::LoadVertexTables"], [99, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::OID_T"], [99, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VERTEX_MAP_T"], [99, 2, 1, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE", "gs::ArrowFragmentLoader::VID_T"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv", "gs::ArrowFragmentLoader::initPartitioner"], [99, 1, 1, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev", "gs::ArrowFragmentLoader::~ArrowFragmentLoader"], [99, 0, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment"], [99, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::COMPACT"], [99, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct"], [99, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedFragment::Construct::meta"], [99, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv", "gs::ArrowProjectedFragment::Create"], [99, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::EDATA_T"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t", "gs::ArrowProjectedFragment::GetData::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv", "gs::ArrowProjectedFragment::GetEdgeNum"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t", "gs::ArrowProjectedFragment::GetFragId::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t", "gs::ArrowProjectedFragment::GetId::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv", "gs::ArrowProjectedFragment::GetInEdgeNum"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::COMPACT_"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::src_fid"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetIncomingAdjList::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv", "gs::ArrowProjectedFragment::GetIncomingEdgeNum"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::COMPACT_"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingInnerVertexAdjList::v"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::COMPACT_"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetIncomingOuterVertexAdjList::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::oid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertex::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexGid::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexId::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInnerVertexInternalId::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv", "gs::ArrowProjectedFragment::GetInnerVerticesNum"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetInternalId::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalInDegree::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t", "gs::ArrowProjectedFragment::GetLocalOutDegree::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv", "gs::ArrowProjectedFragment::GetOutEdgeNum"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::oid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertex::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexGid::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexId::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t", "gs::ArrowProjectedFragment::GetOuterVertexInternalId::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv", "gs::ArrowProjectedFragment::GetOuterVerticesNum"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::COMPACT_"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::dst_fid"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t", "gs::ArrowProjectedFragment::GetOutgoingAdjList::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv", "gs::ArrowProjectedFragment::GetOutgoingEdgeNum"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::COMPACT_"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingInnerVertexAdjList::v"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::COMPACT_"], [99, 3, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t", "gs::ArrowProjectedFragment::GetOutgoingOuterVertexAdjList::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv", "gs::ArrowProjectedFragment::GetTotalVerticesNum"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::oid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t", "gs::ArrowProjectedFragment::GetVertex::v"], [99, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv", "gs::ArrowProjectedFragment::GetVertexMap"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv", "gs::ArrowProjectedFragment::GetVerticesNum"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t", "gs::ArrowProjectedFragment::Gid2Oid::gid"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::gid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::Gid2Vertex::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IEDests::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t", "gs::ArrowProjectedFragment::IOEDests::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::gid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::InnerVertexGid2Vertex::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv", "gs::ArrowProjectedFragment::InnerVertices"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsInnerVertex::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t", "gs::ArrowProjectedFragment::IsOuterVertex::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t", "gs::ArrowProjectedFragment::MirrorVertices::fid"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t", "gs::ArrowProjectedFragment::OEDests::v"], [99, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::OID_T"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::gid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t", "gs::ArrowProjectedFragment::Oid2Gid::oid"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::gid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t", "gs::ArrowProjectedFragment::OuterVertexGid2Vertex::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv", "gs::ArrowProjectedFragment::OuterVertices"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t", "gs::ArrowProjectedFragment::OuterVertices::fid"], [99, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp"], [99, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::comm_spec"], [99, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE", "gs::ArrowProjectedFragment::PrepareToRunApp::conf"], [99, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project"], [99, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_label"], [99, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::e_prop"], [99, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::fragment"], [99, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_label"], [99, 3, 1, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t", "gs::ArrowProjectedFragment::Project::v_prop"], [99, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VDATA_T"], [99, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VERTEX_MAP_T"], [99, 2, 1, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE", "gs::ArrowProjectedFragment::VID_T"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid"], [99, 3, 1, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t", "gs::ArrowProjectedFragment::Vertex2Gid::v"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv", "gs::ArrowProjectedFragment::Vertices"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE", "gs::ArrowProjectedFragment::adj_list_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE", "gs::ArrowProjectedFragment::compact_adj_list_t"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv", "gs::ArrowProjectedFragment::compact_edges"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE", "gs::ArrowProjectedFragment::compact_nbr_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE", "gs::ArrowProjectedFragment::const_adj_list_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE", "gs::ArrowProjectedFragment::const_compact_adj_list_t"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv", "gs::ArrowProjectedFragment::directed"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE", "gs::ArrowProjectedFragment::edata_t"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv", "gs::ArrowProjectedFragment::edge_label"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv", "gs::ArrowProjectedFragment::edge_prop_id"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE", "gs::ArrowProjectedFragment::eid_array_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE", "gs::ArrowProjectedFragment::eid_t"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv", "gs::ArrowProjectedFragment::fid"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv", "gs::ArrowProjectedFragment::fnum"], [99, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv", "gs::ArrowProjectedFragment::get_arrow_fragment"], [99, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv", "gs::ArrowProjectedFragment::get_edata_array_accessor"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_begin_ptr"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_ie_offsets_end_ptr"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_in_edges_ptr::COMPACT_"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_begin_ptr"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv", "gs::ArrowProjectedFragment::get_oe_offsets_end_ptr"], [99, 1, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr"], [99, 2, 1, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv", "gs::ArrowProjectedFragment::get_out_edges_ptr::COMPACT_"], [99, 1, 1, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv", "gs::ArrowProjectedFragment::get_vdata_array_accessor"], [99, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t"], [99, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE", "gs::ArrowProjectedFragment::inner_vertex_array_t::DATA_T"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE", "gs::ArrowProjectedFragment::inner_vertices_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE", "gs::ArrowProjectedFragment::internal_oid_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE", "gs::ArrowProjectedFragment::label_id_t"], [99, 4, 1, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE", "gs::ArrowProjectedFragment::load_strategy"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv", "gs::ArrowProjectedFragment::local_vertex_map"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE", "gs::ArrowProjectedFragment::nbr_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE", "gs::ArrowProjectedFragment::nbr_unit_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE", "gs::ArrowProjectedFragment::oid_t"], [99, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t"], [99, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE", "gs::ArrowProjectedFragment::outer_vertex_array_t::DATA_T"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE", "gs::ArrowProjectedFragment::outer_vertices_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE", "gs::ArrowProjectedFragment::prop_id_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE", "gs::ArrowProjectedFragment::property_graph_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE", "gs::ArrowProjectedFragment::property_vertex_map_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE", "gs::ArrowProjectedFragment::sub_vertices_t"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv", "gs::ArrowProjectedFragment::use_perfect_hash"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE", "gs::ArrowProjectedFragment::vdata_t"], [99, 5, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t"], [99, 2, 1, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE", "gs::ArrowProjectedFragment::vertex_array_t::DATA_T"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv", "gs::ArrowProjectedFragment::vertex_label"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv", "gs::ArrowProjectedFragment::vertex_map_id"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE", "gs::ArrowProjectedFragment::vertex_map_t"], [99, 1, 1, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv", "gs::ArrowProjectedFragment::vertex_prop_id"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE", "gs::ArrowProjectedFragment::vertex_range_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE", "gs::ArrowProjectedFragment::vertex_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE", "gs::ArrowProjectedFragment::vertices_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE", "gs::ArrowProjectedFragment::vid_array_t"], [99, 5, 1, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE", "gs::ArrowProjectedFragment::vid_t"], [99, 1, 1, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev", "gs::ArrowProjectedFragment::~ArrowProjectedFragment"], [99, 0, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap"], [99, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct"], [99, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE", "gs::ArrowProjectedVertexMap::Construct::meta"], [99, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv", "gs::ArrowProjectedVertexMap::Create"], [99, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetFidFromGid::gid"], [99, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [99, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::fid"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::gid"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t", "gs::ArrowProjectedVertexMap::GetGid::oid"], [99, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t", "gs::ArrowProjectedVertexMap::GetInnerVertexSize::fid"], [99, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t", "gs::ArrowProjectedVertexMap::GetLidFromGid::gid"], [99, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid"], [99, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t", "gs::ArrowProjectedVertexMap::GetOffsetFromLid::lid"], [99, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::gid"], [99, 3, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t", "gs::ArrowProjectedVertexMap::GetOid::oid"], [99, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv", "gs::ArrowProjectedVertexMap::GetTotalVerticesNum"], [99, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::OID_T"], [99, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid"], [99, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t", "gs::ArrowProjectedVertexMap::Offset2Lid::offset"], [99, 1, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project"], [99, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::v_label"], [99, 3, 1, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t", "gs::ArrowProjectedVertexMap::Project::vm"], [99, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VERTEX_MAP_T"], [99, 2, 1, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE", "gs::ArrowProjectedVertexMap::VID_T"], [99, 1, 1, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv", "gs::ArrowProjectedVertexMap::use_perfect_hash"], [99, 0, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder"], [99, 2, 1, "_CPPv4I00EN2gs17CtxWrapperBuilderE", "gs::CtxWrapperBuilder::CTX_T"], [99, 0, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker"], [99, 2, 1, "_CPPv4I0EN2gs21DefaultPropertyWorkerE", "gs::DefaultPropertyWorker::APP_T"], [99, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker"], [99, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::app"], [99, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultPropertyWorker::DefaultPropertyWorker::graph"], [99, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv", "gs::DefaultPropertyWorker::Finalize"], [99, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv", "gs::DefaultPropertyWorker::GetContext"], [99, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init"], [99, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::comm_spec"], [99, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultPropertyWorker::Init::pe_spec"], [99, 1, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output"], [99, 3, 1, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE", "gs::DefaultPropertyWorker::Output::os"], [99, 1, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query"], [99, 2, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::Args"], [99, 3, 1, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args", "gs::DefaultPropertyWorker::Query::args"], [99, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker9context_tE", "gs::DefaultPropertyWorker::context_t"], [99, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE", "gs::DefaultPropertyWorker::fragment_t"], [99, 5, 1, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE", "gs::DefaultPropertyWorker::message_manager_t"], [99, 1, 1, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev", "gs::DefaultPropertyWorker::~DefaultPropertyWorker"], [99, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [99, 0, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker"], [99, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [99, 2, 1, "_CPPv4I0EN2gs13DefaultWorkerE", "gs::DefaultWorker::APP_T"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::app"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::DefaultWorker::DefaultWorker::graph"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker8FinalizeEv", "gs::DefaultWorker::Finalize"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker10GetContextEv", "gs::DefaultWorker::GetContext"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::comm_spec"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::DefaultWorker::Init::pe_spec"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [99, 1, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [99, 3, 1, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE", "gs::DefaultWorker::Output::os"], [99, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [99, 1, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query"], [99, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [99, 2, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::Args"], [99, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [99, 3, 1, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args", "gs::DefaultWorker::Query::args"], [99, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [99, 5, 1, "_CPPv4N2gs13DefaultWorker9context_tE", "gs::DefaultWorker::context_t"], [99, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [99, 5, 1, "_CPPv4N2gs13DefaultWorker10fragment_tE", "gs::DefaultWorker::fragment_t"], [99, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [99, 5, 1, "_CPPv4N2gs13DefaultWorker17message_manager_tE", "gs::DefaultWorker::message_manager_t"], [99, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [99, 1, 1, "_CPPv4N2gs13DefaultWorkerD0Ev", "gs::DefaultWorker::~DefaultWorker"], [99, 0, 1, "_CPPv4N2gs14DispatchResultE", "gs::DispatchResult"], [99, 6, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicyE", "gs::DispatchResult::AggregatePolicy"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::AggregatePolicy::kConcat"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::AggregatePolicy::kMergeGraphDef"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::AggregatePolicy::kPickFirst"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmpty"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::AggregatePolicy::kPickFirstNonEmptyGraphDef"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::AggregatePolicy::kRequireConsistent"], [99, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult"], [99, 1, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEv", "gs::DispatchResult::DispatchResult"], [99, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::error_code"], [99, 3, 1, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE", "gs::DispatchResult::DispatchResult::worker_id"], [99, 1, 1, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv", "gs::DispatchResult::aggregate_policy"], [99, 1, 1, "_CPPv4NK2gs14DispatchResult4dataEv", "gs::DispatchResult::data"], [99, 1, 1, "_CPPv4NK2gs14DispatchResult10error_codeEv", "gs::DispatchResult::error_code"], [99, 1, 1, "_CPPv4N2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [99, 1, 1, "_CPPv4NK2gs14DispatchResult9graph_defEv", "gs::DispatchResult::graph_def"], [99, 1, 1, "_CPPv4NK2gs14DispatchResult14has_large_dataEv", "gs::DispatchResult::has_large_data"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE", "gs::DispatchResult::kConcat"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE", "gs::DispatchResult::kMergeGraphDef"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE", "gs::DispatchResult::kPickFirst"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE", "gs::DispatchResult::kPickFirstNonEmpty"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE", "gs::DispatchResult::kPickFirstNonEmptyGraphDef"], [99, 7, 1, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE", "gs::DispatchResult::kRequireConsistent"], [99, 1, 1, "_CPPv4N2gs14DispatchResult7messageEv", "gs::DispatchResult::message"], [99, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data"], [99, 1, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data"], [99, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::arc"], [99, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::data"], [99, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [99, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::large_data"], [99, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [99, 3, 1, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb", "gs::DispatchResult::set_data::policy"], [99, 1, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error"], [99, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::error_code"], [99, 3, 1, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE", "gs::DispatchResult::set_error::message"], [99, 1, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def"], [99, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::graph_def"], [99, 3, 1, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy", "gs::DispatchResult::set_graph_def::policy"], [99, 1, 1, "_CPPv4NK2gs14DispatchResult9worker_idEv", "gs::DispatchResult::worker_id"], [99, 0, 1, "_CPPv4N2gs10DispatcherE", "gs::Dispatcher"], [99, 1, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch"], [99, 3, 1, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::Dispatch::cmd"], [99, 1, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher"], [99, 3, 1, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE", "gs::Dispatcher::Dispatcher::comm_spec"], [99, 1, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand"], [99, 3, 1, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE", "gs::Dispatcher::SetCommand::cmd"], [99, 1, 1, "_CPPv4N2gs10Dispatcher5StartEv", "gs::Dispatcher::Start"], [99, 1, 1, "_CPPv4N2gs10Dispatcher4StopEv", "gs::Dispatcher::Stop"], [99, 1, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe"], [99, 3, 1, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE", "gs::Dispatcher::Subscribe::subscriber"], [99, 0, 1, "_CPPv4N2gs12EngineConfigE", "gs::EngineConfig"], [99, 1, 1, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv", "gs::EngineConfig::ToJsonString"], [99, 4, 1, "_CPPv4N2gs12EngineConfig15enable_java_sdkE", "gs::EngineConfig::enable_java_sdk"], [99, 4, 1, "_CPPv4N2gs12EngineConfig8networkxE", "gs::EngineConfig::networkx"], [99, 4, 1, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE", "gs::EngineConfig::vineyard_rpc_endpoint"], [99, 4, 1, "_CPPv4N2gs12EngineConfig15vineyard_socketE", "gs::EngineConfig::vineyard_socket"], [99, 0, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper"], [99, 2, 1, "_CPPv4I0EN2gs15FragmentWrapperE", "gs::FragmentWrapper::FRAG_T"], [99, 0, 1, "_CPPv4N2gs8GSObjectE", "gs::GSObject"], [99, 1, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject"], [99, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::id"], [99, 3, 1, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType", "gs::GSObject::GSObject::type"], [99, 1, 1, "_CPPv4NK2gs8GSObject8ToStringEv", "gs::GSObject::ToString"], [99, 1, 1, "_CPPv4NK2gs8GSObject2idEv", "gs::GSObject::id"], [99, 1, 1, "_CPPv4NK2gs8GSObject4typeEv", "gs::GSObject::type"], [99, 1, 1, "_CPPv4N2gs8GSObjectD0Ev", "gs::GSObject::~GSObject"], [99, 0, 1, "_CPPv4N2gs11GrapeEngineE", "gs::GrapeEngine"], [99, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine"], [99, 1, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine"], [99, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE", "gs::GrapeEngine::GrapeEngine::dag_file"], [99, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::host"], [99, 3, 1, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi", "gs::GrapeEngine::GrapeEngine::port"], [99, 1, 1, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv", "gs::GrapeEngine::RunDAGFile"], [99, 1, 1, "_CPPv4N2gs11GrapeEngine5StartEv", "gs::GrapeEngine::Start"], [99, 1, 1, "_CPPv4N2gs11GrapeEngine4StopEv", "gs::GrapeEngine::Stop"], [99, 0, 1, "_CPPv4N2gs13GrapeInstanceE", "gs::GrapeInstance"], [99, 1, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance"], [99, 3, 1, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE", "gs::GrapeInstance::GrapeInstance::comm_spec"], [99, 1, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init"], [99, 3, 1, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE", "gs::GrapeInstance::Init::vineyard_socket"], [99, 1, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive"], [99, 3, 1, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE", "gs::GrapeInstance::OnReceive::cmd"], [99, 0, 1, "_CPPv4N2gs13ObjectManagerE", "gs::ObjectManager"], [99, 1, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject"], [99, 1, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject"], [99, 2, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::T"], [99, 3, 1, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [99, 3, 1, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE", "gs::ObjectManager::GetObject::id"], [99, 1, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject"], [99, 3, 1, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE", "gs::ObjectManager::HasObject::id"], [99, 1, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject"], [99, 3, 1, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE", "gs::ObjectManager::PutObject::obj"], [99, 1, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject"], [99, 3, 1, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE", "gs::ObjectManager::RemoveObject::id"], [99, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [99, 0, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker"], [99, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [99, 2, 1, "_CPPv4I0EN2gs22ParallelPropertyWorkerE", "gs::ParallelPropertyWorker::APP_T"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv", "gs::ParallelPropertyWorker::Finalize"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv", "gs::ParallelPropertyWorker::GetContext"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::comm_spec"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::ParallelPropertyWorker::Init::pe_spec"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE", "gs::ParallelPropertyWorker::Output::os"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::app"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [99, 3, 1, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::ParallelPropertyWorker::ParallelPropertyWorker::graph"], [99, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [99, 1, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query"], [99, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [99, 2, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::Args"], [99, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [99, 3, 1, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args", "gs::ParallelPropertyWorker::Query::args"], [99, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [99, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker9context_tE", "gs::ParallelPropertyWorker::context_t"], [99, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [99, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE", "gs::ParallelPropertyWorker::fragment_t"], [99, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [99, 5, 1, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE", "gs::ParallelPropertyWorker::message_manager_t"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [99, 1, 1, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev", "gs::ParallelPropertyWorker::~ParallelPropertyWorker"], [99, 0, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase"], [99, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::CONTEXT_T"], [99, 2, 1, "_CPPv4I00EN2gs15PropertyAppBaseE", "gs::PropertyAppBase::FRAG_T"], [99, 1, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval"], [99, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::context"], [99, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::graph"], [99, 3, 1, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::IncEval::messages"], [99, 1, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval"], [99, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::context"], [99, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::graph"], [99, 3, 1, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t", "gs::PropertyAppBase::PEval::messages"], [99, 1, 1, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv", "gs::PropertyAppBase::PropertyAppBase"], [99, 4, 1, "_CPPv4N2gs15PropertyAppBase13load_strategyE", "gs::PropertyAppBase::load_strategy"], [99, 5, 1, "_CPPv4N2gs15PropertyAppBase17message_manager_tE", "gs::PropertyAppBase::message_manager_t"], [99, 4, 1, "_CPPv4N2gs15PropertyAppBase16message_strategyE", "gs::PropertyAppBase::message_strategy"], [99, 4, 1, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE", "gs::PropertyAppBase::need_split_edges"], [99, 1, 1, "_CPPv4N2gs15PropertyAppBaseD0Ev", "gs::PropertyAppBase::~PropertyAppBase"], [99, 0, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase"], [99, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::CONTEXT_T"], [99, 2, 1, "_CPPv4I00EN2gs19PropertyAutoAppBaseE", "gs::PropertyAutoAppBase::FRAG_T"], [99, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval"], [99, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::context"], [99, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::IncEval::graph"], [99, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval"], [99, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::context"], [99, 3, 1, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T", "gs::PropertyAutoAppBase::PEval::graph"], [99, 1, 1, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv", "gs::PropertyAutoAppBase::PropertyAutoAppBase"], [99, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE", "gs::PropertyAutoAppBase::load_strategy"], [99, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE", "gs::PropertyAutoAppBase::message_strategy"], [99, 4, 1, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE", "gs::PropertyAutoAppBase::need_split_edges"], [99, 1, 1, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev", "gs::PropertyAutoAppBase::~PropertyAutoAppBase"], [99, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [99, 0, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker"], [99, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [99, 2, 1, "_CPPv4I0EN2gs18PropertyAutoWorkerE", "gs::PropertyAutoWorker::APP_T"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv", "gs::PropertyAutoWorker::Finalize"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv", "gs::PropertyAutoWorker::GetContext"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::comm_spec"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE", "gs::PropertyAutoWorker::Init::pe_spec"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE", "gs::PropertyAutoWorker::Output::os"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::app"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [99, 3, 1, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE", "gs::PropertyAutoWorker::PropertyAutoWorker::graph"], [99, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [99, 1, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query"], [99, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [99, 2, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::Args"], [99, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [99, 3, 1, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args", "gs::PropertyAutoWorker::Query::args"], [99, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [99, 5, 1, "_CPPv4N2gs18PropertyAutoWorker9context_tE", "gs::PropertyAutoWorker::context_t"], [99, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [99, 5, 1, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE", "gs::PropertyAutoWorker::fragment_t"], [99, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [99, 5, 1, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE", "gs::PropertyAutoWorker::message_manager_t"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [99, 1, 1, "_CPPv4N2gs18PropertyAutoWorkerD0Ev", "gs::PropertyAutoWorker::~PropertyAutoWorker"], [99, 0, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext"], [99, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::DATA_T"], [99, 2, 1, "_CPPv4I00EN2gs13TensorContextE", "gs::TensorContext::FRAG_T"], [99, 1, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext"], [99, 3, 1, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t", "gs::TensorContext::TensorContext::fragment"], [99, 1, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign"], [99, 1, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign"], [99, 3, 1, "_CPPv4N2gs13TensorContext6assignERK6data_t", "gs::TensorContext::assign::data"], [99, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::data"], [99, 3, 1, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE", "gs::TensorContext::assign::shape"], [99, 5, 1, "_CPPv4N2gs13TensorContext6data_tE", "gs::TensorContext::data_t"], [99, 1, 1, "_CPPv4N2gs13TensorContext8fragmentEv", "gs::TensorContext::fragment"], [99, 1, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape"], [99, 3, 1, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE", "gs::TensorContext::set_shape::shape"], [99, 1, 1, "_CPPv4NK2gs13TensorContext5shapeEv", "gs::TensorContext::shape"], [99, 1, 1, "_CPPv4N2gs13TensorContext6tensorEv", "gs::TensorContext::tensor"], [99, 0, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper"], [99, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::DATA_T"], [99, 2, 1, "_CPPv4I000EN2gs20TensorContextWrapperE", "gs::TensorContextWrapper::FRAG_T"], [99, 1, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::ctx"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::frag_wrapper"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::TensorContextWrapper::TensorContextWrapper::id"], [99, 1, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::comm_spec"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::TensorContextWrapper::ToArrowArrays::selectors"], [99, 1, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE", "gs::TensorContextWrapper::ToDataframe::comm_spec"], [99, 1, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::axis"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t", "gs::TensorContextWrapper::ToNdArray::comm_spec"], [99, 1, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::client"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE", "gs::TensorContextWrapper::ToVineyardDataframe::comm_spec"], [99, 1, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::axis"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::client"], [99, 3, 1, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t", "gs::TensorContextWrapper::ToVineyardTensor::comm_spec"], [99, 1, 1, "_CPPv4N2gs20TensorContextWrapper12context_typeEv", "gs::TensorContextWrapper::context_type"], [99, 1, 1, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv", "gs::TensorContextWrapper::fragment_wrapper"], [99, 0, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper"], [99, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::DATA_T"], [99, 2, 1, "_CPPv4I00EN2gs24VertexDataContextWrapperE", "gs::VertexDataContextWrapper::FRAG_T"], [99, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::comm_spec"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE", "gs::VertexDataContextWrapper::ToArrowArrays::selectors"], [99, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::comm_spec"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::range"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToDataframe::selectors"], [99, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::comm_spec"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::range"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToNdArray::selector"], [99, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::client"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::comm_spec"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::range"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardDataframe::selectors"], [99, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::client"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::comm_spec"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::range"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE", "gs::VertexDataContextWrapper::ToVineyardTensor::selector"], [99, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::ctx"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::frag_wrapper"], [99, 3, 1, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE", "gs::VertexDataContextWrapper::VertexDataContextWrapper::id"], [99, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv", "gs::VertexDataContextWrapper::context_type"], [99, 1, 1, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv", "gs::VertexDataContextWrapper::fragment_wrapper"], [99, 0, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext"], [99, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContextE", "gs::VertexPropertyContext::FRAG_T"], [99, 1, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext"], [99, 3, 1, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t", "gs::VertexPropertyContext::VertexPropertyContext::fragment"], [99, 1, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column"], [99, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::name"], [99, 3, 1, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType", "gs::VertexPropertyContext::add_column::type"], [99, 1, 1, "_CPPv4N2gs21VertexPropertyContext8fragmentEv", "gs::VertexPropertyContext::fragment"], [99, 5, 1, "_CPPv4N2gs21VertexPropertyContext10fragment_tE", "gs::VertexPropertyContext::fragment_t"], [99, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column"], [99, 1, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column"], [99, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t", "gs::VertexPropertyContext::get_column::index"], [99, 3, 1, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE", "gs::VertexPropertyContext::get_column::name"], [99, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column"], [99, 1, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column"], [99, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [99, 2, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::DATA_T"], [99, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t", "gs::VertexPropertyContext::get_typed_column::index"], [99, 3, 1, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE", "gs::VertexPropertyContext::get_typed_column::name"], [99, 5, 1, "_CPPv4N2gs21VertexPropertyContext5oid_tE", "gs::VertexPropertyContext::oid_t"], [99, 5, 1, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE", "gs::VertexPropertyContext::prop_id_t"], [99, 1, 1, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv", "gs::VertexPropertyContext::properties_map"], [99, 1, 1, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv", "gs::VertexPropertyContext::vertex_properties"], [99, 5, 1, "_CPPv4N2gs21VertexPropertyContext8vertex_tE", "gs::VertexPropertyContext::vertex_t"], [99, 0, 1, "_CPPv4N2gs3rpc16AnalyticalServerE", "gs::rpc::AnalyticalServer"], [99, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer"], [99, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::dispatcher"], [99, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::host"], [99, 3, 1, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi", "gs::rpc::AnalyticalServer::AnalyticalServer::port"], [99, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv", "gs::rpc::AnalyticalServer::StartServer"], [99, 1, 1, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv", "gs::rpc::AnalyticalServer::StopServer"], [0, 8, 1, "", "all_pairs_shortest_path_length"], [0, 8, 1, "", "attribute_assortativity"], [0, 8, 1, "", "average_degree_connectivity"], [0, 8, 1, "", "betweenness_centrality"], [0, 8, 1, "", "bfs"], [0, 8, 1, "id0", "cdlp"], [0, 8, 1, "", "closeness_centrality"], [0, 8, 1, "id1", "clustering"], [0, 8, 1, "", "degree_assortativity_coefficient"], [0, 8, 1, "", "degree_centrality"], [0, 8, 1, "", "dfs"], [0, 8, 1, "", "eigenvector_centrality"], [0, 8, 1, "", "hits"], [0, 8, 1, "", "katz_centrality"], [0, 8, 1, "", "kkore"], [0, 8, 1, "", "kshell"], [0, 8, 1, "id2", "lcc"], [0, 8, 1, "", "lpa"], [0, 8, 1, "id3", "pagerank"], [0, 8, 1, "", "sampling_path"], [0, 8, 1, "", "sssp"], [0, 8, 1, "id4", "voterank"], [0, 8, 1, "id5", "wcc"]], "graphscope": [[316, 9, 1, "", "Session"], [106, 12, 1, "", "Vertex"], [100, 8, 1, "", "attribute_assortativity_coefficient"], [100, 8, 1, "", "average_degree_connectivity"], [100, 8, 1, "", "average_shortest_path_length"], [100, 8, 1, "", "avg_clustering"], [100, 8, 1, "", "bfs"], [100, 8, 1, "", "cdlp"], [100, 8, 1, "", "clustering"], [107, 8, 1, "", "declare"], [100, 8, 1, "", "degree_assortativity_coefficient"], [100, 8, 1, "", "degree_centrality"], [100, 8, 1, "", "eigenvector_centrality"], [150, 8, 1, "", "g"], [151, 8, 1, "", "get_default_session"], [152, 8, 1, "", "graphlearn"], [153, 8, 1, "", "gremlin"], [154, 8, 1, "", "has_default_session"], [100, 8, 1, "", "hits"], [100, 8, 1, "", "is_simple_path"], [100, 8, 1, "", "k_core"], [100, 8, 1, "", "k_shell"], [100, 8, 1, "", "katz_centrality"], [100, 8, 1, "", "louvain"], [100, 8, 1, "", "lpa"], [100, 8, 1, "", "lpa_u2i"], [100, 8, 1, "", "numeric_assortativity_coefficient"], [100, 8, 1, "", "pagerank"], [100, 8, 1, "", "pagerank_nx"], [155, 14, 1, "", "session"], [156, 8, 1, "", "set_option"], [100, 8, 1, "", "sssp"], [100, 8, 1, "", "triangles"], [100, 8, 1, "", "voterank"], [100, 8, 1, "", "wcc"]], "graphscope.Session": [[316, 10, 1, "", "__enter__"], [316, 10, 1, "", "__exit__"], [316, 10, 1, "", "__init__"], [316, 10, 1, "", "add_lib"], [316, 10, 1, "", "as_default"], [316, 10, 1, "", "close"], [316, 10, 1, "", "connected"], [316, 11, 1, "", "engine_config"], [316, 10, 1, "", "g"], [316, 10, 1, "", "get_config"], [316, 10, 1, "", "get_vineyard_object_mapping_table"], [316, 10, 1, "", "graphlearn"], [316, 11, 1, "", "info"], [316, 10, 1, "", "interactive"], [316, 10, 1, "", "load_from"], [316, 10, 1, "", "load_from_gar"], [316, 10, 1, "", "restore_from_pvc"], [316, 10, 1, "", "run_fetches"], [316, 10, 1, "", "store_to_pvc"]], "graphscope.analytical.app": [[100, 9, 1, "", "JavaApp"]], "graphscope.analytical.app.JavaApp": [[100, 10, 1, "", "__call__"], [100, 10, 1, "", "__init__"], [100, 10, 1, "", "is_compatible"], [100, 10, 1, "", "signature"]], "graphscope.framework.app": [[100, 9, 1, "", "App"], [100, 9, 1, "", "AppAssets"], [100, 9, 1, "", "AppDAGNode"], [108, 8, 1, "", "load_app"]], "graphscope.framework.app.App": [[100, 10, 1, "", "__del__"], [100, 10, 1, "", "__init__"], [100, 11, 1, "", "key"], [100, 11, 1, "", "signature"]], "graphscope.framework.app.AppAssets": [[100, 10, 1, "", "__init__"], [100, 11, 1, "", "algo"], [100, 11, 1, "", "context_type"], [100, 11, 1, "", "gar"], [100, 10, 1, "", "is_compatible"], [100, 11, 1, "", "signature"], [100, 11, 1, "", "type"]], "graphscope.framework.context": [[101, 9, 1, "", "BaseContextDAGNode"], [101, 9, 1, "", "Context"], [101, 9, 1, "", "DynamicVertexDataContext"], [101, 9, 1, "", "LabeledVertexDataContextDAGNode"], [101, 9, 1, "", "LabeledVertexPropertyContextDAGNode"], [101, 9, 1, "", "ResultDAGNode"], [101, 9, 1, "", "TensorContextDAGNode"], [101, 9, 1, "", "VertexDataContextDAGNode"], [101, 9, 1, "", "VertexPropertyContextDAGNode"]], "graphscope.framework.context.BaseContextDAGNode": [[101, 10, 1, "", "to_dataframe"], [101, 10, 1, "", "to_numpy"], [101, 10, 1, "", "to_vineyard_dataframe"], [101, 10, 1, "", "to_vineyard_tensor"]], "graphscope.framework": [[313, 13, 0, "-", "dag_utils"]], "graphscope.framework.dag_utils": [[109, 8, 1, "", "add_column"], [110, 8, 1, "", "add_labels_to_graph"], [111, 8, 1, "", "arrow_to_dynamic"], [112, 8, 1, "", "bind_app"], [113, 8, 1, "", "clear_edges"], [114, 8, 1, "", "clear_graph"], [115, 8, 1, "", "context_to_dataframe"], [116, 8, 1, "", "context_to_numpy"], [117, 8, 1, "", "copy_graph"], [118, 8, 1, "", "create_app"], [119, 8, 1, "", "create_graph"], [120, 8, 1, "", "create_graph_view"], [121, 8, 1, "", "create_loader"], [122, 8, 1, "", "create_subgraph"], [123, 8, 1, "", "create_unload_op"], [124, 8, 1, "", "dynamic_to_arrow"], [125, 8, 1, "", "get_context_data"], [126, 8, 1, "", "graph_to_dataframe"], [127, 8, 1, "", "graph_to_numpy"], [128, 8, 1, "", "gremlin_to_subgraph"], [129, 8, 1, "", "modify_edges"], [130, 8, 1, "", "modify_vertices"], [131, 8, 1, "", "output"], [132, 8, 1, "", "project_arrow_property_graph"], [133, 8, 1, "", "project_to_simple"], [134, 8, 1, "", "report_graph"], [135, 8, 1, "", "run_app"], [136, 8, 1, "", "to_data_sink"], [137, 8, 1, "", "to_directed"], [138, 8, 1, "", "to_undirected"], [139, 8, 1, "", "to_vineyard_dataframe"], [140, 8, 1, "", "to_vineyard_tensor"], [141, 8, 1, "", "unload_app"], [142, 8, 1, "", "unload_context"], [143, 8, 1, "", "unload_graph"]], "graphscope.framework.graph": [[171, 9, 1, "", "Graph"], [171, 9, 1, "", "GraphDAGNode"]], "graphscope.framework.graph.Graph": [[171, 10, 1, "", "__init__"], [171, 10, 1, "", "add_column"], [171, 10, 1, "", "add_edges"], [171, 10, 1, "", "add_vertices"], [171, 10, 1, "", "archive"], [171, 10, 1, "", "consolidate_columns"], [171, 10, 1, "", "detach"], [171, 11, 1, "", "key"], [171, 10, 1, "", "load_from"], [171, 10, 1, "", "loaded"], [171, 10, 1, "", "project"], [171, 10, 1, "", "save_to"], [171, 11, 1, "", "schema"], [171, 11, 1, "", "schema_path"], [171, 11, 1, "", "session_id"], [171, 10, 1, "", "to_dataframe"], [171, 10, 1, "", "to_directed"], [171, 10, 1, "", "to_numpy"], [171, 10, 1, "", "to_undirected"], [171, 11, 1, "", "vineyard_id"]], "graphscope.framework.graph.GraphDAGNode": [[171, 10, 1, "", "__init__"], [171, 10, 1, "", "add_column"], [171, 10, 1, "", "add_edges"], [171, 10, 1, "", "add_vertices"], [171, 10, 1, "", "consolidate_columns"], [171, 10, 1, "", "project"]], "graphscope.framework.graph_builder": [[171, 8, 1, "", "load_from"]], "graphscope.framework.loader": [[171, 9, 1, "", "Loader"]], "graphscope.framework.loader.Loader": [[171, 10, 1, "", "__init__"]], "graphscope.framework.operation": [[313, 9, 1, "", "Operation"]], "graphscope.framework.operation.Operation": [[144, 10, 1, "", "__init__"], [145, 10, 1, "", "as_op_def"], [146, 10, 1, "", "eval"], [147, 11, 1, "", "evaluated"], [148, 11, 1, "", "key"], [149, 11, 1, "", "signature"]], "graphscope.interactive.query": [[172, 9, 1, "", "InteractiveQuery"]], "graphscope.interactive.query.InteractiveQuery": [[172, 10, 1, "", "__init__"], [172, 10, 1, "", "close"], [172, 11, 1, "", "cypher_driver"], [172, 11, 1, "", "cypher_url"], [172, 10, 1, "", "execute"], [172, 11, 1, "", "graph_url"], [172, 11, 1, "", "gremlin_client"], [172, 11, 1, "", "gremlin_url"], [172, 11, 1, "", "object_id"], [172, 11, 1, "", "session"], [172, 11, 1, "", "session_id"], [172, 10, 1, "", "subgraph"], [172, 10, 1, "", "submit"], [172, 10, 1, "", "traversal_source"]], "graphscope.learning.graph": [[173, 9, 1, "", "Graph"]], "graphscope.learning.graph.Graph": [[173, 10, 1, "", "E"], [173, 10, 1, "", "V"], [173, 10, 1, "", "__init__"], [173, 10, 1, "", "get_handle"]], "graphscope.nx": [[309, 9, 1, "", "DiGraph"], [309, 9, 1, "", "Graph"], [311, 8, 1, "", "read_adjlist"], [311, 8, 1, "", "read_edgelist"]], "graphscope.nx.DiGraph": [[309, 10, 1, "", "__contains__"], [309, 10, 1, "", "__getitem__"], [309, 10, 1, "", "__init__"], [309, 10, 1, "", "__iter__"], [309, 10, 1, "", "__len__"], [309, 10, 1, "", "add_edge"], [309, 10, 1, "", "add_edges_from"], [309, 10, 1, "", "add_node"], [309, 10, 1, "", "add_nodes_from"], [309, 10, 1, "", "add_weighted_edges_from"], [309, 11, 1, "", "adj"], [309, 10, 1, "", "adjacency"], [309, 14, 1, "", "adjlist_inner_dict_factory"], [309, 14, 1, "", "adjlist_outer_dict_factory"], [309, 10, 1, "", "clear"], [309, 10, 1, "", "clear_edges"], [309, 10, 1, "", "copy"], [309, 11, 1, "", "degree"], [309, 14, 1, "", "edge_attr_dict_factory"], [309, 10, 1, "", "edge_subgraph"], [309, 11, 1, "", "edges"], [309, 10, 1, "", "get_edge_data"], [309, 14, 1, "", "graph_attr_dict_factory"], [309, 14, 1, "", "graph_cache_factory"], [309, 11, 1, "", "graph_type"], [309, 10, 1, "", "has_edge"], [309, 10, 1, "", "has_node"], [309, 10, 1, "", "has_predecessor"], [309, 10, 1, "", "has_successor"], [309, 11, 1, "", "in_degree"], [309, 11, 1, "", "in_edges"], [309, 10, 1, "", "is_directed"], [309, 10, 1, "", "is_multigraph"], [309, 11, 1, "", "key"], [309, 11, 1, "", "name"], [309, 10, 1, "", "nbunch_iter"], [309, 10, 1, "", "neighbors"], [309, 14, 1, "", "node_attr_dict_factory"], [309, 14, 1, "", "node_dict_factory"], [309, 11, 1, "", "nodes"], [309, 10, 1, "", "number_of_edges"], [309, 10, 1, "", "number_of_nodes"], [309, 11, 1, "", "op"], [309, 10, 1, "", "order"], [309, 11, 1, "", "out_degree"], [309, 11, 1, "", "out_edges"], [309, 11, 1, "", "pred"], [309, 10, 1, "", "predecessors"], [309, 10, 1, "", "remove_edge"], [309, 10, 1, "", "remove_edges_from"], [309, 10, 1, "", "remove_node"], [309, 10, 1, "", "remove_nodes_from"], [309, 10, 1, "", "reverse"], [309, 11, 1, "", "schema"], [309, 11, 1, "", "session"], [309, 11, 1, "", "session_id"], [309, 10, 1, "", "set_edge_data"], [309, 10, 1, "", "set_node_data"], [309, 11, 1, "", "signature"], [309, 10, 1, "", "size"], [309, 10, 1, "", "subgraph"], [309, 11, 1, "", "succ"], [309, 10, 1, "", "successors"], [309, 10, 1, "", "to_directed"], [309, 10, 1, "", "to_undirected"], [309, 10, 1, "", "to_undirected_class"], [309, 10, 1, "", "update"]], "graphscope.nx.Graph": [[309, 10, 1, "", "__contains__"], [309, 10, 1, "", "__getitem__"], [312, 8, 1, "", "__init__"], [309, 10, 1, "", "__iter__"], [309, 10, 1, "", "__len__"], [312, 8, 1, "", "_convert_arrow_to_dynamic"], [309, 10, 1, "", "add_edge"], [309, 10, 1, "", "add_edges_from"], [309, 10, 1, "", "add_node"], [309, 10, 1, "", "add_nodes_from"], [309, 10, 1, "", "add_weighted_edges_from"], [309, 11, 1, "", "adj"], [309, 10, 1, "", "adjacency"], [309, 14, 1, "", "adjlist_inner_dict_factory"], [309, 14, 1, "", "adjlist_outer_dict_factory"], [309, 10, 1, "", "clear"], [309, 10, 1, "", "clear_edges"], [309, 10, 1, "", "copy"], [309, 11, 1, "", "degree"], [309, 14, 1, "", "edge_attr_dict_factory"], [309, 10, 1, "", "edge_subgraph"], [309, 11, 1, "", "edges"], [309, 10, 1, "", "get_edge_data"], [309, 14, 1, "", "graph_attr_dict_factory"], [309, 14, 1, "", "graph_cache_factory"], [309, 11, 1, "", "graph_type"], [309, 10, 1, "", "has_edge"], [309, 10, 1, "", "has_node"], [309, 10, 1, "", "is_directed"], [309, 10, 1, "", "is_multigraph"], [309, 11, 1, "", "key"], [309, 11, 1, "", "name"], [309, 10, 1, "", "nbunch_iter"], [309, 10, 1, "", "neighbors"], [309, 14, 1, "", "node_attr_dict_factory"], [309, 14, 1, "", "node_dict_factory"], [309, 11, 1, "", "nodes"], [309, 10, 1, "", "number_of_edges"], [309, 10, 1, "", "number_of_nodes"], [309, 11, 1, "", "op"], [309, 10, 1, "", "order"], [309, 10, 1, "", "remove_edge"], [309, 10, 1, "", "remove_edges_from"], [309, 10, 1, "", "remove_node"], [309, 10, 1, "", "remove_nodes_from"], [309, 11, 1, "", "schema"], [309, 11, 1, "", "session"], [309, 11, 1, "", "session_id"], [309, 10, 1, "", "set_edge_data"], [309, 10, 1, "", "set_node_data"], [309, 11, 1, "", "signature"], [309, 10, 1, "", "size"], [309, 10, 1, "", "subgraph"], [309, 10, 1, "", "to_directed"], [309, 10, 1, "", "to_undirected"], [309, 10, 1, "", "to_undirected_class"], [309, 10, 1, "", "update"]], "graphscope.nx.builtin": [[174, 8, 1, "", "average_clustering"], [174, 8, 1, "", "average_shortest_path_length"], [174, 8, 1, "", "bfs_edges"], [174, 8, 1, "", "clustering"], [174, 8, 1, "", "degree_centrality"], [174, 8, 1, "", "eigenvector_centrality"], [174, 8, 1, "", "has_path"], [174, 8, 1, "", "hits"], [174, 8, 1, "", "in_degree_centrality"], [174, 8, 1, "", "k_core"], [174, 8, 1, "", "katz_centrality"], [174, 8, 1, "", "out_degree_centrality"], [174, 8, 1, "", "triangles"]], "graphscope.nx.classes": [[175, 13, 0, "-", "function"]], "graphscope.nx.classes.function": [[176, 8, 1, "", "add_cycle"], [177, 8, 1, "", "add_path"], [178, 8, 1, "", "add_star"], [179, 8, 1, "", "all_neighbors"], [180, 8, 1, "", "common_neighbors"], [181, 8, 1, "", "create_empty_copy"], [182, 8, 1, "", "degree"], [183, 8, 1, "", "degree_histogram"], [184, 8, 1, "", "density"], [185, 8, 1, "", "edge_subgraph"], [186, 8, 1, "", "edges"], [187, 8, 1, "", "freeze"], [188, 8, 1, "", "induced_subgraph"], [189, 8, 1, "", "info"], [190, 8, 1, "", "is_directed"], [191, 8, 1, "", "is_empty"], [192, 8, 1, "", "is_frozen"], [193, 8, 1, "", "is_negatively_weighted"], [194, 8, 1, "", "is_weighted"], [195, 8, 1, "", "neighbors"], [196, 8, 1, "", "nodes"], [197, 8, 1, "", "nodes_with_selfloops"], [198, 8, 1, "", "non_edges"], [199, 8, 1, "", "non_neighbors"], [200, 8, 1, "", "number_of_edges"], [201, 8, 1, "", "number_of_nodes"], [202, 8, 1, "", "number_of_selfloops"], [203, 8, 1, "", "selfloop_edges"], [204, 8, 1, "", "subgraph"], [205, 8, 1, "", "to_directed"], [206, 8, 1, "", "to_undirected"]], "graphscope.nx.generators": [[308, 13, 0, "-", "atlas"], [308, 13, 0, "-", "classic"], [308, 13, 0, "-", "community"], [308, 13, 0, "-", "degree_seq"], [308, 13, 0, "-", "directed"], [308, 13, 0, "-", "duplication"], [308, 13, 0, "-", "ego"], [308, 13, 0, "-", "expanders"], [308, 13, 0, "-", "geometric"], [308, 13, 0, "-", "harary_graph"], [308, 13, 0, "-", "intersection"], [308, 13, 0, "-", "joint_degree_seq"], [308, 13, 0, "-", "mycielski"], [308, 13, 0, "-", "nonisomorphic_trees"], [308, 13, 0, "-", "small"], [308, 13, 0, "-", "social"], [308, 13, 0, "-", "spectral_graph_forge"], [308, 13, 0, "-", "sudoku"], [308, 13, 0, "-", "trees"], [308, 13, 0, "-", "triads"]], "graphscope.nx.generators.atlas": [[207, 8, 1, "", "graph_atlas"], [208, 8, 1, "", "graph_atlas_g"]], "graphscope.nx.generators.classic": [[209, 8, 1, "", "balanced_tree"], [210, 8, 1, "", "barbell_graph"], [211, 8, 1, "", "binomial_tree"], [212, 8, 1, "", "circulant_graph"], [213, 8, 1, "", "circular_ladder_graph"], [214, 8, 1, "", "complete_graph"], [215, 8, 1, "", "complete_multipartite_graph"], [216, 8, 1, "", "cycle_graph"], [217, 8, 1, "", "dorogovtsev_goltsev_mendes_graph"], [218, 8, 1, "", "empty_graph"], [219, 8, 1, "", "full_rary_tree"], [220, 8, 1, "", "ladder_graph"], [221, 8, 1, "", "lollipop_graph"], [222, 8, 1, "", "null_graph"], [223, 8, 1, "", "path_graph"], [224, 8, 1, "", "star_graph"], [225, 8, 1, "", "trivial_graph"], [226, 8, 1, "", "turan_graph"], [227, 8, 1, "", "wheel_graph"]], "graphscope.nx.generators.community": [[228, 8, 1, "", "LFR_benchmark_graph"], [229, 8, 1, "", "caveman_graph"], [230, 8, 1, "", "connected_caveman_graph"], [231, 8, 1, "", "gaussian_random_partition_graph"], [232, 8, 1, "", "planted_partition_graph"], [233, 8, 1, "", "random_partition_graph"], [234, 8, 1, "", "relaxed_caveman_graph"], [235, 8, 1, "", "ring_of_cliques"], [236, 8, 1, "", "stochastic_block_model"], [237, 8, 1, "", "windmill_graph"]], "graphscope.nx.generators.degree_seq": [[238, 8, 1, "", "configuration_model"], [239, 8, 1, "", "degree_sequence_tree"], [240, 8, 1, "", "directed_configuration_model"], [241, 8, 1, "", "directed_havel_hakimi_graph"], [242, 8, 1, "", "expected_degree_graph"], [243, 8, 1, "", "havel_hakimi_graph"], [244, 8, 1, "", "random_degree_sequence_graph"]], "graphscope.nx.generators.directed": [[245, 8, 1, "", "gn_graph"], [246, 8, 1, "", "gnc_graph"], [247, 8, 1, "", "gnr_graph"], [248, 8, 1, "", "random_k_out_graph"], [249, 8, 1, "", "scale_free_graph"]], "graphscope.nx.generators.duplication": [[250, 8, 1, "", "duplication_divergence_graph"], [251, 8, 1, "", "partial_duplication_graph"]], "graphscope.nx.generators.ego": [[252, 8, 1, "", "ego_graph"]], "graphscope.nx.generators.expanders": [[253, 8, 1, "", "chordal_cycle_graph"], [254, 8, 1, "", "margulis_gabber_galil_graph"], [255, 8, 1, "", "paley_graph"]], "graphscope.nx.generators.geometric": [[256, 8, 1, "", "geographical_threshold_graph"], [257, 8, 1, "", "random_geometric_graph"], [258, 8, 1, "", "soft_random_geometric_graph"], [259, 8, 1, "", "thresholded_random_geometric_graph"], [260, 8, 1, "", "waxman_graph"]], "graphscope.nx.generators.harary_graph": [[261, 8, 1, "", "hkn_harary_graph"], [262, 8, 1, "", "hnm_harary_graph"]], "graphscope.nx.generators.intersection": [[263, 8, 1, "", "general_random_intersection_graph"], [264, 8, 1, "", "k_random_intersection_graph"], [265, 8, 1, "", "uniform_random_intersection_graph"]], "graphscope.nx.generators.joint_degree_seq": [[266, 8, 1, "", "directed_joint_degree_graph"], [267, 8, 1, "", "is_valid_directed_joint_degree"], [268, 8, 1, "", "is_valid_joint_degree"], [269, 8, 1, "", "joint_degree_graph"]], "graphscope.nx.generators.mycielski": [[270, 8, 1, "", "mycielski_graph"], [271, 8, 1, "", "mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees": [[272, 8, 1, "", "nonisomorphic_trees"], [273, 8, 1, "", "number_of_nonisomorphic_trees"]], "graphscope.nx.generators.small": [[274, 8, 1, "", "LCF_graph"], [275, 8, 1, "", "bull_graph"], [276, 8, 1, "", "chvatal_graph"], [277, 8, 1, "", "cubical_graph"], [278, 8, 1, "", "desargues_graph"], [279, 8, 1, "", "diamond_graph"], [280, 8, 1, "", "dodecahedral_graph"], [281, 8, 1, "", "frucht_graph"], [282, 8, 1, "", "heawood_graph"], [283, 8, 1, "", "house_graph"], [284, 8, 1, "", "house_x_graph"], [285, 8, 1, "", "icosahedral_graph"], [286, 8, 1, "", "krackhardt_kite_graph"], [287, 8, 1, "", "make_small_graph"], [288, 8, 1, "", "moebius_kantor_graph"], [289, 8, 1, "", "octahedral_graph"], [290, 8, 1, "", "pappus_graph"], [291, 8, 1, "", "petersen_graph"], [292, 8, 1, "", "sedgewick_maze_graph"], [293, 8, 1, "", "tetrahedral_graph"], [294, 8, 1, "", "truncated_cube_graph"], [295, 8, 1, "", "truncated_tetrahedron_graph"], [296, 8, 1, "", "tutte_graph"]], "graphscope.nx.generators.social": [[297, 8, 1, "", "davis_southern_women_graph"], [298, 8, 1, "", "florentine_families_graph"], [299, 8, 1, "", "karate_club_graph"], [300, 8, 1, "", "les_miserables_graph"]], "graphscope.nx.generators.spectral_graph_forge": [[301, 8, 1, "", "spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[302, 8, 1, "", "sudoku_graph"]], "graphscope.nx.generators.trees": [[303, 8, 1, "", "prefix_tree"], [304, 8, 1, "", "random_tree"]], "graphscope.nx.generators.triads": [[305, 8, 1, "", "triad_graph"]], "networkx.generators": [[308, 13, 0, "-", "internet_as_graphs"], [308, 13, 0, "-", "stochastic"]], "networkx.generators.internet_as_graphs": [[306, 8, 1, "", "random_internet_as_graph"]], "networkx.generators.stochastic": [[307, 8, 1, "", "stochastic_graph"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:templateParam", "3": "cpp:functionParam", "4": "cpp:member", "5": "cpp:type", "6": "cpp:enum", "7": "cpp:enumerator", "8": "py:function", "9": "py:class", "10": "py:method", "11": "py:property", "12": "py:data", "13": "py:module", "14": "py:attribute"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["cpp", "functionParam", "C++ function parameter"], "4": ["cpp", "member", "C++ member"], "5": ["cpp", "type", "C++ type"], "6": ["cpp", "enum", "C++ enum"], "7": ["cpp", "enumerator", "C++ enumerator"], "8": ["py", "function", "Python function"], "9": ["py", "class", "Python class"], "10": ["py", "method", "Python method"], "11": ["py", "property", "Python property"], "12": ["py", "data", "Python data"], "13": ["py", "module", "Python module"], "14": ["py", "attribute", "Python attribute"]}, "titleterms": {"built": [0, 6, 79, 88, 169, 322, 324], "algorithm": [0, 1, 2, 6, 9, 11, 15, 16, 17, 18, 19, 21, 22, 23, 34, 79, 157, 174, 324, 326], "all": [0, 31, 32, 36, 40], "pair": 0, "shortest": 0, "path": [0, 72, 74, 76], "length": 0, "attribut": [0, 20, 158, 175], "assort": 0, "averag": 0, "degre": [0, 182, 308], "connect": [0, 29, 30, 48, 67, 75, 322], "between": [0, 72, 318], "central": 0, "breadth": 0, "first": [0, 63], "search": 0, "cdlp": 0, "close": 0, "cluster": [0, 27, 30, 33, 40, 63, 85], "coeffici": 0, "depth": 0, "eigenvector": 0, "hyperlink": 0, "induc": [0, 20], "topic": 0, "katz": 0, "k": 0, "core": 0, "shell": [0, 54, 67], "label": [0, 74, 76, 88, 158, 321, 342], "propag": 0, "lcc": 0, "pagerank": 0, "sampl": [0, 41, 43, 74, 83, 94, 157, 161, 163, 166, 169], "singl": [0, 60], "sourc": [0, 31, 32, 74, 104, 158, 164, 167, 168], "voterank": 0, "wcc": 0, "custom": [1, 23, 27, 41, 42, 66, 322], "aggreg": [1, 72, 74, 76, 80], "local": [1, 7, 32, 36, 38, 40, 65, 66, 74, 81, 82, 86, 87, 321, 322], "vertex": [1, 10, 24, 43, 76, 88, 106, 315, 321, 342], "map": [1, 43, 56, 318], "support": [1, 11, 23, 69, 74, 79], "deploy": [2, 27, 38, 62, 63], "gae": [2, 34, 91, 326, 330], "prerequisit": [2, 16, 27, 29, 30, 32, 33, 50, 63, 322], "onli": [2, 37], "python": [2, 15, 18, 31, 35, 36, 67, 75, 79, 98, 314, 322, 326, 334], "sdk": [2, 16, 34, 75, 102], "helm": [2, 29], "execut": [2, 34, 68, 89], "graph": [2, 9, 11, 13, 19, 20, 30, 33, 34, 42, 43, 44, 51, 59, 60, 62, 68, 71, 72, 76, 79, 80, 83, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 157, 159, 160, 161, 162, 163, 165, 169, 171, 173, 175, 308, 309, 311, 312, 318, 320, 321, 322, 323, 324, 330], "analyt": [2, 3, 4, 7, 10, 13, 24, 31, 59, 62, 79, 89, 90, 92, 97, 99, 100, 330], "uninstal": [2, 29, 322], "design": [3, 9, 34, 64, 79, 80, 89, 167, 321], "engin": [3, 4, 7, 9, 10, 12, 24, 31, 36, 41, 62, 66, 79, 81, 82, 86, 87, 89, 97, 99, 321, 330], "dev": [4, 32, 36, 40, 65, 81], "test": [4, 36, 37, 40, 65, 81, 87, 164], "setup": [4, 32], "understand": 4, "codebas": 4, "make": [4, 20], "modif": 4, "build": [4, 32, 36, 40, 65, 81, 104, 157, 164, 322, 342], "faq": [5, 72], "program": [6, 12, 14, 34, 60, 167], "model": [6, 12, 14, 15, 16, 17, 24, 34, 44, 51, 80, 85, 86, 87, 91, 94, 157, 165, 169, 321, 322], "flash": [6, 15, 91], "motiv": [6, 9, 64, 89, 321], "The": [6, 19, 30, 51, 53, 64, 320], "overview": [6, 9, 12, 51, 53, 62, 165, 322], "api": [6, 9, 12, 19, 20, 68, 99, 102, 103, 158, 169, 310, 314, 338], "strong": 6, "express": [6, 74, 76], "implement": [6, 15, 17, 37, 167, 321], "architectur": [6, 12, 64, 318], "optim": [6, 13, 71, 72, 87], "get": [7, 37, 48, 58, 66, 82, 90, 164, 319], "start": [7, 42, 48, 58, 65, 66, 76, 82, 90, 169, 319], "instal": [7, 27, 29, 30, 31, 32, 36, 37, 50, 62, 66, 81, 82, 164, 322, 329], "run": [7, 15, 16, 17, 18, 21, 22, 23, 37, 40, 48, 60, 66, 82, 164], "graphscop": [7, 10, 15, 16, 17, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 36, 40, 45, 46, 47, 55, 60, 62, 66, 82, 89, 92, 94, 95, 96, 99, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 318, 320, 330, 334, 338, 339], "what": [7, 14, 66, 72, 82, 92, 94, 95], "": [7, 66, 72, 82, 99], "next": [7, 66, 82, 95], "guid": [8, 35, 36, 45, 73, 84, 322, 326, 327], "exampl": [8, 17, 22, 23, 73, 84, 326, 327], "ingress": [9, 91], "increment": [9, 12], "messag": [9, 80], "driven": 9, "differenti": 9, "flexibl": [9, 34], "memoiz": 9, "distribut": [9, 60, 159, 167], "runtim": [9, 34, 167], "kei": [10, 51, 68, 72, 79, 148], "concept": [10, 321], "loadstrategi": 10, "onlyout": 10, "onlyin": 10, "bothinout": 10, "partitionstrategi": 10, "edg": [10, 20, 43, 76, 88, 175, 186, 311, 321, 342], "cut": [10, 321], "vertic": [10, 76, 88, 342], "outervertex": 10, "innervertex": 10, "innervertexwithoutgoingedg": 10, "innervertexwithincomingedg": 10, "messagemanag": 10, "messagestrategi": 10, "alongoutgoingedgetooutervertex": 10, "alongincomingedgetooutervertex": 10, "alongedgetooutervertex": 10, "synconoutervertexastarget": 10, "synconoutervertexassourc": 10, "synconoutervertex": 10, "networkx": [11, 19, 306, 307, 310], "compat": [11, 72], "convert": 11, "nx": [11, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305], "oper": [11, 20, 28, 69, 76, 144, 145, 146, 147, 148, 149, 167, 313], "storag": [12, 33, 34, 62, 89, 318, 321], "layer": [12, 89], "grape": [12, 17, 91, 104], "ffi": 12, "comput": [12, 60, 62, 89, 321], "applic": [12, 15, 22, 23, 76, 89, 324], "perform": [13, 19, 34, 72, 79, 97], "tune": 13, "memori": [13, 88, 323], "footprint": 13, "properti": [13, 51, 69, 72, 74, 76, 88, 321, 342], "data": [13, 42, 43, 44, 60, 63, 69, 72, 88, 158, 165, 168, 169, 320, 322], "structur": [13, 69, 104, 175], "usag": [13, 53, 54, 72, 88], "estim": [13, 317], "pie": [14, 16, 17, 18, 91, 102, 332], "i": [14, 74, 92, 94, 95], "workflow": [14, 79, 318], "tutori": [15, 16, 17, 18, 19, 20, 21, 22, 23, 76, 78, 85, 86, 87, 98], "develop": [15, 16, 17, 18, 22, 23, 36, 45, 62, 157, 169, 322, 326], "your": [15, 16, 17, 18, 22, 37, 41, 63, 86, 87, 88, 157, 167, 326], "c": [15, 16, 35, 46, 326], "defin": [15, 16, 86, 87, 167, 318], "A": [15, 51, 62, 71], "function": [15, 18, 87, 100, 102, 157, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 316], "integr": [15, 37, 60, 168], "client": [15, 27, 30, 36, 159, 329], "step": [16, 42, 74, 76, 94], "1": [16, 42, 56, 68, 158, 159, 161, 169], "context": [16, 99, 101, 315], "class": [16, 167, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "2": [16, 42, 56, 68, 158, 159, 169, 322], "3": [16, 42, 56, 68, 158, 159, 169, 322], "packag": [16, 31, 32, 164], "4": [16, 56, 68, 158, 169], "gar": 16, "file": [16, 27, 31, 168, 320], "github": [16, 17, 25, 37], "templat": [16, 17], "java": [17, 35, 75, 78, 105, 322, 326], "jar": 17, "own": [17, 18, 22, 63, 88, 157, 167], "prepar": [17, 27, 30, 40, 48, 169], "jdk": [17, 104], "submit": [17, 22, 23, 37, 39, 48], "javasdk": 17, "write": [18, 322], "pregel": [18, 24, 102, 332], "us": [18, 20, 27, 32, 42, 63, 68, 72, 79, 95, 164, 167, 169, 315, 318, 322, 323], "math": [18, 332], "h": [18, 332], "netowrkx": [19, 20], "how": [19, 37, 39, 40, 61, 72, 81, 157, 167, 169, 330], "doe": 19, "analysi": [19, 89], "from": [19, 20, 31, 32, 33, 62, 68, 76, 88, 104, 164, 318, 322], "displai": 19, "speed": 19, "up": [19, 27, 30, 33], "over": 19, "creat": [20, 33, 37, 42, 46, 85, 87], "an": [20, 68, 167], "empti": 20, "ad": [20, 88], "node": [20, 80, 85, 86, 87, 175, 196, 322], "examin": 20, "element": 20, "remov": [20, 63], "constructor": 20, "access": 20, "neighbor": [20, 87, 195], "deepcopi": 20, "subgraph": [20, 72, 74, 80, 83, 94, 204], "edge_subgraph": [20, 185], "copi": [20, 31], "direct": [20, 245, 246, 247, 248, 249, 308], "analyz": 20, "object": [20, 100, 101, 159, 171, 313, 316], "transform": [20, 312], "builtin": [21, 100, 174, 313], "giraph": 22, "try": [22, 169], "some": [22, 76], "app": [22, 23, 99, 100, 108], "graphx": 23, "deploi": [23, 26, 27, 28, 29, 30, 63, 322], "along": 23, "spark": 23, "includ": 23, "depend": [23, 31, 32, 164], "toward": 23, "centric": [24, 80], "ga": 24, "simul": 24, "contact": 25, "u": 25, "slack": [25, 37], "discuss": [25, 37], "cloud": [26, 79, 158], "k8": [27, 85, 330], "kubernet": [27, 30, 33, 38, 40, 85, 334, 339], "launch": [27, 86, 87], "default": 27, "paramet": [27, 88], "frequent": [27, 57], "imag": [27, 32, 40, 164, 322], "uri": 27, "specifi": [27, 88], "number": 27, "worker": [27, 99], "provid": 27, "kubeconfig": 27, "other": [27, 63, 88, 168], "than": 27, "mount": 27, "volum": 27, "inspect": 27, "clean": [27, 30, 33], "coordin": [28, 36], "configur": [28, 29, 41, 43, 63, 66, 170, 322], "releas": [29, 37], "offlin": [29, 31, 322], "exist": 30, "vineyard": [30, 65, 91, 323], "lifecycl": 30, "load": [30, 43, 68, 76, 85, 86, 87, 88, 318, 320, 322, 323], "dataset": [30, 68, 88, 322], "anoth": 30, "session": [30, 85, 155, 316], "environ": [31, 32, 36, 40, 65, 68, 81], "wheel": [31, 164, 334], "download": [31, 54, 68], "destin": 31, "extract": [31, 76], "them": [31, 88], "locat": 31, "basic": [31, 76, 158], "gcc": 31, "g": [31, 150], "third": 31, "parti": 31, "stabl": 32, "version": 32, "preview": 32, "linux": [32, 334], "maco": [32, 334], "persist": [33, 322], "pv": 33, "pvc": 33, "store": [33, 46, 47, 49, 52, 65, 322], "retor": 33, "framework": [34, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "multi": [34, 315], "languag": [34, 51, 163], "high": [34, 79, 89], "librari": [34, 79, 164], "code": [35, 37, 167, 328], "style": [35, 37, 310, 321], "rust": 35, "script": [35, 329], "linter": 35, "checker": 35, "contain": [36, 81], "dep": [36, 81], "target": [36, 40, 88], "compon": 36, "individu": 36, "contribut": 37, "conduct": 37, "commun": [37, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 308], "report": [37, 61], "bug": [37, 61], "request": [37, 39], "featur": [37, 51, 79, 320], "improv": 37, "document": 37, "chang": 37, "pre": 37, "commit": [37, 322], "minor": 37, "fix": 37, "fork": 37, "branch": [37, 74], "suit": 37, "format": [37, 158, 320, 322], "right": 37, "keep": 37, "pull": [37, 39], "updat": [37, 329], "merg": 37, "pr": 37, "maintain": 37, "ship": 37, "review": 37, "continu": 37, "debug": 38, "find": [38, 330], "log": [38, 318, 322, 330], "command": [38, 53, 329], "techniqu": [38, 88], "servic": [41, 42, 48, 53, 63, 65, 322], "avail": 41, "new": [42, 167], "import": [42, 43, 322], "modern": 43, "breakdown": 43, "entiti": 44, "primit": 44, "type": [44, 69, 88, 96, 102, 158, 309], "arrai": [44, 321], "interact": [45, 46, 47, 48, 50, 55, 59, 62, 66, 90, 93, 97, 172, 330], "procedur": [46, 47, 49, 52, 53], "turn": 47, "cypher": [47, 49, 51, 54, 67, 69, 79, 93], "queri": [47, 48, 51, 52, 59, 64, 68, 72, 76, 89, 90, 160, 172, 322], "craft": 47, "compil": [47, 49, 52, 164, 167], "enabl": [47, 52], "invok": 47, "manag": 48, "initi": 48, "stop": [48, 62, 90], "restart": [48, 322], "check": 48, "statu": 48, "destori": 48, "glossari": [49, 91], "solid": 51, "foundat": 51, "limit": [51, 54, 74, 76, 95, 322], "disabl": 52, "view": [52, 322], "administr": 53, "tool": 53, "detail": [53, 321], "root": 53, "databas": [53, 96], "introduct": [56, 74, 161], "arrowfrag": 56, "0": [56, 68], "\u672f\u8bed": 56, "\u8f7d\u56fe": [56, 342], "\u521d\u59cb\u5316partiton": 56, "\u6784\u5efa\u539f\u59cbarrow": 56, "tabl": [56, 62, 158], "shuffl": 56, "vtabl": 56, "\u6784\u5efavertex": 56, "basicarrowvertexmapbuild": 56, "5": [56, 68, 158], "\u6784\u5efafragment\u51c6\u5907": 56, "\u5904\u7406edg": 56, "basicevfragmentload": 56, "fragmentbuilder\u6570\u636e\u521d\u59cb\u5316": 56, "basicarrowfragmentbuild": 56, "6": 56, "fragment\u6784\u5efa": 56, "\u8bbf\u95eefragment": 56, "\u8bbf\u95ee\u9876\u70b9": 56, "\u8bbf\u95ee\u5185\u90e8\u70b9": 56, "\u8303\u56f4\u5916\u90e8\u70b9": 56, "\u8bbf\u95ee\u5168\u90e8\u70b9": 56, "\u8bbf\u95ee\u9876\u70b9\u6570\u636e": 56, "\u8bbf\u95ee\u8fb9": 56, "\u8bbf\u95ee\u51fa\u8fb9": 56, "\u8bbf\u95ee\u5165\u8fb9": 56, "\u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": 56, "ask": 57, "question": [57, 68], "gle": [58, 80, 327, 330], "workload": [59, 92, 93, 94, 96, 318], "learn": [59, 62, 80, 81, 82, 86, 87, 89, 90, 94, 96, 157, 165, 173, 330], "scientist": 60, "challeng": [60, 92, 94], "handl": [60, 96], "solut": 60, "machin": [60, 86, 87], "pydata": 60, "ecosystem": [60, 70, 77], "One": [62, 90, 315], "larg": [62, 88, 92, 94], "scale": [62, 325], "system": [62, 96, 168, 170], "alibaba": [62, 158], "flex": [62, 103], "troubleshoot": [62, 322], "util": [62, 329], "refer": [62, 99, 103, 105, 314, 321], "indic": 62, "standalon": 63, "gie": [63, 64, 65, 66, 67, 68, 70, 71, 72, 75, 77, 91, 330], "process": [64, 86, 90, 96, 157, 322], "manual": [65, 88], "instanc": 66, "via": [67, 75], "driver": 67, "llm": 68, "assist": 68, "set": 68, "endpoint": 68, "gener": [68, 71, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308], "sentenc": 68, "construct": [69, 169], "claus": 69, "neo4j": [70, 93], "For": [70, 77, 321], "tinkerpop": [70, 72, 77, 93, 340], "rule": 71, "base": [71, 80], "rbo": 71, "filtermatchrul": 71, "degreefusionrul": 71, "notmatchtoantijoinrul": 71, "fieldtrimrul": 71, "cost": 71, "cbo": 71, "gremlin": [72, 74, 75, 76, 79, 93, 153, 340], "constraint": 72, "differ": [72, 315], "inner": 72, "id": [72, 74, 76, 321], "expand": [72, 74, 253, 254, 255, 308], "filter": [72, 74, 76], "like": 72, "sql": 72, "group": [72, 74, 76], "multipl": [72, 76, 88], "valu": [72, 74, 76], "appropri": 72, "index": 72, "standard": [74, 320], "v": 74, "e": 74, "out": [74, 76, 169], "inE": [74, 76], "both": [74, 76], "outv": [74, 76], "inv": [74, 76], "otherv": [74, 76], "bothv": [74, 76], "hasid": [74, 76], "haslabel": 74, "ha": 74, "hasnot": 74, "where": [74, 76], "travers": [74, 76, 79, 83, 93, 162], "predic": 74, "dedup": [74, 76], "project": [74, 76, 104], "constant": [74, 76], "valuemap": [74, 76], "elementmap": 74, "select": [74, 76], "count": 74, "fold": [74, 76], "sum": [74, 76], "min": [74, 76], "max": [74, 76], "mean": [74, 76], "groupcount": [74, 76], "h3": 74, "order": [74, 76, 321], "statist": 74, "coin": 74, "union": 74, "match": [74, 76, 93], "ident": 74, "unfold": 74, "syntact": [74, 76], "sugar": [74, 76], "pathexpand": 74, "endv": 74, "To": 74, "Will": 74, "Not": 74, "repeat": 74, "sideeffect": 74, "consol": [75, 340], "ldbc": 76, "retriev": [76, 321], "appli": [76, 94], "real": 76, "expans": 76, "mani": 76, "point": 76, "after": 76, "pattern": [76, 93], "relat": [76, 88, 318], "syntax": 76, "complex": 76, "bi2": 76, "bi3": 76, "bi4": 76, "left": 76, "part": 76, "bi11": 76, "bi14": 76, "apach": [77, 340], "user": [78, 98, 158, 326, 327], "eas": 79, "interfac": [79, 167, 168, 321], "extens": 79, "gnn": [79, 85, 94, 169, 336], "train": [79, 85, 86, 87, 94, 157], "infer": 79, "nativ": 79, "across": 79, "orchestr": 79, "paradigm": [80, 94], "egograph": 80, "pass": 80, "pipelin": 80, "docker": [81, 164, 334], "neighborhood": 83, "neg": [83, 166], "gsl": [83, 163], "classif": [85, 86, 87], "neural": [85, 94], "network": [85, 94, 308], "egographsag": 86, "pyg": 87, "evalu": [87, 147], "loaderfor": 87, "valid": 87, "graphsag": 87, "advanc": 88, "deduc": 88, "when": 88, "ambigu": 88, "put": [88, 158], "togeth": [88, 158], "panda": [88, 342], "numpi": [88, 342], "loader": [88, 171, 342], "variant": 88, "tip": 88, "reduc": 88, "consumpt": 88, "unifi": [89, 321], "platform": 89, "disaggreg": 89, "divers": 89, "bi": 89, "qp": 89, "task": 90, "quick": [90, 169], "gart": [91, 318], "grin": [91, 321], "graphar": [91, 320], "groot": [91, 322, 330], "gum": 91, "maxgraph": 91, "deprec": 91, "v6d": 91, "gaia": 91, "pegasu": 91, "can": [92, 94], "do": [92, 94], "typic": 94, "introduc": 95, "why": 95, "ar": 95, "case": 95, "posit": 96, "compar": 96, "variou": 96, "benchmark": 97, "result": [97, 315], "gpu": 97, "reproduc": 97, "fragment": 99, "appasset": 100, "javaapp": 100, "cython": 102, "about": 104, "javadoc": 105, "declar": 107, "load_app": 108, "dag_util": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143], "add_column": 109, "add_labels_to_graph": 110, "arrow_to_dynam": 111, "bind_app": 112, "clear_edg": 113, "clear_graph": 114, "context_to_datafram": 115, "context_to_numpi": 116, "copy_graph": 117, "create_app": 118, "create_graph": 119, "create_graph_view": 120, "create_load": 121, "create_subgraph": 122, "create_unload_op": 123, "dynamic_to_arrow": 124, "get_context_data": 125, "graph_to_datafram": 126, "graph_to_numpi": 127, "gremlin_to_subgraph": 128, "modify_edg": 129, "modify_vertic": 130, "output": 131, "project_arrow_property_graph": 132, "project_to_simpl": 133, "report_graph": 134, "run_app": 135, "to_data_sink": 136, "to_direct": [137, 205], "to_undirect": [138, 206], "to_vineyard_datafram": 139, "to_vineyard_tensor": 140, "unload_app": 141, "unload_context": 142, "unload_graph": 143, "__init__": 144, "as_op_def": 145, "eval": 146, "signatur": 149, "get_default_sess": 151, "graphlearn": 152, "has_default_sess": 154, "set_opt": 156, "encod": [157, 165], "loss": 157, "weight": 158, "maxcomput": 158, "describ": 159, "topologi": 159, "stand": 159, "alon": 159, "mode": [159, 329], "server": [159, 329], "pip": 164, "tensorflow": 164, "git": 164, "clone": 167, "regist": [167, 168], "bytestreamaccessfil": 168, "structuredaccessfil": 168, "writablefil": 168, "scheme": 168, "gl": 169, "self": 175, "loop": 175, "freez": [175, 187], "add_cycl": 176, "add_path": 177, "add_star": 178, "all_neighbor": 179, "common_neighbor": 180, "create_empty_copi": 181, "degree_histogram": 183, "densiti": 184, "induced_subgraph": 188, "info": 189, "is_direct": 190, "is_empti": 191, "is_frozen": 192, "is_negatively_weight": 193, "is_weight": 194, "nodes_with_selfloop": 197, "non_edg": 198, "non_neighbor": 199, "number_of_edg": 200, "number_of_nod": 201, "number_of_selfloop": 202, "selfloop_edg": 203, "atla": [207, 208, 308], "graph_atla": 207, "graph_atlas_g": 208, "classic": [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 308], "balanced_tre": 209, "barbell_graph": 210, "binomial_tre": 211, "circulant_graph": 212, "circular_ladder_graph": 213, "complete_graph": 214, "complete_multipartite_graph": 215, "cycle_graph": 216, "dorogovtsev_goltsev_mendes_graph": 217, "empty_graph": 218, "full_rary_tre": 219, "ladder_graph": 220, "lollipop_graph": 221, "null_graph": 222, "path_graph": 223, "star_graph": 224, "trivial_graph": 225, "turan_graph": 226, "wheel_graph": 227, "lfr_benchmark_graph": 228, "caveman_graph": 229, "connected_caveman_graph": 230, "gaussian_random_partition_graph": 231, "planted_partition_graph": 232, "random_partition_graph": 233, "relaxed_caveman_graph": 234, "ring_of_cliqu": 235, "stochastic_block_model": 236, "windmill_graph": 237, "degree_seq": [238, 239, 240, 241, 242, 243, 244], "configuration_model": 238, "degree_sequence_tre": 239, "directed_configuration_model": 240, "directed_havel_hakimi_graph": 241, "expected_degree_graph": 242, "havel_hakimi_graph": 243, "random_degree_sequence_graph": 244, "gn_graph": 245, "gnc_graph": 246, "gnr_graph": 247, "random_k_out_graph": 248, "scale_free_graph": 249, "duplic": [250, 251, 308], "duplication_divergence_graph": 250, "partial_duplication_graph": 251, "ego": [252, 308], "ego_graph": 252, "chordal_cycle_graph": 253, "margulis_gabber_galil_graph": 254, "paley_graph": 255, "geometr": [256, 257, 258, 259, 260, 308], "geographical_threshold_graph": 256, "random_geometric_graph": 257, "soft_random_geometric_graph": 258, "thresholded_random_geometric_graph": 259, "waxman_graph": 260, "harary_graph": [261, 262], "hkn_harary_graph": 261, "hnm_harary_graph": 262, "intersect": [263, 264, 265, 308], "general_random_intersection_graph": 263, "k_random_intersection_graph": 264, "uniform_random_intersection_graph": 265, "joint_degree_seq": [266, 267, 268, 269], "directed_joint_degree_graph": 266, "is_valid_directed_joint_degre": 267, "is_valid_joint_degre": 268, "joint_degree_graph": 269, "mycielski": [270, 271, 308], "mycielski_graph": 270, "mycielskian": 271, "nonisomorphic_tre": [272, 273], "number_of_nonisomorphic_tre": 273, "small": [274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 308], "lcf_graph": 274, "bull_graph": 275, "chvatal_graph": 276, "cubical_graph": 277, "desargues_graph": 278, "diamond_graph": 279, "dodecahedral_graph": 280, "frucht_graph": 281, "heawood_graph": 282, "house_graph": 283, "house_x_graph": 284, "icosahedral_graph": 285, "krackhardt_kite_graph": 286, "make_small_graph": 287, "moebius_kantor_graph": 288, "octahedral_graph": 289, "pappus_graph": 290, "petersen_graph": 291, "sedgewick_maze_graph": 292, "tetrahedral_graph": 293, "truncated_cube_graph": 294, "truncated_tetrahedron_graph": 295, "tutte_graph": 296, "social": [297, 298, 299, 300, 308], "davis_southern_women_graph": 297, "florentine_families_graph": 298, "karate_club_graph": 299, "les_miserables_graph": 300, "spectral_graph_forg": 301, "sudoku": [302, 308], "sudoku_graph": 302, "tree": [303, 304, 308], "prefix_tre": 303, "random_tre": 304, "triad": [305, 308], "triad_graph": 305, "internet_as_graph": 306, "random_internet_as_graph": 306, "stochast": [307, 308], "stochastic_graph": 307, "diverg": 308, "sequenc": 308, "AS": 308, "spectral": 308, "non": 308, "isomorph": 308, "joint": 308, "harari": 308, "digraph": 309, "read": 311, "list": [311, 321], "adjac": 311, "selector": 315, "tensorcontext": 315, "vertexdatacontext": 315, "labeledvertexdatacontext": 315, "vertexpropertycontext": 315, "labeledvertexpropertycontext": 315, "method": 315, "dimension": 315, "rang": 315, "resourc": 317, "bridg": 318, "gap": 318, "oltp": 318, "inform": 320, "archiv": 320, "predefin": 321, "macro": 321, "partit": [321, 322, 325], "strategi": 321, "guidelin": 321, "handler": 321, "iter": 321, "master": 321, "mirror": 321, "complet": 321, "natur": 321, "trait": 321, "known": 322, "artifacthub": 322, "directori": 322, "common": 322, "modifi": 322, "j": 322, "realtim": 322, "destroi": 322, "In": 323, "immut": 323, "bind": 324, "repartit": 325, "fennel": 325, "xtrapulp": 325, "hybrid": 325, "error": 328, "line": 329, "gsctl": 329, "monitor": 331, "\u56fe\u5206\u6790\u5f15\u64ce": 332, "\u5185\u7f6e\u7b97\u6cd5": 332, "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": 332, "\u4f7f\u7528": 332, "\u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": 332, "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528": 332, "\u4e2d\u7684\u51fd\u6570": 332, "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": 332, "\u8fd0\u884cjava\u7f16\u5199\u7684\u7b97\u6cd5": 332, "\u8fd0\u884c\u793a\u4f8b\u7684java\u7b97\u6cd5": 332, "\u4f7f\u7528java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": 332, "\u90e8\u7f72": 333, "\u4f7f\u7528helm\u90e8\u7f72graphscop": 333, "\u5728aw": 333, "\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": 333, "\u672c\u5730\u90e8\u7f72graphscop": 333, "\u5f00\u53d1\u8005\u6307\u5357": 334, "\u57fa\u4e8e": [334, 339], "\u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5": 334, "\u6784\u5efa": 334, "\u4ee3\u7801\u98ce\u683c": 334, "\u5e38\u89c1\u95ee\u9898": 335, "\u5feb\u901f\u4e0a\u624b": 336, "\u793a\u4f8b": 336, "\u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": 336, "\u521b\u5efa\u4f1a\u8bdd": 336, "\u4ea4\u4e92\u5f0f\u67e5\u8be2": 336, "\u56fe\u5206\u6790": 336, "\u56fe\u795e\u7ecf\u7f51\u7edc": 336, "\u5173\u95ed\u4f1a\u8bdd": 336, "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": 337, "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": 337, "\u6295\u5f71": 337, "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": 337, "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": 337, "\u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": 338, "\u76ee\u5f55": [338, 343], "\u53c2\u8003": 338, "\u7d22\u5f15": 338, "\u5b89\u88c5": 339, "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": 339, "\u5ba2\u6237\u7aef": 339, "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": 340, "\u5229\u7528python": 340, "\u8fde\u63a5graphscop": 340, "\u5229\u7528java": 340, "\u5f00\u53d1\u63a7\u5236\u53f0": 340, "gremlin\u7f16\u7a0b\u5165\u95e8": 340, "101": 340, "\u56fe\u6570\u636e\u6a21\u578b": 340, "\u67e5\u8be2\u8bed\u8a00": 340, "\u4e00\u4e2a\u4f8b\u5b50": 340, "gremlin\u517c\u5bb9\u6027": 340, "\u5bf9\u6bd4tinkerpop": 340, "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": 340, "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": 340, "\u652f\u6301\u7684gremlin\u64cd\u4f5c": 340, "\u5df2\u77e5\u9650\u5236": 340, "\u56fe\u5b66\u4e60\u5f15\u64ce": 341, "\u56fe\u5b66\u4e60\u6a21\u578b": 341, "\u6570\u636e\u6a21\u578b": 341, "\u7f16\u7801\u5668": 341, "\u81ea\u5b9a\u4e49\u7b97\u6cd5": 341, "\u91c7\u6837": 341, "\u56fe\u6570\u636e\u6d41": 341, "\u6a21\u578b": 341, "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": 341, "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": 342, "\u624b\u52a8\u914d\u7f6e\u56fe": 342, "vid_field": 342, "src_label": 342, "dst_label": 342, "src_field": 342, "dst_field": 342, "\u9ad8\u7ea7\u7528\u6cd5": 342, "\u6ca1\u6709\u6b67\u4e49\u65f6": 342, "\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": 342, "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": 342, "\u591a\u79cd\u8fb9\u5173\u7cfb": 342, "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": 342, "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": 342, "\u5b8c\u6574\u7684\u793a\u4f8b": 342, "\u4ece": 342, "\u6216": 342, "\u4e2d\u8f7d\u56fe": 342, "\u7684\u53d8\u79cd": 342, "\u5165\u95e8\u6559\u7a0b": 343}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 58}, "alltitles": {"Built-in Algorithms": [[0, "built-in-algorithms"], [6, "built-in-algorithms"]], "All Pairs Shortest Path Length": [[0, "all-pairs-shortest-path-length"]], "Attribute Assortativity": [[0, "attribute-assortativity"]], "Average Degree Connectivity": [[0, "average-degree-connectivity"]], "Betweenness Centrality": [[0, "betweenness-centrality"]], "Breadth-First Search": [[0, "breadth-first-search"]], "CDLP": [[0, "cdlp"]], "Closeness Centrality": [[0, "closeness-centrality"]], "Clustering": [[0, "clustering"]], "Degree Assortativity Coefficient": [[0, "degree-assortativity-coefficient"]], "Degree Centrality": [[0, "degree-centrality"]], "Depth-First Search": [[0, "depth-first-search"]], "Eigenvector Centrality": [[0, "eigenvector-centrality"]], "Hyperlink-Induced Topic Search": [[0, "hyperlink-induced-topic-search"]], "Katz Centrality": [[0, "katz-centrality"]], "K-Core": [[0, "k-core"]], "K-Shell": [[0, "k-shell"]], "Label Propagation Algorithm": [[0, "label-propagation-algorithm"]], "LCC": [[0, "lcc"]], "PageRank": [[0, "pagerank"]], "Sampling Path": [[0, "sampling-path"]], "Single-Source Shortest Paths": [[0, "single-source-shortest-paths"]], "VoteRank": [[0, "voterank"]], "WCC": [[0, "wcc"]], "Customized Algorithms": [[1, "customized-algorithms"]], "Aggregators": [[1, "aggregators"]], "Local Vertex Map support": [[1, "local-vertex-map-support"]], "Deployment for GAE": [[2, "deployment-for-gae"]], "Prerequisites": [[2, "prerequisites"], [27, "prerequisites"], [29, "prerequisites"], [30, "prerequisites"], [32, "prerequisites"], [33, "prerequisites"], [50, "prerequisites"], [63, "prerequisites"], [322, "prerequisites"]], "Deployment GAE only": [[2, "deployment-gae-only"]], "Deployment with Python SDK": [[2, "deployment-with-python-sdk"]], "Deployment with Helm": [[2, "deployment-with-helm"]], "Execute graph analytical algorithms": [[2, "execute-graph-analytical-algorithms"]], "Uninstall deployment": [[2, "uninstall-deployment"]], "Design of Analytical Engine": [[3, "design-of-analytical-engine"], [3, null]], "Dev and Test": [[4, "dev-and-test"], [65, "dev-and-test"], [81, "dev-and-test"]], "Setup": [[4, "setup"]], "Understanding the Codebase": [[4, "understanding-the-codebase"]], "Making Modifications": [[4, "making-modifications"]], "Building Analytical Engine": [[4, "building-analytical-engine"]], "Testing": [[4, "testing"]], "FAQs": [[5, "faqs"]], "Programming Model: FLASH": [[6, "programming-model-flash"]], "Motivation": [[6, "motivation"], [9, "motivation"], [89, "motivation"]], "The FLASH Programming Model": [[6, "the-flash-programming-model"]], "Overview": [[6, "overview"], [9, "overview"], [51, "overview"], [53, "overview"], [62, null], [165, "overview"], [322, "overview"]], "FLASH API": [[6, "flash-api"]], "Strong Expressiveness": [[6, "strong-expressiveness"]], "Implementation": [[6, "implementation"]], "Architecture": [[6, "architecture"], [12, "architecture"]], "Optimizations": [[6, "optimizations"]], "Getting Started": [[7, "getting-started"], [48, "getting-started"], [66, "getting-started"], [82, "getting-started"], [90, "getting-started"], [319, "getting-started"]], "Installation": [[7, "installation"], [29, "installation"], [50, "installation"], [66, "installation"], [82, "installation"], [322, "installation"]], "Running GraphScope Analytical Engine on Local": [[7, "running-graphscope-analytical-engine-on-local"]], "What\u2019s the Next": [[7, "whats-the-next"], [66, "whats-the-next"], [82, "whats-the-next"]], "Guide and Examples": [[8, "guide-and-examples"], [73, "guide-and-examples"], [84, "guide-and-examples"]], "Ingress: Incrementalize Graph Algorithms": [[9, "ingress-incrementalize-graph-algorithms"]], "Design of Ingress": [[9, "design-of-ingress"]], "Message-driven Differentiation": [[9, "message-driven-differentiation"]], "Flexible Memoization": [[9, "flexible-memoization"]], "Ingress API": [[9, "ingress-api"]], "Distributed Runtime Engine": [[9, "distributed-runtime-engine"]], "Key Concepts": [[10, "key-concepts"]], "LoadStrategy": [[10, "loadstrategy"]], "OnlyOut": [[10, "onlyout"]], "OnlyIn": [[10, "onlyin"]], "BothInOut": [[10, "bothinout"]], "PartitionStrategy": [[10, "partitionstrategy"]], "Edge Cut": [[10, "edge-cut"]], "Vertex Cut": [[10, "vertex-cut"]], "Vertices on GraphScope analytical engine": [[10, "vertices-on-graphscope-analytical-engine"]], "OuterVertex": [[10, "outervertex"]], "InnerVertex": [[10, "innervertex"]], "InnerVertexWithOutgoingEdge": [[10, "innervertexwithoutgoingedge"]], "InnerVertexWithIncomingEdge": [[10, "innervertexwithincomingedge"]], "MessageManager and MessageStrategy": [[10, "messagemanager-and-messagestrategy"]], "AlongOutgoingEdgeToOuterVertex": [[10, "alongoutgoingedgetooutervertex"]], "AlongIncomingEdgeToOuterVertex": [[10, "alongincomingedgetooutervertex"]], "AlongEdgeToOuterVertex": [[10, "alongedgetooutervertex"]], "SyncOnOuterVertexAsTarget": [[10, "synconoutervertexastarget"]], "SyncOnOuterVertexAsSource": [[10, "synconoutervertexassource"]], "SyncOnOuterVertex": [[10, "synconoutervertex"]], "NetworkX Compatibility": [[11, "networkx-compatibility"]], "Convert a Graph to a nx.Graph": [[11, "convert-a-graph-to-a-nx-graph"]], "Supported Graph Operations": [[11, "supported-graph-operations"]], "Supported Algorithms": [[11, "supported-algorithms"]], "Overview and Architecture": [[12, "overview-and-architecture"]], "Storage Layer": [[12, "storage-layer"]], "Engine Layer": [[12, "engine-layer"]], "GRAPE Engine": [[12, "grape-engine"]], "Programming Model APIs": [[12, "programming-model-apis"]], "FFIs": [[12, "ffis"]], "Incremental Computation Engine": [[12, "incremental-computation-engine"]], "Application Layer": [[12, "application-layer"]], "Performance Tuning": [[13, "performance-tuning"]], "Memory Footprint of Property Graphs": [[13, "memory-footprint-of-property-graphs"]], "Property graph data structure": [[13, "property-graph-data-structure"]], "Memory usage estimation": [[13, "memory-usage-estimation"]], "Optimizing Memory Usage": [[13, "optimizing-memory-usage"]], "Optimizing Performance of Graph Analytics": [[13, "optimizing-performance-of-graph-analytics"]], "Programming Model: PIE": [[14, "programming-model-pie"]], "What is the PIE Model?": [[14, "what-is-the-pie-model"]], "Workflow of PIE": [[14, "workflow-of-pie"]], "Tutorial: Develop Your Algorithms in C++ with FLASH Model": [[15, "tutorial-develop-your-algorithms-in-c-with-flash-model"]], "Developing Algorithms with FLASH Model": [[15, "developing-algorithms-with-flash-model"]], "Defining A FLASH Application": [[15, "defining-a-flash-application"]], "Implementing the Run Function": [[15, "implementing-the-run-function"]], "Integrating with the Python Client of GraphScope": [[15, "integrating-with-the-python-client-of-graphscope"]], "Running the FLASH Algorithms": [[15, "running-the-flash-algorithms"]], "Tutorial: Develop your Algorithm in C++ with PIE Model": [[16, "tutorial-develop-your-algorithm-in-c-with-pie-model"]], "Prerequisites:": [[16, "prerequisites"]], "Step 1: Define the context class": [[16, "step-1-define-the-context-class"]], "Step 2: Define the Algorithm class": [[16, "step-2-define-the-algorithm-class"]], "Step 3: Package the Algorithm": [[16, "step-3-package-the-algorithm"]], "Step 4: Run the .gar file on GraphScope": [[16, "step-4-run-the-gar-file-on-graphscope"]], "GraphScope C++ SDK with Github Template": [[16, "graphscope-c-sdk-with-github-template"]], "Tutorial: Develop your Algorithm in Java with PIE Model": [[17, "tutorial-develop-your-algorithm-in-java-with-pie-model"]], "Run example algorithms with example jar": [[17, "run-example-algorithms-with-example-jar"]], "Implement your own algorithms in Java.": [[17, "implement-your-own-algorithms-in-java"]], "Prepare GRAPE-jdk": [[17, "prepare-grape-jdk"]], "Implement your algorithm": [[17, "implement-your-algorithm"]], "Submit to GraphScope": [[17, "submit-to-graphscope"]], "GraphScope JavaSDK with Github Template": [[17, "graphscope-javasdk-with-github-template"]], "Tutorial: Develop algorithms in Python": [[18, "tutorial-develop-algorithms-in-python"]], "Writing Your Own Algorithms in PIE": [[18, "writing-your-own-algorithms-in-pie"]], "Writing Algorithms in Pregel": [[18, "writing-algorithms-in-pregel"]], "Using math.h Functions in Algorithms": [[18, "using-math-h-functions-in-algorithms"]], "Run Your Own Algorithms": [[18, "run-your-own-algorithms"]], "Tutorial: Graph Algorithms with NetowrkX APIs": [[19, "tutorial-graph-algorithms-with-netowrkx-apis"]], "How does Networkx Perform Graph Analysis?": [[19, "how-does-networkx-perform-graph-analysis"]], "How to Perform Graph Analysis with NetworkX APIs from GraphScope": [[19, "how-to-perform-graph-analysis-with-networkx-apis-from-graphscope"]], "Graph Analysis": [[19, "graph-analysis"]], "Graph Display": [[19, "graph-display"]], "The Performance Speed-up of GraphScope over NetworkX": [[19, "the-performance-speed-up-of-graphscope-over-networkx"]], "Tutorial: Graph Operations with NetowrkX APIs": [[20, "tutorial-graph-operations-with-netowrkx-apis"]], "Creating an Empty Graph": [[20, "creating-an-empty-graph"]], "Adding Nodes": [[20, "adding-nodes"]], "Adding Edges": [[20, "adding-edges"], [88, "adding-edges"]], "Examining Elements of a Graph": [[20, "examining-elements-of-a-graph"]], "Removing Elements from a Graph": [[20, "removing-elements-from-a-graph"]], "Using Graph Constructors": [[20, "using-graph-constructors"]], "Accessing Edges and Neighbors": [[20, "accessing-edges-and-neighbors"]], "Adding Attributes to Graphs, Nodes and Edges": [[20, "adding-attributes-to-graphs-nodes-and-edges"]], "Graph Attributes": [[20, "graph-attributes"]], "Node Attributes": [[20, "node-attributes"]], "Edge Attributes": [[20, "edge-attributes"]], "Induce deepcopy subgraph and edge_subgraph": [[20, "induce-deepcopy-subgraph-and-edge-subgraph"]], "Making Copies": [[20, "making-copies"]], "Directed Graphs": [[20, "directed-graphs"]], "Analyzing Graphs": [[20, "analyzing-graphs"]], "Create graph from GraphScope Graph Object": [[20, "create-graph-from-graphscope-graph-object"]], "Transform to GraphScope Graph Object": [[20, "transform-to-graphscope-graph-object"]], "Tutorial: Running Builtin Algorithms": [[21, "tutorial-running-builtin-algorithms"]], "Tutorial: Run Giraph Applications on GraphScope": [[22, "tutorial-run-giraph-applications-on-graphscope"]], "Try some example giraph apps": [[22, "try-some-example-giraph-apps"]], "Run your own Giraph apps.": [[22, "run-your-own-giraph-apps"]], "Develop Giraph algorithm": [[22, "develop-giraph-algorithm"]], "Submit to GraphScope.": [[22, "submit-to-graphscope"]], "Tutorial: Run GraphX Applications on GraphScope": [[23, "tutorial-run-graphx-applications-on-graphscope"]], "Deploy GraphScope along with Spark": [[23, "deploy-graphscope-along-with-spark"]], "Run example GraphX apps": [[23, "run-example-graphx-apps"]], "Submit to Spark": [[23, "submit-to-spark"]], "Run customized GraphX apps": [[23, "run-customized-graphx-apps"]], "Include dependency": [[23, "include-dependency"]], "Develop customized GraphX algorithm towards GraphScope.": [[23, "develop-customized-graphx-algorithm-towards-graphscope"]], "Run customized GraphX algorithms on Spark with GraphScope support": [[23, "run-customized-graphx-algorithms-on-spark-with-graphscope-support"]], "Vertex-Centric Model": [[24, "vertex-centric-model"]], "Pregel Model": [[24, "pregel-model"]], "GAS Model": [[24, "gas-model"]], "Simulation of Pregel Model in Analytical Engine": [[24, "simulation-of-pregel-model-in-analytical-engine"]], "Contact Us": [[25, "contact-us"]], "Slack": [[25, "slack"], [37, "slack"]], "Discussion on Github": [[25, "discussion-on-github"]], "Deploy GraphScope on Clouds": [[26, "deploy-graphscope-on-clouds"]], "Deploy on K8s Cluster": [[27, "deploy-on-k8s-cluster"]], "Install GraphScope Client": [[27, "install-graphscope-client"], [30, "install-graphscope-client"]], "Prepare a Kubernetes cluster": [[27, "prepare-a-kubernetes-cluster"], [30, "prepare-a-kubernetes-cluster"], [40, "prepare-a-kubernetes-cluster"]], "Deploying GraphScope": [[27, "deploying-graphscope"]], "Launch with default parameters": [[27, "launch-with-default-parameters"]], "Frequently used parameters": [[27, "frequently-used-parameters"]], "Customize image URI": [[27, "customize-image-uri"]], "Specify the number of workers": [[27, "specify-the-number-of-workers"]], "Provide a kubeconfig file other than default": [[27, "provide-a-kubeconfig-file-other-than-default"]], "Mount volumes": [[27, "mount-volumes"]], "Inspect the deployment": [[27, "inspect-the-deployment"]], "Cleaning Up": [[27, "cleaning-up"]], "Deploy GraphScope Operator": [[28, "deploy-graphscope-operator"]], "Coordinator configuration": [[28, "coordinator-configuration"]], "Deploy GraphScope with helm": [[29, "deploy-graphscope-with-helm"]], "Connect to GraphScope": [[29, "connect-to-graphscope"]], "Uninstall the release": [[29, "uninstall-the-release"]], "Configuration": [[29, "configuration"]], "Offline Installation": [[29, "offline-installation"]], "Deploy with Existing Vineyard Cluster": [[30, "deploy-with-existing-vineyard-cluster"]], "Deploy a Vineyard Cluster": [[30, "deploy-a-vineyard-cluster"]], "The lifecycle of a vineyard cluster": [[30, "the-lifecycle-of-a-vineyard-cluster"]], "Load the dataset to the Kubernetes cluster": [[30, "load-the-dataset-to-the-kubernetes-cluster"]], "Load a graph to the existing vineyard cluster": [[30, "load-a-graph-to-the-existing-vineyard-cluster"]], "Connect to the existing vineyard cluster with another GraphScope session": [[30, "connect-to-the-existing-vineyard-cluster-with-another-graphscope-session"]], "Cleaning up": [[30, "cleaning-up"]], "Install GraphScope in offline environment": [[31, "install-graphscope-in-offline-environment"]], "Install from wheels": [[31, "install-from-wheels"]], "Install from source": [[31, "install-from-source"], [32, "install-from-source"]], "Download dependencies and GraphScope": [[31, "download-dependencies-and-graphscope"]], "Copy all files to the destination environment and extract them to a location": [[31, "copy-all-files-to-the-destination-environment-and-extract-them-to-a-location"]], "Install basic packages and gcc-g++,\u00a0python": [[31, "install-basic-packages-and-gcc-g-python"]], "Install third-party dependencies and GraphScope Analytical Engine": [[31, "install-third-party-dependencies-and-graphscope-analytical-engine"]], "Install GraphScope on Local": [[32, "install-graphscope-on-local"]], "Install from packages": [[32, "install-from-packages"]], "Install stable version of GraphScope": [[32, "install-stable-version-of-graphscope"]], "Install preview version of GraphScope": [[32, "install-preview-version-of-graphscope"]], "Setup build environment for Linux and macOS": [[32, "setup-build-environment-for-linux-and-macos"]], "Use dev image with all dependencies installed": [[32, "use-dev-image-with-all-dependencies-installed"]], "Build and install": [[32, "build-and-install"]], "Persistent storage of graphs on the Kubernetes cluster": [[33, "persistent-storage-of-graphs-on-the-kubernetes-cluster"]], "Create a pv and pvc": [[33, "create-a-pv-and-pvc"]], "Store graphs to the pvc": [[33, "store-graphs-to-the-pvc"]], "Retore graphs from the pvc": [[33, "retore-graphs-from-the-pvc"]], "Clean up": [[33, "clean-up"]], "Design of GAE": [[34, "design-of-gae"]], "Graph Storage": [[34, "graph-storage"]], "Execution Framework": [[34, "execution-framework"]], "Flexible programming models": [[34, "flexible-programming-models"]], "Multi-language SDKs": [[34, "multi-language-sdks"]], "High-performance runtime": [[34, "high-performance-runtime"]], "Algorithm Library": [[34, "algorithm-library"]], "Code Style Guide": [[35, "code-style-guide"]], "C++ Style": [[35, "c-style"]], "Python Style": [[35, "python-style"]], "Rust Style": [[35, "rust-style"]], "Java Style": [[35, "java-style"]], "Script Style": [[35, "script-style"]], "Style Linter and Checker": [[35, "style-linter-and-checker"]], "Development Guide": [[36, "development-guide"]], "Dev Environment": [[36, "dev-environment"], [40, "dev-environment"], [65, "dev-environment"], [81, "dev-environment"]], "Develop with dev containers.": [[36, "develop-with-dev-containers"]], "Install deps on local": [[36, "install-deps-on-local"], [81, "install-deps-on-local"]], "Build All Targets for GraphScope": [[36, "build-all-targets-for-graphscope"], [40, "build-all-targets-for-graphscope"]], "Build Components Individually": [[36, "build-components-individually"]], "Build and Test Engines": [[36, "build-and-test-engines"]], "Build Coordinator": [[36, "build-coordinator"]], "Build Python Client": [[36, "build-python-client"]], "How to Contribute": [[37, "how-to-contribute"]], "Code of Conduct": [[37, "code-of-conduct"]], "Community": [[37, "community"], [308, "module-graphscope.nx.generators.community"]], "GitHub Discussion": [[37, "github-discussion"]], "Reporting Bugs": [[37, "reporting-bugs"]], "Requesting Features": [[37, "requesting-features"]], "Improving Documentation": [[37, "improving-documentation"]], "Contributing Code and Documentation Changes": [[37, "contributing-code-and-documentation-changes"]], "Install pre-commit": [[37, "install-pre-commit"]], "Minor Fixes": [[37, "minor-fixes"]], "Fork and Create a Branch": [[37, "fork-and-create-a-branch"]], "Get the Test Suite Running": [[37, "get-the-test-suite-running"]], "Implement Your Fix or Feature": [[37, "implement-your-fix-or-feature"]], "Get the Code Format and Style Right": [[37, "get-the-code-format-and-style-right"]], "Submitting Your Changes": [[37, "submitting-your-changes"]], "Discussing and Keeping Your Pull Request Updated": [[37, "discussing-and-keeping-your-pull-request-updated"]], "Merging a PR (maintainers only)": [[37, "merging-a-pr-maintainers-only"]], "Shipping a Release (maintainers only)": [[37, "shipping-a-release-maintainers-only"]], "How to Review Pull Requests": [[37, "how-to-review-pull-requests"]], "Continuous integration testing": [[37, "continuous-integration-testing"]], "Debugging on local deployment": [[38, "debugging-on-local-deployment"]], "Find the logs": [[38, "find-the-logs"], [38, "id1"]], "Debugging on Kubernetes deployment": [[38, "debugging-on-kubernetes-deployment"]], "Commands for Debugging": [[38, "commands-for-debugging"]], "Debugging Techniques": [[38, "debugging-techniques"]], "How to Submit Pull-requests": [[39, "how-to-submit-pull-requests"]], "How to Test": [[40, "how-to-test"], [81, "how-to-test"]], "Test GraphScope on local": [[40, "test-graphscope-on-local"]], "Run tests": [[40, "run-tests"], [40, "id1"]], "Test GraphScope on Kubernetes cluster": [[40, "test-graphscope-on-kubernetes-cluster"]], "Build images": [[40, "build-images"]], "Engine Configuration": [[41, "engine-configuration"]], "Customizing Your Service Configuration": [[41, "customizing-your-service-configuration"]], "Sample Configuration": [[41, "sample-configuration"]], "Available Configurations": [[41, "available-configurations"]], "Service configurations": [[41, "service-configurations"]], "Using Custom Graph": [[42, "using-custom-graph"]], "Step 1: Create a New Graph": [[42, "step-1-create-a-new-graph"]], "Step 2: Import Graph Data": [[42, "step-2-import-graph-data"]], "Step 3: Start the Service with the New Graph": [[42, "step-3-start-the-service-with-the-new-graph"]], "Data Import Configuration": [[43, "data-import-configuration"]], "Sample Configuration for the \u201cModern\u201d Graph": [[43, "sample-configuration-for-the-modern-graph"]], "Configuration Breakdown": [[43, "configuration-breakdown"]], "Loading Configurations": [[43, "loading-configurations"]], "Vertex Mappings": [[43, "vertex-mappings"]], "Edge Mappings": [[43, "edge-mappings"]], "Data Model": [[44, "data-model"]], "Graph Data": [[44, "graph-data"]], "Entity Data": [[44, "entity-data"]], "Primitive Types": [[44, "primitive-types"]], "Array Types": [[44, "array-types"]], "GraphScope Interactive Development guide": [[45, "graphscope-interactive-development-guide"]], "Create c++ Stored Procedures on GraphScope Interactive": [[46, "create-c-stored-procedures-on-graphscope-interactive"]], "Turning Cypher Queries into Stored Procedures with GraphScope Interactive": [[47, "turning-cypher-queries-into-stored-procedures-with-graphscope-interactive"]], "Crafting a Cypher Stored Procedure": [[47, "crafting-a-cypher-stored-procedure"]], "Compiling and Enabling the Stored Procedure": [[47, "compiling-and-enabling-the-stored-procedure"]], "Invoking the Cypher Stored Procedure": [[47, "invoking-the-cypher-stored-procedure"]], "Preparation": [[48, "preparation"]], "Manage Interactive Service": [[48, "manage-interactive-service"]], "Initialize the Service": [[48, "initialize-the-service"]], "Start the Service": [[48, "start-the-service"]], "Stop the Service": [[48, "stop-the-service"]], "Restart the Service": [[48, "restart-the-service"]], "Check Service Status": [[48, "check-service-status"]], "Destory the Service": [[48, "destory-the-service"]], "Running Queries": [[48, "running-queries"]], "Connect to the Service": [[48, "connect-to-the-service"]], "Submit Queries": [[48, "submit-queries"]], "Glossary": [[49, "glossary"], [91, "glossary"]], "Stored Procedure.": [[49, "stored-procedure"]], "Cypher.": [[49, "cypher"]], "Compile.": [[49, "compile"]], "Install Interactive": [[50, "install-interactive"]], "A Solid Foundation": [[51, "a-solid-foundation"]], "Key Features": [[51, "key-features"], [79, "key-features"]], "Property Graph Model and Graph Queries": [[51, "property-graph-model-and-graph-queries"]], "The Cypher Query Language": [[51, "the-cypher-query-language"]], "Limitations": [[51, "limitations"], [74, "limitations"]], "Stored Procedures": [[52, "stored-procedures"]], "Compiling a Stored Procedure": [[52, "compiling-a-stored-procedure"]], "Enabling Stored Procedures": [[52, "enabling-stored-procedures"]], "Disabling Stored Procedures": [[52, "disabling-stored-procedures"]], "Viewing Enabled Stored Procedures": [[52, "viewing-enabled-stored-procedures"]], "Querying Stored Procedures": [[52, "querying-stored-procedures"]], "The Administrative tool": [[53, "the-administrative-tool"]], "Detailed Usage": [[53, "detailed-usage"]], "Root Commands": [[53, "root-commands"]], "Service Commands": [[53, "service-commands"]], "Database Commands": [[53, "database-commands"]], "Procedure Commands": [[53, "procedure-commands"]], "Cypher Shell": [[54, "cypher-shell"]], "Downloading": [[54, "downloading"]], "Usage": [[54, "usage"]], "Limitation": [[54, "limitation"]], "GraphScope Interactive": [[55, "graphscope-interactive"]], "Introduction to ArrowFragment": [[56, "introduction-to-arrowfragment"]], "0. \u672f\u8bed": [[56, "id1"]], "1. \u8f7d\u56fe": [[56, "id2"]], "1.1 \u521d\u59cb\u5316partitoner": [[56, "partitoner"]], "1.2 \u6784\u5efa\u539f\u59cbarrow table": [[56, "arrow-table"]], "1.3. Shuffle vtable": [[56, "shuffle-vtable"]], "1.4. \u6784\u5efaVertex map(BasicArrowVertexMapBuilder)": [[56, "vertex-map-basicarrowvertexmapbuilder"]], "1.5. \u6784\u5efaFragment\u51c6\u5907": [[56, "fragment"]], "1.5.1. \u5904\u7406edge table(BasicEVFragmentLoader)": [[56, "edge-table-basicevfragmentloader"]], "1.5.2 FragmentBuilder\u6570\u636e\u521d\u59cb\u5316 (BasicArrowFragmentBuilder)": [[56, "fragmentbuilder-basicarrowfragmentbuilder"]], "1.6 Fragment\u6784\u5efa": [[56, "id3"]], "2. \u8bbf\u95eeFragment": [[56, "id4"]], "2.1 \u8bbf\u95ee\u9876\u70b9": [[56, "id5"]], "2.1.1 \u8bbf\u95ee\u5185\u90e8\u70b9": [[56, "id6"]], "2.1.2 \u8303\u56f4\u5916\u90e8\u70b9": [[56, "id7"]], "2.1.3 \u8bbf\u95ee\u5168\u90e8\u70b9": [[56, "id8"]], "2.1.4 \u8bbf\u95ee\u9876\u70b9\u6570\u636e": [[56, "id9"]], "2.2 \u8bbf\u95ee\u8fb9": [[56, "id10"]], "2.2.1 \u8bbf\u95ee\u51fa\u8fb9": [[56, "id11"]], "2.2.2 \u8bbf\u95ee\u5165\u8fb9": [[56, "id12"]], "2.2.3 \u8bbf\u95ee\u8fb9\u4e0a\u7684\u6570\u636e": [[56, "id13"]], "Frequently Asked Questions": [[57, "frequently-asked-questions"]], "Getting Started for GLE": [[58, "getting-started-for-gle"]], "Graph Workloads": [[59, "graph-workloads"]], "Graph Analytics": [[59, "graph-analytics"]], "Graph Interactive Query": [[59, "graph-interactive-query"]], "Graph Learning": [[59, "graph-learning"], [173, "graph-learning"]], "GraphScope for Data Scientists": [[60, "graphscope-for-data-scientists"]], "Challenges of Handling Graph Computation": [[60, "challenges-of-handling-graph-computation"]], "Solutions of GraphScope": [[60, "solutions-of-graphscope"]], "Program as Single Machine and Run as Distributed": [[60, "program-as-single-machine-and-run-as-distributed"]], "Integration with PyData Ecosystem": [[60, "integration-with-pydata-ecosystem"]], "How to Report Bugs": [[61, "how-to-report-bugs"]], "GraphScope: A One-Stop Large-Scale Graph Computing System from Alibaba": [[62, "graphscope-a-one-stop-large-scale-graph-computing-system-from-alibaba"]], "Installation & Deployment": [[62, null]], "GraphScope Flex": [[62, null]], "Graph Analytical Engine": [[62, null], [97, "graph-analytical-engine"]], "Graph Interactive Engine": [[62, null], [97, "graph-interactive-engine"]], "Graph Learning Engine": [[62, null]], "Storage Engine": [[62, null]], "Troubleshooting & Utilities": [[62, null]], "Development": [[62, null]], "Reference": [[62, null], [321, "reference"]], "Indices and tables": [[62, "indices-and-tables"]], "Standalone Deployment for GIE": [[63, "standalone-deployment-for-gie"]], "Deploy Your First GIE Service": [[63, "deploy-your-first-gie-service"]], "Remove the GIE Service": [[63, "remove-the-gie-service"]], "Using Your Own Data": [[63, "using-your-own-data"]], "Deploy on a Cluster": [[63, "deploy-on-a-cluster"]], "Other Useful Configurations": [[63, "other-useful-configurations"]], "Design of GIE": [[64, "design-of-gie"]], "The Motivations": [[64, "the-motivations"]], "The Architecture": [[64, "the-architecture"]], "Query Processing": [[64, "query-processing"]], "Build GIE with Vineyard Store on Local": [[65, "build-gie-with-vineyard-store-on-local"]], "Test GIE with Vineyard Store on Local": [[65, "test-gie-with-vineyard-store-on-local"]], "Manually Start the GIE Services": [[65, "manually-start-the-gie-services"]], "Running GraphScope Interactive Engine on Local": [[66, "running-graphscope-interactive-engine-on-local"]], "Customize Configurations for GIE instance": [[66, "customize-configurations-for-gie-instance"]], "GIE for Cypher": [[67, "gie-for-cypher"]], "Connecting via Python Driver": [[67, "connecting-via-python-driver"]], "Connecting via Cypher-Shell": [[67, "connecting-via-cypher-shell"]], "Using LLM as an Assistant in GIE": [[68, "using-llm-as-an-assistant-in-gie"]], "0. Environment": [[68, "environment"]], "1. Download Datasets": [[68, "download-datasets"]], "2. Load the Graph": [[68, "load-the-graph"]], "3. Set Endpoint and API Key": [[68, "set-endpoint-and-api-key"]], "4. Generate Graph Query Sentence from Questions": [[68, "generate-graph-query-sentence-from-questions"]], "5. Execute Generated Query Sentence with GIE": [[68, "execute-generated-query-sentence-with-gie"]], "Cypher Support": [[69, "cypher-support"]], "Data Types": [[69, "data-types"]], "Property Types": [[69, "property-types"]], "Structural types": [[69, "structural-types"]], "Constructed Types": [[69, "constructed-types"]], "Operators": [[69, "operators"]], "Clause": [[69, "clause"]], "Neo4j Ecosystem": [[70, "neo4j-ecosystem"]], "GIE For Tinkerpop Ecosystem": [[70, null], [77, null]], "A Generic Graph Optimizer for GIE": [[71, "a-generic-graph-optimizer-for-gie"]], "Rule-based Optimizer (RBO)": [[71, "rule-based-optimizer-rbo"]], "FilterMatchRule": [[71, "filtermatchrule"]], "DegreeFusionRule": [[71, "degreefusionrule"]], "NotMatchToAntiJoinRule": [[71, "notmatchtoantijoinrule"]], "FieldTrimRule": [[71, "fieldtrimrule"]], "Cost-based Optimizer (CBO)": [[71, "cost-based-optimizer-cbo"]], "FAQs for GIE Gremlin Usage": [[72, "faqs-for-gie-gremlin-usage"]], "Compatibility with TinkerPop": [[72, "compatibility-with-tinkerpop"]], "Property Graph Constraints": [[72, "property-graph-constraints"]], "What\u2019s the difference between Inner ID and Property ID ?": [[72, "whats-the-difference-between-inner-id-and-property-id"]], "How to use path expand in GIE Gremlin ?": [[72, "how-to-use-path-expand-in-gie-gremlin"]], "How to filter data in GIE Gremlin like SQL ?": [[72, "how-to-filter-data-in-gie-gremlin-like-sql"]], "How to aggregate data in GIE Gremlin like SQL?": [[72, "how-to-aggregate-data-in-gie-gremlin-like-sql"]], "group by multiple keys": [[72, "group-by-multiple-keys"]], "group by multiple values:": [[72, "group-by-multiple-values"]], "How to optimize Gremlin queries for performance in GIE?": [[72, "how-to-optimize-gremlin-queries-for-performance-in-gie"]], "Use appropriate indexing": [[72, "use-appropriate-indexing"]], "How to use subgraph in GIE Gremlin ?": [[72, "how-to-use-subgraph-in-gie-gremlin"]], "Supported Gremlin Steps": [[74, "supported-gremlin-steps"]], "Introduction": [[74, "introduction"]], "Standard Steps": [[74, "standard-steps"]], "Source": [[74, "source"]], "V()": [[74, "v"]], "E()": [[74, "e"]], "Expand": [[74, "expand"]], "outE()": [[74, "oute"]], "inE()": [[74, "ine"]], "bothE()": [[74, "bothe"]], "out()": [[74, "out"], [74, "id7"]], "in()": [[74, "in"], [74, "id8"]], "both()": [[74, "both"], [74, "id9"]], "outV()": [[74, "outv"]], "inV()": [[74, "inv"]], "otherV()": [[74, "otherv"]], "bothV()": [[74, "bothv"]], "Filter": [[74, "filter"]], "hasId()": [[74, "hasid"], [76, "hasid"]], "hasLabel()": [[74, "haslabel"]], "has()": [[74, "has"]], "hasNot()": [[74, "hasnot"]], "is()": [[74, "is"]], "where(traversal)": [[74, "where-traversal"]], "where(predicate)": [[74, "where-predicate"]], "not(traversal)": [[74, "not-traversal"]], "dedup()": [[74, "dedup"], [76, "dedup"]], "Project": [[74, "project"]], "id()": [[74, "id"]], "label()": [[74, "label"]], "constant()": [[74, "constant"], [76, "constant"]], "valueMap()": [[74, "valuemap"], [76, "valuemap"]], "values()": [[74, "values"]], "elementMap()": [[74, "elementmap"]], "select()": [[74, "select"], [76, "select"]], "Aggregate": [[74, "aggregate"]], "count()": [[74, "count"]], "fold()": [[74, "fold"], [76, "fold"]], "sum()": [[74, "sum"]], "min()": [[74, "min"]], "max()": [[74, "max"]], "mean()": [[74, "mean"]], "group()": [[74, "group"], [76, "group"]], "groupCount()": [[74, "groupcount"], [76, "groupcount"]], "<h3 id=\"gremlin-order\">Order</h3>": [[74, "order"]], "order()": [[74, "id1"]], "Statistics": [[74, "statistics"]], "limit()": [[74, "limit"]], "coin()": [[74, "coin"]], "sample()": [[74, "sample"]], "Union": [[74, "union"]], "union()": [[74, "id2"]], "Match": [[74, "match"]], "match()": [[74, "id3"]], "Subgraph": [[74, "subgraph"]], "subgraph()": [[74, "id4"]], "Identity": [[74, "identity"]], "identity()": [[74, "id5"]], "Unfold": [[74, "unfold"]], "unfold()": [[74, "id6"], [74, "id10"]], "Syntactic Sugars": [[74, "syntactic-sugars"]], "PathExpand": [[74, "pathexpand"]], "endV()": [[74, "endv"]], "Expression": [[74, "expression"]], "Aggregate (Group)": [[74, "aggregate-group"]], "To be Supported": [[74, "to-be-supported"]], "path()": [[74, "path"]], "local()": [[74, "local"]], "Will Not be Supported": [[74, "will-not-be-supported"]], "repeat()": [[74, "repeat"]], "properties()": [[74, "properties"]], "sideEffect": [[74, "sideeffect"]], "branch": [[74, "branch"]], "GIE for Gremlin": [[75, "gie-for-gremlin"]], "Connecting via Python SDK": [[75, "connecting-via-python-sdk"]], "Connecting via Java SDK": [[75, "connecting-via-java-sdk"]], "Connecting via Gremlin-Console": [[75, "connecting-via-gremlin-console"]], "Tutorial: LDBC Gremlin": [[76, "tutorial-ldbc-gremlin"]], "Load the LDBC Graph": [[76, "load-the-ldbc-graph"]], "Basic Vertex/Edge Query": [[76, "basic-vertex-edge-query"]], "Retrieve Vertices and Edges": [[76, "retrieve-vertices-and-edges"]], "Apply Some Filters": [[76, "apply-some-filters"]], "Extract Property Values": [[76, "extract-property-values"]], "Real Applications": [[76, "real-applications"], [76, "id1"]], "Basic Traversal Query": [[76, "basic-traversal-query"]], "Expansion": [[76, "expansion"]], "out(), in() and both()": [[76, "out-in-and-both"]], "outE(), inE() and bothE()": [[76, "oute-ine-and-bothe"]], "outV(), inV(), bothV() and otherV()": [[76, "outv-inv-bothv-and-otherv"]], "Multiple Expansion Steps": [[76, "multiple-expansion-steps"]], "Expansion from many starting points": [[76, "expansion-from-many-starting-points"]], "Filter & Expansion": [[76, "filter-expansion"]], "Apply filters after expansion": [[76, "apply-filters-after-expansion"]], "Expansion as filters": [[76, "expansion-as-filters"]], "Path Expansion (Syntactic Sugar)": [[76, "path-expansion-syntactic-sugar"]], "Pattern Match": [[76, "pattern-match"]], "Relational Operations": [[76, "relational-operations"]], "Filter Steps": [[76, "filter-steps"]], "where()": [[76, "where"]], "Project Steps": [[76, "project-steps"]], "id() and label()": [[76, "id-and-label"]], "Aggregate Steps": [[76, "aggregate-steps"]], "sum(), min(), max() and  mean()": [[76, "sum-min-max-and-mean"]], "Order Step": [[76, "order-step"]], "Limit Step": [[76, "limit-step"]], "Expression(Syntax Sugar)": [[76, "expression-syntax-sugar"]], "Complex Queries": [[76, "complex-queries"]], "LDBC BI2": [[76, "ldbc-bi2"]], "LDBC BI3": [[76, "ldbc-bi3"]], "LDBC BI4(Left Part)": [[76, "ldbc-bi4-left-part"]], "LDBC BI11": [[76, "ldbc-bi11"]], "LDBC BI14": [[76, "ldbc-bi14"]], "Apache TinkerPop Ecosystem": [[77, "apache-tinkerpop-ecosystem"]], "Tutorials for Java Users": [[78, "tutorials-for-java-users"]], "Ease-of-use: Python Interface": [[79, "ease-of-use-python-interface"]], "Graph Traversal Support, in Gremlin and Cypher": [[79, "graph-traversal-support-in-gremlin-and-cypher"]], "High Performant Built-in Algorithms": [[79, "high-performant-built-in-algorithms"]], "Extensible Algorithm Library for Graph Analytics": [[79, "extensible-algorithm-library-for-graph-analytics"]], "GNN Training & Inference": [[79, "gnn-training-inference"]], "Cloud Native Design": [[79, "cloud-native-design"]], "Across-Engine Workflow Orchestration": [[79, "across-engine-workflow-orchestration"]], "Design of GLE": [[80, "design-of-gle"]], "Model Paradigms": [[80, "model-paradigms"]], "EgoGraph-based node-centric aggregation": [[80, "egograph-based-node-centric-aggregation"]], "SubGraph-based graph message passing": [[80, "subgraph-based-graph-message-passing"]], "Pipeline for Learning": [[80, "pipeline-for-learning"]], "Dev on docker container": [[81, "dev-on-docker-container"]], "Build Learning Engine": [[81, "build-learning-engine"]], "Running GraphScope Learning Engine on Local": [[82, "running-graphscope-learning-engine-on-local"]], "Graph Sampling": [[83, "graph-sampling"], [161, "graph-sampling"]], "Graph Traversal": [[83, "graph-traversal"], [93, "graph-traversal"], [162, "graph-traversal"]], "Neighborhood Sampling": [[83, "neighborhood-sampling"]], "Subgraph Sampling": [[83, "subgraph-sampling"], [94, "subgraph-sampling"]], "Negative Sampling": [[83, "negative-sampling"], [166, "negative-sampling"]], "GSL": [[83, "gsl"]], "Tutorial: Training a Node Classification Model on K8s Cluster": [[85, "tutorial-training-a-node-classification-model-on-k8s-cluster"]], "Create a session on kubernetes and load graph": [[85, "create-a-session-on-kubernetes-and-load-graph"]], "Graph neural networks (GNNs)": [[85, "graph-neural-networks-gnns"]], "Tutorial: Training a Node Classification Model on Your Local Machine": [[86, "tutorial-training-a-node-classification-model-on-your-local-machine"]], "Load Graph": [[86, "load-graph"], [87, "load-graph"]], "Define the Training Process for the EgoGraphSAGE Model": [[86, "define-the-training-process-for-the-egographsage-model"]], "Launch the Learning Engine": [[86, "launch-the-learning-engine"], [87, "launch-the-learning-engine"]], "Train the Model": [[86, "train-the-model"]], "Tutorial: Training a Node Classification Model (PyG) on Your Local Machine": [[87, "tutorial-training-a-node-classification-model-pyg-on-your-local-machine"]], "Define the evaluation function": [[87, "define-the-evaluation-function"]], "Create neighbor loaderfor training, testing and validation": [[87, "create-neighbor-loaderfor-training-testing-and-validation"]], "Define the PyG GraphSage Model and optimizer": [[87, "define-the-pyg-graphsage-model-and-optimizer"]], "Train and test": [[87, "train-and-test"]], "Loading Graphs": [[88, "loading-graphs"]], "Load Built-in Datasets": [[88, "load-built-in-datasets"]], "Loading Your Own Datasets": [[88, "loading-your-own-datasets"]], "Adding Vertices": [[88, "adding-vertices"]], "Advanced Usages": [[88, "advanced-usages"]], "Deduce vertex labels when not ambiguous": [[88, "deduce-vertex-labels-when-not-ambiguous"]], "Deduce vertex from edges": [[88, "deduce-vertex-from-edges"]], "Multiple relations": [[88, "multiple-relations"]], "Specify data types of properties manually": [[88, "specify-data-types-of-properties-manually"]], "Other parameters of graph": [[88, "other-parameters-of-graph"]], "Putting them Together": [[88, "putting-them-together"]], "Loading From Pandas or Numpy": [[88, "loading-from-pandas-or-numpy"]], "From Pandas": [[88, "from-pandas"]], "From Numpy": [[88, "from-numpy"]], "Loader Variants": [[88, "loader-variants"]], "Techniques targeting at large graph": [[88, "techniques-targeting-at-large-graph"]], "Tips for reduce memory consumption of graphs": [[88, "tips-for-reduce-memory-consumption-of-graphs"]], "Design of GraphScope": [[89, "design-of-graphscope"]], "Unified Graph Computing Platform": [[89, "unified-graph-computing-platform"]], "Application layer": [[89, "application-layer"]], "Execution engine layer": [[89, "execution-engine-layer"]], "Storage layer": [[89, "storage-layer"]], "Disaggregated Design for Diverse Graph Applications": [[89, "disaggregated-design-for-diverse-graph-applications"]], "GraphScope for BI analysis": [[89, "graphscope-for-bi-analysis"]], "GraphScope for high QPS queries": [[89, "graphscope-for-high-qps-queries"]], "GraphScope for graph analytics": [[89, "graphscope-for-graph-analytics"]], "GraphScope for learning": [[89, "graphscope-for-learning"]], "One-stop Graph Processing": [[90, "one-stop-graph-processing"]], "Graph Analytical Task Quick Start": [[90, "graph-analytical-task-quick-start"]], "Graph Interactive Query Quick Start": [[90, "graph-interactive-query-quick-start"]], "Graph Learning Quick Start": [[90, "graph-learning-quick-start"]], "FLASH": [[91, "flash"]], "GRAPE": [[91, "grape"]], "GAE": [[91, "gae"]], "GART": [[91, "gart"]], "GRIN": [[91, "grin"]], "GraphAr": [[91, "graphar"]], "Groot": [[91, "groot"]], "GUM": [[91, "gum"]], "MaxGraph (deprecated)": [[91, "maxgraph-deprecated"]], "Vineyard, or v6d": [[91, "vineyard-or-v6d"]], "GIE": [[91, "gie"]], "GAIA": [[91, "gaia"]], "Pegasus": [[91, "pegasus"]], "Ingress": [[91, "ingress"]], "PIE-model": [[91, "pie-model"]], "Graph Analytics Workloads": [[92, "graph-analytics-workloads"]], "What is Graph Analytics": [[92, "what-is-graph-analytics"]], "Challenges of Graph Analytics on Large Graphs": [[92, "challenges-of-graph-analytics-on-large-graphs"]], "What can GraphScope Do": [[92, "what-can-graphscope-do"], [94, "what-can-graphscope-do"]], "Graph Interactive Workloads": [[93, "graph-interactive-workloads"]], "Tinkerpop and Gremlin": [[93, "tinkerpop-and-gremlin"]], "Pattern Matching": [[93, "pattern-matching"], [93, "id1"]], "Neo4j and Cypher": [[93, "neo4j-and-cypher"]], "Graph Learning Workloads": [[94, "graph-learning-workloads"]], "What is Graph Neural Network": [[94, "what-is-graph-neural-network"]], "Typical GNN Models": [[94, "typical-gnn-models"]], "Paradigm of Model Training": [[94, "paradigm-of-model-training"]], "Steps of Model Training": [[94, "steps-of-model-training"]], "Challenges of Applying GNNs on Large Graphs": [[94, "challenges-of-applying-gnns-on-large-graphs"]], "Introducing GraphScope": [[95, "introducing-graphscope"]], "What is GraphScope": [[95, "what-is-graphscope"]], "Why use GraphScope": [[95, "why-use-graphscope"]], "What are the Use Cases": [[95, "what-are-the-use-cases"]], "What are the Limitations": [[95, "what-are-the-limitations"]], "What are the Next": [[95, "what-are-the-next"]], "Positioning of GraphScope": [[96, "positioning-of-graphscope"]], "Compare with Graph Processing Systems": [[96, "compare-with-graph-processing-systems"]], "Compare with Graph Databases": [[96, "compare-with-graph-databases"]], "Compare with Graph Learning Systems": [[96, "compare-with-graph-learning-systems"]], "Handling Various Types of Graph Workloads": [[96, "handling-various-types-of-graph-workloads"]], "Performance and Benchmark": [[97, "performance-and-benchmark"]], "Results": [[97, "results"]], "Performance on GPUs": [[97, "performance-on-gpus"]], "Reproducing the results": [[97, "reproducing-the-results"]], "Tutorials for Python Users": [[98, "tutorials-for-python-users"]], "Analytical Engine API Reference": [[99, "analytical-engine-api-reference"]], "Analytical Engine": [[99, "analytical-engine"]], "Fragments in GraphScope": [[99, "fragments-in-graphscope"]], "Analytical Apps": [[99, "analytical-apps"]], "Analytical Workers": [[99, "analytical-workers"]], "App\u2019s Context": [[99, "app-s-context"]], "Analytical App": [[100, "analytical-app"]], "AppAssets": [[100, "appassets"]], "JavaApp": [[100, "javaapp"]], "App object": [[100, "app-object"]], "Functions": [[100, "functions"], [102, "functions"], [175, "functions"]], "BuiltIn apps": [[100, "builtin-apps"]], "Context": [[101, "context"]], "Context object": [[101, "context-object"]], "Cython SDK API": [[102, "cython-sdk-api"]], "Pregel": [[102, "pregel"]], "PIE": [[102, "pie"]], "GraphScope types": [[102, "graphscope-types"]], "Flex API Reference": [[103, "flex-api-reference"]], "About Grape JDK": [[104, "about-grape-jdk"]], "Project Structure": [[104, "project-structure"]], "Building from source": [[104, "building-from-source"]], "Java Reference (javadoc)": [[105, "java-reference-javadoc"]], "graphscope.Vertex": [[106, "graphscope-vertex"]], "graphscope.declare": [[107, "graphscope-declare"]], "graphscope.framework.app.load_app": [[108, "graphscope-framework-app-load-app"]], "graphscope.framework.dag_utils.add_column": [[109, "graphscope-framework-dag-utils-add-column"]], "graphscope.framework.dag_utils.add_labels_to_graph": [[110, "graphscope-framework-dag-utils-add-labels-to-graph"]], "graphscope.framework.dag_utils.arrow_to_dynamic": [[111, "graphscope-framework-dag-utils-arrow-to-dynamic"]], "graphscope.framework.dag_utils.bind_app": [[112, "graphscope-framework-dag-utils-bind-app"]], "graphscope.framework.dag_utils.clear_edges": [[113, "graphscope-framework-dag-utils-clear-edges"]], "graphscope.framework.dag_utils.clear_graph": [[114, "graphscope-framework-dag-utils-clear-graph"]], "graphscope.framework.dag_utils.context_to_dataframe": [[115, "graphscope-framework-dag-utils-context-to-dataframe"]], "graphscope.framework.dag_utils.context_to_numpy": [[116, "graphscope-framework-dag-utils-context-to-numpy"]], "graphscope.framework.dag_utils.copy_graph": [[117, "graphscope-framework-dag-utils-copy-graph"]], "graphscope.framework.dag_utils.create_app": [[118, "graphscope-framework-dag-utils-create-app"]], "graphscope.framework.dag_utils.create_graph": [[119, "graphscope-framework-dag-utils-create-graph"]], "graphscope.framework.dag_utils.create_graph_view": [[120, "graphscope-framework-dag-utils-create-graph-view"]], "graphscope.framework.dag_utils.create_loader": [[121, "graphscope-framework-dag-utils-create-loader"]], "graphscope.framework.dag_utils.create_subgraph": [[122, "graphscope-framework-dag-utils-create-subgraph"]], "graphscope.framework.dag_utils.create_unload_op": [[123, "graphscope-framework-dag-utils-create-unload-op"]], "graphscope.framework.dag_utils.dynamic_to_arrow": [[124, "graphscope-framework-dag-utils-dynamic-to-arrow"]], "graphscope.framework.dag_utils.get_context_data": [[125, "graphscope-framework-dag-utils-get-context-data"]], "graphscope.framework.dag_utils.graph_to_dataframe": [[126, "graphscope-framework-dag-utils-graph-to-dataframe"]], "graphscope.framework.dag_utils.graph_to_numpy": [[127, "graphscope-framework-dag-utils-graph-to-numpy"]], "graphscope.framework.dag_utils.gremlin_to_subgraph": [[128, "graphscope-framework-dag-utils-gremlin-to-subgraph"]], "graphscope.framework.dag_utils.modify_edges": [[129, "graphscope-framework-dag-utils-modify-edges"]], "graphscope.framework.dag_utils.modify_vertices": [[130, "graphscope-framework-dag-utils-modify-vertices"]], "graphscope.framework.dag_utils.output": [[131, "graphscope-framework-dag-utils-output"]], "graphscope.framework.dag_utils.project_arrow_property_graph": [[132, "graphscope-framework-dag-utils-project-arrow-property-graph"]], "graphscope.framework.dag_utils.project_to_simple": [[133, "graphscope-framework-dag-utils-project-to-simple"]], "graphscope.framework.dag_utils.report_graph": [[134, "graphscope-framework-dag-utils-report-graph"]], "graphscope.framework.dag_utils.run_app": [[135, "graphscope-framework-dag-utils-run-app"]], "graphscope.framework.dag_utils.to_data_sink": [[136, "graphscope-framework-dag-utils-to-data-sink"]], "graphscope.framework.dag_utils.to_directed": [[137, "graphscope-framework-dag-utils-to-directed"]], "graphscope.framework.dag_utils.to_undirected": [[138, "graphscope-framework-dag-utils-to-undirected"]], "graphscope.framework.dag_utils.to_vineyard_dataframe": [[139, "graphscope-framework-dag-utils-to-vineyard-dataframe"]], "graphscope.framework.dag_utils.to_vineyard_tensor": [[140, "graphscope-framework-dag-utils-to-vineyard-tensor"]], "graphscope.framework.dag_utils.unload_app": [[141, "graphscope-framework-dag-utils-unload-app"]], "graphscope.framework.dag_utils.unload_context": [[142, "graphscope-framework-dag-utils-unload-context"]], "graphscope.framework.dag_utils.unload_graph": [[143, "graphscope-framework-dag-utils-unload-graph"]], "graphscope.framework.operation.Operation.__init__": [[144, "graphscope-framework-operation-operation-init"]], "graphscope.framework.operation.Operation.as_op_def": [[145, "graphscope-framework-operation-operation-as-op-def"]], "graphscope.framework.operation.Operation.eval": [[146, "graphscope-framework-operation-operation-eval"]], "graphscope.framework.operation.Operation.evaluated": [[147, "graphscope-framework-operation-operation-evaluated"]], "graphscope.framework.operation.Operation.key": [[148, "graphscope-framework-operation-operation-key"]], "graphscope.framework.operation.Operation.signature": [[149, "graphscope-framework-operation-operation-signature"]], "graphscope.g": [[150, "graphscope-g"]], "graphscope.get_default_session": [[151, "graphscope-get-default-session"]], "graphscope.graphlearn": [[152, "graphscope-graphlearn"]], "graphscope.gremlin": [[153, "graphscope-gremlin"]], "graphscope.has_default_session": [[154, "graphscope-has-default-session"]], "graphscope.session": [[155, "graphscope-session"]], "graphscope.set_option": [[156, "graphscope-set-option"]], "Developing Your Own Model": [[157, "developing-your-own-model"]], "How to Build a Graph Learning Algorithm": [[157, "how-to-build-a-graph-learning-algorithm"]], "Sampling": [[157, "sampling"]], "Encoder": [[157, "encoder"], [165, "encoder"]], "Loss Function and Training Process": [[157, "loss-function-and-training-process"]], "Data Source": [[158, "data-source"]], "1 Data format": [[158, "data-format"]], "1.1 Basic format": [[158, "basic-format"]], "1.2 Attribute format\uff08ATTRIBUTED\uff09": [[158, "attribute-format-attributed"]], "1.3 Weight format\uff08WEIGHTED\uff09": [[158, "weight-format-weighted"]], "1.4 Label format\uff08LABELED\uff09": [[158, "label-format-labeled"]], "1.5 Putting together": [[158, "putting-together"]], "2 Data source type": [[158, "data-source-type"]], "2.2 Alibaba Cloud MaxCompute data table": [[158, "alibaba-cloud-maxcompute-data-table"]], "3 User API": [[158, "user-api"]], "Graph Object": [[159, "graph-object"]], "2 Describe the Topology": [[159, "describe-the-topology"]], "3.1 Stand-alone Mode": [[159, "stand-alone-mode"]], "3.2 Distributed Mode \u2013 Client/Server Mode": [[159, "distributed-mode-client-server-mode"]], "Graph Query": [[160, "graph-query"]], "1 Introduction": [[161, "introduction"]], "Graph Sampling Language\uff08GSL)": [[163, "graph-sampling-language-gsl"]], "Install from pip": [[164, "install-from-pip"]], "Get wheel package": [[164, "get-wheel-package"]], "Install using pip": [[164, "install-using-pip"]], "Install TensorFlow": [[164, "install-tensorflow"]], "Build from source": [[164, "build-from-source"]], "Install git": [[164, "install-git"]], "Install dependent libraries": [[164, "install-dependent-libraries"]], "Compile": [[164, "compile"], [167, "compile"]], "Install": [[164, "install"]], "Run test": [[164, "run-test"]], "Docker image": [[164, "docker-image"]], "Graph Learning Model": [[165, "graph-learning-model"]], "Data model": [[165, "data-model"]], "Defining Your Own Operator": [[167, "defining-your-own-operator"]], "Programming Interface": [[167, "programming-interface"]], "Distributed Runtime Design": [[167, "distributed-runtime-design"]], "Implement a New Operator": [[167, "implement-a-new-operator"]], "Clone source code": [[167, "clone-source-code"]], "Implement your operator class": [[167, "implement-your-operator-class"]], "Register Operator": [[167, "register-operator"]], "How to Use an Operator": [[167, "how-to-use-an-operator"]], "Integrating Other Data Sources": [[168, "integrating-other-data-sources"]], "File System Interface": [[168, "file-system-interface"]], "ByteStreamAccessFile": [[168, "bytestreamaccessfile"]], "StructuredAccessFile": [[168, "structuredaccessfile"]], "WritableFile": [[168, "writablefile"]], "Register with Scheme": [[168, "register-with-scheme"]], "Quick Start": [[169, "quick-start"]], "1 Trying out the built-in models": [[169, "trying-out-the-built-in-models"]], "2 How to use the GL APIs": [[169, "how-to-use-the-gl-apis"]], "3 Developing a GNN model": [[169, "developing-a-gnn-model"]], "3.1 Data Preparation": [[169, "data-preparation"]], "3.2 Graph Construction": [[169, "graph-construction"]], "3.3 Graph Sampling": [[169, "graph-sampling"]], "3.4 GNN Model": [[169, "gnn-model"]], "System configuration": [[170, "system-configuration"]], "Graph": [[171, "graph"], [175, "graph"], [309, "graph"]], "Graph object": [[171, "graph-object"]], "Loader object": [[171, "loader-object"]], "Graph Functions": [[171, "graph-functions"]], "Interactive Query": [[172, "interactive-query"]], "Builtin algorithms": [[174, "builtin-algorithms"]], "Nodes": [[175, "nodes"]], "Edges": [[175, "edges"]], "Self loops": [[175, "self-loops"]], "Attributes": [[175, "attributes"]], "Freezing graph structure": [[175, "freezing-graph-structure"]], "graphscope.nx.classes.function.add_cycle": [[176, "graphscope-nx-classes-function-add-cycle"]], "graphscope.nx.classes.function.add_path": [[177, "graphscope-nx-classes-function-add-path"]], "graphscope.nx.classes.function.add_star": [[178, "graphscope-nx-classes-function-add-star"]], "graphscope.nx.classes.function.all_neighbors": [[179, "graphscope-nx-classes-function-all-neighbors"]], "graphscope.nx.classes.function.common_neighbors": [[180, "graphscope-nx-classes-function-common-neighbors"]], "graphscope.nx.classes.function.create_empty_copy": [[181, "graphscope-nx-classes-function-create-empty-copy"]], "graphscope.nx.classes.function.degree": [[182, "graphscope-nx-classes-function-degree"]], "graphscope.nx.classes.function.degree_histogram": [[183, "graphscope-nx-classes-function-degree-histogram"]], "graphscope.nx.classes.function.density": [[184, "graphscope-nx-classes-function-density"]], "graphscope.nx.classes.function.edge_subgraph": [[185, "graphscope-nx-classes-function-edge-subgraph"]], "graphscope.nx.classes.function.edges": [[186, "graphscope-nx-classes-function-edges"]], "graphscope.nx.classes.function.freeze": [[187, "graphscope-nx-classes-function-freeze"]], "graphscope.nx.classes.function.induced_subgraph": [[188, "graphscope-nx-classes-function-induced-subgraph"]], "graphscope.nx.classes.function.info": [[189, "graphscope-nx-classes-function-info"]], "graphscope.nx.classes.function.is_directed": [[190, "graphscope-nx-classes-function-is-directed"]], "graphscope.nx.classes.function.is_empty": [[191, "graphscope-nx-classes-function-is-empty"]], "graphscope.nx.classes.function.is_frozen": [[192, "graphscope-nx-classes-function-is-frozen"]], "graphscope.nx.classes.function.is_negatively_weighted": [[193, "graphscope-nx-classes-function-is-negatively-weighted"]], "graphscope.nx.classes.function.is_weighted": [[194, "graphscope-nx-classes-function-is-weighted"]], "graphscope.nx.classes.function.neighbors": [[195, "graphscope-nx-classes-function-neighbors"]], "graphscope.nx.classes.function.nodes": [[196, "graphscope-nx-classes-function-nodes"]], "graphscope.nx.classes.function.nodes_with_selfloops": [[197, "graphscope-nx-classes-function-nodes-with-selfloops"]], "graphscope.nx.classes.function.non_edges": [[198, "graphscope-nx-classes-function-non-edges"]], "graphscope.nx.classes.function.non_neighbors": [[199, "graphscope-nx-classes-function-non-neighbors"]], "graphscope.nx.classes.function.number_of_edges": [[200, "graphscope-nx-classes-function-number-of-edges"]], "graphscope.nx.classes.function.number_of_nodes": [[201, "graphscope-nx-classes-function-number-of-nodes"]], "graphscope.nx.classes.function.number_of_selfloops": [[202, "graphscope-nx-classes-function-number-of-selfloops"]], "graphscope.nx.classes.function.selfloop_edges": [[203, "graphscope-nx-classes-function-selfloop-edges"]], "graphscope.nx.classes.function.subgraph": [[204, "graphscope-nx-classes-function-subgraph"]], "graphscope.nx.classes.function.to_directed": [[205, "graphscope-nx-classes-function-to-directed"]], "graphscope.nx.classes.function.to_undirected": [[206, "graphscope-nx-classes-function-to-undirected"]], "graphscope.nx.generators.atlas.graph_atlas": [[207, "graphscope-nx-generators-atlas-graph-atlas"]], "graphscope.nx.generators.atlas.graph_atlas_g": [[208, "graphscope-nx-generators-atlas-graph-atlas-g"]], "graphscope.nx.generators.classic.balanced_tree": [[209, "graphscope-nx-generators-classic-balanced-tree"]], "graphscope.nx.generators.classic.barbell_graph": [[210, "graphscope-nx-generators-classic-barbell-graph"]], "graphscope.nx.generators.classic.binomial_tree": [[211, "graphscope-nx-generators-classic-binomial-tree"]], "graphscope.nx.generators.classic.circulant_graph": [[212, "graphscope-nx-generators-classic-circulant-graph"]], "graphscope.nx.generators.classic.circular_ladder_graph": [[213, "graphscope-nx-generators-classic-circular-ladder-graph"]], "graphscope.nx.generators.classic.complete_graph": [[214, "graphscope-nx-generators-classic-complete-graph"]], "graphscope.nx.generators.classic.complete_multipartite_graph": [[215, "graphscope-nx-generators-classic-complete-multipartite-graph"]], "graphscope.nx.generators.classic.cycle_graph": [[216, "graphscope-nx-generators-classic-cycle-graph"]], "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph": [[217, "graphscope-nx-generators-classic-dorogovtsev-goltsev-mendes-graph"]], "graphscope.nx.generators.classic.empty_graph": [[218, "graphscope-nx-generators-classic-empty-graph"]], "graphscope.nx.generators.classic.full_rary_tree": [[219, "graphscope-nx-generators-classic-full-rary-tree"]], "graphscope.nx.generators.classic.ladder_graph": [[220, "graphscope-nx-generators-classic-ladder-graph"]], "graphscope.nx.generators.classic.lollipop_graph": [[221, "graphscope-nx-generators-classic-lollipop-graph"]], "graphscope.nx.generators.classic.null_graph": [[222, "graphscope-nx-generators-classic-null-graph"]], "graphscope.nx.generators.classic.path_graph": [[223, "graphscope-nx-generators-classic-path-graph"]], "graphscope.nx.generators.classic.star_graph": [[224, "graphscope-nx-generators-classic-star-graph"]], "graphscope.nx.generators.classic.trivial_graph": [[225, "graphscope-nx-generators-classic-trivial-graph"]], "graphscope.nx.generators.classic.turan_graph": [[226, "graphscope-nx-generators-classic-turan-graph"]], "graphscope.nx.generators.classic.wheel_graph": [[227, "graphscope-nx-generators-classic-wheel-graph"]], "graphscope.nx.generators.community.LFR_benchmark_graph": [[228, "graphscope-nx-generators-community-lfr-benchmark-graph"]], "graphscope.nx.generators.community.caveman_graph": [[229, "graphscope-nx-generators-community-caveman-graph"]], "graphscope.nx.generators.community.connected_caveman_graph": [[230, "graphscope-nx-generators-community-connected-caveman-graph"]], "graphscope.nx.generators.community.gaussian_random_partition_graph": [[231, "graphscope-nx-generators-community-gaussian-random-partition-graph"]], "graphscope.nx.generators.community.planted_partition_graph": [[232, "graphscope-nx-generators-community-planted-partition-graph"]], "graphscope.nx.generators.community.random_partition_graph": [[233, "graphscope-nx-generators-community-random-partition-graph"]], "graphscope.nx.generators.community.relaxed_caveman_graph": [[234, "graphscope-nx-generators-community-relaxed-caveman-graph"]], "graphscope.nx.generators.community.ring_of_cliques": [[235, "graphscope-nx-generators-community-ring-of-cliques"]], "graphscope.nx.generators.community.stochastic_block_model": [[236, "graphscope-nx-generators-community-stochastic-block-model"]], "graphscope.nx.generators.community.windmill_graph": [[237, "graphscope-nx-generators-community-windmill-graph"]], "graphscope.nx.generators.degree_seq.configuration_model": [[238, "graphscope-nx-generators-degree-seq-configuration-model"]], "graphscope.nx.generators.degree_seq.degree_sequence_tree": [[239, "graphscope-nx-generators-degree-seq-degree-sequence-tree"]], "graphscope.nx.generators.degree_seq.directed_configuration_model": [[240, "graphscope-nx-generators-degree-seq-directed-configuration-model"]], "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph": [[241, "graphscope-nx-generators-degree-seq-directed-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.expected_degree_graph": [[242, "graphscope-nx-generators-degree-seq-expected-degree-graph"]], "graphscope.nx.generators.degree_seq.havel_hakimi_graph": [[243, "graphscope-nx-generators-degree-seq-havel-hakimi-graph"]], "graphscope.nx.generators.degree_seq.random_degree_sequence_graph": [[244, "graphscope-nx-generators-degree-seq-random-degree-sequence-graph"]], "graphscope.nx.generators.directed.gn_graph": [[245, "graphscope-nx-generators-directed-gn-graph"]], "graphscope.nx.generators.directed.gnc_graph": [[246, "graphscope-nx-generators-directed-gnc-graph"]], "graphscope.nx.generators.directed.gnr_graph": [[247, "graphscope-nx-generators-directed-gnr-graph"]], "graphscope.nx.generators.directed.random_k_out_graph": [[248, "graphscope-nx-generators-directed-random-k-out-graph"]], "graphscope.nx.generators.directed.scale_free_graph": [[249, "graphscope-nx-generators-directed-scale-free-graph"]], "graphscope.nx.generators.duplication.duplication_divergence_graph": [[250, "graphscope-nx-generators-duplication-duplication-divergence-graph"]], "graphscope.nx.generators.duplication.partial_duplication_graph": [[251, "graphscope-nx-generators-duplication-partial-duplication-graph"]], "graphscope.nx.generators.ego.ego_graph": [[252, "graphscope-nx-generators-ego-ego-graph"]], "graphscope.nx.generators.expanders.chordal_cycle_graph": [[253, "graphscope-nx-generators-expanders-chordal-cycle-graph"]], "graphscope.nx.generators.expanders.margulis_gabber_galil_graph": [[254, "graphscope-nx-generators-expanders-margulis-gabber-galil-graph"]], "graphscope.nx.generators.expanders.paley_graph": [[255, "graphscope-nx-generators-expanders-paley-graph"]], "graphscope.nx.generators.geometric.geographical_threshold_graph": [[256, "graphscope-nx-generators-geometric-geographical-threshold-graph"]], "graphscope.nx.generators.geometric.random_geometric_graph": [[257, "graphscope-nx-generators-geometric-random-geometric-graph"]], "graphscope.nx.generators.geometric.soft_random_geometric_graph": [[258, "graphscope-nx-generators-geometric-soft-random-geometric-graph"]], "graphscope.nx.generators.geometric.thresholded_random_geometric_graph": [[259, "graphscope-nx-generators-geometric-thresholded-random-geometric-graph"]], "graphscope.nx.generators.geometric.waxman_graph": [[260, "graphscope-nx-generators-geometric-waxman-graph"]], "graphscope.nx.generators.harary_graph.hkn_harary_graph": [[261, "graphscope-nx-generators-harary-graph-hkn-harary-graph"]], "graphscope.nx.generators.harary_graph.hnm_harary_graph": [[262, "graphscope-nx-generators-harary-graph-hnm-harary-graph"]], "graphscope.nx.generators.intersection.general_random_intersection_graph": [[263, "graphscope-nx-generators-intersection-general-random-intersection-graph"]], "graphscope.nx.generators.intersection.k_random_intersection_graph": [[264, "graphscope-nx-generators-intersection-k-random-intersection-graph"]], "graphscope.nx.generators.intersection.uniform_random_intersection_graph": [[265, "graphscope-nx-generators-intersection-uniform-random-intersection-graph"]], "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph": [[266, "graphscope-nx-generators-joint-degree-seq-directed-joint-degree-graph"]], "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree": [[267, "graphscope-nx-generators-joint-degree-seq-is-valid-directed-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree": [[268, "graphscope-nx-generators-joint-degree-seq-is-valid-joint-degree"]], "graphscope.nx.generators.joint_degree_seq.joint_degree_graph": [[269, "graphscope-nx-generators-joint-degree-seq-joint-degree-graph"]], "graphscope.nx.generators.mycielski.mycielski_graph": [[270, "graphscope-nx-generators-mycielski-mycielski-graph"]], "graphscope.nx.generators.mycielski.mycielskian": [[271, "graphscope-nx-generators-mycielski-mycielskian"]], "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees": [[272, "graphscope-nx-generators-nonisomorphic-trees-nonisomorphic-trees"]], "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees": [[273, "graphscope-nx-generators-nonisomorphic-trees-number-of-nonisomorphic-trees"]], "graphscope.nx.generators.small.LCF_graph": [[274, "graphscope-nx-generators-small-lcf-graph"]], "graphscope.nx.generators.small.bull_graph": [[275, "graphscope-nx-generators-small-bull-graph"]], "graphscope.nx.generators.small.chvatal_graph": [[276, "graphscope-nx-generators-small-chvatal-graph"]], "graphscope.nx.generators.small.cubical_graph": [[277, "graphscope-nx-generators-small-cubical-graph"]], "graphscope.nx.generators.small.desargues_graph": [[278, "graphscope-nx-generators-small-desargues-graph"]], "graphscope.nx.generators.small.diamond_graph": [[279, "graphscope-nx-generators-small-diamond-graph"]], "graphscope.nx.generators.small.dodecahedral_graph": [[280, "graphscope-nx-generators-small-dodecahedral-graph"]], "graphscope.nx.generators.small.frucht_graph": [[281, "graphscope-nx-generators-small-frucht-graph"]], "graphscope.nx.generators.small.heawood_graph": [[282, "graphscope-nx-generators-small-heawood-graph"]], "graphscope.nx.generators.small.house_graph": [[283, "graphscope-nx-generators-small-house-graph"]], "graphscope.nx.generators.small.house_x_graph": [[284, "graphscope-nx-generators-small-house-x-graph"]], "graphscope.nx.generators.small.icosahedral_graph": [[285, "graphscope-nx-generators-small-icosahedral-graph"]], "graphscope.nx.generators.small.krackhardt_kite_graph": [[286, "graphscope-nx-generators-small-krackhardt-kite-graph"]], "graphscope.nx.generators.small.make_small_graph": [[287, "graphscope-nx-generators-small-make-small-graph"]], "graphscope.nx.generators.small.moebius_kantor_graph": [[288, "graphscope-nx-generators-small-moebius-kantor-graph"]], "graphscope.nx.generators.small.octahedral_graph": [[289, "graphscope-nx-generators-small-octahedral-graph"]], "graphscope.nx.generators.small.pappus_graph": [[290, "graphscope-nx-generators-small-pappus-graph"]], "graphscope.nx.generators.small.petersen_graph": [[291, "graphscope-nx-generators-small-petersen-graph"]], "graphscope.nx.generators.small.sedgewick_maze_graph": [[292, "graphscope-nx-generators-small-sedgewick-maze-graph"]], "graphscope.nx.generators.small.tetrahedral_graph": [[293, "graphscope-nx-generators-small-tetrahedral-graph"]], "graphscope.nx.generators.small.truncated_cube_graph": [[294, "graphscope-nx-generators-small-truncated-cube-graph"]], "graphscope.nx.generators.small.truncated_tetrahedron_graph": [[295, "graphscope-nx-generators-small-truncated-tetrahedron-graph"]], "graphscope.nx.generators.small.tutte_graph": [[296, "graphscope-nx-generators-small-tutte-graph"]], "graphscope.nx.generators.social.davis_southern_women_graph": [[297, "graphscope-nx-generators-social-davis-southern-women-graph"]], "graphscope.nx.generators.social.florentine_families_graph": [[298, "graphscope-nx-generators-social-florentine-families-graph"]], "graphscope.nx.generators.social.karate_club_graph": [[299, "graphscope-nx-generators-social-karate-club-graph"]], "graphscope.nx.generators.social.les_miserables_graph": [[300, "graphscope-nx-generators-social-les-miserables-graph"]], "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge": [[301, "graphscope-nx-generators-spectral-graph-forge-spectral-graph-forge"]], "graphscope.nx.generators.sudoku.sudoku_graph": [[302, "graphscope-nx-generators-sudoku-sudoku-graph"]], "graphscope.nx.generators.trees.prefix_tree": [[303, "graphscope-nx-generators-trees-prefix-tree"]], "graphscope.nx.generators.trees.random_tree": [[304, "graphscope-nx-generators-trees-random-tree"]], "graphscope.nx.generators.triads.triad_graph": [[305, "graphscope-nx-generators-triads-triad-graph"]], "networkx.generators.internet_as_graphs.random_internet_as_graph": [[306, "networkx-generators-internet-as-graphs-random-internet-as-graph"]], "networkx.generators.stochastic.stochastic_graph": [[307, "networkx-generators-stochastic-stochastic-graph"]], "Graph generators": [[308, "graph-generators"]], "Atlas": [[308, "module-graphscope.nx.generators.atlas"]], "Classic": [[308, "module-graphscope.nx.generators.classic"]], "Expanders": [[308, "module-graphscope.nx.generators.expanders"]], "Small": [[308, "module-graphscope.nx.generators.small"]], "Duplication Divergence": [[308, "module-graphscope.nx.generators.duplication"]], "Degree Sequence": [[308, "module-graphscope.nx.generators.degree_seq"]], "Directed": [[308, "module-graphscope.nx.generators.directed"]], "Geometric": [[308, "module-graphscope.nx.generators.geometric"]], "Ego Graph": [[308, "module-graphscope.nx.generators.ego"]], "Stochastic": [[308, "module-networkx.generators.stochastic"]], "AS graph": [[308, "module-networkx.generators.internet_as_graphs"]], "Intersection": [[308, "module-graphscope.nx.generators.intersection"]], "Social Networks": [[308, "module-graphscope.nx.generators.social"]], "Spectral": [[308, "module-graphscope.nx.generators.spectral_graph_forge"]], "Trees": [[308, "module-graphscope.nx.generators.trees"]], "Non Isomorphic Trees": [[308, "module-graphscope.nx.generators.nonisomorphic_trees"]], "Triads": [[308, "module-graphscope.nx.generators.triads"]], "Joint Degree Sequence": [[308, "module-graphscope.nx.generators.joint_degree_seq"]], "Mycielski": [[308, "module-graphscope.nx.generators.mycielski"]], "Harary Graph": [[308, "module-graphscope.nx.generators.harary_graph"]], "Sudoku": [[308, "module-graphscope.nx.generators.sudoku"]], "Graph types": [[309, "graph-types"]], "DiGraph": [[309, "digraph"]], "NetworkX-style API": [[310, "networkx-style-api"]], "Reading graphs": [[311, "reading-graphs"]], "Edge List": [[311, "edge-list"]], "Adjacency List": [[311, "adjacency-list"]], "Graph Transformation": [[312, "graph-transformation"]], "Operation": [[313, "operation"]], "Operation object": [[313, "operation-object"]], "BuiltIn operations": [[313, "module-graphscope.framework.dag_utils"]], "Python API Reference": [[314, "python-api-reference"]], "Selector": [[315, "selector"]], "Selectors in different context": [[315, "selectors-in-different-context"]], "TensorContext": [[315, "tensorcontext"]], "VertexDataContext": [[315, "vertexdatacontext"]], "LabeledVertexDataContext": [[315, "labeledvertexdatacontext"]], "VertexPropertyContext": [[315, "vertexpropertycontext"]], "LabeledVertexPropertyContext": [[315, "labeledvertexpropertycontext"]], "Methods that use selectors": [[315, "methods-that-use-selectors"]], "One-dimensional results": [[315, "one-dimensional-results"]], "Multi-dimensional results": [[315, "multi-dimensional-results"]], "Vertex Range": [[315, "vertex-range"]], "Session": [[316, "session"]], "Session object": [[316, "session-object"]], "Session Functions": [[316, "session-functions"]], "Resources Estimator": [[317, "resources-estimator"]], "GART: Bridging the Gap between Relational OLTP and Graph Workloads": [[318, "gart-bridging-the-gap-between-relational-oltp-and-graph-workloads"]], "Architecture and Workflow": [[318, "architecture-and-workflow"]], "Defining Graph Mapping in GART": [[318, "defining-graph-mapping-in-gart"]], "Loading Logs to GART Storage": [[318, "loading-logs-to-gart-storage"]], "Using Loaded Graphs from GraphScope": [[318, "using-loaded-graphs-from-graphscope"]], "GraphAr: Standard Graph Data File Format": [[320, "graphar-standard-graph-data-file-format"]], "The GraphAr File Format": [[320, "the-graphar-file-format"]], "Features": [[320, "features"]], "File Format": [[320, "file-format"]], "Information files": [[320, "information-files"]], "Data files": [[320, "data-files"]], "GraphAr in GraphScope": [[320, "graphar-in-graphscope"]], "Loading GraphAr Data into GraphScope": [[320, "loading-graphar-data-into-graphscope"]], "Archiving the Graph Data in GraphAr": [[320, "archiving-the-graph-data-in-graphar"]], "GRIN: Graph Retrieval INterface": [[321, "grin-graph-retrieval-interface"]], "Motivations": [[321, "motivations"]], "Unified Graph Retrieval": [[321, "unified-graph-retrieval"]], "GRIN Concepts": [[321, "grin-concepts"]], "Predefined Macros": [[321, "predefined-macros"]], "Partition Strategy": [[321, "partition-strategy"]], "Edge-cut Partition Strategy": [[321, "edge-cut-partition-strategy"]], "Vertex-cut Partition Strategy": [[321, "vertex-cut-partition-strategy"]], "Property Graph Model": [[321, "property-graph-model"]], "Implementation Guideline": [[321, "implementation-guideline"]], "For computing engine": [[321, "for-computing-engine"]], "For storage engine": [[321, "for-storage-engine"]], "Design Details": [[321, "design-details"]], "Handler": [[321, "handler"]], "Edge": [[321, "edge"]], "List": [[321, "list"]], "Array-style Retrieval": [[321, "array-style-retrieval"]], "List Iterator": [[321, "list-iterator"]], "Property": [[321, "property"]], "Label": [[321, "label"], [342, "label"]], "Order": [[321, "order"]], "Master and Mirror": [[321, "master-and-mirror"]], "Local Complete": [[321, "local-complete"]], "Natural ID Trait": [[321, "natural-id-trait"]], "Groot: Persistent Graph Store": [[322, "groot-persistent-graph-store"]], "Known Limitation": [[322, "known-limitation"]], "Deploy Groot": [[322, "deploy-groot"]], "Install from ArtifactHub": [[322, "install-from-artifacthub"]], "Installing from a local directory": [[322, "installing-from-a-local-directory"]], "Common Configurations": [[322, "common-configurations"]], "Connecting to Groot": [[322, "connecting-to-groot"]], "Connection": [[322, "connection"]], "Building and Modifying Graph Models": [[322, "building-and-modifying-graph-models"]], "Using Built-in Datasets": [[322, "using-built-in-datasets"]], "Customizing Models and Datasets": [[322, "customizing-models-and-datasets"]], "Querying Data": [[322, "querying-data"]], "Python": [[322, "python"], [322, "id1"]], "Java": [[322, "java"], [322, "id2"]], "Node.js": [[322, "node-js"]], "Data Import": [[322, "data-import"]], "Offline Import": [[322, "offline-import"]], "Prerequisite": [[322, "prerequisite"]], "Data Format": [[322, "data-format"]], "Loading Process": [[322, "loading-process"]], "Build: Building a partitioned graph": [[322, "build-building-a-partitioned-graph"]], "2. Loading graph partitions": [[322, "loading-graph-partitions"]], "3. Commit to store service": [[322, "commit-to-store-service"]], "Realtime Write": [[322, "realtime-write"]], "Uninstalling and Restarting": [[322, "uninstalling-and-restarting"]], "Uninstall Groot": [[322, "uninstall-groot"]], "Restart Groot": [[322, "restart-groot"]], "Destroy Groot": [[322, "destroy-groot"]], "Developing Guide": [[322, "developing-guide"]], "Build image": [[322, "build-image"]], "Persistence": [[322, "persistence"]], "Troubleshooting": [[322, "troubleshooting"]], "Viewing logs": [[322, "viewing-logs"]], "Configuring logs": [[322, "configuring-logs"]], "In-memory immutable graphs on Vineyard": [[323, "in-memory-immutable-graphs-on-vineyard"]], "Graphs in Vineyard": [[323, "graphs-in-vineyard"]], "Loading Graphs to Vineyard": [[323, "loading-graphs-to-vineyard"]], "Using Loaded Graphs": [[323, "using-loaded-graphs"]], "Applications and algorithms": [[324, "applications-and-algorithms"]], "Bind application to graph": [[324, "bind-application-to-graph"]], "Built-in algorithms": [[324, "built-in-algorithms"]], "Scaling and repartitioning": [[325, "scaling-and-repartitioning"]], "Fennel": [[325, "fennel"]], "XtraPuLP": [[325, "xtrapulp"]], "Hybrid partitioning": [[325, "hybrid-partitioning"]], "User Guide and Examples of GAE": [[326, "user-guide-and-examples-of-gae"]], "Developing Your Algorithms with Python": [[326, "developing-your-algorithms-with-python"]], "Developing Your Algorithms with C++": [[326, "developing-your-algorithms-with-c"]], "Developing Your Algorithms with Java": [[326, "developing-your-algorithms-with-java"]], "User Guide and Examples of GLE": [[327, "user-guide-and-examples-of-gle"]], "Error Codes": [[328, "error-codes"]], "Command-line Utility gsctl": [[329, "command-line-utility-gsctl"]], "Install/Update gsctl": [[329, "install-update-gsctl"]], "Commands": [[329, "commands"]], "Utility Scripts": [[329, "utility-scripts"]], "Client/Server Mode": [[329, "client-server-mode"]], "How to Find logs": [[330, "how-to-find-logs"]], "Find logs in k8s": [[330, "find-logs-in-k8s"]], "Find logs for GraphScope Analytical Engine (GAE)": [[330, "find-logs-for-graphscope-analytical-engine-gae"]], "Find logs for Graph Interactive Engine (GIE)": [[330, "find-logs-for-graph-interactive-engine-gie"]], "Find logs for Graph Learning Engine (GLE)": [[330, "find-logs-for-graph-learning-engine-gle"]], "Find logs for Groot": [[330, "find-logs-for-groot"]], "Monitoring": [[331, "monitoring"]], "\u56fe\u5206\u6790\u5f15\u64ce": [[332, "id1"]], "\u5185\u7f6e\u7b97\u6cd5": [[332, "id2"]], "\u5bf9\u8ba1\u7b97\u7ed3\u679c\u7684\u5904\u7406": [[332, "id3"]], "\u4f7f\u7528 PIE \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[332, "pie"]], "\u4f7f\u7528 Pregel \u7f16\u7a0b\u6a21\u578b\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[332, "pregel"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5\u4e2d\u4f7f\u7528 math.h \u4e2d\u7684\u51fd\u6570": [[332, "math-h"]], "\u8fd0\u884c\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[332, "id5"]], "\u8fd0\u884cJava\u7f16\u5199\u7684\u7b97\u6cd5": [[332, "java"]], "\u8fd0\u884c\u793a\u4f8b\u7684Java\u7b97\u6cd5": [[332, "id6"]], "\u4f7f\u7528Java\u7f16\u5199\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u56fe\u7b97\u6cd5": [[332, "id7"]], "\u90e8\u7f72": [[333, "id1"]], "\u4f7f\u7528Helm\u90e8\u7f72GraphScope": [[333, "helmgraphscope"]], "\u5728AWS/\u963f\u91cc\u4e91\u4e0a\u90e8\u7f72\u96c6\u7fa4": [[333, "aws"]], "\u672c\u5730\u90e8\u7f72GraphScope": [[333, "graphscope"]], "\u5f00\u53d1\u8005\u6307\u5357": [[334, "id1"]], "\u57fa\u4e8e Docker \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[334, "docker-graphscope"]], "\u57fa\u4e8e Kubernetes \u73af\u5883\u6784\u5efa\u5e76\u6d4b\u8bd5 GraphScope": [[334, "kubernetes-graphscope"]], "\u6784\u5efa Python Wheels": [[334, "python-wheels"]], "Linux": [[334, "linux"]], "macOS": [[334, "macos"]], "\u4ee3\u7801\u98ce\u683c": [[334, "id3"]], "\u5e38\u89c1\u95ee\u9898": [[335, "id1"]], "\u5feb\u901f\u4e0a\u624b": [[336, "id1"]], "\u793a\u4f8b: \u8bba\u6587\u5f15\u7528\u7f51\u7edc\u4e2d\u7684\u8282\u70b9\u5206\u7c7b\u4efb\u52a1": [[336, "id3"]], "\u521b\u5efa\u4f1a\u8bdd": [[336, "id4"]], "\u4ea4\u4e92\u5f0f\u67e5\u8be2": [[336, "id6"]], "\u56fe\u5206\u6790": [[336, "id7"]], "\u56fe\u795e\u7ecf\u7f51\u7edc (GNNs)": [[336, "gnns"]], "\u5173\u95ed\u4f1a\u8bdd": [[336, "id8"]], "\u56fe\u7684\u53d8\u6362\u64cd\u4f5c": [[337, "graph-transformation"]], "\u6dfb\u52a0\u65b0\u7684\u6807\u7b7e": [[337, "id2"]], "\u6295\u5f71": [[337, "id3"]], "\u81ea\u52a8\u8f6c\u6362\u4e3a\u7b80\u5355\u56fe": [[337, "id4"]], "\u5c06\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u65b0\u7684\u5c5e\u6027\u52a0\u5165\u56fe\u4e2d": [[337, "id5"]], "GraphScope: \u4e00\u7ad9\u5f0f\u56fe\u8ba1\u7b97\u7cfb\u7edf": [[338, "graphscope"]], "\u76ee\u5f55": [[338, null], [343, null]], "API \u53c2\u8003": [[338, null]], "\u7d22\u5f15": [[338, "id1"]], "\u5b89\u88c5": [[339, "id1"]], "\u5355\u673a\u73af\u5883\u4e0b\u5b89\u88c5": [[339, "id2"]], "\u57fa\u4e8e Kubernetes \u5b89\u88c5 GraphScope \u5ba2\u6237\u7aef": [[339, "kubernetes-graphscope"]], "\u56fe\u4ea4\u4e92\u5f0f\u5206\u6790\u5f15\u64ce": [[340, "id1"]], "Apache TinkerPop": [[340, "apache-tinkerpop"]], "\u5229\u7528Python\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[340, "python-gremlin-graphscope"]], "\u5229\u7528Java\uff08Gremlin\uff09\u8fde\u63a5GraphScope": [[340, "java-gremlin-graphscope"]], "Gremlin Console\uff08\u5f00\u53d1\u63a7\u5236\u53f0\uff09": [[340, "id5"]], "Gremlin\u7f16\u7a0b\u5165\u95e8\u2013101": [[340, "gremlin-101"]], "\u56fe\u6570\u636e\u6a21\u578b": [[340, "id8"]], "\u67e5\u8be2\u8bed\u8a00": [[340, "id9"]], "\u4e00\u4e2a\u4f8b\u5b50": [[340, "id10"]], "Gremlin\u517c\u5bb9\u6027\uff08\u5bf9\u6bd4TinkerPop\uff09": [[340, "gremlin-tinkerpop"]], "\u5c5e\u6027\u56fe\u6a21\u578b\u7ea6\u675f": [[340, "id11"]], "\u5c1a\u4e0d\u652f\u6301\u7684\u529f\u80fd\u7279\u6027": [[340, "id12"]], "\u652f\u6301\u7684Gremlin\u64cd\u4f5c": [[340, "id13"]], "\u5df2\u77e5\u9650\u5236": [[340, "id14"]], "\u56fe\u5b66\u4e60\u5f15\u64ce": [[341, "id1"]], "\u56fe\u5b66\u4e60\u6a21\u578b": [[341, "id2"]], "\u6570\u636e\u6a21\u578b": [[341, "id3"]], "\u7f16\u7801\u5668": [[341, "id4"]], "\u81ea\u5b9a\u4e49\u7b97\u6cd5": [[341, "id5"]], "\u91c7\u6837": [[341, "id6"]], "\u56fe\u6570\u636e\u6d41": [[341, "id7"]], "\u6a21\u578b": [[341, "id8"]], "\u635f\u5931\u51fd\u6570\u548c\u8bad\u7ec3\u8fc7\u7a0b": [[341, "id9"]], "\u8f7d\u56fe": [[342, "loading-graphs"]], "\u8f7d\u5165\u5185\u7f6e\u6570\u636e\u96c6": [[342, "id3"]], "\u624b\u52a8\u914d\u7f6e\u56fe": [[342, "id4"]], "Build Vertex": [[342, "build-vertex"]], "vertices": [[342, "vertices"]], "properties": [[342, "properties"], [342, "id7"]], "vid_field": [[342, "vid-field"]], "Build Edge": [[342, "build-edge"]], "edges": [[342, "edges"]], "label": [[342, "id6"]], "src_label and dst_label": [[342, "src-label-and-dst-label"]], "src_field and dst_field": [[342, "src-field-and-dst-field"]], "\u9ad8\u7ea7\u7528\u6cd5": [[342, "id8"]], "\u6ca1\u6709\u6b67\u4e49\u65f6\uff0c\u81ea\u52a8\u63a8\u65ad\u70b9\u6807\u7b7e": [[342, "id9"]], "\u4ece\u8fb9\u4e2d\u63a8\u65ad\u70b9": [[342, "id10"]], "\u591a\u79cd\u8fb9\u5173\u7cfb": [[342, "id11"]], "\u6307\u5b9a\u5c5e\u6027\u7684\u6570\u636e\u7c7b\u578b": [[342, "id12"]], "\u56fe\u7684\u5176\u4ed6\u53c2\u6570": [[342, "id13"]], "\u5b8c\u6574\u7684\u793a\u4f8b": [[342, "id14"]], "\u4ece Pandas \u6216 Numpy \u4e2d\u8f7d\u56fe": [[342, "pandas-numpy"]], "\u4ece Pandas \u4e2d\u8f7d\u56fe": [[342, "pandas"]], "\u4ece Numpy \u4e2d\u8f7d\u56fe": [[342, "numpy"]], "Loader \u7684\u53d8\u79cd": [[342, "loader"]], "\u5165\u95e8\u6559\u7a0b": [[343, "id1"]]}, "indexentries": {"all_pairs_shortest_path_length()": [[0, "all_pairs_shortest_path_length"]], "attribute_assortativity()": [[0, "attribute_assortativity"]], "average_degree_connectivity()": [[0, "average_degree_connectivity"]], "betweenness_centrality()": [[0, "betweenness_centrality"]], "bfs()": [[0, "bfs"]], "built-in function": [[0, "all_pairs_shortest_path_length"], [0, "attribute_assortativity"], [0, "average_degree_connectivity"], [0, "betweenness_centrality"], [0, "bfs"], [0, "closeness_centrality"], [0, "degree_assortativity_coefficient"], [0, "degree_centrality"], [0, "dfs"], [0, "eigenvector_centrality"], [0, "hits"], [0, "id0"], [0, "id1"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "katz_centrality"], [0, "kkore"], [0, "kshell"], [0, "lpa"], [0, "sampling_path"], [0, "sssp"]], "cdlp()": [[0, "id0"]], "closeness_centrality()": [[0, "closeness_centrality"]], "clustering()": [[0, "id1"]], "degree_assortativity_coefficient()": [[0, "degree_assortativity_coefficient"]], "degree_centrality()": [[0, "degree_centrality"]], "dfs()": [[0, "dfs"]], "eigenvector_centrality()": [[0, "eigenvector_centrality"]], "hits()": [[0, "hits"]], "katz_centrality()": [[0, "katz_centrality"]], "kkore()": [[0, "kkore"]], "kshell()": [[0, "kshell"]], "lcc()": [[0, "id2"]], "lpa()": [[0, "lpa"]], "pagerank()": [[0, "id3"]], "sampling_path()": [[0, "sampling_path"]], "sssp()": [[0, "sssp"]], "voterank()": [[0, "id4"]], "wcc()": [[0, "id5"]], "gs::appbase (c++ class)": [[99, "_CPPv4I00EN2gs7AppBaseE"]], "gs::appbase::appbase (c++ function)": [[99, "_CPPv4N2gs7AppBase7AppBaseEv"]], "gs::appbase::inceval (c++ function)": [[99, "_CPPv4N2gs7AppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::peval (c++ function)": [[99, "_CPPv4N2gs7AppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::appbase::load_strategy (c++ member)": [[99, "_CPPv4N2gs7AppBase13load_strategyE"]], "gs::appbase::message_manager_t (c++ type)": [[99, "_CPPv4N2gs7AppBase17message_manager_tE"]], "gs::appbase::message_strategy (c++ member)": [[99, "_CPPv4N2gs7AppBase16message_strategyE"]], "gs::appbase::need_split_edges (c++ member)": [[99, "_CPPv4N2gs7AppBase16need_split_edgesE"]], "gs::appbase::~appbase (c++ function)": [[99, "_CPPv4N2gs7AppBaseD0Ev"]], "gs::appentry (c++ class)": [[99, "_CPPv4N2gs8AppEntryE"]], "gs::appentry::appentry (c++ function)": [[99, "_CPPv4N2gs8AppEntry8AppEntryENSt6stringENSt6stringE"]], "gs::appentry::createworker (c++ function)": [[99, "_CPPv4N2gs8AppEntry12CreateWorkerERKNSt10shared_ptrIvEERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::appentry::init (c++ function)": [[99, "_CPPv4N2gs8AppEntry4InitEv"]], "gs::appentry::query (c++ function)": [[99, "_CPPv4N2gs8AppEntry5QueryEPvRKN3rpc9QueryArgsERKNSt6stringERNSt10shared_ptrI16IFragmentWrapperEE"]], "gs::argtypeat (c++ struct)": [[99, "_CPPv4I_NSt6size_tE0EN2gs9ArgTypeAtE"]], "gs::argsnum (c++ struct)": [[99, "_CPPv4I0EN2gs7ArgsNumE"]], "gs::argsunpacker (c++ struct)": [[99, "_CPPv4I0EN2gs12ArgsUnpackerE"]], "gs::arrowfragmentloader (c++ class)": [[99, "_CPPv4I00I00E0EN2gs19ArrowFragmentLoaderE"]], "gs::arrowfragmentloader::addlabelstofragment (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoader19AddLabelsToFragmentEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::addlabelstofragmentasfragmentgroup (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoader34AddLabelsToFragmentAsFragmentGroupEN8vineyard8ObjectIDE"]], "gs::arrowfragmentloader::arrowfragmentloader (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecENSt10shared_ptrIN6detail5GraphEEE"], [99, "_CPPv4N2gs19ArrowFragmentLoader19ArrowFragmentLoaderERN8vineyard6ClientERKN5grape8CommSpecERKNSt6vectorINSt6stringEEERKNSt6vectorINSt6stringEEEbbbbb"]], "gs::arrowfragmentloader::loadedgetables (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoader14LoadEdgeTablesEv"]], "gs::arrowfragmentloader::loadfragment (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoader12LoadFragmentEv"]], "gs::arrowfragmentloader::loadfragmentasfragmentgroup (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoader27LoadFragmentAsFragmentGroupEv"]], "gs::arrowfragmentloader::loadvertexedgetables (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoader20LoadVertexEdgeTablesEv"]], "gs::arrowfragmentloader::loadvertextables (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoader16LoadVertexTablesEv"]], "gs::arrowfragmentloader::initpartitioner (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoader15initPartitionerEv"]], "gs::arrowfragmentloader::~arrowfragmentloader (c++ function)": [[99, "_CPPv4N2gs19ArrowFragmentLoaderD0Ev"]], "gs::arrowprojectedfragment (c++ class)": [[99, "_CPPv4I00000_bEN2gs22ArrowProjectedFragmentE"]], "gs::arrowprojectedfragment::construct (c++ function)": [[99, "_CPPv4N2gs22ArrowProjectedFragment9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedfragment::create (c++ function)": [[99, "_CPPv4N2gs22ArrowProjectedFragment6CreateEv"]], "gs::arrowprojectedfragment::getdata (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment7GetDataERK8vertex_t"]], "gs::arrowprojectedfragment::getedgenum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment10GetEdgeNumEv"]], "gs::arrowprojectedfragment::getfragid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment9GetFragIdERK8vertex_t"]], "gs::arrowprojectedfragment::getid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment5GetIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinedgenum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment12GetInEdgeNumEv"]], "gs::arrowprojectedfragment::getincomingadjlist (c++ function)": [[99, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [99, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [99, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetIncomingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getincomingedgenum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment18GetIncomingEdgeNumEv"]], "gs::arrowprojectedfragment::getincominginnervertexadjlist (c++ function)": [[99, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getincomingoutervertexadjlist (c++ function)": [[99, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetIncomingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertex (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment14GetInnerVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexgid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment17GetInnerVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment16GetInnerVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnervertexinternalid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment24GetInnerVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getinnerverticesnum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment19GetInnerVerticesNumEv"]], "gs::arrowprojectedfragment::getinternalid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment13GetInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getlocalindegree (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment16GetLocalInDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getlocaloutdegree (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment17GetLocalOutDegreeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutedgenum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment13GetOutEdgeNumEv"]], "gs::arrowprojectedfragment::getoutervertex (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment14GetOuterVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexgid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment17GetOuterVertexGidERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment16GetOuterVertexIdERK8vertex_t"]], "gs::arrowprojectedfragment::getoutervertexinternalid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment24GetOuterVertexInternalIdERK8vertex_t"]], "gs::arrowprojectedfragment::getouterverticesnum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment19GetOuterVerticesNumEv"]], "gs::arrowprojectedfragment::getoutgoingadjlist (c++ function)": [[99, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifI8COMPACT_18compact_adj_list_tE4typeERK8vertex_t"], [99, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"], [99, "_CPPv4I_bENK2gs22ArrowProjectedFragment18GetOutgoingAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t5fid_t"]], "gs::arrowprojectedfragment::getoutgoingedgenum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment18GetOutgoingEdgeNumEv"]], "gs::arrowprojectedfragment::getoutgoinginnervertexadjlist (c++ function)": [[99, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingInnerVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::getoutgoingoutervertexadjlist (c++ function)": [[99, "_CPPv4I_bENK2gs22ArrowProjectedFragment29GetOutgoingOuterVertexAdjListENSt9enable_ifIXnt8COMPACT_E10adj_list_tE4typeERK8vertex_t"]], "gs::arrowprojectedfragment::gettotalverticesnum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment19GetTotalVerticesNumEv"]], "gs::arrowprojectedfragment::getvertex (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment9GetVertexERK5oid_tR8vertex_t"]], "gs::arrowprojectedfragment::getvertexmap (c++ function)": [[99, "_CPPv4N2gs22ArrowProjectedFragment12GetVertexMapEv"], [99, "_CPPv4NK2gs22ArrowProjectedFragment12GetVertexMapEv"]], "gs::arrowprojectedfragment::getverticesnum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment14GetVerticesNumEv"]], "gs::arrowprojectedfragment::gid2oid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment7Gid2OidERK5vid_t"]], "gs::arrowprojectedfragment::gid2vertex (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment10Gid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::iedests (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment7IEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::ioedests (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment8IOEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::innervertexgid2vertex (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment21InnerVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::innervertices (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment13InnerVerticesEv"]], "gs::arrowprojectedfragment::isinnervertex (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment13IsInnerVertexERK8vertex_t"]], "gs::arrowprojectedfragment::isoutervertex (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment13IsOuterVertexERK8vertex_t"]], "gs::arrowprojectedfragment::mirrorvertices (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment14MirrorVerticesE5fid_t"]], "gs::arrowprojectedfragment::oedests (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment7OEDestsERK8vertex_t"]], "gs::arrowprojectedfragment::oid2gid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_t"], [99, "_CPPv4NK2gs22ArrowProjectedFragment7Oid2GidERK5oid_tR5vid_t"]], "gs::arrowprojectedfragment::outervertexgid2vertex (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment21OuterVertexGid2VertexERK5vid_tR8vertex_t"]], "gs::arrowprojectedfragment::outervertices (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesE5fid_t"], [99, "_CPPv4NK2gs22ArrowProjectedFragment13OuterVerticesEv"]], "gs::arrowprojectedfragment::preparetorunapp (c++ function)": [[99, "_CPPv4N2gs22ArrowProjectedFragment15PrepareToRunAppERKN5grape8CommSpecEN5grape11PrepareConfE"]], "gs::arrowprojectedfragment::project (c++ function)": [[99, "_CPPv4N2gs22ArrowProjectedFragment7ProjectENSt10shared_ptrIN8vineyard13ArrowFragmentI5oid_t5vid_t21property_vertex_map_t7COMPACTEEEERK10label_id_tRK9prop_id_tRK10label_id_tRK9prop_id_t"]], "gs::arrowprojectedfragment::vertex2gid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment10Vertex2GidERK8vertex_t"]], "gs::arrowprojectedfragment::vertices (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment8VerticesEv"]], "gs::arrowprojectedfragment::adj_list_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment10adj_list_tE"]], "gs::arrowprojectedfragment::compact_adj_list_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment18compact_adj_list_tE"]], "gs::arrowprojectedfragment::compact_edges (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment13compact_edgesEv"]], "gs::arrowprojectedfragment::compact_nbr_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment13compact_nbr_tE"]], "gs::arrowprojectedfragment::const_adj_list_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment16const_adj_list_tE"]], "gs::arrowprojectedfragment::const_compact_adj_list_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment24const_compact_adj_list_tE"]], "gs::arrowprojectedfragment::directed (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment8directedEv"]], "gs::arrowprojectedfragment::edata_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment7edata_tE"]], "gs::arrowprojectedfragment::edge_label (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment10edge_labelEv"]], "gs::arrowprojectedfragment::edge_prop_id (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment12edge_prop_idEv"]], "gs::arrowprojectedfragment::eid_array_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment11eid_array_tE"]], "gs::arrowprojectedfragment::eid_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment5eid_tE"]], "gs::arrowprojectedfragment::fid (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment3fidEv"]], "gs::arrowprojectedfragment::fnum (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment4fnumEv"]], "gs::arrowprojectedfragment::get_arrow_fragment (c++ function)": [[99, "_CPPv4N2gs22ArrowProjectedFragment18get_arrow_fragmentEv"]], "gs::arrowprojectedfragment::get_edata_array_accessor (c++ function)": [[99, "_CPPv4N2gs22ArrowProjectedFragment24get_edata_array_accessorEv"]], "gs::arrowprojectedfragment::get_ie_offsets_begin_ptr (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment24get_ie_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_ie_offsets_end_ptr (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment22get_ie_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_in_edges_ptr (c++ function)": [[99, "_CPPv4I_bENK2gs22ArrowProjectedFragment16get_in_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_oe_offsets_begin_ptr (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment24get_oe_offsets_begin_ptrEv"]], "gs::arrowprojectedfragment::get_oe_offsets_end_ptr (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment22get_oe_offsets_end_ptrEv"]], "gs::arrowprojectedfragment::get_out_edges_ptr (c++ function)": [[99, "_CPPv4I_bENK2gs22ArrowProjectedFragment17get_out_edges_ptrENSt9enable_ifIXnt8COMPACT_EPK10nbr_unit_tE4typeEv"]], "gs::arrowprojectedfragment::get_vdata_array_accessor (c++ function)": [[99, "_CPPv4N2gs22ArrowProjectedFragment24get_vdata_array_accessorEv"]], "gs::arrowprojectedfragment::inner_vertex_array_t (c++ type)": [[99, "_CPPv4I0EN2gs22ArrowProjectedFragment20inner_vertex_array_tE"]], "gs::arrowprojectedfragment::inner_vertices_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment16inner_vertices_tE"]], "gs::arrowprojectedfragment::internal_oid_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment14internal_oid_tE"]], "gs::arrowprojectedfragment::label_id_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment10label_id_tE"]], "gs::arrowprojectedfragment::load_strategy (c++ member)": [[99, "_CPPv4N2gs22ArrowProjectedFragment13load_strategyE"]], "gs::arrowprojectedfragment::local_vertex_map (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment16local_vertex_mapEv"]], "gs::arrowprojectedfragment::nbr_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment5nbr_tE"]], "gs::arrowprojectedfragment::nbr_unit_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment10nbr_unit_tE"]], "gs::arrowprojectedfragment::oid_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment5oid_tE"]], "gs::arrowprojectedfragment::outer_vertex_array_t (c++ type)": [[99, "_CPPv4I0EN2gs22ArrowProjectedFragment20outer_vertex_array_tE"]], "gs::arrowprojectedfragment::outer_vertices_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment16outer_vertices_tE"]], "gs::arrowprojectedfragment::prop_id_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment9prop_id_tE"]], "gs::arrowprojectedfragment::property_graph_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment16property_graph_tE"]], "gs::arrowprojectedfragment::property_vertex_map_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment21property_vertex_map_tE"]], "gs::arrowprojectedfragment::sub_vertices_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment14sub_vertices_tE"]], "gs::arrowprojectedfragment::use_perfect_hash (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment16use_perfect_hashEv"]], "gs::arrowprojectedfragment::vdata_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment7vdata_tE"]], "gs::arrowprojectedfragment::vertex_array_t (c++ type)": [[99, "_CPPv4I0EN2gs22ArrowProjectedFragment14vertex_array_tE"]], "gs::arrowprojectedfragment::vertex_label (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment12vertex_labelEv"]], "gs::arrowprojectedfragment::vertex_map_id (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment13vertex_map_idEv"]], "gs::arrowprojectedfragment::vertex_map_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment12vertex_map_tE"]], "gs::arrowprojectedfragment::vertex_prop_id (c++ function)": [[99, "_CPPv4NK2gs22ArrowProjectedFragment14vertex_prop_idEv"]], "gs::arrowprojectedfragment::vertex_range_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment14vertex_range_tE"]], "gs::arrowprojectedfragment::vertex_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment8vertex_tE"]], "gs::arrowprojectedfragment::vertices_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment10vertices_tE"]], "gs::arrowprojectedfragment::vid_array_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment11vid_array_tE"]], "gs::arrowprojectedfragment::vid_t (c++ type)": [[99, "_CPPv4N2gs22ArrowProjectedFragment5vid_tE"]], "gs::arrowprojectedfragment::~arrowprojectedfragment (c++ function)": [[99, "_CPPv4N2gs22ArrowProjectedFragmentD0Ev"]], "gs::arrowprojectedvertexmap (c++ class)": [[99, "_CPPv4I000EN2gs23ArrowProjectedVertexMapE"]], "gs::arrowprojectedvertexmap::construct (c++ function)": [[99, "_CPPv4N2gs23ArrowProjectedVertexMap9ConstructERKN8vineyard10ObjectMetaE"]], "gs::arrowprojectedvertexmap::create (c++ function)": [[99, "_CPPv4N2gs23ArrowProjectedVertexMap6CreateEv"]], "gs::arrowprojectedvertexmap::getfidfromgid (c++ function)": [[99, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetFidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getgid (c++ function)": [[99, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5fid_t5oid_tR5vid_t"], [99, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetGidE5oid_tR5vid_t"]], "gs::arrowprojectedvertexmap::getinnervertexsize (c++ function)": [[99, "_CPPv4NK2gs23ArrowProjectedVertexMap18GetInnerVertexSizeE5fid_t"]], "gs::arrowprojectedvertexmap::getlidfromgid (c++ function)": [[99, "_CPPv4NK2gs23ArrowProjectedVertexMap13GetLidFromGidE5vid_t"]], "gs::arrowprojectedvertexmap::getoffsetfromlid (c++ function)": [[99, "_CPPv4N2gs23ArrowProjectedVertexMap16GetOffsetFromLidE5vid_t"]], "gs::arrowprojectedvertexmap::getoid (c++ function)": [[99, "_CPPv4NK2gs23ArrowProjectedVertexMap6GetOidE5vid_tR5oid_t"]], "gs::arrowprojectedvertexmap::gettotalverticesnum (c++ function)": [[99, "_CPPv4NK2gs23ArrowProjectedVertexMap19GetTotalVerticesNumEv"]], "gs::arrowprojectedvertexmap::offset2lid (c++ function)": [[99, "_CPPv4N2gs23ArrowProjectedVertexMap10Offset2LidERK5vid_t"]], "gs::arrowprojectedvertexmap::project (c++ function)": [[99, "_CPPv4N2gs23ArrowProjectedVertexMap7ProjectENSt10shared_ptrI21property_vertex_map_tEE10label_id_t"]], "gs::arrowprojectedvertexmap::use_perfect_hash (c++ function)": [[99, "_CPPv4NK2gs23ArrowProjectedVertexMap16use_perfect_hashEv"]], "gs::ctxwrapperbuilder (c++ struct)": [[99, "_CPPv4I00EN2gs17CtxWrapperBuilderE"]], "gs::defaultpropertyworker (c++ class)": [[99, "_CPPv4I0EN2gs21DefaultPropertyWorkerE"]], "gs::defaultpropertyworker::defaultpropertyworker (c++ function)": [[99, "_CPPv4N2gs21DefaultPropertyWorker21DefaultPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultpropertyworker::finalize (c++ function)": [[99, "_CPPv4N2gs21DefaultPropertyWorker8FinalizeEv"]], "gs::defaultpropertyworker::getcontext (c++ function)": [[99, "_CPPv4N2gs21DefaultPropertyWorker10GetContextEv"]], "gs::defaultpropertyworker::init (c++ function)": [[99, "_CPPv4N2gs21DefaultPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultpropertyworker::output (c++ function)": [[99, "_CPPv4N2gs21DefaultPropertyWorker6OutputERNSt7ostreamE"]], "gs::defaultpropertyworker::query (c++ function)": [[99, "_CPPv4IDpEN2gs21DefaultPropertyWorker5QueryEvDpRR4Args"]], "gs::defaultpropertyworker::context_t (c++ type)": [[99, "_CPPv4N2gs21DefaultPropertyWorker9context_tE"]], "gs::defaultpropertyworker::fragment_t (c++ type)": [[99, "_CPPv4N2gs21DefaultPropertyWorker10fragment_tE"]], "gs::defaultpropertyworker::message_manager_t (c++ type)": [[99, "_CPPv4N2gs21DefaultPropertyWorker17message_manager_tE"]], "gs::defaultpropertyworker::~defaultpropertyworker (c++ function)": [[99, "_CPPv4N2gs21DefaultPropertyWorkerD0Ev"]], "gs::defaultworker (c++ class)": [[99, "_CPPv4I0EN2gs13DefaultWorkerE"]], "gs::defaultworker::defaultworker (c++ function)": [[99, "_CPPv4N2gs13DefaultWorker13DefaultWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::defaultworker::finalize (c++ function)": [[99, "_CPPv4N2gs13DefaultWorker8FinalizeEv"]], "gs::defaultworker::getcontext (c++ function)": [[99, "_CPPv4N2gs13DefaultWorker10GetContextEv"]], "gs::defaultworker::init (c++ function)": [[99, "_CPPv4N2gs13DefaultWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::defaultworker::output (c++ function)": [[99, "_CPPv4N2gs13DefaultWorker6OutputERNSt7ostreamE"]], "gs::defaultworker::query (c++ function)": [[99, "_CPPv4IDpEN2gs13DefaultWorker5QueryEvDpRR4Args"]], "gs::defaultworker::context_t (c++ type)": [[99, "_CPPv4N2gs13DefaultWorker9context_tE"]], "gs::defaultworker::fragment_t (c++ type)": [[99, "_CPPv4N2gs13DefaultWorker10fragment_tE"]], "gs::defaultworker::message_manager_t (c++ type)": [[99, "_CPPv4N2gs13DefaultWorker17message_manager_tE"]], "gs::defaultworker::~defaultworker (c++ function)": [[99, "_CPPv4N2gs13DefaultWorkerD0Ev"]], "gs::dispatchresult (c++ class)": [[99, "_CPPv4N2gs14DispatchResultE"]], "gs::dispatchresult::aggregatepolicy (c++ enum)": [[99, "_CPPv4N2gs14DispatchResult15AggregatePolicyE"]], "gs::dispatchresult::aggregatepolicy::kconcat (c++ enumerator)": [[99, "_CPPv4N2gs14DispatchResult15AggregatePolicy7kConcatE"]], "gs::dispatchresult::aggregatepolicy::kmergegraphdef (c++ enumerator)": [[99, "_CPPv4N2gs14DispatchResult15AggregatePolicy14kMergeGraphDefE"]], "gs::dispatchresult::aggregatepolicy::kpickfirst (c++ enumerator)": [[99, "_CPPv4N2gs14DispatchResult15AggregatePolicy10kPickFirstE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonempty (c++ enumerator)": [[99, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kPickFirstNonEmptyE"]], "gs::dispatchresult::aggregatepolicy::kpickfirstnonemptygraphdef (c++ enumerator)": [[99, "_CPPv4N2gs14DispatchResult15AggregatePolicy26kPickFirstNonEmptyGraphDefE"]], "gs::dispatchresult::aggregatepolicy::krequireconsistent (c++ enumerator)": [[99, "_CPPv4N2gs14DispatchResult15AggregatePolicy18kRequireConsistentE"]], "gs::dispatchresult::dispatchresult (c++ function)": [[99, "_CPPv4N2gs14DispatchResult14DispatchResultEiN3rpc4CodeE"], [99, "_CPPv4N2gs14DispatchResult14DispatchResultEv"]], "gs::dispatchresult::aggregate_policy (c++ function)": [[99, "_CPPv4NK2gs14DispatchResult16aggregate_policyEv"]], "gs::dispatchresult::data (c++ function)": [[99, "_CPPv4NK2gs14DispatchResult4dataEv"]], "gs::dispatchresult::error_code (c++ function)": [[99, "_CPPv4NK2gs14DispatchResult10error_codeEv"]], "gs::dispatchresult::graph_def (c++ function)": [[99, "_CPPv4N2gs14DispatchResult9graph_defEv"], [99, "_CPPv4NK2gs14DispatchResult9graph_defEv"]], "gs::dispatchresult::has_large_data (c++ function)": [[99, "_CPPv4NK2gs14DispatchResult14has_large_dataEv"]], "gs::dispatchresult::message (c++ function)": [[99, "_CPPv4N2gs14DispatchResult7messageEv"]], "gs::dispatchresult::set_data (c++ function)": [[99, "_CPPv4N2gs14DispatchResult8set_dataERKN5grape9InArchiveE15AggregatePolicyb"], [99, "_CPPv4N2gs14DispatchResult8set_dataERKNSt6stringE15AggregatePolicyb"]], "gs::dispatchresult::set_error (c++ function)": [[99, "_CPPv4N2gs14DispatchResult9set_errorEN3rpc4CodeERKNSt6stringE"]], "gs::dispatchresult::set_graph_def (c++ function)": [[99, "_CPPv4N2gs14DispatchResult13set_graph_defERKN3rpc5graph10GraphDefPbE15AggregatePolicy"]], "gs::dispatchresult::worker_id (c++ function)": [[99, "_CPPv4NK2gs14DispatchResult9worker_idEv"]], "gs::dispatcher (c++ class)": [[99, "_CPPv4N2gs10DispatcherE"]], "gs::dispatcher::dispatch (c++ function)": [[99, "_CPPv4N2gs10Dispatcher8DispatchENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::dispatcher (c++ function)": [[99, "_CPPv4N2gs10Dispatcher10DispatcherERKN5grape8CommSpecE"]], "gs::dispatcher::setcommand (c++ function)": [[99, "_CPPv4N2gs10Dispatcher10SetCommandENSt10shared_ptrI13CommandDetailEE"]], "gs::dispatcher::start (c++ function)": [[99, "_CPPv4N2gs10Dispatcher5StartEv"]], "gs::dispatcher::stop (c++ function)": [[99, "_CPPv4N2gs10Dispatcher4StopEv"]], "gs::dispatcher::subscribe (c++ function)": [[99, "_CPPv4N2gs10Dispatcher9SubscribeENSt10shared_ptrI10SubscriberEE"]], "gs::engineconfig (c++ struct)": [[99, "_CPPv4N2gs12EngineConfigE"]], "gs::engineconfig::tojsonstring (c++ function)": [[99, "_CPPv4NK2gs12EngineConfig12ToJsonStringEv"]], "gs::engineconfig::enable_java_sdk (c++ member)": [[99, "_CPPv4N2gs12EngineConfig15enable_java_sdkE"]], "gs::engineconfig::networkx (c++ member)": [[99, "_CPPv4N2gs12EngineConfig8networkxE"]], "gs::engineconfig::vineyard_rpc_endpoint (c++ member)": [[99, "_CPPv4N2gs12EngineConfig21vineyard_rpc_endpointE"]], "gs::engineconfig::vineyard_socket (c++ member)": [[99, "_CPPv4N2gs12EngineConfig15vineyard_socketE"]], "gs::fragmentwrapper (c++ class)": [[99, "_CPPv4I0EN2gs15FragmentWrapperE"]], "gs::gsobject (c++ class)": [[99, "_CPPv4N2gs8GSObjectE"]], "gs::gsobject::gsobject (c++ function)": [[99, "_CPPv4N2gs8GSObject8GSObjectENSt6stringE10ObjectType"]], "gs::gsobject::tostring (c++ function)": [[99, "_CPPv4NK2gs8GSObject8ToStringEv"]], "gs::gsobject::id (c++ function)": [[99, "_CPPv4NK2gs8GSObject2idEv"]], "gs::gsobject::type (c++ function)": [[99, "_CPPv4NK2gs8GSObject4typeEv"]], "gs::gsobject::~gsobject (c++ function)": [[99, "_CPPv4N2gs8GSObjectD0Ev"]], "gs::grapeengine (c++ class)": [[99, "_CPPv4N2gs11GrapeEngineE"]], "gs::grapeengine::grapeengine (c++ function)": [[99, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringE"], [99, "_CPPv4N2gs11GrapeEngine11GrapeEngineENSt6stringEi"]], "gs::grapeengine::rundagfile (c++ function)": [[99, "_CPPv4N2gs11GrapeEngine10RunDAGFileEv"]], "gs::grapeengine::start (c++ function)": [[99, "_CPPv4N2gs11GrapeEngine5StartEv"]], "gs::grapeengine::stop (c++ function)": [[99, "_CPPv4N2gs11GrapeEngine4StopEv"]], "gs::grapeinstance (c++ class)": [[99, "_CPPv4N2gs13GrapeInstanceE"]], "gs::grapeinstance::grapeinstance (c++ function)": [[99, "_CPPv4N2gs13GrapeInstance13GrapeInstanceERKN5grape8CommSpecE"]], "gs::grapeinstance::init (c++ function)": [[99, "_CPPv4N2gs13GrapeInstance4InitERKNSt6stringE"]], "gs::grapeinstance::onreceive (c++ function)": [[99, "_CPPv4N2gs13GrapeInstance9OnReceiveENSt10shared_ptrI13CommandDetailEE"]], "gs::objectmanager (c++ class)": [[99, "_CPPv4N2gs13ObjectManagerE"]], "gs::objectmanager::getobject (c++ function)": [[99, "_CPPv4I0EN2gs13ObjectManager9GetObjectEN2bl6resultINSt10shared_ptrI1TEEEERKNSt6stringE"], [99, "_CPPv4N2gs13ObjectManager9GetObjectERKNSt6stringE"]], "gs::objectmanager::hasobject (c++ function)": [[99, "_CPPv4N2gs13ObjectManager9HasObjectERKNSt6stringE"]], "gs::objectmanager::putobject (c++ function)": [[99, "_CPPv4N2gs13ObjectManager9PutObjectENSt10shared_ptrI8GSObjectEE"]], "gs::objectmanager::removeobject (c++ function)": [[99, "_CPPv4N2gs13ObjectManager12RemoveObjectERKNSt6stringE"]], "gs::parallelpropertyworker (c++ class)": [[99, "_CPPv4I0EN2gs22ParallelPropertyWorkerE"]], "gs::parallelpropertyworker::finalize (c++ function)": [[99, "_CPPv4N2gs22ParallelPropertyWorker8FinalizeEv"]], "gs::parallelpropertyworker::getcontext (c++ function)": [[99, "_CPPv4N2gs22ParallelPropertyWorker10GetContextEv"]], "gs::parallelpropertyworker::init (c++ function)": [[99, "_CPPv4N2gs22ParallelPropertyWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::parallelpropertyworker::output (c++ function)": [[99, "_CPPv4N2gs22ParallelPropertyWorker6OutputERNSt7ostreamE"]], "gs::parallelpropertyworker::parallelpropertyworker (c++ function)": [[99, "_CPPv4N2gs22ParallelPropertyWorker22ParallelPropertyWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::parallelpropertyworker::query (c++ function)": [[99, "_CPPv4IDpEN2gs22ParallelPropertyWorker5QueryEvDpRR4Args"]], "gs::parallelpropertyworker::context_t (c++ type)": [[99, "_CPPv4N2gs22ParallelPropertyWorker9context_tE"]], "gs::parallelpropertyworker::fragment_t (c++ type)": [[99, "_CPPv4N2gs22ParallelPropertyWorker10fragment_tE"]], "gs::parallelpropertyworker::message_manager_t (c++ type)": [[99, "_CPPv4N2gs22ParallelPropertyWorker17message_manager_tE"]], "gs::parallelpropertyworker::~parallelpropertyworker (c++ function)": [[99, "_CPPv4N2gs22ParallelPropertyWorkerD0Ev"]], "gs::propertyappbase (c++ class)": [[99, "_CPPv4I00EN2gs15PropertyAppBaseE"]], "gs::propertyappbase::inceval (c++ function)": [[99, "_CPPv4N2gs15PropertyAppBase7IncEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::peval (c++ function)": [[99, "_CPPv4N2gs15PropertyAppBase5PEvalERK6FRAG_TR9CONTEXT_TR17message_manager_t"]], "gs::propertyappbase::propertyappbase (c++ function)": [[99, "_CPPv4N2gs15PropertyAppBase15PropertyAppBaseEv"]], "gs::propertyappbase::load_strategy (c++ member)": [[99, "_CPPv4N2gs15PropertyAppBase13load_strategyE"]], "gs::propertyappbase::message_manager_t (c++ type)": [[99, "_CPPv4N2gs15PropertyAppBase17message_manager_tE"]], "gs::propertyappbase::message_strategy (c++ member)": [[99, "_CPPv4N2gs15PropertyAppBase16message_strategyE"]], "gs::propertyappbase::need_split_edges (c++ member)": [[99, "_CPPv4N2gs15PropertyAppBase16need_split_edgesE"]], "gs::propertyappbase::~propertyappbase (c++ function)": [[99, "_CPPv4N2gs15PropertyAppBaseD0Ev"]], "gs::propertyautoappbase (c++ class)": [[99, "_CPPv4I00EN2gs19PropertyAutoAppBaseE"]], "gs::propertyautoappbase::inceval (c++ function)": [[99, "_CPPv4N2gs19PropertyAutoAppBase7IncEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::peval (c++ function)": [[99, "_CPPv4N2gs19PropertyAutoAppBase5PEvalERK6FRAG_TR9CONTEXT_T"]], "gs::propertyautoappbase::propertyautoappbase (c++ function)": [[99, "_CPPv4N2gs19PropertyAutoAppBase19PropertyAutoAppBaseEv"]], "gs::propertyautoappbase::load_strategy (c++ member)": [[99, "_CPPv4N2gs19PropertyAutoAppBase13load_strategyE"]], "gs::propertyautoappbase::message_strategy (c++ member)": [[99, "_CPPv4N2gs19PropertyAutoAppBase16message_strategyE"]], "gs::propertyautoappbase::need_split_edges (c++ member)": [[99, "_CPPv4N2gs19PropertyAutoAppBase16need_split_edgesE"]], "gs::propertyautoappbase::~propertyautoappbase (c++ function)": [[99, "_CPPv4N2gs19PropertyAutoAppBaseD0Ev"]], "gs::propertyautoworker (c++ class)": [[99, "_CPPv4I0EN2gs18PropertyAutoWorkerE"]], "gs::propertyautoworker::finalize (c++ function)": [[99, "_CPPv4N2gs18PropertyAutoWorker8FinalizeEv"]], "gs::propertyautoworker::getcontext (c++ function)": [[99, "_CPPv4N2gs18PropertyAutoWorker10GetContextEv"]], "gs::propertyautoworker::init (c++ function)": [[99, "_CPPv4N2gs18PropertyAutoWorker4InitERKN5grape8CommSpecERKN5grape18ParallelEngineSpecE"]], "gs::propertyautoworker::output (c++ function)": [[99, "_CPPv4N2gs18PropertyAutoWorker6OutputERNSt7ostreamE"]], "gs::propertyautoworker::propertyautoworker (c++ function)": [[99, "_CPPv4N2gs18PropertyAutoWorker18PropertyAutoWorkerENSt10shared_ptrI5APP_TEENSt10shared_ptrI10fragment_tEE"]], "gs::propertyautoworker::query (c++ function)": [[99, "_CPPv4IDpEN2gs18PropertyAutoWorker5QueryEvDpRR4Args"]], "gs::propertyautoworker::context_t (c++ type)": [[99, "_CPPv4N2gs18PropertyAutoWorker9context_tE"]], "gs::propertyautoworker::fragment_t (c++ type)": [[99, "_CPPv4N2gs18PropertyAutoWorker10fragment_tE"]], "gs::propertyautoworker::message_manager_t (c++ type)": [[99, "_CPPv4N2gs18PropertyAutoWorker17message_manager_tE"]], "gs::propertyautoworker::~propertyautoworker (c++ function)": [[99, "_CPPv4N2gs18PropertyAutoWorkerD0Ev"]], "gs::tensorcontext (c++ class)": [[99, "_CPPv4I00EN2gs13TensorContextE"]], "gs::tensorcontext::tensorcontext (c++ function)": [[99, "_CPPv4N2gs13TensorContext13TensorContextERK10fragment_t"]], "gs::tensorcontext::assign (c++ function)": [[99, "_CPPv4N2gs13TensorContext6assignERK6data_t"], [99, "_CPPv4N2gs13TensorContext6assignERKNSt6vectorI6data_tEERKNSt6vectorI6size_tEE"]], "gs::tensorcontext::data_t (c++ type)": [[99, "_CPPv4N2gs13TensorContext6data_tE"]], "gs::tensorcontext::fragment (c++ function)": [[99, "_CPPv4N2gs13TensorContext8fragmentEv"]], "gs::tensorcontext::set_shape (c++ function)": [[99, "_CPPv4N2gs13TensorContext9set_shapeENSt6vectorINSt6size_tEEE"]], "gs::tensorcontext::shape (c++ function)": [[99, "_CPPv4NK2gs13TensorContext5shapeEv"]], "gs::tensorcontext::tensor (c++ function)": [[99, "_CPPv4N2gs13TensorContext6tensorEv"]], "gs::tensorcontextwrapper (c++ class)": [[99, "_CPPv4I000EN2gs20TensorContextWrapperE"]], "gs::tensorcontextwrapper::tensorcontextwrapper (c++ function)": [[99, "_CPPv4N2gs20TensorContextWrapper20TensorContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::tensorcontextwrapper::toarrowarrays (c++ function)": [[99, "_CPPv4N2gs20TensorContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::tensorcontextwrapper::todataframe (c++ function)": [[99, "_CPPv4N2gs20TensorContextWrapper11ToDataframeERKN5grape8CommSpecE"]], "gs::tensorcontextwrapper::tondarray (c++ function)": [[99, "_CPPv4N2gs20TensorContextWrapper9ToNdArrayERKN5grape8CommSpecE8uint32_t"]], "gs::tensorcontextwrapper::tovineyarddataframe (c++ function)": [[99, "_CPPv4N2gs20TensorContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientE"]], "gs::tensorcontextwrapper::tovineyardtensor (c++ function)": [[99, "_CPPv4N2gs20TensorContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientE8uint32_t"]], "gs::tensorcontextwrapper::context_type (c++ function)": [[99, "_CPPv4N2gs20TensorContextWrapper12context_typeEv"]], "gs::tensorcontextwrapper::fragment_wrapper (c++ function)": [[99, "_CPPv4N2gs20TensorContextWrapper16fragment_wrapperEv"]], "gs::vertexdatacontextwrapper (c++ class)": [[99, "_CPPv4I00EN2gs24VertexDataContextWrapperE"]], "gs::vertexdatacontextwrapper::toarrowarrays (c++ function)": [[99, "_CPPv4N2gs24VertexDataContextWrapper13ToArrowArraysERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEE"]], "gs::vertexdatacontextwrapper::todataframe (c++ function)": [[99, "_CPPv4N2gs24VertexDataContextWrapper11ToDataframeERKN5grape8CommSpecERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tondarray (c++ function)": [[99, "_CPPv4N2gs24VertexDataContextWrapper9ToNdArrayERKN5grape8CommSpecERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyarddataframe (c++ function)": [[99, "_CPPv4N2gs24VertexDataContextWrapper19ToVineyardDataframeERKN5grape8CommSpecERN8vineyard6ClientERKNSt6vectorINSt4pairINSt6stringE8SelectorEEEERKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::tovineyardtensor (c++ function)": [[99, "_CPPv4N2gs24VertexDataContextWrapper16ToVineyardTensorERKN5grape8CommSpecERN8vineyard6ClientERK8SelectorRKNSt4pairINSt6stringENSt6stringEEE"]], "gs::vertexdatacontextwrapper::vertexdatacontextwrapper (c++ function)": [[99, "_CPPv4N2gs24VertexDataContextWrapper24VertexDataContextWrapperERKNSt6stringENSt10shared_ptrI16IFragmentWrapperEENSt10shared_ptrI9context_tEE"]], "gs::vertexdatacontextwrapper::context_type (c++ function)": [[99, "_CPPv4N2gs24VertexDataContextWrapper12context_typeEv"]], "gs::vertexdatacontextwrapper::fragment_wrapper (c++ function)": [[99, "_CPPv4N2gs24VertexDataContextWrapper16fragment_wrapperEv"]], "gs::vertexpropertycontext (c++ class)": [[99, "_CPPv4I0EN2gs21VertexPropertyContextE"]], "gs::vertexpropertycontext::vertexpropertycontext (c++ function)": [[99, "_CPPv4N2gs21VertexPropertyContext21VertexPropertyContextERK10fragment_t"]], "gs::vertexpropertycontext::add_column (c++ function)": [[99, "_CPPv4N2gs21VertexPropertyContext10add_columnERKNSt6stringE15ContextDataType"]], "gs::vertexpropertycontext::fragment (c++ function)": [[99, "_CPPv4N2gs21VertexPropertyContext8fragmentEv"]], "gs::vertexpropertycontext::fragment_t (c++ type)": [[99, "_CPPv4N2gs21VertexPropertyContext10fragment_tE"]], "gs::vertexpropertycontext::get_column (c++ function)": [[99, "_CPPv4N2gs21VertexPropertyContext10get_columnE7int64_t"], [99, "_CPPv4N2gs21VertexPropertyContext10get_columnERKNSt6stringE"]], "gs::vertexpropertycontext::get_typed_column (c++ function)": [[99, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEE7int64_t"], [99, "_CPPv4I0EN2gs21VertexPropertyContext16get_typed_columnENSt10shared_ptrI6ColumnI10fragment_t6DATA_TEEERKNSt6stringE"]], "gs::vertexpropertycontext::oid_t (c++ type)": [[99, "_CPPv4N2gs21VertexPropertyContext5oid_tE"]], "gs::vertexpropertycontext::prop_id_t (c++ type)": [[99, "_CPPv4N2gs21VertexPropertyContext9prop_id_tE"]], "gs::vertexpropertycontext::properties_map (c++ function)": [[99, "_CPPv4N2gs21VertexPropertyContext14properties_mapEv"]], "gs::vertexpropertycontext::vertex_properties (c++ function)": [[99, "_CPPv4N2gs21VertexPropertyContext17vertex_propertiesEv"]], "gs::vertexpropertycontext::vertex_t (c++ type)": [[99, "_CPPv4N2gs21VertexPropertyContext8vertex_tE"]], "gs::rpc::analyticalserver (c++ class)": [[99, "_CPPv4N2gs3rpc16AnalyticalServerE"]], "gs::rpc::analyticalserver::analyticalserver (c++ function)": [[99, "_CPPv4N2gs3rpc16AnalyticalServer16AnalyticalServerENSt10shared_ptrI10DispatcherEENSt6stringEi"]], "gs::rpc::analyticalserver::startserver (c++ function)": [[99, "_CPPv4N2gs3rpc16AnalyticalServer11StartServerEv"]], "gs::rpc::analyticalserver::stopserver (c++ function)": [[99, "_CPPv4N2gs3rpc16AnalyticalServer10StopServerEv"]], "app (class in graphscope.framework.app)": [[100, "graphscope.framework.app.App"]], "appassets (class in graphscope.framework.app)": [[100, "graphscope.framework.app.AppAssets"]], "appdagnode (class in graphscope.framework.app)": [[100, "graphscope.framework.app.AppDAGNode"]], "javaapp (class in graphscope.analytical.app)": [[100, "graphscope.analytical.app.JavaApp"]], "__call__() (graphscope.analytical.app.javaapp method)": [[100, "graphscope.analytical.app.JavaApp.__call__"]], "__del__() (graphscope.framework.app.app method)": [[100, "graphscope.framework.app.App.__del__"]], "__init__() (graphscope.analytical.app.javaapp method)": [[100, "graphscope.analytical.app.JavaApp.__init__"]], "__init__() (graphscope.framework.app.app method)": [[100, "graphscope.framework.app.App.__init__"]], "__init__() (graphscope.framework.app.appassets method)": [[100, "graphscope.framework.app.AppAssets.__init__"]], "algo (graphscope.framework.app.appassets property)": [[100, "graphscope.framework.app.AppAssets.algo"]], "attribute_assortativity_coefficient() (in module graphscope)": [[100, "graphscope.attribute_assortativity_coefficient"]], "average_degree_connectivity() (in module graphscope)": [[100, "graphscope.average_degree_connectivity"]], "average_shortest_path_length() (in module graphscope)": [[100, "graphscope.average_shortest_path_length"]], "avg_clustering() (in module graphscope)": [[100, "graphscope.avg_clustering"]], "bfs() (in module graphscope)": [[100, "graphscope.bfs"]], "cdlp() (in module graphscope)": [[100, "graphscope.cdlp"]], "clustering() (in module graphscope)": [[100, "graphscope.clustering"]], "context_type (graphscope.framework.app.appassets property)": [[100, "graphscope.framework.app.AppAssets.context_type"]], "degree_assortativity_coefficient() (in module graphscope)": [[100, "graphscope.degree_assortativity_coefficient"]], "degree_centrality() (in module graphscope)": [[100, "graphscope.degree_centrality"]], "eigenvector_centrality() (in module graphscope)": [[100, "graphscope.eigenvector_centrality"]], "gar (graphscope.framework.app.appassets property)": [[100, "graphscope.framework.app.AppAssets.gar"]], "hits() (in module graphscope)": [[100, "graphscope.hits"]], "is_compatible() (graphscope.analytical.app.javaapp method)": [[100, "graphscope.analytical.app.JavaApp.is_compatible"]], "is_compatible() (graphscope.framework.app.appassets method)": [[100, "graphscope.framework.app.AppAssets.is_compatible"]], "is_simple_path() (in module graphscope)": [[100, "graphscope.is_simple_path"]], "k_core() (in module graphscope)": [[100, "graphscope.k_core"]], "k_shell() (in module graphscope)": [[100, "graphscope.k_shell"]], "katz_centrality() (in module graphscope)": [[100, "graphscope.katz_centrality"]], "key (graphscope.framework.app.app property)": [[100, "graphscope.framework.app.App.key"]], "louvain() (in module graphscope)": [[100, "graphscope.louvain"]], "lpa() (in module graphscope)": [[100, "graphscope.lpa"]], "lpa_u2i() (in module graphscope)": [[100, "graphscope.lpa_u2i"]], "numeric_assortativity_coefficient() (in module graphscope)": [[100, "graphscope.numeric_assortativity_coefficient"]], "pagerank() (in module graphscope)": [[100, "graphscope.pagerank"]], "pagerank_nx() (in module graphscope)": [[100, "graphscope.pagerank_nx"]], "signature (graphscope.framework.app.app property)": [[100, "graphscope.framework.app.App.signature"]], "signature (graphscope.framework.app.appassets property)": [[100, "graphscope.framework.app.AppAssets.signature"]], "signature() (graphscope.analytical.app.javaapp method)": [[100, "graphscope.analytical.app.JavaApp.signature"]], "sssp() (in module graphscope)": [[100, "graphscope.sssp"]], "triangles() (in module graphscope)": [[100, "graphscope.triangles"]], "type (graphscope.framework.app.appassets property)": [[100, "graphscope.framework.app.AppAssets.type"]], "voterank() (in module graphscope)": [[100, "graphscope.voterank"]], "wcc() (in module graphscope)": [[100, "graphscope.wcc"]], "basecontextdagnode (class in graphscope.framework.context)": [[101, "graphscope.framework.context.BaseContextDAGNode"]], "context (class in graphscope.framework.context)": [[101, "graphscope.framework.context.Context"]], "dynamicvertexdatacontext (class in graphscope.framework.context)": [[101, "graphscope.framework.context.DynamicVertexDataContext"]], "labeledvertexdatacontextdagnode (class in graphscope.framework.context)": [[101, "graphscope.framework.context.LabeledVertexDataContextDAGNode"]], "labeledvertexpropertycontextdagnode (class in graphscope.framework.context)": [[101, "graphscope.framework.context.LabeledVertexPropertyContextDAGNode"]], "resultdagnode (class in graphscope.framework.context)": [[101, "graphscope.framework.context.ResultDAGNode"]], "tensorcontextdagnode (class in graphscope.framework.context)": [[101, "graphscope.framework.context.TensorContextDAGNode"]], "vertexdatacontextdagnode (class in graphscope.framework.context)": [[101, "graphscope.framework.context.VertexDataContextDAGNode"]], "vertexpropertycontextdagnode (class in graphscope.framework.context)": [[101, "graphscope.framework.context.VertexPropertyContextDAGNode"]], "to_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[101, "graphscope.framework.context.BaseContextDAGNode.to_dataframe"]], "to_numpy() (graphscope.framework.context.basecontextdagnode method)": [[101, "graphscope.framework.context.BaseContextDAGNode.to_numpy"]], "to_vineyard_dataframe() (graphscope.framework.context.basecontextdagnode method)": [[101, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_dataframe"]], "to_vineyard_tensor() (graphscope.framework.context.basecontextdagnode method)": [[101, "graphscope.framework.context.BaseContextDAGNode.to_vineyard_tensor"]], "vertex (in module graphscope)": [[106, "graphscope.Vertex"]], "declare() (in module graphscope)": [[107, "graphscope.declare"]], "load_app() (in module graphscope.framework.app)": [[108, "graphscope.framework.app.load_app"]], "add_column() (in module graphscope.framework.dag_utils)": [[109, "graphscope.framework.dag_utils.add_column"]], "add_labels_to_graph() (in module graphscope.framework.dag_utils)": [[110, "graphscope.framework.dag_utils.add_labels_to_graph"]], "arrow_to_dynamic() (in module graphscope.framework.dag_utils)": [[111, "graphscope.framework.dag_utils.arrow_to_dynamic"]], "bind_app() (in module graphscope.framework.dag_utils)": [[112, "graphscope.framework.dag_utils.bind_app"]], "clear_edges() (in module graphscope.framework.dag_utils)": [[113, "graphscope.framework.dag_utils.clear_edges"]], "clear_graph() (in module graphscope.framework.dag_utils)": [[114, "graphscope.framework.dag_utils.clear_graph"]], "context_to_dataframe() (in module graphscope.framework.dag_utils)": [[115, "graphscope.framework.dag_utils.context_to_dataframe"]], "context_to_numpy() (in module graphscope.framework.dag_utils)": [[116, "graphscope.framework.dag_utils.context_to_numpy"]], "copy_graph() (in module graphscope.framework.dag_utils)": [[117, "graphscope.framework.dag_utils.copy_graph"]], "create_app() (in module graphscope.framework.dag_utils)": [[118, "graphscope.framework.dag_utils.create_app"]], "create_graph() (in module graphscope.framework.dag_utils)": [[119, "graphscope.framework.dag_utils.create_graph"]], "create_graph_view() (in module graphscope.framework.dag_utils)": [[120, "graphscope.framework.dag_utils.create_graph_view"]], "create_loader() (in module graphscope.framework.dag_utils)": [[121, "graphscope.framework.dag_utils.create_loader"]], "create_subgraph() (in module graphscope.framework.dag_utils)": [[122, "graphscope.framework.dag_utils.create_subgraph"]], "create_unload_op() (in module graphscope.framework.dag_utils)": [[123, "graphscope.framework.dag_utils.create_unload_op"]], "dynamic_to_arrow() (in module graphscope.framework.dag_utils)": [[124, "graphscope.framework.dag_utils.dynamic_to_arrow"]], "get_context_data() (in module graphscope.framework.dag_utils)": [[125, "graphscope.framework.dag_utils.get_context_data"]], "graph_to_dataframe() (in module graphscope.framework.dag_utils)": [[126, "graphscope.framework.dag_utils.graph_to_dataframe"]], "graph_to_numpy() (in module graphscope.framework.dag_utils)": [[127, "graphscope.framework.dag_utils.graph_to_numpy"]], "gremlin_to_subgraph() (in module graphscope.framework.dag_utils)": [[128, "graphscope.framework.dag_utils.gremlin_to_subgraph"]], "modify_edges() (in module graphscope.framework.dag_utils)": [[129, "graphscope.framework.dag_utils.modify_edges"]], "modify_vertices() (in module graphscope.framework.dag_utils)": [[130, "graphscope.framework.dag_utils.modify_vertices"]], "output() (in module graphscope.framework.dag_utils)": [[131, "graphscope.framework.dag_utils.output"]], "project_arrow_property_graph() (in module graphscope.framework.dag_utils)": [[132, "graphscope.framework.dag_utils.project_arrow_property_graph"]], "project_to_simple() (in module graphscope.framework.dag_utils)": [[133, "graphscope.framework.dag_utils.project_to_simple"]], "report_graph() (in module graphscope.framework.dag_utils)": [[134, "graphscope.framework.dag_utils.report_graph"]], "run_app() (in module graphscope.framework.dag_utils)": [[135, "graphscope.framework.dag_utils.run_app"]], "to_data_sink() (in module graphscope.framework.dag_utils)": [[136, "graphscope.framework.dag_utils.to_data_sink"]], "to_directed() (in module graphscope.framework.dag_utils)": [[137, "graphscope.framework.dag_utils.to_directed"]], "to_undirected() (in module graphscope.framework.dag_utils)": [[138, "graphscope.framework.dag_utils.to_undirected"]], "to_vineyard_dataframe() (in module graphscope.framework.dag_utils)": [[139, "graphscope.framework.dag_utils.to_vineyard_dataframe"]], "to_vineyard_tensor() (in module graphscope.framework.dag_utils)": [[140, "graphscope.framework.dag_utils.to_vineyard_tensor"]], "unload_app() (in module graphscope.framework.dag_utils)": [[141, "graphscope.framework.dag_utils.unload_app"]], "unload_context() (in module graphscope.framework.dag_utils)": [[142, "graphscope.framework.dag_utils.unload_context"]], "unload_graph() (in module graphscope.framework.dag_utils)": [[143, "graphscope.framework.dag_utils.unload_graph"]], "__init__() (graphscope.framework.operation.operation method)": [[144, "graphscope.framework.operation.Operation.__init__"]], "as_op_def() (graphscope.framework.operation.operation method)": [[145, "graphscope.framework.operation.Operation.as_op_def"]], "eval() (graphscope.framework.operation.operation method)": [[146, "graphscope.framework.operation.Operation.eval"]], "evaluated (graphscope.framework.operation.operation property)": [[147, "graphscope.framework.operation.Operation.evaluated"]], "key (graphscope.framework.operation.operation property)": [[148, "graphscope.framework.operation.Operation.key"]], "signature (graphscope.framework.operation.operation property)": [[149, "graphscope.framework.operation.Operation.signature"]], "g() (in module graphscope)": [[150, "graphscope.g"]], "get_default_session() (in module graphscope)": [[151, "graphscope.get_default_session"]], "graphlearn() (in module graphscope)": [[152, "graphscope.graphlearn"]], "gremlin() (in module graphscope)": [[153, "graphscope.gremlin"]], "has_default_session() (in module graphscope)": [[154, "graphscope.has_default_session"]], "session (in module graphscope)": [[155, "graphscope.session"]], "set_option() (in module graphscope)": [[156, "graphscope.set_option"]], "graph (class in graphscope.framework.graph)": [[171, "graphscope.framework.graph.Graph"]], "graphdagnode (class in graphscope.framework.graph)": [[171, "graphscope.framework.graph.GraphDAGNode"]], "loader (class in graphscope.framework.loader)": [[171, "graphscope.framework.loader.Loader"]], "__init__() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.__init__"]], "__init__() (graphscope.framework.graph.graphdagnode method)": [[171, "graphscope.framework.graph.GraphDAGNode.__init__"]], "__init__() (graphscope.framework.loader.loader method)": [[171, "graphscope.framework.loader.Loader.__init__"]], "add_column() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.add_column"]], "add_column() (graphscope.framework.graph.graphdagnode method)": [[171, "graphscope.framework.graph.GraphDAGNode.add_column"]], "add_edges() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.add_edges"]], "add_edges() (graphscope.framework.graph.graphdagnode method)": [[171, "graphscope.framework.graph.GraphDAGNode.add_edges"]], "add_vertices() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.add_vertices"]], "add_vertices() (graphscope.framework.graph.graphdagnode method)": [[171, "graphscope.framework.graph.GraphDAGNode.add_vertices"]], "archive() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.archive"]], "consolidate_columns() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.consolidate_columns"]], "consolidate_columns() (graphscope.framework.graph.graphdagnode method)": [[171, "graphscope.framework.graph.GraphDAGNode.consolidate_columns"]], "detach() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.detach"]], "key (graphscope.framework.graph.graph property)": [[171, "graphscope.framework.graph.Graph.key"]], "load_from() (graphscope.framework.graph.graph class method)": [[171, "graphscope.framework.graph.Graph.load_from"]], "load_from() (in module graphscope.framework.graph_builder)": [[171, "graphscope.framework.graph_builder.load_from"]], "loaded() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.loaded"]], "project() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.project"]], "project() (graphscope.framework.graph.graphdagnode method)": [[171, "graphscope.framework.graph.GraphDAGNode.project"]], "save_to() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.save_to"]], "schema (graphscope.framework.graph.graph property)": [[171, "graphscope.framework.graph.Graph.schema"]], "schema_path (graphscope.framework.graph.graph property)": [[171, "graphscope.framework.graph.Graph.schema_path"]], "session_id (graphscope.framework.graph.graph property)": [[171, "graphscope.framework.graph.Graph.session_id"]], "to_dataframe() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.to_dataframe"]], "to_directed() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.to_directed"]], "to_numpy() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.to_numpy"]], "to_undirected() (graphscope.framework.graph.graph method)": [[171, "graphscope.framework.graph.Graph.to_undirected"]], "vineyard_id (graphscope.framework.graph.graph property)": [[171, "graphscope.framework.graph.Graph.vineyard_id"]], "interactivequery (class in graphscope.interactive.query)": [[172, "graphscope.interactive.query.InteractiveQuery"]], "__init__() (graphscope.interactive.query.interactivequery method)": [[172, "graphscope.interactive.query.InteractiveQuery.__init__"]], "close() (graphscope.interactive.query.interactivequery method)": [[172, "graphscope.interactive.query.InteractiveQuery.close"]], "cypher_driver (graphscope.interactive.query.interactivequery property)": [[172, "graphscope.interactive.query.InteractiveQuery.cypher_driver"]], "cypher_url (graphscope.interactive.query.interactivequery property)": [[172, "graphscope.interactive.query.InteractiveQuery.cypher_url"]], "execute() (graphscope.interactive.query.interactivequery method)": [[172, "graphscope.interactive.query.InteractiveQuery.execute"]], "graph_url (graphscope.interactive.query.interactivequery property)": [[172, "graphscope.interactive.query.InteractiveQuery.graph_url"]], "gremlin_client (graphscope.interactive.query.interactivequery property)": [[172, "graphscope.interactive.query.InteractiveQuery.gremlin_client"]], "gremlin_url (graphscope.interactive.query.interactivequery property)": [[172, "graphscope.interactive.query.InteractiveQuery.gremlin_url"]], "object_id (graphscope.interactive.query.interactivequery property)": [[172, "graphscope.interactive.query.InteractiveQuery.object_id"]], "session (graphscope.interactive.query.interactivequery property)": [[172, "graphscope.interactive.query.InteractiveQuery.session"]], "session_id (graphscope.interactive.query.interactivequery property)": [[172, "graphscope.interactive.query.InteractiveQuery.session_id"]], "subgraph() (graphscope.interactive.query.interactivequery method)": [[172, "graphscope.interactive.query.InteractiveQuery.subgraph"]], "submit() (graphscope.interactive.query.interactivequery method)": [[172, "graphscope.interactive.query.InteractiveQuery.submit"]], "traversal_source() (graphscope.interactive.query.interactivequery method)": [[172, "graphscope.interactive.query.InteractiveQuery.traversal_source"]], "e() (graphscope.learning.graph.graph method)": [[173, "graphscope.learning.graph.Graph.E"]], "graph (class in graphscope.learning.graph)": [[173, "graphscope.learning.graph.Graph"]], "v() (graphscope.learning.graph.graph method)": [[173, "graphscope.learning.graph.Graph.V"]], "__init__() (graphscope.learning.graph.graph method)": [[173, "graphscope.learning.graph.Graph.__init__"]], "get_handle() (graphscope.learning.graph.graph method)": [[173, "graphscope.learning.graph.Graph.get_handle"]], "average_clustering() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.average_clustering"]], "average_shortest_path_length() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.average_shortest_path_length"]], "bfs_edges() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.bfs_edges"]], "clustering() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.clustering"]], "degree_centrality() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.degree_centrality"]], "eigenvector_centrality() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.eigenvector_centrality"]], "has_path() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.has_path"]], "hits() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.hits"]], "in_degree_centrality() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.in_degree_centrality"]], "k_core() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.k_core"]], "katz_centrality() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.katz_centrality"]], "out_degree_centrality() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.out_degree_centrality"]], "triangles() (in module graphscope.nx.builtin)": [[174, "graphscope.nx.builtin.triangles"]], "graphscope.nx.classes.function": [[175, "module-graphscope.nx.classes.function"]], "module": [[175, "module-graphscope.nx.classes.function"], [308, "module-graphscope.nx.generators.atlas"], [308, "module-graphscope.nx.generators.classic"], [308, "module-graphscope.nx.generators.community"], [308, "module-graphscope.nx.generators.degree_seq"], [308, "module-graphscope.nx.generators.directed"], [308, "module-graphscope.nx.generators.duplication"], [308, "module-graphscope.nx.generators.ego"], [308, "module-graphscope.nx.generators.expanders"], [308, "module-graphscope.nx.generators.geometric"], [308, "module-graphscope.nx.generators.harary_graph"], [308, "module-graphscope.nx.generators.intersection"], [308, "module-graphscope.nx.generators.joint_degree_seq"], [308, "module-graphscope.nx.generators.mycielski"], [308, "module-graphscope.nx.generators.nonisomorphic_trees"], [308, "module-graphscope.nx.generators.small"], [308, "module-graphscope.nx.generators.social"], [308, "module-graphscope.nx.generators.spectral_graph_forge"], [308, "module-graphscope.nx.generators.sudoku"], [308, "module-graphscope.nx.generators.trees"], [308, "module-graphscope.nx.generators.triads"], [308, "module-networkx.generators.internet_as_graphs"], [308, "module-networkx.generators.stochastic"], [313, "module-graphscope.framework.dag_utils"]], "add_cycle() (in module graphscope.nx.classes.function)": [[176, "graphscope.nx.classes.function.add_cycle"]], "add_path() (in module graphscope.nx.classes.function)": [[177, "graphscope.nx.classes.function.add_path"]], "add_star() (in module graphscope.nx.classes.function)": [[178, "graphscope.nx.classes.function.add_star"]], "all_neighbors() (in module graphscope.nx.classes.function)": [[179, "graphscope.nx.classes.function.all_neighbors"]], "common_neighbors() (in module graphscope.nx.classes.function)": [[180, "graphscope.nx.classes.function.common_neighbors"]], "create_empty_copy() (in module graphscope.nx.classes.function)": [[181, "graphscope.nx.classes.function.create_empty_copy"]], "degree() (in module graphscope.nx.classes.function)": [[182, "graphscope.nx.classes.function.degree"]], "degree_histogram() (in module graphscope.nx.classes.function)": [[183, "graphscope.nx.classes.function.degree_histogram"]], "density() (in module graphscope.nx.classes.function)": [[184, "graphscope.nx.classes.function.density"]], "edge_subgraph() (in module graphscope.nx.classes.function)": [[185, "graphscope.nx.classes.function.edge_subgraph"]], "edges() (in module graphscope.nx.classes.function)": [[186, "graphscope.nx.classes.function.edges"]], "freeze() (in module graphscope.nx.classes.function)": [[187, "graphscope.nx.classes.function.freeze"]], "induced_subgraph() (in module graphscope.nx.classes.function)": [[188, "graphscope.nx.classes.function.induced_subgraph"]], "info() (in module graphscope.nx.classes.function)": [[189, "graphscope.nx.classes.function.info"]], "is_directed() (in module graphscope.nx.classes.function)": [[190, "graphscope.nx.classes.function.is_directed"]], "is_empty() (in module graphscope.nx.classes.function)": [[191, "graphscope.nx.classes.function.is_empty"]], "is_frozen() (in module graphscope.nx.classes.function)": [[192, "graphscope.nx.classes.function.is_frozen"]], "is_negatively_weighted() (in module graphscope.nx.classes.function)": [[193, "graphscope.nx.classes.function.is_negatively_weighted"]], "is_weighted() (in module graphscope.nx.classes.function)": [[194, "graphscope.nx.classes.function.is_weighted"]], "neighbors() (in module graphscope.nx.classes.function)": [[195, "graphscope.nx.classes.function.neighbors"]], "nodes() (in module graphscope.nx.classes.function)": [[196, "graphscope.nx.classes.function.nodes"]], "nodes_with_selfloops() (in module graphscope.nx.classes.function)": [[197, "graphscope.nx.classes.function.nodes_with_selfloops"]], "non_edges() (in module graphscope.nx.classes.function)": [[198, "graphscope.nx.classes.function.non_edges"]], "non_neighbors() (in module graphscope.nx.classes.function)": [[199, "graphscope.nx.classes.function.non_neighbors"]], "number_of_edges() (in module graphscope.nx.classes.function)": [[200, "graphscope.nx.classes.function.number_of_edges"]], "number_of_nodes() (in module graphscope.nx.classes.function)": [[201, "graphscope.nx.classes.function.number_of_nodes"]], "number_of_selfloops() (in module graphscope.nx.classes.function)": [[202, "graphscope.nx.classes.function.number_of_selfloops"]], "selfloop_edges() (in module graphscope.nx.classes.function)": [[203, "graphscope.nx.classes.function.selfloop_edges"]], "subgraph() (in module graphscope.nx.classes.function)": [[204, "graphscope.nx.classes.function.subgraph"]], "to_directed() (in module graphscope.nx.classes.function)": [[205, "graphscope.nx.classes.function.to_directed"]], "to_undirected() (in module graphscope.nx.classes.function)": [[206, "graphscope.nx.classes.function.to_undirected"]], "graph_atlas() (in module graphscope.nx.generators.atlas)": [[207, "graphscope.nx.generators.atlas.graph_atlas"]], "graph_atlas_g() (in module graphscope.nx.generators.atlas)": [[208, "graphscope.nx.generators.atlas.graph_atlas_g"]], "balanced_tree() (in module graphscope.nx.generators.classic)": [[209, "graphscope.nx.generators.classic.balanced_tree"]], "barbell_graph() (in module graphscope.nx.generators.classic)": [[210, "graphscope.nx.generators.classic.barbell_graph"]], "binomial_tree() (in module graphscope.nx.generators.classic)": [[211, "graphscope.nx.generators.classic.binomial_tree"]], "circulant_graph() (in module graphscope.nx.generators.classic)": [[212, "graphscope.nx.generators.classic.circulant_graph"]], "circular_ladder_graph() (in module graphscope.nx.generators.classic)": [[213, "graphscope.nx.generators.classic.circular_ladder_graph"]], "complete_graph() (in module graphscope.nx.generators.classic)": [[214, "graphscope.nx.generators.classic.complete_graph"]], "complete_multipartite_graph() (in module graphscope.nx.generators.classic)": [[215, "graphscope.nx.generators.classic.complete_multipartite_graph"]], "cycle_graph() (in module graphscope.nx.generators.classic)": [[216, "graphscope.nx.generators.classic.cycle_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module graphscope.nx.generators.classic)": [[217, "graphscope.nx.generators.classic.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module graphscope.nx.generators.classic)": [[218, "graphscope.nx.generators.classic.empty_graph"]], "full_rary_tree() (in module graphscope.nx.generators.classic)": [[219, "graphscope.nx.generators.classic.full_rary_tree"]], "ladder_graph() (in module graphscope.nx.generators.classic)": [[220, "graphscope.nx.generators.classic.ladder_graph"]], "lollipop_graph() (in module graphscope.nx.generators.classic)": [[221, "graphscope.nx.generators.classic.lollipop_graph"]], "null_graph() (in module graphscope.nx.generators.classic)": [[222, "graphscope.nx.generators.classic.null_graph"]], "path_graph() (in module graphscope.nx.generators.classic)": [[223, "graphscope.nx.generators.classic.path_graph"]], "star_graph() (in module graphscope.nx.generators.classic)": [[224, "graphscope.nx.generators.classic.star_graph"]], "trivial_graph() (in module graphscope.nx.generators.classic)": [[225, "graphscope.nx.generators.classic.trivial_graph"]], "turan_graph() (in module graphscope.nx.generators.classic)": [[226, "graphscope.nx.generators.classic.turan_graph"]], "wheel_graph() (in module graphscope.nx.generators.classic)": [[227, "graphscope.nx.generators.classic.wheel_graph"]], "lfr_benchmark_graph() (in module graphscope.nx.generators.community)": [[228, "graphscope.nx.generators.community.LFR_benchmark_graph"]], "caveman_graph() (in module graphscope.nx.generators.community)": [[229, "graphscope.nx.generators.community.caveman_graph"]], "connected_caveman_graph() (in module graphscope.nx.generators.community)": [[230, "graphscope.nx.generators.community.connected_caveman_graph"]], "gaussian_random_partition_graph() (in module graphscope.nx.generators.community)": [[231, "graphscope.nx.generators.community.gaussian_random_partition_graph"]], "planted_partition_graph() (in module graphscope.nx.generators.community)": [[232, "graphscope.nx.generators.community.planted_partition_graph"]], "random_partition_graph() (in module graphscope.nx.generators.community)": [[233, "graphscope.nx.generators.community.random_partition_graph"]], "relaxed_caveman_graph() (in module graphscope.nx.generators.community)": [[234, "graphscope.nx.generators.community.relaxed_caveman_graph"]], "ring_of_cliques() (in module graphscope.nx.generators.community)": [[235, "graphscope.nx.generators.community.ring_of_cliques"]], "stochastic_block_model() (in module graphscope.nx.generators.community)": [[236, "graphscope.nx.generators.community.stochastic_block_model"]], "windmill_graph() (in module graphscope.nx.generators.community)": [[237, "graphscope.nx.generators.community.windmill_graph"]], "configuration_model() (in module graphscope.nx.generators.degree_seq)": [[238, "graphscope.nx.generators.degree_seq.configuration_model"]], "degree_sequence_tree() (in module graphscope.nx.generators.degree_seq)": [[239, "graphscope.nx.generators.degree_seq.degree_sequence_tree"]], "directed_configuration_model() (in module graphscope.nx.generators.degree_seq)": [[240, "graphscope.nx.generators.degree_seq.directed_configuration_model"]], "directed_havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[241, "graphscope.nx.generators.degree_seq.directed_havel_hakimi_graph"]], "expected_degree_graph() (in module graphscope.nx.generators.degree_seq)": [[242, "graphscope.nx.generators.degree_seq.expected_degree_graph"]], "havel_hakimi_graph() (in module graphscope.nx.generators.degree_seq)": [[243, "graphscope.nx.generators.degree_seq.havel_hakimi_graph"]], "random_degree_sequence_graph() (in module graphscope.nx.generators.degree_seq)": [[244, "graphscope.nx.generators.degree_seq.random_degree_sequence_graph"]], "gn_graph() (in module graphscope.nx.generators.directed)": [[245, "graphscope.nx.generators.directed.gn_graph"]], "gnc_graph() (in module graphscope.nx.generators.directed)": [[246, "graphscope.nx.generators.directed.gnc_graph"]], "gnr_graph() (in module graphscope.nx.generators.directed)": [[247, "graphscope.nx.generators.directed.gnr_graph"]], "random_k_out_graph() (in module graphscope.nx.generators.directed)": [[248, "graphscope.nx.generators.directed.random_k_out_graph"]], "scale_free_graph() (in module graphscope.nx.generators.directed)": [[249, "graphscope.nx.generators.directed.scale_free_graph"]], "duplication_divergence_graph() (in module graphscope.nx.generators.duplication)": [[250, "graphscope.nx.generators.duplication.duplication_divergence_graph"]], "partial_duplication_graph() (in module graphscope.nx.generators.duplication)": [[251, "graphscope.nx.generators.duplication.partial_duplication_graph"]], "ego_graph() (in module graphscope.nx.generators.ego)": [[252, "graphscope.nx.generators.ego.ego_graph"]], "chordal_cycle_graph() (in module graphscope.nx.generators.expanders)": [[253, "graphscope.nx.generators.expanders.chordal_cycle_graph"]], "margulis_gabber_galil_graph() (in module graphscope.nx.generators.expanders)": [[254, "graphscope.nx.generators.expanders.margulis_gabber_galil_graph"]], "paley_graph() (in module graphscope.nx.generators.expanders)": [[255, "graphscope.nx.generators.expanders.paley_graph"]], "geographical_threshold_graph() (in module graphscope.nx.generators.geometric)": [[256, "graphscope.nx.generators.geometric.geographical_threshold_graph"]], "random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[257, "graphscope.nx.generators.geometric.random_geometric_graph"]], "soft_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[258, "graphscope.nx.generators.geometric.soft_random_geometric_graph"]], "thresholded_random_geometric_graph() (in module graphscope.nx.generators.geometric)": [[259, "graphscope.nx.generators.geometric.thresholded_random_geometric_graph"]], "waxman_graph() (in module graphscope.nx.generators.geometric)": [[260, "graphscope.nx.generators.geometric.waxman_graph"]], "hkn_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[261, "graphscope.nx.generators.harary_graph.hkn_harary_graph"]], "hnm_harary_graph() (in module graphscope.nx.generators.harary_graph)": [[262, "graphscope.nx.generators.harary_graph.hnm_harary_graph"]], "general_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[263, "graphscope.nx.generators.intersection.general_random_intersection_graph"]], "k_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[264, "graphscope.nx.generators.intersection.k_random_intersection_graph"]], "uniform_random_intersection_graph() (in module graphscope.nx.generators.intersection)": [[265, "graphscope.nx.generators.intersection.uniform_random_intersection_graph"]], "directed_joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[266, "graphscope.nx.generators.joint_degree_seq.directed_joint_degree_graph"]], "is_valid_directed_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[267, "graphscope.nx.generators.joint_degree_seq.is_valid_directed_joint_degree"]], "is_valid_joint_degree() (in module graphscope.nx.generators.joint_degree_seq)": [[268, "graphscope.nx.generators.joint_degree_seq.is_valid_joint_degree"]], "joint_degree_graph() (in module graphscope.nx.generators.joint_degree_seq)": [[269, "graphscope.nx.generators.joint_degree_seq.joint_degree_graph"]], "mycielski_graph() (in module graphscope.nx.generators.mycielski)": [[270, "graphscope.nx.generators.mycielski.mycielski_graph"]], "mycielskian() (in module graphscope.nx.generators.mycielski)": [[271, "graphscope.nx.generators.mycielski.mycielskian"]], "nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[272, "graphscope.nx.generators.nonisomorphic_trees.nonisomorphic_trees"]], "number_of_nonisomorphic_trees() (in module graphscope.nx.generators.nonisomorphic_trees)": [[273, "graphscope.nx.generators.nonisomorphic_trees.number_of_nonisomorphic_trees"]], "lcf_graph() (in module graphscope.nx.generators.small)": [[274, "graphscope.nx.generators.small.LCF_graph"]], "bull_graph() (in module graphscope.nx.generators.small)": [[275, "graphscope.nx.generators.small.bull_graph"]], "chvatal_graph() (in module graphscope.nx.generators.small)": [[276, "graphscope.nx.generators.small.chvatal_graph"]], "cubical_graph() (in module graphscope.nx.generators.small)": [[277, "graphscope.nx.generators.small.cubical_graph"]], "desargues_graph() (in module graphscope.nx.generators.small)": [[278, "graphscope.nx.generators.small.desargues_graph"]], "diamond_graph() (in module graphscope.nx.generators.small)": [[279, "graphscope.nx.generators.small.diamond_graph"]], "dodecahedral_graph() (in module graphscope.nx.generators.small)": [[280, "graphscope.nx.generators.small.dodecahedral_graph"]], "frucht_graph() (in module graphscope.nx.generators.small)": [[281, "graphscope.nx.generators.small.frucht_graph"]], "heawood_graph() (in module graphscope.nx.generators.small)": [[282, "graphscope.nx.generators.small.heawood_graph"]], "house_graph() (in module graphscope.nx.generators.small)": [[283, "graphscope.nx.generators.small.house_graph"]], "house_x_graph() (in module graphscope.nx.generators.small)": [[284, "graphscope.nx.generators.small.house_x_graph"]], "icosahedral_graph() (in module graphscope.nx.generators.small)": [[285, "graphscope.nx.generators.small.icosahedral_graph"]], "krackhardt_kite_graph() (in module graphscope.nx.generators.small)": [[286, "graphscope.nx.generators.small.krackhardt_kite_graph"]], "make_small_graph() (in module graphscope.nx.generators.small)": [[287, "graphscope.nx.generators.small.make_small_graph"]], "moebius_kantor_graph() (in module graphscope.nx.generators.small)": [[288, "graphscope.nx.generators.small.moebius_kantor_graph"]], "octahedral_graph() (in module graphscope.nx.generators.small)": [[289, "graphscope.nx.generators.small.octahedral_graph"]], "pappus_graph() (in module graphscope.nx.generators.small)": [[290, "graphscope.nx.generators.small.pappus_graph"]], "petersen_graph() (in module graphscope.nx.generators.small)": [[291, "graphscope.nx.generators.small.petersen_graph"]], "sedgewick_maze_graph() (in module graphscope.nx.generators.small)": [[292, "graphscope.nx.generators.small.sedgewick_maze_graph"]], "tetrahedral_graph() (in module graphscope.nx.generators.small)": [[293, "graphscope.nx.generators.small.tetrahedral_graph"]], "truncated_cube_graph() (in module graphscope.nx.generators.small)": [[294, "graphscope.nx.generators.small.truncated_cube_graph"]], "truncated_tetrahedron_graph() (in module graphscope.nx.generators.small)": [[295, "graphscope.nx.generators.small.truncated_tetrahedron_graph"]], "tutte_graph() (in module graphscope.nx.generators.small)": [[296, "graphscope.nx.generators.small.tutte_graph"]], "davis_southern_women_graph() (in module graphscope.nx.generators.social)": [[297, "graphscope.nx.generators.social.davis_southern_women_graph"]], "florentine_families_graph() (in module graphscope.nx.generators.social)": [[298, "graphscope.nx.generators.social.florentine_families_graph"]], "karate_club_graph() (in module graphscope.nx.generators.social)": [[299, "graphscope.nx.generators.social.karate_club_graph"]], "les_miserables_graph() (in module graphscope.nx.generators.social)": [[300, "graphscope.nx.generators.social.les_miserables_graph"]], "spectral_graph_forge() (in module graphscope.nx.generators.spectral_graph_forge)": [[301, "graphscope.nx.generators.spectral_graph_forge.spectral_graph_forge"]], "sudoku_graph() (in module graphscope.nx.generators.sudoku)": [[302, "graphscope.nx.generators.sudoku.sudoku_graph"]], "prefix_tree() (in module graphscope.nx.generators.trees)": [[303, "graphscope.nx.generators.trees.prefix_tree"]], "random_tree() (in module graphscope.nx.generators.trees)": [[304, "graphscope.nx.generators.trees.random_tree"]], "triad_graph() (in module graphscope.nx.generators.triads)": [[305, "graphscope.nx.generators.triads.triad_graph"]], "random_internet_as_graph() (in module networkx.generators.internet_as_graphs)": [[306, "networkx.generators.internet_as_graphs.random_internet_as_graph"]], "stochastic_graph() (in module networkx.generators.stochastic)": [[307, "networkx.generators.stochastic.stochastic_graph"]], "graphscope.nx.generators.atlas": [[308, "module-graphscope.nx.generators.atlas"]], "graphscope.nx.generators.classic": [[308, "module-graphscope.nx.generators.classic"]], "graphscope.nx.generators.community": [[308, "module-graphscope.nx.generators.community"]], "graphscope.nx.generators.degree_seq": [[308, "module-graphscope.nx.generators.degree_seq"]], "graphscope.nx.generators.directed": [[308, "module-graphscope.nx.generators.directed"]], "graphscope.nx.generators.duplication": [[308, "module-graphscope.nx.generators.duplication"]], "graphscope.nx.generators.ego": [[308, "module-graphscope.nx.generators.ego"]], "graphscope.nx.generators.expanders": [[308, "module-graphscope.nx.generators.expanders"]], "graphscope.nx.generators.geometric": [[308, "module-graphscope.nx.generators.geometric"]], "graphscope.nx.generators.harary_graph": [[308, "module-graphscope.nx.generators.harary_graph"]], "graphscope.nx.generators.intersection": [[308, "module-graphscope.nx.generators.intersection"]], "graphscope.nx.generators.joint_degree_seq": [[308, "module-graphscope.nx.generators.joint_degree_seq"]], "graphscope.nx.generators.mycielski": [[308, "module-graphscope.nx.generators.mycielski"]], "graphscope.nx.generators.nonisomorphic_trees": [[308, "module-graphscope.nx.generators.nonisomorphic_trees"]], "graphscope.nx.generators.small": [[308, "module-graphscope.nx.generators.small"]], "graphscope.nx.generators.social": [[308, "module-graphscope.nx.generators.social"]], "graphscope.nx.generators.spectral_graph_forge": [[308, "module-graphscope.nx.generators.spectral_graph_forge"]], "graphscope.nx.generators.sudoku": [[308, "module-graphscope.nx.generators.sudoku"]], "graphscope.nx.generators.trees": [[308, "module-graphscope.nx.generators.trees"]], "graphscope.nx.generators.triads": [[308, "module-graphscope.nx.generators.triads"]], "networkx.generators.internet_as_graphs": [[308, "module-networkx.generators.internet_as_graphs"]], "networkx.generators.stochastic": [[308, "module-networkx.generators.stochastic"]], "digraph (class in graphscope.nx)": [[309, "graphscope.nx.DiGraph"]], "graph (class in graphscope.nx)": [[309, "graphscope.nx.Graph"]], "__contains__() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.__contains__"]], "__contains__() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.__contains__"]], "__getitem__() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.__getitem__"]], "__getitem__() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.__getitem__"]], "__init__() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.__init__"]], "__init__() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.__init__"]], "__iter__() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.__iter__"]], "__iter__() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.__iter__"]], "__len__() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.__len__"]], "__len__() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.__len__"]], "add_edge() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.add_edge"]], "add_edge() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.add_edge"]], "add_edges_from() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.add_edges_from"]], "add_edges_from() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.add_edges_from"]], "add_node() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.add_node"]], "add_node() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.add_node"]], "add_nodes_from() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.add_nodes_from"]], "add_nodes_from() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.add_nodes_from"]], "add_weighted_edges_from() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.add_weighted_edges_from"]], "add_weighted_edges_from() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.add_weighted_edges_from"]], "adj (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.adj"]], "adj (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.adj"]], "adjacency() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.adjacency"]], "adjacency() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.adjacency"]], "adjlist_inner_dict_factory (graphscope.nx.digraph attribute)": [[309, "graphscope.nx.DiGraph.adjlist_inner_dict_factory"]], "adjlist_inner_dict_factory (graphscope.nx.graph attribute)": [[309, "graphscope.nx.Graph.adjlist_inner_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.digraph attribute)": [[309, "graphscope.nx.DiGraph.adjlist_outer_dict_factory"]], "adjlist_outer_dict_factory (graphscope.nx.graph attribute)": [[309, "graphscope.nx.Graph.adjlist_outer_dict_factory"]], "clear() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.clear"]], "clear() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.clear"]], "clear_edges() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.clear_edges"]], "clear_edges() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.clear_edges"]], "copy() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.copy"]], "copy() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.copy"]], "degree (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.degree"]], "degree (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.degree"]], "edge_attr_dict_factory (graphscope.nx.digraph attribute)": [[309, "graphscope.nx.DiGraph.edge_attr_dict_factory"]], "edge_attr_dict_factory (graphscope.nx.graph attribute)": [[309, "graphscope.nx.Graph.edge_attr_dict_factory"]], "edge_subgraph() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.edge_subgraph"]], "edge_subgraph() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.edge_subgraph"]], "edges (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.edges"]], "edges (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.edges"]], "get_edge_data() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.get_edge_data"]], "get_edge_data() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.get_edge_data"]], "graph_attr_dict_factory (graphscope.nx.digraph attribute)": [[309, "graphscope.nx.DiGraph.graph_attr_dict_factory"]], "graph_attr_dict_factory (graphscope.nx.graph attribute)": [[309, "graphscope.nx.Graph.graph_attr_dict_factory"]], "graph_cache_factory (graphscope.nx.digraph attribute)": [[309, "graphscope.nx.DiGraph.graph_cache_factory"]], "graph_cache_factory (graphscope.nx.graph attribute)": [[309, "graphscope.nx.Graph.graph_cache_factory"]], "graph_type (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.graph_type"]], "graph_type (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.graph_type"]], "has_edge() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.has_edge"]], "has_edge() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.has_edge"]], "has_node() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.has_node"]], "has_node() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.has_node"]], "has_predecessor() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.has_predecessor"]], "has_successor() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.has_successor"]], "in_degree (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.in_degree"]], "in_edges (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.in_edges"]], "is_directed() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.is_directed"]], "is_directed() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.is_directed"]], "is_multigraph() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.is_multigraph"]], "is_multigraph() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.is_multigraph"]], "key (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.key"]], "key (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.key"]], "name (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.name"]], "name (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.name"]], "nbunch_iter() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.nbunch_iter"]], "nbunch_iter() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.nbunch_iter"]], "neighbors() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.neighbors"]], "neighbors() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.neighbors"]], "node_attr_dict_factory (graphscope.nx.digraph attribute)": [[309, "graphscope.nx.DiGraph.node_attr_dict_factory"]], "node_attr_dict_factory (graphscope.nx.graph attribute)": [[309, "graphscope.nx.Graph.node_attr_dict_factory"]], "node_dict_factory (graphscope.nx.digraph attribute)": [[309, "graphscope.nx.DiGraph.node_dict_factory"]], "node_dict_factory (graphscope.nx.graph attribute)": [[309, "graphscope.nx.Graph.node_dict_factory"]], "nodes (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.nodes"]], "nodes (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.nodes"]], "number_of_edges() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.number_of_edges"]], "number_of_edges() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.number_of_edges"]], "number_of_nodes() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.number_of_nodes"]], "number_of_nodes() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.number_of_nodes"]], "op (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.op"]], "op (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.op"]], "order() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.order"]], "order() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.order"]], "out_degree (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.out_degree"]], "out_edges (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.out_edges"]], "pred (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.pred"]], "predecessors() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.predecessors"]], "remove_edge() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.remove_edge"]], "remove_edge() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.remove_edge"]], "remove_edges_from() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.remove_edges_from"]], "remove_edges_from() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.remove_edges_from"]], "remove_node() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.remove_node"]], "remove_node() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.remove_node"]], "remove_nodes_from() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.remove_nodes_from"]], "remove_nodes_from() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.remove_nodes_from"]], "reverse() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.reverse"]], "schema (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.schema"]], "schema (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.schema"]], "session (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.session"]], "session (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.session"]], "session_id (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.session_id"]], "session_id (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.session_id"]], "set_edge_data() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.set_edge_data"]], "set_edge_data() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.set_edge_data"]], "set_node_data() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.set_node_data"]], "set_node_data() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.set_node_data"]], "signature (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.signature"]], "signature (graphscope.nx.graph property)": [[309, "graphscope.nx.Graph.signature"]], "size() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.size"]], "size() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.size"]], "subgraph() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.subgraph"]], "subgraph() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.subgraph"]], "succ (graphscope.nx.digraph property)": [[309, "graphscope.nx.DiGraph.succ"]], "successors() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.successors"]], "to_directed() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.to_directed"]], "to_directed() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.to_directed"]], "to_undirected() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.to_undirected"]], "to_undirected() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.to_undirected"]], "to_undirected_class() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.to_undirected_class"]], "to_undirected_class() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.to_undirected_class"]], "update() (graphscope.nx.digraph method)": [[309, "graphscope.nx.DiGraph.update"]], "update() (graphscope.nx.graph method)": [[309, "graphscope.nx.Graph.update"]], "read_adjlist() (in module graphscope.nx)": [[311, "graphscope.nx.read_adjlist"]], "read_edgelist() (in module graphscope.nx)": [[311, "graphscope.nx.read_edgelist"]], "__init__() (in module graphscope.nx.graph)": [[312, "graphscope.nx.Graph.__init__"]], "_convert_arrow_to_dynamic() (in module graphscope.nx.graph)": [[312, "graphscope.nx.Graph._convert_arrow_to_dynamic"]], "operation (class in graphscope.framework.operation)": [[313, "graphscope.framework.operation.Operation"]], "graphscope.framework.dag_utils": [[313, "module-graphscope.framework.dag_utils"]], "session (class in graphscope)": [[316, "graphscope.Session"]], "__enter__() (graphscope.session method)": [[316, "graphscope.Session.__enter__"]], "__exit__() (graphscope.session method)": [[316, "graphscope.Session.__exit__"]], "__init__() (graphscope.session method)": [[316, "graphscope.Session.__init__"]], "add_lib() (graphscope.session method)": [[316, "graphscope.Session.add_lib"]], "as_default() (graphscope.session method)": [[316, "graphscope.Session.as_default"]], "close() (graphscope.session method)": [[316, "graphscope.Session.close"]], "connected() (graphscope.session method)": [[316, "graphscope.Session.connected"]], "engine_config (graphscope.session property)": [[316, "graphscope.Session.engine_config"]], "g() (graphscope.session method)": [[316, "graphscope.Session.g"]], "get_config() (graphscope.session method)": [[316, "graphscope.Session.get_config"]], "get_vineyard_object_mapping_table() (graphscope.session method)": [[316, "graphscope.Session.get_vineyard_object_mapping_table"]], "graphlearn() (graphscope.session method)": [[316, "graphscope.Session.graphlearn"]], "info (graphscope.session property)": [[316, "graphscope.Session.info"]], "interactive() (graphscope.session method)": [[316, "graphscope.Session.interactive"]], "load_from() (graphscope.session method)": [[316, "graphscope.Session.load_from"]], "load_from_gar() (graphscope.session method)": [[316, "graphscope.Session.load_from_gar"]], "restore_from_pvc() (graphscope.session method)": [[316, "graphscope.Session.restore_from_pvc"]], "run_fetches() (graphscope.session method)": [[316, "graphscope.Session.run_fetches"]], "store_to_pvc() (graphscope.session method)": [[316, "graphscope.Session.store_to_pvc"]]}})